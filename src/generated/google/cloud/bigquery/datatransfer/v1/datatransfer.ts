// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/datatransfer/v1/datatransfer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../../protobuf/duration.js";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { DoubleValue } from "../../../../protobuf/wrappers.js";
import {
  TransferConfig,
  TransferMessage,
  TransferMessage_MessageSeverity,
  transferMessage_MessageSeverityFromJSON,
  transferMessage_MessageSeverityToJSON,
  TransferRun,
  TransferState,
  transferStateFromJSON,
  transferStateToJSON,
  TransferType,
  transferTypeFromJSON,
  transferTypeToJSON,
} from "./transfer.js";

export const protobufPackage = "google.cloud.bigquery.datatransfer.v1";

/** A parameter used to define custom fields in a data source definition. */
export interface DataSourceParameter {
  /** Parameter identifier. */
  paramId: string;
  /** Parameter display name in the user interface. */
  displayName: string;
  /** Parameter description. */
  description: string;
  /** Parameter type. */
  type: DataSourceParameter_Type;
  /** Is parameter required. */
  required: boolean;
  /** Deprecated. This field has no effect. */
  repeated: boolean;
  /** Regular expression which can be used for parameter validation. */
  validationRegex: string;
  /** All possible values for the parameter. */
  allowedValues: string[];
  /** For integer and double values specifies minimum allowed value. */
  minValue:
    | number
    | undefined;
  /** For integer and double values specifies maximum allowed value. */
  maxValue:
    | number
    | undefined;
  /** Deprecated. This field has no effect. */
  fields: DataSourceParameter[];
  /**
   * Description of the requirements for this field, in case the user input does
   * not fulfill the regex pattern or min/max values.
   */
  validationDescription: string;
  /** URL to a help document to further explain the naming requirements. */
  validationHelpUrl: string;
  /** Cannot be changed after initial creation. */
  immutable: boolean;
  /** Deprecated. This field has no effect. */
  recurse: boolean;
  /**
   * If true, it should not be used in new transfers, and it should not be
   * visible to users.
   */
  deprecated: boolean;
}

/** Parameter type. */
export enum DataSourceParameter_Type {
  /** TYPE_UNSPECIFIED - Type unspecified. */
  TYPE_UNSPECIFIED = 0,
  /** STRING - String parameter. */
  STRING = 1,
  /**
   * INTEGER - Integer parameter (64-bits).
   * Will be serialized to json as string.
   */
  INTEGER = 2,
  /** DOUBLE - Double precision floating point parameter. */
  DOUBLE = 3,
  /** BOOLEAN - Boolean parameter. */
  BOOLEAN = 4,
  /** RECORD - Deprecated. This field has no effect. */
  RECORD = 5,
  /** PLUS_PAGE - Page ID for a Google+ Page. */
  PLUS_PAGE = 6,
  /** LIST - List of strings parameter. */
  LIST = 7,
  UNRECOGNIZED = -1,
}

export function dataSourceParameter_TypeFromJSON(object: any): DataSourceParameter_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return DataSourceParameter_Type.TYPE_UNSPECIFIED;
    case 1:
    case "STRING":
      return DataSourceParameter_Type.STRING;
    case 2:
    case "INTEGER":
      return DataSourceParameter_Type.INTEGER;
    case 3:
    case "DOUBLE":
      return DataSourceParameter_Type.DOUBLE;
    case 4:
    case "BOOLEAN":
      return DataSourceParameter_Type.BOOLEAN;
    case 5:
    case "RECORD":
      return DataSourceParameter_Type.RECORD;
    case 6:
    case "PLUS_PAGE":
      return DataSourceParameter_Type.PLUS_PAGE;
    case 7:
    case "LIST":
      return DataSourceParameter_Type.LIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataSourceParameter_Type.UNRECOGNIZED;
  }
}

export function dataSourceParameter_TypeToJSON(object: DataSourceParameter_Type): string {
  switch (object) {
    case DataSourceParameter_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case DataSourceParameter_Type.STRING:
      return "STRING";
    case DataSourceParameter_Type.INTEGER:
      return "INTEGER";
    case DataSourceParameter_Type.DOUBLE:
      return "DOUBLE";
    case DataSourceParameter_Type.BOOLEAN:
      return "BOOLEAN";
    case DataSourceParameter_Type.RECORD:
      return "RECORD";
    case DataSourceParameter_Type.PLUS_PAGE:
      return "PLUS_PAGE";
    case DataSourceParameter_Type.LIST:
      return "LIST";
    case DataSourceParameter_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Defines the properties and custom parameters for a data source. */
export interface DataSource {
  /** Output only. Data source resource name. */
  name: string;
  /** Data source id. */
  dataSourceId: string;
  /** User friendly data source name. */
  displayName: string;
  /** User friendly data source description string. */
  description: string;
  /** Data source client id which should be used to receive refresh token. */
  clientId: string;
  /**
   * Api auth scopes for which refresh token needs to be obtained. These are
   * scopes needed by a data source to prepare data and ingest them into
   * BigQuery, e.g., https://www.googleapis.com/auth/bigquery
   */
  scopes: string[];
  /**
   * Deprecated. This field has no effect.
   *
   * @deprecated
   */
  transferType: TransferType;
  /**
   * Deprecated. This field has no effect.
   *
   * @deprecated
   */
  supportsMultipleTransfers: boolean;
  /**
   * The number of seconds to wait for an update from the data source
   * before the Data Transfer Service marks the transfer as FAILED.
   */
  updateDeadlineSeconds: number;
  /**
   * Default data transfer schedule.
   * Examples of valid schedules include:
   * `1st,3rd monday of month 15:30`,
   * `every wed,fri of jan,jun 13:15`, and
   * `first sunday of quarter 00:00`.
   */
  defaultSchedule: string;
  /**
   * Specifies whether the data source supports a user defined schedule, or
   * operates on the default schedule.
   * When set to `true`, user can override default schedule.
   */
  supportsCustomSchedule: boolean;
  /** Data source parameters. */
  parameters: DataSourceParameter[];
  /** Url for the help document for this data source. */
  helpUrl: string;
  /** Indicates the type of authorization. */
  authorizationType: DataSource_AuthorizationType;
  /**
   * Specifies whether the data source supports automatic data refresh for the
   * past few days, and how it's supported.
   * For some data sources, data might not be complete until a few days later,
   * so it's useful to refresh data automatically.
   */
  dataRefreshType: DataSource_DataRefreshType;
  /**
   * Default data refresh window on days.
   * Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.
   */
  defaultDataRefreshWindowDays: number;
  /**
   * Disables backfilling and manual run scheduling
   * for the data source.
   */
  manualRunsDisabled: boolean;
  /** The minimum interval for scheduler to schedule runs. */
  minimumScheduleInterval: Duration | undefined;
}

/** The type of authorization needed for this data source. */
export enum DataSource_AuthorizationType {
  /** AUTHORIZATION_TYPE_UNSPECIFIED - Type unspecified. */
  AUTHORIZATION_TYPE_UNSPECIFIED = 0,
  /**
   * AUTHORIZATION_CODE - Use OAuth 2 authorization codes that can be exchanged
   * for a refresh token on the backend.
   */
  AUTHORIZATION_CODE = 1,
  /**
   * GOOGLE_PLUS_AUTHORIZATION_CODE - Return an authorization code for a given Google+ page that can then be
   * exchanged for a refresh token on the backend.
   */
  GOOGLE_PLUS_AUTHORIZATION_CODE = 2,
  /** FIRST_PARTY_OAUTH - Use First Party OAuth. */
  FIRST_PARTY_OAUTH = 3,
  UNRECOGNIZED = -1,
}

export function dataSource_AuthorizationTypeFromJSON(object: any): DataSource_AuthorizationType {
  switch (object) {
    case 0:
    case "AUTHORIZATION_TYPE_UNSPECIFIED":
      return DataSource_AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED;
    case 1:
    case "AUTHORIZATION_CODE":
      return DataSource_AuthorizationType.AUTHORIZATION_CODE;
    case 2:
    case "GOOGLE_PLUS_AUTHORIZATION_CODE":
      return DataSource_AuthorizationType.GOOGLE_PLUS_AUTHORIZATION_CODE;
    case 3:
    case "FIRST_PARTY_OAUTH":
      return DataSource_AuthorizationType.FIRST_PARTY_OAUTH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataSource_AuthorizationType.UNRECOGNIZED;
  }
}

export function dataSource_AuthorizationTypeToJSON(object: DataSource_AuthorizationType): string {
  switch (object) {
    case DataSource_AuthorizationType.AUTHORIZATION_TYPE_UNSPECIFIED:
      return "AUTHORIZATION_TYPE_UNSPECIFIED";
    case DataSource_AuthorizationType.AUTHORIZATION_CODE:
      return "AUTHORIZATION_CODE";
    case DataSource_AuthorizationType.GOOGLE_PLUS_AUTHORIZATION_CODE:
      return "GOOGLE_PLUS_AUTHORIZATION_CODE";
    case DataSource_AuthorizationType.FIRST_PARTY_OAUTH:
      return "FIRST_PARTY_OAUTH";
    case DataSource_AuthorizationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents how the data source supports data auto refresh. */
export enum DataSource_DataRefreshType {
  /** DATA_REFRESH_TYPE_UNSPECIFIED - The data source won't support data auto refresh, which is default value. */
  DATA_REFRESH_TYPE_UNSPECIFIED = 0,
  /**
   * SLIDING_WINDOW - The data source supports data auto refresh, and runs will be scheduled
   * for the past few days. Does not allow custom values to be set for each
   * transfer config.
   */
  SLIDING_WINDOW = 1,
  /**
   * CUSTOM_SLIDING_WINDOW - The data source supports data auto refresh, and runs will be scheduled
   * for the past few days. Allows custom values to be set for each transfer
   * config.
   */
  CUSTOM_SLIDING_WINDOW = 2,
  UNRECOGNIZED = -1,
}

export function dataSource_DataRefreshTypeFromJSON(object: any): DataSource_DataRefreshType {
  switch (object) {
    case 0:
    case "DATA_REFRESH_TYPE_UNSPECIFIED":
      return DataSource_DataRefreshType.DATA_REFRESH_TYPE_UNSPECIFIED;
    case 1:
    case "SLIDING_WINDOW":
      return DataSource_DataRefreshType.SLIDING_WINDOW;
    case 2:
    case "CUSTOM_SLIDING_WINDOW":
      return DataSource_DataRefreshType.CUSTOM_SLIDING_WINDOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataSource_DataRefreshType.UNRECOGNIZED;
  }
}

export function dataSource_DataRefreshTypeToJSON(object: DataSource_DataRefreshType): string {
  switch (object) {
    case DataSource_DataRefreshType.DATA_REFRESH_TYPE_UNSPECIFIED:
      return "DATA_REFRESH_TYPE_UNSPECIFIED";
    case DataSource_DataRefreshType.SLIDING_WINDOW:
      return "SLIDING_WINDOW";
    case DataSource_DataRefreshType.CUSTOM_SLIDING_WINDOW:
      return "CUSTOM_SLIDING_WINDOW";
    case DataSource_DataRefreshType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A request to get data source info. */
export interface GetDataSourceRequest {
  /**
   * Required. The field will contain name of the resource requested, for
   * example: `projects/{project_id}/dataSources/{data_source_id}` or
   * `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`
   */
  name: string;
}

/** Request to list supported data sources and their data transfer settings. */
export interface ListDataSourcesRequest {
  /**
   * Required. The BigQuery project id for which data sources should be
   * returned. Must be in the form: `projects/{project_id}` or
   * `projects/{project_id}/locations/{location_id}`
   */
  parent: string;
  /**
   * Pagination token, which can be used to request a specific page
   * of `ListDataSourcesRequest` list results. For multiple-page
   * results, `ListDataSourcesResponse` outputs
   * a `next_page` token, which can be used as the
   * `page_token` value to request the next page of list results.
   */
  pageToken: string;
  /** Page size. The default page size is the maximum value of 1000 results. */
  pageSize: number;
}

/** Returns list of supported data sources and their metadata. */
export interface ListDataSourcesResponse {
  /** List of supported data sources and their transfer settings. */
  dataSources: DataSource[];
  /**
   * Output only. The next-pagination token. For multiple-page list results,
   * this token can be used as the
   * `ListDataSourcesRequest.page_token`
   * to request the next page of list results.
   */
  nextPageToken: string;
}

/**
 * A request to create a data transfer configuration. If new credentials are
 * needed for this transfer configuration, authorization info must be provided.
 * If authorization info is provided, the transfer configuration will be
 * associated with the user id corresponding to the authorization info.
 * Otherwise, the transfer configuration will be associated with the calling
 * user.
 *
 * When using a cross project service account for creating a transfer config,
 * you must enable cross project service account usage. For more information,
 * see [Disable attachment of service accounts to resources in other
 * projects](https://cloud.google.com/resource-manager/docs/organization-policy/restricting-service-accounts#disable_cross_project_service_accounts).
 */
export interface CreateTransferConfigRequest {
  /**
   * Required. The BigQuery project id where the transfer configuration should
   * be created. Must be in the format
   * projects/{project_id}/locations/{location_id} or projects/{project_id}. If
   * specified location and location of the destination bigquery dataset do not
   * match - the request will fail.
   */
  parent: string;
  /** Required. Data transfer configuration to create. */
  transferConfig:
    | TransferConfig
    | undefined;
  /**
   * Deprecated: Authorization code was required when
   * `transferConfig.dataSourceId` is 'youtube_channel' but it is no longer used
   * in any data sources. Use `version_info` instead.
   *
   * Optional OAuth2 authorization code to use with this transfer configuration.
   * This is required only if `transferConfig.dataSourceId` is 'youtube_channel'
   * and new credentials are needed, as indicated by `CheckValidCreds`. In order
   * to obtain authorization_code, make a request to the following URL:
   * <pre class="prettyprint" suppresswarning="true">
   * https://bigquery.cloud.google.com/datatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=authorization_code&client_id=<var>client_id</var>&scope=<var>data_source_scopes</var>
   * </pre>
   * * The <var>client_id</var> is the OAuth client_id of the data source as
   * returned by ListDataSources method.
   * * <var>data_source_scopes</var> are the scopes returned by ListDataSources
   * method.
   *
   * Note that this should not be set when `service_account_name` is used to
   * create the transfer config.
   *
   * @deprecated
   */
  authorizationCode: string;
  /**
   * Optional version info. This parameter replaces `authorization_code` which
   * is no longer used in any data sources. This is required only if
   * `transferConfig.dataSourceId` is 'youtube_channel' *or* new credentials
   * are needed, as indicated by `CheckValidCreds`. In order to obtain version
   * info, make a request to the following URL:
   * <pre class="prettyprint" suppresswarning="true">
   * https://bigquery.cloud.google.com/datatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=version_info&client_id=<var>client_id</var>&scope=<var>data_source_scopes</var>
   * </pre>
   * * The <var>client_id</var> is the OAuth client_id of the data source as
   * returned by ListDataSources method.
   * * <var>data_source_scopes</var> are the scopes returned by ListDataSources
   * method.
   *
   * Note that this should not be set when `service_account_name` is used to
   * create the transfer config.
   */
  versionInfo: string;
  /**
   * Optional service account email. If this field is set, the transfer config
   * will be created with this service account's credentials. It requires that
   * the requesting user calling this API has permissions to act as this service
   * account.
   *
   * Note that not all data sources support service account credentials when
   * creating a transfer config. For the latest list of data sources, read about
   * [using service
   * accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
   */
  serviceAccountName: string;
}

/**
 * A request to update a transfer configuration. To update the user id of the
 * transfer configuration, authorization info needs to be provided.
 *
 * When using a cross project service account for updating a transfer config,
 * you must enable cross project service account usage. For more information,
 * see [Disable attachment of service accounts to resources in other
 * projects](https://cloud.google.com/resource-manager/docs/organization-policy/restricting-service-accounts#disable_cross_project_service_accounts).
 */
export interface UpdateTransferConfigRequest {
  /** Required. Data transfer configuration to create. */
  transferConfig:
    | TransferConfig
    | undefined;
  /**
   * Deprecated: Authorization code was required when
   * `transferConfig.dataSourceId` is 'youtube_channel' but it is no longer used
   * in any data sources. Use `version_info` instead.
   *
   * Optional OAuth2 authorization code to use with this transfer configuration.
   * This is required only if `transferConfig.dataSourceId` is 'youtube_channel'
   * and new credentials are needed, as indicated by `CheckValidCreds`. In order
   * to obtain authorization_code, make a request to the following URL:
   * <pre class="prettyprint" suppresswarning="true">
   * https://bigquery.cloud.google.com/datatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=authorization_code&client_id=<var>client_id</var>&scope=<var>data_source_scopes</var>
   * </pre>
   * * The <var>client_id</var> is the OAuth client_id of the data source as
   * returned by ListDataSources method.
   * * <var>data_source_scopes</var> are the scopes returned by ListDataSources
   * method.
   *
   * Note that this should not be set when `service_account_name` is used to
   * update the transfer config.
   *
   * @deprecated
   */
  authorizationCode: string;
  /** Required. Required list of fields to be updated in this request. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional version info. This parameter replaces `authorization_code` which
   * is no longer used in any data sources. This is required only if
   * `transferConfig.dataSourceId` is 'youtube_channel' *or* new credentials
   * are needed, as indicated by `CheckValidCreds`. In order to obtain version
   * info, make a request to the following URL:
   * <pre class="prettyprint" suppresswarning="true">
   * https://bigquery.cloud.google.com/datatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=version_info&client_id=<var>client_id</var>&scope=<var>data_source_scopes</var>
   * </pre>
   * * The <var>client_id</var> is the OAuth client_id of the data source as
   * returned by ListDataSources method.
   * * <var>data_source_scopes</var> are the scopes returned by ListDataSources
   * method.
   *
   * Note that this should not be set when `service_account_name` is used to
   * update the transfer config.
   */
  versionInfo: string;
  /**
   * Optional service account email. If this field is set, the transfer config
   * will be created with this service account's credentials. It requires that
   * the requesting user calling this API has permissions to act as this service
   * account.
   *
   * Note that not all data sources support service account credentials when
   * creating a transfer config. For the latest list of data sources, read about
   * [using service
   * accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
   */
  serviceAccountName: string;
}

/** A request to get data transfer information. */
export interface GetTransferConfigRequest {
  /**
   * Required. The field will contain name of the resource requested, for
   * example: `projects/{project_id}/transferConfigs/{config_id}` or
   * `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
   */
  name: string;
}

/**
 * A request to delete data transfer information. All associated transfer runs
 * and log messages will be deleted as well.
 */
export interface DeleteTransferConfigRequest {
  /**
   * Required. The field will contain name of the resource requested, for
   * example: `projects/{project_id}/transferConfigs/{config_id}` or
   * `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
   */
  name: string;
}

/** A request to get data transfer run information. */
export interface GetTransferRunRequest {
  /**
   * Required. The field will contain name of the resource requested, for
   * example: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
   * or
   * `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   */
  name: string;
}

/** A request to delete data transfer run information. */
export interface DeleteTransferRunRequest {
  /**
   * Required. The field will contain name of the resource requested, for
   * example: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
   * or
   * `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   */
  name: string;
}

/** A request to list data transfers configured for a BigQuery project. */
export interface ListTransferConfigsRequest {
  /**
   * Required. The BigQuery project id for which transfer configs
   * should be returned: `projects/{project_id}` or
   * `projects/{project_id}/locations/{location_id}`
   */
  parent: string;
  /** When specified, only configurations of requested data sources are returned. */
  dataSourceIds: string[];
  /**
   * Pagination token, which can be used to request a specific page
   * of `ListTransfersRequest` list results. For multiple-page
   * results, `ListTransfersResponse` outputs
   * a `next_page` token, which can be used as the
   * `page_token` value to request the next page of list results.
   */
  pageToken: string;
  /** Page size. The default page size is the maximum value of 1000 results. */
  pageSize: number;
}

/** The returned list of pipelines in the project. */
export interface ListTransferConfigsResponse {
  /** Output only. The stored pipeline transfer configurations. */
  transferConfigs: TransferConfig[];
  /**
   * Output only. The next-pagination token. For multiple-page list results,
   * this token can be used as the
   * `ListTransferConfigsRequest.page_token`
   * to request the next page of list results.
   */
  nextPageToken: string;
}

/** A request to list data transfer runs. */
export interface ListTransferRunsRequest {
  /**
   * Required. Name of transfer configuration for which transfer runs should be
   * retrieved. Format of transfer configuration resource name is:
   * `projects/{project_id}/transferConfigs/{config_id}` or
   * `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   */
  parent: string;
  /** When specified, only transfer runs with requested states are returned. */
  states: TransferState[];
  /**
   * Pagination token, which can be used to request a specific page
   * of `ListTransferRunsRequest` list results. For multiple-page
   * results, `ListTransferRunsResponse` outputs
   * a `next_page` token, which can be used as the
   * `page_token` value to request the next page of list results.
   */
  pageToken: string;
  /** Page size. The default page size is the maximum value of 1000 results. */
  pageSize: number;
  /** Indicates how run attempts are to be pulled. */
  runAttempt: ListTransferRunsRequest_RunAttempt;
}

/** Represents which runs should be pulled. */
export enum ListTransferRunsRequest_RunAttempt {
  /** RUN_ATTEMPT_UNSPECIFIED - All runs should be returned. */
  RUN_ATTEMPT_UNSPECIFIED = 0,
  /** LATEST - Only latest run per day should be returned. */
  LATEST = 1,
  UNRECOGNIZED = -1,
}

export function listTransferRunsRequest_RunAttemptFromJSON(object: any): ListTransferRunsRequest_RunAttempt {
  switch (object) {
    case 0:
    case "RUN_ATTEMPT_UNSPECIFIED":
      return ListTransferRunsRequest_RunAttempt.RUN_ATTEMPT_UNSPECIFIED;
    case 1:
    case "LATEST":
      return ListTransferRunsRequest_RunAttempt.LATEST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ListTransferRunsRequest_RunAttempt.UNRECOGNIZED;
  }
}

export function listTransferRunsRequest_RunAttemptToJSON(object: ListTransferRunsRequest_RunAttempt): string {
  switch (object) {
    case ListTransferRunsRequest_RunAttempt.RUN_ATTEMPT_UNSPECIFIED:
      return "RUN_ATTEMPT_UNSPECIFIED";
    case ListTransferRunsRequest_RunAttempt.LATEST:
      return "LATEST";
    case ListTransferRunsRequest_RunAttempt.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The returned list of pipelines in the project. */
export interface ListTransferRunsResponse {
  /** Output only. The stored pipeline transfer runs. */
  transferRuns: TransferRun[];
  /**
   * Output only. The next-pagination token. For multiple-page list results,
   * this token can be used as the
   * `ListTransferRunsRequest.page_token`
   * to request the next page of list results.
   */
  nextPageToken: string;
}

/** A request to get user facing log messages associated with data transfer run. */
export interface ListTransferLogsRequest {
  /**
   * Required. Transfer run name in the form:
   * `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
   * `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   */
  parent: string;
  /**
   * Pagination token, which can be used to request a specific page
   * of `ListTransferLogsRequest` list results. For multiple-page
   * results, `ListTransferLogsResponse` outputs
   * a `next_page` token, which can be used as the
   * `page_token` value to request the next page of list results.
   */
  pageToken: string;
  /** Page size. The default page size is the maximum value of 1000 results. */
  pageSize: number;
  /**
   * Message types to return. If not populated - INFO, WARNING and ERROR
   * messages are returned.
   */
  messageTypes: TransferMessage_MessageSeverity[];
}

/** The returned list transfer run messages. */
export interface ListTransferLogsResponse {
  /** Output only. The stored pipeline transfer messages. */
  transferMessages: TransferMessage[];
  /**
   * Output only. The next-pagination token. For multiple-page list results,
   * this token can be used as the
   * `GetTransferRunLogRequest.page_token`
   * to request the next page of list results.
   */
  nextPageToken: string;
}

/**
 * A request to determine whether the user has valid credentials. This method
 * is used to limit the number of OAuth popups in the user interface. The
 * user id is inferred from the API call context.
 * If the data source has the Google+ authorization type, this method
 * returns false, as it cannot be determined whether the credentials are
 * already valid merely based on the user id.
 */
export interface CheckValidCredsRequest {
  /**
   * Required. The data source in the form:
   * `projects/{project_id}/dataSources/{data_source_id}` or
   * `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`.
   */
  name: string;
}

/** A response indicating whether the credentials exist and are valid. */
export interface CheckValidCredsResponse {
  /** If set to `true`, the credentials exist and are valid. */
  hasValidCreds: boolean;
}

/** A request to schedule transfer runs for a time range. */
export interface ScheduleTransferRunsRequest {
  /**
   * Required. Transfer configuration name in the form:
   * `projects/{project_id}/transferConfigs/{config_id}` or
   * `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   */
  parent: string;
  /**
   * Required. Start time of the range of transfer runs. For example,
   * `"2017-05-25T00:00:00+00:00"`.
   */
  startTime:
    | Date
    | undefined;
  /**
   * Required. End time of the range of transfer runs. For example,
   * `"2017-05-30T00:00:00+00:00"`.
   */
  endTime: Date | undefined;
}

/** A response to schedule transfer runs for a time range. */
export interface ScheduleTransferRunsResponse {
  /** The transfer runs that were scheduled. */
  runs: TransferRun[];
}

/** A request to start manual transfer runs. */
export interface StartManualTransferRunsRequest {
  /**
   * Required. Transfer configuration name in the form:
   * `projects/{project_id}/transferConfigs/{config_id}` or
   * `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   */
  parent: string;
  /**
   * A time_range start and end timestamp for historical data files or reports
   * that are scheduled to be transferred by the scheduled transfer run.
   * requested_time_range must be a past time and cannot include future time
   * values.
   */
  requestedTimeRange?:
    | StartManualTransferRunsRequest_TimeRange
    | undefined;
  /**
   * A run_time timestamp for historical data files or reports
   * that are scheduled to be transferred by the scheduled transfer run.
   * requested_run_time must be a past time and cannot include future time
   * values.
   */
  requestedRunTime?: Date | undefined;
}

/**
 * A specification for a time range, this will request transfer runs with
 * run_time between start_time (inclusive) and end_time (exclusive).
 */
export interface StartManualTransferRunsRequest_TimeRange {
  /**
   * Start time of the range of transfer runs. For example,
   * `"2017-05-25T00:00:00+00:00"`. The start_time must be strictly less than
   * the end_time. Creates transfer runs where run_time is in the range
   * between start_time (inclusive) and end_time (exclusive).
   */
  startTime:
    | Date
    | undefined;
  /**
   * End time of the range of transfer runs. For example,
   * `"2017-05-30T00:00:00+00:00"`. The end_time must not be in the future.
   * Creates transfer runs where run_time is in the range between start_time
   * (inclusive) and end_time (exclusive).
   */
  endTime: Date | undefined;
}

/** A response to start manual transfer runs. */
export interface StartManualTransferRunsResponse {
  /** The transfer runs that were created. */
  runs: TransferRun[];
}

/**
 * A request to enroll a set of data sources so they are visible in the
 * BigQuery UI's `Transfer` tab.
 */
export interface EnrollDataSourcesRequest {
  /**
   * Required. The name of the project resource in the form:
   * `projects/{project_id}`
   */
  name: string;
  /**
   * Data sources that are enrolled. It is required to provide at least one
   * data source id.
   */
  dataSourceIds: string[];
}

/**
 * A request to unenroll a set of data sources so they are no longer visible in
 * the BigQuery UI's `Transfer` tab.
 */
export interface UnenrollDataSourcesRequest {
  /**
   * Required. The name of the project resource in the form:
   * `projects/{project_id}`
   */
  name: string;
  /**
   * Data sources that are unenrolled. It is required to provide at least one
   * data source id.
   */
  dataSourceIds: string[];
}

function createBaseDataSourceParameter(): DataSourceParameter {
  return {
    paramId: "",
    displayName: "",
    description: "",
    type: 0,
    required: false,
    repeated: false,
    validationRegex: "",
    allowedValues: [],
    minValue: undefined,
    maxValue: undefined,
    fields: [],
    validationDescription: "",
    validationHelpUrl: "",
    immutable: false,
    recurse: false,
    deprecated: false,
  };
}

export const DataSourceParameter: MessageFns<DataSourceParameter> = {
  encode(message: DataSourceParameter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paramId !== "") {
      writer.uint32(10).string(message.paramId);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.required !== false) {
      writer.uint32(40).bool(message.required);
    }
    if (message.repeated !== false) {
      writer.uint32(48).bool(message.repeated);
    }
    if (message.validationRegex !== "") {
      writer.uint32(58).string(message.validationRegex);
    }
    for (const v of message.allowedValues) {
      writer.uint32(66).string(v!);
    }
    if (message.minValue !== undefined) {
      DoubleValue.encode({ value: message.minValue! }, writer.uint32(74).fork()).join();
    }
    if (message.maxValue !== undefined) {
      DoubleValue.encode({ value: message.maxValue! }, writer.uint32(82).fork()).join();
    }
    for (const v of message.fields) {
      DataSourceParameter.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.validationDescription !== "") {
      writer.uint32(98).string(message.validationDescription);
    }
    if (message.validationHelpUrl !== "") {
      writer.uint32(106).string(message.validationHelpUrl);
    }
    if (message.immutable !== false) {
      writer.uint32(112).bool(message.immutable);
    }
    if (message.recurse !== false) {
      writer.uint32(120).bool(message.recurse);
    }
    if (message.deprecated !== false) {
      writer.uint32(160).bool(message.deprecated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataSourceParameter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataSourceParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.paramId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.required = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.repeated = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.validationRegex = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.allowedValues.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.minValue = DoubleValue.decode(reader, reader.uint32()).value;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.maxValue = DoubleValue.decode(reader, reader.uint32()).value;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.fields.push(DataSourceParameter.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.validationDescription = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.validationHelpUrl = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.immutable = reader.bool();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.recurse = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.deprecated = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataSourceParameter {
    return {
      paramId: isSet(object.paramId) ? globalThis.String(object.paramId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      type: isSet(object.type) ? dataSourceParameter_TypeFromJSON(object.type) : 0,
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      repeated: isSet(object.repeated) ? globalThis.Boolean(object.repeated) : false,
      validationRegex: isSet(object.validationRegex) ? globalThis.String(object.validationRegex) : "",
      allowedValues: globalThis.Array.isArray(object?.allowedValues)
        ? object.allowedValues.map((e: any) => globalThis.String(e))
        : [],
      minValue: isSet(object.minValue) ? Number(object.minValue) : undefined,
      maxValue: isSet(object.maxValue) ? Number(object.maxValue) : undefined,
      fields: globalThis.Array.isArray(object?.fields)
        ? object.fields.map((e: any) => DataSourceParameter.fromJSON(e))
        : [],
      validationDescription: isSet(object.validationDescription) ? globalThis.String(object.validationDescription) : "",
      validationHelpUrl: isSet(object.validationHelpUrl) ? globalThis.String(object.validationHelpUrl) : "",
      immutable: isSet(object.immutable) ? globalThis.Boolean(object.immutable) : false,
      recurse: isSet(object.recurse) ? globalThis.Boolean(object.recurse) : false,
      deprecated: isSet(object.deprecated) ? globalThis.Boolean(object.deprecated) : false,
    };
  },

  toJSON(message: DataSourceParameter): unknown {
    const obj: any = {};
    if (message.paramId !== "") {
      obj.paramId = message.paramId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.type !== 0) {
      obj.type = dataSourceParameter_TypeToJSON(message.type);
    }
    if (message.required !== false) {
      obj.required = message.required;
    }
    if (message.repeated !== false) {
      obj.repeated = message.repeated;
    }
    if (message.validationRegex !== "") {
      obj.validationRegex = message.validationRegex;
    }
    if (message.allowedValues?.length) {
      obj.allowedValues = message.allowedValues;
    }
    if (message.minValue !== undefined) {
      obj.minValue = message.minValue;
    }
    if (message.maxValue !== undefined) {
      obj.maxValue = message.maxValue;
    }
    if (message.fields?.length) {
      obj.fields = message.fields.map((e) => DataSourceParameter.toJSON(e));
    }
    if (message.validationDescription !== "") {
      obj.validationDescription = message.validationDescription;
    }
    if (message.validationHelpUrl !== "") {
      obj.validationHelpUrl = message.validationHelpUrl;
    }
    if (message.immutable !== false) {
      obj.immutable = message.immutable;
    }
    if (message.recurse !== false) {
      obj.recurse = message.recurse;
    }
    if (message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    return obj;
  },

  create(base?: DeepPartial<DataSourceParameter>): DataSourceParameter {
    return DataSourceParameter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataSourceParameter>): DataSourceParameter {
    const message = createBaseDataSourceParameter();
    message.paramId = object.paramId ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.type = object.type ?? 0;
    message.required = object.required ?? false;
    message.repeated = object.repeated ?? false;
    message.validationRegex = object.validationRegex ?? "";
    message.allowedValues = object.allowedValues?.map((e) => e) || [];
    message.minValue = object.minValue ?? undefined;
    message.maxValue = object.maxValue ?? undefined;
    message.fields = object.fields?.map((e) => DataSourceParameter.fromPartial(e)) || [];
    message.validationDescription = object.validationDescription ?? "";
    message.validationHelpUrl = object.validationHelpUrl ?? "";
    message.immutable = object.immutable ?? false;
    message.recurse = object.recurse ?? false;
    message.deprecated = object.deprecated ?? false;
    return message;
  },
};

function createBaseDataSource(): DataSource {
  return {
    name: "",
    dataSourceId: "",
    displayName: "",
    description: "",
    clientId: "",
    scopes: [],
    transferType: 0,
    supportsMultipleTransfers: false,
    updateDeadlineSeconds: 0,
    defaultSchedule: "",
    supportsCustomSchedule: false,
    parameters: [],
    helpUrl: "",
    authorizationType: 0,
    dataRefreshType: 0,
    defaultDataRefreshWindowDays: 0,
    manualRunsDisabled: false,
    minimumScheduleInterval: undefined,
  };
}

export const DataSource: MessageFns<DataSource> = {
  encode(message: DataSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.dataSourceId !== "") {
      writer.uint32(18).string(message.dataSourceId);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.clientId !== "") {
      writer.uint32(42).string(message.clientId);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.transferType !== 0) {
      writer.uint32(56).int32(message.transferType);
    }
    if (message.supportsMultipleTransfers !== false) {
      writer.uint32(64).bool(message.supportsMultipleTransfers);
    }
    if (message.updateDeadlineSeconds !== 0) {
      writer.uint32(72).int32(message.updateDeadlineSeconds);
    }
    if (message.defaultSchedule !== "") {
      writer.uint32(82).string(message.defaultSchedule);
    }
    if (message.supportsCustomSchedule !== false) {
      writer.uint32(88).bool(message.supportsCustomSchedule);
    }
    for (const v of message.parameters) {
      DataSourceParameter.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.helpUrl !== "") {
      writer.uint32(106).string(message.helpUrl);
    }
    if (message.authorizationType !== 0) {
      writer.uint32(112).int32(message.authorizationType);
    }
    if (message.dataRefreshType !== 0) {
      writer.uint32(120).int32(message.dataRefreshType);
    }
    if (message.defaultDataRefreshWindowDays !== 0) {
      writer.uint32(128).int32(message.defaultDataRefreshWindowDays);
    }
    if (message.manualRunsDisabled !== false) {
      writer.uint32(136).bool(message.manualRunsDisabled);
    }
    if (message.minimumScheduleInterval !== undefined) {
      Duration.encode(message.minimumScheduleInterval, writer.uint32(146).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataSourceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.transferType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.supportsMultipleTransfers = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.updateDeadlineSeconds = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.defaultSchedule = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.supportsCustomSchedule = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.parameters.push(DataSourceParameter.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.helpUrl = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.authorizationType = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.dataRefreshType = reader.int32() as any;
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.defaultDataRefreshWindowDays = reader.int32();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.manualRunsDisabled = reader.bool();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.minimumScheduleInterval = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataSource {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataSourceId: isSet(object.dataSourceId) ? globalThis.String(object.dataSourceId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e: any) => globalThis.String(e)) : [],
      transferType: isSet(object.transferType) ? transferTypeFromJSON(object.transferType) : 0,
      supportsMultipleTransfers: isSet(object.supportsMultipleTransfers)
        ? globalThis.Boolean(object.supportsMultipleTransfers)
        : false,
      updateDeadlineSeconds: isSet(object.updateDeadlineSeconds) ? globalThis.Number(object.updateDeadlineSeconds) : 0,
      defaultSchedule: isSet(object.defaultSchedule) ? globalThis.String(object.defaultSchedule) : "",
      supportsCustomSchedule: isSet(object.supportsCustomSchedule)
        ? globalThis.Boolean(object.supportsCustomSchedule)
        : false,
      parameters: globalThis.Array.isArray(object?.parameters)
        ? object.parameters.map((e: any) => DataSourceParameter.fromJSON(e))
        : [],
      helpUrl: isSet(object.helpUrl) ? globalThis.String(object.helpUrl) : "",
      authorizationType: isSet(object.authorizationType)
        ? dataSource_AuthorizationTypeFromJSON(object.authorizationType)
        : 0,
      dataRefreshType: isSet(object.dataRefreshType) ? dataSource_DataRefreshTypeFromJSON(object.dataRefreshType) : 0,
      defaultDataRefreshWindowDays: isSet(object.defaultDataRefreshWindowDays)
        ? globalThis.Number(object.defaultDataRefreshWindowDays)
        : 0,
      manualRunsDisabled: isSet(object.manualRunsDisabled) ? globalThis.Boolean(object.manualRunsDisabled) : false,
      minimumScheduleInterval: isSet(object.minimumScheduleInterval)
        ? Duration.fromJSON(object.minimumScheduleInterval)
        : undefined,
    };
  },

  toJSON(message: DataSource): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataSourceId !== "") {
      obj.dataSourceId = message.dataSourceId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes;
    }
    if (message.transferType !== 0) {
      obj.transferType = transferTypeToJSON(message.transferType);
    }
    if (message.supportsMultipleTransfers !== false) {
      obj.supportsMultipleTransfers = message.supportsMultipleTransfers;
    }
    if (message.updateDeadlineSeconds !== 0) {
      obj.updateDeadlineSeconds = Math.round(message.updateDeadlineSeconds);
    }
    if (message.defaultSchedule !== "") {
      obj.defaultSchedule = message.defaultSchedule;
    }
    if (message.supportsCustomSchedule !== false) {
      obj.supportsCustomSchedule = message.supportsCustomSchedule;
    }
    if (message.parameters?.length) {
      obj.parameters = message.parameters.map((e) => DataSourceParameter.toJSON(e));
    }
    if (message.helpUrl !== "") {
      obj.helpUrl = message.helpUrl;
    }
    if (message.authorizationType !== 0) {
      obj.authorizationType = dataSource_AuthorizationTypeToJSON(message.authorizationType);
    }
    if (message.dataRefreshType !== 0) {
      obj.dataRefreshType = dataSource_DataRefreshTypeToJSON(message.dataRefreshType);
    }
    if (message.defaultDataRefreshWindowDays !== 0) {
      obj.defaultDataRefreshWindowDays = Math.round(message.defaultDataRefreshWindowDays);
    }
    if (message.manualRunsDisabled !== false) {
      obj.manualRunsDisabled = message.manualRunsDisabled;
    }
    if (message.minimumScheduleInterval !== undefined) {
      obj.minimumScheduleInterval = Duration.toJSON(message.minimumScheduleInterval);
    }
    return obj;
  },

  create(base?: DeepPartial<DataSource>): DataSource {
    return DataSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataSource>): DataSource {
    const message = createBaseDataSource();
    message.name = object.name ?? "";
    message.dataSourceId = object.dataSourceId ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.clientId = object.clientId ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.transferType = object.transferType ?? 0;
    message.supportsMultipleTransfers = object.supportsMultipleTransfers ?? false;
    message.updateDeadlineSeconds = object.updateDeadlineSeconds ?? 0;
    message.defaultSchedule = object.defaultSchedule ?? "";
    message.supportsCustomSchedule = object.supportsCustomSchedule ?? false;
    message.parameters = object.parameters?.map((e) => DataSourceParameter.fromPartial(e)) || [];
    message.helpUrl = object.helpUrl ?? "";
    message.authorizationType = object.authorizationType ?? 0;
    message.dataRefreshType = object.dataRefreshType ?? 0;
    message.defaultDataRefreshWindowDays = object.defaultDataRefreshWindowDays ?? 0;
    message.manualRunsDisabled = object.manualRunsDisabled ?? false;
    message.minimumScheduleInterval =
      (object.minimumScheduleInterval !== undefined && object.minimumScheduleInterval !== null)
        ? Duration.fromPartial(object.minimumScheduleInterval)
        : undefined;
    return message;
  },
};

function createBaseGetDataSourceRequest(): GetDataSourceRequest {
  return { name: "" };
}

export const GetDataSourceRequest: MessageFns<GetDataSourceRequest> = {
  encode(message: GetDataSourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataSourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataSourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataSourceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataSourceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataSourceRequest>): GetDataSourceRequest {
    return GetDataSourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataSourceRequest>): GetDataSourceRequest {
    const message = createBaseGetDataSourceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDataSourcesRequest(): ListDataSourcesRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListDataSourcesRequest: MessageFns<ListDataSourcesRequest> = {
  encode(message: ListDataSourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataSourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataSourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataSourcesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListDataSourcesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataSourcesRequest>): ListDataSourcesRequest {
    return ListDataSourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataSourcesRequest>): ListDataSourcesRequest {
    const message = createBaseListDataSourcesRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListDataSourcesResponse(): ListDataSourcesResponse {
  return { dataSources: [], nextPageToken: "" };
}

export const ListDataSourcesResponse: MessageFns<ListDataSourcesResponse> = {
  encode(message: ListDataSourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataSources) {
      DataSource.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataSourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataSourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataSources.push(DataSource.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataSourcesResponse {
    return {
      dataSources: globalThis.Array.isArray(object?.dataSources)
        ? object.dataSources.map((e: any) => DataSource.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDataSourcesResponse): unknown {
    const obj: any = {};
    if (message.dataSources?.length) {
      obj.dataSources = message.dataSources.map((e) => DataSource.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataSourcesResponse>): ListDataSourcesResponse {
    return ListDataSourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataSourcesResponse>): ListDataSourcesResponse {
    const message = createBaseListDataSourcesResponse();
    message.dataSources = object.dataSources?.map((e) => DataSource.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateTransferConfigRequest(): CreateTransferConfigRequest {
  return { parent: "", transferConfig: undefined, authorizationCode: "", versionInfo: "", serviceAccountName: "" };
}

export const CreateTransferConfigRequest: MessageFns<CreateTransferConfigRequest> = {
  encode(message: CreateTransferConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.transferConfig !== undefined) {
      TransferConfig.encode(message.transferConfig, writer.uint32(18).fork()).join();
    }
    if (message.authorizationCode !== "") {
      writer.uint32(26).string(message.authorizationCode);
    }
    if (message.versionInfo !== "") {
      writer.uint32(42).string(message.versionInfo);
    }
    if (message.serviceAccountName !== "") {
      writer.uint32(50).string(message.serviceAccountName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTransferConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTransferConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.transferConfig = TransferConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.authorizationCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.versionInfo = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.serviceAccountName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTransferConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      transferConfig: isSet(object.transferConfig) ? TransferConfig.fromJSON(object.transferConfig) : undefined,
      authorizationCode: isSet(object.authorizationCode) ? globalThis.String(object.authorizationCode) : "",
      versionInfo: isSet(object.versionInfo) ? globalThis.String(object.versionInfo) : "",
      serviceAccountName: isSet(object.serviceAccountName) ? globalThis.String(object.serviceAccountName) : "",
    };
  },

  toJSON(message: CreateTransferConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.transferConfig !== undefined) {
      obj.transferConfig = TransferConfig.toJSON(message.transferConfig);
    }
    if (message.authorizationCode !== "") {
      obj.authorizationCode = message.authorizationCode;
    }
    if (message.versionInfo !== "") {
      obj.versionInfo = message.versionInfo;
    }
    if (message.serviceAccountName !== "") {
      obj.serviceAccountName = message.serviceAccountName;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTransferConfigRequest>): CreateTransferConfigRequest {
    return CreateTransferConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTransferConfigRequest>): CreateTransferConfigRequest {
    const message = createBaseCreateTransferConfigRequest();
    message.parent = object.parent ?? "";
    message.transferConfig = (object.transferConfig !== undefined && object.transferConfig !== null)
      ? TransferConfig.fromPartial(object.transferConfig)
      : undefined;
    message.authorizationCode = object.authorizationCode ?? "";
    message.versionInfo = object.versionInfo ?? "";
    message.serviceAccountName = object.serviceAccountName ?? "";
    return message;
  },
};

function createBaseUpdateTransferConfigRequest(): UpdateTransferConfigRequest {
  return {
    transferConfig: undefined,
    authorizationCode: "",
    updateMask: undefined,
    versionInfo: "",
    serviceAccountName: "",
  };
}

export const UpdateTransferConfigRequest: MessageFns<UpdateTransferConfigRequest> = {
  encode(message: UpdateTransferConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transferConfig !== undefined) {
      TransferConfig.encode(message.transferConfig, writer.uint32(10).fork()).join();
    }
    if (message.authorizationCode !== "") {
      writer.uint32(26).string(message.authorizationCode);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(34).fork()).join();
    }
    if (message.versionInfo !== "") {
      writer.uint32(42).string(message.versionInfo);
    }
    if (message.serviceAccountName !== "") {
      writer.uint32(50).string(message.serviceAccountName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTransferConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTransferConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transferConfig = TransferConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.authorizationCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.versionInfo = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.serviceAccountName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTransferConfigRequest {
    return {
      transferConfig: isSet(object.transferConfig) ? TransferConfig.fromJSON(object.transferConfig) : undefined,
      authorizationCode: isSet(object.authorizationCode) ? globalThis.String(object.authorizationCode) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      versionInfo: isSet(object.versionInfo) ? globalThis.String(object.versionInfo) : "",
      serviceAccountName: isSet(object.serviceAccountName) ? globalThis.String(object.serviceAccountName) : "",
    };
  },

  toJSON(message: UpdateTransferConfigRequest): unknown {
    const obj: any = {};
    if (message.transferConfig !== undefined) {
      obj.transferConfig = TransferConfig.toJSON(message.transferConfig);
    }
    if (message.authorizationCode !== "") {
      obj.authorizationCode = message.authorizationCode;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.versionInfo !== "") {
      obj.versionInfo = message.versionInfo;
    }
    if (message.serviceAccountName !== "") {
      obj.serviceAccountName = message.serviceAccountName;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTransferConfigRequest>): UpdateTransferConfigRequest {
    return UpdateTransferConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTransferConfigRequest>): UpdateTransferConfigRequest {
    const message = createBaseUpdateTransferConfigRequest();
    message.transferConfig = (object.transferConfig !== undefined && object.transferConfig !== null)
      ? TransferConfig.fromPartial(object.transferConfig)
      : undefined;
    message.authorizationCode = object.authorizationCode ?? "";
    message.updateMask = object.updateMask ?? undefined;
    message.versionInfo = object.versionInfo ?? "";
    message.serviceAccountName = object.serviceAccountName ?? "";
    return message;
  },
};

function createBaseGetTransferConfigRequest(): GetTransferConfigRequest {
  return { name: "" };
}

export const GetTransferConfigRequest: MessageFns<GetTransferConfigRequest> = {
  encode(message: GetTransferConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTransferConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTransferConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTransferConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTransferConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTransferConfigRequest>): GetTransferConfigRequest {
    return GetTransferConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTransferConfigRequest>): GetTransferConfigRequest {
    const message = createBaseGetTransferConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteTransferConfigRequest(): DeleteTransferConfigRequest {
  return { name: "" };
}

export const DeleteTransferConfigRequest: MessageFns<DeleteTransferConfigRequest> = {
  encode(message: DeleteTransferConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTransferConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTransferConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTransferConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTransferConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTransferConfigRequest>): DeleteTransferConfigRequest {
    return DeleteTransferConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTransferConfigRequest>): DeleteTransferConfigRequest {
    const message = createBaseDeleteTransferConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetTransferRunRequest(): GetTransferRunRequest {
  return { name: "" };
}

export const GetTransferRunRequest: MessageFns<GetTransferRunRequest> = {
  encode(message: GetTransferRunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTransferRunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTransferRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTransferRunRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTransferRunRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTransferRunRequest>): GetTransferRunRequest {
    return GetTransferRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTransferRunRequest>): GetTransferRunRequest {
    const message = createBaseGetTransferRunRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteTransferRunRequest(): DeleteTransferRunRequest {
  return { name: "" };
}

export const DeleteTransferRunRequest: MessageFns<DeleteTransferRunRequest> = {
  encode(message: DeleteTransferRunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTransferRunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTransferRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTransferRunRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTransferRunRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTransferRunRequest>): DeleteTransferRunRequest {
    return DeleteTransferRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTransferRunRequest>): DeleteTransferRunRequest {
    const message = createBaseDeleteTransferRunRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTransferConfigsRequest(): ListTransferConfigsRequest {
  return { parent: "", dataSourceIds: [], pageToken: "", pageSize: 0 };
}

export const ListTransferConfigsRequest: MessageFns<ListTransferConfigsRequest> = {
  encode(message: ListTransferConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.dataSourceIds) {
      writer.uint32(18).string(v!);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransferConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransferConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataSourceIds.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTransferConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataSourceIds: globalThis.Array.isArray(object?.dataSourceIds)
        ? object.dataSourceIds.map((e: any) => globalThis.String(e))
        : [],
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListTransferConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataSourceIds?.length) {
      obj.dataSourceIds = message.dataSourceIds;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListTransferConfigsRequest>): ListTransferConfigsRequest {
    return ListTransferConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransferConfigsRequest>): ListTransferConfigsRequest {
    const message = createBaseListTransferConfigsRequest();
    message.parent = object.parent ?? "";
    message.dataSourceIds = object.dataSourceIds?.map((e) => e) || [];
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListTransferConfigsResponse(): ListTransferConfigsResponse {
  return { transferConfigs: [], nextPageToken: "" };
}

export const ListTransferConfigsResponse: MessageFns<ListTransferConfigsResponse> = {
  encode(message: ListTransferConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transferConfigs) {
      TransferConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransferConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransferConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transferConfigs.push(TransferConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTransferConfigsResponse {
    return {
      transferConfigs: globalThis.Array.isArray(object?.transferConfigs)
        ? object.transferConfigs.map((e: any) => TransferConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTransferConfigsResponse): unknown {
    const obj: any = {};
    if (message.transferConfigs?.length) {
      obj.transferConfigs = message.transferConfigs.map((e) => TransferConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTransferConfigsResponse>): ListTransferConfigsResponse {
    return ListTransferConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransferConfigsResponse>): ListTransferConfigsResponse {
    const message = createBaseListTransferConfigsResponse();
    message.transferConfigs = object.transferConfigs?.map((e) => TransferConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListTransferRunsRequest(): ListTransferRunsRequest {
  return { parent: "", states: [], pageToken: "", pageSize: 0, runAttempt: 0 };
}

export const ListTransferRunsRequest: MessageFns<ListTransferRunsRequest> = {
  encode(message: ListTransferRunsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    writer.uint32(18).fork();
    for (const v of message.states) {
      writer.int32(v);
    }
    writer.join();
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.runAttempt !== 0) {
      writer.uint32(40).int32(message.runAttempt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransferRunsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransferRunsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.states.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.states.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.runAttempt = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTransferRunsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      states: globalThis.Array.isArray(object?.states) ? object.states.map((e: any) => transferStateFromJSON(e)) : [],
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      runAttempt: isSet(object.runAttempt) ? listTransferRunsRequest_RunAttemptFromJSON(object.runAttempt) : 0,
    };
  },

  toJSON(message: ListTransferRunsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.states?.length) {
      obj.states = message.states.map((e) => transferStateToJSON(e));
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.runAttempt !== 0) {
      obj.runAttempt = listTransferRunsRequest_RunAttemptToJSON(message.runAttempt);
    }
    return obj;
  },

  create(base?: DeepPartial<ListTransferRunsRequest>): ListTransferRunsRequest {
    return ListTransferRunsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransferRunsRequest>): ListTransferRunsRequest {
    const message = createBaseListTransferRunsRequest();
    message.parent = object.parent ?? "";
    message.states = object.states?.map((e) => e) || [];
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.runAttempt = object.runAttempt ?? 0;
    return message;
  },
};

function createBaseListTransferRunsResponse(): ListTransferRunsResponse {
  return { transferRuns: [], nextPageToken: "" };
}

export const ListTransferRunsResponse: MessageFns<ListTransferRunsResponse> = {
  encode(message: ListTransferRunsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transferRuns) {
      TransferRun.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransferRunsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransferRunsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transferRuns.push(TransferRun.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTransferRunsResponse {
    return {
      transferRuns: globalThis.Array.isArray(object?.transferRuns)
        ? object.transferRuns.map((e: any) => TransferRun.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTransferRunsResponse): unknown {
    const obj: any = {};
    if (message.transferRuns?.length) {
      obj.transferRuns = message.transferRuns.map((e) => TransferRun.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTransferRunsResponse>): ListTransferRunsResponse {
    return ListTransferRunsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransferRunsResponse>): ListTransferRunsResponse {
    const message = createBaseListTransferRunsResponse();
    message.transferRuns = object.transferRuns?.map((e) => TransferRun.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListTransferLogsRequest(): ListTransferLogsRequest {
  return { parent: "", pageToken: "", pageSize: 0, messageTypes: [] };
}

export const ListTransferLogsRequest: MessageFns<ListTransferLogsRequest> = {
  encode(message: ListTransferLogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(40).int32(message.pageSize);
    }
    writer.uint32(50).fork();
    for (const v of message.messageTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransferLogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransferLogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 6:
          if (tag === 48) {
            message.messageTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.messageTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTransferLogsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      messageTypes: globalThis.Array.isArray(object?.messageTypes)
        ? object.messageTypes.map((e: any) => transferMessage_MessageSeverityFromJSON(e))
        : [],
    };
  },

  toJSON(message: ListTransferLogsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.messageTypes?.length) {
      obj.messageTypes = message.messageTypes.map((e) => transferMessage_MessageSeverityToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTransferLogsRequest>): ListTransferLogsRequest {
    return ListTransferLogsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransferLogsRequest>): ListTransferLogsRequest {
    const message = createBaseListTransferLogsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.messageTypes = object.messageTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseListTransferLogsResponse(): ListTransferLogsResponse {
  return { transferMessages: [], nextPageToken: "" };
}

export const ListTransferLogsResponse: MessageFns<ListTransferLogsResponse> = {
  encode(message: ListTransferLogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transferMessages) {
      TransferMessage.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransferLogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransferLogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transferMessages.push(TransferMessage.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTransferLogsResponse {
    return {
      transferMessages: globalThis.Array.isArray(object?.transferMessages)
        ? object.transferMessages.map((e: any) => TransferMessage.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTransferLogsResponse): unknown {
    const obj: any = {};
    if (message.transferMessages?.length) {
      obj.transferMessages = message.transferMessages.map((e) => TransferMessage.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTransferLogsResponse>): ListTransferLogsResponse {
    return ListTransferLogsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransferLogsResponse>): ListTransferLogsResponse {
    const message = createBaseListTransferLogsResponse();
    message.transferMessages = object.transferMessages?.map((e) => TransferMessage.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCheckValidCredsRequest(): CheckValidCredsRequest {
  return { name: "" };
}

export const CheckValidCredsRequest: MessageFns<CheckValidCredsRequest> = {
  encode(message: CheckValidCredsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckValidCredsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckValidCredsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckValidCredsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CheckValidCredsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckValidCredsRequest>): CheckValidCredsRequest {
    return CheckValidCredsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckValidCredsRequest>): CheckValidCredsRequest {
    const message = createBaseCheckValidCredsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCheckValidCredsResponse(): CheckValidCredsResponse {
  return { hasValidCreds: false };
}

export const CheckValidCredsResponse: MessageFns<CheckValidCredsResponse> = {
  encode(message: CheckValidCredsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hasValidCreds !== false) {
      writer.uint32(8).bool(message.hasValidCreds);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckValidCredsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckValidCredsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.hasValidCreds = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckValidCredsResponse {
    return { hasValidCreds: isSet(object.hasValidCreds) ? globalThis.Boolean(object.hasValidCreds) : false };
  },

  toJSON(message: CheckValidCredsResponse): unknown {
    const obj: any = {};
    if (message.hasValidCreds !== false) {
      obj.hasValidCreds = message.hasValidCreds;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckValidCredsResponse>): CheckValidCredsResponse {
    return CheckValidCredsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckValidCredsResponse>): CheckValidCredsResponse {
    const message = createBaseCheckValidCredsResponse();
    message.hasValidCreds = object.hasValidCreds ?? false;
    return message;
  },
};

function createBaseScheduleTransferRunsRequest(): ScheduleTransferRunsRequest {
  return { parent: "", startTime: undefined, endTime: undefined };
}

export const ScheduleTransferRunsRequest: MessageFns<ScheduleTransferRunsRequest> = {
  encode(message: ScheduleTransferRunsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduleTransferRunsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduleTransferRunsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduleTransferRunsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: ScheduleTransferRunsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ScheduleTransferRunsRequest>): ScheduleTransferRunsRequest {
    return ScheduleTransferRunsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScheduleTransferRunsRequest>): ScheduleTransferRunsRequest {
    const message = createBaseScheduleTransferRunsRequest();
    message.parent = object.parent ?? "";
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseScheduleTransferRunsResponse(): ScheduleTransferRunsResponse {
  return { runs: [] };
}

export const ScheduleTransferRunsResponse: MessageFns<ScheduleTransferRunsResponse> = {
  encode(message: ScheduleTransferRunsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.runs) {
      TransferRun.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduleTransferRunsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduleTransferRunsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.runs.push(TransferRun.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduleTransferRunsResponse {
    return { runs: globalThis.Array.isArray(object?.runs) ? object.runs.map((e: any) => TransferRun.fromJSON(e)) : [] };
  },

  toJSON(message: ScheduleTransferRunsResponse): unknown {
    const obj: any = {};
    if (message.runs?.length) {
      obj.runs = message.runs.map((e) => TransferRun.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ScheduleTransferRunsResponse>): ScheduleTransferRunsResponse {
    return ScheduleTransferRunsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScheduleTransferRunsResponse>): ScheduleTransferRunsResponse {
    const message = createBaseScheduleTransferRunsResponse();
    message.runs = object.runs?.map((e) => TransferRun.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStartManualTransferRunsRequest(): StartManualTransferRunsRequest {
  return { parent: "", requestedTimeRange: undefined, requestedRunTime: undefined };
}

export const StartManualTransferRunsRequest: MessageFns<StartManualTransferRunsRequest> = {
  encode(message: StartManualTransferRunsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.requestedTimeRange !== undefined) {
      StartManualTransferRunsRequest_TimeRange.encode(message.requestedTimeRange, writer.uint32(26).fork()).join();
    }
    if (message.requestedRunTime !== undefined) {
      Timestamp.encode(toTimestamp(message.requestedRunTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartManualTransferRunsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartManualTransferRunsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestedTimeRange = StartManualTransferRunsRequest_TimeRange.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestedRunTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartManualTransferRunsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requestedTimeRange: isSet(object.requestedTimeRange)
        ? StartManualTransferRunsRequest_TimeRange.fromJSON(object.requestedTimeRange)
        : undefined,
      requestedRunTime: isSet(object.requestedRunTime) ? fromJsonTimestamp(object.requestedRunTime) : undefined,
    };
  },

  toJSON(message: StartManualTransferRunsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requestedTimeRange !== undefined) {
      obj.requestedTimeRange = StartManualTransferRunsRequest_TimeRange.toJSON(message.requestedTimeRange);
    }
    if (message.requestedRunTime !== undefined) {
      obj.requestedRunTime = message.requestedRunTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<StartManualTransferRunsRequest>): StartManualTransferRunsRequest {
    return StartManualTransferRunsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartManualTransferRunsRequest>): StartManualTransferRunsRequest {
    const message = createBaseStartManualTransferRunsRequest();
    message.parent = object.parent ?? "";
    message.requestedTimeRange = (object.requestedTimeRange !== undefined && object.requestedTimeRange !== null)
      ? StartManualTransferRunsRequest_TimeRange.fromPartial(object.requestedTimeRange)
      : undefined;
    message.requestedRunTime = object.requestedRunTime ?? undefined;
    return message;
  },
};

function createBaseStartManualTransferRunsRequest_TimeRange(): StartManualTransferRunsRequest_TimeRange {
  return { startTime: undefined, endTime: undefined };
}

export const StartManualTransferRunsRequest_TimeRange: MessageFns<StartManualTransferRunsRequest_TimeRange> = {
  encode(message: StartManualTransferRunsRequest_TimeRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartManualTransferRunsRequest_TimeRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartManualTransferRunsRequest_TimeRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartManualTransferRunsRequest_TimeRange {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: StartManualTransferRunsRequest_TimeRange): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<StartManualTransferRunsRequest_TimeRange>): StartManualTransferRunsRequest_TimeRange {
    return StartManualTransferRunsRequest_TimeRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartManualTransferRunsRequest_TimeRange>): StartManualTransferRunsRequest_TimeRange {
    const message = createBaseStartManualTransferRunsRequest_TimeRange();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseStartManualTransferRunsResponse(): StartManualTransferRunsResponse {
  return { runs: [] };
}

export const StartManualTransferRunsResponse: MessageFns<StartManualTransferRunsResponse> = {
  encode(message: StartManualTransferRunsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.runs) {
      TransferRun.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartManualTransferRunsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartManualTransferRunsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.runs.push(TransferRun.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartManualTransferRunsResponse {
    return { runs: globalThis.Array.isArray(object?.runs) ? object.runs.map((e: any) => TransferRun.fromJSON(e)) : [] };
  },

  toJSON(message: StartManualTransferRunsResponse): unknown {
    const obj: any = {};
    if (message.runs?.length) {
      obj.runs = message.runs.map((e) => TransferRun.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<StartManualTransferRunsResponse>): StartManualTransferRunsResponse {
    return StartManualTransferRunsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartManualTransferRunsResponse>): StartManualTransferRunsResponse {
    const message = createBaseStartManualTransferRunsResponse();
    message.runs = object.runs?.map((e) => TransferRun.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEnrollDataSourcesRequest(): EnrollDataSourcesRequest {
  return { name: "", dataSourceIds: [] };
}

export const EnrollDataSourcesRequest: MessageFns<EnrollDataSourcesRequest> = {
  encode(message: EnrollDataSourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.dataSourceIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnrollDataSourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnrollDataSourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataSourceIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnrollDataSourcesRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataSourceIds: globalThis.Array.isArray(object?.dataSourceIds)
        ? object.dataSourceIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: EnrollDataSourcesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataSourceIds?.length) {
      obj.dataSourceIds = message.dataSourceIds;
    }
    return obj;
  },

  create(base?: DeepPartial<EnrollDataSourcesRequest>): EnrollDataSourcesRequest {
    return EnrollDataSourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnrollDataSourcesRequest>): EnrollDataSourcesRequest {
    const message = createBaseEnrollDataSourcesRequest();
    message.name = object.name ?? "";
    message.dataSourceIds = object.dataSourceIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseUnenrollDataSourcesRequest(): UnenrollDataSourcesRequest {
  return { name: "", dataSourceIds: [] };
}

export const UnenrollDataSourcesRequest: MessageFns<UnenrollDataSourcesRequest> = {
  encode(message: UnenrollDataSourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.dataSourceIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnenrollDataSourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnenrollDataSourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataSourceIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnenrollDataSourcesRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataSourceIds: globalThis.Array.isArray(object?.dataSourceIds)
        ? object.dataSourceIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: UnenrollDataSourcesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataSourceIds?.length) {
      obj.dataSourceIds = message.dataSourceIds;
    }
    return obj;
  },

  create(base?: DeepPartial<UnenrollDataSourcesRequest>): UnenrollDataSourcesRequest {
    return UnenrollDataSourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnenrollDataSourcesRequest>): UnenrollDataSourcesRequest {
    const message = createBaseUnenrollDataSourcesRequest();
    message.name = object.name ?? "";
    message.dataSourceIds = object.dataSourceIds?.map((e) => e) || [];
    return message;
  },
};

/** This API allows users to manage their data transfers into BigQuery. */
export type DataTransferServiceDefinition = typeof DataTransferServiceDefinition;
export const DataTransferServiceDefinition = {
  name: "DataTransferService",
  fullName: "google.cloud.bigquery.datatransfer.v1.DataTransferService",
  methods: {
    /** Retrieves a supported data source and returns its settings. */
    getDataSource: {
      name: "GetDataSource",
      requestType: GetDataSourceRequest,
      requestStream: false,
      responseType: DataSource,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              88,
              90,
              37,
              18,
              35,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists supported data sources and returns their settings. */
    listDataSources: {
      name: "ListDataSources",
      requestType: ListDataSourcesRequest,
      requestStream: false,
      responseType: ListDataSourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              88,
              90,
              37,
              18,
              35,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a new data transfer configuration. */
    createTransferConfig: {
      name: "CreateTransferConfig",
      requestType: CreateTransferConfigRequest,
      requestStream: false,
      responseType: TransferConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              130,
              1,
              58,
              15,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              58,
              58,
              15,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              39,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a data transfer configuration.
     * All fields must be set, even if they are not updated.
     */
    updateTransferConfig: {
      name: "UpdateTransferConfig",
      requestType: UpdateTransferConfigRequest,
      requestStream: false,
      responseType: TransferConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              162,
              1,
              58,
              15,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              74,
              58,
              15,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              55,
              47,
              118,
              49,
              47,
              123,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              50,
              67,
              47,
              118,
              49,
              47,
              123,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a data transfer configuration, including any associated transfer
     * runs and logs.
     */
    deleteTransferConfig: {
      name: "DeleteTransferConfig",
      requestType: DeleteTransferConfigRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              96,
              90,
              41,
              42,
              39,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              42,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns information about a data transfer config. */
    getTransferConfig: {
      name: "GetTransferConfig",
      requestType: GetTransferConfigRequest,
      requestStream: false,
      responseType: TransferConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              96,
              90,
              41,
              18,
              39,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns information about all transfer configs owned by a project in the
     * specified location.
     */
    listTransferConfigs: {
      name: "ListTransferConfigs",
      requestType: ListTransferConfigsRequest,
      requestStream: false,
      responseType: ListTransferConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              96,
              90,
              41,
              18,
              39,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates transfer runs for a time range [start_time, end_time].
     * For each date - or whatever granularity the data source supports - in the
     * range, one transfer run is created.
     * Note that runs are created per UTC time in the time range.
     * DEPRECATED: use StartManualTransferRuns instead.
     *
     * @deprecated
     */
    scheduleTransferRuns: {
      name: "ScheduleTransferRuns",
      requestType: ScheduleTransferRunsRequest,
      requestStream: false,
      responseType: ScheduleTransferRunsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              116,
              97,
              114,
              116,
              95,
              116,
              105,
              109,
              101,
              44,
              101,
              110,
              100,
              95,
              116,
              105,
              109,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              132,
              1,
              58,
              1,
              42,
              90,
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              82,
              117,
              110,
              115,
              34,
              66,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              82,
              117,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Start manual transfer runs to be executed now with schedule_time equal to
     * current time. The transfer runs can be created for a time range where the
     * run_time is between start_time (inclusive) and end_time (exclusive), or for
     * a specific run_time.
     */
    startManualTransferRuns: {
      name: "StartManualTransferRuns",
      requestType: StartManualTransferRunsRequest,
      requestStream: false,
      responseType: StartManualTransferRunsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              138,
              1,
              58,
              1,
              42,
              90,
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
              77,
              97,
              110,
              117,
              97,
              108,
              82,
              117,
              110,
              115,
              34,
              69,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
              77,
              97,
              110,
              117,
              97,
              108,
              82,
              117,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns information about the particular transfer run. */
    getTransferRun: {
      name: "GetTransferRun",
      requestType: GetTransferRunRequest,
      requestStream: false,
      responseType: TransferRun,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              110,
              90,
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified transfer run. */
    deleteTransferRun: {
      name: "DeleteTransferRun",
      requestType: DeleteTransferRunRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              110,
              90,
              48,
              42,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
              42,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns information about running and completed transfer runs. */
    listTransferRuns: {
      name: "ListTransferRuns",
      requestType: ListTransferRunsRequest,
      requestStream: false,
      responseType: ListTransferRunsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              110,
              90,
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              47,
              114,
              117,
              110,
              115,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              47,
              114,
              117,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns log messages for the transfer run. */
    listTransferLogs: {
      name: "ListTransferLogs",
      requestType: ListTransferLogsRequest,
      requestStream: false,
      responseType: ListTransferLogsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              140,
              1,
              90,
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              76,
              111,
              103,
              115,
              18,
              73,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              97,
              110,
              115,
              102,
              101,
              114,
              76,
              111,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns true if valid credentials exist for the given data source and
     * requesting user.
     */
    checkValidCreds: {
      name: "CheckValidCreds",
      requestType: CheckValidCredsRequest,
      requestStream: false,
      responseType: CheckValidCredsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              126,
              58,
              1,
              42,
              90,
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              104,
              101,
              99,
              107,
              86,
              97,
              108,
              105,
              100,
              67,
              114,
              101,
              100,
              115,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              99,
              104,
              101,
              99,
              107,
              86,
              97,
              108,
              105,
              100,
              67,
              114,
              101,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Enroll data sources in a user project. This allows users to create transfer
     * configurations for these data sources. They will also appear in the
     * ListDataSources RPC and as such, will appear in the
     * [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents
     * can be found in the public guide for
     * [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and
     * [Data Transfer
     * Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
     */
    enrollDataSources: {
      name: "EnrollDataSources",
      requestType: EnrollDataSourcesRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              102,
              58,
              1,
              42,
              90,
              44,
              58,
              1,
              42,
              34,
              39,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              114,
              111,
              108,
              108,
              68,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              114,
              111,
              108,
              108,
              68,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Unenroll data sources in a user project. This allows users to remove
     * transfer configurations for these data sources. They will no longer appear
     * in the ListDataSources RPC and will also no longer appear in the [BigQuery
     * UI](https://console.cloud.google.com/bigquery). Data transfers
     * configurations of unenrolled data sources will not be scheduled.
     */
    unenrollDataSources: {
      name: "UnenrollDataSources",
      requestType: UnenrollDataSourcesRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              101,
              110,
              114,
              111,
              108,
              108,
              68,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataTransferServiceImplementation<CallContextExt = {}> {
  /** Retrieves a supported data source and returns its settings. */
  getDataSource(request: GetDataSourceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DataSource>>;
  /** Lists supported data sources and returns their settings. */
  listDataSources(
    request: ListDataSourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataSourcesResponse>>;
  /** Creates a new data transfer configuration. */
  createTransferConfig(
    request: CreateTransferConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransferConfig>>;
  /**
   * Updates a data transfer configuration.
   * All fields must be set, even if they are not updated.
   */
  updateTransferConfig(
    request: UpdateTransferConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransferConfig>>;
  /**
   * Deletes a data transfer configuration, including any associated transfer
   * runs and logs.
   */
  deleteTransferConfig(
    request: DeleteTransferConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Returns information about a data transfer config. */
  getTransferConfig(
    request: GetTransferConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransferConfig>>;
  /**
   * Returns information about all transfer configs owned by a project in the
   * specified location.
   */
  listTransferConfigs(
    request: ListTransferConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTransferConfigsResponse>>;
  /**
   * Creates transfer runs for a time range [start_time, end_time].
   * For each date - or whatever granularity the data source supports - in the
   * range, one transfer run is created.
   * Note that runs are created per UTC time in the time range.
   * DEPRECATED: use StartManualTransferRuns instead.
   *
   * @deprecated
   */
  scheduleTransferRuns(
    request: ScheduleTransferRunsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ScheduleTransferRunsResponse>>;
  /**
   * Start manual transfer runs to be executed now with schedule_time equal to
   * current time. The transfer runs can be created for a time range where the
   * run_time is between start_time (inclusive) and end_time (exclusive), or for
   * a specific run_time.
   */
  startManualTransferRuns(
    request: StartManualTransferRunsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StartManualTransferRunsResponse>>;
  /** Returns information about the particular transfer run. */
  getTransferRun(
    request: GetTransferRunRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TransferRun>>;
  /** Deletes the specified transfer run. */
  deleteTransferRun(
    request: DeleteTransferRunRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Returns information about running and completed transfer runs. */
  listTransferRuns(
    request: ListTransferRunsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTransferRunsResponse>>;
  /** Returns log messages for the transfer run. */
  listTransferLogs(
    request: ListTransferLogsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTransferLogsResponse>>;
  /**
   * Returns true if valid credentials exist for the given data source and
   * requesting user.
   */
  checkValidCreds(
    request: CheckValidCredsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CheckValidCredsResponse>>;
  /**
   * Enroll data sources in a user project. This allows users to create transfer
   * configurations for these data sources. They will also appear in the
   * ListDataSources RPC and as such, will appear in the
   * [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents
   * can be found in the public guide for
   * [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and
   * [Data Transfer
   * Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
   */
  enrollDataSources(
    request: EnrollDataSourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Unenroll data sources in a user project. This allows users to remove
   * transfer configurations for these data sources. They will no longer appear
   * in the ListDataSources RPC and will also no longer appear in the [BigQuery
   * UI](https://console.cloud.google.com/bigquery). Data transfers
   * configurations of unenrolled data sources will not be scheduled.
   */
  unenrollDataSources(
    request: UnenrollDataSourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface DataTransferServiceClient<CallOptionsExt = {}> {
  /** Retrieves a supported data source and returns its settings. */
  getDataSource(
    request: DeepPartial<GetDataSourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataSource>;
  /** Lists supported data sources and returns their settings. */
  listDataSources(
    request: DeepPartial<ListDataSourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataSourcesResponse>;
  /** Creates a new data transfer configuration. */
  createTransferConfig(
    request: DeepPartial<CreateTransferConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransferConfig>;
  /**
   * Updates a data transfer configuration.
   * All fields must be set, even if they are not updated.
   */
  updateTransferConfig(
    request: DeepPartial<UpdateTransferConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransferConfig>;
  /**
   * Deletes a data transfer configuration, including any associated transfer
   * runs and logs.
   */
  deleteTransferConfig(
    request: DeepPartial<DeleteTransferConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Returns information about a data transfer config. */
  getTransferConfig(
    request: DeepPartial<GetTransferConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransferConfig>;
  /**
   * Returns information about all transfer configs owned by a project in the
   * specified location.
   */
  listTransferConfigs(
    request: DeepPartial<ListTransferConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTransferConfigsResponse>;
  /**
   * Creates transfer runs for a time range [start_time, end_time].
   * For each date - or whatever granularity the data source supports - in the
   * range, one transfer run is created.
   * Note that runs are created per UTC time in the time range.
   * DEPRECATED: use StartManualTransferRuns instead.
   *
   * @deprecated
   */
  scheduleTransferRuns(
    request: DeepPartial<ScheduleTransferRunsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ScheduleTransferRunsResponse>;
  /**
   * Start manual transfer runs to be executed now with schedule_time equal to
   * current time. The transfer runs can be created for a time range where the
   * run_time is between start_time (inclusive) and end_time (exclusive), or for
   * a specific run_time.
   */
  startManualTransferRuns(
    request: DeepPartial<StartManualTransferRunsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StartManualTransferRunsResponse>;
  /** Returns information about the particular transfer run. */
  getTransferRun(
    request: DeepPartial<GetTransferRunRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TransferRun>;
  /** Deletes the specified transfer run. */
  deleteTransferRun(
    request: DeepPartial<DeleteTransferRunRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Returns information about running and completed transfer runs. */
  listTransferRuns(
    request: DeepPartial<ListTransferRunsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTransferRunsResponse>;
  /** Returns log messages for the transfer run. */
  listTransferLogs(
    request: DeepPartial<ListTransferLogsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTransferLogsResponse>;
  /**
   * Returns true if valid credentials exist for the given data source and
   * requesting user.
   */
  checkValidCreds(
    request: DeepPartial<CheckValidCredsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CheckValidCredsResponse>;
  /**
   * Enroll data sources in a user project. This allows users to create transfer
   * configurations for these data sources. They will also appear in the
   * ListDataSources RPC and as such, will appear in the
   * [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents
   * can be found in the public guide for
   * [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and
   * [Data Transfer
   * Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
   */
  enrollDataSources(
    request: DeepPartial<EnrollDataSourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Unenroll data sources in a user project. This allows users to remove
   * transfer configurations for these data sources. They will no longer appear
   * in the ListDataSources RPC and will also no longer appear in the [BigQuery
   * UI](https://console.cloud.google.com/bigquery). Data transfers
   * configurations of unenrolled data sources will not be scheduled.
   */
  unenrollDataSources(
    request: DeepPartial<UnenrollDataSourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
