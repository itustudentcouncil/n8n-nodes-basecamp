// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/storage/v1beta2/arrow.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.storage.v1beta2";

/**
 * Arrow schema as specified in
 * https://arrow.apache.org/docs/python/api/datatypes.html
 * and serialized to bytes using IPC:
 * https://arrow.apache.org/docs/format/Columnar.html#serialization-and-interprocess-communication-ipc
 *
 * See code samples on how this message can be deserialized.
 */
export interface ArrowSchema {
  /** IPC serialized Arrow schema. */
  serializedSchema: Buffer;
}

/** Arrow RecordBatch. */
export interface ArrowRecordBatch {
  /** IPC-serialized Arrow RecordBatch. */
  serializedRecordBatch: Buffer;
}

/** Contains options specific to Arrow Serialization. */
export interface ArrowSerializationOptions {
  /** The Arrow IPC format to use. */
  format: ArrowSerializationOptions_Format;
}

/** The IPC format to use when serializing Arrow streams. */
export enum ArrowSerializationOptions_Format {
  /** FORMAT_UNSPECIFIED - If unspecied the IPC format as of 0.15 release will be used. */
  FORMAT_UNSPECIFIED = 0,
  /** ARROW_0_14 - Use the legacy IPC message format as of Apache Arrow Release 0.14. */
  ARROW_0_14 = 1,
  /** ARROW_0_15 - Use the message format as of Apache Arrow Release 0.15. */
  ARROW_0_15 = 2,
  UNRECOGNIZED = -1,
}

export function arrowSerializationOptions_FormatFromJSON(object: any): ArrowSerializationOptions_Format {
  switch (object) {
    case 0:
    case "FORMAT_UNSPECIFIED":
      return ArrowSerializationOptions_Format.FORMAT_UNSPECIFIED;
    case 1:
    case "ARROW_0_14":
      return ArrowSerializationOptions_Format.ARROW_0_14;
    case 2:
    case "ARROW_0_15":
      return ArrowSerializationOptions_Format.ARROW_0_15;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ArrowSerializationOptions_Format.UNRECOGNIZED;
  }
}

export function arrowSerializationOptions_FormatToJSON(object: ArrowSerializationOptions_Format): string {
  switch (object) {
    case ArrowSerializationOptions_Format.FORMAT_UNSPECIFIED:
      return "FORMAT_UNSPECIFIED";
    case ArrowSerializationOptions_Format.ARROW_0_14:
      return "ARROW_0_14";
    case ArrowSerializationOptions_Format.ARROW_0_15:
      return "ARROW_0_15";
    case ArrowSerializationOptions_Format.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseArrowSchema(): ArrowSchema {
  return { serializedSchema: Buffer.alloc(0) };
}

export const ArrowSchema: MessageFns<ArrowSchema> = {
  encode(message: ArrowSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serializedSchema.length !== 0) {
      writer.uint32(10).bytes(message.serializedSchema);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArrowSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArrowSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serializedSchema = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArrowSchema {
    return {
      serializedSchema: isSet(object.serializedSchema)
        ? Buffer.from(bytesFromBase64(object.serializedSchema))
        : Buffer.alloc(0),
    };
  },

  toJSON(message: ArrowSchema): unknown {
    const obj: any = {};
    if (message.serializedSchema.length !== 0) {
      obj.serializedSchema = base64FromBytes(message.serializedSchema);
    }
    return obj;
  },

  create(base?: DeepPartial<ArrowSchema>): ArrowSchema {
    return ArrowSchema.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArrowSchema>): ArrowSchema {
    const message = createBaseArrowSchema();
    message.serializedSchema = object.serializedSchema ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseArrowRecordBatch(): ArrowRecordBatch {
  return { serializedRecordBatch: Buffer.alloc(0) };
}

export const ArrowRecordBatch: MessageFns<ArrowRecordBatch> = {
  encode(message: ArrowRecordBatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serializedRecordBatch.length !== 0) {
      writer.uint32(10).bytes(message.serializedRecordBatch);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArrowRecordBatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArrowRecordBatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serializedRecordBatch = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArrowRecordBatch {
    return {
      serializedRecordBatch: isSet(object.serializedRecordBatch)
        ? Buffer.from(bytesFromBase64(object.serializedRecordBatch))
        : Buffer.alloc(0),
    };
  },

  toJSON(message: ArrowRecordBatch): unknown {
    const obj: any = {};
    if (message.serializedRecordBatch.length !== 0) {
      obj.serializedRecordBatch = base64FromBytes(message.serializedRecordBatch);
    }
    return obj;
  },

  create(base?: DeepPartial<ArrowRecordBatch>): ArrowRecordBatch {
    return ArrowRecordBatch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArrowRecordBatch>): ArrowRecordBatch {
    const message = createBaseArrowRecordBatch();
    message.serializedRecordBatch = object.serializedRecordBatch ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseArrowSerializationOptions(): ArrowSerializationOptions {
  return { format: 0 };
}

export const ArrowSerializationOptions: MessageFns<ArrowSerializationOptions> = {
  encode(message: ArrowSerializationOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.format !== 0) {
      writer.uint32(8).int32(message.format);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArrowSerializationOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArrowSerializationOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.format = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArrowSerializationOptions {
    return { format: isSet(object.format) ? arrowSerializationOptions_FormatFromJSON(object.format) : 0 };
  },

  toJSON(message: ArrowSerializationOptions): unknown {
    const obj: any = {};
    if (message.format !== 0) {
      obj.format = arrowSerializationOptions_FormatToJSON(message.format);
    }
    return obj;
  },

  create(base?: DeepPartial<ArrowSerializationOptions>): ArrowSerializationOptions {
    return ArrowSerializationOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArrowSerializationOptions>): ArrowSerializationOptions {
    const message = createBaseArrowSerializationOptions();
    message.format = object.format ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
