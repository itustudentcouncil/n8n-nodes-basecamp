// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/clustering.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.v2";

/** Configures table clustering. */
export interface Clustering {
  /**
   * One or more fields on which data should be clustered. Only top-level,
   * non-repeated, simple-type fields are supported. The ordering of the
   * clustering fields should be prioritized from most to least important
   * for filtering purposes.
   *
   * Additional information on limitations can be found here:
   * https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations
   */
  fields: string[];
}

function createBaseClustering(): Clustering {
  return { fields: [] };
}

export const Clustering: MessageFns<Clustering> = {
  encode(message: Clustering, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fields) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Clustering {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClustering();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fields.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Clustering {
    return {
      fields: globalThis.Array.isArray(object?.fields) ? object.fields.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Clustering): unknown {
    const obj: any = {};
    if (message.fields?.length) {
      obj.fields = message.fields;
    }
    return obj;
  },

  create(base?: DeepPartial<Clustering>): Clustering {
    return Clustering.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Clustering>): Clustering {
    const message = createBaseClustering();
    message.fields = object.fields?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
