// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/encryption_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { StringValue } from "../../../protobuf/wrappers.js";

export const protobufPackage = "google.cloud.bigquery.v2";

/** Configuration for Cloud KMS encryption settings. */
export interface EncryptionConfiguration {
  /**
   * Optional. Describes the Cloud KMS encryption key that will be used to
   * protect destination BigQuery table. The BigQuery Service Account associated
   * with your project requires access to this encryption key.
   */
  kmsKeyName: string | undefined;
}

function createBaseEncryptionConfiguration(): EncryptionConfiguration {
  return { kmsKeyName: undefined };
}

export const EncryptionConfiguration: MessageFns<EncryptionConfiguration> = {
  encode(message: EncryptionConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kmsKeyName !== undefined) {
      StringValue.encode({ value: message.kmsKeyName! }, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptionConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptionConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kmsKeyName = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptionConfiguration {
    return { kmsKeyName: isSet(object.kmsKeyName) ? String(object.kmsKeyName) : undefined };
  },

  toJSON(message: EncryptionConfiguration): unknown {
    const obj: any = {};
    if (message.kmsKeyName !== undefined) {
      obj.kmsKeyName = message.kmsKeyName;
    }
    return obj;
  },

  create(base?: DeepPartial<EncryptionConfiguration>): EncryptionConfiguration {
    return EncryptionConfiguration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EncryptionConfiguration>): EncryptionConfiguration {
    const message = createBaseEncryptionConfiguration();
    message.kmsKeyName = object.kmsKeyName ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
