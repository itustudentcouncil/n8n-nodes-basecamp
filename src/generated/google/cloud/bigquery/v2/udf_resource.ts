// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/udf_resource.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { StringValue } from "../../../protobuf/wrappers.js";

export const protobufPackage = "google.cloud.bigquery.v2";

/**
 * This is used for defining User Defined Function (UDF) resources only when
 * using legacy SQL.  Users of GoogleSQL should leverage either DDL (e.g.
 * CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF
 * resources.
 *
 * For additional information on migrating, see:
 * https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
 */
export interface UserDefinedFunctionResource {
  /**
   * [Pick one] A code resource to load from a Google Cloud Storage URI
   * (gs://bucket/path).
   */
  resourceUri:
    | string
    | undefined;
  /**
   * [Pick one] An inline resource that contains code for a user-defined
   * function (UDF). Providing a inline code resource is equivalent to providing
   * a URI for a file containing the same code.
   */
  inlineCode: string | undefined;
}

function createBaseUserDefinedFunctionResource(): UserDefinedFunctionResource {
  return { resourceUri: undefined, inlineCode: undefined };
}

export const UserDefinedFunctionResource: MessageFns<UserDefinedFunctionResource> = {
  encode(message: UserDefinedFunctionResource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceUri !== undefined) {
      StringValue.encode({ value: message.resourceUri! }, writer.uint32(10).fork()).join();
    }
    if (message.inlineCode !== undefined) {
      StringValue.encode({ value: message.inlineCode! }, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserDefinedFunctionResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserDefinedFunctionResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceUri = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inlineCode = StringValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserDefinedFunctionResource {
    return {
      resourceUri: isSet(object.resourceUri) ? String(object.resourceUri) : undefined,
      inlineCode: isSet(object.inlineCode) ? String(object.inlineCode) : undefined,
    };
  },

  toJSON(message: UserDefinedFunctionResource): unknown {
    const obj: any = {};
    if (message.resourceUri !== undefined) {
      obj.resourceUri = message.resourceUri;
    }
    if (message.inlineCode !== undefined) {
      obj.inlineCode = message.inlineCode;
    }
    return obj;
  },

  create(base?: DeepPartial<UserDefinedFunctionResource>): UserDefinedFunctionResource {
    return UserDefinedFunctionResource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserDefinedFunctionResource>): UserDefinedFunctionResource {
    const message = createBaseUserDefinedFunctionResource();
    message.resourceUri = object.resourceUri ?? undefined;
    message.inlineCode = object.inlineCode ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
