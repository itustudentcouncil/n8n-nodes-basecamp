// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/range_partitioning.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.v2";

export interface RangePartitioning {
  /**
   * Required. The name of the column to partition the table on. It must be a
   * top-level, INT64 column whose mode is NULLABLE or REQUIRED.
   */
  field: string;
  /** Defines the ranges for range partitioning. */
  range: RangePartitioning_Range | undefined;
}

/** Defines the ranges for range partitioning. */
export interface RangePartitioning_Range {
  /**
   * Required. The start of range partitioning, inclusive. This field is an
   * INT64 value represented as a string.
   */
  start: string;
  /**
   * Required. The end of range partitioning, exclusive. This field is an
   * INT64 value represented as a string.
   */
  end: string;
  /**
   * Required. The width of each interval. This field is an INT64 value
   * represented as a string.
   */
  interval: string;
}

function createBaseRangePartitioning(): RangePartitioning {
  return { field: "", range: undefined };
}

export const RangePartitioning: MessageFns<RangePartitioning> = {
  encode(message: RangePartitioning, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== "") {
      writer.uint32(10).string(message.field);
    }
    if (message.range !== undefined) {
      RangePartitioning_Range.encode(message.range, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RangePartitioning {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRangePartitioning();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.range = RangePartitioning_Range.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RangePartitioning {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      range: isSet(object.range) ? RangePartitioning_Range.fromJSON(object.range) : undefined,
    };
  },

  toJSON(message: RangePartitioning): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    if (message.range !== undefined) {
      obj.range = RangePartitioning_Range.toJSON(message.range);
    }
    return obj;
  },

  create(base?: DeepPartial<RangePartitioning>): RangePartitioning {
    return RangePartitioning.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RangePartitioning>): RangePartitioning {
    const message = createBaseRangePartitioning();
    message.field = object.field ?? "";
    message.range = (object.range !== undefined && object.range !== null)
      ? RangePartitioning_Range.fromPartial(object.range)
      : undefined;
    return message;
  },
};

function createBaseRangePartitioning_Range(): RangePartitioning_Range {
  return { start: "", end: "", interval: "" };
}

export const RangePartitioning_Range: MessageFns<RangePartitioning_Range> = {
  encode(message: RangePartitioning_Range, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== "") {
      writer.uint32(10).string(message.start);
    }
    if (message.end !== "") {
      writer.uint32(18).string(message.end);
    }
    if (message.interval !== "") {
      writer.uint32(26).string(message.interval);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RangePartitioning_Range {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRangePartitioning_Range();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.start = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.end = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.interval = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RangePartitioning_Range {
    return {
      start: isSet(object.start) ? globalThis.String(object.start) : "",
      end: isSet(object.end) ? globalThis.String(object.end) : "",
      interval: isSet(object.interval) ? globalThis.String(object.interval) : "",
    };
  },

  toJSON(message: RangePartitioning_Range): unknown {
    const obj: any = {};
    if (message.start !== "") {
      obj.start = message.start;
    }
    if (message.end !== "") {
      obj.end = message.end;
    }
    if (message.interval !== "") {
      obj.interval = message.interval;
    }
    return obj;
  },

  create(base?: DeepPartial<RangePartitioning_Range>): RangePartitioning_Range {
    return RangePartitioning_Range.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RangePartitioning_Range>): RangePartitioning_Range {
    const message = createBaseRangePartitioning_Range();
    message.start = object.start ?? "";
    message.end = object.end ?? "";
    message.interval = object.interval ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
