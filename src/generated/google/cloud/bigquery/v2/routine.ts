// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/routine.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { BoolValue, UInt32Value } from "../../../protobuf/wrappers.js";
import { RoutineReference } from "./routine_reference.js";
import { StandardSqlDataType, StandardSqlTableType } from "./standard_sql.js";

export const protobufPackage = "google.cloud.bigquery.v2";

/** A user-defined function or a stored procedure. */
export interface Routine {
  /** Output only. A hash of this resource. */
  etag: string;
  /** Required. Reference describing the ID of this routine. */
  routineReference:
    | RoutineReference
    | undefined;
  /** Required. The type of routine. */
  routineType: Routine_RoutineType;
  /**
   * Output only. The time when this routine was created, in milliseconds since
   * the epoch.
   */
  creationTime: Long;
  /**
   * Output only. The time when this routine was last modified, in milliseconds
   * since the epoch.
   */
  lastModifiedTime: Long;
  /**
   * Optional. Defaults to "SQL" if remote_function_options field is absent, not
   * set otherwise.
   */
  language: Routine_Language;
  /** Optional. */
  arguments: Routine_Argument[];
  /**
   * Optional if language = "SQL"; required otherwise.
   * Cannot be set if routine_type = "TABLE_VALUED_FUNCTION".
   *
   * If absent, the return type is inferred from definition_body at query time
   * in each query that references this routine. If present, then the evaluated
   * result will be cast to the specified returned type at query time.
   *
   * For example, for the functions created with the following statements:
   *
   * * `CREATE FUNCTION Add(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (x + y);`
   *
   * * `CREATE FUNCTION Increment(x FLOAT64) AS (Add(x, 1));`
   *
   * * `CREATE FUNCTION Decrement(x FLOAT64) RETURNS FLOAT64 AS (Add(x, -1));`
   *
   * The return_type is `{type_kind: "FLOAT64"}` for `Add` and `Decrement`, and
   * is absent for `Increment` (inferred as FLOAT64 at query time).
   *
   * Suppose the function `Add` is replaced by
   *   `CREATE OR REPLACE FUNCTION Add(x INT64, y INT64) AS (x + y);`
   *
   * Then the inferred return type of `Increment` is automatically changed to
   * INT64 at query time, while the return type of `Decrement` remains FLOAT64.
   */
  returnType:
    | StandardSqlDataType
    | undefined;
  /**
   * Optional. Can be set only if routine_type = "TABLE_VALUED_FUNCTION".
   *
   * If absent, the return table type is inferred from definition_body at query
   * time in each query that references this routine. If present, then the
   * columns in the evaluated table result will be cast to match the column
   * types specified in return table type, at query time.
   */
  returnTableType:
    | StandardSqlTableType
    | undefined;
  /**
   * Optional. If language = "JAVASCRIPT", this field stores the path of the
   * imported JAVASCRIPT libraries.
   */
  importedLibraries: string[];
  /**
   * Required. The body of the routine.
   *
   * For functions, this is the expression in the AS clause.
   *
   * If language=SQL, it is the substring inside (but excluding) the
   * parentheses. For example, for the function created with the following
   * statement:
   *
   * `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, "\n", y))`
   *
   * The definition_body is `concat(x, "\n", y)` (\n is not replaced with
   * linebreak).
   *
   * If language=JAVASCRIPT, it is the evaluated string in the AS clause.
   * For example, for the function created with the following statement:
   *
   * `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return "\n";\n'`
   *
   * The definition_body is
   *
   * `return "\n";\n`
   *
   * Note that both \n are replaced with linebreaks.
   */
  definitionBody: string;
  /** Optional. The description of the routine, if defined. */
  description: string;
  /** Optional. The determinism level of the JavaScript UDF, if defined. */
  determinismLevel: Routine_DeterminismLevel;
  /**
   * Optional. The security mode of the routine, if defined. If not defined, the
   * security mode is automatically determined from the routine's configuration.
   */
  securityMode: Routine_SecurityMode;
  /**
   * Optional. Use this option to catch many common errors. Error checking is
   * not exhaustive, and successfully creating a procedure doesn't guarantee
   * that the procedure will successfully execute at runtime. If `strictMode` is
   * set to `TRUE`, the procedure body is further checked for errors such as
   * non-existent tables or columns. The `CREATE PROCEDURE` statement fails if
   * the body fails any of these checks.
   *
   * If `strictMode` is set to `FALSE`, the procedure body is checked only for
   * syntax. For procedures that invoke themselves recursively, specify
   * `strictMode=FALSE` to avoid non-existent procedure errors during
   * validation.
   *
   * Default value is `TRUE`.
   */
  strictMode:
    | boolean
    | undefined;
  /** Optional. Remote function specific options. */
  remoteFunctionOptions:
    | Routine_RemoteFunctionOptions
    | undefined;
  /** Optional. Spark specific options. */
  sparkOptions:
    | SparkOptions
    | undefined;
  /**
   * Optional. If set to `DATA_MASKING`, the function is validated and made
   * available as a masking function. For more information, see [Create custom
   * masking
   * routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).
   */
  dataGovernanceType: Routine_DataGovernanceType;
}

/** The fine-grained type of the routine. */
export enum Routine_RoutineType {
  /** ROUTINE_TYPE_UNSPECIFIED - Default value. */
  ROUTINE_TYPE_UNSPECIFIED = 0,
  /** SCALAR_FUNCTION - Non-built-in persistent scalar function. */
  SCALAR_FUNCTION = 1,
  /** PROCEDURE - Stored procedure. */
  PROCEDURE = 2,
  /** TABLE_VALUED_FUNCTION - Non-built-in persistent TVF. */
  TABLE_VALUED_FUNCTION = 3,
  /** AGGREGATE_FUNCTION - Non-built-in persistent aggregate function. */
  AGGREGATE_FUNCTION = 4,
  UNRECOGNIZED = -1,
}

export function routine_RoutineTypeFromJSON(object: any): Routine_RoutineType {
  switch (object) {
    case 0:
    case "ROUTINE_TYPE_UNSPECIFIED":
      return Routine_RoutineType.ROUTINE_TYPE_UNSPECIFIED;
    case 1:
    case "SCALAR_FUNCTION":
      return Routine_RoutineType.SCALAR_FUNCTION;
    case 2:
    case "PROCEDURE":
      return Routine_RoutineType.PROCEDURE;
    case 3:
    case "TABLE_VALUED_FUNCTION":
      return Routine_RoutineType.TABLE_VALUED_FUNCTION;
    case 4:
    case "AGGREGATE_FUNCTION":
      return Routine_RoutineType.AGGREGATE_FUNCTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Routine_RoutineType.UNRECOGNIZED;
  }
}

export function routine_RoutineTypeToJSON(object: Routine_RoutineType): string {
  switch (object) {
    case Routine_RoutineType.ROUTINE_TYPE_UNSPECIFIED:
      return "ROUTINE_TYPE_UNSPECIFIED";
    case Routine_RoutineType.SCALAR_FUNCTION:
      return "SCALAR_FUNCTION";
    case Routine_RoutineType.PROCEDURE:
      return "PROCEDURE";
    case Routine_RoutineType.TABLE_VALUED_FUNCTION:
      return "TABLE_VALUED_FUNCTION";
    case Routine_RoutineType.AGGREGATE_FUNCTION:
      return "AGGREGATE_FUNCTION";
    case Routine_RoutineType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The language of the routine. */
export enum Routine_Language {
  /** LANGUAGE_UNSPECIFIED - Default value. */
  LANGUAGE_UNSPECIFIED = 0,
  /** SQL - SQL language. */
  SQL = 1,
  /** JAVASCRIPT - JavaScript language. */
  JAVASCRIPT = 2,
  /** PYTHON - Python language. */
  PYTHON = 3,
  /** JAVA - Java language. */
  JAVA = 4,
  /** SCALA - Scala language. */
  SCALA = 5,
  UNRECOGNIZED = -1,
}

export function routine_LanguageFromJSON(object: any): Routine_Language {
  switch (object) {
    case 0:
    case "LANGUAGE_UNSPECIFIED":
      return Routine_Language.LANGUAGE_UNSPECIFIED;
    case 1:
    case "SQL":
      return Routine_Language.SQL;
    case 2:
    case "JAVASCRIPT":
      return Routine_Language.JAVASCRIPT;
    case 3:
    case "PYTHON":
      return Routine_Language.PYTHON;
    case 4:
    case "JAVA":
      return Routine_Language.JAVA;
    case 5:
    case "SCALA":
      return Routine_Language.SCALA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Routine_Language.UNRECOGNIZED;
  }
}

export function routine_LanguageToJSON(object: Routine_Language): string {
  switch (object) {
    case Routine_Language.LANGUAGE_UNSPECIFIED:
      return "LANGUAGE_UNSPECIFIED";
    case Routine_Language.SQL:
      return "SQL";
    case Routine_Language.JAVASCRIPT:
      return "JAVASCRIPT";
    case Routine_Language.PYTHON:
      return "PYTHON";
    case Routine_Language.JAVA:
      return "JAVA";
    case Routine_Language.SCALA:
      return "SCALA";
    case Routine_Language.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * JavaScript UDF determinism levels.
 *
 * If all JavaScript UDFs are DETERMINISTIC, the query result is
 * potentially cachable (see below). If any JavaScript UDF is
 * NOT_DETERMINISTIC, the query result is not cacheable.
 *
 * Even if a JavaScript UDF is deterministic, many other factors can prevent
 * usage of cached query results. Example factors include but not limited to:
 * DDL/DML, non-deterministic SQL function calls, update of referenced
 * tables/views/UDFs or imported JavaScript libraries.
 *
 * SQL UDFs cannot have determinism specified. Their determinism is
 * automatically determined.
 */
export enum Routine_DeterminismLevel {
  /** DETERMINISM_LEVEL_UNSPECIFIED - The determinism of the UDF is unspecified. */
  DETERMINISM_LEVEL_UNSPECIFIED = 0,
  /**
   * DETERMINISTIC - The UDF is deterministic, meaning that 2 function calls with the same
   * inputs always produce the same result, even across 2 query runs.
   */
  DETERMINISTIC = 1,
  /** NOT_DETERMINISTIC - The UDF is not deterministic. */
  NOT_DETERMINISTIC = 2,
  UNRECOGNIZED = -1,
}

export function routine_DeterminismLevelFromJSON(object: any): Routine_DeterminismLevel {
  switch (object) {
    case 0:
    case "DETERMINISM_LEVEL_UNSPECIFIED":
      return Routine_DeterminismLevel.DETERMINISM_LEVEL_UNSPECIFIED;
    case 1:
    case "DETERMINISTIC":
      return Routine_DeterminismLevel.DETERMINISTIC;
    case 2:
    case "NOT_DETERMINISTIC":
      return Routine_DeterminismLevel.NOT_DETERMINISTIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Routine_DeterminismLevel.UNRECOGNIZED;
  }
}

export function routine_DeterminismLevelToJSON(object: Routine_DeterminismLevel): string {
  switch (object) {
    case Routine_DeterminismLevel.DETERMINISM_LEVEL_UNSPECIFIED:
      return "DETERMINISM_LEVEL_UNSPECIFIED";
    case Routine_DeterminismLevel.DETERMINISTIC:
      return "DETERMINISTIC";
    case Routine_DeterminismLevel.NOT_DETERMINISTIC:
      return "NOT_DETERMINISTIC";
    case Routine_DeterminismLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Security mode. */
export enum Routine_SecurityMode {
  /** SECURITY_MODE_UNSPECIFIED - The security mode of the routine is unspecified. */
  SECURITY_MODE_UNSPECIFIED = 0,
  /**
   * DEFINER - The routine is to be executed with the privileges of the user who
   * defines it.
   */
  DEFINER = 1,
  /**
   * INVOKER - The routine is to be executed with the privileges of the user who
   * invokes it.
   */
  INVOKER = 2,
  UNRECOGNIZED = -1,
}

export function routine_SecurityModeFromJSON(object: any): Routine_SecurityMode {
  switch (object) {
    case 0:
    case "SECURITY_MODE_UNSPECIFIED":
      return Routine_SecurityMode.SECURITY_MODE_UNSPECIFIED;
    case 1:
    case "DEFINER":
      return Routine_SecurityMode.DEFINER;
    case 2:
    case "INVOKER":
      return Routine_SecurityMode.INVOKER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Routine_SecurityMode.UNRECOGNIZED;
  }
}

export function routine_SecurityModeToJSON(object: Routine_SecurityMode): string {
  switch (object) {
    case Routine_SecurityMode.SECURITY_MODE_UNSPECIFIED:
      return "SECURITY_MODE_UNSPECIFIED";
    case Routine_SecurityMode.DEFINER:
      return "DEFINER";
    case Routine_SecurityMode.INVOKER:
      return "INVOKER";
    case Routine_SecurityMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Data governance type values. Only supports `DATA_MASKING`. */
export enum Routine_DataGovernanceType {
  /** DATA_GOVERNANCE_TYPE_UNSPECIFIED - The data governance type is unspecified. */
  DATA_GOVERNANCE_TYPE_UNSPECIFIED = 0,
  /** DATA_MASKING - The data governance type is data masking. */
  DATA_MASKING = 1,
  UNRECOGNIZED = -1,
}

export function routine_DataGovernanceTypeFromJSON(object: any): Routine_DataGovernanceType {
  switch (object) {
    case 0:
    case "DATA_GOVERNANCE_TYPE_UNSPECIFIED":
      return Routine_DataGovernanceType.DATA_GOVERNANCE_TYPE_UNSPECIFIED;
    case 1:
    case "DATA_MASKING":
      return Routine_DataGovernanceType.DATA_MASKING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Routine_DataGovernanceType.UNRECOGNIZED;
  }
}

export function routine_DataGovernanceTypeToJSON(object: Routine_DataGovernanceType): string {
  switch (object) {
    case Routine_DataGovernanceType.DATA_GOVERNANCE_TYPE_UNSPECIFIED:
      return "DATA_GOVERNANCE_TYPE_UNSPECIFIED";
    case Routine_DataGovernanceType.DATA_MASKING:
      return "DATA_MASKING";
    case Routine_DataGovernanceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Input/output argument of a function or a stored procedure. */
export interface Routine_Argument {
  /**
   * Optional. The name of this argument. Can be absent for function return
   * argument.
   */
  name: string;
  /** Optional. Defaults to FIXED_TYPE. */
  argumentKind: Routine_Argument_ArgumentKind;
  /**
   * Optional. Specifies whether the argument is input or output.
   * Can be set for procedures only.
   */
  mode: Routine_Argument_Mode;
  /** Required unless argument_kind = ANY_TYPE. */
  dataType:
    | StandardSqlDataType
    | undefined;
  /**
   * Optional. Whether the argument is an aggregate function parameter.
   * Must be Unset for routine types other than AGGREGATE_FUNCTION.
   * For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT
   * AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT
   * AGGREGATE" clause in DDL.
   */
  isAggregate: boolean | undefined;
}

/** Represents the kind of a given argument. */
export enum Routine_Argument_ArgumentKind {
  /** ARGUMENT_KIND_UNSPECIFIED - Default value. */
  ARGUMENT_KIND_UNSPECIFIED = 0,
  /**
   * FIXED_TYPE - The argument is a variable with fully specified type, which can be a
   * struct or an array, but not a table.
   */
  FIXED_TYPE = 1,
  /**
   * ANY_TYPE - The argument is any type, including struct or array, but not a table.
   * To be added: FIXED_TABLE, ANY_TABLE
   */
  ANY_TYPE = 2,
  UNRECOGNIZED = -1,
}

export function routine_Argument_ArgumentKindFromJSON(object: any): Routine_Argument_ArgumentKind {
  switch (object) {
    case 0:
    case "ARGUMENT_KIND_UNSPECIFIED":
      return Routine_Argument_ArgumentKind.ARGUMENT_KIND_UNSPECIFIED;
    case 1:
    case "FIXED_TYPE":
      return Routine_Argument_ArgumentKind.FIXED_TYPE;
    case 2:
    case "ANY_TYPE":
      return Routine_Argument_ArgumentKind.ANY_TYPE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Routine_Argument_ArgumentKind.UNRECOGNIZED;
  }
}

export function routine_Argument_ArgumentKindToJSON(object: Routine_Argument_ArgumentKind): string {
  switch (object) {
    case Routine_Argument_ArgumentKind.ARGUMENT_KIND_UNSPECIFIED:
      return "ARGUMENT_KIND_UNSPECIFIED";
    case Routine_Argument_ArgumentKind.FIXED_TYPE:
      return "FIXED_TYPE";
    case Routine_Argument_ArgumentKind.ANY_TYPE:
      return "ANY_TYPE";
    case Routine_Argument_ArgumentKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The input/output mode of the argument. */
export enum Routine_Argument_Mode {
  /** MODE_UNSPECIFIED - Default value. */
  MODE_UNSPECIFIED = 0,
  /** IN - The argument is input-only. */
  IN = 1,
  /** OUT - The argument is output-only. */
  OUT = 2,
  /** INOUT - The argument is both an input and an output. */
  INOUT = 3,
  UNRECOGNIZED = -1,
}

export function routine_Argument_ModeFromJSON(object: any): Routine_Argument_Mode {
  switch (object) {
    case 0:
    case "MODE_UNSPECIFIED":
      return Routine_Argument_Mode.MODE_UNSPECIFIED;
    case 1:
    case "IN":
      return Routine_Argument_Mode.IN;
    case 2:
    case "OUT":
      return Routine_Argument_Mode.OUT;
    case 3:
    case "INOUT":
      return Routine_Argument_Mode.INOUT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Routine_Argument_Mode.UNRECOGNIZED;
  }
}

export function routine_Argument_ModeToJSON(object: Routine_Argument_Mode): string {
  switch (object) {
    case Routine_Argument_Mode.MODE_UNSPECIFIED:
      return "MODE_UNSPECIFIED";
    case Routine_Argument_Mode.IN:
      return "IN";
    case Routine_Argument_Mode.OUT:
      return "OUT";
    case Routine_Argument_Mode.INOUT:
      return "INOUT";
    case Routine_Argument_Mode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Options for a remote user-defined function. */
export interface Routine_RemoteFunctionOptions {
  /**
   * Endpoint of the user-provided remote service, e.g.
   * ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
   */
  endpoint: string;
  /**
   * Fully qualified name of the user-provided connection object which holds
   * the authentication information to send requests to the remote service.
   * Format:
   * ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
   */
  connection: string;
  /**
   * User-defined context as a set of key/value pairs, which will be sent as
   * function invocation context together with batched arguments in the
   * requests to the remote service. The total number of bytes of keys and
   * values must be less than 8KB.
   */
  userDefinedContext: { [key: string]: string };
  /**
   * Max number of rows in each batch sent to the remote service.
   * If absent or if 0, BigQuery dynamically decides the number of rows in a
   * batch.
   */
  maxBatchingRows: Long;
}

export interface Routine_RemoteFunctionOptions_UserDefinedContextEntry {
  key: string;
  value: string;
}

/** Options for a user-defined Spark routine. */
export interface SparkOptions {
  /**
   * Fully qualified name of the user-provided Spark connection object. Format:
   * ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
   */
  connection: string;
  /** Runtime version. If not specified, the default runtime version is used. */
  runtimeVersion: string;
  /** Custom container image for the runtime environment. */
  containerImage: string;
  /**
   * Configuration properties as a set of key/value pairs, which will be passed
   * on to the Spark application. For more information, see
   * [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the
   * [procedure option
   * list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
   */
  properties: { [key: string]: string };
  /**
   * The main file/jar URI of the Spark application. Exactly one of the
   * definition_body field and the main_file_uri field must be set for Python.
   * Exactly one of main_class and main_file_uri field
   * should be set for Java/Scala language type.
   */
  mainFileUri: string;
  /**
   * Python files to be placed on the PYTHONPATH for PySpark application.
   * Supported file types: `.py`, `.egg`, and `.zip`. For more information
   * about Apache Spark, see
   * [Apache Spark](https://spark.apache.org/docs/latest/index.html).
   */
  pyFileUris: string[];
  /**
   * JARs to include on the driver and executor CLASSPATH.
   * For more information about Apache Spark, see
   * [Apache Spark](https://spark.apache.org/docs/latest/index.html).
   */
  jarUris: string[];
  /**
   * Files to be placed in the working directory of each executor.
   * For more information about Apache Spark, see
   * [Apache Spark](https://spark.apache.org/docs/latest/index.html).
   */
  fileUris: string[];
  /**
   * Archive files to be extracted into the working directory of each executor.
   * For more information about Apache Spark, see
   * [Apache Spark](https://spark.apache.org/docs/latest/index.html).
   */
  archiveUris: string[];
  /**
   * The fully qualified name of a class in jar_uris, for example,
   * com.example.wordcount. Exactly one of main_class and main_jar_uri field
   *  should be set for Java/Scala language type.
   */
  mainClass: string;
}

export interface SparkOptions_PropertiesEntry {
  key: string;
  value: string;
}

/** Describes the format for getting information about a routine. */
export interface GetRoutineRequest {
  /** Required. Project ID of the requested routine */
  projectId: string;
  /** Required. Dataset ID of the requested routine */
  datasetId: string;
  /** Required. Routine ID of the requested routine */
  routineId: string;
}

/** Describes the format for inserting a routine. */
export interface InsertRoutineRequest {
  /** Required. Project ID of the new routine */
  projectId: string;
  /** Required. Dataset ID of the new routine */
  datasetId: string;
  /** Required. A routine resource to insert */
  routine: Routine | undefined;
}

/** Describes the format for updating a routine. */
export interface UpdateRoutineRequest {
  /** Required. Project ID of the routine to update */
  projectId: string;
  /** Required. Dataset ID of the routine to update */
  datasetId: string;
  /** Required. Routine ID of the routine to update */
  routineId: string;
  /** Required. A routine resource which will replace the specified routine */
  routine: Routine | undefined;
}

/** Describes the format for the partial update (patch) of a routine. */
export interface PatchRoutineRequest {
  /** Required. Project ID of the routine to update */
  projectId: string;
  /** Required. Dataset ID of the routine to update */
  datasetId: string;
  /** Required. Routine ID of the routine to update */
  routineId: string;
  /**
   * Required. A routine resource which will be used to partially
   * update the specified routine
   */
  routine:
    | Routine
    | undefined;
  /**
   * Only the Routine fields in the field mask are updated
   * by the given routine. Repeated routine fields will be fully replaced
   * if contained in the field mask.
   */
  fieldMask: string[] | undefined;
}

/** Describes the format for deleting a routine. */
export interface DeleteRoutineRequest {
  /** Required. Project ID of the routine to delete */
  projectId: string;
  /** Required. Dataset ID of the routine to delete */
  datasetId: string;
  /** Required. Routine ID of the routine to delete */
  routineId: string;
}

/** Describes the format for listing routines. */
export interface ListRoutinesRequest {
  /** Required. Project ID of the routines to list */
  projectId: string;
  /** Required. Dataset ID of the routines to list */
  datasetId: string;
  /**
   * The maximum number of results to return in a single response page.
   * Leverage the page tokens to iterate through the entire collection.
   */
  maxResults:
    | number
    | undefined;
  /**
   * Page token, returned by a previous call, to request the next page of
   * results
   */
  pageToken: string;
  /**
   * If set, then only the Routines matching this filter are returned.
   * The supported format is `routineType:{RoutineType}`, where `{RoutineType}`
   * is a RoutineType enum. For example: `routineType:SCALAR_FUNCTION`.
   */
  filter: string;
}

/** Describes the format of a single result page when listing routines. */
export interface ListRoutinesResponse {
  /**
   * Routines in the requested dataset. Unless read_mask is set in the request,
   * only the following fields are populated:
   * etag, project_id, dataset_id, routine_id, routine_type, creation_time,
   * last_modified_time, language, and remote_function_options.
   */
  routines: Routine[];
  /** A token to request the next page of results. */
  nextPageToken: string;
}

function createBaseRoutine(): Routine {
  return {
    etag: "",
    routineReference: undefined,
    routineType: 0,
    creationTime: Long.ZERO,
    lastModifiedTime: Long.ZERO,
    language: 0,
    arguments: [],
    returnType: undefined,
    returnTableType: undefined,
    importedLibraries: [],
    definitionBody: "",
    description: "",
    determinismLevel: 0,
    securityMode: 0,
    strictMode: undefined,
    remoteFunctionOptions: undefined,
    sparkOptions: undefined,
    dataGovernanceType: 0,
  };
}

export const Routine: MessageFns<Routine> = {
  encode(message: Routine, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.etag !== "") {
      writer.uint32(10).string(message.etag);
    }
    if (message.routineReference !== undefined) {
      RoutineReference.encode(message.routineReference, writer.uint32(18).fork()).join();
    }
    if (message.routineType !== 0) {
      writer.uint32(24).int32(message.routineType);
    }
    if (!message.creationTime.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.creationTime.toString());
    }
    if (!message.lastModifiedTime.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.lastModifiedTime.toString());
    }
    if (message.language !== 0) {
      writer.uint32(48).int32(message.language);
    }
    for (const v of message.arguments) {
      Routine_Argument.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.returnType !== undefined) {
      StandardSqlDataType.encode(message.returnType, writer.uint32(82).fork()).join();
    }
    if (message.returnTableType !== undefined) {
      StandardSqlTableType.encode(message.returnTableType, writer.uint32(106).fork()).join();
    }
    for (const v of message.importedLibraries) {
      writer.uint32(66).string(v!);
    }
    if (message.definitionBody !== "") {
      writer.uint32(74).string(message.definitionBody);
    }
    if (message.description !== "") {
      writer.uint32(90).string(message.description);
    }
    if (message.determinismLevel !== 0) {
      writer.uint32(96).int32(message.determinismLevel);
    }
    if (message.securityMode !== 0) {
      writer.uint32(144).int32(message.securityMode);
    }
    if (message.strictMode !== undefined) {
      BoolValue.encode({ value: message.strictMode! }, writer.uint32(114).fork()).join();
    }
    if (message.remoteFunctionOptions !== undefined) {
      Routine_RemoteFunctionOptions.encode(message.remoteFunctionOptions, writer.uint32(122).fork()).join();
    }
    if (message.sparkOptions !== undefined) {
      SparkOptions.encode(message.sparkOptions, writer.uint32(130).fork()).join();
    }
    if (message.dataGovernanceType !== 0) {
      writer.uint32(136).int32(message.dataGovernanceType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Routine {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutine();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.routineReference = RoutineReference.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.routineType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.creationTime = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.lastModifiedTime = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.language = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.arguments.push(Routine_Argument.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.returnType = StandardSqlDataType.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.returnTableType = StandardSqlTableType.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.importedLibraries.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.definitionBody = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.description = reader.string();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.determinismLevel = reader.int32() as any;
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.securityMode = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.strictMode = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.remoteFunctionOptions = Routine_RemoteFunctionOptions.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.sparkOptions = SparkOptions.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.dataGovernanceType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Routine {
    return {
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      routineReference: isSet(object.routineReference) ? RoutineReference.fromJSON(object.routineReference) : undefined,
      routineType: isSet(object.routineType) ? routine_RoutineTypeFromJSON(object.routineType) : 0,
      creationTime: isSet(object.creationTime) ? Long.fromValue(object.creationTime) : Long.ZERO,
      lastModifiedTime: isSet(object.lastModifiedTime) ? Long.fromValue(object.lastModifiedTime) : Long.ZERO,
      language: isSet(object.language) ? routine_LanguageFromJSON(object.language) : 0,
      arguments: globalThis.Array.isArray(object?.arguments)
        ? object.arguments.map((e: any) => Routine_Argument.fromJSON(e))
        : [],
      returnType: isSet(object.returnType) ? StandardSqlDataType.fromJSON(object.returnType) : undefined,
      returnTableType: isSet(object.returnTableType)
        ? StandardSqlTableType.fromJSON(object.returnTableType)
        : undefined,
      importedLibraries: globalThis.Array.isArray(object?.importedLibraries)
        ? object.importedLibraries.map((e: any) => globalThis.String(e))
        : [],
      definitionBody: isSet(object.definitionBody) ? globalThis.String(object.definitionBody) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      determinismLevel: isSet(object.determinismLevel) ? routine_DeterminismLevelFromJSON(object.determinismLevel) : 0,
      securityMode: isSet(object.securityMode) ? routine_SecurityModeFromJSON(object.securityMode) : 0,
      strictMode: isSet(object.strictMode) ? Boolean(object.strictMode) : undefined,
      remoteFunctionOptions: isSet(object.remoteFunctionOptions)
        ? Routine_RemoteFunctionOptions.fromJSON(object.remoteFunctionOptions)
        : undefined,
      sparkOptions: isSet(object.sparkOptions) ? SparkOptions.fromJSON(object.sparkOptions) : undefined,
      dataGovernanceType: isSet(object.dataGovernanceType)
        ? routine_DataGovernanceTypeFromJSON(object.dataGovernanceType)
        : 0,
    };
  },

  toJSON(message: Routine): unknown {
    const obj: any = {};
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.routineReference !== undefined) {
      obj.routineReference = RoutineReference.toJSON(message.routineReference);
    }
    if (message.routineType !== 0) {
      obj.routineType = routine_RoutineTypeToJSON(message.routineType);
    }
    if (!message.creationTime.equals(Long.ZERO)) {
      obj.creationTime = (message.creationTime || Long.ZERO).toString();
    }
    if (!message.lastModifiedTime.equals(Long.ZERO)) {
      obj.lastModifiedTime = (message.lastModifiedTime || Long.ZERO).toString();
    }
    if (message.language !== 0) {
      obj.language = routine_LanguageToJSON(message.language);
    }
    if (message.arguments?.length) {
      obj.arguments = message.arguments.map((e) => Routine_Argument.toJSON(e));
    }
    if (message.returnType !== undefined) {
      obj.returnType = StandardSqlDataType.toJSON(message.returnType);
    }
    if (message.returnTableType !== undefined) {
      obj.returnTableType = StandardSqlTableType.toJSON(message.returnTableType);
    }
    if (message.importedLibraries?.length) {
      obj.importedLibraries = message.importedLibraries;
    }
    if (message.definitionBody !== "") {
      obj.definitionBody = message.definitionBody;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.determinismLevel !== 0) {
      obj.determinismLevel = routine_DeterminismLevelToJSON(message.determinismLevel);
    }
    if (message.securityMode !== 0) {
      obj.securityMode = routine_SecurityModeToJSON(message.securityMode);
    }
    if (message.strictMode !== undefined) {
      obj.strictMode = message.strictMode;
    }
    if (message.remoteFunctionOptions !== undefined) {
      obj.remoteFunctionOptions = Routine_RemoteFunctionOptions.toJSON(message.remoteFunctionOptions);
    }
    if (message.sparkOptions !== undefined) {
      obj.sparkOptions = SparkOptions.toJSON(message.sparkOptions);
    }
    if (message.dataGovernanceType !== 0) {
      obj.dataGovernanceType = routine_DataGovernanceTypeToJSON(message.dataGovernanceType);
    }
    return obj;
  },

  create(base?: DeepPartial<Routine>): Routine {
    return Routine.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Routine>): Routine {
    const message = createBaseRoutine();
    message.etag = object.etag ?? "";
    message.routineReference = (object.routineReference !== undefined && object.routineReference !== null)
      ? RoutineReference.fromPartial(object.routineReference)
      : undefined;
    message.routineType = object.routineType ?? 0;
    message.creationTime = (object.creationTime !== undefined && object.creationTime !== null)
      ? Long.fromValue(object.creationTime)
      : Long.ZERO;
    message.lastModifiedTime = (object.lastModifiedTime !== undefined && object.lastModifiedTime !== null)
      ? Long.fromValue(object.lastModifiedTime)
      : Long.ZERO;
    message.language = object.language ?? 0;
    message.arguments = object.arguments?.map((e) => Routine_Argument.fromPartial(e)) || [];
    message.returnType = (object.returnType !== undefined && object.returnType !== null)
      ? StandardSqlDataType.fromPartial(object.returnType)
      : undefined;
    message.returnTableType = (object.returnTableType !== undefined && object.returnTableType !== null)
      ? StandardSqlTableType.fromPartial(object.returnTableType)
      : undefined;
    message.importedLibraries = object.importedLibraries?.map((e) => e) || [];
    message.definitionBody = object.definitionBody ?? "";
    message.description = object.description ?? "";
    message.determinismLevel = object.determinismLevel ?? 0;
    message.securityMode = object.securityMode ?? 0;
    message.strictMode = object.strictMode ?? undefined;
    message.remoteFunctionOptions =
      (object.remoteFunctionOptions !== undefined && object.remoteFunctionOptions !== null)
        ? Routine_RemoteFunctionOptions.fromPartial(object.remoteFunctionOptions)
        : undefined;
    message.sparkOptions = (object.sparkOptions !== undefined && object.sparkOptions !== null)
      ? SparkOptions.fromPartial(object.sparkOptions)
      : undefined;
    message.dataGovernanceType = object.dataGovernanceType ?? 0;
    return message;
  },
};

function createBaseRoutine_Argument(): Routine_Argument {
  return { name: "", argumentKind: 0, mode: 0, dataType: undefined, isAggregate: undefined };
}

export const Routine_Argument: MessageFns<Routine_Argument> = {
  encode(message: Routine_Argument, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.argumentKind !== 0) {
      writer.uint32(16).int32(message.argumentKind);
    }
    if (message.mode !== 0) {
      writer.uint32(24).int32(message.mode);
    }
    if (message.dataType !== undefined) {
      StandardSqlDataType.encode(message.dataType, writer.uint32(34).fork()).join();
    }
    if (message.isAggregate !== undefined) {
      BoolValue.encode({ value: message.isAggregate! }, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Routine_Argument {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutine_Argument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.argumentKind = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataType = StandardSqlDataType.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.isAggregate = BoolValue.decode(reader, reader.uint32()).value;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Routine_Argument {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      argumentKind: isSet(object.argumentKind) ? routine_Argument_ArgumentKindFromJSON(object.argumentKind) : 0,
      mode: isSet(object.mode) ? routine_Argument_ModeFromJSON(object.mode) : 0,
      dataType: isSet(object.dataType) ? StandardSqlDataType.fromJSON(object.dataType) : undefined,
      isAggregate: isSet(object.isAggregate) ? Boolean(object.isAggregate) : undefined,
    };
  },

  toJSON(message: Routine_Argument): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.argumentKind !== 0) {
      obj.argumentKind = routine_Argument_ArgumentKindToJSON(message.argumentKind);
    }
    if (message.mode !== 0) {
      obj.mode = routine_Argument_ModeToJSON(message.mode);
    }
    if (message.dataType !== undefined) {
      obj.dataType = StandardSqlDataType.toJSON(message.dataType);
    }
    if (message.isAggregate !== undefined) {
      obj.isAggregate = message.isAggregate;
    }
    return obj;
  },

  create(base?: DeepPartial<Routine_Argument>): Routine_Argument {
    return Routine_Argument.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Routine_Argument>): Routine_Argument {
    const message = createBaseRoutine_Argument();
    message.name = object.name ?? "";
    message.argumentKind = object.argumentKind ?? 0;
    message.mode = object.mode ?? 0;
    message.dataType = (object.dataType !== undefined && object.dataType !== null)
      ? StandardSqlDataType.fromPartial(object.dataType)
      : undefined;
    message.isAggregate = object.isAggregate ?? undefined;
    return message;
  },
};

function createBaseRoutine_RemoteFunctionOptions(): Routine_RemoteFunctionOptions {
  return { endpoint: "", connection: "", userDefinedContext: {}, maxBatchingRows: Long.ZERO };
}

export const Routine_RemoteFunctionOptions: MessageFns<Routine_RemoteFunctionOptions> = {
  encode(message: Routine_RemoteFunctionOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.connection !== "") {
      writer.uint32(18).string(message.connection);
    }
    Object.entries(message.userDefinedContext).forEach(([key, value]) => {
      Routine_RemoteFunctionOptions_UserDefinedContextEntry.encode({ key: key as any, value }, writer.uint32(26).fork())
        .join();
    });
    if (!message.maxBatchingRows.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.maxBatchingRows.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Routine_RemoteFunctionOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutine_RemoteFunctionOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connection = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = Routine_RemoteFunctionOptions_UserDefinedContextEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.userDefinedContext[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxBatchingRows = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Routine_RemoteFunctionOptions {
    return {
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      connection: isSet(object.connection) ? globalThis.String(object.connection) : "",
      userDefinedContext: isObject(object.userDefinedContext)
        ? Object.entries(object.userDefinedContext).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      maxBatchingRows: isSet(object.maxBatchingRows) ? Long.fromValue(object.maxBatchingRows) : Long.ZERO,
    };
  },

  toJSON(message: Routine_RemoteFunctionOptions): unknown {
    const obj: any = {};
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.connection !== "") {
      obj.connection = message.connection;
    }
    if (message.userDefinedContext) {
      const entries = Object.entries(message.userDefinedContext);
      if (entries.length > 0) {
        obj.userDefinedContext = {};
        entries.forEach(([k, v]) => {
          obj.userDefinedContext[k] = v;
        });
      }
    }
    if (!message.maxBatchingRows.equals(Long.ZERO)) {
      obj.maxBatchingRows = (message.maxBatchingRows || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Routine_RemoteFunctionOptions>): Routine_RemoteFunctionOptions {
    return Routine_RemoteFunctionOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Routine_RemoteFunctionOptions>): Routine_RemoteFunctionOptions {
    const message = createBaseRoutine_RemoteFunctionOptions();
    message.endpoint = object.endpoint ?? "";
    message.connection = object.connection ?? "";
    message.userDefinedContext = Object.entries(object.userDefinedContext ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.maxBatchingRows = (object.maxBatchingRows !== undefined && object.maxBatchingRows !== null)
      ? Long.fromValue(object.maxBatchingRows)
      : Long.ZERO;
    return message;
  },
};

function createBaseRoutine_RemoteFunctionOptions_UserDefinedContextEntry(): Routine_RemoteFunctionOptions_UserDefinedContextEntry {
  return { key: "", value: "" };
}

export const Routine_RemoteFunctionOptions_UserDefinedContextEntry: MessageFns<
  Routine_RemoteFunctionOptions_UserDefinedContextEntry
> = {
  encode(
    message: Routine_RemoteFunctionOptions_UserDefinedContextEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Routine_RemoteFunctionOptions_UserDefinedContextEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutine_RemoteFunctionOptions_UserDefinedContextEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Routine_RemoteFunctionOptions_UserDefinedContextEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Routine_RemoteFunctionOptions_UserDefinedContextEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<Routine_RemoteFunctionOptions_UserDefinedContextEntry>,
  ): Routine_RemoteFunctionOptions_UserDefinedContextEntry {
    return Routine_RemoteFunctionOptions_UserDefinedContextEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<Routine_RemoteFunctionOptions_UserDefinedContextEntry>,
  ): Routine_RemoteFunctionOptions_UserDefinedContextEntry {
    const message = createBaseRoutine_RemoteFunctionOptions_UserDefinedContextEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSparkOptions(): SparkOptions {
  return {
    connection: "",
    runtimeVersion: "",
    containerImage: "",
    properties: {},
    mainFileUri: "",
    pyFileUris: [],
    jarUris: [],
    fileUris: [],
    archiveUris: [],
    mainClass: "",
  };
}

export const SparkOptions: MessageFns<SparkOptions> = {
  encode(message: SparkOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connection !== "") {
      writer.uint32(10).string(message.connection);
    }
    if (message.runtimeVersion !== "") {
      writer.uint32(18).string(message.runtimeVersion);
    }
    if (message.containerImage !== "") {
      writer.uint32(26).string(message.containerImage);
    }
    Object.entries(message.properties).forEach(([key, value]) => {
      SparkOptions_PropertiesEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.mainFileUri !== "") {
      writer.uint32(42).string(message.mainFileUri);
    }
    for (const v of message.pyFileUris) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.jarUris) {
      writer.uint32(58).string(v!);
    }
    for (const v of message.fileUris) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.archiveUris) {
      writer.uint32(74).string(v!);
    }
    if (message.mainClass !== "") {
      writer.uint32(82).string(message.mainClass);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SparkOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSparkOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connection = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.runtimeVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.containerImage = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = SparkOptions_PropertiesEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.properties[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.mainFileUri = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.pyFileUris.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.jarUris.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.fileUris.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.archiveUris.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.mainClass = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SparkOptions {
    return {
      connection: isSet(object.connection) ? globalThis.String(object.connection) : "",
      runtimeVersion: isSet(object.runtimeVersion) ? globalThis.String(object.runtimeVersion) : "",
      containerImage: isSet(object.containerImage) ? globalThis.String(object.containerImage) : "",
      properties: isObject(object.properties)
        ? Object.entries(object.properties).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      mainFileUri: isSet(object.mainFileUri) ? globalThis.String(object.mainFileUri) : "",
      pyFileUris: globalThis.Array.isArray(object?.pyFileUris)
        ? object.pyFileUris.map((e: any) => globalThis.String(e))
        : [],
      jarUris: globalThis.Array.isArray(object?.jarUris) ? object.jarUris.map((e: any) => globalThis.String(e)) : [],
      fileUris: globalThis.Array.isArray(object?.fileUris) ? object.fileUris.map((e: any) => globalThis.String(e)) : [],
      archiveUris: globalThis.Array.isArray(object?.archiveUris)
        ? object.archiveUris.map((e: any) => globalThis.String(e))
        : [],
      mainClass: isSet(object.mainClass) ? globalThis.String(object.mainClass) : "",
    };
  },

  toJSON(message: SparkOptions): unknown {
    const obj: any = {};
    if (message.connection !== "") {
      obj.connection = message.connection;
    }
    if (message.runtimeVersion !== "") {
      obj.runtimeVersion = message.runtimeVersion;
    }
    if (message.containerImage !== "") {
      obj.containerImage = message.containerImage;
    }
    if (message.properties) {
      const entries = Object.entries(message.properties);
      if (entries.length > 0) {
        obj.properties = {};
        entries.forEach(([k, v]) => {
          obj.properties[k] = v;
        });
      }
    }
    if (message.mainFileUri !== "") {
      obj.mainFileUri = message.mainFileUri;
    }
    if (message.pyFileUris?.length) {
      obj.pyFileUris = message.pyFileUris;
    }
    if (message.jarUris?.length) {
      obj.jarUris = message.jarUris;
    }
    if (message.fileUris?.length) {
      obj.fileUris = message.fileUris;
    }
    if (message.archiveUris?.length) {
      obj.archiveUris = message.archiveUris;
    }
    if (message.mainClass !== "") {
      obj.mainClass = message.mainClass;
    }
    return obj;
  },

  create(base?: DeepPartial<SparkOptions>): SparkOptions {
    return SparkOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SparkOptions>): SparkOptions {
    const message = createBaseSparkOptions();
    message.connection = object.connection ?? "";
    message.runtimeVersion = object.runtimeVersion ?? "";
    message.containerImage = object.containerImage ?? "";
    message.properties = Object.entries(object.properties ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.mainFileUri = object.mainFileUri ?? "";
    message.pyFileUris = object.pyFileUris?.map((e) => e) || [];
    message.jarUris = object.jarUris?.map((e) => e) || [];
    message.fileUris = object.fileUris?.map((e) => e) || [];
    message.archiveUris = object.archiveUris?.map((e) => e) || [];
    message.mainClass = object.mainClass ?? "";
    return message;
  },
};

function createBaseSparkOptions_PropertiesEntry(): SparkOptions_PropertiesEntry {
  return { key: "", value: "" };
}

export const SparkOptions_PropertiesEntry: MessageFns<SparkOptions_PropertiesEntry> = {
  encode(message: SparkOptions_PropertiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SparkOptions_PropertiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSparkOptions_PropertiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SparkOptions_PropertiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SparkOptions_PropertiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SparkOptions_PropertiesEntry>): SparkOptions_PropertiesEntry {
    return SparkOptions_PropertiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SparkOptions_PropertiesEntry>): SparkOptions_PropertiesEntry {
    const message = createBaseSparkOptions_PropertiesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetRoutineRequest(): GetRoutineRequest {
  return { projectId: "", datasetId: "", routineId: "" };
}

export const GetRoutineRequest: MessageFns<GetRoutineRequest> = {
  encode(message: GetRoutineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.datasetId !== "") {
      writer.uint32(18).string(message.datasetId);
    }
    if (message.routineId !== "") {
      writer.uint32(26).string(message.routineId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRoutineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRoutineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.routineId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRoutineRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : "",
      routineId: isSet(object.routineId) ? globalThis.String(object.routineId) : "",
    };
  },

  toJSON(message: GetRoutineRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.datasetId !== "") {
      obj.datasetId = message.datasetId;
    }
    if (message.routineId !== "") {
      obj.routineId = message.routineId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRoutineRequest>): GetRoutineRequest {
    return GetRoutineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRoutineRequest>): GetRoutineRequest {
    const message = createBaseGetRoutineRequest();
    message.projectId = object.projectId ?? "";
    message.datasetId = object.datasetId ?? "";
    message.routineId = object.routineId ?? "";
    return message;
  },
};

function createBaseInsertRoutineRequest(): InsertRoutineRequest {
  return { projectId: "", datasetId: "", routine: undefined };
}

export const InsertRoutineRequest: MessageFns<InsertRoutineRequest> = {
  encode(message: InsertRoutineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.datasetId !== "") {
      writer.uint32(18).string(message.datasetId);
    }
    if (message.routine !== undefined) {
      Routine.encode(message.routine, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsertRoutineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertRoutineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.routine = Routine.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertRoutineRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : "",
      routine: isSet(object.routine) ? Routine.fromJSON(object.routine) : undefined,
    };
  },

  toJSON(message: InsertRoutineRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.datasetId !== "") {
      obj.datasetId = message.datasetId;
    }
    if (message.routine !== undefined) {
      obj.routine = Routine.toJSON(message.routine);
    }
    return obj;
  },

  create(base?: DeepPartial<InsertRoutineRequest>): InsertRoutineRequest {
    return InsertRoutineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsertRoutineRequest>): InsertRoutineRequest {
    const message = createBaseInsertRoutineRequest();
    message.projectId = object.projectId ?? "";
    message.datasetId = object.datasetId ?? "";
    message.routine = (object.routine !== undefined && object.routine !== null)
      ? Routine.fromPartial(object.routine)
      : undefined;
    return message;
  },
};

function createBaseUpdateRoutineRequest(): UpdateRoutineRequest {
  return { projectId: "", datasetId: "", routineId: "", routine: undefined };
}

export const UpdateRoutineRequest: MessageFns<UpdateRoutineRequest> = {
  encode(message: UpdateRoutineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.datasetId !== "") {
      writer.uint32(18).string(message.datasetId);
    }
    if (message.routineId !== "") {
      writer.uint32(26).string(message.routineId);
    }
    if (message.routine !== undefined) {
      Routine.encode(message.routine, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRoutineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRoutineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.routineId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.routine = Routine.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRoutineRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : "",
      routineId: isSet(object.routineId) ? globalThis.String(object.routineId) : "",
      routine: isSet(object.routine) ? Routine.fromJSON(object.routine) : undefined,
    };
  },

  toJSON(message: UpdateRoutineRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.datasetId !== "") {
      obj.datasetId = message.datasetId;
    }
    if (message.routineId !== "") {
      obj.routineId = message.routineId;
    }
    if (message.routine !== undefined) {
      obj.routine = Routine.toJSON(message.routine);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRoutineRequest>): UpdateRoutineRequest {
    return UpdateRoutineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRoutineRequest>): UpdateRoutineRequest {
    const message = createBaseUpdateRoutineRequest();
    message.projectId = object.projectId ?? "";
    message.datasetId = object.datasetId ?? "";
    message.routineId = object.routineId ?? "";
    message.routine = (object.routine !== undefined && object.routine !== null)
      ? Routine.fromPartial(object.routine)
      : undefined;
    return message;
  },
};

function createBasePatchRoutineRequest(): PatchRoutineRequest {
  return { projectId: "", datasetId: "", routineId: "", routine: undefined, fieldMask: undefined };
}

export const PatchRoutineRequest: MessageFns<PatchRoutineRequest> = {
  encode(message: PatchRoutineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.datasetId !== "") {
      writer.uint32(18).string(message.datasetId);
    }
    if (message.routineId !== "") {
      writer.uint32(26).string(message.routineId);
    }
    if (message.routine !== undefined) {
      Routine.encode(message.routine, writer.uint32(34).fork()).join();
    }
    if (message.fieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatchRoutineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchRoutineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.routineId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.routine = Routine.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.fieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PatchRoutineRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : "",
      routineId: isSet(object.routineId) ? globalThis.String(object.routineId) : "",
      routine: isSet(object.routine) ? Routine.fromJSON(object.routine) : undefined,
      fieldMask: isSet(object.fieldMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldMask)) : undefined,
    };
  },

  toJSON(message: PatchRoutineRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.datasetId !== "") {
      obj.datasetId = message.datasetId;
    }
    if (message.routineId !== "") {
      obj.routineId = message.routineId;
    }
    if (message.routine !== undefined) {
      obj.routine = Routine.toJSON(message.routine);
    }
    if (message.fieldMask !== undefined) {
      obj.fieldMask = FieldMask.toJSON(FieldMask.wrap(message.fieldMask));
    }
    return obj;
  },

  create(base?: DeepPartial<PatchRoutineRequest>): PatchRoutineRequest {
    return PatchRoutineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PatchRoutineRequest>): PatchRoutineRequest {
    const message = createBasePatchRoutineRequest();
    message.projectId = object.projectId ?? "";
    message.datasetId = object.datasetId ?? "";
    message.routineId = object.routineId ?? "";
    message.routine = (object.routine !== undefined && object.routine !== null)
      ? Routine.fromPartial(object.routine)
      : undefined;
    message.fieldMask = object.fieldMask ?? undefined;
    return message;
  },
};

function createBaseDeleteRoutineRequest(): DeleteRoutineRequest {
  return { projectId: "", datasetId: "", routineId: "" };
}

export const DeleteRoutineRequest: MessageFns<DeleteRoutineRequest> = {
  encode(message: DeleteRoutineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.datasetId !== "") {
      writer.uint32(18).string(message.datasetId);
    }
    if (message.routineId !== "") {
      writer.uint32(26).string(message.routineId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRoutineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRoutineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.routineId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRoutineRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : "",
      routineId: isSet(object.routineId) ? globalThis.String(object.routineId) : "",
    };
  },

  toJSON(message: DeleteRoutineRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.datasetId !== "") {
      obj.datasetId = message.datasetId;
    }
    if (message.routineId !== "") {
      obj.routineId = message.routineId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRoutineRequest>): DeleteRoutineRequest {
    return DeleteRoutineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRoutineRequest>): DeleteRoutineRequest {
    const message = createBaseDeleteRoutineRequest();
    message.projectId = object.projectId ?? "";
    message.datasetId = object.datasetId ?? "";
    message.routineId = object.routineId ?? "";
    return message;
  },
};

function createBaseListRoutinesRequest(): ListRoutinesRequest {
  return { projectId: "", datasetId: "", maxResults: undefined, pageToken: "", filter: "" };
}

export const ListRoutinesRequest: MessageFns<ListRoutinesRequest> = {
  encode(message: ListRoutinesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.datasetId !== "") {
      writer.uint32(18).string(message.datasetId);
    }
    if (message.maxResults !== undefined) {
      UInt32Value.encode({ value: message.maxResults! }, writer.uint32(26).fork()).join();
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(50).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRoutinesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRoutinesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.maxResults = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRoutinesRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : "",
      maxResults: isSet(object.maxResults) ? Number(object.maxResults) : undefined,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListRoutinesRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.datasetId !== "") {
      obj.datasetId = message.datasetId;
    }
    if (message.maxResults !== undefined) {
      obj.maxResults = message.maxResults;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRoutinesRequest>): ListRoutinesRequest {
    return ListRoutinesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRoutinesRequest>): ListRoutinesRequest {
    const message = createBaseListRoutinesRequest();
    message.projectId = object.projectId ?? "";
    message.datasetId = object.datasetId ?? "";
    message.maxResults = object.maxResults ?? undefined;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListRoutinesResponse(): ListRoutinesResponse {
  return { routines: [], nextPageToken: "" };
}

export const ListRoutinesResponse: MessageFns<ListRoutinesResponse> = {
  encode(message: ListRoutinesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.routines) {
      Routine.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRoutinesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRoutinesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.routines.push(Routine.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRoutinesResponse {
    return {
      routines: globalThis.Array.isArray(object?.routines) ? object.routines.map((e: any) => Routine.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRoutinesResponse): unknown {
    const obj: any = {};
    if (message.routines?.length) {
      obj.routines = message.routines.map((e) => Routine.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRoutinesResponse>): ListRoutinesResponse {
    return ListRoutinesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRoutinesResponse>): ListRoutinesResponse {
    const message = createBaseListRoutinesResponse();
    message.routines = object.routines?.map((e) => Routine.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * This is an experimental RPC service definition for the BigQuery
 * Routine Service.
 *
 * It should not be relied on for production use cases at this time.
 */
export type RoutineServiceDefinition = typeof RoutineServiceDefinition;
export const RoutineServiceDefinition = {
  name: "RoutineService",
  fullName: "google.cloud.bigquery.v2.RoutineService",
  methods: {
    /** Gets the specified routine resource by routine ID. */
    getRoutine: {
      name: "GetRoutine",
      requestType: GetRoutineRequest,
      requestStream: false,
      responseType: Routine,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              86,
              18,
              84,
              47,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              47,
              118,
              50,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              114,
              111,
              117,
              116,
              105,
              110,
              101,
              115,
              47,
              123,
              114,
              111,
              117,
              116,
              105,
              110,
              101,
              95,
              105,
              100,
              61,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new routine in the dataset. */
    insertRoutine: {
      name: "InsertRoutine",
      requestType: InsertRoutineRequest,
      requestStream: false,
      responseType: Routine,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              80,
              58,
              7,
              114,
              111,
              117,
              116,
              105,
              110,
              101,
              34,
              69,
              47,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              47,
              118,
              50,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              114,
              111,
              117,
              116,
              105,
              110,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates information in an existing routine. The update method replaces the
     * entire Routine resource.
     */
    updateRoutine: {
      name: "UpdateRoutine",
      requestType: UpdateRoutineRequest,
      requestStream: false,
      responseType: Routine,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              95,
              58,
              7,
              114,
              111,
              117,
              116,
              105,
              110,
              101,
              26,
              84,
              47,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              47,
              118,
              50,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              114,
              111,
              117,
              116,
              105,
              110,
              101,
              115,
              47,
              123,
              114,
              111,
              117,
              116,
              105,
              110,
              101,
              95,
              105,
              100,
              61,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Patches information in an existing routine. The patch method does a partial
     * update to an existing Routine resource.
     */
    patchRoutine: {
      name: "PatchRoutine",
      requestType: PatchRoutineRequest,
      requestStream: false,
      responseType: Routine,
      responseStream: false,
      options: {},
    },
    /** Deletes the routine specified by routineId from the dataset. */
    deleteRoutine: {
      name: "DeleteRoutine",
      requestType: DeleteRoutineRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              86,
              42,
              84,
              47,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              47,
              118,
              50,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              114,
              111,
              117,
              116,
              105,
              110,
              101,
              115,
              47,
              123,
              114,
              111,
              117,
              116,
              105,
              110,
              101,
              95,
              105,
              100,
              61,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all routines in the specified dataset. Requires the READER dataset
     * role.
     */
    listRoutines: {
      name: "ListRoutines",
      requestType: ListRoutinesRequest,
      requestStream: false,
      responseType: ListRoutinesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              71,
              18,
              69,
              47,
              98,
              105,
              103,
              113,
              117,
              101,
              114,
              121,
              47,
              118,
              50,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              105,
              100,
              61,
              42,
              125,
              47,
              114,
              111,
              117,
              116,
              105,
              110,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RoutineServiceImplementation<CallContextExt = {}> {
  /** Gets the specified routine resource by routine ID. */
  getRoutine(request: GetRoutineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Routine>>;
  /** Creates a new routine in the dataset. */
  insertRoutine(request: InsertRoutineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Routine>>;
  /**
   * Updates information in an existing routine. The update method replaces the
   * entire Routine resource.
   */
  updateRoutine(request: UpdateRoutineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Routine>>;
  /**
   * Patches information in an existing routine. The patch method does a partial
   * update to an existing Routine resource.
   */
  patchRoutine(request: PatchRoutineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Routine>>;
  /** Deletes the routine specified by routineId from the dataset. */
  deleteRoutine(request: DeleteRoutineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Lists all routines in the specified dataset. Requires the READER dataset
   * role.
   */
  listRoutines(
    request: ListRoutinesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRoutinesResponse>>;
}

export interface RoutineServiceClient<CallOptionsExt = {}> {
  /** Gets the specified routine resource by routine ID. */
  getRoutine(request: DeepPartial<GetRoutineRequest>, options?: CallOptions & CallOptionsExt): Promise<Routine>;
  /** Creates a new routine in the dataset. */
  insertRoutine(request: DeepPartial<InsertRoutineRequest>, options?: CallOptions & CallOptionsExt): Promise<Routine>;
  /**
   * Updates information in an existing routine. The update method replaces the
   * entire Routine resource.
   */
  updateRoutine(request: DeepPartial<UpdateRoutineRequest>, options?: CallOptions & CallOptionsExt): Promise<Routine>;
  /**
   * Patches information in an existing routine. The patch method does a partial
   * update to an existing Routine resource.
   */
  patchRoutine(request: DeepPartial<PatchRoutineRequest>, options?: CallOptions & CallOptionsExt): Promise<Routine>;
  /** Deletes the routine specified by routineId from the dataset. */
  deleteRoutine(request: DeepPartial<DeleteRoutineRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Lists all routines in the specified dataset. Requires the READER dataset
   * role.
   */
  listRoutines(
    request: DeepPartial<ListRoutinesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRoutinesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
