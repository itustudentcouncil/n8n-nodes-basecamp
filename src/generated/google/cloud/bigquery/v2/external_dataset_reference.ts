// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/external_dataset_reference.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.v2";

/** Configures the access a dataset defined in an external metadata storage. */
export interface ExternalDatasetReference {
  /** Required. External source that backs this dataset. */
  externalSource: string;
  /**
   * Required. The connection id that is used to access the external_source.
   *
   * Format:
   *   projects/{project_id}/locations/{location_id}/connections/{connection_id}
   */
  connection: string;
}

function createBaseExternalDatasetReference(): ExternalDatasetReference {
  return { externalSource: "", connection: "" };
}

export const ExternalDatasetReference: MessageFns<ExternalDatasetReference> = {
  encode(message: ExternalDatasetReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.externalSource !== "") {
      writer.uint32(18).string(message.externalSource);
    }
    if (message.connection !== "") {
      writer.uint32(26).string(message.connection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalDatasetReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalDatasetReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.externalSource = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.connection = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalDatasetReference {
    return {
      externalSource: isSet(object.externalSource) ? globalThis.String(object.externalSource) : "",
      connection: isSet(object.connection) ? globalThis.String(object.connection) : "",
    };
  },

  toJSON(message: ExternalDatasetReference): unknown {
    const obj: any = {};
    if (message.externalSource !== "") {
      obj.externalSource = message.externalSource;
    }
    if (message.connection !== "") {
      obj.connection = message.connection;
    }
    return obj;
  },

  create(base?: DeepPartial<ExternalDatasetReference>): ExternalDatasetReference {
    return ExternalDatasetReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExternalDatasetReference>): ExternalDatasetReference {
    const message = createBaseExternalDatasetReference();
    message.externalSource = object.externalSource ?? "";
    message.connection = object.connection ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
