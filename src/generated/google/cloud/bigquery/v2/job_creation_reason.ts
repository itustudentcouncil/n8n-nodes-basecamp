// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/v2/job_creation_reason.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.v2";

/**
 * Reason about why a Job was created from a
 * [`jobs.query`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query)
 * method when used with `JOB_CREATION_OPTIONAL` Job creation mode.
 *
 * For
 * [`jobs.insert`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/insert)
 * method calls it will always be `REQUESTED`.
 *
 * [Preview](https://cloud.google.com/products/#product-launch-stages)
 */
export interface JobCreationReason {
  /** Output only. Specifies the high level reason why a Job was created. */
  code: JobCreationReason_Code;
}

/** Indicates the high level reason why a job was created. */
export enum JobCreationReason_Code {
  /** CODE_UNSPECIFIED - Reason is not specified. */
  CODE_UNSPECIFIED = 0,
  /** REQUESTED - Job creation was requested. */
  REQUESTED = 1,
  /**
   * LONG_RUNNING - The query request ran beyond a system defined timeout specified by the
   * [timeoutMs field in the
   * QueryRequest](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#queryrequest).
   * As a result it was considered a long running operation for which a job
   * was created.
   */
  LONG_RUNNING = 2,
  /** LARGE_RESULTS - The results from the query cannot fit in the response. */
  LARGE_RESULTS = 3,
  /** OTHER - BigQuery has determined that the query needs to be executed as a Job. */
  OTHER = 4,
  UNRECOGNIZED = -1,
}

export function jobCreationReason_CodeFromJSON(object: any): JobCreationReason_Code {
  switch (object) {
    case 0:
    case "CODE_UNSPECIFIED":
      return JobCreationReason_Code.CODE_UNSPECIFIED;
    case 1:
    case "REQUESTED":
      return JobCreationReason_Code.REQUESTED;
    case 2:
    case "LONG_RUNNING":
      return JobCreationReason_Code.LONG_RUNNING;
    case 3:
    case "LARGE_RESULTS":
      return JobCreationReason_Code.LARGE_RESULTS;
    case 4:
    case "OTHER":
      return JobCreationReason_Code.OTHER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JobCreationReason_Code.UNRECOGNIZED;
  }
}

export function jobCreationReason_CodeToJSON(object: JobCreationReason_Code): string {
  switch (object) {
    case JobCreationReason_Code.CODE_UNSPECIFIED:
      return "CODE_UNSPECIFIED";
    case JobCreationReason_Code.REQUESTED:
      return "REQUESTED";
    case JobCreationReason_Code.LONG_RUNNING:
      return "LONG_RUNNING";
    case JobCreationReason_Code.LARGE_RESULTS:
      return "LARGE_RESULTS";
    case JobCreationReason_Code.OTHER:
      return "OTHER";
    case JobCreationReason_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseJobCreationReason(): JobCreationReason {
  return { code: 0 };
}

export const JobCreationReason: MessageFns<JobCreationReason> = {
  encode(message: JobCreationReason, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobCreationReason {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobCreationReason();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobCreationReason {
    return { code: isSet(object.code) ? jobCreationReason_CodeFromJSON(object.code) : 0 };
  },

  toJSON(message: JobCreationReason): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = jobCreationReason_CodeToJSON(message.code);
    }
    return obj;
  },

  create(base?: DeepPartial<JobCreationReason>): JobCreationReason {
    return JobCreationReason.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JobCreationReason>): JobCreationReason {
    const message = createBaseJobCreationReason();
    message.code = object.code ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
