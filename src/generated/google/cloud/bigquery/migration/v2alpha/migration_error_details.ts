// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/migration/v2alpha/migration_error_details.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ErrorInfo, ResourceInfo } from "../../../../rpc/error_details.js";

export const protobufPackage = "google.cloud.bigquery.migration.v2alpha";

/** Provides details for errors and the corresponding resources. */
export interface ResourceErrorDetail {
  /** Required. Information about the resource where the error is located. */
  resourceInfo:
    | ResourceInfo
    | undefined;
  /** Required. The error details for the resource. */
  errorDetails: ErrorDetail[];
  /**
   * Required. How many errors there are in total for the resource. Truncation can be
   * indicated by having an `error_count` that is higher than the size of
   * `error_details`.
   */
  errorCount: number;
}

/**
 * Provides details for errors, e.g. issues that where encountered when
 * processing a subtask.
 */
export interface ErrorDetail {
  /** Optional. The exact location within the resource (if applicable). */
  location:
    | ErrorLocation
    | undefined;
  /** Required. Describes the cause of the error with structured detail. */
  errorInfo: ErrorInfo | undefined;
}

/** Holds information about where the error is located. */
export interface ErrorLocation {
  /**
   * Optional. If applicable, denotes the line where the error occurred. A zero value
   * means that there is no line information.
   */
  line: number;
  /**
   * Optional. If applicable, denotes the column where the error occurred. A zero value
   * means that there is no columns information.
   */
  column: number;
}

function createBaseResourceErrorDetail(): ResourceErrorDetail {
  return { resourceInfo: undefined, errorDetails: [], errorCount: 0 };
}

export const ResourceErrorDetail: MessageFns<ResourceErrorDetail> = {
  encode(message: ResourceErrorDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceInfo !== undefined) {
      ResourceInfo.encode(message.resourceInfo, writer.uint32(10).fork()).join();
    }
    for (const v of message.errorDetails) {
      ErrorDetail.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.errorCount !== 0) {
      writer.uint32(24).int32(message.errorCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceErrorDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceErrorDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceInfo = ResourceInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorDetails.push(ErrorDetail.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.errorCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceErrorDetail {
    return {
      resourceInfo: isSet(object.resourceInfo) ? ResourceInfo.fromJSON(object.resourceInfo) : undefined,
      errorDetails: globalThis.Array.isArray(object?.errorDetails)
        ? object.errorDetails.map((e: any) => ErrorDetail.fromJSON(e))
        : [],
      errorCount: isSet(object.errorCount) ? globalThis.Number(object.errorCount) : 0,
    };
  },

  toJSON(message: ResourceErrorDetail): unknown {
    const obj: any = {};
    if (message.resourceInfo !== undefined) {
      obj.resourceInfo = ResourceInfo.toJSON(message.resourceInfo);
    }
    if (message.errorDetails?.length) {
      obj.errorDetails = message.errorDetails.map((e) => ErrorDetail.toJSON(e));
    }
    if (message.errorCount !== 0) {
      obj.errorCount = Math.round(message.errorCount);
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceErrorDetail>): ResourceErrorDetail {
    return ResourceErrorDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceErrorDetail>): ResourceErrorDetail {
    const message = createBaseResourceErrorDetail();
    message.resourceInfo = (object.resourceInfo !== undefined && object.resourceInfo !== null)
      ? ResourceInfo.fromPartial(object.resourceInfo)
      : undefined;
    message.errorDetails = object.errorDetails?.map((e) => ErrorDetail.fromPartial(e)) || [];
    message.errorCount = object.errorCount ?? 0;
    return message;
  },
};

function createBaseErrorDetail(): ErrorDetail {
  return { location: undefined, errorInfo: undefined };
}

export const ErrorDetail: MessageFns<ErrorDetail> = {
  encode(message: ErrorDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== undefined) {
      ErrorLocation.encode(message.location, writer.uint32(10).fork()).join();
    }
    if (message.errorInfo !== undefined) {
      ErrorInfo.encode(message.errorInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = ErrorLocation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorInfo = ErrorInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorDetail {
    return {
      location: isSet(object.location) ? ErrorLocation.fromJSON(object.location) : undefined,
      errorInfo: isSet(object.errorInfo) ? ErrorInfo.fromJSON(object.errorInfo) : undefined,
    };
  },

  toJSON(message: ErrorDetail): unknown {
    const obj: any = {};
    if (message.location !== undefined) {
      obj.location = ErrorLocation.toJSON(message.location);
    }
    if (message.errorInfo !== undefined) {
      obj.errorInfo = ErrorInfo.toJSON(message.errorInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<ErrorDetail>): ErrorDetail {
    return ErrorDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorDetail>): ErrorDetail {
    const message = createBaseErrorDetail();
    message.location = (object.location !== undefined && object.location !== null)
      ? ErrorLocation.fromPartial(object.location)
      : undefined;
    message.errorInfo = (object.errorInfo !== undefined && object.errorInfo !== null)
      ? ErrorInfo.fromPartial(object.errorInfo)
      : undefined;
    return message;
  },
};

function createBaseErrorLocation(): ErrorLocation {
  return { line: 0, column: 0 };
}

export const ErrorLocation: MessageFns<ErrorLocation> = {
  encode(message: ErrorLocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.line !== 0) {
      writer.uint32(8).int32(message.line);
    }
    if (message.column !== 0) {
      writer.uint32(16).int32(message.column);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorLocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.line = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.column = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorLocation {
    return {
      line: isSet(object.line) ? globalThis.Number(object.line) : 0,
      column: isSet(object.column) ? globalThis.Number(object.column) : 0,
    };
  },

  toJSON(message: ErrorLocation): unknown {
    const obj: any = {};
    if (message.line !== 0) {
      obj.line = Math.round(message.line);
    }
    if (message.column !== 0) {
      obj.column = Math.round(message.column);
    }
    return obj;
  },

  create(base?: DeepPartial<ErrorLocation>): ErrorLocation {
    return ErrorLocation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ErrorLocation>): ErrorLocation {
    const message = createBaseErrorLocation();
    message.line = object.line ?? 0;
    message.column = object.column ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
