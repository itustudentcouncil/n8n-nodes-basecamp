// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/migration/v2alpha/assessment_task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.migration.v2alpha";

/** Assessment task config. */
export interface AssessmentTaskDetails {
  /** Required. The Cloud Storage path for assessment input files. */
  inputPath: string;
  /** Required. The BigQuery dataset for output. */
  outputDataset: string;
  /**
   * Optional. An optional Cloud Storage path to write the query logs (which is
   * then used as an input path on the translation task)
   */
  querylogsPath: string;
  /**
   * Required. The data source or data warehouse type (eg: TERADATA/REDSHIFT)
   * from which the input data is extracted.
   */
  dataSource: string;
}

/** Details for an assessment task orchestration result. */
export interface AssessmentOrchestrationResultDetails {
  /** Optional. The version used for the output table schemas. */
  outputTablesSchemaVersion: string;
}

function createBaseAssessmentTaskDetails(): AssessmentTaskDetails {
  return { inputPath: "", outputDataset: "", querylogsPath: "", dataSource: "" };
}

export const AssessmentTaskDetails: MessageFns<AssessmentTaskDetails> = {
  encode(message: AssessmentTaskDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputPath !== "") {
      writer.uint32(10).string(message.inputPath);
    }
    if (message.outputDataset !== "") {
      writer.uint32(18).string(message.outputDataset);
    }
    if (message.querylogsPath !== "") {
      writer.uint32(26).string(message.querylogsPath);
    }
    if (message.dataSource !== "") {
      writer.uint32(34).string(message.dataSource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssessmentTaskDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssessmentTaskDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputPath = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.outputDataset = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.querylogsPath = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataSource = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssessmentTaskDetails {
    return {
      inputPath: isSet(object.inputPath) ? globalThis.String(object.inputPath) : "",
      outputDataset: isSet(object.outputDataset) ? globalThis.String(object.outputDataset) : "",
      querylogsPath: isSet(object.querylogsPath) ? globalThis.String(object.querylogsPath) : "",
      dataSource: isSet(object.dataSource) ? globalThis.String(object.dataSource) : "",
    };
  },

  toJSON(message: AssessmentTaskDetails): unknown {
    const obj: any = {};
    if (message.inputPath !== "") {
      obj.inputPath = message.inputPath;
    }
    if (message.outputDataset !== "") {
      obj.outputDataset = message.outputDataset;
    }
    if (message.querylogsPath !== "") {
      obj.querylogsPath = message.querylogsPath;
    }
    if (message.dataSource !== "") {
      obj.dataSource = message.dataSource;
    }
    return obj;
  },

  create(base?: DeepPartial<AssessmentTaskDetails>): AssessmentTaskDetails {
    return AssessmentTaskDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssessmentTaskDetails>): AssessmentTaskDetails {
    const message = createBaseAssessmentTaskDetails();
    message.inputPath = object.inputPath ?? "";
    message.outputDataset = object.outputDataset ?? "";
    message.querylogsPath = object.querylogsPath ?? "";
    message.dataSource = object.dataSource ?? "";
    return message;
  },
};

function createBaseAssessmentOrchestrationResultDetails(): AssessmentOrchestrationResultDetails {
  return { outputTablesSchemaVersion: "" };
}

export const AssessmentOrchestrationResultDetails: MessageFns<AssessmentOrchestrationResultDetails> = {
  encode(message: AssessmentOrchestrationResultDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.outputTablesSchemaVersion !== "") {
      writer.uint32(10).string(message.outputTablesSchemaVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssessmentOrchestrationResultDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssessmentOrchestrationResultDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.outputTablesSchemaVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssessmentOrchestrationResultDetails {
    return {
      outputTablesSchemaVersion: isSet(object.outputTablesSchemaVersion)
        ? globalThis.String(object.outputTablesSchemaVersion)
        : "",
    };
  },

  toJSON(message: AssessmentOrchestrationResultDetails): unknown {
    const obj: any = {};
    if (message.outputTablesSchemaVersion !== "") {
      obj.outputTablesSchemaVersion = message.outputTablesSchemaVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<AssessmentOrchestrationResultDetails>): AssessmentOrchestrationResultDetails {
    return AssessmentOrchestrationResultDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssessmentOrchestrationResultDetails>): AssessmentOrchestrationResultDetails {
    const message = createBaseAssessmentOrchestrationResultDetails();
    message.outputTablesSchemaVersion = object.outputTablesSchemaVersion ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
