// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/migration/v2/translation_usability.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.bigquery.migration.v2";

/** A record in the aggregate CSV report for a migration workflow */
export interface GcsReportLogMessage {
  /** Severity of the translation record. */
  severity: string;
  /** Category of the error/warning. Example: SyntaxError */
  category: string;
  /** The file path in which the error occurred */
  filePath: string;
  /** The file name in which the error occurred */
  filename: string;
  /**
   * Specifies the row from the source text where the error occurred (0 based,
   * -1 for messages without line location). Example: 2
   */
  sourceScriptLine: number;
  /**
   * Specifies the column from the source texts where the error occurred. (0
   * based, -1 for messages without column location) example: 6
   */
  sourceScriptColumn: number;
  /** Detailed message of the record. */
  message: string;
  /** The script context (obfuscated) in which the error occurred */
  scriptContext: string;
  /** Category of the error/warning. Example: SyntaxError */
  action: string;
  /** Effect of the error/warning. Example: COMPATIBILITY */
  effect: string;
  /** Name of the affected object in the log message. */
  objectName: string;
}

function createBaseGcsReportLogMessage(): GcsReportLogMessage {
  return {
    severity: "",
    category: "",
    filePath: "",
    filename: "",
    sourceScriptLine: 0,
    sourceScriptColumn: 0,
    message: "",
    scriptContext: "",
    action: "",
    effect: "",
    objectName: "",
  };
}

export const GcsReportLogMessage: MessageFns<GcsReportLogMessage> = {
  encode(message: GcsReportLogMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.severity !== "") {
      writer.uint32(10).string(message.severity);
    }
    if (message.category !== "") {
      writer.uint32(18).string(message.category);
    }
    if (message.filePath !== "") {
      writer.uint32(26).string(message.filePath);
    }
    if (message.filename !== "") {
      writer.uint32(34).string(message.filename);
    }
    if (message.sourceScriptLine !== 0) {
      writer.uint32(40).int32(message.sourceScriptLine);
    }
    if (message.sourceScriptColumn !== 0) {
      writer.uint32(48).int32(message.sourceScriptColumn);
    }
    if (message.message !== "") {
      writer.uint32(58).string(message.message);
    }
    if (message.scriptContext !== "") {
      writer.uint32(66).string(message.scriptContext);
    }
    if (message.action !== "") {
      writer.uint32(74).string(message.action);
    }
    if (message.effect !== "") {
      writer.uint32(82).string(message.effect);
    }
    if (message.objectName !== "") {
      writer.uint32(90).string(message.objectName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcsReportLogMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcsReportLogMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.severity = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filePath = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filename = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.sourceScriptLine = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.sourceScriptColumn = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.message = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scriptContext = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.action = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.effect = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.objectName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcsReportLogMessage {
    return {
      severity: isSet(object.severity) ? globalThis.String(object.severity) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : "",
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      sourceScriptLine: isSet(object.sourceScriptLine) ? globalThis.Number(object.sourceScriptLine) : 0,
      sourceScriptColumn: isSet(object.sourceScriptColumn) ? globalThis.Number(object.sourceScriptColumn) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      scriptContext: isSet(object.scriptContext) ? globalThis.String(object.scriptContext) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      effect: isSet(object.effect) ? globalThis.String(object.effect) : "",
      objectName: isSet(object.objectName) ? globalThis.String(object.objectName) : "",
    };
  },

  toJSON(message: GcsReportLogMessage): unknown {
    const obj: any = {};
    if (message.severity !== "") {
      obj.severity = message.severity;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.filePath !== "") {
      obj.filePath = message.filePath;
    }
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.sourceScriptLine !== 0) {
      obj.sourceScriptLine = Math.round(message.sourceScriptLine);
    }
    if (message.sourceScriptColumn !== 0) {
      obj.sourceScriptColumn = Math.round(message.sourceScriptColumn);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.scriptContext !== "") {
      obj.scriptContext = message.scriptContext;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.effect !== "") {
      obj.effect = message.effect;
    }
    if (message.objectName !== "") {
      obj.objectName = message.objectName;
    }
    return obj;
  },

  create(base?: DeepPartial<GcsReportLogMessage>): GcsReportLogMessage {
    return GcsReportLogMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcsReportLogMessage>): GcsReportLogMessage {
    const message = createBaseGcsReportLogMessage();
    message.severity = object.severity ?? "";
    message.category = object.category ?? "";
    message.filePath = object.filePath ?? "";
    message.filename = object.filename ?? "";
    message.sourceScriptLine = object.sourceScriptLine ?? 0;
    message.sourceScriptColumn = object.sourceScriptColumn ?? 0;
    message.message = object.message ?? "";
    message.scriptContext = object.scriptContext ?? "";
    message.action = object.action ?? "";
    message.effect = object.effect ?? "";
    message.objectName = object.objectName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
