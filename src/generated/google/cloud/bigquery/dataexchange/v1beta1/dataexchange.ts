// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/bigquery/dataexchange/v1beta1/dataexchange.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../../iam/v1/iam_policy.js";
import { Policy } from "../../../../iam/v1/policy.js";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { StringValue } from "../../../../protobuf/wrappers.js";

export const protobufPackage = "google.cloud.bigquery.dataexchange.v1beta1";

/**
 * A data exchange is a container that lets you share data. Along with the
 * descriptive information about the data exchange, it contains listings that
 * reference shared datasets.
 */
export interface DataExchange {
  /**
   * Output only. The resource name of the data exchange.
   * e.g. `projects/myproject/locations/US/dataExchanges/123`.
   */
  name: string;
  /**
   * Required. Human-readable display name of the data exchange. The display name must
   * contain only Unicode letters, numbers (0-9), underscores (_), dashes (-),
   * spaces ( ), ampersands (&) and must not start or end with spaces.
   * Default value is an empty string.
   * Max length: 63 bytes.
   */
  displayName: string;
  /**
   * Optional. Description of the data exchange. The description must not contain Unicode
   * non-characters as well as C0 and C1 control codes except tabs (HT),
   * new lines (LF), carriage returns (CR), and page breaks (FF).
   * Default value is an empty string.
   * Max length: 2000 bytes.
   */
  description: string;
  /**
   * Optional. Email or URL of the primary point of contact of the data exchange.
   * Max Length: 1000 bytes.
   */
  primaryContact: string;
  /** Optional. Documentation describing the data exchange. */
  documentation: string;
  /** Output only. Number of listings contained in the data exchange. */
  listingCount: number;
  /**
   * Optional. Base64 encoded image representing the data exchange. Max Size: 3.0MiB
   * Expected image dimensions are 512x512 pixels, however the API only
   * performs validation on size of the encoded data.
   * Note: For byte fields, the content of the fields are base64-encoded (which
   * increases the size of the data by 33-36%) when using JSON on the wire.
   */
  icon: Buffer;
}

/** Contains details of the data provider. */
export interface DataProvider {
  /** Optional. Name of the data provider. */
  name: string;
  /**
   * Optional. Email or URL of the data provider.
   * Max Length: 1000 bytes.
   */
  primaryContact: string;
}

/** Contains details of the listing publisher. */
export interface Publisher {
  /** Optional. Name of the listing publisher. */
  name: string;
  /**
   * Optional. Email or URL of the listing publisher.
   * Max Length: 1000 bytes.
   */
  primaryContact: string;
}

/** Contains the reference that identifies a destination bigquery dataset. */
export interface DestinationDatasetReference {
  /**
   * Required. A unique ID for this dataset, without the project name. The ID
   * must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_).
   * The maximum length is 1,024 characters.
   */
  datasetId: string;
  /** Required. The ID of the project containing this dataset. */
  projectId: string;
}

/** Defines the destination bigquery dataset. */
export interface DestinationDataset {
  /** Required. A reference that identifies the destination dataset. */
  datasetReference:
    | DestinationDatasetReference
    | undefined;
  /** Optional. A descriptive name for the dataset. */
  friendlyName:
    | string
    | undefined;
  /** Optional. A user-friendly description of the dataset. */
  description:
    | string
    | undefined;
  /**
   * Optional. The labels associated with this dataset. You can use these
   * to organize and group your datasets.
   * You can set this property when inserting or updating a dataset.
   * See https://cloud.google.com/resource-manager/docs/creating-managing-labels
   * for more information.
   */
  labels: { [key: string]: string };
  /**
   * Required. The geographic location where the dataset should reside. See
   * https://cloud.google.com/bigquery/docs/locations for supported
   * locations.
   */
  location: string;
}

export interface DestinationDataset_LabelsEntry {
  key: string;
  value: string;
}

/**
 * A listing is what gets published into a data exchange that a subscriber can
 * subscribe to. It contains a reference to the data source along with
 * descriptive information that will help subscribers find and subscribe the
 * data.
 */
export interface Listing {
  /** Required. Shared dataset i.e. BigQuery dataset source. */
  bigqueryDataset?:
    | Listing_BigQueryDatasetSource
    | undefined;
  /**
   * Output only. The resource name of the listing.
   * e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`
   */
  name: string;
  /**
   * Required. Human-readable display name of the listing. The display name must contain
   * only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces
   * ( ), ampersands (&) and can't start or end with spaces.
   * Default value is an empty string.
   * Max length: 63 bytes.
   */
  displayName: string;
  /**
   * Optional. Short description of the listing. The description must not contain
   * Unicode non-characters and C0 and C1 control codes except tabs (HT),
   * new lines (LF), carriage returns (CR), and page breaks (FF).
   * Default value is an empty string.
   * Max length: 2000 bytes.
   */
  description: string;
  /**
   * Optional. Email or URL of the primary point of contact of the listing.
   * Max Length: 1000 bytes.
   */
  primaryContact: string;
  /** Optional. Documentation describing the listing. */
  documentation: string;
  /** Output only. Current state of the listing. */
  state: Listing_State;
  /**
   * Optional. Base64 encoded image representing the listing. Max Size: 3.0MiB
   * Expected image dimensions are 512x512 pixels, however the API only
   * performs validation on size of the encoded data.
   * Note: For byte fields, the contents of the field are base64-encoded (which
   * increases the size of the data by 33-36%) when using JSON on the wire.
   */
  icon: Buffer;
  /** Optional. Details of the data provider who owns the source data. */
  dataProvider:
    | DataProvider
    | undefined;
  /** Optional. Categories of the listing. Up to two categories are allowed. */
  categories: Listing_Category[];
  /**
   * Optional. Details of the publisher who owns the listing and who can share
   * the source data.
   */
  publisher:
    | Publisher
    | undefined;
  /**
   * Optional. Email or URL of the request access of the listing.
   * Subscribers can use this reference to request access.
   * Max Length: 1000 bytes.
   */
  requestAccess: string;
}

/** State of the listing. */
export enum Listing_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /**
   * ACTIVE - Subscribable state. Users with dataexchange.listings.subscribe permission
   * can subscribe to this listing.
   */
  ACTIVE = 1,
  UNRECOGNIZED = -1,
}

export function listing_StateFromJSON(object: any): Listing_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Listing_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return Listing_State.ACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Listing_State.UNRECOGNIZED;
  }
}

export function listing_StateToJSON(object: Listing_State): string {
  switch (object) {
    case Listing_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Listing_State.ACTIVE:
      return "ACTIVE";
    case Listing_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Listing categories. */
export enum Listing_Category {
  CATEGORY_UNSPECIFIED = 0,
  CATEGORY_OTHERS = 1,
  CATEGORY_ADVERTISING_AND_MARKETING = 2,
  CATEGORY_COMMERCE = 3,
  CATEGORY_CLIMATE_AND_ENVIRONMENT = 4,
  CATEGORY_DEMOGRAPHICS = 5,
  CATEGORY_ECONOMICS = 6,
  CATEGORY_EDUCATION = 7,
  CATEGORY_ENERGY = 8,
  CATEGORY_FINANCIAL = 9,
  CATEGORY_GAMING = 10,
  CATEGORY_GEOSPATIAL = 11,
  CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE = 12,
  CATEGORY_MEDIA = 13,
  CATEGORY_PUBLIC_SECTOR = 14,
  CATEGORY_RETAIL = 15,
  CATEGORY_SPORTS = 16,
  CATEGORY_SCIENCE_AND_RESEARCH = 17,
  CATEGORY_TRANSPORTATION_AND_LOGISTICS = 18,
  CATEGORY_TRAVEL_AND_TOURISM = 19,
  UNRECOGNIZED = -1,
}

export function listing_CategoryFromJSON(object: any): Listing_Category {
  switch (object) {
    case 0:
    case "CATEGORY_UNSPECIFIED":
      return Listing_Category.CATEGORY_UNSPECIFIED;
    case 1:
    case "CATEGORY_OTHERS":
      return Listing_Category.CATEGORY_OTHERS;
    case 2:
    case "CATEGORY_ADVERTISING_AND_MARKETING":
      return Listing_Category.CATEGORY_ADVERTISING_AND_MARKETING;
    case 3:
    case "CATEGORY_COMMERCE":
      return Listing_Category.CATEGORY_COMMERCE;
    case 4:
    case "CATEGORY_CLIMATE_AND_ENVIRONMENT":
      return Listing_Category.CATEGORY_CLIMATE_AND_ENVIRONMENT;
    case 5:
    case "CATEGORY_DEMOGRAPHICS":
      return Listing_Category.CATEGORY_DEMOGRAPHICS;
    case 6:
    case "CATEGORY_ECONOMICS":
      return Listing_Category.CATEGORY_ECONOMICS;
    case 7:
    case "CATEGORY_EDUCATION":
      return Listing_Category.CATEGORY_EDUCATION;
    case 8:
    case "CATEGORY_ENERGY":
      return Listing_Category.CATEGORY_ENERGY;
    case 9:
    case "CATEGORY_FINANCIAL":
      return Listing_Category.CATEGORY_FINANCIAL;
    case 10:
    case "CATEGORY_GAMING":
      return Listing_Category.CATEGORY_GAMING;
    case 11:
    case "CATEGORY_GEOSPATIAL":
      return Listing_Category.CATEGORY_GEOSPATIAL;
    case 12:
    case "CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE":
      return Listing_Category.CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE;
    case 13:
    case "CATEGORY_MEDIA":
      return Listing_Category.CATEGORY_MEDIA;
    case 14:
    case "CATEGORY_PUBLIC_SECTOR":
      return Listing_Category.CATEGORY_PUBLIC_SECTOR;
    case 15:
    case "CATEGORY_RETAIL":
      return Listing_Category.CATEGORY_RETAIL;
    case 16:
    case "CATEGORY_SPORTS":
      return Listing_Category.CATEGORY_SPORTS;
    case 17:
    case "CATEGORY_SCIENCE_AND_RESEARCH":
      return Listing_Category.CATEGORY_SCIENCE_AND_RESEARCH;
    case 18:
    case "CATEGORY_TRANSPORTATION_AND_LOGISTICS":
      return Listing_Category.CATEGORY_TRANSPORTATION_AND_LOGISTICS;
    case 19:
    case "CATEGORY_TRAVEL_AND_TOURISM":
      return Listing_Category.CATEGORY_TRAVEL_AND_TOURISM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Listing_Category.UNRECOGNIZED;
  }
}

export function listing_CategoryToJSON(object: Listing_Category): string {
  switch (object) {
    case Listing_Category.CATEGORY_UNSPECIFIED:
      return "CATEGORY_UNSPECIFIED";
    case Listing_Category.CATEGORY_OTHERS:
      return "CATEGORY_OTHERS";
    case Listing_Category.CATEGORY_ADVERTISING_AND_MARKETING:
      return "CATEGORY_ADVERTISING_AND_MARKETING";
    case Listing_Category.CATEGORY_COMMERCE:
      return "CATEGORY_COMMERCE";
    case Listing_Category.CATEGORY_CLIMATE_AND_ENVIRONMENT:
      return "CATEGORY_CLIMATE_AND_ENVIRONMENT";
    case Listing_Category.CATEGORY_DEMOGRAPHICS:
      return "CATEGORY_DEMOGRAPHICS";
    case Listing_Category.CATEGORY_ECONOMICS:
      return "CATEGORY_ECONOMICS";
    case Listing_Category.CATEGORY_EDUCATION:
      return "CATEGORY_EDUCATION";
    case Listing_Category.CATEGORY_ENERGY:
      return "CATEGORY_ENERGY";
    case Listing_Category.CATEGORY_FINANCIAL:
      return "CATEGORY_FINANCIAL";
    case Listing_Category.CATEGORY_GAMING:
      return "CATEGORY_GAMING";
    case Listing_Category.CATEGORY_GEOSPATIAL:
      return "CATEGORY_GEOSPATIAL";
    case Listing_Category.CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE:
      return "CATEGORY_HEALTHCARE_AND_LIFE_SCIENCE";
    case Listing_Category.CATEGORY_MEDIA:
      return "CATEGORY_MEDIA";
    case Listing_Category.CATEGORY_PUBLIC_SECTOR:
      return "CATEGORY_PUBLIC_SECTOR";
    case Listing_Category.CATEGORY_RETAIL:
      return "CATEGORY_RETAIL";
    case Listing_Category.CATEGORY_SPORTS:
      return "CATEGORY_SPORTS";
    case Listing_Category.CATEGORY_SCIENCE_AND_RESEARCH:
      return "CATEGORY_SCIENCE_AND_RESEARCH";
    case Listing_Category.CATEGORY_TRANSPORTATION_AND_LOGISTICS:
      return "CATEGORY_TRANSPORTATION_AND_LOGISTICS";
    case Listing_Category.CATEGORY_TRAVEL_AND_TOURISM:
      return "CATEGORY_TRAVEL_AND_TOURISM";
    case Listing_Category.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A reference to a shared dataset. It is an existing BigQuery dataset with a
 * collection of objects such as tables and views that you want to share
 * with subscribers.
 * When subscriber's subscribe to a listing, Analytics Hub creates a linked
 * dataset in
 * the subscriber's project. A Linked dataset is an opaque, read-only BigQuery
 * dataset that serves as a _symbolic link_ to a shared dataset.
 */
export interface Listing_BigQueryDatasetSource {
  /**
   * Resource name of the dataset source for this listing.
   * e.g. `projects/myproject/datasets/123`
   */
  dataset: string;
}

/** Message for requesting the list of data exchanges. */
export interface ListDataExchangesRequest {
  /**
   * Required. The parent resource path of the data exchanges.
   * e.g. `projects/myproject/locations/US`.
   */
  parent: string;
  /**
   * The maximum number of results to return in a single response page. Leverage
   * the page tokens to iterate through the entire collection.
   */
  pageSize: number;
  /**
   * Page token, returned by a previous call, to request the next page of
   * results.
   */
  pageToken: string;
}

/** Message for response to the list of data exchanges. */
export interface ListDataExchangesResponse {
  /** The list of data exchanges. */
  dataExchanges: DataExchange[];
  /** A token to request the next page of results. */
  nextPageToken: string;
}

/**
 * Message for requesting the list of data exchanges from projects in an
 * organization and location.
 */
export interface ListOrgDataExchangesRequest {
  /**
   * Required. The organization resource path of the projects containing DataExchanges.
   * e.g. `organizations/myorg/locations/US`.
   */
  organization: string;
  /**
   * The maximum number of results to return in a single response page. Leverage
   * the page tokens to iterate through the entire collection.
   */
  pageSize: number;
  /**
   * Page token, returned by a previous call, to request the next page of
   * results.
   */
  pageToken: string;
}

/**
 * Message for response to listing data exchanges in an organization and
 * location.
 */
export interface ListOrgDataExchangesResponse {
  /** The list of data exchanges. */
  dataExchanges: DataExchange[];
  /** A token to request the next page of results. */
  nextPageToken: string;
}

/** Message for getting a data exchange. */
export interface GetDataExchangeRequest {
  /**
   * Required. The resource name of the data exchange.
   * e.g. `projects/myproject/locations/US/dataExchanges/123`.
   */
  name: string;
}

/** Message for creating a data exchange. */
export interface CreateDataExchangeRequest {
  /**
   * Required. The parent resource path of the data exchange.
   * e.g. `projects/myproject/locations/US`.
   */
  parent: string;
  /**
   * Required. The ID of the data exchange.
   * Must contain only Unicode letters, numbers (0-9), underscores (_).
   * Should not use characters that require URL-escaping, or characters
   * outside of ASCII, spaces.
   * Max length: 100 bytes.
   */
  dataExchangeId: string;
  /** Required. The data exchange to create. */
  dataExchange: DataExchange | undefined;
}

/** Message for updating a data exchange. */
export interface UpdateDataExchangeRequest {
  /**
   * Required. Field mask specifies the fields to update in the data exchange
   * resource. The fields specified in the
   * `updateMask` are relative to the resource and are not a full request.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The data exchange to update. */
  dataExchange: DataExchange | undefined;
}

/** Message for deleting a data exchange. */
export interface DeleteDataExchangeRequest {
  /**
   * Required. The full name of the data exchange resource that you want to delete.
   * For example, `projects/myproject/locations/US/dataExchanges/123`.
   */
  name: string;
}

/** Message for requesting the list of listings. */
export interface ListListingsRequest {
  /**
   * Required. The parent resource path of the listing.
   * e.g. `projects/myproject/locations/US/dataExchanges/123`.
   */
  parent: string;
  /**
   * The maximum number of results to return in a single response page. Leverage
   * the page tokens to iterate through the entire collection.
   */
  pageSize: number;
  /**
   * Page token, returned by a previous call, to request the next page of
   * results.
   */
  pageToken: string;
}

/** Message for response to the list of Listings. */
export interface ListListingsResponse {
  /** The list of Listing. */
  listings: Listing[];
  /** A token to request the next page of results. */
  nextPageToken: string;
}

/** Message for getting a listing. */
export interface GetListingRequest {
  /**
   * Required. The resource name of the listing.
   * e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`.
   */
  name: string;
}

/** Message for creating a listing. */
export interface CreateListingRequest {
  /**
   * Required. The parent resource path of the listing.
   * e.g. `projects/myproject/locations/US/dataExchanges/123`.
   */
  parent: string;
  /**
   * Required. The ID of the listing to create.
   * Must contain only Unicode letters, numbers (0-9), underscores (_).
   * Should not use characters that require URL-escaping, or characters
   * outside of ASCII, spaces.
   * Max length: 100 bytes.
   */
  listingId: string;
  /** Required. The listing to create. */
  listing: Listing | undefined;
}

/** Message for updating a Listing. */
export interface UpdateListingRequest {
  /**
   * Required. Field mask specifies the fields to update in the listing resource. The
   * fields specified in the `updateMask` are relative to the resource and are
   * not a full request.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The listing to update. */
  listing: Listing | undefined;
}

/** Message for deleting a listing. */
export interface DeleteListingRequest {
  /**
   * Required. Resource name of the listing to delete.
   * e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`.
   */
  name: string;
}

/** Message for subscribing to a listing. */
export interface SubscribeListingRequest {
  /** BigQuery destination dataset to create for the subscriber. */
  destinationDataset?:
    | DestinationDataset
    | undefined;
  /**
   * Required. Resource name of the listing that you want to subscribe to.
   * e.g. `projects/myproject/locations/US/dataExchanges/123/listings/456`.
   */
  name: string;
}

/** Message for response when you subscribe to a listing. */
export interface SubscribeListingResponse {
}

function createBaseDataExchange(): DataExchange {
  return {
    name: "",
    displayName: "",
    description: "",
    primaryContact: "",
    documentation: "",
    listingCount: 0,
    icon: Buffer.alloc(0),
  };
}

export const DataExchange: MessageFns<DataExchange> = {
  encode(message: DataExchange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.primaryContact !== "") {
      writer.uint32(34).string(message.primaryContact);
    }
    if (message.documentation !== "") {
      writer.uint32(42).string(message.documentation);
    }
    if (message.listingCount !== 0) {
      writer.uint32(48).int32(message.listingCount);
    }
    if (message.icon.length !== 0) {
      writer.uint32(58).bytes(message.icon);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataExchange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataExchange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.primaryContact = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.documentation = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.listingCount = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.icon = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataExchange {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      primaryContact: isSet(object.primaryContact) ? globalThis.String(object.primaryContact) : "",
      documentation: isSet(object.documentation) ? globalThis.String(object.documentation) : "",
      listingCount: isSet(object.listingCount) ? globalThis.Number(object.listingCount) : 0,
      icon: isSet(object.icon) ? Buffer.from(bytesFromBase64(object.icon)) : Buffer.alloc(0),
    };
  },

  toJSON(message: DataExchange): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.primaryContact !== "") {
      obj.primaryContact = message.primaryContact;
    }
    if (message.documentation !== "") {
      obj.documentation = message.documentation;
    }
    if (message.listingCount !== 0) {
      obj.listingCount = Math.round(message.listingCount);
    }
    if (message.icon.length !== 0) {
      obj.icon = base64FromBytes(message.icon);
    }
    return obj;
  },

  create(base?: DeepPartial<DataExchange>): DataExchange {
    return DataExchange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataExchange>): DataExchange {
    const message = createBaseDataExchange();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.primaryContact = object.primaryContact ?? "";
    message.documentation = object.documentation ?? "";
    message.listingCount = object.listingCount ?? 0;
    message.icon = object.icon ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseDataProvider(): DataProvider {
  return { name: "", primaryContact: "" };
}

export const DataProvider: MessageFns<DataProvider> = {
  encode(message: DataProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.primaryContact !== "") {
      writer.uint32(18).string(message.primaryContact);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.primaryContact = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataProvider {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      primaryContact: isSet(object.primaryContact) ? globalThis.String(object.primaryContact) : "",
    };
  },

  toJSON(message: DataProvider): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.primaryContact !== "") {
      obj.primaryContact = message.primaryContact;
    }
    return obj;
  },

  create(base?: DeepPartial<DataProvider>): DataProvider {
    return DataProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataProvider>): DataProvider {
    const message = createBaseDataProvider();
    message.name = object.name ?? "";
    message.primaryContact = object.primaryContact ?? "";
    return message;
  },
};

function createBasePublisher(): Publisher {
  return { name: "", primaryContact: "" };
}

export const Publisher: MessageFns<Publisher> = {
  encode(message: Publisher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.primaryContact !== "") {
      writer.uint32(18).string(message.primaryContact);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Publisher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublisher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.primaryContact = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Publisher {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      primaryContact: isSet(object.primaryContact) ? globalThis.String(object.primaryContact) : "",
    };
  },

  toJSON(message: Publisher): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.primaryContact !== "") {
      obj.primaryContact = message.primaryContact;
    }
    return obj;
  },

  create(base?: DeepPartial<Publisher>): Publisher {
    return Publisher.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Publisher>): Publisher {
    const message = createBasePublisher();
    message.name = object.name ?? "";
    message.primaryContact = object.primaryContact ?? "";
    return message;
  },
};

function createBaseDestinationDatasetReference(): DestinationDatasetReference {
  return { datasetId: "", projectId: "" };
}

export const DestinationDatasetReference: MessageFns<DestinationDatasetReference> = {
  encode(message: DestinationDatasetReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.datasetId !== "") {
      writer.uint32(10).string(message.datasetId);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DestinationDatasetReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationDatasetReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasetId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DestinationDatasetReference {
    return {
      datasetId: isSet(object.datasetId) ? globalThis.String(object.datasetId) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
    };
  },

  toJSON(message: DestinationDatasetReference): unknown {
    const obj: any = {};
    if (message.datasetId !== "") {
      obj.datasetId = message.datasetId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create(base?: DeepPartial<DestinationDatasetReference>): DestinationDatasetReference {
    return DestinationDatasetReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DestinationDatasetReference>): DestinationDatasetReference {
    const message = createBaseDestinationDatasetReference();
    message.datasetId = object.datasetId ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseDestinationDataset(): DestinationDataset {
  return { datasetReference: undefined, friendlyName: undefined, description: undefined, labels: {}, location: "" };
}

export const DestinationDataset: MessageFns<DestinationDataset> = {
  encode(message: DestinationDataset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.datasetReference !== undefined) {
      DestinationDatasetReference.encode(message.datasetReference, writer.uint32(10).fork()).join();
    }
    if (message.friendlyName !== undefined) {
      StringValue.encode({ value: message.friendlyName! }, writer.uint32(18).fork()).join();
    }
    if (message.description !== undefined) {
      StringValue.encode({ value: message.description! }, writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      DestinationDataset_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.location !== "") {
      writer.uint32(42).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DestinationDataset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationDataset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasetReference = DestinationDatasetReference.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.friendlyName = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = StringValue.decode(reader, reader.uint32()).value;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = DestinationDataset_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DestinationDataset {
    return {
      datasetReference: isSet(object.datasetReference)
        ? DestinationDatasetReference.fromJSON(object.datasetReference)
        : undefined,
      friendlyName: isSet(object.friendlyName) ? String(object.friendlyName) : undefined,
      description: isSet(object.description) ? String(object.description) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: DestinationDataset): unknown {
    const obj: any = {};
    if (message.datasetReference !== undefined) {
      obj.datasetReference = DestinationDatasetReference.toJSON(message.datasetReference);
    }
    if (message.friendlyName !== undefined) {
      obj.friendlyName = message.friendlyName;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<DestinationDataset>): DestinationDataset {
    return DestinationDataset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DestinationDataset>): DestinationDataset {
    const message = createBaseDestinationDataset();
    message.datasetReference = (object.datasetReference !== undefined && object.datasetReference !== null)
      ? DestinationDatasetReference.fromPartial(object.datasetReference)
      : undefined;
    message.friendlyName = object.friendlyName ?? undefined;
    message.description = object.description ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseDestinationDataset_LabelsEntry(): DestinationDataset_LabelsEntry {
  return { key: "", value: "" };
}

export const DestinationDataset_LabelsEntry: MessageFns<DestinationDataset_LabelsEntry> = {
  encode(message: DestinationDataset_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DestinationDataset_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationDataset_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DestinationDataset_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DestinationDataset_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DestinationDataset_LabelsEntry>): DestinationDataset_LabelsEntry {
    return DestinationDataset_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DestinationDataset_LabelsEntry>): DestinationDataset_LabelsEntry {
    const message = createBaseDestinationDataset_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListing(): Listing {
  return {
    bigqueryDataset: undefined,
    name: "",
    displayName: "",
    description: "",
    primaryContact: "",
    documentation: "",
    state: 0,
    icon: Buffer.alloc(0),
    dataProvider: undefined,
    categories: [],
    publisher: undefined,
    requestAccess: "",
  };
}

export const Listing: MessageFns<Listing> = {
  encode(message: Listing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bigqueryDataset !== undefined) {
      Listing_BigQueryDatasetSource.encode(message.bigqueryDataset, writer.uint32(50).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.primaryContact !== "") {
      writer.uint32(34).string(message.primaryContact);
    }
    if (message.documentation !== "") {
      writer.uint32(42).string(message.documentation);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.icon.length !== 0) {
      writer.uint32(66).bytes(message.icon);
    }
    if (message.dataProvider !== undefined) {
      DataProvider.encode(message.dataProvider, writer.uint32(74).fork()).join();
    }
    writer.uint32(82).fork();
    for (const v of message.categories) {
      writer.int32(v);
    }
    writer.join();
    if (message.publisher !== undefined) {
      Publisher.encode(message.publisher, writer.uint32(90).fork()).join();
    }
    if (message.requestAccess !== "") {
      writer.uint32(98).string(message.requestAccess);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Listing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bigqueryDataset = Listing_BigQueryDatasetSource.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.primaryContact = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.documentation = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.icon = Buffer.from(reader.bytes());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.dataProvider = DataProvider.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag === 80) {
            message.categories.push(reader.int32() as any);

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.categories.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.publisher = Publisher.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.requestAccess = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Listing {
    return {
      bigqueryDataset: isSet(object.bigqueryDataset)
        ? Listing_BigQueryDatasetSource.fromJSON(object.bigqueryDataset)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      primaryContact: isSet(object.primaryContact) ? globalThis.String(object.primaryContact) : "",
      documentation: isSet(object.documentation) ? globalThis.String(object.documentation) : "",
      state: isSet(object.state) ? listing_StateFromJSON(object.state) : 0,
      icon: isSet(object.icon) ? Buffer.from(bytesFromBase64(object.icon)) : Buffer.alloc(0),
      dataProvider: isSet(object.dataProvider) ? DataProvider.fromJSON(object.dataProvider) : undefined,
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => listing_CategoryFromJSON(e))
        : [],
      publisher: isSet(object.publisher) ? Publisher.fromJSON(object.publisher) : undefined,
      requestAccess: isSet(object.requestAccess) ? globalThis.String(object.requestAccess) : "",
    };
  },

  toJSON(message: Listing): unknown {
    const obj: any = {};
    if (message.bigqueryDataset !== undefined) {
      obj.bigqueryDataset = Listing_BigQueryDatasetSource.toJSON(message.bigqueryDataset);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.primaryContact !== "") {
      obj.primaryContact = message.primaryContact;
    }
    if (message.documentation !== "") {
      obj.documentation = message.documentation;
    }
    if (message.state !== 0) {
      obj.state = listing_StateToJSON(message.state);
    }
    if (message.icon.length !== 0) {
      obj.icon = base64FromBytes(message.icon);
    }
    if (message.dataProvider !== undefined) {
      obj.dataProvider = DataProvider.toJSON(message.dataProvider);
    }
    if (message.categories?.length) {
      obj.categories = message.categories.map((e) => listing_CategoryToJSON(e));
    }
    if (message.publisher !== undefined) {
      obj.publisher = Publisher.toJSON(message.publisher);
    }
    if (message.requestAccess !== "") {
      obj.requestAccess = message.requestAccess;
    }
    return obj;
  },

  create(base?: DeepPartial<Listing>): Listing {
    return Listing.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Listing>): Listing {
    const message = createBaseListing();
    message.bigqueryDataset = (object.bigqueryDataset !== undefined && object.bigqueryDataset !== null)
      ? Listing_BigQueryDatasetSource.fromPartial(object.bigqueryDataset)
      : undefined;
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.primaryContact = object.primaryContact ?? "";
    message.documentation = object.documentation ?? "";
    message.state = object.state ?? 0;
    message.icon = object.icon ?? Buffer.alloc(0);
    message.dataProvider = (object.dataProvider !== undefined && object.dataProvider !== null)
      ? DataProvider.fromPartial(object.dataProvider)
      : undefined;
    message.categories = object.categories?.map((e) => e) || [];
    message.publisher = (object.publisher !== undefined && object.publisher !== null)
      ? Publisher.fromPartial(object.publisher)
      : undefined;
    message.requestAccess = object.requestAccess ?? "";
    return message;
  },
};

function createBaseListing_BigQueryDatasetSource(): Listing_BigQueryDatasetSource {
  return { dataset: "" };
}

export const Listing_BigQueryDatasetSource: MessageFns<Listing_BigQueryDatasetSource> = {
  encode(message: Listing_BigQueryDatasetSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataset !== "") {
      writer.uint32(10).string(message.dataset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Listing_BigQueryDatasetSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListing_BigQueryDatasetSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Listing_BigQueryDatasetSource {
    return { dataset: isSet(object.dataset) ? globalThis.String(object.dataset) : "" };
  },

  toJSON(message: Listing_BigQueryDatasetSource): unknown {
    const obj: any = {};
    if (message.dataset !== "") {
      obj.dataset = message.dataset;
    }
    return obj;
  },

  create(base?: DeepPartial<Listing_BigQueryDatasetSource>): Listing_BigQueryDatasetSource {
    return Listing_BigQueryDatasetSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Listing_BigQueryDatasetSource>): Listing_BigQueryDatasetSource {
    const message = createBaseListing_BigQueryDatasetSource();
    message.dataset = object.dataset ?? "";
    return message;
  },
};

function createBaseListDataExchangesRequest(): ListDataExchangesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDataExchangesRequest: MessageFns<ListDataExchangesRequest> = {
  encode(message: ListDataExchangesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataExchangesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataExchangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataExchangesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDataExchangesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataExchangesRequest>): ListDataExchangesRequest {
    return ListDataExchangesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataExchangesRequest>): ListDataExchangesRequest {
    const message = createBaseListDataExchangesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDataExchangesResponse(): ListDataExchangesResponse {
  return { dataExchanges: [], nextPageToken: "" };
}

export const ListDataExchangesResponse: MessageFns<ListDataExchangesResponse> = {
  encode(message: ListDataExchangesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataExchanges) {
      DataExchange.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataExchangesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataExchangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataExchanges.push(DataExchange.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataExchangesResponse {
    return {
      dataExchanges: globalThis.Array.isArray(object?.dataExchanges)
        ? object.dataExchanges.map((e: any) => DataExchange.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDataExchangesResponse): unknown {
    const obj: any = {};
    if (message.dataExchanges?.length) {
      obj.dataExchanges = message.dataExchanges.map((e) => DataExchange.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataExchangesResponse>): ListDataExchangesResponse {
    return ListDataExchangesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataExchangesResponse>): ListDataExchangesResponse {
    const message = createBaseListDataExchangesResponse();
    message.dataExchanges = object.dataExchanges?.map((e) => DataExchange.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListOrgDataExchangesRequest(): ListOrgDataExchangesRequest {
  return { organization: "", pageSize: 0, pageToken: "" };
}

export const ListOrgDataExchangesRequest: MessageFns<ListOrgDataExchangesRequest> = {
  encode(message: ListOrgDataExchangesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.organization !== "") {
      writer.uint32(10).string(message.organization);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrgDataExchangesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgDataExchangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organization = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgDataExchangesRequest {
    return {
      organization: isSet(object.organization) ? globalThis.String(object.organization) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListOrgDataExchangesRequest): unknown {
    const obj: any = {};
    if (message.organization !== "") {
      obj.organization = message.organization;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOrgDataExchangesRequest>): ListOrgDataExchangesRequest {
    return ListOrgDataExchangesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgDataExchangesRequest>): ListOrgDataExchangesRequest {
    const message = createBaseListOrgDataExchangesRequest();
    message.organization = object.organization ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListOrgDataExchangesResponse(): ListOrgDataExchangesResponse {
  return { dataExchanges: [], nextPageToken: "" };
}

export const ListOrgDataExchangesResponse: MessageFns<ListOrgDataExchangesResponse> = {
  encode(message: ListOrgDataExchangesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataExchanges) {
      DataExchange.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrgDataExchangesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgDataExchangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataExchanges.push(DataExchange.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrgDataExchangesResponse {
    return {
      dataExchanges: globalThis.Array.isArray(object?.dataExchanges)
        ? object.dataExchanges.map((e: any) => DataExchange.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListOrgDataExchangesResponse): unknown {
    const obj: any = {};
    if (message.dataExchanges?.length) {
      obj.dataExchanges = message.dataExchanges.map((e) => DataExchange.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOrgDataExchangesResponse>): ListOrgDataExchangesResponse {
    return ListOrgDataExchangesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgDataExchangesResponse>): ListOrgDataExchangesResponse {
    const message = createBaseListOrgDataExchangesResponse();
    message.dataExchanges = object.dataExchanges?.map((e) => DataExchange.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetDataExchangeRequest(): GetDataExchangeRequest {
  return { name: "" };
}

export const GetDataExchangeRequest: MessageFns<GetDataExchangeRequest> = {
  encode(message: GetDataExchangeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataExchangeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataExchangeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataExchangeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataExchangeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataExchangeRequest>): GetDataExchangeRequest {
    return GetDataExchangeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataExchangeRequest>): GetDataExchangeRequest {
    const message = createBaseGetDataExchangeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateDataExchangeRequest(): CreateDataExchangeRequest {
  return { parent: "", dataExchangeId: "", dataExchange: undefined };
}

export const CreateDataExchangeRequest: MessageFns<CreateDataExchangeRequest> = {
  encode(message: CreateDataExchangeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataExchangeId !== "") {
      writer.uint32(18).string(message.dataExchangeId);
    }
    if (message.dataExchange !== undefined) {
      DataExchange.encode(message.dataExchange, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataExchangeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataExchangeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataExchangeId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataExchange = DataExchange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataExchangeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataExchangeId: isSet(object.dataExchangeId) ? globalThis.String(object.dataExchangeId) : "",
      dataExchange: isSet(object.dataExchange) ? DataExchange.fromJSON(object.dataExchange) : undefined,
    };
  },

  toJSON(message: CreateDataExchangeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataExchangeId !== "") {
      obj.dataExchangeId = message.dataExchangeId;
    }
    if (message.dataExchange !== undefined) {
      obj.dataExchange = DataExchange.toJSON(message.dataExchange);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataExchangeRequest>): CreateDataExchangeRequest {
    return CreateDataExchangeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataExchangeRequest>): CreateDataExchangeRequest {
    const message = createBaseCreateDataExchangeRequest();
    message.parent = object.parent ?? "";
    message.dataExchangeId = object.dataExchangeId ?? "";
    message.dataExchange = (object.dataExchange !== undefined && object.dataExchange !== null)
      ? DataExchange.fromPartial(object.dataExchange)
      : undefined;
    return message;
  },
};

function createBaseUpdateDataExchangeRequest(): UpdateDataExchangeRequest {
  return { updateMask: undefined, dataExchange: undefined };
}

export const UpdateDataExchangeRequest: MessageFns<UpdateDataExchangeRequest> = {
  encode(message: UpdateDataExchangeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.dataExchange !== undefined) {
      DataExchange.encode(message.dataExchange, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataExchangeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataExchangeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataExchange = DataExchange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataExchangeRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      dataExchange: isSet(object.dataExchange) ? DataExchange.fromJSON(object.dataExchange) : undefined,
    };
  },

  toJSON(message: UpdateDataExchangeRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.dataExchange !== undefined) {
      obj.dataExchange = DataExchange.toJSON(message.dataExchange);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataExchangeRequest>): UpdateDataExchangeRequest {
    return UpdateDataExchangeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataExchangeRequest>): UpdateDataExchangeRequest {
    const message = createBaseUpdateDataExchangeRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.dataExchange = (object.dataExchange !== undefined && object.dataExchange !== null)
      ? DataExchange.fromPartial(object.dataExchange)
      : undefined;
    return message;
  },
};

function createBaseDeleteDataExchangeRequest(): DeleteDataExchangeRequest {
  return { name: "" };
}

export const DeleteDataExchangeRequest: MessageFns<DeleteDataExchangeRequest> = {
  encode(message: DeleteDataExchangeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataExchangeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataExchangeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataExchangeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDataExchangeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataExchangeRequest>): DeleteDataExchangeRequest {
    return DeleteDataExchangeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataExchangeRequest>): DeleteDataExchangeRequest {
    const message = createBaseDeleteDataExchangeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListListingsRequest(): ListListingsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListListingsRequest: MessageFns<ListListingsRequest> = {
  encode(message: ListListingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListListingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListListingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListListingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListListingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListListingsRequest>): ListListingsRequest {
    return ListListingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListListingsRequest>): ListListingsRequest {
    const message = createBaseListListingsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListListingsResponse(): ListListingsResponse {
  return { listings: [], nextPageToken: "" };
}

export const ListListingsResponse: MessageFns<ListListingsResponse> = {
  encode(message: ListListingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.listings) {
      Listing.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListListingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListListingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listings.push(Listing.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListListingsResponse {
    return {
      listings: globalThis.Array.isArray(object?.listings) ? object.listings.map((e: any) => Listing.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListListingsResponse): unknown {
    const obj: any = {};
    if (message.listings?.length) {
      obj.listings = message.listings.map((e) => Listing.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListListingsResponse>): ListListingsResponse {
    return ListListingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListListingsResponse>): ListListingsResponse {
    const message = createBaseListListingsResponse();
    message.listings = object.listings?.map((e) => Listing.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetListingRequest(): GetListingRequest {
  return { name: "" };
}

export const GetListingRequest: MessageFns<GetListingRequest> = {
  encode(message: GetListingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetListingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetListingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetListingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetListingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetListingRequest>): GetListingRequest {
    return GetListingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetListingRequest>): GetListingRequest {
    const message = createBaseGetListingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateListingRequest(): CreateListingRequest {
  return { parent: "", listingId: "", listing: undefined };
}

export const CreateListingRequest: MessageFns<CreateListingRequest> = {
  encode(message: CreateListingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.listingId !== "") {
      writer.uint32(18).string(message.listingId);
    }
    if (message.listing !== undefined) {
      Listing.encode(message.listing, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateListingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateListingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.listingId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.listing = Listing.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateListingRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      listingId: isSet(object.listingId) ? globalThis.String(object.listingId) : "",
      listing: isSet(object.listing) ? Listing.fromJSON(object.listing) : undefined,
    };
  },

  toJSON(message: CreateListingRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.listingId !== "") {
      obj.listingId = message.listingId;
    }
    if (message.listing !== undefined) {
      obj.listing = Listing.toJSON(message.listing);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateListingRequest>): CreateListingRequest {
    return CreateListingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateListingRequest>): CreateListingRequest {
    const message = createBaseCreateListingRequest();
    message.parent = object.parent ?? "";
    message.listingId = object.listingId ?? "";
    message.listing = (object.listing !== undefined && object.listing !== null)
      ? Listing.fromPartial(object.listing)
      : undefined;
    return message;
  },
};

function createBaseUpdateListingRequest(): UpdateListingRequest {
  return { updateMask: undefined, listing: undefined };
}

export const UpdateListingRequest: MessageFns<UpdateListingRequest> = {
  encode(message: UpdateListingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.listing !== undefined) {
      Listing.encode(message.listing, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateListingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateListingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.listing = Listing.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateListingRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      listing: isSet(object.listing) ? Listing.fromJSON(object.listing) : undefined,
    };
  },

  toJSON(message: UpdateListingRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.listing !== undefined) {
      obj.listing = Listing.toJSON(message.listing);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateListingRequest>): UpdateListingRequest {
    return UpdateListingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateListingRequest>): UpdateListingRequest {
    const message = createBaseUpdateListingRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.listing = (object.listing !== undefined && object.listing !== null)
      ? Listing.fromPartial(object.listing)
      : undefined;
    return message;
  },
};

function createBaseDeleteListingRequest(): DeleteListingRequest {
  return { name: "" };
}

export const DeleteListingRequest: MessageFns<DeleteListingRequest> = {
  encode(message: DeleteListingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteListingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteListingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteListingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteListingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteListingRequest>): DeleteListingRequest {
    return DeleteListingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteListingRequest>): DeleteListingRequest {
    const message = createBaseDeleteListingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSubscribeListingRequest(): SubscribeListingRequest {
  return { destinationDataset: undefined, name: "" };
}

export const SubscribeListingRequest: MessageFns<SubscribeListingRequest> = {
  encode(message: SubscribeListingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationDataset !== undefined) {
      DestinationDataset.encode(message.destinationDataset, writer.uint32(26).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeListingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeListingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.destinationDataset = DestinationDataset.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeListingRequest {
    return {
      destinationDataset: isSet(object.destinationDataset)
        ? DestinationDataset.fromJSON(object.destinationDataset)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: SubscribeListingRequest): unknown {
    const obj: any = {};
    if (message.destinationDataset !== undefined) {
      obj.destinationDataset = DestinationDataset.toJSON(message.destinationDataset);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeListingRequest>): SubscribeListingRequest {
    return SubscribeListingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeListingRequest>): SubscribeListingRequest {
    const message = createBaseSubscribeListingRequest();
    message.destinationDataset = (object.destinationDataset !== undefined && object.destinationDataset !== null)
      ? DestinationDataset.fromPartial(object.destinationDataset)
      : undefined;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSubscribeListingResponse(): SubscribeListingResponse {
  return {};
}

export const SubscribeListingResponse: MessageFns<SubscribeListingResponse> = {
  encode(_: SubscribeListingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeListingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeListingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SubscribeListingResponse {
    return {};
  },

  toJSON(_: SubscribeListingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SubscribeListingResponse>): SubscribeListingResponse {
    return SubscribeListingResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SubscribeListingResponse>): SubscribeListingResponse {
    const message = createBaseSubscribeListingResponse();
    return message;
  },
};

/**
 * The `AnalyticsHubService` API facilitates data sharing within and across
 * organizations. It allows data providers to publish listings that reference
 * shared datasets. With Analytics Hub, users can discover and search for
 * listings that they have access to. Subscribers can view and subscribe to
 * listings. When you subscribe to a listing, Analytics Hub creates a linked
 * dataset in your project.
 */
export type AnalyticsHubServiceDefinition = typeof AnalyticsHubServiceDefinition;
export const AnalyticsHubServiceDefinition = {
  name: "AnalyticsHubService",
  fullName: "google.cloud.bigquery.dataexchange.v1beta1.AnalyticsHubService",
  methods: {
    /** Lists all data exchanges in a given project and location. */
    listDataExchanges: {
      name: "ListDataExchanges",
      requestType: ListDataExchangesRequest,
      requestStream: false,
      responseType: ListDataExchangesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all data exchanges from projects in a given organization and
     * location.
     */
    listOrgDataExchanges: {
      name: "ListOrgDataExchanges",
      requestType: ListOrgDataExchangesRequest,
      requestStream: false,
      responseType: ListOrgDataExchangesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 111, 114, 103, 97, 110, 105, 122, 97, 116, 105, 111, 110])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the details of a data exchange. */
    getDataExchange: {
      name: "GetDataExchange",
      requestType: GetDataExchangeRequest,
      requestStream: false,
      responseType: DataExchange,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new data exchange. */
    createDataExchange: {
      name: "CreateDataExchange",
      requestType: CreateDataExchangeRequest,
      requestStream: false,
      responseType: DataExchange,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              97,
              116,
              97,
              95,
              101,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              13,
              100,
              97,
              116,
              97,
              95,
              101,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              34,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an existing data exchange. */
    updateDataExchange: {
      name: "UpdateDataExchange",
      requestType: UpdateDataExchangeRequest,
      requestStream: false,
      responseType: DataExchange,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              100,
              97,
              116,
              97,
              95,
              101,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              85,
              58,
              13,
              100,
              97,
              116,
              97,
              95,
              101,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              50,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              101,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing data exchange. */
    deleteDataExchange: {
      name: "DeleteDataExchange",
      requestType: DeleteDataExchangeRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all listings in a given project and location. */
    listListings: {
      name: "ListListings",
      requestType: ListListingsRequest,
      requestStream: false,
      responseType: ListListingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the details of a listing. */
    getListing: {
      name: "GetListing",
      requestType: GetListingRequest,
      requestStream: false,
      responseType: Listing,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              47,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new listing. */
    createListing: {
      name: "CreateListing",
      requestType: CreateListingRequest,
      requestStream: false,
      responseType: Listing,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 108, 105, 115, 116, 105, 110, 103])],
          578365826: [
            Buffer.from([
              76,
              58,
              7,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              34,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an existing listing. */
    updateListing: {
      name: "UpdateListing",
      requestType: UpdateListingRequest,
      requestStream: false,
      responseType: Listing,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              84,
              58,
              7,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              50,
              73,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              47,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a listing. */
    deleteListing: {
      name: "DeleteListing",
      requestType: DeleteListingRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              42,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              47,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Subscribes to a listing.
     *
     * Currently, with Analytics Hub, you can create listings that
     * reference only BigQuery datasets.
     * Upon subscription to a listing for a BigQuery dataset, Analytics Hub
     * creates a linked dataset in the subscriber's project.
     */
    subscribeListing: {
      name: "SubscribeListing",
      requestType: SubscribeListingRequest,
      requestStream: false,
      responseType: SubscribeListingResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              80,
              58,
              1,
              42,
              34,
              75,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              47,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              98,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets the IAM policy. */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              165,
              1,
              58,
              1,
              42,
              90,
              87,
              58,
              1,
              42,
              34,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              47,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /** Sets the IAM policy. */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              165,
              1,
              58,
              1,
              42,
              90,
              87,
              58,
              1,
              42,
              34,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              47,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /** Returns the permissions that a caller has. */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              177,
              1,
              58,
              1,
              42,
              90,
              93,
              58,
              1,
              42,
              34,
              88,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              47,
              108,
              105,
              115,
              116,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              77,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              69,
              120,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AnalyticsHubServiceImplementation<CallContextExt = {}> {
  /** Lists all data exchanges in a given project and location. */
  listDataExchanges(
    request: ListDataExchangesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataExchangesResponse>>;
  /**
   * Lists all data exchanges from projects in a given organization and
   * location.
   */
  listOrgDataExchanges(
    request: ListOrgDataExchangesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOrgDataExchangesResponse>>;
  /** Gets the details of a data exchange. */
  getDataExchange(
    request: GetDataExchangeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataExchange>>;
  /** Creates a new data exchange. */
  createDataExchange(
    request: CreateDataExchangeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataExchange>>;
  /** Updates an existing data exchange. */
  updateDataExchange(
    request: UpdateDataExchangeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataExchange>>;
  /** Deletes an existing data exchange. */
  deleteDataExchange(
    request: DeleteDataExchangeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lists all listings in a given project and location. */
  listListings(
    request: ListListingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListListingsResponse>>;
  /** Gets the details of a listing. */
  getListing(request: GetListingRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Listing>>;
  /** Creates a new listing. */
  createListing(request: CreateListingRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Listing>>;
  /** Updates an existing listing. */
  updateListing(request: UpdateListingRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Listing>>;
  /** Deletes a listing. */
  deleteListing(request: DeleteListingRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Subscribes to a listing.
   *
   * Currently, with Analytics Hub, you can create listings that
   * reference only BigQuery datasets.
   * Upon subscription to a listing for a BigQuery dataset, Analytics Hub
   * creates a linked dataset in the subscriber's project.
   */
  subscribeListing(
    request: SubscribeListingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SubscribeListingResponse>>;
  /** Gets the IAM policy. */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /** Sets the IAM policy. */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /** Returns the permissions that a caller has. */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
}

export interface AnalyticsHubServiceClient<CallOptionsExt = {}> {
  /** Lists all data exchanges in a given project and location. */
  listDataExchanges(
    request: DeepPartial<ListDataExchangesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataExchangesResponse>;
  /**
   * Lists all data exchanges from projects in a given organization and
   * location.
   */
  listOrgDataExchanges(
    request: DeepPartial<ListOrgDataExchangesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOrgDataExchangesResponse>;
  /** Gets the details of a data exchange. */
  getDataExchange(
    request: DeepPartial<GetDataExchangeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataExchange>;
  /** Creates a new data exchange. */
  createDataExchange(
    request: DeepPartial<CreateDataExchangeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataExchange>;
  /** Updates an existing data exchange. */
  updateDataExchange(
    request: DeepPartial<UpdateDataExchangeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataExchange>;
  /** Deletes an existing data exchange. */
  deleteDataExchange(
    request: DeepPartial<DeleteDataExchangeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lists all listings in a given project and location. */
  listListings(
    request: DeepPartial<ListListingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListListingsResponse>;
  /** Gets the details of a listing. */
  getListing(request: DeepPartial<GetListingRequest>, options?: CallOptions & CallOptionsExt): Promise<Listing>;
  /** Creates a new listing. */
  createListing(request: DeepPartial<CreateListingRequest>, options?: CallOptions & CallOptionsExt): Promise<Listing>;
  /** Updates an existing listing. */
  updateListing(request: DeepPartial<UpdateListingRequest>, options?: CallOptions & CallOptionsExt): Promise<Listing>;
  /** Deletes a listing. */
  deleteListing(request: DeepPartial<DeleteListingRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Subscribes to a listing.
   *
   * Currently, with Analytics Hub, you can create listings that
   * reference only BigQuery datasets.
   * Upon subscription to a listing for a BigQuery dataset, Analytics Hub
   * creates a linked dataset in the subscriber's project.
   */
  subscribeListing(
    request: DeepPartial<SubscribeListingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SubscribeListingResponse>;
  /** Gets the IAM policy. */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /** Sets the IAM policy. */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /** Returns the permissions that a caller has. */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
