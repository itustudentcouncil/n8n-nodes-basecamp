// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycentermanagement/v1/security_center_management.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Policy } from "../../../iam/v1/policy.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Struct, Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { Expr } from "../../../type/expr.js";

export const protobufPackage = "google.cloud.securitycentermanagement.v1";

/**
 * Represents a particular Security Command Center service. This includes
 * settings information such as top-level enablement in addition to individual
 * module settings. Service settings can be configured at the organization,
 * folder, or project level. Service settings at the organization or folder
 * level are inherited by those in child folders and projects.
 */
export interface SecurityCenterService {
  /**
   * Identifier. The name of the service.
   *
   * Its format is:
   *
   *   * organizations/{organization}/locations/{location}/securityCenterServices/{service}
   *   * folders/{folder}/locations/{location}/securityCenterServices/{service}
   *   * projects/{project}/locations/{location}/securityCenterServices/{service}
   *
   * The possible values for id {service} are:
   *
   *   * container-threat-detection
   *   * event-threat-detection
   *   * security-health-analytics
   *   * vm-threat-detection
   *   * web-security-scanner
   */
  name: string;
  /**
   * Optional. The intended state of enablement for the service at its level of
   * the resource hierarchy. A DISABLED state will override all module
   * enablement_states to DISABLED.
   */
  intendedEnablementState: SecurityCenterService_EnablementState;
  /**
   * Output only. The effective enablement state for the service at its level of
   * the resource hierarchy. If the intended state is set to INHERITED, the
   * effective state will be inherited from the enablement state of an ancestor.
   * This state may differ from the intended enablement state due to billing
   * eligibility or onboarding status.
   */
  effectiveEnablementState: SecurityCenterService_EnablementState;
  /**
   * Optional. The configurations including the state of enablement for the
   * service's different modules. The absence of a module in the map implies its
   * configuration is inherited from its parents.
   */
  modules: { [key: string]: SecurityCenterService_ModuleSettings };
  /**
   * Output only. The time the service was last updated. This could be due to an
   * explicit user update or due to a side effect of another system change such
   * as billing subscription expiry.
   */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Additional service specific configuration. Not all services will
   * utilize this field.
   */
  serviceConfig: { [key: string]: any } | undefined;
}

/**
 * Represents the possible intended states of enablement for a service or
 * module.
 */
export enum SecurityCenterService_EnablementState {
  /** ENABLEMENT_STATE_UNSPECIFIED - Default value. This value is unused. */
  ENABLEMENT_STATE_UNSPECIFIED = 0,
  /**
   * INHERITED - State is inherited from the parent resource. Not a valid effective
   * enablement state.
   */
  INHERITED = 1,
  /** ENABLED - State is enabled. */
  ENABLED = 2,
  /** DISABLED - State is disabled. */
  DISABLED = 3,
  /**
   * INGEST_ONLY - SCC is configured to ingest findings from this service but not enable
   * this service. Not a valid intended_enablement_state (that is, this is a
   * readonly state).
   */
  INGEST_ONLY = 4,
  UNRECOGNIZED = -1,
}

export function securityCenterService_EnablementStateFromJSON(object: any): SecurityCenterService_EnablementState {
  switch (object) {
    case 0:
    case "ENABLEMENT_STATE_UNSPECIFIED":
      return SecurityCenterService_EnablementState.ENABLEMENT_STATE_UNSPECIFIED;
    case 1:
    case "INHERITED":
      return SecurityCenterService_EnablementState.INHERITED;
    case 2:
    case "ENABLED":
      return SecurityCenterService_EnablementState.ENABLED;
    case 3:
    case "DISABLED":
      return SecurityCenterService_EnablementState.DISABLED;
    case 4:
    case "INGEST_ONLY":
      return SecurityCenterService_EnablementState.INGEST_ONLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecurityCenterService_EnablementState.UNRECOGNIZED;
  }
}

export function securityCenterService_EnablementStateToJSON(object: SecurityCenterService_EnablementState): string {
  switch (object) {
    case SecurityCenterService_EnablementState.ENABLEMENT_STATE_UNSPECIFIED:
      return "ENABLEMENT_STATE_UNSPECIFIED";
    case SecurityCenterService_EnablementState.INHERITED:
      return "INHERITED";
    case SecurityCenterService_EnablementState.ENABLED:
      return "ENABLED";
    case SecurityCenterService_EnablementState.DISABLED:
      return "DISABLED";
    case SecurityCenterService_EnablementState.INGEST_ONLY:
      return "INGEST_ONLY";
    case SecurityCenterService_EnablementState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The settings for individual modules. */
export interface SecurityCenterService_ModuleSettings {
  /**
   * Optional. The intended state of enablement for the module at its level of
   * the resource hierarchy.
   */
  intendedEnablementState: SecurityCenterService_EnablementState;
  /**
   * Output only. The effective enablement state for the module at its level
   * of the resource hierarchy. If the intended state is set to INHERITED, the
   * effective state will be inherited from the enablement state of an
   * ancestor. This state may
   * differ from the intended enablement state due to billing eligibility or
   * onboarding status.
   */
  effectiveEnablementState: SecurityCenterService_EnablementState;
}

export interface SecurityCenterService_ModulesEntry {
  key: string;
  value: SecurityCenterService_ModuleSettings | undefined;
}

/**
 * An EffectiveSecurityHealthAnalyticsCustomModule is the representation of
 * a Security Health Analytics custom module at a specified level of the
 * resource hierarchy: organization, folder, or project. If a custom module is
 * inherited from a parent organization or folder, the value of the
 * `enablementState` property in EffectiveSecurityHealthAnalyticsCustomModule is
 * set to the value that is effective in the parent, instead of  `INHERITED`.
 * For example, if the module is enabled in a parent organization or folder, the
 * effective enablement_state for the module in all child folders or projects is
 * also `enabled`. EffectiveSecurityHealthAnalyticsCustomModule is read-only.
 */
export interface EffectiveSecurityHealthAnalyticsCustomModule {
  /**
   * Identifier. The full resource name of the custom module, specified in one
   * of the following formats:
   *
   * * `organizations/organization/{location}/effectiveSecurityHealthAnalyticsCustomModules/{effective_security_health_analytics_custom_module}`
   * * `folders/folder/{location}/effectiveSecurityHealthAnalyticsCustomModules/{effective_security_health_analytics_custom_module}`
   * * `projects/project/{location}/effectiveSecurityHealthAnalyticsCustomModules/{effective_security_health_analytics_custom_module}`
   */
  name: string;
  /** Output only. The user-specified configuration for the module. */
  customConfig:
    | CustomConfig
    | undefined;
  /**
   * Output only. The effective state of enablement for the module at the given
   * level of the hierarchy.
   */
  enablementState: EffectiveSecurityHealthAnalyticsCustomModule_EnablementState;
  /**
   * Output only. The display name for the custom module. The name must be
   * between 1 and 128 characters, start with a lowercase letter, and contain
   * alphanumeric characters or underscores only.
   */
  displayName: string;
}

/** The enablement state of the module. */
export enum EffectiveSecurityHealthAnalyticsCustomModule_EnablementState {
  /** ENABLEMENT_STATE_UNSPECIFIED - Unspecified enablement state. */
  ENABLEMENT_STATE_UNSPECIFIED = 0,
  /** ENABLED - The module is enabled at the given level. */
  ENABLED = 1,
  /** DISABLED - The module is disabled at the given level. */
  DISABLED = 2,
  UNRECOGNIZED = -1,
}

export function effectiveSecurityHealthAnalyticsCustomModule_EnablementStateFromJSON(
  object: any,
): EffectiveSecurityHealthAnalyticsCustomModule_EnablementState {
  switch (object) {
    case 0:
    case "ENABLEMENT_STATE_UNSPECIFIED":
      return EffectiveSecurityHealthAnalyticsCustomModule_EnablementState.ENABLEMENT_STATE_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return EffectiveSecurityHealthAnalyticsCustomModule_EnablementState.ENABLED;
    case 2:
    case "DISABLED":
      return EffectiveSecurityHealthAnalyticsCustomModule_EnablementState.DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EffectiveSecurityHealthAnalyticsCustomModule_EnablementState.UNRECOGNIZED;
  }
}

export function effectiveSecurityHealthAnalyticsCustomModule_EnablementStateToJSON(
  object: EffectiveSecurityHealthAnalyticsCustomModule_EnablementState,
): string {
  switch (object) {
    case EffectiveSecurityHealthAnalyticsCustomModule_EnablementState.ENABLEMENT_STATE_UNSPECIFIED:
      return "ENABLEMENT_STATE_UNSPECIFIED";
    case EffectiveSecurityHealthAnalyticsCustomModule_EnablementState.ENABLED:
      return "ENABLED";
    case EffectiveSecurityHealthAnalyticsCustomModule_EnablementState.DISABLED:
      return "DISABLED";
    case EffectiveSecurityHealthAnalyticsCustomModule_EnablementState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Request message for listing effective Security Health Analytics custom
 * modules.
 */
export interface ListEffectiveSecurityHealthAnalyticsCustomModulesRequest {
  /**
   * Required. Name of parent to list effective custom modules. specified in one
   * of the following formats:
   * * `organizations/{organization}/locations/{location}`
   * * `folders/{folder}/locations/{location}`
   * or
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The maximum number of results to return in a single response.
   * Default is 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
  /** Optional. The value returned by the last call indicating a continuation. */
  pageToken: string;
}

/**
 * Response message for listing effective Security Health Analytics custom
 * modules.
 */
export interface ListEffectiveSecurityHealthAnalyticsCustomModulesResponse {
  /** The list of EffectiveSecurityHealthAnalyticsCustomModule */
  effectiveSecurityHealthAnalyticsCustomModules: EffectiveSecurityHealthAnalyticsCustomModule[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** Message for getting a EffectiveSecurityHealthAnalyticsCustomModule */
export interface GetEffectiveSecurityHealthAnalyticsCustomModuleRequest {
  /**
   * Required. The full resource name of the custom module, specified in one of
   * the following formats:
   *
   * * `organizations/organization/{location}/effectiveSecurityHealthAnalyticsCustomModules/{effective_security_health_analytics_custom_module}`
   * * `folders/folder/{location}/effectiveSecurityHealthAnalyticsCustomModules/{effective_security_health_analytics_custom_module}`
   * * `projects/project/{location}/effectiveSecurityHealthAnalyticsCustomModules/{effective_security_health_analytics_custom_module}`
   */
  name: string;
}

/**
 * Represents an instance of a Security Health Analytics custom module,
 * including its full module name, display name, enablement state, and last
 * updated time. You can create a custom module at the organization, folder, or
 * project level. Custom modules that you create at the organization or folder
 * level are inherited by the child folders and projects.
 */
export interface SecurityHealthAnalyticsCustomModule {
  /**
   * Identifier. The full resource name of the custom module, specified in one
   * of the following formats:
   * * `organizations/{organization}/locations/{location}/securityHealthAnalyticsCustomModules/{security_health_analytics_custom_module}`
   * * `folders/{folder}/locations/{location}/securityHealthAnalyticsCustomModules/{security_health_analytics_custom_module}`
   * * `projects/{project}/locations/{location}/securityHealthAnalyticsCustomModules/{security_health_analytics_custom_module}`
   */
  name: string;
  /**
   * Optional. The display name of the Security Health Analytics custom module.
   * This display name becomes the finding category for all findings that are
   * returned by this custom module. The display name must be between 1 and
   * 128 characters, start with a lowercase letter, and contain alphanumeric
   * characters or underscores only.
   */
  displayName: string;
  /** Optional. The enablement state of the custom module. */
  enablementState: SecurityHealthAnalyticsCustomModule_EnablementState;
  /** Output only. The time at which the custom module was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Output only. The editor that last updated the custom module. */
  lastEditor: string;
  /**
   * Output only. Specifies the organization or folder from which the custom
   * module is inherited. If empty, indicates that the custom module was created
   * in the organization, folder, or project in which you are viewing the custom
   * module.
   */
  ancestorModule: string;
  /** Optional. The user specified custom configuration for the module. */
  customConfig: CustomConfig | undefined;
}

/** Possible enablement states of a custom module. */
export enum SecurityHealthAnalyticsCustomModule_EnablementState {
  /** ENABLEMENT_STATE_UNSPECIFIED - Unspecified enablement state. */
  ENABLEMENT_STATE_UNSPECIFIED = 0,
  /** ENABLED - The module is enabled at the given CRM resource. */
  ENABLED = 1,
  /** DISABLED - The module is disabled at the given CRM resource. */
  DISABLED = 2,
  /**
   * INHERITED - State is inherited from an ancestor module. The module will either
   * be effectively ENABLED or DISABLED based on its closest non-inherited
   * ancestor module in the CRM hierarchy. Attempting to set a top level
   * module (module with no parent) to the INHERITED state will result in an
   * INVALID_ARGUMENT error.
   */
  INHERITED = 3,
  UNRECOGNIZED = -1,
}

export function securityHealthAnalyticsCustomModule_EnablementStateFromJSON(
  object: any,
): SecurityHealthAnalyticsCustomModule_EnablementState {
  switch (object) {
    case 0:
    case "ENABLEMENT_STATE_UNSPECIFIED":
      return SecurityHealthAnalyticsCustomModule_EnablementState.ENABLEMENT_STATE_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return SecurityHealthAnalyticsCustomModule_EnablementState.ENABLED;
    case 2:
    case "DISABLED":
      return SecurityHealthAnalyticsCustomModule_EnablementState.DISABLED;
    case 3:
    case "INHERITED":
      return SecurityHealthAnalyticsCustomModule_EnablementState.INHERITED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecurityHealthAnalyticsCustomModule_EnablementState.UNRECOGNIZED;
  }
}

export function securityHealthAnalyticsCustomModule_EnablementStateToJSON(
  object: SecurityHealthAnalyticsCustomModule_EnablementState,
): string {
  switch (object) {
    case SecurityHealthAnalyticsCustomModule_EnablementState.ENABLEMENT_STATE_UNSPECIFIED:
      return "ENABLEMENT_STATE_UNSPECIFIED";
    case SecurityHealthAnalyticsCustomModule_EnablementState.ENABLED:
      return "ENABLED";
    case SecurityHealthAnalyticsCustomModule_EnablementState.DISABLED:
      return "DISABLED";
    case SecurityHealthAnalyticsCustomModule_EnablementState.INHERITED:
      return "INHERITED";
    case SecurityHealthAnalyticsCustomModule_EnablementState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Defines the properties in a custom module configuration for Security
 * Health Analytics. Use the custom module configuration to create custom
 * detectors that generate custom findings for resources that you specify.
 */
export interface CustomConfig {
  /**
   * Optional. The CEL expression to evaluate to produce findings. When the
   * expression evaluates to true against a resource, a finding is generated.
   */
  predicate:
    | Expr
    | undefined;
  /** Optional. Custom output properties. */
  customOutput:
    | CustomConfig_CustomOutputSpec
    | undefined;
  /**
   * Optional. The Cloud Asset Inventory resource types that the custom module
   * operates on. For information about resource types, see [Supported asset
   * types](https://cloud.google.com/asset-inventory/docs/supported-asset-types).
   * Each custom module can specify up to 5 resource types.
   */
  resourceSelector:
    | CustomConfig_ResourceSelector
    | undefined;
  /** Optional. The severity to assign to findings generated by the module. */
  severity: CustomConfig_Severity;
  /**
   * Optional. Text that describes the vulnerability or misconfiguration that
   * the custom module detects. This explanation is returned with each finding
   * instance to help investigators understand the detected issue. The text must
   * be enclosed in quotation marks.
   */
  description: string;
  /**
   * Optional. An explanation of the recommended steps that security teams can
   * take to resolve the detected issue. This explanation is returned with each
   * finding generated by this module in the `nextSteps` property of the finding
   * JSON.
   */
  recommendation: string;
}

/** Defines the valid value options for the severity of a finding. */
export enum CustomConfig_Severity {
  /** SEVERITY_UNSPECIFIED - Unspecified severity. */
  SEVERITY_UNSPECIFIED = 0,
  /** CRITICAL - Critical severity. */
  CRITICAL = 1,
  /** HIGH - High severity. */
  HIGH = 2,
  /** MEDIUM - Medium severity. */
  MEDIUM = 3,
  /** LOW - Low severity. */
  LOW = 4,
  UNRECOGNIZED = -1,
}

export function customConfig_SeverityFromJSON(object: any): CustomConfig_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return CustomConfig_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "CRITICAL":
      return CustomConfig_Severity.CRITICAL;
    case 2:
    case "HIGH":
      return CustomConfig_Severity.HIGH;
    case 3:
    case "MEDIUM":
      return CustomConfig_Severity.MEDIUM;
    case 4:
    case "LOW":
      return CustomConfig_Severity.LOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CustomConfig_Severity.UNRECOGNIZED;
  }
}

export function customConfig_SeverityToJSON(object: CustomConfig_Severity): string {
  switch (object) {
    case CustomConfig_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case CustomConfig_Severity.CRITICAL:
      return "CRITICAL";
    case CustomConfig_Severity.HIGH:
      return "HIGH";
    case CustomConfig_Severity.MEDIUM:
      return "MEDIUM";
    case CustomConfig_Severity.LOW:
      return "LOW";
    case CustomConfig_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A set of optional name-value pairs that define custom source properties to
 * return with each finding that is generated by the custom module. The custom
 * source properties that are defined here are included in the finding JSON
 * under `sourceProperties`.
 */
export interface CustomConfig_CustomOutputSpec {
  /** Optional. A list of custom output properties to add to the finding. */
  properties: CustomConfig_CustomOutputSpec_Property[];
}

/** An individual name-value pair that defines a custom source property. */
export interface CustomConfig_CustomOutputSpec_Property {
  /** Optional. Name of the property for the custom output. */
  name: string;
  /**
   * Optional. The CEL expression for the custom output. A resource property
   * can be specified to return the value of the property or a text string
   * enclosed in quotation marks.
   */
  valueExpression: Expr | undefined;
}

/** Resource for selecting resource type. */
export interface CustomConfig_ResourceSelector {
  /** Optional. The resource types to run the detector on. */
  resourceTypes: string[];
}

/** Request message for listing Security Health Analytics custom modules. */
export interface ListSecurityHealthAnalyticsCustomModulesRequest {
  /**
   * Required. Name of parent organization, folder, or project in which to list
   * custom modules, specified in one of the following formats:
   *
   * * `organizations/{organization}/locations/{location}`
   * * `folders/{folder}/locations/{location}`
   * * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The maximum number of results to return in a single response.
   * Default is 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** Response message for listing Security Health Analytics custom modules. */
export interface ListSecurityHealthAnalyticsCustomModulesResponse {
  /** The list of SecurityHealthAnalyticsCustomModules */
  securityHealthAnalyticsCustomModules: SecurityHealthAnalyticsCustomModule[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/**
 * Request message for listing descendant Security Health Analytics custom
 * modules.
 */
export interface ListDescendantSecurityHealthAnalyticsCustomModulesRequest {
  /**
   * Required. Name of the parent organization, folder, or project in which to
   * list custom modules, specified in one of the following formats:
   *
   * * `organizations/{organization}/locations/{location}`
   * * `folders/{folder}/locations/{location}`
   * * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The maximum number of results to return in a single response.
   * Default is 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/**
 * Response message for listing descendant Security Health Analytics custom
 * modules.
 */
export interface ListDescendantSecurityHealthAnalyticsCustomModulesResponse {
  /** The list of SecurityHealthAnalyticsCustomModules */
  securityHealthAnalyticsCustomModules: SecurityHealthAnalyticsCustomModule[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** Message for getting a SecurityHealthAnalyticsCustomModule */
export interface GetSecurityHealthAnalyticsCustomModuleRequest {
  /** Required. Name of the resource */
  name: string;
}

/** Message for creating a SecurityHealthAnalyticsCustomModule */
export interface CreateSecurityHealthAnalyticsCustomModuleRequest {
  /**
   * Required. Name of the parent organization, folder, or project of the
   * module, specified in one of the following formats:
   *
   * * `organizations/{organization}/locations/{location}`
   * * `folders/{folder}/locations/{location}`
   * * `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The resource being created */
  securityHealthAnalyticsCustomModule:
    | SecurityHealthAnalyticsCustomModule
    | undefined;
  /**
   * Optional. When set to true, only validations (including IAM checks) will
   * done for the request (no module will be created). An OK response indicates
   * the request is valid while an error response indicates the request is
   * invalid. Note that a subsequent request to actually create the module could
   * still fail because:
   *  1. the state could have changed (e.g. IAM permission lost) or
   *  2. A failure occurred during creation of the module.
   * Defaults to false.
   */
  validateOnly: boolean;
}

/** Message for updating a SecurityHealthAnalyticsCustomModule */
export interface UpdateSecurityHealthAnalyticsCustomModuleRequest {
  /**
   * Required. The list of fields to be updated. The only fields that can be
   * updated are `enablement_state` and `custom_config`. If empty or set to the
   * wildcard value `*`, both `enablement_state` and `custom_config` are
   * updated.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated */
  securityHealthAnalyticsCustomModule:
    | SecurityHealthAnalyticsCustomModule
    | undefined;
  /**
   * Optional. When set to true, only validations (including IAM checks) will
   * done for the request (module will not be updated). An OK response indicates
   * the request is valid while an error response indicates the request is
   * invalid. Note that a subsequent request to actually update the module could
   * still fail because 1. the state could have changed (e.g. IAM permission
   * lost) or
   * 2. A failure occurred while trying to update the module.
   */
  validateOnly: boolean;
}

/** Message for deleting a SecurityHealthAnalyticsCustomModule */
export interface DeleteSecurityHealthAnalyticsCustomModuleRequest {
  /**
   * Required. The resource name of the SHA custom module.
   *
   * Its format is:
   *
   *   * `organizations/{organization}/locations/{location}/securityHealthAnalyticsCustomModules/{security_health_analytics_custom_module}`.
   *   * `folders/{folder}/locations/{location}/securityHealthAnalyticsCustomModules/{security_health_analytics_custom_module}`.
   *   * `projects/{project}/locations/{location}/securityHealthAnalyticsCustomModules/{security_health_analytics_custom_module}`.
   */
  name: string;
  /**
   * Optional. When set to true, only validations (including IAM checks) will
   * done for the request (module will not be deleted). An OK response indicates
   * the request is valid while an error response indicates the request is
   * invalid. Note that a subsequent request to actually delete the module could
   * still fail because 1. the state could have changed (e.g. IAM permission
   * lost) or
   * 2. A failure occurred while trying to delete the module.
   */
  validateOnly: boolean;
}

/**
 * Request message to simulate a CustomConfig against a given test resource.
 * Maximum size of the request is 4 MB by default.
 */
export interface SimulateSecurityHealthAnalyticsCustomModuleRequest {
  /**
   * Required. The relative resource name of the organization, project, or
   * folder. For more information about relative resource names, see [Relative
   * Resource
   * Name](https://cloud.google.com/apis/design/resource_names#relative_resource_name)
   * Example: `organizations/{organization_id}`.
   */
  parent: string;
  /** Required. The custom configuration that you need to test. */
  customConfig:
    | CustomConfig
    | undefined;
  /** Required. Resource data to simulate custom module against. */
  resource: SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource | undefined;
}

/**
 * Manually constructed resource name. If the custom module evaluates against
 * only the resource data, you can omit the `iam_policy_data` field. If it
 * evaluates only the `iam_policy_data` field, you can omit the resource data.
 */
export interface SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource {
  /**
   * Required. The type of the resource, for example,
   * `compute.googleapis.com/Disk`.
   */
  resourceType: string;
  /**
   * Optional. A representation of the Google Cloud resource. Should match the
   * Google Cloud resource JSON format.
   */
  resourceData:
    | { [key: string]: any }
    | undefined;
  /** Optional. A representation of the IAM policy. */
  iamPolicyData: Policy | undefined;
}

/**
 * A subset of the fields of the Security Center Finding proto. The minimum set
 * of fields needed to represent a simulated finding from a SHA custom module.
 */
export interface SimulatedFinding {
  /**
   * Identifier. The [relative resource
   * name](https://cloud.google.com/apis/design/resource_names#relative_resource_name)
   * of the finding. Example:
   * `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}`,
   * `folders/{folder_id}/sources/{source_id}/findings/{finding_id}`,
   * `projects/{project_id}/sources/{source_id}/findings/{finding_id}`.
   */
  name: string;
  /**
   * The relative resource name of the source the finding belongs to. See:
   * https://cloud.google.com/apis/design/resource_names#relative_resource_name
   * This field is immutable after creation time.
   * For example:
   * `organizations/{organization_id}/sources/{source_id}`
   */
  parent: string;
  /**
   * For findings on Google Cloud resources, the full resource
   * name of the Google Cloud resource this finding is for. See:
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   * When the finding is for a non-Google Cloud resource, the resourceName can
   * be a customer or partner defined string. This field is immutable after
   * creation time.
   */
  resourceName: string;
  /**
   * The additional taxonomy group within findings from a given source.
   * This field is immutable after creation time.
   * Example: "XSS_FLASH_INJECTION"
   */
  category: string;
  /** Output only. The state of the finding. */
  state: SimulatedFinding_State;
  /**
   * Source specific properties. These properties are managed by the source
   * that writes the finding. The key names in the source_properties map must be
   * between 1 and 255 characters, and must start with a letter and contain
   * alphanumeric characters or underscores only.
   */
  sourceProperties: { [key: string]: any | undefined };
  /**
   * The time the finding was first detected. If an existing finding is updated,
   * then this is the time the update occurred.
   * For example, if the finding represents an open firewall, this property
   * captures the time the detector believes the firewall became open. The
   * accuracy is determined by the detector. If the finding is later resolved,
   * then this time reflects when the finding was resolved. This must not
   * be set to a value greater than the current timestamp.
   */
  eventTime:
    | Date
    | undefined;
  /**
   * The severity of the finding. This field is managed by the source that
   * writes the finding.
   */
  severity: SimulatedFinding_Severity;
  /** The class of the finding. */
  findingClass: SimulatedFinding_FindingClass;
}

/** The state of the finding. */
export enum SimulatedFinding_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The finding requires attention and has not been addressed yet. */
  ACTIVE = 1,
  /**
   * INACTIVE - The finding has been fixed, triaged as a non-issue or otherwise addressed
   * and is no longer active.
   */
  INACTIVE = 2,
  UNRECOGNIZED = -1,
}

export function simulatedFinding_StateFromJSON(object: any): SimulatedFinding_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return SimulatedFinding_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return SimulatedFinding_State.ACTIVE;
    case 2:
    case "INACTIVE":
      return SimulatedFinding_State.INACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SimulatedFinding_State.UNRECOGNIZED;
  }
}

export function simulatedFinding_StateToJSON(object: SimulatedFinding_State): string {
  switch (object) {
    case SimulatedFinding_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case SimulatedFinding_State.ACTIVE:
      return "ACTIVE";
    case SimulatedFinding_State.INACTIVE:
      return "INACTIVE";
    case SimulatedFinding_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The severity of the finding. */
export enum SimulatedFinding_Severity {
  /**
   * SEVERITY_UNSPECIFIED - This value is used for findings when a source doesn't write a severity
   * value.
   */
  SEVERITY_UNSPECIFIED = 0,
  /**
   * CRITICAL - Vulnerability:
   * A critical vulnerability is easily discoverable by an external actor,
   * exploitable, and results in the direct ability to execute arbitrary code,
   * exfiltrate data, and otherwise gain additional access and privileges to
   * cloud resources and workloads. Examples include publicly accessible
   * unprotected user data and public SSH access with weak or no
   * passwords.
   *
   * Threat:
   * Indicates a threat that is able to access, modify, or delete data or
   * execute unauthorized code within existing resources.
   */
  CRITICAL = 1,
  /**
   * HIGH - Vulnerability:
   * A high risk vulnerability can be easily discovered and exploited in
   * combination with other vulnerabilities in order to gain direct access and
   * the ability to execute arbitrary code, exfiltrate data, and otherwise
   * gain additional access and privileges to cloud resources and workloads.
   * An example is a database with weak or no passwords that is only
   * accessible internally. This database could easily be compromised by an
   * actor that had access to the internal network.
   *
   * Threat:
   * Indicates a threat that is able to create new computational resources in
   * an environment but not able to access data or execute code in existing
   * resources.
   */
  HIGH = 2,
  /**
   * MEDIUM - Vulnerability:
   * A medium risk vulnerability could be used by an actor to gain access to
   * resources or privileges that enable them to eventually (through multiple
   * steps or a complex exploit) gain access and the ability to execute
   * arbitrary code or exfiltrate data. An example is a service account with
   * access to more projects than it should have. If an actor gains access to
   * the service account, they could potentially use that access to manipulate
   * a project the service account was not intended to.
   *
   * Threat:
   * Indicates a threat that is able to cause operational impact but may not
   * access data or execute unauthorized code.
   */
  MEDIUM = 3,
  /**
   * LOW - Vulnerability:
   * A low risk vulnerability hampers a security organization's ability to
   * detect vulnerabilities or active threats in their deployment, or prevents
   * the root cause investigation of security issues. An example is monitoring
   * and logs being disabled for resource configurations and access.
   *
   * Threat:
   * Indicates a threat that has obtained minimal access to an environment but
   * is not able to access data, execute code, or create resources.
   */
  LOW = 4,
  UNRECOGNIZED = -1,
}

export function simulatedFinding_SeverityFromJSON(object: any): SimulatedFinding_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return SimulatedFinding_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "CRITICAL":
      return SimulatedFinding_Severity.CRITICAL;
    case 2:
    case "HIGH":
      return SimulatedFinding_Severity.HIGH;
    case 3:
    case "MEDIUM":
      return SimulatedFinding_Severity.MEDIUM;
    case 4:
    case "LOW":
      return SimulatedFinding_Severity.LOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SimulatedFinding_Severity.UNRECOGNIZED;
  }
}

export function simulatedFinding_SeverityToJSON(object: SimulatedFinding_Severity): string {
  switch (object) {
    case SimulatedFinding_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case SimulatedFinding_Severity.CRITICAL:
      return "CRITICAL";
    case SimulatedFinding_Severity.HIGH:
      return "HIGH";
    case SimulatedFinding_Severity.MEDIUM:
      return "MEDIUM";
    case SimulatedFinding_Severity.LOW:
      return "LOW";
    case SimulatedFinding_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents what kind of Finding it is. */
export enum SimulatedFinding_FindingClass {
  /** FINDING_CLASS_UNSPECIFIED - Unspecified finding class. */
  FINDING_CLASS_UNSPECIFIED = 0,
  /** THREAT - Describes unwanted or malicious activity. */
  THREAT = 1,
  /**
   * VULNERABILITY - Describes a potential weakness in software that increases risk to
   * Confidentiality & Integrity & Availability.
   */
  VULNERABILITY = 2,
  /**
   * MISCONFIGURATION - Describes a potential weakness in cloud resource/asset configuration that
   * increases risk.
   */
  MISCONFIGURATION = 3,
  /** OBSERVATION - Describes a security observation that is for informational purposes. */
  OBSERVATION = 4,
  /** SCC_ERROR - Describes an error that prevents some SCC functionality. */
  SCC_ERROR = 5,
  /**
   * POSTURE_VIOLATION - Describes a potential security risk due to a change in the security
   * posture.
   */
  POSTURE_VIOLATION = 6,
  /**
   * TOXIC_COMBINATION - Describes a combination of security issues that represent a more severe
   * security problem when taken together.
   */
  TOXIC_COMBINATION = 7,
  UNRECOGNIZED = -1,
}

export function simulatedFinding_FindingClassFromJSON(object: any): SimulatedFinding_FindingClass {
  switch (object) {
    case 0:
    case "FINDING_CLASS_UNSPECIFIED":
      return SimulatedFinding_FindingClass.FINDING_CLASS_UNSPECIFIED;
    case 1:
    case "THREAT":
      return SimulatedFinding_FindingClass.THREAT;
    case 2:
    case "VULNERABILITY":
      return SimulatedFinding_FindingClass.VULNERABILITY;
    case 3:
    case "MISCONFIGURATION":
      return SimulatedFinding_FindingClass.MISCONFIGURATION;
    case 4:
    case "OBSERVATION":
      return SimulatedFinding_FindingClass.OBSERVATION;
    case 5:
    case "SCC_ERROR":
      return SimulatedFinding_FindingClass.SCC_ERROR;
    case 6:
    case "POSTURE_VIOLATION":
      return SimulatedFinding_FindingClass.POSTURE_VIOLATION;
    case 7:
    case "TOXIC_COMBINATION":
      return SimulatedFinding_FindingClass.TOXIC_COMBINATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SimulatedFinding_FindingClass.UNRECOGNIZED;
  }
}

export function simulatedFinding_FindingClassToJSON(object: SimulatedFinding_FindingClass): string {
  switch (object) {
    case SimulatedFinding_FindingClass.FINDING_CLASS_UNSPECIFIED:
      return "FINDING_CLASS_UNSPECIFIED";
    case SimulatedFinding_FindingClass.THREAT:
      return "THREAT";
    case SimulatedFinding_FindingClass.VULNERABILITY:
      return "VULNERABILITY";
    case SimulatedFinding_FindingClass.MISCONFIGURATION:
      return "MISCONFIGURATION";
    case SimulatedFinding_FindingClass.OBSERVATION:
      return "OBSERVATION";
    case SimulatedFinding_FindingClass.SCC_ERROR:
      return "SCC_ERROR";
    case SimulatedFinding_FindingClass.POSTURE_VIOLATION:
      return "POSTURE_VIOLATION";
    case SimulatedFinding_FindingClass.TOXIC_COMBINATION:
      return "TOXIC_COMBINATION";
    case SimulatedFinding_FindingClass.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SimulatedFinding_SourcePropertiesEntry {
  key: string;
  value: any | undefined;
}

/**
 * Response message for simulating a `SecurityHealthAnalyticsCustomModule`
 * against a given resource.
 */
export interface SimulateSecurityHealthAnalyticsCustomModuleResponse {
  /** Result for test case in the corresponding request. */
  result: SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult | undefined;
}

/** Possible test result. */
export interface SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult {
  /**
   * Finding that would be published for the test case,
   * if a violation is detected.
   */
  finding?:
    | SimulatedFinding
    | undefined;
  /** Indicates that the test case does not trigger any violation. */
  noViolation?:
    | Empty
    | undefined;
  /** Error encountered during the test. */
  error?: Status | undefined;
}

/**
 * An EffectiveEventThreatDetectionCustomModule is the representation of
 * EventThreatDetectionCustomModule at a given level taking hierarchy into
 * account and resolving various fields accordingly. e.g. if the module is
 * enabled at the ancestor level, effective modules at all descendant levels
 * will have enablement_state set to ENABLED. Similarly, if module.inherited is
 * set, then effective module's config will contain the ancestor's config
 * details. EffectiveEventThreatDetectionCustomModule is read-only.
 */
export interface EffectiveEventThreatDetectionCustomModule {
  /**
   * Identifier. The resource name of the ETD custom module.
   *
   * Its format is:
   *
   *   * `organizations/{organization}/locations/{location}/effectiveEventThreatDetectionCustomModules/{effective_event_threat_detection_custom_module}`.
   *   * `folders/{folder}/locations/{location}/effectiveEventThreatDetectionCustomModules/{effective_event_threat_detection_custom_module}`.
   *   * `projects/{project}/locations/{location}/effectiveEventThreatDetectionCustomModules/{effective_event_threat_detection_custom_module}`.
   */
  name: string;
  /** Output only. Config for the effective module. */
  config:
    | { [key: string]: any }
    | undefined;
  /**
   * Output only. The effective state of enablement for the module at the given
   * level of the hierarchy.
   */
  enablementState: EffectiveEventThreatDetectionCustomModule_EnablementState;
  /** Output only. Type for the module. e.g. CONFIGURABLE_BAD_IP. */
  type: string;
  /** Output only. The human readable name to be displayed for the module. */
  displayName: string;
  /** Output only. The description for the module. */
  description: string;
}

/** The enablement state of the module. */
export enum EffectiveEventThreatDetectionCustomModule_EnablementState {
  /** ENABLEMENT_STATE_UNSPECIFIED - Unspecified enablement state. */
  ENABLEMENT_STATE_UNSPECIFIED = 0,
  /** ENABLED - The module is enabled at the given level. */
  ENABLED = 1,
  /** DISABLED - The module is disabled at the given level. */
  DISABLED = 2,
  UNRECOGNIZED = -1,
}

export function effectiveEventThreatDetectionCustomModule_EnablementStateFromJSON(
  object: any,
): EffectiveEventThreatDetectionCustomModule_EnablementState {
  switch (object) {
    case 0:
    case "ENABLEMENT_STATE_UNSPECIFIED":
      return EffectiveEventThreatDetectionCustomModule_EnablementState.ENABLEMENT_STATE_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return EffectiveEventThreatDetectionCustomModule_EnablementState.ENABLED;
    case 2:
    case "DISABLED":
      return EffectiveEventThreatDetectionCustomModule_EnablementState.DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EffectiveEventThreatDetectionCustomModule_EnablementState.UNRECOGNIZED;
  }
}

export function effectiveEventThreatDetectionCustomModule_EnablementStateToJSON(
  object: EffectiveEventThreatDetectionCustomModule_EnablementState,
): string {
  switch (object) {
    case EffectiveEventThreatDetectionCustomModule_EnablementState.ENABLEMENT_STATE_UNSPECIFIED:
      return "ENABLEMENT_STATE_UNSPECIFIED";
    case EffectiveEventThreatDetectionCustomModule_EnablementState.ENABLED:
      return "ENABLED";
    case EffectiveEventThreatDetectionCustomModule_EnablementState.DISABLED:
      return "DISABLED";
    case EffectiveEventThreatDetectionCustomModule_EnablementState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Request message for listing effective Event Threat Detection custom
 * modules.
 */
export interface ListEffectiveEventThreatDetectionCustomModulesRequest {
  /**
   * Required. Name of parent to list effective custom modules. Its format is
   * `organizations/{organization}/locations/{location}`,
   * `folders/{folder}/locations/{location}`,
   * or
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The maximum number of results to return in a single response.
   * Default is 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
  /** Optional. The value returned by the last call indicating a continuation */
  pageToken: string;
}

/**
 * Response message for listing effective Event Threat Detection custom
 * modules.
 */
export interface ListEffectiveEventThreatDetectionCustomModulesResponse {
  /** The list of EffectiveEventThreatDetectionCustomModules */
  effectiveEventThreatDetectionCustomModules: EffectiveEventThreatDetectionCustomModule[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** Message for getting a EffectiveEventThreatDetectionCustomModule */
export interface GetEffectiveEventThreatDetectionCustomModuleRequest {
  /**
   * Required. The resource name of the ETD custom module.
   *
   * Its format is:
   *
   *   * `organizations/{organization}/locations/{location}/effectiveEventThreatDetectionCustomModules/{effective_event_threat_detection_custom_module}`.
   *   * `folders/{folder}/locations/{location}/effectiveEventThreatDetectionCustomModules/{effective_event_threat_detection_custom_module}`.
   *   * `projects/{project}/locations/{location}/effectiveEventThreatDetectionCustomModules/{effective_event_threat_detection_custom_module}`.
   */
  name: string;
}

/**
 * An event threat detection custom module is a Cloud SCC resource that contains
 * the configuration and enablement state of a custom module, which enables ETD
 * to write certain findings to Cloud SCC.
 */
export interface EventThreatDetectionCustomModule {
  /**
   * Identifier. The resource name of the ETD custom module.
   *
   * Its format is:
   *
   *   * `organizations/{organization}/locations/{location}/eventThreatDetectionCustomModules/{event_threat_detection_custom_module}`.
   *   * `folders/{folder}/locations/{location}/eventThreatDetectionCustomModules/{event_threat_detection_custom_module}`.
   *   * `projects/{project}/locations/{location}/eventThreatDetectionCustomModules/{event_threat_detection_custom_module}`.
   */
  name: string;
  /**
   * Optional. Config for the module. For the resident module, its config value
   * is defined at this level. For the inherited module, its config value is
   * inherited from the ancestor module.
   */
  config:
    | { [key: string]: any }
    | undefined;
  /**
   * Output only. The closest ancestor module that this module inherits the
   * enablement state from. If empty, indicates that the custom module was
   * created in the requesting parent organization, folder, or project. The
   * format is the same as the EventThreatDetectionCustomModule resource name.
   */
  ancestorModule: string;
  /**
   * Optional. The state of enablement for the module at the given level of the
   * hierarchy.
   */
  enablementState: EventThreatDetectionCustomModule_EnablementState;
  /** Optional. Type for the module. e.g. CONFIGURABLE_BAD_IP. */
  type: string;
  /** Optional. The human readable name to be displayed for the module. */
  displayName: string;
  /** Optional. The description for the module. */
  description: string;
  /** Output only. The time the module was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Output only. The editor the module was last updated by. */
  lastEditor: string;
}

/** The enablement state of the module. */
export enum EventThreatDetectionCustomModule_EnablementState {
  /** ENABLEMENT_STATE_UNSPECIFIED - Unspecified enablement state. */
  ENABLEMENT_STATE_UNSPECIFIED = 0,
  /** ENABLED - The module is enabled at the given level. */
  ENABLED = 1,
  /** DISABLED - The module is disabled at the given level. */
  DISABLED = 2,
  /**
   * INHERITED - State is inherited from an ancestor module. The module will either
   * be effectively ENABLED or DISABLED based on its closest non-inherited
   * ancestor module in the CRM hierarchy. Attempting to set a top level
   * module (module with no parent) to the INHERITED state will result in an
   * error.
   */
  INHERITED = 3,
  UNRECOGNIZED = -1,
}

export function eventThreatDetectionCustomModule_EnablementStateFromJSON(
  object: any,
): EventThreatDetectionCustomModule_EnablementState {
  switch (object) {
    case 0:
    case "ENABLEMENT_STATE_UNSPECIFIED":
      return EventThreatDetectionCustomModule_EnablementState.ENABLEMENT_STATE_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return EventThreatDetectionCustomModule_EnablementState.ENABLED;
    case 2:
    case "DISABLED":
      return EventThreatDetectionCustomModule_EnablementState.DISABLED;
    case 3:
    case "INHERITED":
      return EventThreatDetectionCustomModule_EnablementState.INHERITED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EventThreatDetectionCustomModule_EnablementState.UNRECOGNIZED;
  }
}

export function eventThreatDetectionCustomModule_EnablementStateToJSON(
  object: EventThreatDetectionCustomModule_EnablementState,
): string {
  switch (object) {
    case EventThreatDetectionCustomModule_EnablementState.ENABLEMENT_STATE_UNSPECIFIED:
      return "ENABLEMENT_STATE_UNSPECIFIED";
    case EventThreatDetectionCustomModule_EnablementState.ENABLED:
      return "ENABLED";
    case EventThreatDetectionCustomModule_EnablementState.DISABLED:
      return "DISABLED";
    case EventThreatDetectionCustomModule_EnablementState.INHERITED:
      return "INHERITED";
    case EventThreatDetectionCustomModule_EnablementState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for listing Event Threat Detection custom modules. */
export interface ListEventThreatDetectionCustomModulesRequest {
  /**
   * Required. Name of parent to list custom modules. Its format is
   * `organizations/{organization}/locations/{location}`,
   * `folders/{folder}/locations/{location}`,
   * or
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The maximum number of modules to return. The service may return
   * fewer than this value. If unspecified, at most 10 configs will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous
   * `ListEventThreatDetectionCustomModules` call. Provide this to retrieve the
   * subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListEventThreatDetectionCustomModules` must match the call that provided
   * the page token.
   */
  pageToken: string;
}

/** Response message for listing Event Threat Detection custom modules. */
export interface ListEventThreatDetectionCustomModulesResponse {
  /** The list of EventThreatDetectionCustomModules */
  eventThreatDetectionCustomModules: EventThreatDetectionCustomModule[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/**
 * Request message for listing descendant Event Threat Detection custom
 * modules.
 */
export interface ListDescendantEventThreatDetectionCustomModulesRequest {
  /**
   * Required. Name of parent to list custom modules. Its format is
   * `organizations/{organization}/locations/{location}`,
   * `folders/{folder}/locations/{location}`,
   * or
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The maximum number of modules to return. The service may return
   * fewer than this value. If unspecified, at most 10 configs will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/**
 * Response message for listing descendant Event Threat Detection custom
 * modules.
 */
export interface ListDescendantEventThreatDetectionCustomModulesResponse {
  /** The list of EventThreatDetectionCustomModules */
  eventThreatDetectionCustomModules: EventThreatDetectionCustomModule[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** Message for getting a EventThreatDetectionCustomModule */
export interface GetEventThreatDetectionCustomModuleRequest {
  /**
   * Required. The resource name of the ETD custom module.
   *
   * Its format is:
   *
   *   * `organizations/{organization}/locations/{location}/eventThreatDetectionCustomModules/{event_threat_detection_custom_module}`.
   *   * `folders/{folder}/locations/{location}/eventThreatDetectionCustomModules/{event_threat_detection_custom_module}`.
   *   * `projects/{project}/locations/{location}/eventThreatDetectionCustomModules/{event_threat_detection_custom_module}`.
   */
  name: string;
}

/** Message for creating a EventThreatDetectionCustomModule */
export interface CreateEventThreatDetectionCustomModuleRequest {
  /**
   * Required. Name of parent for the module. Its format is
   * `organizations/{organization}/locations/{location}`,
   * `folders/{folder}/locations/{location}`,
   * or
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Required. The module to create. The
   * event_threat_detection_custom_module.name will be ignored and server
   * generated.
   */
  eventThreatDetectionCustomModule:
    | EventThreatDetectionCustomModule
    | undefined;
  /**
   * Optional. When set to true, only validations (including IAM checks) will
   * done for the request (no module will be created). An OK response indicates
   * the request is valid while an error response indicates the request is
   * invalid. Note that a subsequent request to actually create the module could
   * still fail because 1. the state could have changed (e.g. IAM permission
   * lost) or
   * 2. A failure occurred during creation of the module.
   */
  validateOnly: boolean;
}

/** Message for updating a EventThreatDetectionCustomModule */
export interface UpdateEventThreatDetectionCustomModuleRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * EventThreatDetectionCustomModule resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The module being updated */
  eventThreatDetectionCustomModule:
    | EventThreatDetectionCustomModule
    | undefined;
  /**
   * Optional. When set to true, only validations (including IAM checks) will
   * done for the request (module will not be updated). An OK response indicates
   * the request is valid while an error response indicates the request is
   * invalid. Note that a subsequent request to actually update the module could
   * still fail because 1. the state could have changed (e.g. IAM permission
   * lost) or
   * 2. A failure occurred while trying to update the module.
   */
  validateOnly: boolean;
}

/** Message for deleting a EventThreatDetectionCustomModule */
export interface DeleteEventThreatDetectionCustomModuleRequest {
  /**
   * Required. The resource name of the ETD custom module.
   *
   * Its format is:
   *
   *   * `organizations/{organization}/locations/{location}/eventThreatDetectionCustomModules/{event_threat_detection_custom_module}`.
   *   * `folders/{folder}/locations/{location}/eventThreatDetectionCustomModules/{event_threat_detection_custom_module}`.
   *   * `projects/{project}/locations/{location}/eventThreatDetectionCustomModules/{event_threat_detection_custom_module}`.
   */
  name: string;
  /**
   * Optional. When set to true, only validations (including IAM checks) will
   * done for the request (module will not be deleted). An OK response indicates
   * the request is valid while an error response indicates the request is
   * invalid. Note that a subsequent request to actually delete the module could
   * still fail because 1. the state could have changed (e.g. IAM permission
   * lost) or
   * 2. A failure occurred while trying to delete the module.
   */
  validateOnly: boolean;
}

/** Request to validate an Event Threat Detection custom module. */
export interface ValidateEventThreatDetectionCustomModuleRequest {
  /**
   * Required. Resource name of the parent to validate the Custom Module under.
   *
   * Its format is:
   *
   *   * `organizations/{organization}/locations/{location}`.
   */
  parent: string;
  /**
   * Required. The raw text of the module's contents. Used to generate error
   * messages.
   */
  rawText: string;
  /** Required. The type of the module (e.g. CONFIGURABLE_BAD_IP). */
  type: string;
}

/** Response to validating an Event Threat Detection custom module. */
export interface ValidateEventThreatDetectionCustomModuleResponse {
  /**
   * A list of errors returned by the validator. If the list is empty, there
   * were no errors.
   */
  errors: ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError[];
}

/**
 * An error encountered while validating the uploaded configuration of an
 * Event Threat Detection Custom Module.
 */
export interface ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError {
  /** A description of the error, suitable for human consumption. Required. */
  description: string;
  /**
   * The path, in RFC 8901 JSON Pointer format, to the field that failed
   * validation. This may be left empty if no specific field is affected.
   */
  fieldPath: string;
  /**
   * The initial position of the error in the uploaded text version of the
   * module. This field may be omitted if no specific position applies, or if
   * one could not be computed.
   */
  start?:
    | ValidateEventThreatDetectionCustomModuleResponse_Position
    | undefined;
  /**
   * The end position of the error in the uploaded text version of the
   * module. This field may be omitted if no specific position applies, or if
   * one could not be computed..
   */
  end?: ValidateEventThreatDetectionCustomModuleResponse_Position | undefined;
}

/** A position in the uploaded text version of a module. */
export interface ValidateEventThreatDetectionCustomModuleResponse_Position {
  /** The line position in the text */
  lineNumber: number;
  /** The column position in the line */
  columnNumber: number;
}

/** Request message for getting a Security Command Center service. */
export interface GetSecurityCenterServiceRequest {
  /**
   * Required. The Security Command Center service to retrieve.
   *
   * Formats:
   *
   *   * organizations/{organization}/locations/{location}/securityCenterServices/{service}
   *   * folders/{folder}/locations/{location}/securityCenterServices/{service}
   *   * projects/{project}/locations/{location}/securityCenterServices/{service}
   *
   * The possible values for id {service} are:
   *
   *   * container-threat-detection
   *   * event-threat-detection
   *   * security-health-analytics
   *   * vm-threat-detection
   *   * web-security-scanner
   */
  name: string;
  /**
   * Flag that, when set, will be used to filter the ModuleSettings that are
   * in scope. The default setting is that all modules will be shown.
   */
  showEligibleModulesOnly: boolean;
}

/** Request message for listing Security Command Center services. */
export interface ListSecurityCenterServicesRequest {
  /**
   * Required. The name of the parent to list Security Command Center services.
   *
   * Formats:
   *
   *   * organizations/{organization}/locations/{location}
   *   * folders/{folder}/locations/{location}
   *   * projects/{project}/locations/{location}
   */
  parent: string;
  /**
   * Optional. The maximum number of results to return in a single response.
   * Default is 10, minimum is 1, maximum is 1000.
   */
  pageSize: number;
  /** Optional. The value returned by the last call indicating a continuation. */
  pageToken: string;
  /**
   * Flag that, when set, will be used to filter the ModuleSettings that are
   * in scope. The default setting is that all modules will be shown.
   */
  showEligibleModulesOnly: boolean;
}

/** Response message for listing Security Command Center services. */
export interface ListSecurityCenterServicesResponse {
  /** The list of services. */
  securityCenterServices: SecurityCenterService[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** Request message for updating a Security Command Center service. */
export interface UpdateSecurityCenterServiceRequest {
  /** Required. The updated service. */
  securityCenterService:
    | SecurityCenterService
    | undefined;
  /**
   * Required. The list of fields to be updated. Possible values:
   *
   *   * "intended_enablement_state"
   *   * "modules"
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. When set to true, only validations (including IAM checks) will be
   * done for the request (service will not be updated). An OK response
   * indicates that the request is valid, while an error response indicates that
   * the request is invalid. Note that a subsequent request to actually update
   * the service could still fail for one of the following reasons:
   * - The state could have changed (e.g. IAM permission lost).
   * - A failure occurred while trying to delete the module.
   */
  validateOnly: boolean;
}

function createBaseSecurityCenterService(): SecurityCenterService {
  return {
    name: "",
    intendedEnablementState: 0,
    effectiveEnablementState: 0,
    modules: {},
    updateTime: undefined,
    serviceConfig: undefined,
  };
}

export const SecurityCenterService: MessageFns<SecurityCenterService> = {
  encode(message: SecurityCenterService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.intendedEnablementState !== 0) {
      writer.uint32(16).int32(message.intendedEnablementState);
    }
    if (message.effectiveEnablementState !== 0) {
      writer.uint32(24).int32(message.effectiveEnablementState);
    }
    Object.entries(message.modules).forEach(([key, value]) => {
      SecurityCenterService_ModulesEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.serviceConfig !== undefined) {
      Struct.encode(Struct.wrap(message.serviceConfig), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityCenterService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityCenterService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.intendedEnablementState = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.effectiveEnablementState = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = SecurityCenterService_ModulesEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.modules[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.serviceConfig = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityCenterService {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      intendedEnablementState: isSet(object.intendedEnablementState)
        ? securityCenterService_EnablementStateFromJSON(object.intendedEnablementState)
        : 0,
      effectiveEnablementState: isSet(object.effectiveEnablementState)
        ? securityCenterService_EnablementStateFromJSON(object.effectiveEnablementState)
        : 0,
      modules: isObject(object.modules)
        ? Object.entries(object.modules).reduce<{ [key: string]: SecurityCenterService_ModuleSettings }>(
          (acc, [key, value]) => {
            acc[key] = SecurityCenterService_ModuleSettings.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      serviceConfig: isObject(object.serviceConfig) ? object.serviceConfig : undefined,
    };
  },

  toJSON(message: SecurityCenterService): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.intendedEnablementState !== 0) {
      obj.intendedEnablementState = securityCenterService_EnablementStateToJSON(message.intendedEnablementState);
    }
    if (message.effectiveEnablementState !== 0) {
      obj.effectiveEnablementState = securityCenterService_EnablementStateToJSON(message.effectiveEnablementState);
    }
    if (message.modules) {
      const entries = Object.entries(message.modules);
      if (entries.length > 0) {
        obj.modules = {};
        entries.forEach(([k, v]) => {
          obj.modules[k] = SecurityCenterService_ModuleSettings.toJSON(v);
        });
      }
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.serviceConfig !== undefined) {
      obj.serviceConfig = message.serviceConfig;
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityCenterService>): SecurityCenterService {
    return SecurityCenterService.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityCenterService>): SecurityCenterService {
    const message = createBaseSecurityCenterService();
    message.name = object.name ?? "";
    message.intendedEnablementState = object.intendedEnablementState ?? 0;
    message.effectiveEnablementState = object.effectiveEnablementState ?? 0;
    message.modules = Object.entries(object.modules ?? {}).reduce<
      { [key: string]: SecurityCenterService_ModuleSettings }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = SecurityCenterService_ModuleSettings.fromPartial(value);
      }
      return acc;
    }, {});
    message.updateTime = object.updateTime ?? undefined;
    message.serviceConfig = object.serviceConfig ?? undefined;
    return message;
  },
};

function createBaseSecurityCenterService_ModuleSettings(): SecurityCenterService_ModuleSettings {
  return { intendedEnablementState: 0, effectiveEnablementState: 0 };
}

export const SecurityCenterService_ModuleSettings: MessageFns<SecurityCenterService_ModuleSettings> = {
  encode(message: SecurityCenterService_ModuleSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.intendedEnablementState !== 0) {
      writer.uint32(8).int32(message.intendedEnablementState);
    }
    if (message.effectiveEnablementState !== 0) {
      writer.uint32(16).int32(message.effectiveEnablementState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityCenterService_ModuleSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityCenterService_ModuleSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.intendedEnablementState = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.effectiveEnablementState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityCenterService_ModuleSettings {
    return {
      intendedEnablementState: isSet(object.intendedEnablementState)
        ? securityCenterService_EnablementStateFromJSON(object.intendedEnablementState)
        : 0,
      effectiveEnablementState: isSet(object.effectiveEnablementState)
        ? securityCenterService_EnablementStateFromJSON(object.effectiveEnablementState)
        : 0,
    };
  },

  toJSON(message: SecurityCenterService_ModuleSettings): unknown {
    const obj: any = {};
    if (message.intendedEnablementState !== 0) {
      obj.intendedEnablementState = securityCenterService_EnablementStateToJSON(message.intendedEnablementState);
    }
    if (message.effectiveEnablementState !== 0) {
      obj.effectiveEnablementState = securityCenterService_EnablementStateToJSON(message.effectiveEnablementState);
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityCenterService_ModuleSettings>): SecurityCenterService_ModuleSettings {
    return SecurityCenterService_ModuleSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityCenterService_ModuleSettings>): SecurityCenterService_ModuleSettings {
    const message = createBaseSecurityCenterService_ModuleSettings();
    message.intendedEnablementState = object.intendedEnablementState ?? 0;
    message.effectiveEnablementState = object.effectiveEnablementState ?? 0;
    return message;
  },
};

function createBaseSecurityCenterService_ModulesEntry(): SecurityCenterService_ModulesEntry {
  return { key: "", value: undefined };
}

export const SecurityCenterService_ModulesEntry: MessageFns<SecurityCenterService_ModulesEntry> = {
  encode(message: SecurityCenterService_ModulesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SecurityCenterService_ModuleSettings.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityCenterService_ModulesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityCenterService_ModulesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = SecurityCenterService_ModuleSettings.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityCenterService_ModulesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? SecurityCenterService_ModuleSettings.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SecurityCenterService_ModulesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = SecurityCenterService_ModuleSettings.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityCenterService_ModulesEntry>): SecurityCenterService_ModulesEntry {
    return SecurityCenterService_ModulesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityCenterService_ModulesEntry>): SecurityCenterService_ModulesEntry {
    const message = createBaseSecurityCenterService_ModulesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SecurityCenterService_ModuleSettings.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseEffectiveSecurityHealthAnalyticsCustomModule(): EffectiveSecurityHealthAnalyticsCustomModule {
  return { name: "", customConfig: undefined, enablementState: 0, displayName: "" };
}

export const EffectiveSecurityHealthAnalyticsCustomModule: MessageFns<EffectiveSecurityHealthAnalyticsCustomModule> = {
  encode(
    message: EffectiveSecurityHealthAnalyticsCustomModule,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.customConfig !== undefined) {
      CustomConfig.encode(message.customConfig, writer.uint32(18).fork()).join();
    }
    if (message.enablementState !== 0) {
      writer.uint32(24).int32(message.enablementState);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EffectiveSecurityHealthAnalyticsCustomModule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEffectiveSecurityHealthAnalyticsCustomModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customConfig = CustomConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enablementState = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EffectiveSecurityHealthAnalyticsCustomModule {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      customConfig: isSet(object.customConfig) ? CustomConfig.fromJSON(object.customConfig) : undefined,
      enablementState: isSet(object.enablementState)
        ? effectiveSecurityHealthAnalyticsCustomModule_EnablementStateFromJSON(object.enablementState)
        : 0,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: EffectiveSecurityHealthAnalyticsCustomModule): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.customConfig !== undefined) {
      obj.customConfig = CustomConfig.toJSON(message.customConfig);
    }
    if (message.enablementState !== 0) {
      obj.enablementState = effectiveSecurityHealthAnalyticsCustomModule_EnablementStateToJSON(message.enablementState);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(
    base?: DeepPartial<EffectiveSecurityHealthAnalyticsCustomModule>,
  ): EffectiveSecurityHealthAnalyticsCustomModule {
    return EffectiveSecurityHealthAnalyticsCustomModule.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<EffectiveSecurityHealthAnalyticsCustomModule>,
  ): EffectiveSecurityHealthAnalyticsCustomModule {
    const message = createBaseEffectiveSecurityHealthAnalyticsCustomModule();
    message.name = object.name ?? "";
    message.customConfig = (object.customConfig !== undefined && object.customConfig !== null)
      ? CustomConfig.fromPartial(object.customConfig)
      : undefined;
    message.enablementState = object.enablementState ?? 0;
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseListEffectiveSecurityHealthAnalyticsCustomModulesRequest(): ListEffectiveSecurityHealthAnalyticsCustomModulesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEffectiveSecurityHealthAnalyticsCustomModulesRequest: MessageFns<
  ListEffectiveSecurityHealthAnalyticsCustomModulesRequest
> = {
  encode(
    message: ListEffectiveSecurityHealthAnalyticsCustomModulesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEffectiveSecurityHealthAnalyticsCustomModulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEffectiveSecurityHealthAnalyticsCustomModulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEffectiveSecurityHealthAnalyticsCustomModulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEffectiveSecurityHealthAnalyticsCustomModulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListEffectiveSecurityHealthAnalyticsCustomModulesRequest>,
  ): ListEffectiveSecurityHealthAnalyticsCustomModulesRequest {
    return ListEffectiveSecurityHealthAnalyticsCustomModulesRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListEffectiveSecurityHealthAnalyticsCustomModulesRequest>,
  ): ListEffectiveSecurityHealthAnalyticsCustomModulesRequest {
    const message = createBaseListEffectiveSecurityHealthAnalyticsCustomModulesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEffectiveSecurityHealthAnalyticsCustomModulesResponse(): ListEffectiveSecurityHealthAnalyticsCustomModulesResponse {
  return { effectiveSecurityHealthAnalyticsCustomModules: [], nextPageToken: "" };
}

export const ListEffectiveSecurityHealthAnalyticsCustomModulesResponse: MessageFns<
  ListEffectiveSecurityHealthAnalyticsCustomModulesResponse
> = {
  encode(
    message: ListEffectiveSecurityHealthAnalyticsCustomModulesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.effectiveSecurityHealthAnalyticsCustomModules) {
      EffectiveSecurityHealthAnalyticsCustomModule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEffectiveSecurityHealthAnalyticsCustomModulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEffectiveSecurityHealthAnalyticsCustomModulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.effectiveSecurityHealthAnalyticsCustomModules.push(
            EffectiveSecurityHealthAnalyticsCustomModule.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEffectiveSecurityHealthAnalyticsCustomModulesResponse {
    return {
      effectiveSecurityHealthAnalyticsCustomModules:
        globalThis.Array.isArray(object?.effectiveSecurityHealthAnalyticsCustomModules)
          ? object.effectiveSecurityHealthAnalyticsCustomModules.map((e: any) =>
            EffectiveSecurityHealthAnalyticsCustomModule.fromJSON(e)
          )
          : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEffectiveSecurityHealthAnalyticsCustomModulesResponse): unknown {
    const obj: any = {};
    if (message.effectiveSecurityHealthAnalyticsCustomModules?.length) {
      obj.effectiveSecurityHealthAnalyticsCustomModules = message.effectiveSecurityHealthAnalyticsCustomModules.map(
        (e) => EffectiveSecurityHealthAnalyticsCustomModule.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListEffectiveSecurityHealthAnalyticsCustomModulesResponse>,
  ): ListEffectiveSecurityHealthAnalyticsCustomModulesResponse {
    return ListEffectiveSecurityHealthAnalyticsCustomModulesResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListEffectiveSecurityHealthAnalyticsCustomModulesResponse>,
  ): ListEffectiveSecurityHealthAnalyticsCustomModulesResponse {
    const message = createBaseListEffectiveSecurityHealthAnalyticsCustomModulesResponse();
    message.effectiveSecurityHealthAnalyticsCustomModules =
      object.effectiveSecurityHealthAnalyticsCustomModules?.map((e) =>
        EffectiveSecurityHealthAnalyticsCustomModule.fromPartial(e)
      ) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetEffectiveSecurityHealthAnalyticsCustomModuleRequest(): GetEffectiveSecurityHealthAnalyticsCustomModuleRequest {
  return { name: "" };
}

export const GetEffectiveSecurityHealthAnalyticsCustomModuleRequest: MessageFns<
  GetEffectiveSecurityHealthAnalyticsCustomModuleRequest
> = {
  encode(
    message: GetEffectiveSecurityHealthAnalyticsCustomModuleRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEffectiveSecurityHealthAnalyticsCustomModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEffectiveSecurityHealthAnalyticsCustomModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEffectiveSecurityHealthAnalyticsCustomModuleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEffectiveSecurityHealthAnalyticsCustomModuleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(
    base?: DeepPartial<GetEffectiveSecurityHealthAnalyticsCustomModuleRequest>,
  ): GetEffectiveSecurityHealthAnalyticsCustomModuleRequest {
    return GetEffectiveSecurityHealthAnalyticsCustomModuleRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetEffectiveSecurityHealthAnalyticsCustomModuleRequest>,
  ): GetEffectiveSecurityHealthAnalyticsCustomModuleRequest {
    const message = createBaseGetEffectiveSecurityHealthAnalyticsCustomModuleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSecurityHealthAnalyticsCustomModule(): SecurityHealthAnalyticsCustomModule {
  return {
    name: "",
    displayName: "",
    enablementState: 0,
    updateTime: undefined,
    lastEditor: "",
    ancestorModule: "",
    customConfig: undefined,
  };
}

export const SecurityHealthAnalyticsCustomModule: MessageFns<SecurityHealthAnalyticsCustomModule> = {
  encode(message: SecurityHealthAnalyticsCustomModule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.enablementState !== 0) {
      writer.uint32(24).int32(message.enablementState);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.lastEditor !== "") {
      writer.uint32(42).string(message.lastEditor);
    }
    if (message.ancestorModule !== "") {
      writer.uint32(50).string(message.ancestorModule);
    }
    if (message.customConfig !== undefined) {
      CustomConfig.encode(message.customConfig, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityHealthAnalyticsCustomModule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityHealthAnalyticsCustomModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enablementState = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lastEditor = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ancestorModule = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.customConfig = CustomConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityHealthAnalyticsCustomModule {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      enablementState: isSet(object.enablementState)
        ? securityHealthAnalyticsCustomModule_EnablementStateFromJSON(object.enablementState)
        : 0,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      lastEditor: isSet(object.lastEditor) ? globalThis.String(object.lastEditor) : "",
      ancestorModule: isSet(object.ancestorModule) ? globalThis.String(object.ancestorModule) : "",
      customConfig: isSet(object.customConfig) ? CustomConfig.fromJSON(object.customConfig) : undefined,
    };
  },

  toJSON(message: SecurityHealthAnalyticsCustomModule): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.enablementState !== 0) {
      obj.enablementState = securityHealthAnalyticsCustomModule_EnablementStateToJSON(message.enablementState);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.lastEditor !== "") {
      obj.lastEditor = message.lastEditor;
    }
    if (message.ancestorModule !== "") {
      obj.ancestorModule = message.ancestorModule;
    }
    if (message.customConfig !== undefined) {
      obj.customConfig = CustomConfig.toJSON(message.customConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityHealthAnalyticsCustomModule>): SecurityHealthAnalyticsCustomModule {
    return SecurityHealthAnalyticsCustomModule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityHealthAnalyticsCustomModule>): SecurityHealthAnalyticsCustomModule {
    const message = createBaseSecurityHealthAnalyticsCustomModule();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.enablementState = object.enablementState ?? 0;
    message.updateTime = object.updateTime ?? undefined;
    message.lastEditor = object.lastEditor ?? "";
    message.ancestorModule = object.ancestorModule ?? "";
    message.customConfig = (object.customConfig !== undefined && object.customConfig !== null)
      ? CustomConfig.fromPartial(object.customConfig)
      : undefined;
    return message;
  },
};

function createBaseCustomConfig(): CustomConfig {
  return {
    predicate: undefined,
    customOutput: undefined,
    resourceSelector: undefined,
    severity: 0,
    description: "",
    recommendation: "",
  };
}

export const CustomConfig: MessageFns<CustomConfig> = {
  encode(message: CustomConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.predicate !== undefined) {
      Expr.encode(message.predicate, writer.uint32(10).fork()).join();
    }
    if (message.customOutput !== undefined) {
      CustomConfig_CustomOutputSpec.encode(message.customOutput, writer.uint32(18).fork()).join();
    }
    if (message.resourceSelector !== undefined) {
      CustomConfig_ResourceSelector.encode(message.resourceSelector, writer.uint32(26).fork()).join();
    }
    if (message.severity !== 0) {
      writer.uint32(32).int32(message.severity);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.recommendation !== "") {
      writer.uint32(50).string(message.recommendation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.predicate = Expr.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customOutput = CustomConfig_CustomOutputSpec.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourceSelector = CustomConfig_ResourceSelector.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.recommendation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomConfig {
    return {
      predicate: isSet(object.predicate) ? Expr.fromJSON(object.predicate) : undefined,
      customOutput: isSet(object.customOutput)
        ? CustomConfig_CustomOutputSpec.fromJSON(object.customOutput)
        : undefined,
      resourceSelector: isSet(object.resourceSelector)
        ? CustomConfig_ResourceSelector.fromJSON(object.resourceSelector)
        : undefined,
      severity: isSet(object.severity) ? customConfig_SeverityFromJSON(object.severity) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      recommendation: isSet(object.recommendation) ? globalThis.String(object.recommendation) : "",
    };
  },

  toJSON(message: CustomConfig): unknown {
    const obj: any = {};
    if (message.predicate !== undefined) {
      obj.predicate = Expr.toJSON(message.predicate);
    }
    if (message.customOutput !== undefined) {
      obj.customOutput = CustomConfig_CustomOutputSpec.toJSON(message.customOutput);
    }
    if (message.resourceSelector !== undefined) {
      obj.resourceSelector = CustomConfig_ResourceSelector.toJSON(message.resourceSelector);
    }
    if (message.severity !== 0) {
      obj.severity = customConfig_SeverityToJSON(message.severity);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.recommendation !== "") {
      obj.recommendation = message.recommendation;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomConfig>): CustomConfig {
    return CustomConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomConfig>): CustomConfig {
    const message = createBaseCustomConfig();
    message.predicate = (object.predicate !== undefined && object.predicate !== null)
      ? Expr.fromPartial(object.predicate)
      : undefined;
    message.customOutput = (object.customOutput !== undefined && object.customOutput !== null)
      ? CustomConfig_CustomOutputSpec.fromPartial(object.customOutput)
      : undefined;
    message.resourceSelector = (object.resourceSelector !== undefined && object.resourceSelector !== null)
      ? CustomConfig_ResourceSelector.fromPartial(object.resourceSelector)
      : undefined;
    message.severity = object.severity ?? 0;
    message.description = object.description ?? "";
    message.recommendation = object.recommendation ?? "";
    return message;
  },
};

function createBaseCustomConfig_CustomOutputSpec(): CustomConfig_CustomOutputSpec {
  return { properties: [] };
}

export const CustomConfig_CustomOutputSpec: MessageFns<CustomConfig_CustomOutputSpec> = {
  encode(message: CustomConfig_CustomOutputSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.properties) {
      CustomConfig_CustomOutputSpec_Property.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomConfig_CustomOutputSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomConfig_CustomOutputSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.properties.push(CustomConfig_CustomOutputSpec_Property.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomConfig_CustomOutputSpec {
    return {
      properties: globalThis.Array.isArray(object?.properties)
        ? object.properties.map((e: any) => CustomConfig_CustomOutputSpec_Property.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CustomConfig_CustomOutputSpec): unknown {
    const obj: any = {};
    if (message.properties?.length) {
      obj.properties = message.properties.map((e) => CustomConfig_CustomOutputSpec_Property.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CustomConfig_CustomOutputSpec>): CustomConfig_CustomOutputSpec {
    return CustomConfig_CustomOutputSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomConfig_CustomOutputSpec>): CustomConfig_CustomOutputSpec {
    const message = createBaseCustomConfig_CustomOutputSpec();
    message.properties = object.properties?.map((e) => CustomConfig_CustomOutputSpec_Property.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCustomConfig_CustomOutputSpec_Property(): CustomConfig_CustomOutputSpec_Property {
  return { name: "", valueExpression: undefined };
}

export const CustomConfig_CustomOutputSpec_Property: MessageFns<CustomConfig_CustomOutputSpec_Property> = {
  encode(message: CustomConfig_CustomOutputSpec_Property, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.valueExpression !== undefined) {
      Expr.encode(message.valueExpression, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomConfig_CustomOutputSpec_Property {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomConfig_CustomOutputSpec_Property();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.valueExpression = Expr.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomConfig_CustomOutputSpec_Property {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      valueExpression: isSet(object.valueExpression) ? Expr.fromJSON(object.valueExpression) : undefined,
    };
  },

  toJSON(message: CustomConfig_CustomOutputSpec_Property): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.valueExpression !== undefined) {
      obj.valueExpression = Expr.toJSON(message.valueExpression);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomConfig_CustomOutputSpec_Property>): CustomConfig_CustomOutputSpec_Property {
    return CustomConfig_CustomOutputSpec_Property.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomConfig_CustomOutputSpec_Property>): CustomConfig_CustomOutputSpec_Property {
    const message = createBaseCustomConfig_CustomOutputSpec_Property();
    message.name = object.name ?? "";
    message.valueExpression = (object.valueExpression !== undefined && object.valueExpression !== null)
      ? Expr.fromPartial(object.valueExpression)
      : undefined;
    return message;
  },
};

function createBaseCustomConfig_ResourceSelector(): CustomConfig_ResourceSelector {
  return { resourceTypes: [] };
}

export const CustomConfig_ResourceSelector: MessageFns<CustomConfig_ResourceSelector> = {
  encode(message: CustomConfig_ResourceSelector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resourceTypes) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomConfig_ResourceSelector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomConfig_ResourceSelector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceTypes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomConfig_ResourceSelector {
    return {
      resourceTypes: globalThis.Array.isArray(object?.resourceTypes)
        ? object.resourceTypes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CustomConfig_ResourceSelector): unknown {
    const obj: any = {};
    if (message.resourceTypes?.length) {
      obj.resourceTypes = message.resourceTypes;
    }
    return obj;
  },

  create(base?: DeepPartial<CustomConfig_ResourceSelector>): CustomConfig_ResourceSelector {
    return CustomConfig_ResourceSelector.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomConfig_ResourceSelector>): CustomConfig_ResourceSelector {
    const message = createBaseCustomConfig_ResourceSelector();
    message.resourceTypes = object.resourceTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseListSecurityHealthAnalyticsCustomModulesRequest(): ListSecurityHealthAnalyticsCustomModulesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListSecurityHealthAnalyticsCustomModulesRequest: MessageFns<
  ListSecurityHealthAnalyticsCustomModulesRequest
> = {
  encode(
    message: ListSecurityHealthAnalyticsCustomModulesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecurityHealthAnalyticsCustomModulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecurityHealthAnalyticsCustomModulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecurityHealthAnalyticsCustomModulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSecurityHealthAnalyticsCustomModulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListSecurityHealthAnalyticsCustomModulesRequest>,
  ): ListSecurityHealthAnalyticsCustomModulesRequest {
    return ListSecurityHealthAnalyticsCustomModulesRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListSecurityHealthAnalyticsCustomModulesRequest>,
  ): ListSecurityHealthAnalyticsCustomModulesRequest {
    const message = createBaseListSecurityHealthAnalyticsCustomModulesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSecurityHealthAnalyticsCustomModulesResponse(): ListSecurityHealthAnalyticsCustomModulesResponse {
  return { securityHealthAnalyticsCustomModules: [], nextPageToken: "" };
}

export const ListSecurityHealthAnalyticsCustomModulesResponse: MessageFns<
  ListSecurityHealthAnalyticsCustomModulesResponse
> = {
  encode(
    message: ListSecurityHealthAnalyticsCustomModulesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.securityHealthAnalyticsCustomModules) {
      SecurityHealthAnalyticsCustomModule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecurityHealthAnalyticsCustomModulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecurityHealthAnalyticsCustomModulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.securityHealthAnalyticsCustomModules.push(
            SecurityHealthAnalyticsCustomModule.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecurityHealthAnalyticsCustomModulesResponse {
    return {
      securityHealthAnalyticsCustomModules: globalThis.Array.isArray(object?.securityHealthAnalyticsCustomModules)
        ? object.securityHealthAnalyticsCustomModules.map((e: any) => SecurityHealthAnalyticsCustomModule.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSecurityHealthAnalyticsCustomModulesResponse): unknown {
    const obj: any = {};
    if (message.securityHealthAnalyticsCustomModules?.length) {
      obj.securityHealthAnalyticsCustomModules = message.securityHealthAnalyticsCustomModules.map((e) =>
        SecurityHealthAnalyticsCustomModule.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListSecurityHealthAnalyticsCustomModulesResponse>,
  ): ListSecurityHealthAnalyticsCustomModulesResponse {
    return ListSecurityHealthAnalyticsCustomModulesResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListSecurityHealthAnalyticsCustomModulesResponse>,
  ): ListSecurityHealthAnalyticsCustomModulesResponse {
    const message = createBaseListSecurityHealthAnalyticsCustomModulesResponse();
    message.securityHealthAnalyticsCustomModules =
      object.securityHealthAnalyticsCustomModules?.map((e) => SecurityHealthAnalyticsCustomModule.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListDescendantSecurityHealthAnalyticsCustomModulesRequest(): ListDescendantSecurityHealthAnalyticsCustomModulesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDescendantSecurityHealthAnalyticsCustomModulesRequest: MessageFns<
  ListDescendantSecurityHealthAnalyticsCustomModulesRequest
> = {
  encode(
    message: ListDescendantSecurityHealthAnalyticsCustomModulesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDescendantSecurityHealthAnalyticsCustomModulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDescendantSecurityHealthAnalyticsCustomModulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDescendantSecurityHealthAnalyticsCustomModulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDescendantSecurityHealthAnalyticsCustomModulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListDescendantSecurityHealthAnalyticsCustomModulesRequest>,
  ): ListDescendantSecurityHealthAnalyticsCustomModulesRequest {
    return ListDescendantSecurityHealthAnalyticsCustomModulesRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListDescendantSecurityHealthAnalyticsCustomModulesRequest>,
  ): ListDescendantSecurityHealthAnalyticsCustomModulesRequest {
    const message = createBaseListDescendantSecurityHealthAnalyticsCustomModulesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDescendantSecurityHealthAnalyticsCustomModulesResponse(): ListDescendantSecurityHealthAnalyticsCustomModulesResponse {
  return { securityHealthAnalyticsCustomModules: [], nextPageToken: "" };
}

export const ListDescendantSecurityHealthAnalyticsCustomModulesResponse: MessageFns<
  ListDescendantSecurityHealthAnalyticsCustomModulesResponse
> = {
  encode(
    message: ListDescendantSecurityHealthAnalyticsCustomModulesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.securityHealthAnalyticsCustomModules) {
      SecurityHealthAnalyticsCustomModule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ListDescendantSecurityHealthAnalyticsCustomModulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDescendantSecurityHealthAnalyticsCustomModulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.securityHealthAnalyticsCustomModules.push(
            SecurityHealthAnalyticsCustomModule.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDescendantSecurityHealthAnalyticsCustomModulesResponse {
    return {
      securityHealthAnalyticsCustomModules: globalThis.Array.isArray(object?.securityHealthAnalyticsCustomModules)
        ? object.securityHealthAnalyticsCustomModules.map((e: any) => SecurityHealthAnalyticsCustomModule.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDescendantSecurityHealthAnalyticsCustomModulesResponse): unknown {
    const obj: any = {};
    if (message.securityHealthAnalyticsCustomModules?.length) {
      obj.securityHealthAnalyticsCustomModules = message.securityHealthAnalyticsCustomModules.map((e) =>
        SecurityHealthAnalyticsCustomModule.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListDescendantSecurityHealthAnalyticsCustomModulesResponse>,
  ): ListDescendantSecurityHealthAnalyticsCustomModulesResponse {
    return ListDescendantSecurityHealthAnalyticsCustomModulesResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListDescendantSecurityHealthAnalyticsCustomModulesResponse>,
  ): ListDescendantSecurityHealthAnalyticsCustomModulesResponse {
    const message = createBaseListDescendantSecurityHealthAnalyticsCustomModulesResponse();
    message.securityHealthAnalyticsCustomModules =
      object.securityHealthAnalyticsCustomModules?.map((e) => SecurityHealthAnalyticsCustomModule.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetSecurityHealthAnalyticsCustomModuleRequest(): GetSecurityHealthAnalyticsCustomModuleRequest {
  return { name: "" };
}

export const GetSecurityHealthAnalyticsCustomModuleRequest: MessageFns<GetSecurityHealthAnalyticsCustomModuleRequest> =
  {
    encode(
      message: GetSecurityHealthAnalyticsCustomModuleRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.name !== "") {
        writer.uint32(10).string(message.name);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): GetSecurityHealthAnalyticsCustomModuleRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetSecurityHealthAnalyticsCustomModuleRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.name = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): GetSecurityHealthAnalyticsCustomModuleRequest {
      return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },

    toJSON(message: GetSecurityHealthAnalyticsCustomModuleRequest): unknown {
      const obj: any = {};
      if (message.name !== "") {
        obj.name = message.name;
      }
      return obj;
    },

    create(
      base?: DeepPartial<GetSecurityHealthAnalyticsCustomModuleRequest>,
    ): GetSecurityHealthAnalyticsCustomModuleRequest {
      return GetSecurityHealthAnalyticsCustomModuleRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<GetSecurityHealthAnalyticsCustomModuleRequest>,
    ): GetSecurityHealthAnalyticsCustomModuleRequest {
      const message = createBaseGetSecurityHealthAnalyticsCustomModuleRequest();
      message.name = object.name ?? "";
      return message;
    },
  };

function createBaseCreateSecurityHealthAnalyticsCustomModuleRequest(): CreateSecurityHealthAnalyticsCustomModuleRequest {
  return { parent: "", securityHealthAnalyticsCustomModule: undefined, validateOnly: false };
}

export const CreateSecurityHealthAnalyticsCustomModuleRequest: MessageFns<
  CreateSecurityHealthAnalyticsCustomModuleRequest
> = {
  encode(
    message: CreateSecurityHealthAnalyticsCustomModuleRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.securityHealthAnalyticsCustomModule !== undefined) {
      SecurityHealthAnalyticsCustomModule.encode(message.securityHealthAnalyticsCustomModule, writer.uint32(18).fork())
        .join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSecurityHealthAnalyticsCustomModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSecurityHealthAnalyticsCustomModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.securityHealthAnalyticsCustomModule = SecurityHealthAnalyticsCustomModule.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSecurityHealthAnalyticsCustomModuleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      securityHealthAnalyticsCustomModule: isSet(object.securityHealthAnalyticsCustomModule)
        ? SecurityHealthAnalyticsCustomModule.fromJSON(object.securityHealthAnalyticsCustomModule)
        : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateSecurityHealthAnalyticsCustomModuleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.securityHealthAnalyticsCustomModule !== undefined) {
      obj.securityHealthAnalyticsCustomModule = SecurityHealthAnalyticsCustomModule.toJSON(
        message.securityHealthAnalyticsCustomModule,
      );
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(
    base?: DeepPartial<CreateSecurityHealthAnalyticsCustomModuleRequest>,
  ): CreateSecurityHealthAnalyticsCustomModuleRequest {
    return CreateSecurityHealthAnalyticsCustomModuleRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreateSecurityHealthAnalyticsCustomModuleRequest>,
  ): CreateSecurityHealthAnalyticsCustomModuleRequest {
    const message = createBaseCreateSecurityHealthAnalyticsCustomModuleRequest();
    message.parent = object.parent ?? "";
    message.securityHealthAnalyticsCustomModule =
      (object.securityHealthAnalyticsCustomModule !== undefined && object.securityHealthAnalyticsCustomModule !== null)
        ? SecurityHealthAnalyticsCustomModule.fromPartial(object.securityHealthAnalyticsCustomModule)
        : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateSecurityHealthAnalyticsCustomModuleRequest(): UpdateSecurityHealthAnalyticsCustomModuleRequest {
  return { updateMask: undefined, securityHealthAnalyticsCustomModule: undefined, validateOnly: false };
}

export const UpdateSecurityHealthAnalyticsCustomModuleRequest: MessageFns<
  UpdateSecurityHealthAnalyticsCustomModuleRequest
> = {
  encode(
    message: UpdateSecurityHealthAnalyticsCustomModuleRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.securityHealthAnalyticsCustomModule !== undefined) {
      SecurityHealthAnalyticsCustomModule.encode(message.securityHealthAnalyticsCustomModule, writer.uint32(18).fork())
        .join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSecurityHealthAnalyticsCustomModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSecurityHealthAnalyticsCustomModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.securityHealthAnalyticsCustomModule = SecurityHealthAnalyticsCustomModule.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSecurityHealthAnalyticsCustomModuleRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      securityHealthAnalyticsCustomModule: isSet(object.securityHealthAnalyticsCustomModule)
        ? SecurityHealthAnalyticsCustomModule.fromJSON(object.securityHealthAnalyticsCustomModule)
        : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateSecurityHealthAnalyticsCustomModuleRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.securityHealthAnalyticsCustomModule !== undefined) {
      obj.securityHealthAnalyticsCustomModule = SecurityHealthAnalyticsCustomModule.toJSON(
        message.securityHealthAnalyticsCustomModule,
      );
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(
    base?: DeepPartial<UpdateSecurityHealthAnalyticsCustomModuleRequest>,
  ): UpdateSecurityHealthAnalyticsCustomModuleRequest {
    return UpdateSecurityHealthAnalyticsCustomModuleRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateSecurityHealthAnalyticsCustomModuleRequest>,
  ): UpdateSecurityHealthAnalyticsCustomModuleRequest {
    const message = createBaseUpdateSecurityHealthAnalyticsCustomModuleRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.securityHealthAnalyticsCustomModule =
      (object.securityHealthAnalyticsCustomModule !== undefined && object.securityHealthAnalyticsCustomModule !== null)
        ? SecurityHealthAnalyticsCustomModule.fromPartial(object.securityHealthAnalyticsCustomModule)
        : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteSecurityHealthAnalyticsCustomModuleRequest(): DeleteSecurityHealthAnalyticsCustomModuleRequest {
  return { name: "", validateOnly: false };
}

export const DeleteSecurityHealthAnalyticsCustomModuleRequest: MessageFns<
  DeleteSecurityHealthAnalyticsCustomModuleRequest
> = {
  encode(
    message: DeleteSecurityHealthAnalyticsCustomModuleRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.validateOnly !== false) {
      writer.uint32(16).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSecurityHealthAnalyticsCustomModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSecurityHealthAnalyticsCustomModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSecurityHealthAnalyticsCustomModuleRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: DeleteSecurityHealthAnalyticsCustomModuleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeleteSecurityHealthAnalyticsCustomModuleRequest>,
  ): DeleteSecurityHealthAnalyticsCustomModuleRequest {
    return DeleteSecurityHealthAnalyticsCustomModuleRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeleteSecurityHealthAnalyticsCustomModuleRequest>,
  ): DeleteSecurityHealthAnalyticsCustomModuleRequest {
    const message = createBaseDeleteSecurityHealthAnalyticsCustomModuleRequest();
    message.name = object.name ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseSimulateSecurityHealthAnalyticsCustomModuleRequest(): SimulateSecurityHealthAnalyticsCustomModuleRequest {
  return { parent: "", customConfig: undefined, resource: undefined };
}

export const SimulateSecurityHealthAnalyticsCustomModuleRequest: MessageFns<
  SimulateSecurityHealthAnalyticsCustomModuleRequest
> = {
  encode(
    message: SimulateSecurityHealthAnalyticsCustomModuleRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.customConfig !== undefined) {
      CustomConfig.encode(message.customConfig, writer.uint32(18).fork()).join();
    }
    if (message.resource !== undefined) {
      SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource.encode(
        message.resource,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulateSecurityHealthAnalyticsCustomModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulateSecurityHealthAnalyticsCustomModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customConfig = CustomConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulateSecurityHealthAnalyticsCustomModuleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      customConfig: isSet(object.customConfig) ? CustomConfig.fromJSON(object.customConfig) : undefined,
      resource: isSet(object.resource)
        ? SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource.fromJSON(object.resource)
        : undefined,
    };
  },

  toJSON(message: SimulateSecurityHealthAnalyticsCustomModuleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.customConfig !== undefined) {
      obj.customConfig = CustomConfig.toJSON(message.customConfig);
    }
    if (message.resource !== undefined) {
      obj.resource = SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource.toJSON(message.resource);
    }
    return obj;
  },

  create(
    base?: DeepPartial<SimulateSecurityHealthAnalyticsCustomModuleRequest>,
  ): SimulateSecurityHealthAnalyticsCustomModuleRequest {
    return SimulateSecurityHealthAnalyticsCustomModuleRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SimulateSecurityHealthAnalyticsCustomModuleRequest>,
  ): SimulateSecurityHealthAnalyticsCustomModuleRequest {
    const message = createBaseSimulateSecurityHealthAnalyticsCustomModuleRequest();
    message.parent = object.parent ?? "";
    message.customConfig = (object.customConfig !== undefined && object.customConfig !== null)
      ? CustomConfig.fromPartial(object.customConfig)
      : undefined;
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource.fromPartial(object.resource)
      : undefined;
    return message;
  },
};

function createBaseSimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource(): SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource {
  return { resourceType: "", resourceData: undefined, iamPolicyData: undefined };
}

export const SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource: MessageFns<
  SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource
> = {
  encode(
    message: SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.resourceType !== "") {
      writer.uint32(10).string(message.resourceType);
    }
    if (message.resourceData !== undefined) {
      Struct.encode(Struct.wrap(message.resourceData), writer.uint32(18).fork()).join();
    }
    if (message.iamPolicyData !== undefined) {
      Policy.encode(message.iamPolicyData, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceData = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.iamPolicyData = Policy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource {
    return {
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      resourceData: isObject(object.resourceData) ? object.resourceData : undefined,
      iamPolicyData: isSet(object.iamPolicyData) ? Policy.fromJSON(object.iamPolicyData) : undefined,
    };
  },

  toJSON(message: SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource): unknown {
    const obj: any = {};
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.resourceData !== undefined) {
      obj.resourceData = message.resourceData;
    }
    if (message.iamPolicyData !== undefined) {
      obj.iamPolicyData = Policy.toJSON(message.iamPolicyData);
    }
    return obj;
  },

  create(
    base?: DeepPartial<SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource>,
  ): SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource {
    return SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource>,
  ): SimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource {
    const message = createBaseSimulateSecurityHealthAnalyticsCustomModuleRequest_SimulatedResource();
    message.resourceType = object.resourceType ?? "";
    message.resourceData = object.resourceData ?? undefined;
    message.iamPolicyData = (object.iamPolicyData !== undefined && object.iamPolicyData !== null)
      ? Policy.fromPartial(object.iamPolicyData)
      : undefined;
    return message;
  },
};

function createBaseSimulatedFinding(): SimulatedFinding {
  return {
    name: "",
    parent: "",
    resourceName: "",
    category: "",
    state: 0,
    sourceProperties: {},
    eventTime: undefined,
    severity: 0,
    findingClass: 0,
  };
}

export const SimulatedFinding: MessageFns<SimulatedFinding> = {
  encode(message: SimulatedFinding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    if (message.resourceName !== "") {
      writer.uint32(26).string(message.resourceName);
    }
    if (message.category !== "") {
      writer.uint32(34).string(message.category);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    Object.entries(message.sourceProperties).forEach(([key, value]) => {
      if (value !== undefined) {
        SimulatedFinding_SourcePropertiesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
      }
    });
    if (message.eventTime !== undefined) {
      Timestamp.encode(toTimestamp(message.eventTime), writer.uint32(58).fork()).join();
    }
    if (message.severity !== 0) {
      writer.uint32(64).int32(message.severity);
    }
    if (message.findingClass !== 0) {
      writer.uint32(72).int32(message.findingClass);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulatedFinding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulatedFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.category = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = SimulatedFinding_SourcePropertiesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.sourceProperties[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.eventTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.findingClass = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulatedFinding {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      state: isSet(object.state) ? simulatedFinding_StateFromJSON(object.state) : 0,
      sourceProperties: isObject(object.sourceProperties)
        ? Object.entries(object.sourceProperties).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      eventTime: isSet(object.eventTime) ? fromJsonTimestamp(object.eventTime) : undefined,
      severity: isSet(object.severity) ? simulatedFinding_SeverityFromJSON(object.severity) : 0,
      findingClass: isSet(object.findingClass) ? simulatedFinding_FindingClassFromJSON(object.findingClass) : 0,
    };
  },

  toJSON(message: SimulatedFinding): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.state !== 0) {
      obj.state = simulatedFinding_StateToJSON(message.state);
    }
    if (message.sourceProperties) {
      const entries = Object.entries(message.sourceProperties);
      if (entries.length > 0) {
        obj.sourceProperties = {};
        entries.forEach(([k, v]) => {
          obj.sourceProperties[k] = v;
        });
      }
    }
    if (message.eventTime !== undefined) {
      obj.eventTime = message.eventTime.toISOString();
    }
    if (message.severity !== 0) {
      obj.severity = simulatedFinding_SeverityToJSON(message.severity);
    }
    if (message.findingClass !== 0) {
      obj.findingClass = simulatedFinding_FindingClassToJSON(message.findingClass);
    }
    return obj;
  },

  create(base?: DeepPartial<SimulatedFinding>): SimulatedFinding {
    return SimulatedFinding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimulatedFinding>): SimulatedFinding {
    const message = createBaseSimulatedFinding();
    message.name = object.name ?? "";
    message.parent = object.parent ?? "";
    message.resourceName = object.resourceName ?? "";
    message.category = object.category ?? "";
    message.state = object.state ?? 0;
    message.sourceProperties = Object.entries(object.sourceProperties ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.eventTime = object.eventTime ?? undefined;
    message.severity = object.severity ?? 0;
    message.findingClass = object.findingClass ?? 0;
    return message;
  },
};

function createBaseSimulatedFinding_SourcePropertiesEntry(): SimulatedFinding_SourcePropertiesEntry {
  return { key: "", value: undefined };
}

export const SimulatedFinding_SourcePropertiesEntry: MessageFns<SimulatedFinding_SourcePropertiesEntry> = {
  encode(message: SimulatedFinding_SourcePropertiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulatedFinding_SourcePropertiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulatedFinding_SourcePropertiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulatedFinding_SourcePropertiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: SimulatedFinding_SourcePropertiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SimulatedFinding_SourcePropertiesEntry>): SimulatedFinding_SourcePropertiesEntry {
    return SimulatedFinding_SourcePropertiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimulatedFinding_SourcePropertiesEntry>): SimulatedFinding_SourcePropertiesEntry {
    const message = createBaseSimulatedFinding_SourcePropertiesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseSimulateSecurityHealthAnalyticsCustomModuleResponse(): SimulateSecurityHealthAnalyticsCustomModuleResponse {
  return { result: undefined };
}

export const SimulateSecurityHealthAnalyticsCustomModuleResponse: MessageFns<
  SimulateSecurityHealthAnalyticsCustomModuleResponse
> = {
  encode(
    message: SimulateSecurityHealthAnalyticsCustomModuleResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.result !== undefined) {
      SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult.encode(
        message.result,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulateSecurityHealthAnalyticsCustomModuleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulateSecurityHealthAnalyticsCustomModuleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result = SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulateSecurityHealthAnalyticsCustomModuleResponse {
    return {
      result: isSet(object.result)
        ? SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult.fromJSON(object.result)
        : undefined,
    };
  },

  toJSON(message: SimulateSecurityHealthAnalyticsCustomModuleResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult.toJSON(message.result);
    }
    return obj;
  },

  create(
    base?: DeepPartial<SimulateSecurityHealthAnalyticsCustomModuleResponse>,
  ): SimulateSecurityHealthAnalyticsCustomModuleResponse {
    return SimulateSecurityHealthAnalyticsCustomModuleResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SimulateSecurityHealthAnalyticsCustomModuleResponse>,
  ): SimulateSecurityHealthAnalyticsCustomModuleResponse {
    const message = createBaseSimulateSecurityHealthAnalyticsCustomModuleResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseSimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult(): SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult {
  return { finding: undefined, noViolation: undefined, error: undefined };
}

export const SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult: MessageFns<
  SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult
> = {
  encode(
    message: SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.finding !== undefined) {
      SimulatedFinding.encode(message.finding, writer.uint32(10).fork()).join();
    }
    if (message.noViolation !== undefined) {
      Empty.encode(message.noViolation, writer.uint32(18).fork()).join();
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.finding = SimulatedFinding.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.noViolation = Empty.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult {
    return {
      finding: isSet(object.finding) ? SimulatedFinding.fromJSON(object.finding) : undefined,
      noViolation: isSet(object.noViolation) ? Empty.fromJSON(object.noViolation) : undefined,
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult): unknown {
    const obj: any = {};
    if (message.finding !== undefined) {
      obj.finding = SimulatedFinding.toJSON(message.finding);
    }
    if (message.noViolation !== undefined) {
      obj.noViolation = Empty.toJSON(message.noViolation);
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(
    base?: DeepPartial<SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult>,
  ): SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult {
    return SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult>,
  ): SimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult {
    const message = createBaseSimulateSecurityHealthAnalyticsCustomModuleResponse_SimulatedResult();
    message.finding = (object.finding !== undefined && object.finding !== null)
      ? SimulatedFinding.fromPartial(object.finding)
      : undefined;
    message.noViolation = (object.noViolation !== undefined && object.noViolation !== null)
      ? Empty.fromPartial(object.noViolation)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

function createBaseEffectiveEventThreatDetectionCustomModule(): EffectiveEventThreatDetectionCustomModule {
  return { name: "", config: undefined, enablementState: 0, type: "", displayName: "", description: "" };
}

export const EffectiveEventThreatDetectionCustomModule: MessageFns<EffectiveEventThreatDetectionCustomModule> = {
  encode(message: EffectiveEventThreatDetectionCustomModule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.config !== undefined) {
      Struct.encode(Struct.wrap(message.config), writer.uint32(18).fork()).join();
    }
    if (message.enablementState !== 0) {
      writer.uint32(24).int32(message.enablementState);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EffectiveEventThreatDetectionCustomModule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEffectiveEventThreatDetectionCustomModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enablementState = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EffectiveEventThreatDetectionCustomModule {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      config: isObject(object.config) ? object.config : undefined,
      enablementState: isSet(object.enablementState)
        ? effectiveEventThreatDetectionCustomModule_EnablementStateFromJSON(object.enablementState)
        : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: EffectiveEventThreatDetectionCustomModule): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.config !== undefined) {
      obj.config = message.config;
    }
    if (message.enablementState !== 0) {
      obj.enablementState = effectiveEventThreatDetectionCustomModule_EnablementStateToJSON(message.enablementState);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<EffectiveEventThreatDetectionCustomModule>): EffectiveEventThreatDetectionCustomModule {
    return EffectiveEventThreatDetectionCustomModule.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<EffectiveEventThreatDetectionCustomModule>,
  ): EffectiveEventThreatDetectionCustomModule {
    const message = createBaseEffectiveEventThreatDetectionCustomModule();
    message.name = object.name ?? "";
    message.config = object.config ?? undefined;
    message.enablementState = object.enablementState ?? 0;
    message.type = object.type ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseListEffectiveEventThreatDetectionCustomModulesRequest(): ListEffectiveEventThreatDetectionCustomModulesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEffectiveEventThreatDetectionCustomModulesRequest: MessageFns<
  ListEffectiveEventThreatDetectionCustomModulesRequest
> = {
  encode(
    message: ListEffectiveEventThreatDetectionCustomModulesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEffectiveEventThreatDetectionCustomModulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEffectiveEventThreatDetectionCustomModulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEffectiveEventThreatDetectionCustomModulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEffectiveEventThreatDetectionCustomModulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListEffectiveEventThreatDetectionCustomModulesRequest>,
  ): ListEffectiveEventThreatDetectionCustomModulesRequest {
    return ListEffectiveEventThreatDetectionCustomModulesRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListEffectiveEventThreatDetectionCustomModulesRequest>,
  ): ListEffectiveEventThreatDetectionCustomModulesRequest {
    const message = createBaseListEffectiveEventThreatDetectionCustomModulesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEffectiveEventThreatDetectionCustomModulesResponse(): ListEffectiveEventThreatDetectionCustomModulesResponse {
  return { effectiveEventThreatDetectionCustomModules: [], nextPageToken: "" };
}

export const ListEffectiveEventThreatDetectionCustomModulesResponse: MessageFns<
  ListEffectiveEventThreatDetectionCustomModulesResponse
> = {
  encode(
    message: ListEffectiveEventThreatDetectionCustomModulesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.effectiveEventThreatDetectionCustomModules) {
      EffectiveEventThreatDetectionCustomModule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEffectiveEventThreatDetectionCustomModulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEffectiveEventThreatDetectionCustomModulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.effectiveEventThreatDetectionCustomModules.push(
            EffectiveEventThreatDetectionCustomModule.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEffectiveEventThreatDetectionCustomModulesResponse {
    return {
      effectiveEventThreatDetectionCustomModules:
        globalThis.Array.isArray(object?.effectiveEventThreatDetectionCustomModules)
          ? object.effectiveEventThreatDetectionCustomModules.map((e: any) =>
            EffectiveEventThreatDetectionCustomModule.fromJSON(e)
          )
          : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEffectiveEventThreatDetectionCustomModulesResponse): unknown {
    const obj: any = {};
    if (message.effectiveEventThreatDetectionCustomModules?.length) {
      obj.effectiveEventThreatDetectionCustomModules = message.effectiveEventThreatDetectionCustomModules.map((e) =>
        EffectiveEventThreatDetectionCustomModule.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListEffectiveEventThreatDetectionCustomModulesResponse>,
  ): ListEffectiveEventThreatDetectionCustomModulesResponse {
    return ListEffectiveEventThreatDetectionCustomModulesResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListEffectiveEventThreatDetectionCustomModulesResponse>,
  ): ListEffectiveEventThreatDetectionCustomModulesResponse {
    const message = createBaseListEffectiveEventThreatDetectionCustomModulesResponse();
    message.effectiveEventThreatDetectionCustomModules =
      object.effectiveEventThreatDetectionCustomModules?.map((e) =>
        EffectiveEventThreatDetectionCustomModule.fromPartial(e)
      ) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetEffectiveEventThreatDetectionCustomModuleRequest(): GetEffectiveEventThreatDetectionCustomModuleRequest {
  return { name: "" };
}

export const GetEffectiveEventThreatDetectionCustomModuleRequest: MessageFns<
  GetEffectiveEventThreatDetectionCustomModuleRequest
> = {
  encode(
    message: GetEffectiveEventThreatDetectionCustomModuleRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEffectiveEventThreatDetectionCustomModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEffectiveEventThreatDetectionCustomModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEffectiveEventThreatDetectionCustomModuleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEffectiveEventThreatDetectionCustomModuleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(
    base?: DeepPartial<GetEffectiveEventThreatDetectionCustomModuleRequest>,
  ): GetEffectiveEventThreatDetectionCustomModuleRequest {
    return GetEffectiveEventThreatDetectionCustomModuleRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetEffectiveEventThreatDetectionCustomModuleRequest>,
  ): GetEffectiveEventThreatDetectionCustomModuleRequest {
    const message = createBaseGetEffectiveEventThreatDetectionCustomModuleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseEventThreatDetectionCustomModule(): EventThreatDetectionCustomModule {
  return {
    name: "",
    config: undefined,
    ancestorModule: "",
    enablementState: 0,
    type: "",
    displayName: "",
    description: "",
    updateTime: undefined,
    lastEditor: "",
  };
}

export const EventThreatDetectionCustomModule: MessageFns<EventThreatDetectionCustomModule> = {
  encode(message: EventThreatDetectionCustomModule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.config !== undefined) {
      Struct.encode(Struct.wrap(message.config), writer.uint32(18).fork()).join();
    }
    if (message.ancestorModule !== "") {
      writer.uint32(26).string(message.ancestorModule);
    }
    if (message.enablementState !== 0) {
      writer.uint32(32).int32(message.enablementState);
    }
    if (message.type !== "") {
      writer.uint32(42).string(message.type);
    }
    if (message.displayName !== "") {
      writer.uint32(50).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.lastEditor !== "") {
      writer.uint32(74).string(message.lastEditor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventThreatDetectionCustomModule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventThreatDetectionCustomModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ancestorModule = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.enablementState = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.type = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.lastEditor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventThreatDetectionCustomModule {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      config: isObject(object.config) ? object.config : undefined,
      ancestorModule: isSet(object.ancestorModule) ? globalThis.String(object.ancestorModule) : "",
      enablementState: isSet(object.enablementState)
        ? eventThreatDetectionCustomModule_EnablementStateFromJSON(object.enablementState)
        : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      lastEditor: isSet(object.lastEditor) ? globalThis.String(object.lastEditor) : "",
    };
  },

  toJSON(message: EventThreatDetectionCustomModule): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.config !== undefined) {
      obj.config = message.config;
    }
    if (message.ancestorModule !== "") {
      obj.ancestorModule = message.ancestorModule;
    }
    if (message.enablementState !== 0) {
      obj.enablementState = eventThreatDetectionCustomModule_EnablementStateToJSON(message.enablementState);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.lastEditor !== "") {
      obj.lastEditor = message.lastEditor;
    }
    return obj;
  },

  create(base?: DeepPartial<EventThreatDetectionCustomModule>): EventThreatDetectionCustomModule {
    return EventThreatDetectionCustomModule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventThreatDetectionCustomModule>): EventThreatDetectionCustomModule {
    const message = createBaseEventThreatDetectionCustomModule();
    message.name = object.name ?? "";
    message.config = object.config ?? undefined;
    message.ancestorModule = object.ancestorModule ?? "";
    message.enablementState = object.enablementState ?? 0;
    message.type = object.type ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.updateTime = object.updateTime ?? undefined;
    message.lastEditor = object.lastEditor ?? "";
    return message;
  },
};

function createBaseListEventThreatDetectionCustomModulesRequest(): ListEventThreatDetectionCustomModulesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEventThreatDetectionCustomModulesRequest: MessageFns<ListEventThreatDetectionCustomModulesRequest> = {
  encode(
    message: ListEventThreatDetectionCustomModulesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventThreatDetectionCustomModulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventThreatDetectionCustomModulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventThreatDetectionCustomModulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEventThreatDetectionCustomModulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListEventThreatDetectionCustomModulesRequest>,
  ): ListEventThreatDetectionCustomModulesRequest {
    return ListEventThreatDetectionCustomModulesRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListEventThreatDetectionCustomModulesRequest>,
  ): ListEventThreatDetectionCustomModulesRequest {
    const message = createBaseListEventThreatDetectionCustomModulesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEventThreatDetectionCustomModulesResponse(): ListEventThreatDetectionCustomModulesResponse {
  return { eventThreatDetectionCustomModules: [], nextPageToken: "" };
}

export const ListEventThreatDetectionCustomModulesResponse: MessageFns<ListEventThreatDetectionCustomModulesResponse> =
  {
    encode(
      message: ListEventThreatDetectionCustomModulesResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.eventThreatDetectionCustomModules) {
        EventThreatDetectionCustomModule.encode(v!, writer.uint32(10).fork()).join();
      }
      if (message.nextPageToken !== "") {
        writer.uint32(18).string(message.nextPageToken);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ListEventThreatDetectionCustomModulesResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseListEventThreatDetectionCustomModulesResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.eventThreatDetectionCustomModules.push(
              EventThreatDetectionCustomModule.decode(reader, reader.uint32()),
            );
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.nextPageToken = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ListEventThreatDetectionCustomModulesResponse {
      return {
        eventThreatDetectionCustomModules: globalThis.Array.isArray(object?.eventThreatDetectionCustomModules)
          ? object.eventThreatDetectionCustomModules.map((e: any) => EventThreatDetectionCustomModule.fromJSON(e))
          : [],
        nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      };
    },

    toJSON(message: ListEventThreatDetectionCustomModulesResponse): unknown {
      const obj: any = {};
      if (message.eventThreatDetectionCustomModules?.length) {
        obj.eventThreatDetectionCustomModules = message.eventThreatDetectionCustomModules.map((e) =>
          EventThreatDetectionCustomModule.toJSON(e)
        );
      }
      if (message.nextPageToken !== "") {
        obj.nextPageToken = message.nextPageToken;
      }
      return obj;
    },

    create(
      base?: DeepPartial<ListEventThreatDetectionCustomModulesResponse>,
    ): ListEventThreatDetectionCustomModulesResponse {
      return ListEventThreatDetectionCustomModulesResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ListEventThreatDetectionCustomModulesResponse>,
    ): ListEventThreatDetectionCustomModulesResponse {
      const message = createBaseListEventThreatDetectionCustomModulesResponse();
      message.eventThreatDetectionCustomModules =
        object.eventThreatDetectionCustomModules?.map((e) => EventThreatDetectionCustomModule.fromPartial(e)) || [];
      message.nextPageToken = object.nextPageToken ?? "";
      return message;
    },
  };

function createBaseListDescendantEventThreatDetectionCustomModulesRequest(): ListDescendantEventThreatDetectionCustomModulesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDescendantEventThreatDetectionCustomModulesRequest: MessageFns<
  ListDescendantEventThreatDetectionCustomModulesRequest
> = {
  encode(
    message: ListDescendantEventThreatDetectionCustomModulesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDescendantEventThreatDetectionCustomModulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDescendantEventThreatDetectionCustomModulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDescendantEventThreatDetectionCustomModulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDescendantEventThreatDetectionCustomModulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListDescendantEventThreatDetectionCustomModulesRequest>,
  ): ListDescendantEventThreatDetectionCustomModulesRequest {
    return ListDescendantEventThreatDetectionCustomModulesRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListDescendantEventThreatDetectionCustomModulesRequest>,
  ): ListDescendantEventThreatDetectionCustomModulesRequest {
    const message = createBaseListDescendantEventThreatDetectionCustomModulesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDescendantEventThreatDetectionCustomModulesResponse(): ListDescendantEventThreatDetectionCustomModulesResponse {
  return { eventThreatDetectionCustomModules: [], nextPageToken: "" };
}

export const ListDescendantEventThreatDetectionCustomModulesResponse: MessageFns<
  ListDescendantEventThreatDetectionCustomModulesResponse
> = {
  encode(
    message: ListDescendantEventThreatDetectionCustomModulesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.eventThreatDetectionCustomModules) {
      EventThreatDetectionCustomModule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDescendantEventThreatDetectionCustomModulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDescendantEventThreatDetectionCustomModulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventThreatDetectionCustomModules.push(
            EventThreatDetectionCustomModule.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDescendantEventThreatDetectionCustomModulesResponse {
    return {
      eventThreatDetectionCustomModules: globalThis.Array.isArray(object?.eventThreatDetectionCustomModules)
        ? object.eventThreatDetectionCustomModules.map((e: any) => EventThreatDetectionCustomModule.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDescendantEventThreatDetectionCustomModulesResponse): unknown {
    const obj: any = {};
    if (message.eventThreatDetectionCustomModules?.length) {
      obj.eventThreatDetectionCustomModules = message.eventThreatDetectionCustomModules.map((e) =>
        EventThreatDetectionCustomModule.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListDescendantEventThreatDetectionCustomModulesResponse>,
  ): ListDescendantEventThreatDetectionCustomModulesResponse {
    return ListDescendantEventThreatDetectionCustomModulesResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListDescendantEventThreatDetectionCustomModulesResponse>,
  ): ListDescendantEventThreatDetectionCustomModulesResponse {
    const message = createBaseListDescendantEventThreatDetectionCustomModulesResponse();
    message.eventThreatDetectionCustomModules =
      object.eventThreatDetectionCustomModules?.map((e) => EventThreatDetectionCustomModule.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetEventThreatDetectionCustomModuleRequest(): GetEventThreatDetectionCustomModuleRequest {
  return { name: "" };
}

export const GetEventThreatDetectionCustomModuleRequest: MessageFns<GetEventThreatDetectionCustomModuleRequest> = {
  encode(message: GetEventThreatDetectionCustomModuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventThreatDetectionCustomModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventThreatDetectionCustomModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventThreatDetectionCustomModuleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEventThreatDetectionCustomModuleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventThreatDetectionCustomModuleRequest>): GetEventThreatDetectionCustomModuleRequest {
    return GetEventThreatDetectionCustomModuleRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetEventThreatDetectionCustomModuleRequest>,
  ): GetEventThreatDetectionCustomModuleRequest {
    const message = createBaseGetEventThreatDetectionCustomModuleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateEventThreatDetectionCustomModuleRequest(): CreateEventThreatDetectionCustomModuleRequest {
  return { parent: "", eventThreatDetectionCustomModule: undefined, validateOnly: false };
}

export const CreateEventThreatDetectionCustomModuleRequest: MessageFns<CreateEventThreatDetectionCustomModuleRequest> =
  {
    encode(
      message: CreateEventThreatDetectionCustomModuleRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.parent !== "") {
        writer.uint32(10).string(message.parent);
      }
      if (message.eventThreatDetectionCustomModule !== undefined) {
        EventThreatDetectionCustomModule.encode(message.eventThreatDetectionCustomModule, writer.uint32(26).fork())
          .join();
      }
      if (message.validateOnly !== false) {
        writer.uint32(32).bool(message.validateOnly);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): CreateEventThreatDetectionCustomModuleRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCreateEventThreatDetectionCustomModuleRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.parent = reader.string();
            continue;
          case 3:
            if (tag !== 26) {
              break;
            }

            message.eventThreatDetectionCustomModule = EventThreatDetectionCustomModule.decode(reader, reader.uint32());
            continue;
          case 4:
            if (tag !== 32) {
              break;
            }

            message.validateOnly = reader.bool();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): CreateEventThreatDetectionCustomModuleRequest {
      return {
        parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
        eventThreatDetectionCustomModule: isSet(object.eventThreatDetectionCustomModule)
          ? EventThreatDetectionCustomModule.fromJSON(object.eventThreatDetectionCustomModule)
          : undefined,
        validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      };
    },

    toJSON(message: CreateEventThreatDetectionCustomModuleRequest): unknown {
      const obj: any = {};
      if (message.parent !== "") {
        obj.parent = message.parent;
      }
      if (message.eventThreatDetectionCustomModule !== undefined) {
        obj.eventThreatDetectionCustomModule = EventThreatDetectionCustomModule.toJSON(
          message.eventThreatDetectionCustomModule,
        );
      }
      if (message.validateOnly !== false) {
        obj.validateOnly = message.validateOnly;
      }
      return obj;
    },

    create(
      base?: DeepPartial<CreateEventThreatDetectionCustomModuleRequest>,
    ): CreateEventThreatDetectionCustomModuleRequest {
      return CreateEventThreatDetectionCustomModuleRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<CreateEventThreatDetectionCustomModuleRequest>,
    ): CreateEventThreatDetectionCustomModuleRequest {
      const message = createBaseCreateEventThreatDetectionCustomModuleRequest();
      message.parent = object.parent ?? "";
      message.eventThreatDetectionCustomModule =
        (object.eventThreatDetectionCustomModule !== undefined && object.eventThreatDetectionCustomModule !== null)
          ? EventThreatDetectionCustomModule.fromPartial(object.eventThreatDetectionCustomModule)
          : undefined;
      message.validateOnly = object.validateOnly ?? false;
      return message;
    },
  };

function createBaseUpdateEventThreatDetectionCustomModuleRequest(): UpdateEventThreatDetectionCustomModuleRequest {
  return { updateMask: undefined, eventThreatDetectionCustomModule: undefined, validateOnly: false };
}

export const UpdateEventThreatDetectionCustomModuleRequest: MessageFns<UpdateEventThreatDetectionCustomModuleRequest> =
  {
    encode(
      message: UpdateEventThreatDetectionCustomModuleRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.updateMask !== undefined) {
        FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
      }
      if (message.eventThreatDetectionCustomModule !== undefined) {
        EventThreatDetectionCustomModule.encode(message.eventThreatDetectionCustomModule, writer.uint32(18).fork())
          .join();
      }
      if (message.validateOnly !== false) {
        writer.uint32(24).bool(message.validateOnly);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateEventThreatDetectionCustomModuleRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseUpdateEventThreatDetectionCustomModuleRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.eventThreatDetectionCustomModule = EventThreatDetectionCustomModule.decode(reader, reader.uint32());
            continue;
          case 3:
            if (tag !== 24) {
              break;
            }

            message.validateOnly = reader.bool();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): UpdateEventThreatDetectionCustomModuleRequest {
      return {
        updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
        eventThreatDetectionCustomModule: isSet(object.eventThreatDetectionCustomModule)
          ? EventThreatDetectionCustomModule.fromJSON(object.eventThreatDetectionCustomModule)
          : undefined,
        validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      };
    },

    toJSON(message: UpdateEventThreatDetectionCustomModuleRequest): unknown {
      const obj: any = {};
      if (message.updateMask !== undefined) {
        obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
      }
      if (message.eventThreatDetectionCustomModule !== undefined) {
        obj.eventThreatDetectionCustomModule = EventThreatDetectionCustomModule.toJSON(
          message.eventThreatDetectionCustomModule,
        );
      }
      if (message.validateOnly !== false) {
        obj.validateOnly = message.validateOnly;
      }
      return obj;
    },

    create(
      base?: DeepPartial<UpdateEventThreatDetectionCustomModuleRequest>,
    ): UpdateEventThreatDetectionCustomModuleRequest {
      return UpdateEventThreatDetectionCustomModuleRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<UpdateEventThreatDetectionCustomModuleRequest>,
    ): UpdateEventThreatDetectionCustomModuleRequest {
      const message = createBaseUpdateEventThreatDetectionCustomModuleRequest();
      message.updateMask = object.updateMask ?? undefined;
      message.eventThreatDetectionCustomModule =
        (object.eventThreatDetectionCustomModule !== undefined && object.eventThreatDetectionCustomModule !== null)
          ? EventThreatDetectionCustomModule.fromPartial(object.eventThreatDetectionCustomModule)
          : undefined;
      message.validateOnly = object.validateOnly ?? false;
      return message;
    },
  };

function createBaseDeleteEventThreatDetectionCustomModuleRequest(): DeleteEventThreatDetectionCustomModuleRequest {
  return { name: "", validateOnly: false };
}

export const DeleteEventThreatDetectionCustomModuleRequest: MessageFns<DeleteEventThreatDetectionCustomModuleRequest> =
  {
    encode(
      message: DeleteEventThreatDetectionCustomModuleRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.name !== "") {
        writer.uint32(10).string(message.name);
      }
      if (message.validateOnly !== false) {
        writer.uint32(16).bool(message.validateOnly);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DeleteEventThreatDetectionCustomModuleRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseDeleteEventThreatDetectionCustomModuleRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.name = reader.string();
            continue;
          case 2:
            if (tag !== 16) {
              break;
            }

            message.validateOnly = reader.bool();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): DeleteEventThreatDetectionCustomModuleRequest {
      return {
        name: isSet(object.name) ? globalThis.String(object.name) : "",
        validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      };
    },

    toJSON(message: DeleteEventThreatDetectionCustomModuleRequest): unknown {
      const obj: any = {};
      if (message.name !== "") {
        obj.name = message.name;
      }
      if (message.validateOnly !== false) {
        obj.validateOnly = message.validateOnly;
      }
      return obj;
    },

    create(
      base?: DeepPartial<DeleteEventThreatDetectionCustomModuleRequest>,
    ): DeleteEventThreatDetectionCustomModuleRequest {
      return DeleteEventThreatDetectionCustomModuleRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<DeleteEventThreatDetectionCustomModuleRequest>,
    ): DeleteEventThreatDetectionCustomModuleRequest {
      const message = createBaseDeleteEventThreatDetectionCustomModuleRequest();
      message.name = object.name ?? "";
      message.validateOnly = object.validateOnly ?? false;
      return message;
    },
  };

function createBaseValidateEventThreatDetectionCustomModuleRequest(): ValidateEventThreatDetectionCustomModuleRequest {
  return { parent: "", rawText: "", type: "" };
}

export const ValidateEventThreatDetectionCustomModuleRequest: MessageFns<
  ValidateEventThreatDetectionCustomModuleRequest
> = {
  encode(
    message: ValidateEventThreatDetectionCustomModuleRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.rawText !== "") {
      writer.uint32(18).string(message.rawText);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateEventThreatDetectionCustomModuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateEventThreatDetectionCustomModuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rawText = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateEventThreatDetectionCustomModuleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      rawText: isSet(object.rawText) ? globalThis.String(object.rawText) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: ValidateEventThreatDetectionCustomModuleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.rawText !== "") {
      obj.rawText = message.rawText;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ValidateEventThreatDetectionCustomModuleRequest>,
  ): ValidateEventThreatDetectionCustomModuleRequest {
    return ValidateEventThreatDetectionCustomModuleRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ValidateEventThreatDetectionCustomModuleRequest>,
  ): ValidateEventThreatDetectionCustomModuleRequest {
    const message = createBaseValidateEventThreatDetectionCustomModuleRequest();
    message.parent = object.parent ?? "";
    message.rawText = object.rawText ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseValidateEventThreatDetectionCustomModuleResponse(): ValidateEventThreatDetectionCustomModuleResponse {
  return { errors: [] };
}

export const ValidateEventThreatDetectionCustomModuleResponse: MessageFns<
  ValidateEventThreatDetectionCustomModuleResponse
> = {
  encode(
    message: ValidateEventThreatDetectionCustomModuleResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.errors) {
      ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError.encode(v!, writer.uint32(18).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateEventThreatDetectionCustomModuleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateEventThreatDetectionCustomModuleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errors.push(
            ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateEventThreatDetectionCustomModuleResponse {
    return {
      errors: globalThis.Array.isArray(object?.errors)
        ? object.errors.map((e: any) =>
          ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: ValidateEventThreatDetectionCustomModuleResponse): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) =>
        ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError.toJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<ValidateEventThreatDetectionCustomModuleResponse>,
  ): ValidateEventThreatDetectionCustomModuleResponse {
    return ValidateEventThreatDetectionCustomModuleResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ValidateEventThreatDetectionCustomModuleResponse>,
  ): ValidateEventThreatDetectionCustomModuleResponse {
    const message = createBaseValidateEventThreatDetectionCustomModuleResponse();
    message.errors =
      object.errors?.map((e) =>
        ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError(): ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError {
  return { description: "", fieldPath: "", start: undefined, end: undefined };
}

export const ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError: MessageFns<
  ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError
> = {
  encode(
    message: ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.fieldPath !== "") {
      writer.uint32(18).string(message.fieldPath);
    }
    if (message.start !== undefined) {
      ValidateEventThreatDetectionCustomModuleResponse_Position.encode(message.start, writer.uint32(26).fork()).join();
    }
    if (message.end !== undefined) {
      ValidateEventThreatDetectionCustomModuleResponse_Position.encode(message.end, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldPath = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.start = ValidateEventThreatDetectionCustomModuleResponse_Position.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.end = ValidateEventThreatDetectionCustomModuleResponse_Position.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      fieldPath: isSet(object.fieldPath) ? globalThis.String(object.fieldPath) : "",
      start: isSet(object.start)
        ? ValidateEventThreatDetectionCustomModuleResponse_Position.fromJSON(object.start)
        : undefined,
      end: isSet(object.end)
        ? ValidateEventThreatDetectionCustomModuleResponse_Position.fromJSON(object.end)
        : undefined,
    };
  },

  toJSON(message: ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.fieldPath !== "") {
      obj.fieldPath = message.fieldPath;
    }
    if (message.start !== undefined) {
      obj.start = ValidateEventThreatDetectionCustomModuleResponse_Position.toJSON(message.start);
    }
    if (message.end !== undefined) {
      obj.end = ValidateEventThreatDetectionCustomModuleResponse_Position.toJSON(message.end);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError>,
  ): ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError {
    return ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError>,
  ): ValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError {
    const message = createBaseValidateEventThreatDetectionCustomModuleResponse_CustomModuleValidationError();
    message.description = object.description ?? "";
    message.fieldPath = object.fieldPath ?? "";
    message.start = (object.start !== undefined && object.start !== null)
      ? ValidateEventThreatDetectionCustomModuleResponse_Position.fromPartial(object.start)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? ValidateEventThreatDetectionCustomModuleResponse_Position.fromPartial(object.end)
      : undefined;
    return message;
  },
};

function createBaseValidateEventThreatDetectionCustomModuleResponse_Position(): ValidateEventThreatDetectionCustomModuleResponse_Position {
  return { lineNumber: 0, columnNumber: 0 };
}

export const ValidateEventThreatDetectionCustomModuleResponse_Position: MessageFns<
  ValidateEventThreatDetectionCustomModuleResponse_Position
> = {
  encode(
    message: ValidateEventThreatDetectionCustomModuleResponse_Position,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.lineNumber !== 0) {
      writer.uint32(8).int32(message.lineNumber);
    }
    if (message.columnNumber !== 0) {
      writer.uint32(16).int32(message.columnNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateEventThreatDetectionCustomModuleResponse_Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateEventThreatDetectionCustomModuleResponse_Position();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.lineNumber = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.columnNumber = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateEventThreatDetectionCustomModuleResponse_Position {
    return {
      lineNumber: isSet(object.lineNumber) ? globalThis.Number(object.lineNumber) : 0,
      columnNumber: isSet(object.columnNumber) ? globalThis.Number(object.columnNumber) : 0,
    };
  },

  toJSON(message: ValidateEventThreatDetectionCustomModuleResponse_Position): unknown {
    const obj: any = {};
    if (message.lineNumber !== 0) {
      obj.lineNumber = Math.round(message.lineNumber);
    }
    if (message.columnNumber !== 0) {
      obj.columnNumber = Math.round(message.columnNumber);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ValidateEventThreatDetectionCustomModuleResponse_Position>,
  ): ValidateEventThreatDetectionCustomModuleResponse_Position {
    return ValidateEventThreatDetectionCustomModuleResponse_Position.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ValidateEventThreatDetectionCustomModuleResponse_Position>,
  ): ValidateEventThreatDetectionCustomModuleResponse_Position {
    const message = createBaseValidateEventThreatDetectionCustomModuleResponse_Position();
    message.lineNumber = object.lineNumber ?? 0;
    message.columnNumber = object.columnNumber ?? 0;
    return message;
  },
};

function createBaseGetSecurityCenterServiceRequest(): GetSecurityCenterServiceRequest {
  return { name: "", showEligibleModulesOnly: false };
}

export const GetSecurityCenterServiceRequest: MessageFns<GetSecurityCenterServiceRequest> = {
  encode(message: GetSecurityCenterServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.showEligibleModulesOnly !== false) {
      writer.uint32(16).bool(message.showEligibleModulesOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecurityCenterServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecurityCenterServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showEligibleModulesOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecurityCenterServiceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      showEligibleModulesOnly: isSet(object.showEligibleModulesOnly)
        ? globalThis.Boolean(object.showEligibleModulesOnly)
        : false,
    };
  },

  toJSON(message: GetSecurityCenterServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.showEligibleModulesOnly !== false) {
      obj.showEligibleModulesOnly = message.showEligibleModulesOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSecurityCenterServiceRequest>): GetSecurityCenterServiceRequest {
    return GetSecurityCenterServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSecurityCenterServiceRequest>): GetSecurityCenterServiceRequest {
    const message = createBaseGetSecurityCenterServiceRequest();
    message.name = object.name ?? "";
    message.showEligibleModulesOnly = object.showEligibleModulesOnly ?? false;
    return message;
  },
};

function createBaseListSecurityCenterServicesRequest(): ListSecurityCenterServicesRequest {
  return { parent: "", pageSize: 0, pageToken: "", showEligibleModulesOnly: false };
}

export const ListSecurityCenterServicesRequest: MessageFns<ListSecurityCenterServicesRequest> = {
  encode(message: ListSecurityCenterServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showEligibleModulesOnly !== false) {
      writer.uint32(32).bool(message.showEligibleModulesOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecurityCenterServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecurityCenterServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.showEligibleModulesOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecurityCenterServicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showEligibleModulesOnly: isSet(object.showEligibleModulesOnly)
        ? globalThis.Boolean(object.showEligibleModulesOnly)
        : false,
    };
  },

  toJSON(message: ListSecurityCenterServicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showEligibleModulesOnly !== false) {
      obj.showEligibleModulesOnly = message.showEligibleModulesOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSecurityCenterServicesRequest>): ListSecurityCenterServicesRequest {
    return ListSecurityCenterServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSecurityCenterServicesRequest>): ListSecurityCenterServicesRequest {
    const message = createBaseListSecurityCenterServicesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showEligibleModulesOnly = object.showEligibleModulesOnly ?? false;
    return message;
  },
};

function createBaseListSecurityCenterServicesResponse(): ListSecurityCenterServicesResponse {
  return { securityCenterServices: [], nextPageToken: "" };
}

export const ListSecurityCenterServicesResponse: MessageFns<ListSecurityCenterServicesResponse> = {
  encode(message: ListSecurityCenterServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.securityCenterServices) {
      SecurityCenterService.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSecurityCenterServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSecurityCenterServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.securityCenterServices.push(SecurityCenterService.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSecurityCenterServicesResponse {
    return {
      securityCenterServices: globalThis.Array.isArray(object?.securityCenterServices)
        ? object.securityCenterServices.map((e: any) => SecurityCenterService.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSecurityCenterServicesResponse): unknown {
    const obj: any = {};
    if (message.securityCenterServices?.length) {
      obj.securityCenterServices = message.securityCenterServices.map((e) => SecurityCenterService.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSecurityCenterServicesResponse>): ListSecurityCenterServicesResponse {
    return ListSecurityCenterServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSecurityCenterServicesResponse>): ListSecurityCenterServicesResponse {
    const message = createBaseListSecurityCenterServicesResponse();
    message.securityCenterServices = object.securityCenterServices?.map((e) => SecurityCenterService.fromPartial(e)) ||
      [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateSecurityCenterServiceRequest(): UpdateSecurityCenterServiceRequest {
  return { securityCenterService: undefined, updateMask: undefined, validateOnly: false };
}

export const UpdateSecurityCenterServiceRequest: MessageFns<UpdateSecurityCenterServiceRequest> = {
  encode(message: UpdateSecurityCenterServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.securityCenterService !== undefined) {
      SecurityCenterService.encode(message.securityCenterService, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSecurityCenterServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSecurityCenterServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.securityCenterService = SecurityCenterService.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSecurityCenterServiceRequest {
    return {
      securityCenterService: isSet(object.securityCenterService)
        ? SecurityCenterService.fromJSON(object.securityCenterService)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateSecurityCenterServiceRequest): unknown {
    const obj: any = {};
    if (message.securityCenterService !== undefined) {
      obj.securityCenterService = SecurityCenterService.toJSON(message.securityCenterService);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSecurityCenterServiceRequest>): UpdateSecurityCenterServiceRequest {
    return UpdateSecurityCenterServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSecurityCenterServiceRequest>): UpdateSecurityCenterServiceRequest {
    const message = createBaseUpdateSecurityCenterServiceRequest();
    message.securityCenterService =
      (object.securityCenterService !== undefined && object.securityCenterService !== null)
        ? SecurityCenterService.fromPartial(object.securityCenterService)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

/** Service describing handlers for resources */
export type SecurityCenterManagementDefinition = typeof SecurityCenterManagementDefinition;
export const SecurityCenterManagementDefinition = {
  name: "SecurityCenterManagement",
  fullName: "google.cloud.securitycentermanagement.v1.SecurityCenterManagement",
  methods: {
    /**
     * Returns a list of all EffectiveSecurityHealthAnalyticsCustomModules for the
     * given parent. This includes resident modules defined at the scope of the
     * parent, and inherited modules, inherited from CRM ancestors (no
     * descendants).
     */
    listEffectiveSecurityHealthAnalyticsCustomModules: {
      name: "ListEffectiveSecurityHealthAnalyticsCustomModules",
      requestType: ListEffectiveSecurityHealthAnalyticsCustomModulesRequest,
      requestStream: false,
      responseType: ListEffectiveSecurityHealthAnalyticsCustomModulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              129,
              2,
              90,
              82,
              18,
              80,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              90,
              88,
              18,
              86,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              18,
              81,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single EffectiveSecurityHealthAnalyticsCustomModule. */
    getEffectiveSecurityHealthAnalyticsCustomModule: {
      name: "GetEffectiveSecurityHealthAnalyticsCustomModule",
      requestType: GetEffectiveSecurityHealthAnalyticsCustomModuleRequest,
      requestStream: false,
      responseType: EffectiveSecurityHealthAnalyticsCustomModule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              129,
              2,
              90,
              82,
              18,
              80,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              90,
              88,
              18,
              86,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              18,
              81,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a list of all SecurityHealthAnalyticsCustomModules for the given
     * parent. This includes resident modules defined at the scope of the parent,
     * and inherited modules, inherited from CRM ancestors (no descendants).
     */
    listSecurityHealthAnalyticsCustomModules: {
      name: "ListSecurityHealthAnalyticsCustomModules",
      requestType: ListSecurityHealthAnalyticsCustomModulesRequest,
      requestStream: false,
      responseType: ListSecurityHealthAnalyticsCustomModulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              230,
              1,
              90,
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              90,
              79,
              18,
              77,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              18,
              72,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a list of all resident SecurityHealthAnalyticsCustomModules under
     * the given CRM parent and all of the parent's CRM descendants.
     */
    listDescendantSecurityHealthAnalyticsCustomModules: {
      name: "ListDescendantSecurityHealthAnalyticsCustomModules",
      requestType: ListDescendantSecurityHealthAnalyticsCustomModulesRequest,
      requestStream: false,
      responseType: ListDescendantSecurityHealthAnalyticsCustomModulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              147,
              2,
              90,
              88,
              18,
              86,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              108,
              105,
              115,
              116,
              68,
              101,
              115,
              99,
              101,
              110,
              100,
              97,
              110,
              116,
              90,
              94,
              18,
              92,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              108,
              105,
              115,
              116,
              68,
              101,
              115,
              99,
              101,
              110,
              100,
              97,
              110,
              116,
              18,
              87,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              108,
              105,
              115,
              116,
              68,
              101,
              115,
              99,
              101,
              110,
              100,
              97,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /** Retrieves a SecurityHealthAnalyticsCustomModule. */
    getSecurityHealthAnalyticsCustomModule: {
      name: "GetSecurityHealthAnalyticsCustomModule",
      requestType: GetSecurityHealthAnalyticsCustomModuleRequest,
      requestStream: false,
      responseType: SecurityHealthAnalyticsCustomModule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              230,
              1,
              90,
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              90,
              79,
              18,
              77,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              18,
              72,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a resident SecurityHealthAnalyticsCustomModule at the scope of the
     * given CRM parent, and also creates inherited
     * SecurityHealthAnalyticsCustomModules for all CRM descendants of the given
     * parent. These modules are enabled by default.
     */
    createSecurityHealthAnalyticsCustomModule: {
      name: "CreateSecurityHealthAnalyticsCustomModule",
      requestType: CreateSecurityHealthAnalyticsCustomModuleRequest,
      requestStream: false,
      responseType: SecurityHealthAnalyticsCustomModule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              46,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              225,
              2,
              58,
              39,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              90,
              114,
              58,
              39,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              90,
              120,
              58,
              39,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              34,
              77,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              34,
              72,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the SecurityHealthAnalyticsCustomModule under the given name based
     * on the given update mask. Updating the enablement state is supported on
     * both resident and inherited modules (though resident modules cannot have an
     * enablement state of "inherited"). Updating the display name and custom
     * config of a module is supported on resident modules only.
     */
    updateSecurityHealthAnalyticsCustomModule: {
      name: "UpdateSecurityHealthAnalyticsCustomModule",
      requestType: UpdateSecurityHealthAnalyticsCustomModuleRequest,
      requestStream: false,
      responseType: SecurityHealthAnalyticsCustomModule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              51,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              219,
              3,
              58,
              39,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              90,
              154,
              1,
              58,
              39,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              50,
              111,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              90,
              160,
              1,
              58,
              39,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              50,
              117,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              50,
              112,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              104,
              101,
              97,
              108,
              116,
              104,
              95,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified SecurityHealthAnalyticsCustomModule and all of its
     * descendants in the CRM hierarchy. This method is only supported for
     * resident custom modules.
     */
    deleteSecurityHealthAnalyticsCustomModule: {
      name: "DeleteSecurityHealthAnalyticsCustomModule",
      requestType: DeleteSecurityHealthAnalyticsCustomModuleRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              230,
              1,
              90,
              73,
              42,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              90,
              79,
              42,
              77,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              42,
              72,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Simulates a given SecurityHealthAnalyticsCustomModule and Resource. */
    simulateSecurityHealthAnalyticsCustomModule: {
      name: "SimulateSecurityHealthAnalyticsCustomModule",
      requestType: SimulateSecurityHealthAnalyticsCustomModuleRequest,
      requestStream: false,
      responseType: SimulateSecurityHealthAnalyticsCustomModuleResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              138,
              2,
              58,
              1,
              42,
              90,
              85,
              58,
              1,
              42,
              34,
              80,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              101,
              90,
              91,
              58,
              1,
              42,
              34,
              86,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              101,
              34,
              81,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              72,
              101,
              97,
              108,
              116,
              104,
              65,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              115,
              105,
              109,
              117,
              108,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all effective Event Threat Detection custom modules for the
     * given parent. This includes resident modules defined at the scope of the
     * parent along with modules inherited from its ancestors.
     */
    listEffectiveEventThreatDetectionCustomModules: {
      name: "ListEffectiveEventThreatDetectionCustomModules",
      requestType: ListEffectiveEventThreatDetectionCustomModulesRequest,
      requestStream: false,
      responseType: ListEffectiveEventThreatDetectionCustomModulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              248,
              1,
              90,
              79,
              18,
              77,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              69,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              90,
              85,
              18,
              83,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              69,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              18,
              78,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              69,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets an effective ETD custom module. Retrieves the effective module at the
     * given level. The difference between an EffectiveCustomModule and a
     * CustomModule is that the fields for an EffectiveCustomModule are computed
     * from ancestors if needed. For example, the enablement_state for a
     * CustomModule can be either ENABLED, DISABLED, or INHERITED. Where as the
     * enablement_state for an EffectiveCustomModule is always computed to ENABLED
     * or DISABLED (the effective enablement_state).
     */
    getEffectiveEventThreatDetectionCustomModule: {
      name: "GetEffectiveEventThreatDetectionCustomModule",
      requestType: GetEffectiveEventThreatDetectionCustomModuleRequest,
      requestStream: false,
      responseType: EffectiveEventThreatDetectionCustomModule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              248,
              1,
              90,
              79,
              18,
              77,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              69,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              90,
              85,
              18,
              83,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              69,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              18,
              78,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              69,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all Event Threat Detection custom modules for the given
     * Resource Manager parent. This includes resident modules defined at the
     * scope of the parent along with modules inherited from ancestors.
     */
    listEventThreatDetectionCustomModules: {
      name: "ListEventThreatDetectionCustomModules",
      requestType: ListEventThreatDetectionCustomModulesRequest,
      requestStream: false,
      responseType: ListEventThreatDetectionCustomModulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              221,
              1,
              90,
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              90,
              76,
              18,
              74,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              18,
              69,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all resident Event Threat Detection custom modules under the
     * given Resource Manager parent and its descendants.
     */
    listDescendantEventThreatDetectionCustomModules: {
      name: "ListDescendantEventThreatDetectionCustomModules",
      requestType: ListDescendantEventThreatDetectionCustomModulesRequest,
      requestStream: false,
      responseType: ListDescendantEventThreatDetectionCustomModulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              138,
              2,
              90,
              85,
              18,
              83,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              108,
              105,
              115,
              116,
              68,
              101,
              115,
              99,
              101,
              110,
              100,
              97,
              110,
              116,
              90,
              91,
              18,
              89,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              108,
              105,
              115,
              116,
              68,
              101,
              115,
              99,
              101,
              110,
              100,
              97,
              110,
              116,
              18,
              84,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              108,
              105,
              115,
              116,
              68,
              101,
              115,
              99,
              101,
              110,
              100,
              97,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /** Gets an Event Threat Detection custom module. */
    getEventThreatDetectionCustomModule: {
      name: "GetEventThreatDetectionCustomModule",
      requestType: GetEventThreatDetectionCustomModuleRequest,
      requestStream: false,
      responseType: EventThreatDetectionCustomModule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              221,
              1,
              90,
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              90,
              76,
              18,
              74,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              18,
              69,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a resident Event Threat Detection custom module at the scope of the
     * given Resource Manager parent, and also creates inherited custom modules
     * for all descendants of the given parent. These modules are enabled by
     * default.
     */
    createEventThreatDetectionCustomModule: {
      name: "CreateEventThreatDetectionCustomModule",
      requestType: CreateEventThreatDetectionCustomModuleRequest,
      requestStream: false,
      responseType: EventThreatDetectionCustomModule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              43,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              207,
              2,
              58,
              36,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              90,
              108,
              58,
              36,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              34,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              90,
              114,
              58,
              36,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              34,
              74,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              34,
              69,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the Event Threat Detection custom module with the given name based
     * on the given update mask. Updating the enablement state is supported for
     * both resident and inherited modules (though resident modules cannot have an
     * enablement state of "inherited"). Updating the display name or
     * configuration of a module is supported for resident modules only. The type
     * of a module cannot be changed.
     */
    updateEventThreatDetectionCustomModule: {
      name: "UpdateEventThreatDetectionCustomModule",
      requestType: UpdateEventThreatDetectionCustomModuleRequest,
      requestStream: false,
      responseType: EventThreatDetectionCustomModule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              48,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              192,
              3,
              58,
              36,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              90,
              145,
              1,
              58,
              36,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              50,
              105,
              47,
              118,
              49,
              47,
              123,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              90,
              151,
              1,
              58,
              36,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              50,
              111,
              47,
              118,
              49,
              47,
              123,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              50,
              106,
              47,
              118,
              49,
              47,
              123,
              101,
              118,
              101,
              110,
              116,
              95,
              116,
              104,
              114,
              101,
              97,
              116,
              95,
              100,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified Event Threat Detection custom module and all of its
     * descendants in the Resource Manager hierarchy. This method is only
     * supported for resident custom modules.
     */
    deleteEventThreatDetectionCustomModule: {
      name: "DeleteEventThreatDetectionCustomModule",
      requestType: DeleteEventThreatDetectionCustomModuleRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              221,
              1,
              90,
              70,
              42,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              90,
              76,
              42,
              74,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              42,
              69,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Validates the given Event Threat Detection custom module. */
    validateEventThreatDetectionCustomModule: {
      name: "ValidateEventThreatDetectionCustomModule",
      requestType: ValidateEventThreatDetectionCustomModuleRequest,
      requestStream: false,
      responseType: ValidateEventThreatDetectionCustomModuleResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              129,
              2,
              58,
              1,
              42,
              90,
              82,
              58,
              1,
              42,
              34,
              77,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              101,
              90,
              88,
              58,
              1,
              42,
              34,
              83,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              101,
              34,
              78,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              101,
              110,
              116,
              84,
              104,
              114,
              101,
              97,
              116,
              68,
              101,
              116,
              101,
              99,
              116,
              105,
              111,
              110,
              67,
              117,
              115,
              116,
              111,
              109,
              77,
              111,
              100,
              117,
              108,
              101,
              115,
              58,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets service settings for the specified Security Command Center service. */
    getSecurityCenterService: {
      name: "GetSecurityCenterService",
      requestType: GetSecurityCenterServiceRequest,
      requestStream: false,
      responseType: SecurityCenterService,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              188,
              1,
              90,
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              67,
              101,
              110,
              116,
              101,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              90,
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              67,
              101,
              110,
              116,
              101,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              67,
              101,
              110,
              116,
              101,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a list of all Security Command Center services for the given
     * parent.
     */
    listSecurityCenterServices: {
      name: "ListSecurityCenterServices",
      requestType: ListSecurityCenterServicesRequest,
      requestStream: false,
      responseType: ListSecurityCenterServicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              188,
              1,
              90,
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              67,
              101,
              110,
              116,
              101,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              90,
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              67,
              101,
              110,
              116,
              101,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              67,
              101,
              110,
              116,
              101,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a Security Command Center service using the given update mask. */
    updateSecurityCenterService: {
      name: "UpdateSecurityCenterService",
      requestType: UpdateSecurityCenterServiceRequest,
      requestStream: false,
      responseType: SecurityCenterService,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              99,
              101,
              110,
              116,
              101,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              207,
              2,
              58,
              23,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              99,
              101,
              110,
              116,
              101,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              90,
              108,
              58,
              23,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              99,
              101,
              110,
              116,
              101,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              50,
              81,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              99,
              101,
              110,
              116,
              101,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              67,
              101,
              110,
              116,
              101,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              90,
              114,
              58,
              23,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              99,
              101,
              110,
              116,
              101,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              50,
              87,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              99,
              101,
              110,
              116,
              101,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              67,
              101,
              110,
              116,
              101,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
              50,
              82,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              95,
              99,
              101,
              110,
              116,
              101,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              67,
              101,
              110,
              116,
              101,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SecurityCenterManagementServiceImplementation<CallContextExt = {}> {
  /**
   * Returns a list of all EffectiveSecurityHealthAnalyticsCustomModules for the
   * given parent. This includes resident modules defined at the scope of the
   * parent, and inherited modules, inherited from CRM ancestors (no
   * descendants).
   */
  listEffectiveSecurityHealthAnalyticsCustomModules(
    request: ListEffectiveSecurityHealthAnalyticsCustomModulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEffectiveSecurityHealthAnalyticsCustomModulesResponse>>;
  /** Gets details of a single EffectiveSecurityHealthAnalyticsCustomModule. */
  getEffectiveSecurityHealthAnalyticsCustomModule(
    request: GetEffectiveSecurityHealthAnalyticsCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EffectiveSecurityHealthAnalyticsCustomModule>>;
  /**
   * Returns a list of all SecurityHealthAnalyticsCustomModules for the given
   * parent. This includes resident modules defined at the scope of the parent,
   * and inherited modules, inherited from CRM ancestors (no descendants).
   */
  listSecurityHealthAnalyticsCustomModules(
    request: ListSecurityHealthAnalyticsCustomModulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSecurityHealthAnalyticsCustomModulesResponse>>;
  /**
   * Returns a list of all resident SecurityHealthAnalyticsCustomModules under
   * the given CRM parent and all of the parent's CRM descendants.
   */
  listDescendantSecurityHealthAnalyticsCustomModules(
    request: ListDescendantSecurityHealthAnalyticsCustomModulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDescendantSecurityHealthAnalyticsCustomModulesResponse>>;
  /** Retrieves a SecurityHealthAnalyticsCustomModule. */
  getSecurityHealthAnalyticsCustomModule(
    request: GetSecurityHealthAnalyticsCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecurityHealthAnalyticsCustomModule>>;
  /**
   * Creates a resident SecurityHealthAnalyticsCustomModule at the scope of the
   * given CRM parent, and also creates inherited
   * SecurityHealthAnalyticsCustomModules for all CRM descendants of the given
   * parent. These modules are enabled by default.
   */
  createSecurityHealthAnalyticsCustomModule(
    request: CreateSecurityHealthAnalyticsCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecurityHealthAnalyticsCustomModule>>;
  /**
   * Updates the SecurityHealthAnalyticsCustomModule under the given name based
   * on the given update mask. Updating the enablement state is supported on
   * both resident and inherited modules (though resident modules cannot have an
   * enablement state of "inherited"). Updating the display name and custom
   * config of a module is supported on resident modules only.
   */
  updateSecurityHealthAnalyticsCustomModule(
    request: UpdateSecurityHealthAnalyticsCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecurityHealthAnalyticsCustomModule>>;
  /**
   * Deletes the specified SecurityHealthAnalyticsCustomModule and all of its
   * descendants in the CRM hierarchy. This method is only supported for
   * resident custom modules.
   */
  deleteSecurityHealthAnalyticsCustomModule(
    request: DeleteSecurityHealthAnalyticsCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Simulates a given SecurityHealthAnalyticsCustomModule and Resource. */
  simulateSecurityHealthAnalyticsCustomModule(
    request: SimulateSecurityHealthAnalyticsCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SimulateSecurityHealthAnalyticsCustomModuleResponse>>;
  /**
   * Lists all effective Event Threat Detection custom modules for the
   * given parent. This includes resident modules defined at the scope of the
   * parent along with modules inherited from its ancestors.
   */
  listEffectiveEventThreatDetectionCustomModules(
    request: ListEffectiveEventThreatDetectionCustomModulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEffectiveEventThreatDetectionCustomModulesResponse>>;
  /**
   * Gets an effective ETD custom module. Retrieves the effective module at the
   * given level. The difference between an EffectiveCustomModule and a
   * CustomModule is that the fields for an EffectiveCustomModule are computed
   * from ancestors if needed. For example, the enablement_state for a
   * CustomModule can be either ENABLED, DISABLED, or INHERITED. Where as the
   * enablement_state for an EffectiveCustomModule is always computed to ENABLED
   * or DISABLED (the effective enablement_state).
   */
  getEffectiveEventThreatDetectionCustomModule(
    request: GetEffectiveEventThreatDetectionCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EffectiveEventThreatDetectionCustomModule>>;
  /**
   * Lists all Event Threat Detection custom modules for the given
   * Resource Manager parent. This includes resident modules defined at the
   * scope of the parent along with modules inherited from ancestors.
   */
  listEventThreatDetectionCustomModules(
    request: ListEventThreatDetectionCustomModulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEventThreatDetectionCustomModulesResponse>>;
  /**
   * Lists all resident Event Threat Detection custom modules under the
   * given Resource Manager parent and its descendants.
   */
  listDescendantEventThreatDetectionCustomModules(
    request: ListDescendantEventThreatDetectionCustomModulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDescendantEventThreatDetectionCustomModulesResponse>>;
  /** Gets an Event Threat Detection custom module. */
  getEventThreatDetectionCustomModule(
    request: GetEventThreatDetectionCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EventThreatDetectionCustomModule>>;
  /**
   * Creates a resident Event Threat Detection custom module at the scope of the
   * given Resource Manager parent, and also creates inherited custom modules
   * for all descendants of the given parent. These modules are enabled by
   * default.
   */
  createEventThreatDetectionCustomModule(
    request: CreateEventThreatDetectionCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EventThreatDetectionCustomModule>>;
  /**
   * Updates the Event Threat Detection custom module with the given name based
   * on the given update mask. Updating the enablement state is supported for
   * both resident and inherited modules (though resident modules cannot have an
   * enablement state of "inherited"). Updating the display name or
   * configuration of a module is supported for resident modules only. The type
   * of a module cannot be changed.
   */
  updateEventThreatDetectionCustomModule(
    request: UpdateEventThreatDetectionCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EventThreatDetectionCustomModule>>;
  /**
   * Deletes the specified Event Threat Detection custom module and all of its
   * descendants in the Resource Manager hierarchy. This method is only
   * supported for resident custom modules.
   */
  deleteEventThreatDetectionCustomModule(
    request: DeleteEventThreatDetectionCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Validates the given Event Threat Detection custom module. */
  validateEventThreatDetectionCustomModule(
    request: ValidateEventThreatDetectionCustomModuleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ValidateEventThreatDetectionCustomModuleResponse>>;
  /** Gets service settings for the specified Security Command Center service. */
  getSecurityCenterService(
    request: GetSecurityCenterServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecurityCenterService>>;
  /**
   * Returns a list of all Security Command Center services for the given
   * parent.
   */
  listSecurityCenterServices(
    request: ListSecurityCenterServicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSecurityCenterServicesResponse>>;
  /** Updates a Security Command Center service using the given update mask. */
  updateSecurityCenterService(
    request: UpdateSecurityCenterServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SecurityCenterService>>;
}

export interface SecurityCenterManagementClient<CallOptionsExt = {}> {
  /**
   * Returns a list of all EffectiveSecurityHealthAnalyticsCustomModules for the
   * given parent. This includes resident modules defined at the scope of the
   * parent, and inherited modules, inherited from CRM ancestors (no
   * descendants).
   */
  listEffectiveSecurityHealthAnalyticsCustomModules(
    request: DeepPartial<ListEffectiveSecurityHealthAnalyticsCustomModulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEffectiveSecurityHealthAnalyticsCustomModulesResponse>;
  /** Gets details of a single EffectiveSecurityHealthAnalyticsCustomModule. */
  getEffectiveSecurityHealthAnalyticsCustomModule(
    request: DeepPartial<GetEffectiveSecurityHealthAnalyticsCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EffectiveSecurityHealthAnalyticsCustomModule>;
  /**
   * Returns a list of all SecurityHealthAnalyticsCustomModules for the given
   * parent. This includes resident modules defined at the scope of the parent,
   * and inherited modules, inherited from CRM ancestors (no descendants).
   */
  listSecurityHealthAnalyticsCustomModules(
    request: DeepPartial<ListSecurityHealthAnalyticsCustomModulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSecurityHealthAnalyticsCustomModulesResponse>;
  /**
   * Returns a list of all resident SecurityHealthAnalyticsCustomModules under
   * the given CRM parent and all of the parent's CRM descendants.
   */
  listDescendantSecurityHealthAnalyticsCustomModules(
    request: DeepPartial<ListDescendantSecurityHealthAnalyticsCustomModulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDescendantSecurityHealthAnalyticsCustomModulesResponse>;
  /** Retrieves a SecurityHealthAnalyticsCustomModule. */
  getSecurityHealthAnalyticsCustomModule(
    request: DeepPartial<GetSecurityHealthAnalyticsCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecurityHealthAnalyticsCustomModule>;
  /**
   * Creates a resident SecurityHealthAnalyticsCustomModule at the scope of the
   * given CRM parent, and also creates inherited
   * SecurityHealthAnalyticsCustomModules for all CRM descendants of the given
   * parent. These modules are enabled by default.
   */
  createSecurityHealthAnalyticsCustomModule(
    request: DeepPartial<CreateSecurityHealthAnalyticsCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecurityHealthAnalyticsCustomModule>;
  /**
   * Updates the SecurityHealthAnalyticsCustomModule under the given name based
   * on the given update mask. Updating the enablement state is supported on
   * both resident and inherited modules (though resident modules cannot have an
   * enablement state of "inherited"). Updating the display name and custom
   * config of a module is supported on resident modules only.
   */
  updateSecurityHealthAnalyticsCustomModule(
    request: DeepPartial<UpdateSecurityHealthAnalyticsCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecurityHealthAnalyticsCustomModule>;
  /**
   * Deletes the specified SecurityHealthAnalyticsCustomModule and all of its
   * descendants in the CRM hierarchy. This method is only supported for
   * resident custom modules.
   */
  deleteSecurityHealthAnalyticsCustomModule(
    request: DeepPartial<DeleteSecurityHealthAnalyticsCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Simulates a given SecurityHealthAnalyticsCustomModule and Resource. */
  simulateSecurityHealthAnalyticsCustomModule(
    request: DeepPartial<SimulateSecurityHealthAnalyticsCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SimulateSecurityHealthAnalyticsCustomModuleResponse>;
  /**
   * Lists all effective Event Threat Detection custom modules for the
   * given parent. This includes resident modules defined at the scope of the
   * parent along with modules inherited from its ancestors.
   */
  listEffectiveEventThreatDetectionCustomModules(
    request: DeepPartial<ListEffectiveEventThreatDetectionCustomModulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEffectiveEventThreatDetectionCustomModulesResponse>;
  /**
   * Gets an effective ETD custom module. Retrieves the effective module at the
   * given level. The difference between an EffectiveCustomModule and a
   * CustomModule is that the fields for an EffectiveCustomModule are computed
   * from ancestors if needed. For example, the enablement_state for a
   * CustomModule can be either ENABLED, DISABLED, or INHERITED. Where as the
   * enablement_state for an EffectiveCustomModule is always computed to ENABLED
   * or DISABLED (the effective enablement_state).
   */
  getEffectiveEventThreatDetectionCustomModule(
    request: DeepPartial<GetEffectiveEventThreatDetectionCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EffectiveEventThreatDetectionCustomModule>;
  /**
   * Lists all Event Threat Detection custom modules for the given
   * Resource Manager parent. This includes resident modules defined at the
   * scope of the parent along with modules inherited from ancestors.
   */
  listEventThreatDetectionCustomModules(
    request: DeepPartial<ListEventThreatDetectionCustomModulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEventThreatDetectionCustomModulesResponse>;
  /**
   * Lists all resident Event Threat Detection custom modules under the
   * given Resource Manager parent and its descendants.
   */
  listDescendantEventThreatDetectionCustomModules(
    request: DeepPartial<ListDescendantEventThreatDetectionCustomModulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDescendantEventThreatDetectionCustomModulesResponse>;
  /** Gets an Event Threat Detection custom module. */
  getEventThreatDetectionCustomModule(
    request: DeepPartial<GetEventThreatDetectionCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EventThreatDetectionCustomModule>;
  /**
   * Creates a resident Event Threat Detection custom module at the scope of the
   * given Resource Manager parent, and also creates inherited custom modules
   * for all descendants of the given parent. These modules are enabled by
   * default.
   */
  createEventThreatDetectionCustomModule(
    request: DeepPartial<CreateEventThreatDetectionCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EventThreatDetectionCustomModule>;
  /**
   * Updates the Event Threat Detection custom module with the given name based
   * on the given update mask. Updating the enablement state is supported for
   * both resident and inherited modules (though resident modules cannot have an
   * enablement state of "inherited"). Updating the display name or
   * configuration of a module is supported for resident modules only. The type
   * of a module cannot be changed.
   */
  updateEventThreatDetectionCustomModule(
    request: DeepPartial<UpdateEventThreatDetectionCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EventThreatDetectionCustomModule>;
  /**
   * Deletes the specified Event Threat Detection custom module and all of its
   * descendants in the Resource Manager hierarchy. This method is only
   * supported for resident custom modules.
   */
  deleteEventThreatDetectionCustomModule(
    request: DeepPartial<DeleteEventThreatDetectionCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Validates the given Event Threat Detection custom module. */
  validateEventThreatDetectionCustomModule(
    request: DeepPartial<ValidateEventThreatDetectionCustomModuleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ValidateEventThreatDetectionCustomModuleResponse>;
  /** Gets service settings for the specified Security Command Center service. */
  getSecurityCenterService(
    request: DeepPartial<GetSecurityCenterServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecurityCenterService>;
  /**
   * Returns a list of all Security Command Center services for the given
   * parent.
   */
  listSecurityCenterServices(
    request: DeepPartial<ListSecurityCenterServicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSecurityCenterServicesResponse>;
  /** Updates a Security Command Center service using the given update mask. */
  updateSecurityCenterService(
    request: DeepPartial<UpdateSecurityCenterServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SecurityCenterService>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
