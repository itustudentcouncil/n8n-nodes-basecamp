// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/oracledatabase/v1/oracledatabase.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { AutonomousDatabase, GenerateType, generateTypeFromJSON, generateTypeToJSON } from "./autonomous_database.js";
import { AutonomousDatabaseCharacterSet } from "./autonomous_database_character_set.js";
import { AutonomousDatabaseBackup } from "./autonomous_db_backup.js";
import { AutonomousDbVersion } from "./autonomous_db_version.js";
import { DbNode } from "./db_node.js";
import { DbServer } from "./db_server.js";
import { DbSystemShape } from "./db_system_shape.js";
import { Entitlement } from "./entitlement.js";
import { CloudExadataInfrastructure } from "./exadata_infra.js";
import { GiVersion } from "./gi_version.js";
import { CloudVmCluster } from "./vm_cluster.js";

export const protobufPackage = "google.cloud.oracledatabase.v1";

/** The request for `CloudExadataInfrastructures.List`. */
export interface ListCloudExadataInfrastructuresRequest {
  /**
   * Required. The parent value for CloudExadataInfrastructure in the following
   * format: projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If unspecified, at most 50 Exadata infrastructures will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** The response for `CloudExadataInfrastructures.list`. */
export interface ListCloudExadataInfrastructuresResponse {
  /** The list of Exadata Infrastructures. */
  cloudExadataInfrastructures: CloudExadataInfrastructure[];
  /** A token for fetching next page of response. */
  nextPageToken: string;
}

/** The request for `CloudExadataInfrastructure.Get`. */
export interface GetCloudExadataInfrastructureRequest {
  /**
   * Required. The name of the Cloud Exadata Infrastructure in the following
   * format:
   * projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}.
   */
  name: string;
}

/** The request for `CloudExadataInfrastructure.Create`. */
export interface CreateCloudExadataInfrastructureRequest {
  /**
   * Required. The parent value for CloudExadataInfrastructure in the following
   * format: projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Required. The ID of the Exadata Infrastructure to create. This value is
   * restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
   * 63 characters in length. The value must start with a letter and end with a
   * letter or a number.
   */
  cloudExadataInfrastructureId: string;
  /** Required. Details of the Exadata Infrastructure instance to create. */
  cloudExadataInfrastructure:
    | CloudExadataInfrastructure
    | undefined;
  /**
   * Optional. An optional ID to identify the request. This value is used to
   * identify duplicate requests. If you make a request with the same request ID
   * and the original request is still in progress or completed, the server
   * ignores the second request. This prevents clients from
   * accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** The request for `CloudExadataInfrastructure.Delete`. */
export interface DeleteCloudExadataInfrastructureRequest {
  /**
   * Required. The name of the Cloud Exadata Infrastructure in the following
   * format:
   * projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}.
   */
  name: string;
  /**
   * Optional. An optional ID to identify the request. This value is used to
   * identify duplicate requests. If you make a request with the same request ID
   * and the original request is still in progress or completed, the server
   * ignores the second request. This prevents clients from
   * accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set to true, all VM clusters for this Exadata Infrastructure
   * will be deleted. An Exadata Infrastructure can only be deleted once all its
   * VM clusters have been deleted.
   */
  force: boolean;
}

/** The request for `CloudVmCluster.List`. */
export interface ListCloudVmClustersRequest {
  /**
   * Required. The name of the parent in the following format:
   * projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Optional. The number of VM clusters to return.
   * If unspecified, at most 50 VM clusters will be returned.
   * The maximum value is 1,000.
   */
  pageSize: number;
  /** Optional. A token identifying the page of results the server returns. */
  pageToken: string;
  /** Optional. An expression for filtering the results of the request. */
  filter: string;
}

/** The response for `CloudVmCluster.List`. */
export interface ListCloudVmClustersResponse {
  /** The list of VM Clusters. */
  cloudVmClusters: CloudVmCluster[];
  /** A token to fetch the next page of results. */
  nextPageToken: string;
}

/** The request for `CloudVmCluster.Get`. */
export interface GetCloudVmClusterRequest {
  /**
   * Required. The name of the Cloud VM Cluster in the following format:
   * projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}.
   */
  name: string;
}

/** The request for `CloudVmCluster.Create`. */
export interface CreateCloudVmClusterRequest {
  /**
   * Required. The name of the parent in the following format:
   * projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Required. The ID of the VM Cluster to create. This value is restricted
   * to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of 63
   * characters in length. The value must start with a letter and end with
   * a letter or a number.
   */
  cloudVmClusterId: string;
  /** Required. The resource being created */
  cloudVmCluster:
    | CloudVmCluster
    | undefined;
  /**
   * Optional. An optional ID to identify the request. This value is used to
   * identify duplicate requests. If you make a request with the same request ID
   * and the original request is still in progress or completed, the server
   * ignores the second request. This prevents clients from
   * accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** The request for `CloudVmCluster.Delete`. */
export interface DeleteCloudVmClusterRequest {
  /**
   * Required. The name of the Cloud VM Cluster in the following format:
   * projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}.
   */
  name: string;
  /**
   * Optional. An optional ID to identify the request. This value is used to
   * identify duplicate requests. If you make a request with the same request ID
   * and the original request is still in progress or completed, the server
   * ignores the second request. This prevents clients from
   * accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set to true, all child resources for the VM Cluster will be
   * deleted. A VM Cluster can only be deleted once all its child resources have
   * been deleted.
   */
  force: boolean;
}

/** The request for `Entitlement.List`. */
export interface ListEntitlementsRequest {
  /**
   * Required. The parent value for the entitlement in the following format:
   * projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If unspecified, a maximum of 50 entitlements will be returned.
   * The maximum value is 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** The response for `Entitlement.List`. */
export interface ListEntitlementsResponse {
  /** The list of Entitlements */
  entitlements: Entitlement[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** The request for `DbServer.List`. */
export interface ListDbServersRequest {
  /**
   * Required. The parent value for database server in the following format:
   * projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloudExadataInfrastructure}.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If unspecified, a maximum of 50 db servers will be returned.
   * The maximum value is 1000; values above 1000 will be reset to 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** The response for `DbServer.List`. */
export interface ListDbServersResponse {
  /** The list of database servers. */
  dbServers: DbServer[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** The request for `DbNode.List`. */
export interface ListDbNodesRequest {
  /**
   * Required. The parent value for database node in the following format:
   * projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If unspecified, at most 50 db nodes will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the node should return. */
  pageToken: string;
}

/** The response for `DbNode.List`. */
export interface ListDbNodesResponse {
  /** The list of DB Nodes */
  dbNodes: DbNode[];
  /** A token identifying a page of results the node should return. */
  nextPageToken: string;
}

/** The request for `GiVersion.List`. */
export interface ListGiVersionsRequest {
  /**
   * Required. The parent value for Grid Infrastructure Version in the following
   * format: Format: projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If unspecified, a maximum of 50 Oracle Grid Infrastructure (GI) versions
   * will be returned. The maximum value is 1000; values above 1000 will be
   * reset to 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** The response for `GiVersion.List`. */
export interface ListGiVersionsResponse {
  /** The list of Oracle Grid Infrastructure (GI) versions. */
  giVersions: GiVersion[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** The request for `DbSystemShape.List`. */
export interface ListDbSystemShapesRequest {
  /**
   * Required. The parent value for Database System Shapes in the following
   * format: projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If unspecified, at most 50 database system shapes will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** The response for `DbSystemShape.List`. */
export interface ListDbSystemShapesResponse {
  /** The list of Database System shapes. */
  dbSystemShapes: DbSystemShape[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. The status of the operation. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
  /**
   * Output only. An estimated percentage of the operation that has been
   * completed at a given moment of time, between 0 and 100.
   */
  percentComplete: number;
}

/** The request for `AutonomousDatabase.List`. */
export interface ListAutonomousDatabasesRequest {
  /**
   * Required. The parent value for the Autonomous Database in the following
   * format: projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If unspecified, at most 50 Autonomous Database will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. An expression for filtering the results of the request. */
  filter: string;
  /** Optional. An expression for ordering the results of the request. */
  orderBy: string;
}

/** The response for `AutonomousDatabase.List`. */
export interface ListAutonomousDatabasesResponse {
  /** The list of Autonomous Databases. */
  autonomousDatabases: AutonomousDatabase[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** The request for `AutonomousDatabase.Get`. */
export interface GetAutonomousDatabaseRequest {
  /**
   * Required. The name of the Autonomous Database in the following format:
   * projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
   */
  name: string;
}

/** The request for `AutonomousDatabase.Create`. */
export interface CreateAutonomousDatabaseRequest {
  /**
   * Required. The name of the parent in the following format:
   * projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Required. The ID of the Autonomous Database to create. This value is
   * restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
   * 63 characters in length. The value must start with a letter and end with a
   * letter or a number.
   */
  autonomousDatabaseId: string;
  /** Required. The Autonomous Database being created. */
  autonomousDatabase:
    | AutonomousDatabase
    | undefined;
  /**
   * Optional. An optional ID to identify the request. This value is used to
   * identify duplicate requests. If you make a request with the same request ID
   * and the original request is still in progress or completed, the server
   * ignores the second request. This prevents clients from
   * accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** The request for `AutonomousDatabase.Delete`. */
export interface DeleteAutonomousDatabaseRequest {
  /**
   * Required. The name of the resource in the following format:
   * projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
   */
  name: string;
  /**
   * Optional. An optional ID to identify the request. This value is used to
   * identify duplicate requests. If you make a request with the same request ID
   * and the original request is still in progress or completed, the server
   * ignores the second request. This prevents clients from
   * accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** The request for `AutonomousDatabase.Restore`. */
export interface RestoreAutonomousDatabaseRequest {
  /**
   * Required. The name of the Autonomous Database in the following format:
   * projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
   */
  name: string;
  /** Required. The time and date to restore the database to. */
  restoreTime: Date | undefined;
}

/** The request for `AutonomousDatabase.GenerateWallet`. */
export interface GenerateAutonomousDatabaseWalletRequest {
  /**
   * Required. The name of the Autonomous Database in the following format:
   * projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
   */
  name: string;
  /**
   * Optional. The type of wallet generation for the Autonomous Database. The
   * default value is SINGLE.
   */
  type: GenerateType;
  /**
   * Optional. True when requesting regional connection strings in PDB connect
   * info, applicable to cross-region Data Guard only.
   */
  isRegional: boolean;
  /**
   * Required. The password used to encrypt the keys inside the wallet. The
   * password must be a minimum of 8 characters.
   */
  password: string;
}

/** The response for `AutonomousDatabase.GenerateWallet`. */
export interface GenerateAutonomousDatabaseWalletResponse {
  /** Output only. The base64 encoded wallet files. */
  archiveContent: Buffer;
}

/** The request for `AutonomousDbVersion.List`. */
export interface ListAutonomousDbVersionsRequest {
  /**
   * Required. The parent value for the Autonomous Database in the following
   * format: projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If unspecified, at most 50 Autonomous DB Versions will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** The response for `AutonomousDbVersion.List`. */
export interface ListAutonomousDbVersionsResponse {
  /** The list of Autonomous Database versions. */
  autonomousDbVersions: AutonomousDbVersion[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** The request for `AutonomousDatabaseCharacterSet.List`. */
export interface ListAutonomousDatabaseCharacterSetsRequest {
  /**
   * Required. The parent value for the Autonomous Database in the following
   * format: projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If unspecified, at most 50 Autonomous DB Character Sets will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /**
   * Optional. An expression for filtering the results of the request. Only the
   * **character_set_type** field is supported in the following format:
   * `character_set_type="{characterSetType}"`. Accepted values include
   * `DATABASE` and `NATIONAL`.
   */
  filter: string;
}

/** The response for `AutonomousDatabaseCharacterSet.List`. */
export interface ListAutonomousDatabaseCharacterSetsResponse {
  /** The list of Autonomous Database Character Sets. */
  autonomousDatabaseCharacterSets: AutonomousDatabaseCharacterSet[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** The request for `AutonomousDatabaseBackup.List`. */
export interface ListAutonomousDatabaseBackupsRequest {
  /**
   * Required. The parent value for ListAutonomousDatabaseBackups in the
   * following format: projects/{project}/locations/{location}.
   */
  parent: string;
  /**
   * Optional. An expression for filtering the results of the request. Only the
   * **autonomous_database_id** field is supported in the following format:
   * `autonomous_database_id="{autonomous_database_id}"`. The accepted values
   * must be a valid Autonomous Database ID, limited to the naming
   * restrictions of the ID: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
   * The ID must start with a letter, end with a letter or a number, and be
   * a maximum of 63 characters.
   */
  filter: string;
  /**
   * Optional. The maximum number of items to return.
   * If unspecified, at most 50 Autonomous DB Backups will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** The response for `AutonomousDatabaseBackup.List`. */
export interface ListAutonomousDatabaseBackupsResponse {
  /** The list of Autonomous Database Backups. */
  autonomousDatabaseBackups: AutonomousDatabaseBackup[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

function createBaseListCloudExadataInfrastructuresRequest(): ListCloudExadataInfrastructuresRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCloudExadataInfrastructuresRequest: MessageFns<ListCloudExadataInfrastructuresRequest> = {
  encode(message: ListCloudExadataInfrastructuresRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCloudExadataInfrastructuresRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCloudExadataInfrastructuresRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCloudExadataInfrastructuresRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCloudExadataInfrastructuresRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCloudExadataInfrastructuresRequest>): ListCloudExadataInfrastructuresRequest {
    return ListCloudExadataInfrastructuresRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCloudExadataInfrastructuresRequest>): ListCloudExadataInfrastructuresRequest {
    const message = createBaseListCloudExadataInfrastructuresRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCloudExadataInfrastructuresResponse(): ListCloudExadataInfrastructuresResponse {
  return { cloudExadataInfrastructures: [], nextPageToken: "" };
}

export const ListCloudExadataInfrastructuresResponse: MessageFns<ListCloudExadataInfrastructuresResponse> = {
  encode(message: ListCloudExadataInfrastructuresResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cloudExadataInfrastructures) {
      CloudExadataInfrastructure.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCloudExadataInfrastructuresResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCloudExadataInfrastructuresResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cloudExadataInfrastructures.push(CloudExadataInfrastructure.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCloudExadataInfrastructuresResponse {
    return {
      cloudExadataInfrastructures: globalThis.Array.isArray(object?.cloudExadataInfrastructures)
        ? object.cloudExadataInfrastructures.map((e: any) => CloudExadataInfrastructure.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCloudExadataInfrastructuresResponse): unknown {
    const obj: any = {};
    if (message.cloudExadataInfrastructures?.length) {
      obj.cloudExadataInfrastructures = message.cloudExadataInfrastructures.map((e) =>
        CloudExadataInfrastructure.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCloudExadataInfrastructuresResponse>): ListCloudExadataInfrastructuresResponse {
    return ListCloudExadataInfrastructuresResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCloudExadataInfrastructuresResponse>): ListCloudExadataInfrastructuresResponse {
    const message = createBaseListCloudExadataInfrastructuresResponse();
    message.cloudExadataInfrastructures =
      object.cloudExadataInfrastructures?.map((e) => CloudExadataInfrastructure.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetCloudExadataInfrastructureRequest(): GetCloudExadataInfrastructureRequest {
  return { name: "" };
}

export const GetCloudExadataInfrastructureRequest: MessageFns<GetCloudExadataInfrastructureRequest> = {
  encode(message: GetCloudExadataInfrastructureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCloudExadataInfrastructureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCloudExadataInfrastructureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCloudExadataInfrastructureRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCloudExadataInfrastructureRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCloudExadataInfrastructureRequest>): GetCloudExadataInfrastructureRequest {
    return GetCloudExadataInfrastructureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCloudExadataInfrastructureRequest>): GetCloudExadataInfrastructureRequest {
    const message = createBaseGetCloudExadataInfrastructureRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateCloudExadataInfrastructureRequest(): CreateCloudExadataInfrastructureRequest {
  return { parent: "", cloudExadataInfrastructureId: "", cloudExadataInfrastructure: undefined, requestId: "" };
}

export const CreateCloudExadataInfrastructureRequest: MessageFns<CreateCloudExadataInfrastructureRequest> = {
  encode(message: CreateCloudExadataInfrastructureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.cloudExadataInfrastructureId !== "") {
      writer.uint32(18).string(message.cloudExadataInfrastructureId);
    }
    if (message.cloudExadataInfrastructure !== undefined) {
      CloudExadataInfrastructure.encode(message.cloudExadataInfrastructure, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCloudExadataInfrastructureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCloudExadataInfrastructureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cloudExadataInfrastructureId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cloudExadataInfrastructure = CloudExadataInfrastructure.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCloudExadataInfrastructureRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      cloudExadataInfrastructureId: isSet(object.cloudExadataInfrastructureId)
        ? globalThis.String(object.cloudExadataInfrastructureId)
        : "",
      cloudExadataInfrastructure: isSet(object.cloudExadataInfrastructure)
        ? CloudExadataInfrastructure.fromJSON(object.cloudExadataInfrastructure)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateCloudExadataInfrastructureRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.cloudExadataInfrastructureId !== "") {
      obj.cloudExadataInfrastructureId = message.cloudExadataInfrastructureId;
    }
    if (message.cloudExadataInfrastructure !== undefined) {
      obj.cloudExadataInfrastructure = CloudExadataInfrastructure.toJSON(message.cloudExadataInfrastructure);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCloudExadataInfrastructureRequest>): CreateCloudExadataInfrastructureRequest {
    return CreateCloudExadataInfrastructureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCloudExadataInfrastructureRequest>): CreateCloudExadataInfrastructureRequest {
    const message = createBaseCreateCloudExadataInfrastructureRequest();
    message.parent = object.parent ?? "";
    message.cloudExadataInfrastructureId = object.cloudExadataInfrastructureId ?? "";
    message.cloudExadataInfrastructure =
      (object.cloudExadataInfrastructure !== undefined && object.cloudExadataInfrastructure !== null)
        ? CloudExadataInfrastructure.fromPartial(object.cloudExadataInfrastructure)
        : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteCloudExadataInfrastructureRequest(): DeleteCloudExadataInfrastructureRequest {
  return { name: "", requestId: "", force: false };
}

export const DeleteCloudExadataInfrastructureRequest: MessageFns<DeleteCloudExadataInfrastructureRequest> = {
  encode(message: DeleteCloudExadataInfrastructureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCloudExadataInfrastructureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCloudExadataInfrastructureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCloudExadataInfrastructureRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteCloudExadataInfrastructureRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCloudExadataInfrastructureRequest>): DeleteCloudExadataInfrastructureRequest {
    return DeleteCloudExadataInfrastructureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCloudExadataInfrastructureRequest>): DeleteCloudExadataInfrastructureRequest {
    const message = createBaseDeleteCloudExadataInfrastructureRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListCloudVmClustersRequest(): ListCloudVmClustersRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListCloudVmClustersRequest: MessageFns<ListCloudVmClustersRequest> = {
  encode(message: ListCloudVmClustersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCloudVmClustersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCloudVmClustersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCloudVmClustersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListCloudVmClustersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCloudVmClustersRequest>): ListCloudVmClustersRequest {
    return ListCloudVmClustersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCloudVmClustersRequest>): ListCloudVmClustersRequest {
    const message = createBaseListCloudVmClustersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListCloudVmClustersResponse(): ListCloudVmClustersResponse {
  return { cloudVmClusters: [], nextPageToken: "" };
}

export const ListCloudVmClustersResponse: MessageFns<ListCloudVmClustersResponse> = {
  encode(message: ListCloudVmClustersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cloudVmClusters) {
      CloudVmCluster.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCloudVmClustersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCloudVmClustersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cloudVmClusters.push(CloudVmCluster.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCloudVmClustersResponse {
    return {
      cloudVmClusters: globalThis.Array.isArray(object?.cloudVmClusters)
        ? object.cloudVmClusters.map((e: any) => CloudVmCluster.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCloudVmClustersResponse): unknown {
    const obj: any = {};
    if (message.cloudVmClusters?.length) {
      obj.cloudVmClusters = message.cloudVmClusters.map((e) => CloudVmCluster.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCloudVmClustersResponse>): ListCloudVmClustersResponse {
    return ListCloudVmClustersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCloudVmClustersResponse>): ListCloudVmClustersResponse {
    const message = createBaseListCloudVmClustersResponse();
    message.cloudVmClusters = object.cloudVmClusters?.map((e) => CloudVmCluster.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetCloudVmClusterRequest(): GetCloudVmClusterRequest {
  return { name: "" };
}

export const GetCloudVmClusterRequest: MessageFns<GetCloudVmClusterRequest> = {
  encode(message: GetCloudVmClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCloudVmClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCloudVmClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCloudVmClusterRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCloudVmClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCloudVmClusterRequest>): GetCloudVmClusterRequest {
    return GetCloudVmClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCloudVmClusterRequest>): GetCloudVmClusterRequest {
    const message = createBaseGetCloudVmClusterRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateCloudVmClusterRequest(): CreateCloudVmClusterRequest {
  return { parent: "", cloudVmClusterId: "", cloudVmCluster: undefined, requestId: "" };
}

export const CreateCloudVmClusterRequest: MessageFns<CreateCloudVmClusterRequest> = {
  encode(message: CreateCloudVmClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.cloudVmClusterId !== "") {
      writer.uint32(18).string(message.cloudVmClusterId);
    }
    if (message.cloudVmCluster !== undefined) {
      CloudVmCluster.encode(message.cloudVmCluster, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCloudVmClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCloudVmClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cloudVmClusterId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cloudVmCluster = CloudVmCluster.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCloudVmClusterRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      cloudVmClusterId: isSet(object.cloudVmClusterId) ? globalThis.String(object.cloudVmClusterId) : "",
      cloudVmCluster: isSet(object.cloudVmCluster) ? CloudVmCluster.fromJSON(object.cloudVmCluster) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateCloudVmClusterRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.cloudVmClusterId !== "") {
      obj.cloudVmClusterId = message.cloudVmClusterId;
    }
    if (message.cloudVmCluster !== undefined) {
      obj.cloudVmCluster = CloudVmCluster.toJSON(message.cloudVmCluster);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCloudVmClusterRequest>): CreateCloudVmClusterRequest {
    return CreateCloudVmClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCloudVmClusterRequest>): CreateCloudVmClusterRequest {
    const message = createBaseCreateCloudVmClusterRequest();
    message.parent = object.parent ?? "";
    message.cloudVmClusterId = object.cloudVmClusterId ?? "";
    message.cloudVmCluster = (object.cloudVmCluster !== undefined && object.cloudVmCluster !== null)
      ? CloudVmCluster.fromPartial(object.cloudVmCluster)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteCloudVmClusterRequest(): DeleteCloudVmClusterRequest {
  return { name: "", requestId: "", force: false };
}

export const DeleteCloudVmClusterRequest: MessageFns<DeleteCloudVmClusterRequest> = {
  encode(message: DeleteCloudVmClusterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCloudVmClusterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCloudVmClusterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCloudVmClusterRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteCloudVmClusterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCloudVmClusterRequest>): DeleteCloudVmClusterRequest {
    return DeleteCloudVmClusterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCloudVmClusterRequest>): DeleteCloudVmClusterRequest {
    const message = createBaseDeleteCloudVmClusterRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListEntitlementsRequest(): ListEntitlementsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEntitlementsRequest: MessageFns<ListEntitlementsRequest> = {
  encode(message: ListEntitlementsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntitlementsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntitlementsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntitlementsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEntitlementsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntitlementsRequest>): ListEntitlementsRequest {
    return ListEntitlementsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntitlementsRequest>): ListEntitlementsRequest {
    const message = createBaseListEntitlementsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEntitlementsResponse(): ListEntitlementsResponse {
  return { entitlements: [], nextPageToken: "" };
}

export const ListEntitlementsResponse: MessageFns<ListEntitlementsResponse> = {
  encode(message: ListEntitlementsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entitlements) {
      Entitlement.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEntitlementsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEntitlementsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entitlements.push(Entitlement.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEntitlementsResponse {
    return {
      entitlements: globalThis.Array.isArray(object?.entitlements)
        ? object.entitlements.map((e: any) => Entitlement.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEntitlementsResponse): unknown {
    const obj: any = {};
    if (message.entitlements?.length) {
      obj.entitlements = message.entitlements.map((e) => Entitlement.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEntitlementsResponse>): ListEntitlementsResponse {
    return ListEntitlementsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEntitlementsResponse>): ListEntitlementsResponse {
    const message = createBaseListEntitlementsResponse();
    message.entitlements = object.entitlements?.map((e) => Entitlement.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListDbServersRequest(): ListDbServersRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDbServersRequest: MessageFns<ListDbServersRequest> = {
  encode(message: ListDbServersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDbServersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDbServersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDbServersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDbServersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDbServersRequest>): ListDbServersRequest {
    return ListDbServersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDbServersRequest>): ListDbServersRequest {
    const message = createBaseListDbServersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDbServersResponse(): ListDbServersResponse {
  return { dbServers: [], nextPageToken: "" };
}

export const ListDbServersResponse: MessageFns<ListDbServersResponse> = {
  encode(message: ListDbServersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dbServers) {
      DbServer.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDbServersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDbServersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dbServers.push(DbServer.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDbServersResponse {
    return {
      dbServers: globalThis.Array.isArray(object?.dbServers)
        ? object.dbServers.map((e: any) => DbServer.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDbServersResponse): unknown {
    const obj: any = {};
    if (message.dbServers?.length) {
      obj.dbServers = message.dbServers.map((e) => DbServer.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDbServersResponse>): ListDbServersResponse {
    return ListDbServersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDbServersResponse>): ListDbServersResponse {
    const message = createBaseListDbServersResponse();
    message.dbServers = object.dbServers?.map((e) => DbServer.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListDbNodesRequest(): ListDbNodesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDbNodesRequest: MessageFns<ListDbNodesRequest> = {
  encode(message: ListDbNodesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDbNodesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDbNodesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDbNodesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDbNodesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDbNodesRequest>): ListDbNodesRequest {
    return ListDbNodesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDbNodesRequest>): ListDbNodesRequest {
    const message = createBaseListDbNodesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDbNodesResponse(): ListDbNodesResponse {
  return { dbNodes: [], nextPageToken: "" };
}

export const ListDbNodesResponse: MessageFns<ListDbNodesResponse> = {
  encode(message: ListDbNodesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dbNodes) {
      DbNode.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDbNodesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDbNodesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dbNodes.push(DbNode.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDbNodesResponse {
    return {
      dbNodes: globalThis.Array.isArray(object?.dbNodes) ? object.dbNodes.map((e: any) => DbNode.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDbNodesResponse): unknown {
    const obj: any = {};
    if (message.dbNodes?.length) {
      obj.dbNodes = message.dbNodes.map((e) => DbNode.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDbNodesResponse>): ListDbNodesResponse {
    return ListDbNodesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDbNodesResponse>): ListDbNodesResponse {
    const message = createBaseListDbNodesResponse();
    message.dbNodes = object.dbNodes?.map((e) => DbNode.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListGiVersionsRequest(): ListGiVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListGiVersionsRequest: MessageFns<ListGiVersionsRequest> = {
  encode(message: ListGiVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGiVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGiVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGiVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListGiVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGiVersionsRequest>): ListGiVersionsRequest {
    return ListGiVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGiVersionsRequest>): ListGiVersionsRequest {
    const message = createBaseListGiVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListGiVersionsResponse(): ListGiVersionsResponse {
  return { giVersions: [], nextPageToken: "" };
}

export const ListGiVersionsResponse: MessageFns<ListGiVersionsResponse> = {
  encode(message: ListGiVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.giVersions) {
      GiVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGiVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGiVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.giVersions.push(GiVersion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGiVersionsResponse {
    return {
      giVersions: globalThis.Array.isArray(object?.giVersions)
        ? object.giVersions.map((e: any) => GiVersion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListGiVersionsResponse): unknown {
    const obj: any = {};
    if (message.giVersions?.length) {
      obj.giVersions = message.giVersions.map((e) => GiVersion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGiVersionsResponse>): ListGiVersionsResponse {
    return ListGiVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGiVersionsResponse>): ListGiVersionsResponse {
    const message = createBaseListGiVersionsResponse();
    message.giVersions = object.giVersions?.map((e) => GiVersion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListDbSystemShapesRequest(): ListDbSystemShapesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDbSystemShapesRequest: MessageFns<ListDbSystemShapesRequest> = {
  encode(message: ListDbSystemShapesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDbSystemShapesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDbSystemShapesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDbSystemShapesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDbSystemShapesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDbSystemShapesRequest>): ListDbSystemShapesRequest {
    return ListDbSystemShapesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDbSystemShapesRequest>): ListDbSystemShapesRequest {
    const message = createBaseListDbSystemShapesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDbSystemShapesResponse(): ListDbSystemShapesResponse {
  return { dbSystemShapes: [], nextPageToken: "" };
}

export const ListDbSystemShapesResponse: MessageFns<ListDbSystemShapesResponse> = {
  encode(message: ListDbSystemShapesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dbSystemShapes) {
      DbSystemShape.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDbSystemShapesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDbSystemShapesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dbSystemShapes.push(DbSystemShape.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDbSystemShapesResponse {
    return {
      dbSystemShapes: globalThis.Array.isArray(object?.dbSystemShapes)
        ? object.dbSystemShapes.map((e: any) => DbSystemShape.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDbSystemShapesResponse): unknown {
    const obj: any = {};
    if (message.dbSystemShapes?.length) {
      obj.dbSystemShapes = message.dbSystemShapes.map((e) => DbSystemShape.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDbSystemShapesResponse>): ListDbSystemShapesResponse {
    return ListDbSystemShapesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDbSystemShapesResponse>): ListDbSystemShapesResponse {
    const message = createBaseListDbSystemShapesResponse();
    message.dbSystemShapes = object.dbSystemShapes?.map((e) => DbSystemShape.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
    percentComplete: 0,
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    if (message.percentComplete !== 0) {
      writer.uint32(65).double(message.percentComplete);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.percentComplete = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
      percentComplete: isSet(object.percentComplete) ? globalThis.Number(object.percentComplete) : 0,
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    if (message.percentComplete !== 0) {
      obj.percentComplete = message.percentComplete;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    message.percentComplete = object.percentComplete ?? 0;
    return message;
  },
};

function createBaseListAutonomousDatabasesRequest(): ListAutonomousDatabasesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListAutonomousDatabasesRequest: MessageFns<ListAutonomousDatabasesRequest> = {
  encode(message: ListAutonomousDatabasesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAutonomousDatabasesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAutonomousDatabasesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAutonomousDatabasesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListAutonomousDatabasesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAutonomousDatabasesRequest>): ListAutonomousDatabasesRequest {
    return ListAutonomousDatabasesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAutonomousDatabasesRequest>): ListAutonomousDatabasesRequest {
    const message = createBaseListAutonomousDatabasesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListAutonomousDatabasesResponse(): ListAutonomousDatabasesResponse {
  return { autonomousDatabases: [], nextPageToken: "" };
}

export const ListAutonomousDatabasesResponse: MessageFns<ListAutonomousDatabasesResponse> = {
  encode(message: ListAutonomousDatabasesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.autonomousDatabases) {
      AutonomousDatabase.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAutonomousDatabasesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAutonomousDatabasesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.autonomousDatabases.push(AutonomousDatabase.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAutonomousDatabasesResponse {
    return {
      autonomousDatabases: globalThis.Array.isArray(object?.autonomousDatabases)
        ? object.autonomousDatabases.map((e: any) => AutonomousDatabase.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAutonomousDatabasesResponse): unknown {
    const obj: any = {};
    if (message.autonomousDatabases?.length) {
      obj.autonomousDatabases = message.autonomousDatabases.map((e) => AutonomousDatabase.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAutonomousDatabasesResponse>): ListAutonomousDatabasesResponse {
    return ListAutonomousDatabasesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAutonomousDatabasesResponse>): ListAutonomousDatabasesResponse {
    const message = createBaseListAutonomousDatabasesResponse();
    message.autonomousDatabases = object.autonomousDatabases?.map((e) => AutonomousDatabase.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetAutonomousDatabaseRequest(): GetAutonomousDatabaseRequest {
  return { name: "" };
}

export const GetAutonomousDatabaseRequest: MessageFns<GetAutonomousDatabaseRequest> = {
  encode(message: GetAutonomousDatabaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAutonomousDatabaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAutonomousDatabaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAutonomousDatabaseRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAutonomousDatabaseRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAutonomousDatabaseRequest>): GetAutonomousDatabaseRequest {
    return GetAutonomousDatabaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAutonomousDatabaseRequest>): GetAutonomousDatabaseRequest {
    const message = createBaseGetAutonomousDatabaseRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateAutonomousDatabaseRequest(): CreateAutonomousDatabaseRequest {
  return { parent: "", autonomousDatabaseId: "", autonomousDatabase: undefined, requestId: "" };
}

export const CreateAutonomousDatabaseRequest: MessageFns<CreateAutonomousDatabaseRequest> = {
  encode(message: CreateAutonomousDatabaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.autonomousDatabaseId !== "") {
      writer.uint32(18).string(message.autonomousDatabaseId);
    }
    if (message.autonomousDatabase !== undefined) {
      AutonomousDatabase.encode(message.autonomousDatabase, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAutonomousDatabaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAutonomousDatabaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.autonomousDatabaseId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.autonomousDatabase = AutonomousDatabase.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAutonomousDatabaseRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      autonomousDatabaseId: isSet(object.autonomousDatabaseId) ? globalThis.String(object.autonomousDatabaseId) : "",
      autonomousDatabase: isSet(object.autonomousDatabase)
        ? AutonomousDatabase.fromJSON(object.autonomousDatabase)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateAutonomousDatabaseRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.autonomousDatabaseId !== "") {
      obj.autonomousDatabaseId = message.autonomousDatabaseId;
    }
    if (message.autonomousDatabase !== undefined) {
      obj.autonomousDatabase = AutonomousDatabase.toJSON(message.autonomousDatabase);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAutonomousDatabaseRequest>): CreateAutonomousDatabaseRequest {
    return CreateAutonomousDatabaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAutonomousDatabaseRequest>): CreateAutonomousDatabaseRequest {
    const message = createBaseCreateAutonomousDatabaseRequest();
    message.parent = object.parent ?? "";
    message.autonomousDatabaseId = object.autonomousDatabaseId ?? "";
    message.autonomousDatabase = (object.autonomousDatabase !== undefined && object.autonomousDatabase !== null)
      ? AutonomousDatabase.fromPartial(object.autonomousDatabase)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteAutonomousDatabaseRequest(): DeleteAutonomousDatabaseRequest {
  return { name: "", requestId: "" };
}

export const DeleteAutonomousDatabaseRequest: MessageFns<DeleteAutonomousDatabaseRequest> = {
  encode(message: DeleteAutonomousDatabaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAutonomousDatabaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAutonomousDatabaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAutonomousDatabaseRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteAutonomousDatabaseRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAutonomousDatabaseRequest>): DeleteAutonomousDatabaseRequest {
    return DeleteAutonomousDatabaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAutonomousDatabaseRequest>): DeleteAutonomousDatabaseRequest {
    const message = createBaseDeleteAutonomousDatabaseRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseRestoreAutonomousDatabaseRequest(): RestoreAutonomousDatabaseRequest {
  return { name: "", restoreTime: undefined };
}

export const RestoreAutonomousDatabaseRequest: MessageFns<RestoreAutonomousDatabaseRequest> = {
  encode(message: RestoreAutonomousDatabaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.restoreTime !== undefined) {
      Timestamp.encode(toTimestamp(message.restoreTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreAutonomousDatabaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreAutonomousDatabaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.restoreTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreAutonomousDatabaseRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      restoreTime: isSet(object.restoreTime) ? fromJsonTimestamp(object.restoreTime) : undefined,
    };
  },

  toJSON(message: RestoreAutonomousDatabaseRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.restoreTime !== undefined) {
      obj.restoreTime = message.restoreTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreAutonomousDatabaseRequest>): RestoreAutonomousDatabaseRequest {
    return RestoreAutonomousDatabaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreAutonomousDatabaseRequest>): RestoreAutonomousDatabaseRequest {
    const message = createBaseRestoreAutonomousDatabaseRequest();
    message.name = object.name ?? "";
    message.restoreTime = object.restoreTime ?? undefined;
    return message;
  },
};

function createBaseGenerateAutonomousDatabaseWalletRequest(): GenerateAutonomousDatabaseWalletRequest {
  return { name: "", type: 0, isRegional: false, password: "" };
}

export const GenerateAutonomousDatabaseWalletRequest: MessageFns<GenerateAutonomousDatabaseWalletRequest> = {
  encode(message: GenerateAutonomousDatabaseWalletRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.isRegional !== false) {
      writer.uint32(24).bool(message.isRegional);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAutonomousDatabaseWalletRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAutonomousDatabaseWalletRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isRegional = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAutonomousDatabaseWalletRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? generateTypeFromJSON(object.type) : 0,
      isRegional: isSet(object.isRegional) ? globalThis.Boolean(object.isRegional) : false,
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: GenerateAutonomousDatabaseWalletRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = generateTypeToJSON(message.type);
    }
    if (message.isRegional !== false) {
      obj.isRegional = message.isRegional;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAutonomousDatabaseWalletRequest>): GenerateAutonomousDatabaseWalletRequest {
    return GenerateAutonomousDatabaseWalletRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAutonomousDatabaseWalletRequest>): GenerateAutonomousDatabaseWalletRequest {
    const message = createBaseGenerateAutonomousDatabaseWalletRequest();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.isRegional = object.isRegional ?? false;
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseGenerateAutonomousDatabaseWalletResponse(): GenerateAutonomousDatabaseWalletResponse {
  return { archiveContent: Buffer.alloc(0) };
}

export const GenerateAutonomousDatabaseWalletResponse: MessageFns<GenerateAutonomousDatabaseWalletResponse> = {
  encode(message: GenerateAutonomousDatabaseWalletResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.archiveContent.length !== 0) {
      writer.uint32(10).bytes(message.archiveContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateAutonomousDatabaseWalletResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateAutonomousDatabaseWalletResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.archiveContent = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateAutonomousDatabaseWalletResponse {
    return {
      archiveContent: isSet(object.archiveContent)
        ? Buffer.from(bytesFromBase64(object.archiveContent))
        : Buffer.alloc(0),
    };
  },

  toJSON(message: GenerateAutonomousDatabaseWalletResponse): unknown {
    const obj: any = {};
    if (message.archiveContent.length !== 0) {
      obj.archiveContent = base64FromBytes(message.archiveContent);
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateAutonomousDatabaseWalletResponse>): GenerateAutonomousDatabaseWalletResponse {
    return GenerateAutonomousDatabaseWalletResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateAutonomousDatabaseWalletResponse>): GenerateAutonomousDatabaseWalletResponse {
    const message = createBaseGenerateAutonomousDatabaseWalletResponse();
    message.archiveContent = object.archiveContent ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseListAutonomousDbVersionsRequest(): ListAutonomousDbVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAutonomousDbVersionsRequest: MessageFns<ListAutonomousDbVersionsRequest> = {
  encode(message: ListAutonomousDbVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAutonomousDbVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAutonomousDbVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAutonomousDbVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAutonomousDbVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAutonomousDbVersionsRequest>): ListAutonomousDbVersionsRequest {
    return ListAutonomousDbVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAutonomousDbVersionsRequest>): ListAutonomousDbVersionsRequest {
    const message = createBaseListAutonomousDbVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAutonomousDbVersionsResponse(): ListAutonomousDbVersionsResponse {
  return { autonomousDbVersions: [], nextPageToken: "" };
}

export const ListAutonomousDbVersionsResponse: MessageFns<ListAutonomousDbVersionsResponse> = {
  encode(message: ListAutonomousDbVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.autonomousDbVersions) {
      AutonomousDbVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAutonomousDbVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAutonomousDbVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.autonomousDbVersions.push(AutonomousDbVersion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAutonomousDbVersionsResponse {
    return {
      autonomousDbVersions: globalThis.Array.isArray(object?.autonomousDbVersions)
        ? object.autonomousDbVersions.map((e: any) => AutonomousDbVersion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAutonomousDbVersionsResponse): unknown {
    const obj: any = {};
    if (message.autonomousDbVersions?.length) {
      obj.autonomousDbVersions = message.autonomousDbVersions.map((e) => AutonomousDbVersion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAutonomousDbVersionsResponse>): ListAutonomousDbVersionsResponse {
    return ListAutonomousDbVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAutonomousDbVersionsResponse>): ListAutonomousDbVersionsResponse {
    const message = createBaseListAutonomousDbVersionsResponse();
    message.autonomousDbVersions = object.autonomousDbVersions?.map((e) => AutonomousDbVersion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListAutonomousDatabaseCharacterSetsRequest(): ListAutonomousDatabaseCharacterSetsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListAutonomousDatabaseCharacterSetsRequest: MessageFns<ListAutonomousDatabaseCharacterSetsRequest> = {
  encode(message: ListAutonomousDatabaseCharacterSetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAutonomousDatabaseCharacterSetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAutonomousDatabaseCharacterSetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAutonomousDatabaseCharacterSetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListAutonomousDatabaseCharacterSetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAutonomousDatabaseCharacterSetsRequest>): ListAutonomousDatabaseCharacterSetsRequest {
    return ListAutonomousDatabaseCharacterSetsRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListAutonomousDatabaseCharacterSetsRequest>,
  ): ListAutonomousDatabaseCharacterSetsRequest {
    const message = createBaseListAutonomousDatabaseCharacterSetsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListAutonomousDatabaseCharacterSetsResponse(): ListAutonomousDatabaseCharacterSetsResponse {
  return { autonomousDatabaseCharacterSets: [], nextPageToken: "" };
}

export const ListAutonomousDatabaseCharacterSetsResponse: MessageFns<ListAutonomousDatabaseCharacterSetsResponse> = {
  encode(
    message: ListAutonomousDatabaseCharacterSetsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.autonomousDatabaseCharacterSets) {
      AutonomousDatabaseCharacterSet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAutonomousDatabaseCharacterSetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAutonomousDatabaseCharacterSetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.autonomousDatabaseCharacterSets.push(AutonomousDatabaseCharacterSet.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAutonomousDatabaseCharacterSetsResponse {
    return {
      autonomousDatabaseCharacterSets: globalThis.Array.isArray(object?.autonomousDatabaseCharacterSets)
        ? object.autonomousDatabaseCharacterSets.map((e: any) => AutonomousDatabaseCharacterSet.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAutonomousDatabaseCharacterSetsResponse): unknown {
    const obj: any = {};
    if (message.autonomousDatabaseCharacterSets?.length) {
      obj.autonomousDatabaseCharacterSets = message.autonomousDatabaseCharacterSets.map((e) =>
        AutonomousDatabaseCharacterSet.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAutonomousDatabaseCharacterSetsResponse>): ListAutonomousDatabaseCharacterSetsResponse {
    return ListAutonomousDatabaseCharacterSetsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListAutonomousDatabaseCharacterSetsResponse>,
  ): ListAutonomousDatabaseCharacterSetsResponse {
    const message = createBaseListAutonomousDatabaseCharacterSetsResponse();
    message.autonomousDatabaseCharacterSets =
      object.autonomousDatabaseCharacterSets?.map((e) => AutonomousDatabaseCharacterSet.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListAutonomousDatabaseBackupsRequest(): ListAutonomousDatabaseBackupsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListAutonomousDatabaseBackupsRequest: MessageFns<ListAutonomousDatabaseBackupsRequest> = {
  encode(message: ListAutonomousDatabaseBackupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAutonomousDatabaseBackupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAutonomousDatabaseBackupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAutonomousDatabaseBackupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAutonomousDatabaseBackupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAutonomousDatabaseBackupsRequest>): ListAutonomousDatabaseBackupsRequest {
    return ListAutonomousDatabaseBackupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAutonomousDatabaseBackupsRequest>): ListAutonomousDatabaseBackupsRequest {
    const message = createBaseListAutonomousDatabaseBackupsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAutonomousDatabaseBackupsResponse(): ListAutonomousDatabaseBackupsResponse {
  return { autonomousDatabaseBackups: [], nextPageToken: "" };
}

export const ListAutonomousDatabaseBackupsResponse: MessageFns<ListAutonomousDatabaseBackupsResponse> = {
  encode(message: ListAutonomousDatabaseBackupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.autonomousDatabaseBackups) {
      AutonomousDatabaseBackup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAutonomousDatabaseBackupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAutonomousDatabaseBackupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.autonomousDatabaseBackups.push(AutonomousDatabaseBackup.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAutonomousDatabaseBackupsResponse {
    return {
      autonomousDatabaseBackups: globalThis.Array.isArray(object?.autonomousDatabaseBackups)
        ? object.autonomousDatabaseBackups.map((e: any) => AutonomousDatabaseBackup.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAutonomousDatabaseBackupsResponse): unknown {
    const obj: any = {};
    if (message.autonomousDatabaseBackups?.length) {
      obj.autonomousDatabaseBackups = message.autonomousDatabaseBackups.map((e) => AutonomousDatabaseBackup.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAutonomousDatabaseBackupsResponse>): ListAutonomousDatabaseBackupsResponse {
    return ListAutonomousDatabaseBackupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAutonomousDatabaseBackupsResponse>): ListAutonomousDatabaseBackupsResponse {
    const message = createBaseListAutonomousDatabaseBackupsResponse();
    message.autonomousDatabaseBackups =
      object.autonomousDatabaseBackups?.map((e) => AutonomousDatabaseBackup.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service describing handlers for resources */
export type OracleDatabaseDefinition = typeof OracleDatabaseDefinition;
export const OracleDatabaseDefinition = {
  name: "OracleDatabase",
  fullName: "google.cloud.oracledatabase.v1.OracleDatabase",
  methods: {
    /** Lists Exadata Infrastructures in a given project and location. */
    listCloudExadataInfrastructures: {
      name: "ListCloudExadataInfrastructures",
      requestType: ListCloudExadataInfrastructuresRequest,
      requestStream: false,
      responseType: ListCloudExadataInfrastructuresResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              111,
              117,
              100,
              69,
              120,
              97,
              100,
              97,
              116,
              97,
              73,
              110,
              102,
              114,
              97,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Exadata Infrastructure. */
    getCloudExadataInfrastructure: {
      name: "GetCloudExadataInfrastructure",
      requestType: GetCloudExadataInfrastructureRequest,
      requestStream: false,
      responseType: CloudExadataInfrastructure,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              111,
              117,
              100,
              69,
              120,
              97,
              100,
              97,
              116,
              97,
              73,
              110,
              102,
              114,
              97,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Exadata Infrastructure in a given project and location. */
    createCloudExadataInfrastructure: {
      name: "CreateCloudExadataInfrastructure",
      requestType: CreateCloudExadataInfrastructureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              26,
              67,
              108,
              111,
              117,
              100,
              69,
              120,
              97,
              100,
              97,
              116,
              97,
              73,
              110,
              102,
              114,
              97,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              67,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              108,
              111,
              117,
              100,
              95,
              101,
              120,
              97,
              100,
              97,
              116,
              97,
              95,
              105,
              110,
              102,
              114,
              97,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              44,
              99,
              108,
              111,
              117,
              100,
              95,
              101,
              120,
              97,
              100,
              97,
              116,
              97,
              95,
              105,
              110,
              102,
              114,
              97,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              95,
              58,
              28,
              99,
              108,
              111,
              117,
              100,
              95,
              101,
              120,
              97,
              100,
              97,
              116,
              97,
              95,
              105,
              110,
              102,
              114,
              97,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              111,
              117,
              100,
              69,
              120,
              97,
              100,
              97,
              116,
              97,
              73,
              110,
              102,
              114,
              97,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Exadata Infrastructure. */
    deleteCloudExadataInfrastructure: {
      name: "DeleteCloudExadataInfrastructure",
      requestType: DeleteCloudExadataInfrastructureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              42,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              111,
              117,
              100,
              69,
              120,
              97,
              100,
              97,
              116,
              97,
              73,
              110,
              102,
              114,
              97,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists the VM Clusters in a given project and location. */
    listCloudVmClusters: {
      name: "ListCloudVmClusters",
      requestType: ListCloudVmClustersRequest,
      requestStream: false,
      responseType: ListCloudVmClustersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              111,
              117,
              100,
              86,
              109,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single VM Cluster. */
    getCloudVmCluster: {
      name: "GetCloudVmCluster",
      requestType: GetCloudVmClusterRequest,
      requestStream: false,
      responseType: CloudVmCluster,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              111,
              117,
              100,
              86,
              109,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new VM Cluster in a given project and location. */
    createCloudVmCluster: {
      name: "CreateCloudVmCluster",
      requestType: CreateCloudVmClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              35,
              10,
              14,
              67,
              108,
              111,
              117,
              100,
              86,
              109,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              43,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              108,
              111,
              117,
              100,
              95,
              118,
              109,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              44,
              99,
              108,
              111,
              117,
              100,
              95,
              118,
              109,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              16,
              99,
              108,
              111,
              117,
              100,
              95,
              118,
              109,
              95,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              111,
              117,
              100,
              86,
              109,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single VM Cluster. */
    deleteCloudVmCluster: {
      name: "DeleteCloudVmCluster",
      requestType: DeleteCloudVmClusterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              111,
              117,
              100,
              86,
              109,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists the entitlements in a given project. */
    listEntitlements: {
      name: "ListEntitlements",
      requestType: ListEntitlementsRequest,
      requestStream: false,
      responseType: ListEntitlementsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists the database servers of an Exadata Infrastructure instance. */
    listDbServers: {
      name: "ListDbServers",
      requestType: ListDbServersRequest,
      requestStream: false,
      responseType: ListDbServersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              77,
              18,
              75,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              111,
              117,
              100,
              69,
              120,
              97,
              100,
              97,
              116,
              97,
              73,
              110,
              102,
              114,
              97,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              100,
              98,
              83,
              101,
              114,
              118,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists the database nodes of a VM Cluster. */
    listDbNodes: {
      name: "ListDbNodes",
      requestType: ListDbNodesRequest,
      requestStream: false,
      responseType: ListDbNodesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              111,
              117,
              100,
              86,
              109,
              67,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              100,
              98,
              78,
              111,
              100,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all the valid Oracle Grid Infrastructure (GI) versions for the given
     * project and location.
     */
    listGiVersions: {
      name: "ListGiVersions",
      requestType: ListGiVersionsRequest,
      requestStream: false,
      responseType: ListGiVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              103,
              105,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists the database system shapes available for the project and location. */
    listDbSystemShapes: {
      name: "ListDbSystemShapes",
      requestType: ListDbSystemShapesRequest,
      requestStream: false,
      responseType: ListDbSystemShapesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              98,
              83,
              121,
              115,
              116,
              101,
              109,
              83,
              104,
              97,
              112,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists the Autonomous Databases in a given project and location. */
    listAutonomousDatabases: {
      name: "ListAutonomousDatabases",
      requestType: ListAutonomousDatabasesRequest,
      requestStream: false,
      responseType: ListAutonomousDatabasesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the details of a single Autonomous Database. */
    getAutonomousDatabase: {
      name: "GetAutonomousDatabase",
      requestType: GetAutonomousDatabaseRequest,
      requestStream: false,
      responseType: AutonomousDatabase,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Autonomous Database in a given project and location. */
    createAutonomousDatabase: {
      name: "CreateAutonomousDatabase",
      requestType: CreateAutonomousDatabaseRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              39,
              10,
              18,
              65,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              49,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              95,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              44,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              95,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              19,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              95,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Autonomous Database. */
    deleteAutonomousDatabase: {
      name: "DeleteAutonomousDatabase",
      requestType: DeleteAutonomousDatabaseRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              42,
              55,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Restores a single Autonomous Database. */
    restoreAutonomousDatabase: {
      name: "RestoreAutonomousDatabase",
      requestType: RestoreAutonomousDatabaseRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              39,
              10,
              18,
              65,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 110, 97, 109, 101, 44, 114, 101, 115, 116, 111, 114, 101, 95, 116, 105, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
            ]),
          ],
        },
      },
    },
    /** Generates a wallet for an Autonomous Database. */
    generateAutonomousDatabaseWallet: {
      name: "GenerateAutonomousDatabaseWallet",
      requestType: GenerateAutonomousDatabaseWalletRequest,
      requestStream: false,
      responseType: GenerateAutonomousDatabaseWalletResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              30,
              110,
              97,
              109,
              101,
              44,
              116,
              121,
              112,
              101,
              44,
              105,
              115,
              95,
              114,
              101,
              103,
              105,
              111,
              110,
              97,
              108,
              44,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              75,
              58,
              1,
              42,
              34,
              70,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              87,
              97,
              108,
              108,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all the available Autonomous Database versions for a project and
     * location.
     */
    listAutonomousDbVersions: {
      name: "ListAutonomousDbVersions",
      requestType: ListAutonomousDbVersionsRequest,
      requestStream: false,
      responseType: ListAutonomousDbVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              98,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists Autonomous Database Character Sets in a given project and location. */
    listAutonomousDatabaseCharacterSets: {
      name: "ListAutonomousDatabaseCharacterSets",
      requestType: ListAutonomousDatabaseCharacterSetsRequest,
      requestStream: false,
      responseType: ListAutonomousDatabaseCharacterSetsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              83,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists the long-term and automatic backups of an Autonomous Database. */
    listAutonomousDatabaseBackups: {
      name: "ListAutonomousDatabaseBackups",
      requestType: ListAutonomousDatabaseBackupsRequest,
      requestStream: false,
      responseType: ListAutonomousDatabaseBackupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              117,
              116,
              111,
              110,
              111,
              109,
              111,
              117,
              115,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              66,
              97,
              99,
              107,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface OracleDatabaseServiceImplementation<CallContextExt = {}> {
  /** Lists Exadata Infrastructures in a given project and location. */
  listCloudExadataInfrastructures(
    request: ListCloudExadataInfrastructuresRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCloudExadataInfrastructuresResponse>>;
  /** Gets details of a single Exadata Infrastructure. */
  getCloudExadataInfrastructure(
    request: GetCloudExadataInfrastructureRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CloudExadataInfrastructure>>;
  /** Creates a new Exadata Infrastructure in a given project and location. */
  createCloudExadataInfrastructure(
    request: CreateCloudExadataInfrastructureRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Exadata Infrastructure. */
  deleteCloudExadataInfrastructure(
    request: DeleteCloudExadataInfrastructureRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists the VM Clusters in a given project and location. */
  listCloudVmClusters(
    request: ListCloudVmClustersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCloudVmClustersResponse>>;
  /** Gets details of a single VM Cluster. */
  getCloudVmCluster(
    request: GetCloudVmClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CloudVmCluster>>;
  /** Creates a new VM Cluster in a given project and location. */
  createCloudVmCluster(
    request: CreateCloudVmClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single VM Cluster. */
  deleteCloudVmCluster(
    request: DeleteCloudVmClusterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists the entitlements in a given project. */
  listEntitlements(
    request: ListEntitlementsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEntitlementsResponse>>;
  /** Lists the database servers of an Exadata Infrastructure instance. */
  listDbServers(
    request: ListDbServersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDbServersResponse>>;
  /** Lists the database nodes of a VM Cluster. */
  listDbNodes(
    request: ListDbNodesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDbNodesResponse>>;
  /**
   * Lists all the valid Oracle Grid Infrastructure (GI) versions for the given
   * project and location.
   */
  listGiVersions(
    request: ListGiVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGiVersionsResponse>>;
  /** Lists the database system shapes available for the project and location. */
  listDbSystemShapes(
    request: ListDbSystemShapesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDbSystemShapesResponse>>;
  /** Lists the Autonomous Databases in a given project and location. */
  listAutonomousDatabases(
    request: ListAutonomousDatabasesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAutonomousDatabasesResponse>>;
  /** Gets the details of a single Autonomous Database. */
  getAutonomousDatabase(
    request: GetAutonomousDatabaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AutonomousDatabase>>;
  /** Creates a new Autonomous Database in a given project and location. */
  createAutonomousDatabase(
    request: CreateAutonomousDatabaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Autonomous Database. */
  deleteAutonomousDatabase(
    request: DeleteAutonomousDatabaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Restores a single Autonomous Database. */
  restoreAutonomousDatabase(
    request: RestoreAutonomousDatabaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Generates a wallet for an Autonomous Database. */
  generateAutonomousDatabaseWallet(
    request: GenerateAutonomousDatabaseWalletRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateAutonomousDatabaseWalletResponse>>;
  /**
   * Lists all the available Autonomous Database versions for a project and
   * location.
   */
  listAutonomousDbVersions(
    request: ListAutonomousDbVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAutonomousDbVersionsResponse>>;
  /** Lists Autonomous Database Character Sets in a given project and location. */
  listAutonomousDatabaseCharacterSets(
    request: ListAutonomousDatabaseCharacterSetsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAutonomousDatabaseCharacterSetsResponse>>;
  /** Lists the long-term and automatic backups of an Autonomous Database. */
  listAutonomousDatabaseBackups(
    request: ListAutonomousDatabaseBackupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAutonomousDatabaseBackupsResponse>>;
}

export interface OracleDatabaseClient<CallOptionsExt = {}> {
  /** Lists Exadata Infrastructures in a given project and location. */
  listCloudExadataInfrastructures(
    request: DeepPartial<ListCloudExadataInfrastructuresRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCloudExadataInfrastructuresResponse>;
  /** Gets details of a single Exadata Infrastructure. */
  getCloudExadataInfrastructure(
    request: DeepPartial<GetCloudExadataInfrastructureRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CloudExadataInfrastructure>;
  /** Creates a new Exadata Infrastructure in a given project and location. */
  createCloudExadataInfrastructure(
    request: DeepPartial<CreateCloudExadataInfrastructureRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Exadata Infrastructure. */
  deleteCloudExadataInfrastructure(
    request: DeepPartial<DeleteCloudExadataInfrastructureRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists the VM Clusters in a given project and location. */
  listCloudVmClusters(
    request: DeepPartial<ListCloudVmClustersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCloudVmClustersResponse>;
  /** Gets details of a single VM Cluster. */
  getCloudVmCluster(
    request: DeepPartial<GetCloudVmClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CloudVmCluster>;
  /** Creates a new VM Cluster in a given project and location. */
  createCloudVmCluster(
    request: DeepPartial<CreateCloudVmClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single VM Cluster. */
  deleteCloudVmCluster(
    request: DeepPartial<DeleteCloudVmClusterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists the entitlements in a given project. */
  listEntitlements(
    request: DeepPartial<ListEntitlementsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEntitlementsResponse>;
  /** Lists the database servers of an Exadata Infrastructure instance. */
  listDbServers(
    request: DeepPartial<ListDbServersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDbServersResponse>;
  /** Lists the database nodes of a VM Cluster. */
  listDbNodes(
    request: DeepPartial<ListDbNodesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDbNodesResponse>;
  /**
   * Lists all the valid Oracle Grid Infrastructure (GI) versions for the given
   * project and location.
   */
  listGiVersions(
    request: DeepPartial<ListGiVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGiVersionsResponse>;
  /** Lists the database system shapes available for the project and location. */
  listDbSystemShapes(
    request: DeepPartial<ListDbSystemShapesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDbSystemShapesResponse>;
  /** Lists the Autonomous Databases in a given project and location. */
  listAutonomousDatabases(
    request: DeepPartial<ListAutonomousDatabasesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAutonomousDatabasesResponse>;
  /** Gets the details of a single Autonomous Database. */
  getAutonomousDatabase(
    request: DeepPartial<GetAutonomousDatabaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AutonomousDatabase>;
  /** Creates a new Autonomous Database in a given project and location. */
  createAutonomousDatabase(
    request: DeepPartial<CreateAutonomousDatabaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Autonomous Database. */
  deleteAutonomousDatabase(
    request: DeepPartial<DeleteAutonomousDatabaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Restores a single Autonomous Database. */
  restoreAutonomousDatabase(
    request: DeepPartial<RestoreAutonomousDatabaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Generates a wallet for an Autonomous Database. */
  generateAutonomousDatabaseWallet(
    request: DeepPartial<GenerateAutonomousDatabaseWalletRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateAutonomousDatabaseWalletResponse>;
  /**
   * Lists all the available Autonomous Database versions for a project and
   * location.
   */
  listAutonomousDbVersions(
    request: DeepPartial<ListAutonomousDbVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAutonomousDbVersionsResponse>;
  /** Lists Autonomous Database Character Sets in a given project and location. */
  listAutonomousDatabaseCharacterSets(
    request: DeepPartial<ListAutonomousDatabaseCharacterSetsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAutonomousDatabaseCharacterSetsResponse>;
  /** Lists the long-term and automatic backups of an Autonomous Database. */
  listAutonomousDatabaseBackups(
    request: DeepPartial<ListAutonomousDatabaseBackupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAutonomousDatabaseBackupsResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
