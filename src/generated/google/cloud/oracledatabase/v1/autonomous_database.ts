// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/oracledatabase/v1/autonomous_database.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DayOfWeek, dayOfWeekFromJSON, dayOfWeekToJSON } from "../../../type/dayofweek.js";
import { TimeOfDay } from "../../../type/timeofday.js";
import { CustomerContact } from "./common.js";

export const protobufPackage = "google.cloud.oracledatabase.v1";

/** The type of wallet generation. */
export enum GenerateType {
  /** GENERATE_TYPE_UNSPECIFIED - Default unspecified value. */
  GENERATE_TYPE_UNSPECIFIED = 0,
  /** ALL - Used to generate wallet for all databases in the region. */
  ALL = 1,
  /** SINGLE - Used to generate wallet for a single database. */
  SINGLE = 2,
  UNRECOGNIZED = -1,
}

export function generateTypeFromJSON(object: any): GenerateType {
  switch (object) {
    case 0:
    case "GENERATE_TYPE_UNSPECIFIED":
      return GenerateType.GENERATE_TYPE_UNSPECIFIED;
    case 1:
    case "ALL":
      return GenerateType.ALL;
    case 2:
    case "SINGLE":
      return GenerateType.SINGLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GenerateType.UNRECOGNIZED;
  }
}

export function generateTypeToJSON(object: GenerateType): string {
  switch (object) {
    case GenerateType.GENERATE_TYPE_UNSPECIFIED:
      return "GENERATE_TYPE_UNSPECIFIED";
    case GenerateType.ALL:
      return "ALL";
    case GenerateType.SINGLE:
      return "SINGLE";
    case GenerateType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The various lifecycle states of the Autonomous Database. */
export enum State {
  /** STATE_UNSPECIFIED - Default unspecified value. */
  STATE_UNSPECIFIED = 0,
  /** PROVISIONING - Indicates that the Autonomous Database is in provisioning state. */
  PROVISIONING = 1,
  /** AVAILABLE - Indicates that the Autonomous Database is in available state. */
  AVAILABLE = 2,
  /** STOPPING - Indicates that the Autonomous Database is in stopping state. */
  STOPPING = 3,
  /** STOPPED - Indicates that the Autonomous Database is in stopped state. */
  STOPPED = 4,
  /** STARTING - Indicates that the Autonomous Database is in starting state. */
  STARTING = 5,
  /** TERMINATING - Indicates that the Autonomous Database is in terminating state. */
  TERMINATING = 6,
  /** TERMINATED - Indicates that the Autonomous Database is in terminated state. */
  TERMINATED = 7,
  /** UNAVAILABLE - Indicates that the Autonomous Database is in unavailable state. */
  UNAVAILABLE = 8,
  /** RESTORE_IN_PROGRESS - Indicates that the Autonomous Database restore is in progress. */
  RESTORE_IN_PROGRESS = 9,
  /** RESTORE_FAILED - Indicates that the Autonomous Database failed to restore. */
  RESTORE_FAILED = 10,
  /** BACKUP_IN_PROGRESS - Indicates that the Autonomous Database backup is in progress. */
  BACKUP_IN_PROGRESS = 11,
  /** SCALE_IN_PROGRESS - Indicates that the Autonomous Database scale is in progress. */
  SCALE_IN_PROGRESS = 12,
  /**
   * AVAILABLE_NEEDS_ATTENTION - Indicates that the Autonomous Database is available but needs attention
   * state.
   */
  AVAILABLE_NEEDS_ATTENTION = 13,
  /** UPDATING - Indicates that the Autonomous Database is in updating state. */
  UPDATING = 14,
  /** MAINTENANCE_IN_PROGRESS - Indicates that the Autonomous Database's maintenance is in progress state. */
  MAINTENANCE_IN_PROGRESS = 15,
  /** RESTARTING - Indicates that the Autonomous Database is in restarting state. */
  RESTARTING = 16,
  /** RECREATING - Indicates that the Autonomous Database is in recreating state. */
  RECREATING = 17,
  /** ROLE_CHANGE_IN_PROGRESS - Indicates that the Autonomous Database's role change is in progress state. */
  ROLE_CHANGE_IN_PROGRESS = 18,
  /** UPGRADING - Indicates that the Autonomous Database is in upgrading state. */
  UPGRADING = 19,
  /** INACCESSIBLE - Indicates that the Autonomous Database is in inaccessible state. */
  INACCESSIBLE = 20,
  /** STANDBY - Indicates that the Autonomous Database is in standby state. */
  STANDBY = 21,
  UNRECOGNIZED = -1,
}

export function stateFromJSON(object: any): State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return State.STATE_UNSPECIFIED;
    case 1:
    case "PROVISIONING":
      return State.PROVISIONING;
    case 2:
    case "AVAILABLE":
      return State.AVAILABLE;
    case 3:
    case "STOPPING":
      return State.STOPPING;
    case 4:
    case "STOPPED":
      return State.STOPPED;
    case 5:
    case "STARTING":
      return State.STARTING;
    case 6:
    case "TERMINATING":
      return State.TERMINATING;
    case 7:
    case "TERMINATED":
      return State.TERMINATED;
    case 8:
    case "UNAVAILABLE":
      return State.UNAVAILABLE;
    case 9:
    case "RESTORE_IN_PROGRESS":
      return State.RESTORE_IN_PROGRESS;
    case 10:
    case "RESTORE_FAILED":
      return State.RESTORE_FAILED;
    case 11:
    case "BACKUP_IN_PROGRESS":
      return State.BACKUP_IN_PROGRESS;
    case 12:
    case "SCALE_IN_PROGRESS":
      return State.SCALE_IN_PROGRESS;
    case 13:
    case "AVAILABLE_NEEDS_ATTENTION":
      return State.AVAILABLE_NEEDS_ATTENTION;
    case 14:
    case "UPDATING":
      return State.UPDATING;
    case 15:
    case "MAINTENANCE_IN_PROGRESS":
      return State.MAINTENANCE_IN_PROGRESS;
    case 16:
    case "RESTARTING":
      return State.RESTARTING;
    case 17:
    case "RECREATING":
      return State.RECREATING;
    case 18:
    case "ROLE_CHANGE_IN_PROGRESS":
      return State.ROLE_CHANGE_IN_PROGRESS;
    case 19:
    case "UPGRADING":
      return State.UPGRADING;
    case 20:
    case "INACCESSIBLE":
      return State.INACCESSIBLE;
    case 21:
    case "STANDBY":
      return State.STANDBY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return State.UNRECOGNIZED;
  }
}

export function stateToJSON(object: State): string {
  switch (object) {
    case State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case State.PROVISIONING:
      return "PROVISIONING";
    case State.AVAILABLE:
      return "AVAILABLE";
    case State.STOPPING:
      return "STOPPING";
    case State.STOPPED:
      return "STOPPED";
    case State.STARTING:
      return "STARTING";
    case State.TERMINATING:
      return "TERMINATING";
    case State.TERMINATED:
      return "TERMINATED";
    case State.UNAVAILABLE:
      return "UNAVAILABLE";
    case State.RESTORE_IN_PROGRESS:
      return "RESTORE_IN_PROGRESS";
    case State.RESTORE_FAILED:
      return "RESTORE_FAILED";
    case State.BACKUP_IN_PROGRESS:
      return "BACKUP_IN_PROGRESS";
    case State.SCALE_IN_PROGRESS:
      return "SCALE_IN_PROGRESS";
    case State.AVAILABLE_NEEDS_ATTENTION:
      return "AVAILABLE_NEEDS_ATTENTION";
    case State.UPDATING:
      return "UPDATING";
    case State.MAINTENANCE_IN_PROGRESS:
      return "MAINTENANCE_IN_PROGRESS";
    case State.RESTARTING:
      return "RESTARTING";
    case State.RECREATING:
      return "RECREATING";
    case State.ROLE_CHANGE_IN_PROGRESS:
      return "ROLE_CHANGE_IN_PROGRESS";
    case State.UPGRADING:
      return "UPGRADING";
    case State.INACCESSIBLE:
      return "INACCESSIBLE";
    case State.STANDBY:
      return "STANDBY";
    case State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The state of the Operations Insights for this Autonomous Database. */
export enum OperationsInsightsState {
  /** OPERATIONS_INSIGHTS_STATE_UNSPECIFIED - Default unspecified value. */
  OPERATIONS_INSIGHTS_STATE_UNSPECIFIED = 0,
  /** ENABLING - Enabling status for operation insights. */
  ENABLING = 1,
  /** ENABLED - Enabled status for operation insights. */
  ENABLED = 2,
  /** DISABLING - Disabling status for operation insights. */
  DISABLING = 3,
  /** NOT_ENABLED - Not Enabled status for operation insights. */
  NOT_ENABLED = 4,
  /** FAILED_ENABLING - Failed enabling status for operation insights. */
  FAILED_ENABLING = 5,
  /** FAILED_DISABLING - Failed disabling status for operation insights. */
  FAILED_DISABLING = 6,
  UNRECOGNIZED = -1,
}

export function operationsInsightsStateFromJSON(object: any): OperationsInsightsState {
  switch (object) {
    case 0:
    case "OPERATIONS_INSIGHTS_STATE_UNSPECIFIED":
      return OperationsInsightsState.OPERATIONS_INSIGHTS_STATE_UNSPECIFIED;
    case 1:
    case "ENABLING":
      return OperationsInsightsState.ENABLING;
    case 2:
    case "ENABLED":
      return OperationsInsightsState.ENABLED;
    case 3:
    case "DISABLING":
      return OperationsInsightsState.DISABLING;
    case 4:
    case "NOT_ENABLED":
      return OperationsInsightsState.NOT_ENABLED;
    case 5:
    case "FAILED_ENABLING":
      return OperationsInsightsState.FAILED_ENABLING;
    case 6:
    case "FAILED_DISABLING":
      return OperationsInsightsState.FAILED_DISABLING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationsInsightsState.UNRECOGNIZED;
  }
}

export function operationsInsightsStateToJSON(object: OperationsInsightsState): string {
  switch (object) {
    case OperationsInsightsState.OPERATIONS_INSIGHTS_STATE_UNSPECIFIED:
      return "OPERATIONS_INSIGHTS_STATE_UNSPECIFIED";
    case OperationsInsightsState.ENABLING:
      return "ENABLING";
    case OperationsInsightsState.ENABLED:
      return "ENABLED";
    case OperationsInsightsState.DISABLING:
      return "DISABLING";
    case OperationsInsightsState.NOT_ENABLED:
      return "NOT_ENABLED";
    case OperationsInsightsState.FAILED_ENABLING:
      return "FAILED_ENABLING";
    case OperationsInsightsState.FAILED_DISABLING:
      return "FAILED_DISABLING";
    case OperationsInsightsState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The various states available for the Autonomous Database workload type. */
export enum DBWorkload {
  /** DB_WORKLOAD_UNSPECIFIED - Default unspecified value. */
  DB_WORKLOAD_UNSPECIFIED = 0,
  /** OLTP - Autonomous Transaction Processing database. */
  OLTP = 1,
  /** DW - Autonomous Data Warehouse database. */
  DW = 2,
  /** AJD - Autonomous JSON Database. */
  AJD = 3,
  /**
   * APEX - Autonomous Database with the Oracle APEX Application Development workload
   * type.
   */
  APEX = 4,
  UNRECOGNIZED = -1,
}

export function dBWorkloadFromJSON(object: any): DBWorkload {
  switch (object) {
    case 0:
    case "DB_WORKLOAD_UNSPECIFIED":
      return DBWorkload.DB_WORKLOAD_UNSPECIFIED;
    case 1:
    case "OLTP":
      return DBWorkload.OLTP;
    case 2:
    case "DW":
      return DBWorkload.DW;
    case 3:
    case "AJD":
      return DBWorkload.AJD;
    case 4:
    case "APEX":
      return DBWorkload.APEX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DBWorkload.UNRECOGNIZED;
  }
}

export function dBWorkloadToJSON(object: DBWorkload): string {
  switch (object) {
    case DBWorkload.DB_WORKLOAD_UNSPECIFIED:
      return "DB_WORKLOAD_UNSPECIFIED";
    case DBWorkload.OLTP:
      return "OLTP";
    case DBWorkload.DW:
      return "DW";
    case DBWorkload.AJD:
      return "AJD";
    case DBWorkload.APEX:
      return "APEX";
    case DBWorkload.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Details of the Autonomous Database resource.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/AutonomousDatabase/
 */
export interface AutonomousDatabase {
  /**
   * Identifier. The name of the Autonomous Database resource in the following
   * format:
   * projects/{project}/locations/{region}/autonomousDatabases/{autonomous_database}
   */
  name: string;
  /**
   * Optional. The name of the Autonomous Database. The database name must be
   * unique in the project. The name must begin with a letter and can contain a
   * maximum of 30 alphanumeric characters.
   */
  database: string;
  /**
   * Optional. The display name for the Autonomous Database. The name does not
   * have to be unique within your project.
   */
  displayName: string;
  /**
   * Output only. The ID of the subscription entitlement associated with the
   * Autonomous Database.
   */
  entitlementId: string;
  /** Optional. The password for the default ADMIN user. */
  adminPassword: string;
  /** Optional. The properties of the Autonomous Database. */
  properties:
    | AutonomousDatabaseProperties
    | undefined;
  /** Optional. The labels or tags associated with the Autonomous Database. */
  labels: { [key: string]: string };
  /**
   * Required. The name of the VPC network used by the Autonomous Database in
   * the following format: projects/{project}/global/networks/{network}
   */
  network: string;
  /** Required. The subnet CIDR range for the Autonmous Database. */
  cidr: string;
  /** Output only. The date and time that the Autonomous Database was created. */
  createTime: Date | undefined;
}

export interface AutonomousDatabase_LabelsEntry {
  key: string;
  value: string;
}

/** The properties of an Autonomous Database. */
export interface AutonomousDatabaseProperties {
  /**
   * Output only. OCID of the Autonomous Database.
   * https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
   */
  ocid: string;
  /** Optional. The number of compute servers for the Autonomous Database. */
  computeCount: number;
  /** Optional. The number of CPU cores to be made available to the database. */
  cpuCoreCount: number;
  /** Optional. The size of the data stored in the database, in terabytes. */
  dataStorageSizeTb: number;
  /** Optional. The size of the data stored in the database, in gigabytes. */
  dataStorageSizeGb: number;
  /** Required. The workload type of the Autonomous Database. */
  dbWorkload: DBWorkload;
  /** Optional. The edition of the Autonomous Databases. */
  dbEdition: AutonomousDatabaseProperties_DatabaseEdition;
  /**
   * Optional. The character set for the Autonomous Database. The default is
   * AL32UTF8.
   */
  characterSet: string;
  /**
   * Optional. The national character set for the Autonomous Database. The
   * default is AL16UTF16.
   */
  nCharacterSet: string;
  /** Optional. The private endpoint IP address for the Autonomous Database. */
  privateEndpointIp: string;
  /** Optional. The private endpoint label for the Autonomous Database. */
  privateEndpointLabel: string;
  /** Optional. The Oracle Database version for the Autonomous Database. */
  dbVersion: string;
  /**
   * Optional. This field indicates if auto scaling is enabled for the
   * Autonomous Database CPU core count.
   */
  isAutoScalingEnabled: boolean;
  /**
   * Optional. This field indicates if auto scaling is enabled for the
   * Autonomous Database storage.
   */
  isStorageAutoScalingEnabled: boolean;
  /** Required. The license type used for the Autonomous Database. */
  licenseType: AutonomousDatabaseProperties_LicenseType;
  /** Optional. The list of customer contacts. */
  customerContacts: CustomerContact[];
  /** Optional. The ID of the Oracle Cloud Infrastructure vault secret. */
  secretId: string;
  /** Optional. The ID of the Oracle Cloud Infrastructure vault. */
  vaultId: string;
  /** Optional. The maintenance schedule of the Autonomous Database. */
  maintenanceScheduleType: AutonomousDatabaseProperties_MaintenanceScheduleType;
  /**
   * Optional. This field specifies if the Autonomous Database requires mTLS
   * connections.
   */
  mtlsConnectionRequired: boolean;
  /**
   * Optional. The retention period for the Autonomous Database. This field is
   * specified in days, can range from 1 day to 60 days, and has a default value
   * of 60 days.
   */
  backupRetentionPeriodDays: number;
  /**
   * Output only. The amount of storage currently being used for user and system
   * data, in terabytes.
   */
  actualUsedDataStorageSizeTb: number;
  /**
   * Output only. The amount of storage currently allocated for the database
   * tables and billed for, rounded up in terabytes.
   */
  allocatedStorageSizeTb: number;
  /** Output only. The details for the Oracle APEX Application Development. */
  apexDetails:
    | AutonomousDatabaseApex
    | undefined;
  /**
   * Output only. This field indicates the status of Data Guard and Access
   * control for the Autonomous Database. The field's value is null if Data
   * Guard is disabled or Access Control is disabled. The field's value is TRUE
   * if both Data Guard and Access Control are enabled, and the Autonomous
   * Database is using primary IP access control list (ACL) for standby. The
   * field's value is FALSE if both Data Guard and Access Control are enabled,
   * and the Autonomous Database is using a different IP access control list
   * (ACL) for standby compared to primary.
   */
  arePrimaryAllowlistedIpsUsed?:
    | boolean
    | undefined;
  /**
   * Output only. The details of the current lifestyle state of the Autonomous
   * Database.
   */
  lifecycleDetails: string;
  /** Output only. The current lifecycle state of the Autonomous Database. */
  state: State;
  /** Output only. The Autonomous Container Database OCID. */
  autonomousContainerDatabaseId: string;
  /**
   * Output only. The list of available Oracle Database upgrade versions for an
   * Autonomous Database.
   */
  availableUpgradeVersions: string[];
  /**
   * Output only. The connection strings used to connect to an Autonomous
   * Database.
   */
  connectionStrings:
    | AutonomousDatabaseConnectionStrings
    | undefined;
  /** Output only. The Oracle Connection URLs for an Autonomous Database. */
  connectionUrls:
    | AutonomousDatabaseConnectionUrls
    | undefined;
  /**
   * Output only. This field indicates the number of seconds of data loss during
   * a Data Guard failover.
   */
  failedDataRecoveryDuration:
    | Duration
    | undefined;
  /**
   * Output only. The memory assigned to in-memory tables in an Autonomous
   * Database.
   */
  memoryTableGbs: number;
  /**
   * Output only. This field indicates whether the Autonomous Database has local
   * (in-region) Data Guard enabled.
   */
  isLocalDataGuardEnabled: boolean;
  /**
   * Output only. This field indicates the maximum data loss limit for an
   * Autonomous Database, in seconds.
   */
  localAdgAutoFailoverMaxDataLossLimit: number;
  /** Output only. The details of the Autonomous Data Guard standby database. */
  localStandbyDb:
    | AutonomousDatabaseStandbySummary
    | undefined;
  /** Output only. The amount of memory enabled per ECPU, in gigabytes. */
  memoryPerOracleComputeUnitGbs: number;
  /**
   * Output only. This field indicates the local disaster recovery (DR) type of
   * an Autonomous Database.
   */
  localDisasterRecoveryType: AutonomousDatabaseProperties_LocalDisasterRecoveryType;
  /**
   * Output only. The current state of the Data Safe registration for the
   * Autonomous Database.
   */
  dataSafeState: AutonomousDatabaseProperties_DataSafeState;
  /**
   * Output only. The current state of database management for the Autonomous
   * Database.
   */
  databaseManagementState: AutonomousDatabaseProperties_DatabaseManagementState;
  /**
   * Output only. This field indicates the current mode of the Autonomous
   * Database.
   */
  openMode: AutonomousDatabaseProperties_OpenMode;
  /**
   * Output only. This field indicates the state of Operations Insights for the
   * Autonomous Database.
   */
  operationsInsightsState: OperationsInsightsState;
  /**
   * Output only. The list of OCIDs of standby databases located in Autonomous
   * Data Guard remote regions that are associated with the source database.
   */
  peerDbIds: string[];
  /** Output only. The permission level of the Autonomous Database. */
  permissionLevel: AutonomousDatabaseProperties_PermissionLevel;
  /** Output only. The private endpoint for the Autonomous Database. */
  privateEndpoint: string;
  /** Output only. The refresh mode of the cloned Autonomous Database. */
  refreshableMode: AutonomousDatabaseProperties_RefreshableMode;
  /** Output only. The refresh State of the clone. */
  refreshableState: AutonomousDatabaseProperties_RefreshableState;
  /** Output only. The Data Guard role of the Autonomous Database. */
  role: AutonomousDatabaseProperties_Role;
  /**
   * Output only. The list and details of the scheduled operations of the
   * Autonomous Database.
   */
  scheduledOperationDetails: ScheduledOperationDetails[];
  /** Output only. The SQL Web Developer URL for the Autonomous Database. */
  sqlWebDeveloperUrl: string;
  /**
   * Output only. The list of available regions that can be used to create a
   * clone for the Autonomous Database.
   */
  supportedCloneRegions: string[];
  /** Output only. The storage space used by Autonomous Database, in gigabytes. */
  usedDataStorageSizeTbs: number;
  /**
   * Output only. The Oracle Cloud Infrastructure link for the Autonomous
   * Database.
   */
  ociUrl: string;
  /**
   * Output only. The storage space used by automatic backups of Autonomous
   * Database, in gigabytes.
   */
  totalAutoBackupStorageSizeGbs: number;
  /** Output only. The long term backup schedule of the Autonomous Database. */
  nextLongTermBackupTime:
    | Date
    | undefined;
  /** Output only. The date and time when maintenance will begin. */
  maintenanceBeginTime:
    | Date
    | undefined;
  /** Output only. The date and time when maintenance will end. */
  maintenanceEndTime: Date | undefined;
}

/** The editions available for the Autonomous Database. */
export enum AutonomousDatabaseProperties_DatabaseEdition {
  /** DATABASE_EDITION_UNSPECIFIED - Default unspecified value. */
  DATABASE_EDITION_UNSPECIFIED = 0,
  /** STANDARD_EDITION - Standard Database Edition */
  STANDARD_EDITION = 1,
  /** ENTERPRISE_EDITION - Enterprise Database Edition */
  ENTERPRISE_EDITION = 2,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_DatabaseEditionFromJSON(
  object: any,
): AutonomousDatabaseProperties_DatabaseEdition {
  switch (object) {
    case 0:
    case "DATABASE_EDITION_UNSPECIFIED":
      return AutonomousDatabaseProperties_DatabaseEdition.DATABASE_EDITION_UNSPECIFIED;
    case 1:
    case "STANDARD_EDITION":
      return AutonomousDatabaseProperties_DatabaseEdition.STANDARD_EDITION;
    case 2:
    case "ENTERPRISE_EDITION":
      return AutonomousDatabaseProperties_DatabaseEdition.ENTERPRISE_EDITION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_DatabaseEdition.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_DatabaseEditionToJSON(
  object: AutonomousDatabaseProperties_DatabaseEdition,
): string {
  switch (object) {
    case AutonomousDatabaseProperties_DatabaseEdition.DATABASE_EDITION_UNSPECIFIED:
      return "DATABASE_EDITION_UNSPECIFIED";
    case AutonomousDatabaseProperties_DatabaseEdition.STANDARD_EDITION:
      return "STANDARD_EDITION";
    case AutonomousDatabaseProperties_DatabaseEdition.ENTERPRISE_EDITION:
      return "ENTERPRISE_EDITION";
    case AutonomousDatabaseProperties_DatabaseEdition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The license types available for the Autonomous Database. */
export enum AutonomousDatabaseProperties_LicenseType {
  /** LICENSE_TYPE_UNSPECIFIED - Unspecified */
  LICENSE_TYPE_UNSPECIFIED = 0,
  /** LICENSE_INCLUDED - License included part of offer */
  LICENSE_INCLUDED = 1,
  /** BRING_YOUR_OWN_LICENSE - Bring your own license */
  BRING_YOUR_OWN_LICENSE = 2,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_LicenseTypeFromJSON(
  object: any,
): AutonomousDatabaseProperties_LicenseType {
  switch (object) {
    case 0:
    case "LICENSE_TYPE_UNSPECIFIED":
      return AutonomousDatabaseProperties_LicenseType.LICENSE_TYPE_UNSPECIFIED;
    case 1:
    case "LICENSE_INCLUDED":
      return AutonomousDatabaseProperties_LicenseType.LICENSE_INCLUDED;
    case 2:
    case "BRING_YOUR_OWN_LICENSE":
      return AutonomousDatabaseProperties_LicenseType.BRING_YOUR_OWN_LICENSE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_LicenseType.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_LicenseTypeToJSON(
  object: AutonomousDatabaseProperties_LicenseType,
): string {
  switch (object) {
    case AutonomousDatabaseProperties_LicenseType.LICENSE_TYPE_UNSPECIFIED:
      return "LICENSE_TYPE_UNSPECIFIED";
    case AutonomousDatabaseProperties_LicenseType.LICENSE_INCLUDED:
      return "LICENSE_INCLUDED";
    case AutonomousDatabaseProperties_LicenseType.BRING_YOUR_OWN_LICENSE:
      return "BRING_YOUR_OWN_LICENSE";
    case AutonomousDatabaseProperties_LicenseType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The available maintenance schedules for the Autonomous Database. */
export enum AutonomousDatabaseProperties_MaintenanceScheduleType {
  /** MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED - Default unspecified value. */
  MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED = 0,
  /**
   * EARLY - An EARLY maintenance schedule patches the database before
   * the regular scheduled maintenance.
   */
  EARLY = 1,
  /** REGULAR - A REGULAR maintenance schedule follows the normal maintenance cycle. */
  REGULAR = 2,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_MaintenanceScheduleTypeFromJSON(
  object: any,
): AutonomousDatabaseProperties_MaintenanceScheduleType {
  switch (object) {
    case 0:
    case "MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED":
      return AutonomousDatabaseProperties_MaintenanceScheduleType.MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED;
    case 1:
    case "EARLY":
      return AutonomousDatabaseProperties_MaintenanceScheduleType.EARLY;
    case 2:
    case "REGULAR":
      return AutonomousDatabaseProperties_MaintenanceScheduleType.REGULAR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_MaintenanceScheduleType.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_MaintenanceScheduleTypeToJSON(
  object: AutonomousDatabaseProperties_MaintenanceScheduleType,
): string {
  switch (object) {
    case AutonomousDatabaseProperties_MaintenanceScheduleType.MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED:
      return "MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED";
    case AutonomousDatabaseProperties_MaintenanceScheduleType.EARLY:
      return "EARLY";
    case AutonomousDatabaseProperties_MaintenanceScheduleType.REGULAR:
      return "REGULAR";
    case AutonomousDatabaseProperties_MaintenanceScheduleType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The types of local disaster recovery available for an Autonomous Database. */
export enum AutonomousDatabaseProperties_LocalDisasterRecoveryType {
  /** LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED - Default unspecified value. */
  LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED = 0,
  /** ADG - Autonomous Data Guard recovery. */
  ADG = 1,
  /** BACKUP_BASED - Backup based recovery. */
  BACKUP_BASED = 2,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_LocalDisasterRecoveryTypeFromJSON(
  object: any,
): AutonomousDatabaseProperties_LocalDisasterRecoveryType {
  switch (object) {
    case 0:
    case "LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED":
      return AutonomousDatabaseProperties_LocalDisasterRecoveryType.LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED;
    case 1:
    case "ADG":
      return AutonomousDatabaseProperties_LocalDisasterRecoveryType.ADG;
    case 2:
    case "BACKUP_BASED":
      return AutonomousDatabaseProperties_LocalDisasterRecoveryType.BACKUP_BASED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_LocalDisasterRecoveryType.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_LocalDisasterRecoveryTypeToJSON(
  object: AutonomousDatabaseProperties_LocalDisasterRecoveryType,
): string {
  switch (object) {
    case AutonomousDatabaseProperties_LocalDisasterRecoveryType.LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED:
      return "LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED";
    case AutonomousDatabaseProperties_LocalDisasterRecoveryType.ADG:
      return "ADG";
    case AutonomousDatabaseProperties_LocalDisasterRecoveryType.BACKUP_BASED:
      return "BACKUP_BASED";
    case AutonomousDatabaseProperties_LocalDisasterRecoveryType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Varies states of the Data Safe registration for the Autonomous Database. */
export enum AutonomousDatabaseProperties_DataSafeState {
  /** DATA_SAFE_STATE_UNSPECIFIED - Default unspecified value. */
  DATA_SAFE_STATE_UNSPECIFIED = 0,
  /** REGISTERING - Registering data safe state. */
  REGISTERING = 1,
  /** REGISTERED - Registered data safe state. */
  REGISTERED = 2,
  /** DEREGISTERING - Deregistering data safe state. */
  DEREGISTERING = 3,
  /** NOT_REGISTERED - Not registered data safe state. */
  NOT_REGISTERED = 4,
  /** FAILED - Failed data safe state. */
  FAILED = 5,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_DataSafeStateFromJSON(
  object: any,
): AutonomousDatabaseProperties_DataSafeState {
  switch (object) {
    case 0:
    case "DATA_SAFE_STATE_UNSPECIFIED":
      return AutonomousDatabaseProperties_DataSafeState.DATA_SAFE_STATE_UNSPECIFIED;
    case 1:
    case "REGISTERING":
      return AutonomousDatabaseProperties_DataSafeState.REGISTERING;
    case 2:
    case "REGISTERED":
      return AutonomousDatabaseProperties_DataSafeState.REGISTERED;
    case 3:
    case "DEREGISTERING":
      return AutonomousDatabaseProperties_DataSafeState.DEREGISTERING;
    case 4:
    case "NOT_REGISTERED":
      return AutonomousDatabaseProperties_DataSafeState.NOT_REGISTERED;
    case 5:
    case "FAILED":
      return AutonomousDatabaseProperties_DataSafeState.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_DataSafeState.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_DataSafeStateToJSON(
  object: AutonomousDatabaseProperties_DataSafeState,
): string {
  switch (object) {
    case AutonomousDatabaseProperties_DataSafeState.DATA_SAFE_STATE_UNSPECIFIED:
      return "DATA_SAFE_STATE_UNSPECIFIED";
    case AutonomousDatabaseProperties_DataSafeState.REGISTERING:
      return "REGISTERING";
    case AutonomousDatabaseProperties_DataSafeState.REGISTERED:
      return "REGISTERED";
    case AutonomousDatabaseProperties_DataSafeState.DEREGISTERING:
      return "DEREGISTERING";
    case AutonomousDatabaseProperties_DataSafeState.NOT_REGISTERED:
      return "NOT_REGISTERED";
    case AutonomousDatabaseProperties_DataSafeState.FAILED:
      return "FAILED";
    case AutonomousDatabaseProperties_DataSafeState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The different states of database management for an Autonomous Database. */
export enum AutonomousDatabaseProperties_DatabaseManagementState {
  /** DATABASE_MANAGEMENT_STATE_UNSPECIFIED - Default unspecified value. */
  DATABASE_MANAGEMENT_STATE_UNSPECIFIED = 0,
  /** ENABLING - Enabling Database Management state */
  ENABLING = 1,
  /** ENABLED - Enabled Database Management state */
  ENABLED = 2,
  /** DISABLING - Disabling Database Management state */
  DISABLING = 3,
  /** NOT_ENABLED - Not Enabled Database Management state */
  NOT_ENABLED = 4,
  /** FAILED_ENABLING - Failed enabling Database Management state */
  FAILED_ENABLING = 5,
  /** FAILED_DISABLING - Failed disabling Database Management state */
  FAILED_DISABLING = 6,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_DatabaseManagementStateFromJSON(
  object: any,
): AutonomousDatabaseProperties_DatabaseManagementState {
  switch (object) {
    case 0:
    case "DATABASE_MANAGEMENT_STATE_UNSPECIFIED":
      return AutonomousDatabaseProperties_DatabaseManagementState.DATABASE_MANAGEMENT_STATE_UNSPECIFIED;
    case 1:
    case "ENABLING":
      return AutonomousDatabaseProperties_DatabaseManagementState.ENABLING;
    case 2:
    case "ENABLED":
      return AutonomousDatabaseProperties_DatabaseManagementState.ENABLED;
    case 3:
    case "DISABLING":
      return AutonomousDatabaseProperties_DatabaseManagementState.DISABLING;
    case 4:
    case "NOT_ENABLED":
      return AutonomousDatabaseProperties_DatabaseManagementState.NOT_ENABLED;
    case 5:
    case "FAILED_ENABLING":
      return AutonomousDatabaseProperties_DatabaseManagementState.FAILED_ENABLING;
    case 6:
    case "FAILED_DISABLING":
      return AutonomousDatabaseProperties_DatabaseManagementState.FAILED_DISABLING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_DatabaseManagementState.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_DatabaseManagementStateToJSON(
  object: AutonomousDatabaseProperties_DatabaseManagementState,
): string {
  switch (object) {
    case AutonomousDatabaseProperties_DatabaseManagementState.DATABASE_MANAGEMENT_STATE_UNSPECIFIED:
      return "DATABASE_MANAGEMENT_STATE_UNSPECIFIED";
    case AutonomousDatabaseProperties_DatabaseManagementState.ENABLING:
      return "ENABLING";
    case AutonomousDatabaseProperties_DatabaseManagementState.ENABLED:
      return "ENABLED";
    case AutonomousDatabaseProperties_DatabaseManagementState.DISABLING:
      return "DISABLING";
    case AutonomousDatabaseProperties_DatabaseManagementState.NOT_ENABLED:
      return "NOT_ENABLED";
    case AutonomousDatabaseProperties_DatabaseManagementState.FAILED_ENABLING:
      return "FAILED_ENABLING";
    case AutonomousDatabaseProperties_DatabaseManagementState.FAILED_DISABLING:
      return "FAILED_DISABLING";
    case AutonomousDatabaseProperties_DatabaseManagementState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** This field indicates the modes of an Autonomous Database. */
export enum AutonomousDatabaseProperties_OpenMode {
  /** OPEN_MODE_UNSPECIFIED - Default unspecified value. */
  OPEN_MODE_UNSPECIFIED = 0,
  /** READ_ONLY - Read Only Mode */
  READ_ONLY = 1,
  /** READ_WRITE - Read Write Mode */
  READ_WRITE = 2,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_OpenModeFromJSON(object: any): AutonomousDatabaseProperties_OpenMode {
  switch (object) {
    case 0:
    case "OPEN_MODE_UNSPECIFIED":
      return AutonomousDatabaseProperties_OpenMode.OPEN_MODE_UNSPECIFIED;
    case 1:
    case "READ_ONLY":
      return AutonomousDatabaseProperties_OpenMode.READ_ONLY;
    case 2:
    case "READ_WRITE":
      return AutonomousDatabaseProperties_OpenMode.READ_WRITE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_OpenMode.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_OpenModeToJSON(object: AutonomousDatabaseProperties_OpenMode): string {
  switch (object) {
    case AutonomousDatabaseProperties_OpenMode.OPEN_MODE_UNSPECIFIED:
      return "OPEN_MODE_UNSPECIFIED";
    case AutonomousDatabaseProperties_OpenMode.READ_ONLY:
      return "READ_ONLY";
    case AutonomousDatabaseProperties_OpenMode.READ_WRITE:
      return "READ_WRITE";
    case AutonomousDatabaseProperties_OpenMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The types of permission levels for an Autonomous Database. */
export enum AutonomousDatabaseProperties_PermissionLevel {
  /** PERMISSION_LEVEL_UNSPECIFIED - Default unspecified value. */
  PERMISSION_LEVEL_UNSPECIFIED = 0,
  /** RESTRICTED - Restricted mode allows access only by admin users. */
  RESTRICTED = 1,
  /** UNRESTRICTED - Normal access. */
  UNRESTRICTED = 2,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_PermissionLevelFromJSON(
  object: any,
): AutonomousDatabaseProperties_PermissionLevel {
  switch (object) {
    case 0:
    case "PERMISSION_LEVEL_UNSPECIFIED":
      return AutonomousDatabaseProperties_PermissionLevel.PERMISSION_LEVEL_UNSPECIFIED;
    case 1:
    case "RESTRICTED":
      return AutonomousDatabaseProperties_PermissionLevel.RESTRICTED;
    case 2:
    case "UNRESTRICTED":
      return AutonomousDatabaseProperties_PermissionLevel.UNRESTRICTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_PermissionLevel.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_PermissionLevelToJSON(
  object: AutonomousDatabaseProperties_PermissionLevel,
): string {
  switch (object) {
    case AutonomousDatabaseProperties_PermissionLevel.PERMISSION_LEVEL_UNSPECIFIED:
      return "PERMISSION_LEVEL_UNSPECIFIED";
    case AutonomousDatabaseProperties_PermissionLevel.RESTRICTED:
      return "RESTRICTED";
    case AutonomousDatabaseProperties_PermissionLevel.UNRESTRICTED:
      return "UNRESTRICTED";
    case AutonomousDatabaseProperties_PermissionLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The refresh mode of the cloned Autonomous Database. */
export enum AutonomousDatabaseProperties_RefreshableMode {
  /** REFRESHABLE_MODE_UNSPECIFIED - The default unspecified value. */
  REFRESHABLE_MODE_UNSPECIFIED = 0,
  /**
   * AUTOMATIC - AUTOMATIC indicates that the cloned database is automatically
   * refreshed with data from the source Autonomous Database.
   */
  AUTOMATIC = 1,
  /**
   * MANUAL - MANUAL indicates that the cloned database is manually refreshed with
   * data from the source Autonomous Database.
   */
  MANUAL = 2,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_RefreshableModeFromJSON(
  object: any,
): AutonomousDatabaseProperties_RefreshableMode {
  switch (object) {
    case 0:
    case "REFRESHABLE_MODE_UNSPECIFIED":
      return AutonomousDatabaseProperties_RefreshableMode.REFRESHABLE_MODE_UNSPECIFIED;
    case 1:
    case "AUTOMATIC":
      return AutonomousDatabaseProperties_RefreshableMode.AUTOMATIC;
    case 2:
    case "MANUAL":
      return AutonomousDatabaseProperties_RefreshableMode.MANUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_RefreshableMode.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_RefreshableModeToJSON(
  object: AutonomousDatabaseProperties_RefreshableMode,
): string {
  switch (object) {
    case AutonomousDatabaseProperties_RefreshableMode.REFRESHABLE_MODE_UNSPECIFIED:
      return "REFRESHABLE_MODE_UNSPECIFIED";
    case AutonomousDatabaseProperties_RefreshableMode.AUTOMATIC:
      return "AUTOMATIC";
    case AutonomousDatabaseProperties_RefreshableMode.MANUAL:
      return "MANUAL";
    case AutonomousDatabaseProperties_RefreshableMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The refresh state of the cloned Autonomous Database. */
export enum AutonomousDatabaseProperties_RefreshableState {
  /** REFRESHABLE_STATE_UNSPECIFIED - Default unspecified value. */
  REFRESHABLE_STATE_UNSPECIFIED = 0,
  /** REFRESHING - Refreshing */
  REFRESHING = 1,
  /** NOT_REFRESHING - Not refreshed */
  NOT_REFRESHING = 2,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_RefreshableStateFromJSON(
  object: any,
): AutonomousDatabaseProperties_RefreshableState {
  switch (object) {
    case 0:
    case "REFRESHABLE_STATE_UNSPECIFIED":
      return AutonomousDatabaseProperties_RefreshableState.REFRESHABLE_STATE_UNSPECIFIED;
    case 1:
    case "REFRESHING":
      return AutonomousDatabaseProperties_RefreshableState.REFRESHING;
    case 2:
    case "NOT_REFRESHING":
      return AutonomousDatabaseProperties_RefreshableState.NOT_REFRESHING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_RefreshableState.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_RefreshableStateToJSON(
  object: AutonomousDatabaseProperties_RefreshableState,
): string {
  switch (object) {
    case AutonomousDatabaseProperties_RefreshableState.REFRESHABLE_STATE_UNSPECIFIED:
      return "REFRESHABLE_STATE_UNSPECIFIED";
    case AutonomousDatabaseProperties_RefreshableState.REFRESHING:
      return "REFRESHING";
    case AutonomousDatabaseProperties_RefreshableState.NOT_REFRESHING:
      return "NOT_REFRESHING";
    case AutonomousDatabaseProperties_RefreshableState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The Data Guard role of the Autonomous Database. */
export enum AutonomousDatabaseProperties_Role {
  /** ROLE_UNSPECIFIED - Default unspecified value. */
  ROLE_UNSPECIFIED = 0,
  /** PRIMARY - Primary role */
  PRIMARY = 1,
  /** STANDBY - Standby role */
  STANDBY = 2,
  /** DISABLED_STANDBY - Disabled standby role */
  DISABLED_STANDBY = 3,
  /** BACKUP_COPY - Backup copy role */
  BACKUP_COPY = 4,
  /** SNAPSHOT_STANDBY - Snapshot standby role */
  SNAPSHOT_STANDBY = 5,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseProperties_RoleFromJSON(object: any): AutonomousDatabaseProperties_Role {
  switch (object) {
    case 0:
    case "ROLE_UNSPECIFIED":
      return AutonomousDatabaseProperties_Role.ROLE_UNSPECIFIED;
    case 1:
    case "PRIMARY":
      return AutonomousDatabaseProperties_Role.PRIMARY;
    case 2:
    case "STANDBY":
      return AutonomousDatabaseProperties_Role.STANDBY;
    case 3:
    case "DISABLED_STANDBY":
      return AutonomousDatabaseProperties_Role.DISABLED_STANDBY;
    case 4:
    case "BACKUP_COPY":
      return AutonomousDatabaseProperties_Role.BACKUP_COPY;
    case 5:
    case "SNAPSHOT_STANDBY":
      return AutonomousDatabaseProperties_Role.SNAPSHOT_STANDBY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseProperties_Role.UNRECOGNIZED;
  }
}

export function autonomousDatabaseProperties_RoleToJSON(object: AutonomousDatabaseProperties_Role): string {
  switch (object) {
    case AutonomousDatabaseProperties_Role.ROLE_UNSPECIFIED:
      return "ROLE_UNSPECIFIED";
    case AutonomousDatabaseProperties_Role.PRIMARY:
      return "PRIMARY";
    case AutonomousDatabaseProperties_Role.STANDBY:
      return "STANDBY";
    case AutonomousDatabaseProperties_Role.DISABLED_STANDBY:
      return "DISABLED_STANDBY";
    case AutonomousDatabaseProperties_Role.BACKUP_COPY:
      return "BACKUP_COPY";
    case AutonomousDatabaseProperties_Role.SNAPSHOT_STANDBY:
      return "SNAPSHOT_STANDBY";
    case AutonomousDatabaseProperties_Role.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Oracle APEX Application Development.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex
 */
export interface AutonomousDatabaseApex {
  /** Output only. The Oracle APEX Application Development version. */
  apexVersion: string;
  /** Output only. The Oracle REST Data Services (ORDS) version. */
  ordsVersion: string;
}

/**
 * The connection string used to connect to the Autonomous Database.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings
 */
export interface AutonomousDatabaseConnectionStrings {
  /**
   * Output only. Returns all connection strings that can be used to connect to
   * the Autonomous Database.
   */
  allConnectionStrings:
    | AllConnectionStrings
    | undefined;
  /**
   * Output only. The database service provides the least level of resources to
   * each SQL statement, but supports the most number of concurrent SQL
   * statements.
   */
  dedicated: string;
  /**
   * Output only. The database service provides the highest level of resources
   * to each SQL statement.
   */
  high: string;
  /**
   * Output only. The database service provides the least level of resources to
   * each SQL statement.
   */
  low: string;
  /**
   * Output only. The database service provides a lower level of resources to
   * each SQL statement.
   */
  medium: string;
  /**
   * Output only. A list of connection string profiles to allow clients to
   * group, filter, and select values based on the structured metadata.
   */
  profiles: DatabaseConnectionStringProfile[];
}

/**
 * The connection string profile to allow clients to group.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/DatabaseConnectionStringProfile
 */
export interface DatabaseConnectionStringProfile {
  /** Output only. The current consumer group being used by the connection. */
  consumerGroup: DatabaseConnectionStringProfile_ConsumerGroup;
  /** Output only. The display name for the database connection. */
  displayName: string;
  /**
   * Output only. The host name format being currently used in connection
   * string.
   */
  hostFormat: DatabaseConnectionStringProfile_HostFormat;
  /**
   * Output only. This field indicates if the connection string is regional and
   * is only applicable for cross-region Data Guard.
   */
  isRegional: boolean;
  /** Output only. The protocol being used by the connection. */
  protocol: DatabaseConnectionStringProfile_Protocol;
  /** Output only. The current session mode of the connection. */
  sessionMode: DatabaseConnectionStringProfile_SessionMode;
  /** Output only. The syntax of the connection string. */
  syntaxFormat: DatabaseConnectionStringProfile_SyntaxFormat;
  /**
   * Output only. This field indicates the TLS authentication type of the
   * connection.
   */
  tlsAuthentication: DatabaseConnectionStringProfile_TLSAuthentication;
  /** Output only. The value of the connection string. */
  value: string;
}

/** The various consumer groups available in the connection string profile. */
export enum DatabaseConnectionStringProfile_ConsumerGroup {
  /** CONSUMER_GROUP_UNSPECIFIED - Default unspecified value. */
  CONSUMER_GROUP_UNSPECIFIED = 0,
  /** HIGH - High consumer group. */
  HIGH = 1,
  /** MEDIUM - Medium consumer group. */
  MEDIUM = 2,
  /** LOW - Low consumer group. */
  LOW = 3,
  /** TP - TP consumer group. */
  TP = 4,
  /** TPURGENT - TPURGENT consumer group. */
  TPURGENT = 5,
  UNRECOGNIZED = -1,
}

export function databaseConnectionStringProfile_ConsumerGroupFromJSON(
  object: any,
): DatabaseConnectionStringProfile_ConsumerGroup {
  switch (object) {
    case 0:
    case "CONSUMER_GROUP_UNSPECIFIED":
      return DatabaseConnectionStringProfile_ConsumerGroup.CONSUMER_GROUP_UNSPECIFIED;
    case 1:
    case "HIGH":
      return DatabaseConnectionStringProfile_ConsumerGroup.HIGH;
    case 2:
    case "MEDIUM":
      return DatabaseConnectionStringProfile_ConsumerGroup.MEDIUM;
    case 3:
    case "LOW":
      return DatabaseConnectionStringProfile_ConsumerGroup.LOW;
    case 4:
    case "TP":
      return DatabaseConnectionStringProfile_ConsumerGroup.TP;
    case 5:
    case "TPURGENT":
      return DatabaseConnectionStringProfile_ConsumerGroup.TPURGENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DatabaseConnectionStringProfile_ConsumerGroup.UNRECOGNIZED;
  }
}

export function databaseConnectionStringProfile_ConsumerGroupToJSON(
  object: DatabaseConnectionStringProfile_ConsumerGroup,
): string {
  switch (object) {
    case DatabaseConnectionStringProfile_ConsumerGroup.CONSUMER_GROUP_UNSPECIFIED:
      return "CONSUMER_GROUP_UNSPECIFIED";
    case DatabaseConnectionStringProfile_ConsumerGroup.HIGH:
      return "HIGH";
    case DatabaseConnectionStringProfile_ConsumerGroup.MEDIUM:
      return "MEDIUM";
    case DatabaseConnectionStringProfile_ConsumerGroup.LOW:
      return "LOW";
    case DatabaseConnectionStringProfile_ConsumerGroup.TP:
      return "TP";
    case DatabaseConnectionStringProfile_ConsumerGroup.TPURGENT:
      return "TPURGENT";
    case DatabaseConnectionStringProfile_ConsumerGroup.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The host name format being used in the connection string. */
export enum DatabaseConnectionStringProfile_HostFormat {
  /** HOST_FORMAT_UNSPECIFIED - Default unspecified value. */
  HOST_FORMAT_UNSPECIFIED = 0,
  /** FQDN - FQDN */
  FQDN = 1,
  /** IP - IP */
  IP = 2,
  UNRECOGNIZED = -1,
}

export function databaseConnectionStringProfile_HostFormatFromJSON(
  object: any,
): DatabaseConnectionStringProfile_HostFormat {
  switch (object) {
    case 0:
    case "HOST_FORMAT_UNSPECIFIED":
      return DatabaseConnectionStringProfile_HostFormat.HOST_FORMAT_UNSPECIFIED;
    case 1:
    case "FQDN":
      return DatabaseConnectionStringProfile_HostFormat.FQDN;
    case 2:
    case "IP":
      return DatabaseConnectionStringProfile_HostFormat.IP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DatabaseConnectionStringProfile_HostFormat.UNRECOGNIZED;
  }
}

export function databaseConnectionStringProfile_HostFormatToJSON(
  object: DatabaseConnectionStringProfile_HostFormat,
): string {
  switch (object) {
    case DatabaseConnectionStringProfile_HostFormat.HOST_FORMAT_UNSPECIFIED:
      return "HOST_FORMAT_UNSPECIFIED";
    case DatabaseConnectionStringProfile_HostFormat.FQDN:
      return "FQDN";
    case DatabaseConnectionStringProfile_HostFormat.IP:
      return "IP";
    case DatabaseConnectionStringProfile_HostFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The protocol being used by the connection. */
export enum DatabaseConnectionStringProfile_Protocol {
  /** PROTOCOL_UNSPECIFIED - Default unspecified value. */
  PROTOCOL_UNSPECIFIED = 0,
  /** TCP - Tcp */
  TCP = 1,
  /** TCPS - Tcps */
  TCPS = 2,
  UNRECOGNIZED = -1,
}

export function databaseConnectionStringProfile_ProtocolFromJSON(
  object: any,
): DatabaseConnectionStringProfile_Protocol {
  switch (object) {
    case 0:
    case "PROTOCOL_UNSPECIFIED":
      return DatabaseConnectionStringProfile_Protocol.PROTOCOL_UNSPECIFIED;
    case 1:
    case "TCP":
      return DatabaseConnectionStringProfile_Protocol.TCP;
    case 2:
    case "TCPS":
      return DatabaseConnectionStringProfile_Protocol.TCPS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DatabaseConnectionStringProfile_Protocol.UNRECOGNIZED;
  }
}

export function databaseConnectionStringProfile_ProtocolToJSON(
  object: DatabaseConnectionStringProfile_Protocol,
): string {
  switch (object) {
    case DatabaseConnectionStringProfile_Protocol.PROTOCOL_UNSPECIFIED:
      return "PROTOCOL_UNSPECIFIED";
    case DatabaseConnectionStringProfile_Protocol.TCP:
      return "TCP";
    case DatabaseConnectionStringProfile_Protocol.TCPS:
      return "TCPS";
    case DatabaseConnectionStringProfile_Protocol.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The session mode of the connection. */
export enum DatabaseConnectionStringProfile_SessionMode {
  /** SESSION_MODE_UNSPECIFIED - Default unspecified value. */
  SESSION_MODE_UNSPECIFIED = 0,
  /** DIRECT - Direct */
  DIRECT = 1,
  /** INDIRECT - Indirect */
  INDIRECT = 2,
  UNRECOGNIZED = -1,
}

export function databaseConnectionStringProfile_SessionModeFromJSON(
  object: any,
): DatabaseConnectionStringProfile_SessionMode {
  switch (object) {
    case 0:
    case "SESSION_MODE_UNSPECIFIED":
      return DatabaseConnectionStringProfile_SessionMode.SESSION_MODE_UNSPECIFIED;
    case 1:
    case "DIRECT":
      return DatabaseConnectionStringProfile_SessionMode.DIRECT;
    case 2:
    case "INDIRECT":
      return DatabaseConnectionStringProfile_SessionMode.INDIRECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DatabaseConnectionStringProfile_SessionMode.UNRECOGNIZED;
  }
}

export function databaseConnectionStringProfile_SessionModeToJSON(
  object: DatabaseConnectionStringProfile_SessionMode,
): string {
  switch (object) {
    case DatabaseConnectionStringProfile_SessionMode.SESSION_MODE_UNSPECIFIED:
      return "SESSION_MODE_UNSPECIFIED";
    case DatabaseConnectionStringProfile_SessionMode.DIRECT:
      return "DIRECT";
    case DatabaseConnectionStringProfile_SessionMode.INDIRECT:
      return "INDIRECT";
    case DatabaseConnectionStringProfile_SessionMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Specifies syntax of the connection string. */
export enum DatabaseConnectionStringProfile_SyntaxFormat {
  /** SYNTAX_FORMAT_UNSPECIFIED - Default unspecified value. */
  SYNTAX_FORMAT_UNSPECIFIED = 0,
  /** LONG - Long */
  LONG = 1,
  /** EZCONNECT - Ezconnect */
  EZCONNECT = 2,
  /** EZCONNECTPLUS - Ezconnectplus */
  EZCONNECTPLUS = 3,
  UNRECOGNIZED = -1,
}

export function databaseConnectionStringProfile_SyntaxFormatFromJSON(
  object: any,
): DatabaseConnectionStringProfile_SyntaxFormat {
  switch (object) {
    case 0:
    case "SYNTAX_FORMAT_UNSPECIFIED":
      return DatabaseConnectionStringProfile_SyntaxFormat.SYNTAX_FORMAT_UNSPECIFIED;
    case 1:
    case "LONG":
      return DatabaseConnectionStringProfile_SyntaxFormat.LONG;
    case 2:
    case "EZCONNECT":
      return DatabaseConnectionStringProfile_SyntaxFormat.EZCONNECT;
    case 3:
    case "EZCONNECTPLUS":
      return DatabaseConnectionStringProfile_SyntaxFormat.EZCONNECTPLUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DatabaseConnectionStringProfile_SyntaxFormat.UNRECOGNIZED;
  }
}

export function databaseConnectionStringProfile_SyntaxFormatToJSON(
  object: DatabaseConnectionStringProfile_SyntaxFormat,
): string {
  switch (object) {
    case DatabaseConnectionStringProfile_SyntaxFormat.SYNTAX_FORMAT_UNSPECIFIED:
      return "SYNTAX_FORMAT_UNSPECIFIED";
    case DatabaseConnectionStringProfile_SyntaxFormat.LONG:
      return "LONG";
    case DatabaseConnectionStringProfile_SyntaxFormat.EZCONNECT:
      return "EZCONNECT";
    case DatabaseConnectionStringProfile_SyntaxFormat.EZCONNECTPLUS:
      return "EZCONNECTPLUS";
    case DatabaseConnectionStringProfile_SyntaxFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** This field indicates the TLS authentication type of the connection. */
export enum DatabaseConnectionStringProfile_TLSAuthentication {
  /** TLS_AUTHENTICATION_UNSPECIFIED - Default unspecified value. */
  TLS_AUTHENTICATION_UNSPECIFIED = 0,
  /** SERVER - Server */
  SERVER = 1,
  /** MUTUAL - Mutual */
  MUTUAL = 2,
  UNRECOGNIZED = -1,
}

export function databaseConnectionStringProfile_TLSAuthenticationFromJSON(
  object: any,
): DatabaseConnectionStringProfile_TLSAuthentication {
  switch (object) {
    case 0:
    case "TLS_AUTHENTICATION_UNSPECIFIED":
      return DatabaseConnectionStringProfile_TLSAuthentication.TLS_AUTHENTICATION_UNSPECIFIED;
    case 1:
    case "SERVER":
      return DatabaseConnectionStringProfile_TLSAuthentication.SERVER;
    case 2:
    case "MUTUAL":
      return DatabaseConnectionStringProfile_TLSAuthentication.MUTUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DatabaseConnectionStringProfile_TLSAuthentication.UNRECOGNIZED;
  }
}

export function databaseConnectionStringProfile_TLSAuthenticationToJSON(
  object: DatabaseConnectionStringProfile_TLSAuthentication,
): string {
  switch (object) {
    case DatabaseConnectionStringProfile_TLSAuthentication.TLS_AUTHENTICATION_UNSPECIFIED:
      return "TLS_AUTHENTICATION_UNSPECIFIED";
    case DatabaseConnectionStringProfile_TLSAuthentication.SERVER:
      return "SERVER";
    case DatabaseConnectionStringProfile_TLSAuthentication.MUTUAL:
      return "MUTUAL";
    case DatabaseConnectionStringProfile_TLSAuthentication.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A list of all connection strings that can be used to connect to the
 * Autonomous Database.
 */
export interface AllConnectionStrings {
  /**
   * Output only. The database service provides the highest level of resources
   * to each SQL statement.
   */
  high: string;
  /**
   * Output only. The database service provides the least level of resources to
   * each SQL statement.
   */
  low: string;
  /**
   * Output only. The database service provides a lower level of resources to
   * each SQL statement.
   */
  medium: string;
}

/**
 * The URLs for accessing Oracle Application Express (APEX) and SQL Developer
 * Web with a browser from a Compute instance.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls
 */
export interface AutonomousDatabaseConnectionUrls {
  /** Output only. Oracle Application Express (APEX) URL. */
  apexUri: string;
  /**
   * Output only. The URL of the Database Transforms for the Autonomous
   * Database.
   */
  databaseTransformsUri: string;
  /** Output only. The URL of the Graph Studio for the Autonomous Database. */
  graphStudioUri: string;
  /**
   * Output only. The URL of the Oracle Machine Learning (OML) Notebook for the
   * Autonomous Database.
   */
  machineLearningNotebookUri: string;
  /**
   * Output only. The URL of Machine Learning user management the Autonomous
   * Database.
   */
  machineLearningUserManagementUri: string;
  /** Output only. The URL of the MongoDB API for the Autonomous Database. */
  mongoDbUri: string;
  /**
   * Output only. The Oracle REST Data Services (ORDS) URL of the Web Access for
   * the Autonomous Database.
   */
  ordsUri: string;
  /**
   * Output only. The URL of the Oracle SQL Developer Web for the Autonomous
   * Database.
   */
  sqlDevWebUri: string;
}

/**
 * Autonomous Data Guard standby database details.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary
 */
export interface AutonomousDatabaseStandbySummary {
  /**
   * Output only. The amount of time, in seconds, that the data of the standby
   * database lags in comparison to the data of the primary database.
   */
  lagTimeDuration:
    | Duration
    | undefined;
  /**
   * Output only. The additional details about the current lifecycle state of
   * the Autonomous Database.
   */
  lifecycleDetails: string;
  /** Output only. The current lifecycle state of the Autonomous Database. */
  state: State;
  /**
   * Output only. The date and time the Autonomous Data Guard role was switched
   * for the standby Autonomous Database.
   */
  dataGuardRoleChangedTime:
    | Date
    | undefined;
  /**
   * Output only. The date and time the Disaster Recovery role was switched for
   * the standby Autonomous Database.
   */
  disasterRecoveryRoleChangedTime: Date | undefined;
}

/**
 * Details of scheduled operation.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/ScheduledOperationDetails
 */
export interface ScheduledOperationDetails {
  /** Output only. Day of week. */
  dayOfWeek: DayOfWeek;
  /** Output only. Auto start time. */
  startTime:
    | TimeOfDay
    | undefined;
  /** Output only. Auto stop time. */
  stopTime: TimeOfDay | undefined;
}

function createBaseAutonomousDatabase(): AutonomousDatabase {
  return {
    name: "",
    database: "",
    displayName: "",
    entitlementId: "",
    adminPassword: "",
    properties: undefined,
    labels: {},
    network: "",
    cidr: "",
    createTime: undefined,
  };
}

export const AutonomousDatabase: MessageFns<AutonomousDatabase> = {
  encode(message: AutonomousDatabase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.database !== "") {
      writer.uint32(18).string(message.database);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.entitlementId !== "") {
      writer.uint32(42).string(message.entitlementId);
    }
    if (message.adminPassword !== "") {
      writer.uint32(50).string(message.adminPassword);
    }
    if (message.properties !== undefined) {
      AutonomousDatabaseProperties.encode(message.properties, writer.uint32(58).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      AutonomousDatabase_LabelsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    if (message.network !== "") {
      writer.uint32(74).string(message.network);
    }
    if (message.cidr !== "") {
      writer.uint32(82).string(message.cidr);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.database = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.entitlementId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.adminPassword = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.properties = AutonomousDatabaseProperties.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = AutonomousDatabase_LabelsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.labels[entry8.key] = entry8.value;
          }
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.network = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.cidr = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabase {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      database: isSet(object.database) ? globalThis.String(object.database) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      entitlementId: isSet(object.entitlementId) ? globalThis.String(object.entitlementId) : "",
      adminPassword: isSet(object.adminPassword) ? globalThis.String(object.adminPassword) : "",
      properties: isSet(object.properties) ? AutonomousDatabaseProperties.fromJSON(object.properties) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      cidr: isSet(object.cidr) ? globalThis.String(object.cidr) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: AutonomousDatabase): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.entitlementId !== "") {
      obj.entitlementId = message.entitlementId;
    }
    if (message.adminPassword !== "") {
      obj.adminPassword = message.adminPassword;
    }
    if (message.properties !== undefined) {
      obj.properties = AutonomousDatabaseProperties.toJSON(message.properties);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.cidr !== "") {
      obj.cidr = message.cidr;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabase>): AutonomousDatabase {
    return AutonomousDatabase.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabase>): AutonomousDatabase {
    const message = createBaseAutonomousDatabase();
    message.name = object.name ?? "";
    message.database = object.database ?? "";
    message.displayName = object.displayName ?? "";
    message.entitlementId = object.entitlementId ?? "";
    message.adminPassword = object.adminPassword ?? "";
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? AutonomousDatabaseProperties.fromPartial(object.properties)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.network = object.network ?? "";
    message.cidr = object.cidr ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseAutonomousDatabase_LabelsEntry(): AutonomousDatabase_LabelsEntry {
  return { key: "", value: "" };
}

export const AutonomousDatabase_LabelsEntry: MessageFns<AutonomousDatabase_LabelsEntry> = {
  encode(message: AutonomousDatabase_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabase_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabase_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabase_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AutonomousDatabase_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabase_LabelsEntry>): AutonomousDatabase_LabelsEntry {
    return AutonomousDatabase_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabase_LabelsEntry>): AutonomousDatabase_LabelsEntry {
    const message = createBaseAutonomousDatabase_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAutonomousDatabaseProperties(): AutonomousDatabaseProperties {
  return {
    ocid: "",
    computeCount: 0,
    cpuCoreCount: 0,
    dataStorageSizeTb: 0,
    dataStorageSizeGb: 0,
    dbWorkload: 0,
    dbEdition: 0,
    characterSet: "",
    nCharacterSet: "",
    privateEndpointIp: "",
    privateEndpointLabel: "",
    dbVersion: "",
    isAutoScalingEnabled: false,
    isStorageAutoScalingEnabled: false,
    licenseType: 0,
    customerContacts: [],
    secretId: "",
    vaultId: "",
    maintenanceScheduleType: 0,
    mtlsConnectionRequired: false,
    backupRetentionPeriodDays: 0,
    actualUsedDataStorageSizeTb: 0,
    allocatedStorageSizeTb: 0,
    apexDetails: undefined,
    arePrimaryAllowlistedIpsUsed: undefined,
    lifecycleDetails: "",
    state: 0,
    autonomousContainerDatabaseId: "",
    availableUpgradeVersions: [],
    connectionStrings: undefined,
    connectionUrls: undefined,
    failedDataRecoveryDuration: undefined,
    memoryTableGbs: 0,
    isLocalDataGuardEnabled: false,
    localAdgAutoFailoverMaxDataLossLimit: 0,
    localStandbyDb: undefined,
    memoryPerOracleComputeUnitGbs: 0,
    localDisasterRecoveryType: 0,
    dataSafeState: 0,
    databaseManagementState: 0,
    openMode: 0,
    operationsInsightsState: 0,
    peerDbIds: [],
    permissionLevel: 0,
    privateEndpoint: "",
    refreshableMode: 0,
    refreshableState: 0,
    role: 0,
    scheduledOperationDetails: [],
    sqlWebDeveloperUrl: "",
    supportedCloneRegions: [],
    usedDataStorageSizeTbs: 0,
    ociUrl: "",
    totalAutoBackupStorageSizeGbs: 0,
    nextLongTermBackupTime: undefined,
    maintenanceBeginTime: undefined,
    maintenanceEndTime: undefined,
  };
}

export const AutonomousDatabaseProperties: MessageFns<AutonomousDatabaseProperties> = {
  encode(message: AutonomousDatabaseProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ocid !== "") {
      writer.uint32(10).string(message.ocid);
    }
    if (message.computeCount !== 0) {
      writer.uint32(21).float(message.computeCount);
    }
    if (message.cpuCoreCount !== 0) {
      writer.uint32(24).int32(message.cpuCoreCount);
    }
    if (message.dataStorageSizeTb !== 0) {
      writer.uint32(32).int32(message.dataStorageSizeTb);
    }
    if (message.dataStorageSizeGb !== 0) {
      writer.uint32(504).int32(message.dataStorageSizeGb);
    }
    if (message.dbWorkload !== 0) {
      writer.uint32(40).int32(message.dbWorkload);
    }
    if (message.dbEdition !== 0) {
      writer.uint32(48).int32(message.dbEdition);
    }
    if (message.characterSet !== "") {
      writer.uint32(66).string(message.characterSet);
    }
    if (message.nCharacterSet !== "") {
      writer.uint32(74).string(message.nCharacterSet);
    }
    if (message.privateEndpointIp !== "") {
      writer.uint32(82).string(message.privateEndpointIp);
    }
    if (message.privateEndpointLabel !== "") {
      writer.uint32(90).string(message.privateEndpointLabel);
    }
    if (message.dbVersion !== "") {
      writer.uint32(98).string(message.dbVersion);
    }
    if (message.isAutoScalingEnabled !== false) {
      writer.uint32(112).bool(message.isAutoScalingEnabled);
    }
    if (message.isStorageAutoScalingEnabled !== false) {
      writer.uint32(120).bool(message.isStorageAutoScalingEnabled);
    }
    if (message.licenseType !== 0) {
      writer.uint32(128).int32(message.licenseType);
    }
    for (const v of message.customerContacts) {
      CustomerContact.encode(v!, writer.uint32(138).fork()).join();
    }
    if (message.secretId !== "") {
      writer.uint32(146).string(message.secretId);
    }
    if (message.vaultId !== "") {
      writer.uint32(154).string(message.vaultId);
    }
    if (message.maintenanceScheduleType !== 0) {
      writer.uint32(160).int32(message.maintenanceScheduleType);
    }
    if (message.mtlsConnectionRequired !== false) {
      writer.uint32(272).bool(message.mtlsConnectionRequired);
    }
    if (message.backupRetentionPeriodDays !== 0) {
      writer.uint32(456).int32(message.backupRetentionPeriodDays);
    }
    if (message.actualUsedDataStorageSizeTb !== 0) {
      writer.uint32(169).double(message.actualUsedDataStorageSizeTb);
    }
    if (message.allocatedStorageSizeTb !== 0) {
      writer.uint32(177).double(message.allocatedStorageSizeTb);
    }
    if (message.apexDetails !== undefined) {
      AutonomousDatabaseApex.encode(message.apexDetails, writer.uint32(186).fork()).join();
    }
    if (message.arePrimaryAllowlistedIpsUsed !== undefined) {
      writer.uint32(192).bool(message.arePrimaryAllowlistedIpsUsed);
    }
    if (message.lifecycleDetails !== "") {
      writer.uint32(202).string(message.lifecycleDetails);
    }
    if (message.state !== 0) {
      writer.uint32(208).int32(message.state);
    }
    if (message.autonomousContainerDatabaseId !== "") {
      writer.uint32(218).string(message.autonomousContainerDatabaseId);
    }
    for (const v of message.availableUpgradeVersions) {
      writer.uint32(226).string(v!);
    }
    if (message.connectionStrings !== undefined) {
      AutonomousDatabaseConnectionStrings.encode(message.connectionStrings, writer.uint32(234).fork()).join();
    }
    if (message.connectionUrls !== undefined) {
      AutonomousDatabaseConnectionUrls.encode(message.connectionUrls, writer.uint32(242).fork()).join();
    }
    if (message.failedDataRecoveryDuration !== undefined) {
      Duration.encode(message.failedDataRecoveryDuration, writer.uint32(250).fork()).join();
    }
    if (message.memoryTableGbs !== 0) {
      writer.uint32(256).int32(message.memoryTableGbs);
    }
    if (message.isLocalDataGuardEnabled !== false) {
      writer.uint32(264).bool(message.isLocalDataGuardEnabled);
    }
    if (message.localAdgAutoFailoverMaxDataLossLimit !== 0) {
      writer.uint32(280).int32(message.localAdgAutoFailoverMaxDataLossLimit);
    }
    if (message.localStandbyDb !== undefined) {
      AutonomousDatabaseStandbySummary.encode(message.localStandbyDb, writer.uint32(290).fork()).join();
    }
    if (message.memoryPerOracleComputeUnitGbs !== 0) {
      writer.uint32(296).int32(message.memoryPerOracleComputeUnitGbs);
    }
    if (message.localDisasterRecoveryType !== 0) {
      writer.uint32(304).int32(message.localDisasterRecoveryType);
    }
    if (message.dataSafeState !== 0) {
      writer.uint32(312).int32(message.dataSafeState);
    }
    if (message.databaseManagementState !== 0) {
      writer.uint32(320).int32(message.databaseManagementState);
    }
    if (message.openMode !== 0) {
      writer.uint32(328).int32(message.openMode);
    }
    if (message.operationsInsightsState !== 0) {
      writer.uint32(336).int32(message.operationsInsightsState);
    }
    for (const v of message.peerDbIds) {
      writer.uint32(346).string(v!);
    }
    if (message.permissionLevel !== 0) {
      writer.uint32(352).int32(message.permissionLevel);
    }
    if (message.privateEndpoint !== "") {
      writer.uint32(362).string(message.privateEndpoint);
    }
    if (message.refreshableMode !== 0) {
      writer.uint32(368).int32(message.refreshableMode);
    }
    if (message.refreshableState !== 0) {
      writer.uint32(376).int32(message.refreshableState);
    }
    if (message.role !== 0) {
      writer.uint32(384).int32(message.role);
    }
    for (const v of message.scheduledOperationDetails) {
      ScheduledOperationDetails.encode(v!, writer.uint32(514).fork()).join();
    }
    if (message.sqlWebDeveloperUrl !== "") {
      writer.uint32(402).string(message.sqlWebDeveloperUrl);
    }
    for (const v of message.supportedCloneRegions) {
      writer.uint32(410).string(v!);
    }
    if (message.usedDataStorageSizeTbs !== 0) {
      writer.uint32(424).int32(message.usedDataStorageSizeTbs);
    }
    if (message.ociUrl !== "") {
      writer.uint32(434).string(message.ociUrl);
    }
    if (message.totalAutoBackupStorageSizeGbs !== 0) {
      writer.uint32(477).float(message.totalAutoBackupStorageSizeGbs);
    }
    if (message.nextLongTermBackupTime !== undefined) {
      Timestamp.encode(toTimestamp(message.nextLongTermBackupTime), writer.uint32(482).fork()).join();
    }
    if (message.maintenanceBeginTime !== undefined) {
      Timestamp.encode(toTimestamp(message.maintenanceBeginTime), writer.uint32(522).fork()).join();
    }
    if (message.maintenanceEndTime !== undefined) {
      Timestamp.encode(toTimestamp(message.maintenanceEndTime), writer.uint32(530).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabaseProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabaseProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ocid = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.computeCount = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.cpuCoreCount = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.dataStorageSizeTb = reader.int32();
          continue;
        case 63:
          if (tag !== 504) {
            break;
          }

          message.dataStorageSizeGb = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.dbWorkload = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.dbEdition = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.characterSet = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.nCharacterSet = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.privateEndpointIp = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.privateEndpointLabel = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.dbVersion = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.isAutoScalingEnabled = reader.bool();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.isStorageAutoScalingEnabled = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.licenseType = reader.int32() as any;
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.customerContacts.push(CustomerContact.decode(reader, reader.uint32()));
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.secretId = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.vaultId = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.maintenanceScheduleType = reader.int32() as any;
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }

          message.mtlsConnectionRequired = reader.bool();
          continue;
        case 57:
          if (tag !== 456) {
            break;
          }

          message.backupRetentionPeriodDays = reader.int32();
          continue;
        case 21:
          if (tag !== 169) {
            break;
          }

          message.actualUsedDataStorageSizeTb = reader.double();
          continue;
        case 22:
          if (tag !== 177) {
            break;
          }

          message.allocatedStorageSizeTb = reader.double();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.apexDetails = AutonomousDatabaseApex.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.arePrimaryAllowlistedIpsUsed = reader.bool();
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.lifecycleDetails = reader.string();
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.autonomousContainerDatabaseId = reader.string();
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.availableUpgradeVersions.push(reader.string());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.connectionStrings = AutonomousDatabaseConnectionStrings.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.connectionUrls = AutonomousDatabaseConnectionUrls.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.failedDataRecoveryDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 256) {
            break;
          }

          message.memoryTableGbs = reader.int32();
          continue;
        case 33:
          if (tag !== 264) {
            break;
          }

          message.isLocalDataGuardEnabled = reader.bool();
          continue;
        case 35:
          if (tag !== 280) {
            break;
          }

          message.localAdgAutoFailoverMaxDataLossLimit = reader.int32();
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }

          message.localStandbyDb = AutonomousDatabaseStandbySummary.decode(reader, reader.uint32());
          continue;
        case 37:
          if (tag !== 296) {
            break;
          }

          message.memoryPerOracleComputeUnitGbs = reader.int32();
          continue;
        case 38:
          if (tag !== 304) {
            break;
          }

          message.localDisasterRecoveryType = reader.int32() as any;
          continue;
        case 39:
          if (tag !== 312) {
            break;
          }

          message.dataSafeState = reader.int32() as any;
          continue;
        case 40:
          if (tag !== 320) {
            break;
          }

          message.databaseManagementState = reader.int32() as any;
          continue;
        case 41:
          if (tag !== 328) {
            break;
          }

          message.openMode = reader.int32() as any;
          continue;
        case 42:
          if (tag !== 336) {
            break;
          }

          message.operationsInsightsState = reader.int32() as any;
          continue;
        case 43:
          if (tag !== 346) {
            break;
          }

          message.peerDbIds.push(reader.string());
          continue;
        case 44:
          if (tag !== 352) {
            break;
          }

          message.permissionLevel = reader.int32() as any;
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }

          message.privateEndpoint = reader.string();
          continue;
        case 46:
          if (tag !== 368) {
            break;
          }

          message.refreshableMode = reader.int32() as any;
          continue;
        case 47:
          if (tag !== 376) {
            break;
          }

          message.refreshableState = reader.int32() as any;
          continue;
        case 48:
          if (tag !== 384) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        case 64:
          if (tag !== 514) {
            break;
          }

          message.scheduledOperationDetails.push(ScheduledOperationDetails.decode(reader, reader.uint32()));
          continue;
        case 50:
          if (tag !== 402) {
            break;
          }

          message.sqlWebDeveloperUrl = reader.string();
          continue;
        case 51:
          if (tag !== 410) {
            break;
          }

          message.supportedCloneRegions.push(reader.string());
          continue;
        case 53:
          if (tag !== 424) {
            break;
          }

          message.usedDataStorageSizeTbs = reader.int32();
          continue;
        case 54:
          if (tag !== 434) {
            break;
          }

          message.ociUrl = reader.string();
          continue;
        case 59:
          if (tag !== 477) {
            break;
          }

          message.totalAutoBackupStorageSizeGbs = reader.float();
          continue;
        case 60:
          if (tag !== 482) {
            break;
          }

          message.nextLongTermBackupTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 65:
          if (tag !== 522) {
            break;
          }

          message.maintenanceBeginTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 66:
          if (tag !== 530) {
            break;
          }

          message.maintenanceEndTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabaseProperties {
    return {
      ocid: isSet(object.ocid) ? globalThis.String(object.ocid) : "",
      computeCount: isSet(object.computeCount) ? globalThis.Number(object.computeCount) : 0,
      cpuCoreCount: isSet(object.cpuCoreCount) ? globalThis.Number(object.cpuCoreCount) : 0,
      dataStorageSizeTb: isSet(object.dataStorageSizeTb) ? globalThis.Number(object.dataStorageSizeTb) : 0,
      dataStorageSizeGb: isSet(object.dataStorageSizeGb) ? globalThis.Number(object.dataStorageSizeGb) : 0,
      dbWorkload: isSet(object.dbWorkload) ? dBWorkloadFromJSON(object.dbWorkload) : 0,
      dbEdition: isSet(object.dbEdition) ? autonomousDatabaseProperties_DatabaseEditionFromJSON(object.dbEdition) : 0,
      characterSet: isSet(object.characterSet) ? globalThis.String(object.characterSet) : "",
      nCharacterSet: isSet(object.nCharacterSet) ? globalThis.String(object.nCharacterSet) : "",
      privateEndpointIp: isSet(object.privateEndpointIp) ? globalThis.String(object.privateEndpointIp) : "",
      privateEndpointLabel: isSet(object.privateEndpointLabel) ? globalThis.String(object.privateEndpointLabel) : "",
      dbVersion: isSet(object.dbVersion) ? globalThis.String(object.dbVersion) : "",
      isAutoScalingEnabled: isSet(object.isAutoScalingEnabled)
        ? globalThis.Boolean(object.isAutoScalingEnabled)
        : false,
      isStorageAutoScalingEnabled: isSet(object.isStorageAutoScalingEnabled)
        ? globalThis.Boolean(object.isStorageAutoScalingEnabled)
        : false,
      licenseType: isSet(object.licenseType) ? autonomousDatabaseProperties_LicenseTypeFromJSON(object.licenseType) : 0,
      customerContacts: globalThis.Array.isArray(object?.customerContacts)
        ? object.customerContacts.map((e: any) => CustomerContact.fromJSON(e))
        : [],
      secretId: isSet(object.secretId) ? globalThis.String(object.secretId) : "",
      vaultId: isSet(object.vaultId) ? globalThis.String(object.vaultId) : "",
      maintenanceScheduleType: isSet(object.maintenanceScheduleType)
        ? autonomousDatabaseProperties_MaintenanceScheduleTypeFromJSON(object.maintenanceScheduleType)
        : 0,
      mtlsConnectionRequired: isSet(object.mtlsConnectionRequired)
        ? globalThis.Boolean(object.mtlsConnectionRequired)
        : false,
      backupRetentionPeriodDays: isSet(object.backupRetentionPeriodDays)
        ? globalThis.Number(object.backupRetentionPeriodDays)
        : 0,
      actualUsedDataStorageSizeTb: isSet(object.actualUsedDataStorageSizeTb)
        ? globalThis.Number(object.actualUsedDataStorageSizeTb)
        : 0,
      allocatedStorageSizeTb: isSet(object.allocatedStorageSizeTb)
        ? globalThis.Number(object.allocatedStorageSizeTb)
        : 0,
      apexDetails: isSet(object.apexDetails) ? AutonomousDatabaseApex.fromJSON(object.apexDetails) : undefined,
      arePrimaryAllowlistedIpsUsed: isSet(object.arePrimaryAllowlistedIpsUsed)
        ? globalThis.Boolean(object.arePrimaryAllowlistedIpsUsed)
        : undefined,
      lifecycleDetails: isSet(object.lifecycleDetails) ? globalThis.String(object.lifecycleDetails) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
      autonomousContainerDatabaseId: isSet(object.autonomousContainerDatabaseId)
        ? globalThis.String(object.autonomousContainerDatabaseId)
        : "",
      availableUpgradeVersions: globalThis.Array.isArray(object?.availableUpgradeVersions)
        ? object.availableUpgradeVersions.map((e: any) => globalThis.String(e))
        : [],
      connectionStrings: isSet(object.connectionStrings)
        ? AutonomousDatabaseConnectionStrings.fromJSON(object.connectionStrings)
        : undefined,
      connectionUrls: isSet(object.connectionUrls)
        ? AutonomousDatabaseConnectionUrls.fromJSON(object.connectionUrls)
        : undefined,
      failedDataRecoveryDuration: isSet(object.failedDataRecoveryDuration)
        ? Duration.fromJSON(object.failedDataRecoveryDuration)
        : undefined,
      memoryTableGbs: isSet(object.memoryTableGbs) ? globalThis.Number(object.memoryTableGbs) : 0,
      isLocalDataGuardEnabled: isSet(object.isLocalDataGuardEnabled)
        ? globalThis.Boolean(object.isLocalDataGuardEnabled)
        : false,
      localAdgAutoFailoverMaxDataLossLimit: isSet(object.localAdgAutoFailoverMaxDataLossLimit)
        ? globalThis.Number(object.localAdgAutoFailoverMaxDataLossLimit)
        : 0,
      localStandbyDb: isSet(object.localStandbyDb)
        ? AutonomousDatabaseStandbySummary.fromJSON(object.localStandbyDb)
        : undefined,
      memoryPerOracleComputeUnitGbs: isSet(object.memoryPerOracleComputeUnitGbs)
        ? globalThis.Number(object.memoryPerOracleComputeUnitGbs)
        : 0,
      localDisasterRecoveryType: isSet(object.localDisasterRecoveryType)
        ? autonomousDatabaseProperties_LocalDisasterRecoveryTypeFromJSON(object.localDisasterRecoveryType)
        : 0,
      dataSafeState: isSet(object.dataSafeState)
        ? autonomousDatabaseProperties_DataSafeStateFromJSON(object.dataSafeState)
        : 0,
      databaseManagementState: isSet(object.databaseManagementState)
        ? autonomousDatabaseProperties_DatabaseManagementStateFromJSON(object.databaseManagementState)
        : 0,
      openMode: isSet(object.openMode) ? autonomousDatabaseProperties_OpenModeFromJSON(object.openMode) : 0,
      operationsInsightsState: isSet(object.operationsInsightsState)
        ? operationsInsightsStateFromJSON(object.operationsInsightsState)
        : 0,
      peerDbIds: globalThis.Array.isArray(object?.peerDbIds)
        ? object.peerDbIds.map((e: any) => globalThis.String(e))
        : [],
      permissionLevel: isSet(object.permissionLevel)
        ? autonomousDatabaseProperties_PermissionLevelFromJSON(object.permissionLevel)
        : 0,
      privateEndpoint: isSet(object.privateEndpoint) ? globalThis.String(object.privateEndpoint) : "",
      refreshableMode: isSet(object.refreshableMode)
        ? autonomousDatabaseProperties_RefreshableModeFromJSON(object.refreshableMode)
        : 0,
      refreshableState: isSet(object.refreshableState)
        ? autonomousDatabaseProperties_RefreshableStateFromJSON(object.refreshableState)
        : 0,
      role: isSet(object.role) ? autonomousDatabaseProperties_RoleFromJSON(object.role) : 0,
      scheduledOperationDetails: globalThis.Array.isArray(object?.scheduledOperationDetails)
        ? object.scheduledOperationDetails.map((e: any) => ScheduledOperationDetails.fromJSON(e))
        : [],
      sqlWebDeveloperUrl: isSet(object.sqlWebDeveloperUrl) ? globalThis.String(object.sqlWebDeveloperUrl) : "",
      supportedCloneRegions: globalThis.Array.isArray(object?.supportedCloneRegions)
        ? object.supportedCloneRegions.map((e: any) => globalThis.String(e))
        : [],
      usedDataStorageSizeTbs: isSet(object.usedDataStorageSizeTbs)
        ? globalThis.Number(object.usedDataStorageSizeTbs)
        : 0,
      ociUrl: isSet(object.ociUrl) ? globalThis.String(object.ociUrl) : "",
      totalAutoBackupStorageSizeGbs: isSet(object.totalAutoBackupStorageSizeGbs)
        ? globalThis.Number(object.totalAutoBackupStorageSizeGbs)
        : 0,
      nextLongTermBackupTime: isSet(object.nextLongTermBackupTime)
        ? fromJsonTimestamp(object.nextLongTermBackupTime)
        : undefined,
      maintenanceBeginTime: isSet(object.maintenanceBeginTime)
        ? fromJsonTimestamp(object.maintenanceBeginTime)
        : undefined,
      maintenanceEndTime: isSet(object.maintenanceEndTime) ? fromJsonTimestamp(object.maintenanceEndTime) : undefined,
    };
  },

  toJSON(message: AutonomousDatabaseProperties): unknown {
    const obj: any = {};
    if (message.ocid !== "") {
      obj.ocid = message.ocid;
    }
    if (message.computeCount !== 0) {
      obj.computeCount = message.computeCount;
    }
    if (message.cpuCoreCount !== 0) {
      obj.cpuCoreCount = Math.round(message.cpuCoreCount);
    }
    if (message.dataStorageSizeTb !== 0) {
      obj.dataStorageSizeTb = Math.round(message.dataStorageSizeTb);
    }
    if (message.dataStorageSizeGb !== 0) {
      obj.dataStorageSizeGb = Math.round(message.dataStorageSizeGb);
    }
    if (message.dbWorkload !== 0) {
      obj.dbWorkload = dBWorkloadToJSON(message.dbWorkload);
    }
    if (message.dbEdition !== 0) {
      obj.dbEdition = autonomousDatabaseProperties_DatabaseEditionToJSON(message.dbEdition);
    }
    if (message.characterSet !== "") {
      obj.characterSet = message.characterSet;
    }
    if (message.nCharacterSet !== "") {
      obj.nCharacterSet = message.nCharacterSet;
    }
    if (message.privateEndpointIp !== "") {
      obj.privateEndpointIp = message.privateEndpointIp;
    }
    if (message.privateEndpointLabel !== "") {
      obj.privateEndpointLabel = message.privateEndpointLabel;
    }
    if (message.dbVersion !== "") {
      obj.dbVersion = message.dbVersion;
    }
    if (message.isAutoScalingEnabled !== false) {
      obj.isAutoScalingEnabled = message.isAutoScalingEnabled;
    }
    if (message.isStorageAutoScalingEnabled !== false) {
      obj.isStorageAutoScalingEnabled = message.isStorageAutoScalingEnabled;
    }
    if (message.licenseType !== 0) {
      obj.licenseType = autonomousDatabaseProperties_LicenseTypeToJSON(message.licenseType);
    }
    if (message.customerContacts?.length) {
      obj.customerContacts = message.customerContacts.map((e) => CustomerContact.toJSON(e));
    }
    if (message.secretId !== "") {
      obj.secretId = message.secretId;
    }
    if (message.vaultId !== "") {
      obj.vaultId = message.vaultId;
    }
    if (message.maintenanceScheduleType !== 0) {
      obj.maintenanceScheduleType = autonomousDatabaseProperties_MaintenanceScheduleTypeToJSON(
        message.maintenanceScheduleType,
      );
    }
    if (message.mtlsConnectionRequired !== false) {
      obj.mtlsConnectionRequired = message.mtlsConnectionRequired;
    }
    if (message.backupRetentionPeriodDays !== 0) {
      obj.backupRetentionPeriodDays = Math.round(message.backupRetentionPeriodDays);
    }
    if (message.actualUsedDataStorageSizeTb !== 0) {
      obj.actualUsedDataStorageSizeTb = message.actualUsedDataStorageSizeTb;
    }
    if (message.allocatedStorageSizeTb !== 0) {
      obj.allocatedStorageSizeTb = message.allocatedStorageSizeTb;
    }
    if (message.apexDetails !== undefined) {
      obj.apexDetails = AutonomousDatabaseApex.toJSON(message.apexDetails);
    }
    if (message.arePrimaryAllowlistedIpsUsed !== undefined) {
      obj.arePrimaryAllowlistedIpsUsed = message.arePrimaryAllowlistedIpsUsed;
    }
    if (message.lifecycleDetails !== "") {
      obj.lifecycleDetails = message.lifecycleDetails;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    if (message.autonomousContainerDatabaseId !== "") {
      obj.autonomousContainerDatabaseId = message.autonomousContainerDatabaseId;
    }
    if (message.availableUpgradeVersions?.length) {
      obj.availableUpgradeVersions = message.availableUpgradeVersions;
    }
    if (message.connectionStrings !== undefined) {
      obj.connectionStrings = AutonomousDatabaseConnectionStrings.toJSON(message.connectionStrings);
    }
    if (message.connectionUrls !== undefined) {
      obj.connectionUrls = AutonomousDatabaseConnectionUrls.toJSON(message.connectionUrls);
    }
    if (message.failedDataRecoveryDuration !== undefined) {
      obj.failedDataRecoveryDuration = Duration.toJSON(message.failedDataRecoveryDuration);
    }
    if (message.memoryTableGbs !== 0) {
      obj.memoryTableGbs = Math.round(message.memoryTableGbs);
    }
    if (message.isLocalDataGuardEnabled !== false) {
      obj.isLocalDataGuardEnabled = message.isLocalDataGuardEnabled;
    }
    if (message.localAdgAutoFailoverMaxDataLossLimit !== 0) {
      obj.localAdgAutoFailoverMaxDataLossLimit = Math.round(message.localAdgAutoFailoverMaxDataLossLimit);
    }
    if (message.localStandbyDb !== undefined) {
      obj.localStandbyDb = AutonomousDatabaseStandbySummary.toJSON(message.localStandbyDb);
    }
    if (message.memoryPerOracleComputeUnitGbs !== 0) {
      obj.memoryPerOracleComputeUnitGbs = Math.round(message.memoryPerOracleComputeUnitGbs);
    }
    if (message.localDisasterRecoveryType !== 0) {
      obj.localDisasterRecoveryType = autonomousDatabaseProperties_LocalDisasterRecoveryTypeToJSON(
        message.localDisasterRecoveryType,
      );
    }
    if (message.dataSafeState !== 0) {
      obj.dataSafeState = autonomousDatabaseProperties_DataSafeStateToJSON(message.dataSafeState);
    }
    if (message.databaseManagementState !== 0) {
      obj.databaseManagementState = autonomousDatabaseProperties_DatabaseManagementStateToJSON(
        message.databaseManagementState,
      );
    }
    if (message.openMode !== 0) {
      obj.openMode = autonomousDatabaseProperties_OpenModeToJSON(message.openMode);
    }
    if (message.operationsInsightsState !== 0) {
      obj.operationsInsightsState = operationsInsightsStateToJSON(message.operationsInsightsState);
    }
    if (message.peerDbIds?.length) {
      obj.peerDbIds = message.peerDbIds;
    }
    if (message.permissionLevel !== 0) {
      obj.permissionLevel = autonomousDatabaseProperties_PermissionLevelToJSON(message.permissionLevel);
    }
    if (message.privateEndpoint !== "") {
      obj.privateEndpoint = message.privateEndpoint;
    }
    if (message.refreshableMode !== 0) {
      obj.refreshableMode = autonomousDatabaseProperties_RefreshableModeToJSON(message.refreshableMode);
    }
    if (message.refreshableState !== 0) {
      obj.refreshableState = autonomousDatabaseProperties_RefreshableStateToJSON(message.refreshableState);
    }
    if (message.role !== 0) {
      obj.role = autonomousDatabaseProperties_RoleToJSON(message.role);
    }
    if (message.scheduledOperationDetails?.length) {
      obj.scheduledOperationDetails = message.scheduledOperationDetails.map((e) => ScheduledOperationDetails.toJSON(e));
    }
    if (message.sqlWebDeveloperUrl !== "") {
      obj.sqlWebDeveloperUrl = message.sqlWebDeveloperUrl;
    }
    if (message.supportedCloneRegions?.length) {
      obj.supportedCloneRegions = message.supportedCloneRegions;
    }
    if (message.usedDataStorageSizeTbs !== 0) {
      obj.usedDataStorageSizeTbs = Math.round(message.usedDataStorageSizeTbs);
    }
    if (message.ociUrl !== "") {
      obj.ociUrl = message.ociUrl;
    }
    if (message.totalAutoBackupStorageSizeGbs !== 0) {
      obj.totalAutoBackupStorageSizeGbs = message.totalAutoBackupStorageSizeGbs;
    }
    if (message.nextLongTermBackupTime !== undefined) {
      obj.nextLongTermBackupTime = message.nextLongTermBackupTime.toISOString();
    }
    if (message.maintenanceBeginTime !== undefined) {
      obj.maintenanceBeginTime = message.maintenanceBeginTime.toISOString();
    }
    if (message.maintenanceEndTime !== undefined) {
      obj.maintenanceEndTime = message.maintenanceEndTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabaseProperties>): AutonomousDatabaseProperties {
    return AutonomousDatabaseProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabaseProperties>): AutonomousDatabaseProperties {
    const message = createBaseAutonomousDatabaseProperties();
    message.ocid = object.ocid ?? "";
    message.computeCount = object.computeCount ?? 0;
    message.cpuCoreCount = object.cpuCoreCount ?? 0;
    message.dataStorageSizeTb = object.dataStorageSizeTb ?? 0;
    message.dataStorageSizeGb = object.dataStorageSizeGb ?? 0;
    message.dbWorkload = object.dbWorkload ?? 0;
    message.dbEdition = object.dbEdition ?? 0;
    message.characterSet = object.characterSet ?? "";
    message.nCharacterSet = object.nCharacterSet ?? "";
    message.privateEndpointIp = object.privateEndpointIp ?? "";
    message.privateEndpointLabel = object.privateEndpointLabel ?? "";
    message.dbVersion = object.dbVersion ?? "";
    message.isAutoScalingEnabled = object.isAutoScalingEnabled ?? false;
    message.isStorageAutoScalingEnabled = object.isStorageAutoScalingEnabled ?? false;
    message.licenseType = object.licenseType ?? 0;
    message.customerContacts = object.customerContacts?.map((e) => CustomerContact.fromPartial(e)) || [];
    message.secretId = object.secretId ?? "";
    message.vaultId = object.vaultId ?? "";
    message.maintenanceScheduleType = object.maintenanceScheduleType ?? 0;
    message.mtlsConnectionRequired = object.mtlsConnectionRequired ?? false;
    message.backupRetentionPeriodDays = object.backupRetentionPeriodDays ?? 0;
    message.actualUsedDataStorageSizeTb = object.actualUsedDataStorageSizeTb ?? 0;
    message.allocatedStorageSizeTb = object.allocatedStorageSizeTb ?? 0;
    message.apexDetails = (object.apexDetails !== undefined && object.apexDetails !== null)
      ? AutonomousDatabaseApex.fromPartial(object.apexDetails)
      : undefined;
    message.arePrimaryAllowlistedIpsUsed = object.arePrimaryAllowlistedIpsUsed ?? undefined;
    message.lifecycleDetails = object.lifecycleDetails ?? "";
    message.state = object.state ?? 0;
    message.autonomousContainerDatabaseId = object.autonomousContainerDatabaseId ?? "";
    message.availableUpgradeVersions = object.availableUpgradeVersions?.map((e) => e) || [];
    message.connectionStrings = (object.connectionStrings !== undefined && object.connectionStrings !== null)
      ? AutonomousDatabaseConnectionStrings.fromPartial(object.connectionStrings)
      : undefined;
    message.connectionUrls = (object.connectionUrls !== undefined && object.connectionUrls !== null)
      ? AutonomousDatabaseConnectionUrls.fromPartial(object.connectionUrls)
      : undefined;
    message.failedDataRecoveryDuration =
      (object.failedDataRecoveryDuration !== undefined && object.failedDataRecoveryDuration !== null)
        ? Duration.fromPartial(object.failedDataRecoveryDuration)
        : undefined;
    message.memoryTableGbs = object.memoryTableGbs ?? 0;
    message.isLocalDataGuardEnabled = object.isLocalDataGuardEnabled ?? false;
    message.localAdgAutoFailoverMaxDataLossLimit = object.localAdgAutoFailoverMaxDataLossLimit ?? 0;
    message.localStandbyDb = (object.localStandbyDb !== undefined && object.localStandbyDb !== null)
      ? AutonomousDatabaseStandbySummary.fromPartial(object.localStandbyDb)
      : undefined;
    message.memoryPerOracleComputeUnitGbs = object.memoryPerOracleComputeUnitGbs ?? 0;
    message.localDisasterRecoveryType = object.localDisasterRecoveryType ?? 0;
    message.dataSafeState = object.dataSafeState ?? 0;
    message.databaseManagementState = object.databaseManagementState ?? 0;
    message.openMode = object.openMode ?? 0;
    message.operationsInsightsState = object.operationsInsightsState ?? 0;
    message.peerDbIds = object.peerDbIds?.map((e) => e) || [];
    message.permissionLevel = object.permissionLevel ?? 0;
    message.privateEndpoint = object.privateEndpoint ?? "";
    message.refreshableMode = object.refreshableMode ?? 0;
    message.refreshableState = object.refreshableState ?? 0;
    message.role = object.role ?? 0;
    message.scheduledOperationDetails =
      object.scheduledOperationDetails?.map((e) => ScheduledOperationDetails.fromPartial(e)) || [];
    message.sqlWebDeveloperUrl = object.sqlWebDeveloperUrl ?? "";
    message.supportedCloneRegions = object.supportedCloneRegions?.map((e) => e) || [];
    message.usedDataStorageSizeTbs = object.usedDataStorageSizeTbs ?? 0;
    message.ociUrl = object.ociUrl ?? "";
    message.totalAutoBackupStorageSizeGbs = object.totalAutoBackupStorageSizeGbs ?? 0;
    message.nextLongTermBackupTime = object.nextLongTermBackupTime ?? undefined;
    message.maintenanceBeginTime = object.maintenanceBeginTime ?? undefined;
    message.maintenanceEndTime = object.maintenanceEndTime ?? undefined;
    return message;
  },
};

function createBaseAutonomousDatabaseApex(): AutonomousDatabaseApex {
  return { apexVersion: "", ordsVersion: "" };
}

export const AutonomousDatabaseApex: MessageFns<AutonomousDatabaseApex> = {
  encode(message: AutonomousDatabaseApex, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apexVersion !== "") {
      writer.uint32(10).string(message.apexVersion);
    }
    if (message.ordsVersion !== "") {
      writer.uint32(18).string(message.ordsVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabaseApex {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabaseApex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apexVersion = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ordsVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabaseApex {
    return {
      apexVersion: isSet(object.apexVersion) ? globalThis.String(object.apexVersion) : "",
      ordsVersion: isSet(object.ordsVersion) ? globalThis.String(object.ordsVersion) : "",
    };
  },

  toJSON(message: AutonomousDatabaseApex): unknown {
    const obj: any = {};
    if (message.apexVersion !== "") {
      obj.apexVersion = message.apexVersion;
    }
    if (message.ordsVersion !== "") {
      obj.ordsVersion = message.ordsVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabaseApex>): AutonomousDatabaseApex {
    return AutonomousDatabaseApex.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabaseApex>): AutonomousDatabaseApex {
    const message = createBaseAutonomousDatabaseApex();
    message.apexVersion = object.apexVersion ?? "";
    message.ordsVersion = object.ordsVersion ?? "";
    return message;
  },
};

function createBaseAutonomousDatabaseConnectionStrings(): AutonomousDatabaseConnectionStrings {
  return { allConnectionStrings: undefined, dedicated: "", high: "", low: "", medium: "", profiles: [] };
}

export const AutonomousDatabaseConnectionStrings: MessageFns<AutonomousDatabaseConnectionStrings> = {
  encode(message: AutonomousDatabaseConnectionStrings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allConnectionStrings !== undefined) {
      AllConnectionStrings.encode(message.allConnectionStrings, writer.uint32(10).fork()).join();
    }
    if (message.dedicated !== "") {
      writer.uint32(18).string(message.dedicated);
    }
    if (message.high !== "") {
      writer.uint32(26).string(message.high);
    }
    if (message.low !== "") {
      writer.uint32(34).string(message.low);
    }
    if (message.medium !== "") {
      writer.uint32(42).string(message.medium);
    }
    for (const v of message.profiles) {
      DatabaseConnectionStringProfile.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabaseConnectionStrings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabaseConnectionStrings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.allConnectionStrings = AllConnectionStrings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dedicated = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.high = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.low = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.medium = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.profiles.push(DatabaseConnectionStringProfile.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabaseConnectionStrings {
    return {
      allConnectionStrings: isSet(object.allConnectionStrings)
        ? AllConnectionStrings.fromJSON(object.allConnectionStrings)
        : undefined,
      dedicated: isSet(object.dedicated) ? globalThis.String(object.dedicated) : "",
      high: isSet(object.high) ? globalThis.String(object.high) : "",
      low: isSet(object.low) ? globalThis.String(object.low) : "",
      medium: isSet(object.medium) ? globalThis.String(object.medium) : "",
      profiles: globalThis.Array.isArray(object?.profiles)
        ? object.profiles.map((e: any) => DatabaseConnectionStringProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AutonomousDatabaseConnectionStrings): unknown {
    const obj: any = {};
    if (message.allConnectionStrings !== undefined) {
      obj.allConnectionStrings = AllConnectionStrings.toJSON(message.allConnectionStrings);
    }
    if (message.dedicated !== "") {
      obj.dedicated = message.dedicated;
    }
    if (message.high !== "") {
      obj.high = message.high;
    }
    if (message.low !== "") {
      obj.low = message.low;
    }
    if (message.medium !== "") {
      obj.medium = message.medium;
    }
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => DatabaseConnectionStringProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabaseConnectionStrings>): AutonomousDatabaseConnectionStrings {
    return AutonomousDatabaseConnectionStrings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabaseConnectionStrings>): AutonomousDatabaseConnectionStrings {
    const message = createBaseAutonomousDatabaseConnectionStrings();
    message.allConnectionStrings = (object.allConnectionStrings !== undefined && object.allConnectionStrings !== null)
      ? AllConnectionStrings.fromPartial(object.allConnectionStrings)
      : undefined;
    message.dedicated = object.dedicated ?? "";
    message.high = object.high ?? "";
    message.low = object.low ?? "";
    message.medium = object.medium ?? "";
    message.profiles = object.profiles?.map((e) => DatabaseConnectionStringProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDatabaseConnectionStringProfile(): DatabaseConnectionStringProfile {
  return {
    consumerGroup: 0,
    displayName: "",
    hostFormat: 0,
    isRegional: false,
    protocol: 0,
    sessionMode: 0,
    syntaxFormat: 0,
    tlsAuthentication: 0,
    value: "",
  };
}

export const DatabaseConnectionStringProfile: MessageFns<DatabaseConnectionStringProfile> = {
  encode(message: DatabaseConnectionStringProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consumerGroup !== 0) {
      writer.uint32(8).int32(message.consumerGroup);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.hostFormat !== 0) {
      writer.uint32(24).int32(message.hostFormat);
    }
    if (message.isRegional !== false) {
      writer.uint32(32).bool(message.isRegional);
    }
    if (message.protocol !== 0) {
      writer.uint32(40).int32(message.protocol);
    }
    if (message.sessionMode !== 0) {
      writer.uint32(48).int32(message.sessionMode);
    }
    if (message.syntaxFormat !== 0) {
      writer.uint32(56).int32(message.syntaxFormat);
    }
    if (message.tlsAuthentication !== 0) {
      writer.uint32(64).int32(message.tlsAuthentication);
    }
    if (message.value !== "") {
      writer.uint32(74).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseConnectionStringProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseConnectionStringProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.consumerGroup = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hostFormat = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isRegional = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.protocol = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.sessionMode = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.syntaxFormat = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.tlsAuthentication = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseConnectionStringProfile {
    return {
      consumerGroup: isSet(object.consumerGroup)
        ? databaseConnectionStringProfile_ConsumerGroupFromJSON(object.consumerGroup)
        : 0,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      hostFormat: isSet(object.hostFormat) ? databaseConnectionStringProfile_HostFormatFromJSON(object.hostFormat) : 0,
      isRegional: isSet(object.isRegional) ? globalThis.Boolean(object.isRegional) : false,
      protocol: isSet(object.protocol) ? databaseConnectionStringProfile_ProtocolFromJSON(object.protocol) : 0,
      sessionMode: isSet(object.sessionMode)
        ? databaseConnectionStringProfile_SessionModeFromJSON(object.sessionMode)
        : 0,
      syntaxFormat: isSet(object.syntaxFormat)
        ? databaseConnectionStringProfile_SyntaxFormatFromJSON(object.syntaxFormat)
        : 0,
      tlsAuthentication: isSet(object.tlsAuthentication)
        ? databaseConnectionStringProfile_TLSAuthenticationFromJSON(object.tlsAuthentication)
        : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DatabaseConnectionStringProfile): unknown {
    const obj: any = {};
    if (message.consumerGroup !== 0) {
      obj.consumerGroup = databaseConnectionStringProfile_ConsumerGroupToJSON(message.consumerGroup);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.hostFormat !== 0) {
      obj.hostFormat = databaseConnectionStringProfile_HostFormatToJSON(message.hostFormat);
    }
    if (message.isRegional !== false) {
      obj.isRegional = message.isRegional;
    }
    if (message.protocol !== 0) {
      obj.protocol = databaseConnectionStringProfile_ProtocolToJSON(message.protocol);
    }
    if (message.sessionMode !== 0) {
      obj.sessionMode = databaseConnectionStringProfile_SessionModeToJSON(message.sessionMode);
    }
    if (message.syntaxFormat !== 0) {
      obj.syntaxFormat = databaseConnectionStringProfile_SyntaxFormatToJSON(message.syntaxFormat);
    }
    if (message.tlsAuthentication !== 0) {
      obj.tlsAuthentication = databaseConnectionStringProfile_TLSAuthenticationToJSON(message.tlsAuthentication);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DatabaseConnectionStringProfile>): DatabaseConnectionStringProfile {
    return DatabaseConnectionStringProfile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DatabaseConnectionStringProfile>): DatabaseConnectionStringProfile {
    const message = createBaseDatabaseConnectionStringProfile();
    message.consumerGroup = object.consumerGroup ?? 0;
    message.displayName = object.displayName ?? "";
    message.hostFormat = object.hostFormat ?? 0;
    message.isRegional = object.isRegional ?? false;
    message.protocol = object.protocol ?? 0;
    message.sessionMode = object.sessionMode ?? 0;
    message.syntaxFormat = object.syntaxFormat ?? 0;
    message.tlsAuthentication = object.tlsAuthentication ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAllConnectionStrings(): AllConnectionStrings {
  return { high: "", low: "", medium: "" };
}

export const AllConnectionStrings: MessageFns<AllConnectionStrings> = {
  encode(message: AllConnectionStrings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.high !== "") {
      writer.uint32(10).string(message.high);
    }
    if (message.low !== "") {
      writer.uint32(18).string(message.low);
    }
    if (message.medium !== "") {
      writer.uint32(26).string(message.medium);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllConnectionStrings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllConnectionStrings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.high = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.low = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.medium = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllConnectionStrings {
    return {
      high: isSet(object.high) ? globalThis.String(object.high) : "",
      low: isSet(object.low) ? globalThis.String(object.low) : "",
      medium: isSet(object.medium) ? globalThis.String(object.medium) : "",
    };
  },

  toJSON(message: AllConnectionStrings): unknown {
    const obj: any = {};
    if (message.high !== "") {
      obj.high = message.high;
    }
    if (message.low !== "") {
      obj.low = message.low;
    }
    if (message.medium !== "") {
      obj.medium = message.medium;
    }
    return obj;
  },

  create(base?: DeepPartial<AllConnectionStrings>): AllConnectionStrings {
    return AllConnectionStrings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AllConnectionStrings>): AllConnectionStrings {
    const message = createBaseAllConnectionStrings();
    message.high = object.high ?? "";
    message.low = object.low ?? "";
    message.medium = object.medium ?? "";
    return message;
  },
};

function createBaseAutonomousDatabaseConnectionUrls(): AutonomousDatabaseConnectionUrls {
  return {
    apexUri: "",
    databaseTransformsUri: "",
    graphStudioUri: "",
    machineLearningNotebookUri: "",
    machineLearningUserManagementUri: "",
    mongoDbUri: "",
    ordsUri: "",
    sqlDevWebUri: "",
  };
}

export const AutonomousDatabaseConnectionUrls: MessageFns<AutonomousDatabaseConnectionUrls> = {
  encode(message: AutonomousDatabaseConnectionUrls, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apexUri !== "") {
      writer.uint32(10).string(message.apexUri);
    }
    if (message.databaseTransformsUri !== "") {
      writer.uint32(18).string(message.databaseTransformsUri);
    }
    if (message.graphStudioUri !== "") {
      writer.uint32(26).string(message.graphStudioUri);
    }
    if (message.machineLearningNotebookUri !== "") {
      writer.uint32(34).string(message.machineLearningNotebookUri);
    }
    if (message.machineLearningUserManagementUri !== "") {
      writer.uint32(42).string(message.machineLearningUserManagementUri);
    }
    if (message.mongoDbUri !== "") {
      writer.uint32(50).string(message.mongoDbUri);
    }
    if (message.ordsUri !== "") {
      writer.uint32(58).string(message.ordsUri);
    }
    if (message.sqlDevWebUri !== "") {
      writer.uint32(66).string(message.sqlDevWebUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabaseConnectionUrls {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabaseConnectionUrls();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apexUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.databaseTransformsUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.graphStudioUri = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.machineLearningNotebookUri = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.machineLearningUserManagementUri = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.mongoDbUri = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ordsUri = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.sqlDevWebUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabaseConnectionUrls {
    return {
      apexUri: isSet(object.apexUri) ? globalThis.String(object.apexUri) : "",
      databaseTransformsUri: isSet(object.databaseTransformsUri) ? globalThis.String(object.databaseTransformsUri) : "",
      graphStudioUri: isSet(object.graphStudioUri) ? globalThis.String(object.graphStudioUri) : "",
      machineLearningNotebookUri: isSet(object.machineLearningNotebookUri)
        ? globalThis.String(object.machineLearningNotebookUri)
        : "",
      machineLearningUserManagementUri: isSet(object.machineLearningUserManagementUri)
        ? globalThis.String(object.machineLearningUserManagementUri)
        : "",
      mongoDbUri: isSet(object.mongoDbUri) ? globalThis.String(object.mongoDbUri) : "",
      ordsUri: isSet(object.ordsUri) ? globalThis.String(object.ordsUri) : "",
      sqlDevWebUri: isSet(object.sqlDevWebUri) ? globalThis.String(object.sqlDevWebUri) : "",
    };
  },

  toJSON(message: AutonomousDatabaseConnectionUrls): unknown {
    const obj: any = {};
    if (message.apexUri !== "") {
      obj.apexUri = message.apexUri;
    }
    if (message.databaseTransformsUri !== "") {
      obj.databaseTransformsUri = message.databaseTransformsUri;
    }
    if (message.graphStudioUri !== "") {
      obj.graphStudioUri = message.graphStudioUri;
    }
    if (message.machineLearningNotebookUri !== "") {
      obj.machineLearningNotebookUri = message.machineLearningNotebookUri;
    }
    if (message.machineLearningUserManagementUri !== "") {
      obj.machineLearningUserManagementUri = message.machineLearningUserManagementUri;
    }
    if (message.mongoDbUri !== "") {
      obj.mongoDbUri = message.mongoDbUri;
    }
    if (message.ordsUri !== "") {
      obj.ordsUri = message.ordsUri;
    }
    if (message.sqlDevWebUri !== "") {
      obj.sqlDevWebUri = message.sqlDevWebUri;
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabaseConnectionUrls>): AutonomousDatabaseConnectionUrls {
    return AutonomousDatabaseConnectionUrls.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabaseConnectionUrls>): AutonomousDatabaseConnectionUrls {
    const message = createBaseAutonomousDatabaseConnectionUrls();
    message.apexUri = object.apexUri ?? "";
    message.databaseTransformsUri = object.databaseTransformsUri ?? "";
    message.graphStudioUri = object.graphStudioUri ?? "";
    message.machineLearningNotebookUri = object.machineLearningNotebookUri ?? "";
    message.machineLearningUserManagementUri = object.machineLearningUserManagementUri ?? "";
    message.mongoDbUri = object.mongoDbUri ?? "";
    message.ordsUri = object.ordsUri ?? "";
    message.sqlDevWebUri = object.sqlDevWebUri ?? "";
    return message;
  },
};

function createBaseAutonomousDatabaseStandbySummary(): AutonomousDatabaseStandbySummary {
  return {
    lagTimeDuration: undefined,
    lifecycleDetails: "",
    state: 0,
    dataGuardRoleChangedTime: undefined,
    disasterRecoveryRoleChangedTime: undefined,
  };
}

export const AutonomousDatabaseStandbySummary: MessageFns<AutonomousDatabaseStandbySummary> = {
  encode(message: AutonomousDatabaseStandbySummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lagTimeDuration !== undefined) {
      Duration.encode(message.lagTimeDuration, writer.uint32(10).fork()).join();
    }
    if (message.lifecycleDetails !== "") {
      writer.uint32(18).string(message.lifecycleDetails);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.dataGuardRoleChangedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.dataGuardRoleChangedTime), writer.uint32(34).fork()).join();
    }
    if (message.disasterRecoveryRoleChangedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.disasterRecoveryRoleChangedTime), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabaseStandbySummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabaseStandbySummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lagTimeDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lifecycleDetails = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataGuardRoleChangedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.disasterRecoveryRoleChangedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabaseStandbySummary {
    return {
      lagTimeDuration: isSet(object.lagTimeDuration) ? Duration.fromJSON(object.lagTimeDuration) : undefined,
      lifecycleDetails: isSet(object.lifecycleDetails) ? globalThis.String(object.lifecycleDetails) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
      dataGuardRoleChangedTime: isSet(object.dataGuardRoleChangedTime)
        ? fromJsonTimestamp(object.dataGuardRoleChangedTime)
        : undefined,
      disasterRecoveryRoleChangedTime: isSet(object.disasterRecoveryRoleChangedTime)
        ? fromJsonTimestamp(object.disasterRecoveryRoleChangedTime)
        : undefined,
    };
  },

  toJSON(message: AutonomousDatabaseStandbySummary): unknown {
    const obj: any = {};
    if (message.lagTimeDuration !== undefined) {
      obj.lagTimeDuration = Duration.toJSON(message.lagTimeDuration);
    }
    if (message.lifecycleDetails !== "") {
      obj.lifecycleDetails = message.lifecycleDetails;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    if (message.dataGuardRoleChangedTime !== undefined) {
      obj.dataGuardRoleChangedTime = message.dataGuardRoleChangedTime.toISOString();
    }
    if (message.disasterRecoveryRoleChangedTime !== undefined) {
      obj.disasterRecoveryRoleChangedTime = message.disasterRecoveryRoleChangedTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabaseStandbySummary>): AutonomousDatabaseStandbySummary {
    return AutonomousDatabaseStandbySummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabaseStandbySummary>): AutonomousDatabaseStandbySummary {
    const message = createBaseAutonomousDatabaseStandbySummary();
    message.lagTimeDuration = (object.lagTimeDuration !== undefined && object.lagTimeDuration !== null)
      ? Duration.fromPartial(object.lagTimeDuration)
      : undefined;
    message.lifecycleDetails = object.lifecycleDetails ?? "";
    message.state = object.state ?? 0;
    message.dataGuardRoleChangedTime = object.dataGuardRoleChangedTime ?? undefined;
    message.disasterRecoveryRoleChangedTime = object.disasterRecoveryRoleChangedTime ?? undefined;
    return message;
  },
};

function createBaseScheduledOperationDetails(): ScheduledOperationDetails {
  return { dayOfWeek: 0, startTime: undefined, stopTime: undefined };
}

export const ScheduledOperationDetails: MessageFns<ScheduledOperationDetails> = {
  encode(message: ScheduledOperationDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dayOfWeek !== 0) {
      writer.uint32(8).int32(message.dayOfWeek);
    }
    if (message.startTime !== undefined) {
      TimeOfDay.encode(message.startTime, writer.uint32(34).fork()).join();
    }
    if (message.stopTime !== undefined) {
      TimeOfDay.encode(message.stopTime, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduledOperationDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledOperationDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dayOfWeek = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.startTime = TimeOfDay.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.stopTime = TimeOfDay.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduledOperationDetails {
    return {
      dayOfWeek: isSet(object.dayOfWeek) ? dayOfWeekFromJSON(object.dayOfWeek) : 0,
      startTime: isSet(object.startTime) ? TimeOfDay.fromJSON(object.startTime) : undefined,
      stopTime: isSet(object.stopTime) ? TimeOfDay.fromJSON(object.stopTime) : undefined,
    };
  },

  toJSON(message: ScheduledOperationDetails): unknown {
    const obj: any = {};
    if (message.dayOfWeek !== 0) {
      obj.dayOfWeek = dayOfWeekToJSON(message.dayOfWeek);
    }
    if (message.startTime !== undefined) {
      obj.startTime = TimeOfDay.toJSON(message.startTime);
    }
    if (message.stopTime !== undefined) {
      obj.stopTime = TimeOfDay.toJSON(message.stopTime);
    }
    return obj;
  },

  create(base?: DeepPartial<ScheduledOperationDetails>): ScheduledOperationDetails {
    return ScheduledOperationDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScheduledOperationDetails>): ScheduledOperationDetails {
    const message = createBaseScheduledOperationDetails();
    message.dayOfWeek = object.dayOfWeek ?? 0;
    message.startTime = (object.startTime !== undefined && object.startTime !== null)
      ? TimeOfDay.fromPartial(object.startTime)
      : undefined;
    message.stopTime = (object.stopTime !== undefined && object.stopTime !== null)
      ? TimeOfDay.fromPartial(object.stopTime)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
