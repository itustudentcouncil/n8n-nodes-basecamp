// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/oracledatabase/v1/exadata_infra.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DayOfWeek, dayOfWeekFromJSON, dayOfWeekToJSON } from "../../../type/dayofweek.js";
import { Month, monthFromJSON, monthToJSON } from "../../../type/month.js";
import { CustomerContact } from "./common.js";

export const protobufPackage = "google.cloud.oracledatabase.v1";

/**
 * Represents CloudExadataInfrastructure resource.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/CloudExadataInfrastructure/
 */
export interface CloudExadataInfrastructure {
  /**
   * Identifier. The name of the Exadata Infrastructure resource with the
   * format:
   * projects/{project}/locations/{region}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}
   */
  name: string;
  /** Optional. User friendly name for this resource. */
  displayName: string;
  /** Optional. Google Cloud Platform location where Oracle Exadata is hosted. */
  gcpOracleZone: string;
  /**
   * Output only. Entitlement ID of the private offer against which this
   * infrastructure resource is provisioned.
   */
  entitlementId: string;
  /** Optional. Various properties of the infra. */
  properties:
    | CloudExadataInfrastructureProperties
    | undefined;
  /** Optional. Labels or tags associated with the resource. */
  labels: { [key: string]: string };
  /** Output only. The date and time that the Exadata Infrastructure was created. */
  createTime: Date | undefined;
}

export interface CloudExadataInfrastructure_LabelsEntry {
  key: string;
  value: string;
}

/** Various properties of Exadata Infrastructure. */
export interface CloudExadataInfrastructureProperties {
  /**
   * Output only. OCID of created infra.
   * https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
   */
  ocid: string;
  /** Optional. The number of compute servers for the Exadata Infrastructure. */
  computeCount: number;
  /**
   * Optional. The number of Cloud Exadata storage servers for the Exadata
   * Infrastructure.
   */
  storageCount: number;
  /**
   * Optional. The total storage allocated to the Exadata Infrastructure
   * resource, in gigabytes (GB).
   */
  totalStorageSizeGb: number;
  /**
   * Output only. The available storage can be allocated to the Exadata
   * Infrastructure resource, in gigabytes (GB).
   */
  availableStorageSizeGb: number;
  /** Optional. Maintenance window for repair. */
  maintenanceWindow:
    | MaintenanceWindow
    | undefined;
  /** Output only. The current lifecycle state of the Exadata Infrastructure. */
  state: CloudExadataInfrastructureProperties_State;
  /**
   * Required. The shape of the Exadata Infrastructure. The shape determines the
   * amount of CPU, storage, and memory resources allocated to the instance.
   */
  shape: string;
  /** Output only. Deep link to the OCI console to view this resource. */
  ociUrl: string;
  /** Optional. The number of enabled CPU cores. */
  cpuCount: number;
  /** Output only. The total number of CPU cores available. */
  maxCpuCount: number;
  /** Optional. The memory allocated in GBs. */
  memorySizeGb: number;
  /** Output only. The total memory available in GBs. */
  maxMemoryGb: number;
  /** Optional. The local node storage allocated in GBs. */
  dbNodeStorageSizeGb: number;
  /** Output only. The total local node storage available in GBs. */
  maxDbNodeStorageSizeGb: number;
  /** Output only. Size, in terabytes, of the DATA disk group. */
  dataStorageSizeTb: number;
  /** Output only. The total available DATA disk group size. */
  maxDataStorageTb: number;
  /**
   * Output only. The requested number of additional storage servers activated
   * for the Exadata Infrastructure.
   */
  activatedStorageCount: number;
  /**
   * Output only. The requested number of additional storage servers for the
   * Exadata Infrastructure.
   */
  additionalStorageCount: number;
  /**
   * Output only. The software version of the database servers (dom0) in the
   * Exadata Infrastructure.
   */
  dbServerVersion: string;
  /**
   * Output only. The software version of the storage servers (cells) in the
   * Exadata Infrastructure.
   */
  storageServerVersion: string;
  /** Output only. The OCID of the next maintenance run. */
  nextMaintenanceRunId: string;
  /** Output only. The time when the next maintenance run will occur. */
  nextMaintenanceRunTime:
    | Date
    | undefined;
  /** Output only. The time when the next security maintenance run will occur. */
  nextSecurityMaintenanceRunTime:
    | Date
    | undefined;
  /** Optional. The list of customer contacts. */
  customerContacts: CustomerContact[];
  /**
   * Output only. The monthly software version of the storage servers (cells)
   * in the Exadata Infrastructure. Example: 20.1.15
   */
  monthlyStorageServerVersion: string;
  /**
   * Output only. The monthly software version of the database servers (dom0)
   * in the Exadata Infrastructure. Example: 20.1.15
   */
  monthlyDbServerVersion: string;
}

/** The various lifecycle states of the Exadata Infrastructure. */
export enum CloudExadataInfrastructureProperties_State {
  /** STATE_UNSPECIFIED - Default unspecified value. */
  STATE_UNSPECIFIED = 0,
  /** PROVISIONING - The Exadata Infrastructure is being provisioned. */
  PROVISIONING = 1,
  /** AVAILABLE - The Exadata Infrastructure is available for use. */
  AVAILABLE = 2,
  /** UPDATING - The Exadata Infrastructure is being updated. */
  UPDATING = 3,
  /** TERMINATING - The Exadata Infrastructure is being terminated. */
  TERMINATING = 4,
  /** TERMINATED - The Exadata Infrastructure is terminated. */
  TERMINATED = 5,
  /** FAILED - The Exadata Infrastructure is in failed state. */
  FAILED = 6,
  /** MAINTENANCE_IN_PROGRESS - The Exadata Infrastructure is in maintenance. */
  MAINTENANCE_IN_PROGRESS = 7,
  UNRECOGNIZED = -1,
}

export function cloudExadataInfrastructureProperties_StateFromJSON(
  object: any,
): CloudExadataInfrastructureProperties_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return CloudExadataInfrastructureProperties_State.STATE_UNSPECIFIED;
    case 1:
    case "PROVISIONING":
      return CloudExadataInfrastructureProperties_State.PROVISIONING;
    case 2:
    case "AVAILABLE":
      return CloudExadataInfrastructureProperties_State.AVAILABLE;
    case 3:
    case "UPDATING":
      return CloudExadataInfrastructureProperties_State.UPDATING;
    case 4:
    case "TERMINATING":
      return CloudExadataInfrastructureProperties_State.TERMINATING;
    case 5:
    case "TERMINATED":
      return CloudExadataInfrastructureProperties_State.TERMINATED;
    case 6:
    case "FAILED":
      return CloudExadataInfrastructureProperties_State.FAILED;
    case 7:
    case "MAINTENANCE_IN_PROGRESS":
      return CloudExadataInfrastructureProperties_State.MAINTENANCE_IN_PROGRESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CloudExadataInfrastructureProperties_State.UNRECOGNIZED;
  }
}

export function cloudExadataInfrastructureProperties_StateToJSON(
  object: CloudExadataInfrastructureProperties_State,
): string {
  switch (object) {
    case CloudExadataInfrastructureProperties_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case CloudExadataInfrastructureProperties_State.PROVISIONING:
      return "PROVISIONING";
    case CloudExadataInfrastructureProperties_State.AVAILABLE:
      return "AVAILABLE";
    case CloudExadataInfrastructureProperties_State.UPDATING:
      return "UPDATING";
    case CloudExadataInfrastructureProperties_State.TERMINATING:
      return "TERMINATING";
    case CloudExadataInfrastructureProperties_State.TERMINATED:
      return "TERMINATED";
    case CloudExadataInfrastructureProperties_State.FAILED:
      return "FAILED";
    case CloudExadataInfrastructureProperties_State.MAINTENANCE_IN_PROGRESS:
      return "MAINTENANCE_IN_PROGRESS";
    case CloudExadataInfrastructureProperties_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Maintenance window as defined by Oracle.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
 */
export interface MaintenanceWindow {
  /** Optional. The maintenance window scheduling preference. */
  preference: MaintenanceWindow_MaintenanceWindowPreference;
  /** Optional. Months during the year when maintenance should be performed. */
  months: Month[];
  /**
   * Optional. Weeks during the month when maintenance should be performed.
   * Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a
   * duration of 7 days. Weeks start and end based on calendar dates, not days
   * of the week.
   */
  weeksOfMonth: number[];
  /** Optional. Days during the week when maintenance should be performed. */
  daysOfWeek: DayOfWeek[];
  /**
   * Optional. The window of hours during the day when maintenance should be
   * performed. The window is a 4 hour slot. Valid values are:
   *   0 - represents time slot 0:00 - 3:59 UTC
   *   4 - represents time slot 4:00 - 7:59 UTC
   *   8 - represents time slot 8:00 - 11:59 UTC
   *   12 - represents time slot 12:00 - 15:59 UTC
   *   16 - represents time slot 16:00 - 19:59 UTC
   *   20 - represents time slot 20:00 - 23:59 UTC
   */
  hoursOfDay: number[];
  /**
   * Optional. Lead time window allows user to set a lead time to prepare for a
   * down time. The lead time is in weeks and valid value is between 1 to 4.
   */
  leadTimeWeek: number;
  /**
   * Optional. Cloud CloudExadataInfrastructure node patching method, either
   * "ROLLING"
   *  or "NONROLLING". Default value is ROLLING.
   */
  patchingMode: MaintenanceWindow_PatchingMode;
  /**
   * Optional. Determines the amount of time the system will wait before the
   * start of each database server patching operation. Custom action timeout is
   * in minutes and valid value is between 15 to 120 (inclusive).
   */
  customActionTimeoutMins: number;
  /**
   * Optional. If true, enables the configuration of a custom action timeout
   * (waiting period) between database server patching operations.
   */
  isCustomActionTimeoutEnabled: boolean;
}

/** Maintenance window preference. */
export enum MaintenanceWindow_MaintenanceWindowPreference {
  /** MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED - Default unspecified value. */
  MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED = 0,
  /** CUSTOM_PREFERENCE - Custom preference. */
  CUSTOM_PREFERENCE = 1,
  /** NO_PREFERENCE - No preference. */
  NO_PREFERENCE = 2,
  UNRECOGNIZED = -1,
}

export function maintenanceWindow_MaintenanceWindowPreferenceFromJSON(
  object: any,
): MaintenanceWindow_MaintenanceWindowPreference {
  switch (object) {
    case 0:
    case "MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED":
      return MaintenanceWindow_MaintenanceWindowPreference.MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED;
    case 1:
    case "CUSTOM_PREFERENCE":
      return MaintenanceWindow_MaintenanceWindowPreference.CUSTOM_PREFERENCE;
    case 2:
    case "NO_PREFERENCE":
      return MaintenanceWindow_MaintenanceWindowPreference.NO_PREFERENCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MaintenanceWindow_MaintenanceWindowPreference.UNRECOGNIZED;
  }
}

export function maintenanceWindow_MaintenanceWindowPreferenceToJSON(
  object: MaintenanceWindow_MaintenanceWindowPreference,
): string {
  switch (object) {
    case MaintenanceWindow_MaintenanceWindowPreference.MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED:
      return "MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED";
    case MaintenanceWindow_MaintenanceWindowPreference.CUSTOM_PREFERENCE:
      return "CUSTOM_PREFERENCE";
    case MaintenanceWindow_MaintenanceWindowPreference.NO_PREFERENCE:
      return "NO_PREFERENCE";
    case MaintenanceWindow_MaintenanceWindowPreference.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Patching mode. */
export enum MaintenanceWindow_PatchingMode {
  /** PATCHING_MODE_UNSPECIFIED - Default unspecified value. */
  PATCHING_MODE_UNSPECIFIED = 0,
  /** ROLLING - Updates the Cloud Exadata database server hosts in a rolling fashion. */
  ROLLING = 1,
  /**
   * NON_ROLLING - The non-rolling maintenance method first updates your storage servers at
   * the same time, then your database servers at the same time.
   */
  NON_ROLLING = 2,
  UNRECOGNIZED = -1,
}

export function maintenanceWindow_PatchingModeFromJSON(object: any): MaintenanceWindow_PatchingMode {
  switch (object) {
    case 0:
    case "PATCHING_MODE_UNSPECIFIED":
      return MaintenanceWindow_PatchingMode.PATCHING_MODE_UNSPECIFIED;
    case 1:
    case "ROLLING":
      return MaintenanceWindow_PatchingMode.ROLLING;
    case 2:
    case "NON_ROLLING":
      return MaintenanceWindow_PatchingMode.NON_ROLLING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MaintenanceWindow_PatchingMode.UNRECOGNIZED;
  }
}

export function maintenanceWindow_PatchingModeToJSON(object: MaintenanceWindow_PatchingMode): string {
  switch (object) {
    case MaintenanceWindow_PatchingMode.PATCHING_MODE_UNSPECIFIED:
      return "PATCHING_MODE_UNSPECIFIED";
    case MaintenanceWindow_PatchingMode.ROLLING:
      return "ROLLING";
    case MaintenanceWindow_PatchingMode.NON_ROLLING:
      return "NON_ROLLING";
    case MaintenanceWindow_PatchingMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCloudExadataInfrastructure(): CloudExadataInfrastructure {
  return {
    name: "",
    displayName: "",
    gcpOracleZone: "",
    entitlementId: "",
    properties: undefined,
    labels: {},
    createTime: undefined,
  };
}

export const CloudExadataInfrastructure: MessageFns<CloudExadataInfrastructure> = {
  encode(message: CloudExadataInfrastructure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.gcpOracleZone !== "") {
      writer.uint32(66).string(message.gcpOracleZone);
    }
    if (message.entitlementId !== "") {
      writer.uint32(34).string(message.entitlementId);
    }
    if (message.properties !== undefined) {
      CloudExadataInfrastructureProperties.encode(message.properties, writer.uint32(42).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      CloudExadataInfrastructure_LabelsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudExadataInfrastructure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudExadataInfrastructure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.gcpOracleZone = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.entitlementId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.properties = CloudExadataInfrastructureProperties.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = CloudExadataInfrastructure_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudExadataInfrastructure {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      gcpOracleZone: isSet(object.gcpOracleZone) ? globalThis.String(object.gcpOracleZone) : "",
      entitlementId: isSet(object.entitlementId) ? globalThis.String(object.entitlementId) : "",
      properties: isSet(object.properties)
        ? CloudExadataInfrastructureProperties.fromJSON(object.properties)
        : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: CloudExadataInfrastructure): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.gcpOracleZone !== "") {
      obj.gcpOracleZone = message.gcpOracleZone;
    }
    if (message.entitlementId !== "") {
      obj.entitlementId = message.entitlementId;
    }
    if (message.properties !== undefined) {
      obj.properties = CloudExadataInfrastructureProperties.toJSON(message.properties);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CloudExadataInfrastructure>): CloudExadataInfrastructure {
    return CloudExadataInfrastructure.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudExadataInfrastructure>): CloudExadataInfrastructure {
    const message = createBaseCloudExadataInfrastructure();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.gcpOracleZone = object.gcpOracleZone ?? "";
    message.entitlementId = object.entitlementId ?? "";
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? CloudExadataInfrastructureProperties.fromPartial(object.properties)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseCloudExadataInfrastructure_LabelsEntry(): CloudExadataInfrastructure_LabelsEntry {
  return { key: "", value: "" };
}

export const CloudExadataInfrastructure_LabelsEntry: MessageFns<CloudExadataInfrastructure_LabelsEntry> = {
  encode(message: CloudExadataInfrastructure_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudExadataInfrastructure_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudExadataInfrastructure_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudExadataInfrastructure_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CloudExadataInfrastructure_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<CloudExadataInfrastructure_LabelsEntry>): CloudExadataInfrastructure_LabelsEntry {
    return CloudExadataInfrastructure_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudExadataInfrastructure_LabelsEntry>): CloudExadataInfrastructure_LabelsEntry {
    const message = createBaseCloudExadataInfrastructure_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCloudExadataInfrastructureProperties(): CloudExadataInfrastructureProperties {
  return {
    ocid: "",
    computeCount: 0,
    storageCount: 0,
    totalStorageSizeGb: 0,
    availableStorageSizeGb: 0,
    maintenanceWindow: undefined,
    state: 0,
    shape: "",
    ociUrl: "",
    cpuCount: 0,
    maxCpuCount: 0,
    memorySizeGb: 0,
    maxMemoryGb: 0,
    dbNodeStorageSizeGb: 0,
    maxDbNodeStorageSizeGb: 0,
    dataStorageSizeTb: 0,
    maxDataStorageTb: 0,
    activatedStorageCount: 0,
    additionalStorageCount: 0,
    dbServerVersion: "",
    storageServerVersion: "",
    nextMaintenanceRunId: "",
    nextMaintenanceRunTime: undefined,
    nextSecurityMaintenanceRunTime: undefined,
    customerContacts: [],
    monthlyStorageServerVersion: "",
    monthlyDbServerVersion: "",
  };
}

export const CloudExadataInfrastructureProperties: MessageFns<CloudExadataInfrastructureProperties> = {
  encode(message: CloudExadataInfrastructureProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ocid !== "") {
      writer.uint32(10).string(message.ocid);
    }
    if (message.computeCount !== 0) {
      writer.uint32(16).int32(message.computeCount);
    }
    if (message.storageCount !== 0) {
      writer.uint32(24).int32(message.storageCount);
    }
    if (message.totalStorageSizeGb !== 0) {
      writer.uint32(32).int32(message.totalStorageSizeGb);
    }
    if (message.availableStorageSizeGb !== 0) {
      writer.uint32(40).int32(message.availableStorageSizeGb);
    }
    if (message.maintenanceWindow !== undefined) {
      MaintenanceWindow.encode(message.maintenanceWindow, writer.uint32(50).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.shape !== "") {
      writer.uint32(66).string(message.shape);
    }
    if (message.ociUrl !== "") {
      writer.uint32(74).string(message.ociUrl);
    }
    if (message.cpuCount !== 0) {
      writer.uint32(80).int32(message.cpuCount);
    }
    if (message.maxCpuCount !== 0) {
      writer.uint32(88).int32(message.maxCpuCount);
    }
    if (message.memorySizeGb !== 0) {
      writer.uint32(96).int32(message.memorySizeGb);
    }
    if (message.maxMemoryGb !== 0) {
      writer.uint32(104).int32(message.maxMemoryGb);
    }
    if (message.dbNodeStorageSizeGb !== 0) {
      writer.uint32(112).int32(message.dbNodeStorageSizeGb);
    }
    if (message.maxDbNodeStorageSizeGb !== 0) {
      writer.uint32(120).int32(message.maxDbNodeStorageSizeGb);
    }
    if (message.dataStorageSizeTb !== 0) {
      writer.uint32(129).double(message.dataStorageSizeTb);
    }
    if (message.maxDataStorageTb !== 0) {
      writer.uint32(137).double(message.maxDataStorageTb);
    }
    if (message.activatedStorageCount !== 0) {
      writer.uint32(144).int32(message.activatedStorageCount);
    }
    if (message.additionalStorageCount !== 0) {
      writer.uint32(152).int32(message.additionalStorageCount);
    }
    if (message.dbServerVersion !== "") {
      writer.uint32(162).string(message.dbServerVersion);
    }
    if (message.storageServerVersion !== "") {
      writer.uint32(170).string(message.storageServerVersion);
    }
    if (message.nextMaintenanceRunId !== "") {
      writer.uint32(178).string(message.nextMaintenanceRunId);
    }
    if (message.nextMaintenanceRunTime !== undefined) {
      Timestamp.encode(toTimestamp(message.nextMaintenanceRunTime), writer.uint32(186).fork()).join();
    }
    if (message.nextSecurityMaintenanceRunTime !== undefined) {
      Timestamp.encode(toTimestamp(message.nextSecurityMaintenanceRunTime), writer.uint32(194).fork()).join();
    }
    for (const v of message.customerContacts) {
      CustomerContact.encode(v!, writer.uint32(202).fork()).join();
    }
    if (message.monthlyStorageServerVersion !== "") {
      writer.uint32(210).string(message.monthlyStorageServerVersion);
    }
    if (message.monthlyDbServerVersion !== "") {
      writer.uint32(218).string(message.monthlyDbServerVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudExadataInfrastructureProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudExadataInfrastructureProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ocid = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.computeCount = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.storageCount = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.totalStorageSizeGb = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.availableStorageSizeGb = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.maintenanceWindow = MaintenanceWindow.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.shape = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.ociUrl = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.cpuCount = reader.int32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.maxCpuCount = reader.int32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.memorySizeGb = reader.int32();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.maxMemoryGb = reader.int32();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.dbNodeStorageSizeGb = reader.int32();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.maxDbNodeStorageSizeGb = reader.int32();
          continue;
        case 16:
          if (tag !== 129) {
            break;
          }

          message.dataStorageSizeTb = reader.double();
          continue;
        case 17:
          if (tag !== 137) {
            break;
          }

          message.maxDataStorageTb = reader.double();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.activatedStorageCount = reader.int32();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.additionalStorageCount = reader.int32();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.dbServerVersion = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.storageServerVersion = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.nextMaintenanceRunId = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.nextMaintenanceRunTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.nextSecurityMaintenanceRunTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.customerContacts.push(CustomerContact.decode(reader, reader.uint32()));
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.monthlyStorageServerVersion = reader.string();
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.monthlyDbServerVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudExadataInfrastructureProperties {
    return {
      ocid: isSet(object.ocid) ? globalThis.String(object.ocid) : "",
      computeCount: isSet(object.computeCount) ? globalThis.Number(object.computeCount) : 0,
      storageCount: isSet(object.storageCount) ? globalThis.Number(object.storageCount) : 0,
      totalStorageSizeGb: isSet(object.totalStorageSizeGb) ? globalThis.Number(object.totalStorageSizeGb) : 0,
      availableStorageSizeGb: isSet(object.availableStorageSizeGb)
        ? globalThis.Number(object.availableStorageSizeGb)
        : 0,
      maintenanceWindow: isSet(object.maintenanceWindow)
        ? MaintenanceWindow.fromJSON(object.maintenanceWindow)
        : undefined,
      state: isSet(object.state) ? cloudExadataInfrastructureProperties_StateFromJSON(object.state) : 0,
      shape: isSet(object.shape) ? globalThis.String(object.shape) : "",
      ociUrl: isSet(object.ociUrl) ? globalThis.String(object.ociUrl) : "",
      cpuCount: isSet(object.cpuCount) ? globalThis.Number(object.cpuCount) : 0,
      maxCpuCount: isSet(object.maxCpuCount) ? globalThis.Number(object.maxCpuCount) : 0,
      memorySizeGb: isSet(object.memorySizeGb) ? globalThis.Number(object.memorySizeGb) : 0,
      maxMemoryGb: isSet(object.maxMemoryGb) ? globalThis.Number(object.maxMemoryGb) : 0,
      dbNodeStorageSizeGb: isSet(object.dbNodeStorageSizeGb) ? globalThis.Number(object.dbNodeStorageSizeGb) : 0,
      maxDbNodeStorageSizeGb: isSet(object.maxDbNodeStorageSizeGb)
        ? globalThis.Number(object.maxDbNodeStorageSizeGb)
        : 0,
      dataStorageSizeTb: isSet(object.dataStorageSizeTb) ? globalThis.Number(object.dataStorageSizeTb) : 0,
      maxDataStorageTb: isSet(object.maxDataStorageTb) ? globalThis.Number(object.maxDataStorageTb) : 0,
      activatedStorageCount: isSet(object.activatedStorageCount) ? globalThis.Number(object.activatedStorageCount) : 0,
      additionalStorageCount: isSet(object.additionalStorageCount)
        ? globalThis.Number(object.additionalStorageCount)
        : 0,
      dbServerVersion: isSet(object.dbServerVersion) ? globalThis.String(object.dbServerVersion) : "",
      storageServerVersion: isSet(object.storageServerVersion) ? globalThis.String(object.storageServerVersion) : "",
      nextMaintenanceRunId: isSet(object.nextMaintenanceRunId) ? globalThis.String(object.nextMaintenanceRunId) : "",
      nextMaintenanceRunTime: isSet(object.nextMaintenanceRunTime)
        ? fromJsonTimestamp(object.nextMaintenanceRunTime)
        : undefined,
      nextSecurityMaintenanceRunTime: isSet(object.nextSecurityMaintenanceRunTime)
        ? fromJsonTimestamp(object.nextSecurityMaintenanceRunTime)
        : undefined,
      customerContacts: globalThis.Array.isArray(object?.customerContacts)
        ? object.customerContacts.map((e: any) => CustomerContact.fromJSON(e))
        : [],
      monthlyStorageServerVersion: isSet(object.monthlyStorageServerVersion)
        ? globalThis.String(object.monthlyStorageServerVersion)
        : "",
      monthlyDbServerVersion: isSet(object.monthlyDbServerVersion)
        ? globalThis.String(object.monthlyDbServerVersion)
        : "",
    };
  },

  toJSON(message: CloudExadataInfrastructureProperties): unknown {
    const obj: any = {};
    if (message.ocid !== "") {
      obj.ocid = message.ocid;
    }
    if (message.computeCount !== 0) {
      obj.computeCount = Math.round(message.computeCount);
    }
    if (message.storageCount !== 0) {
      obj.storageCount = Math.round(message.storageCount);
    }
    if (message.totalStorageSizeGb !== 0) {
      obj.totalStorageSizeGb = Math.round(message.totalStorageSizeGb);
    }
    if (message.availableStorageSizeGb !== 0) {
      obj.availableStorageSizeGb = Math.round(message.availableStorageSizeGb);
    }
    if (message.maintenanceWindow !== undefined) {
      obj.maintenanceWindow = MaintenanceWindow.toJSON(message.maintenanceWindow);
    }
    if (message.state !== 0) {
      obj.state = cloudExadataInfrastructureProperties_StateToJSON(message.state);
    }
    if (message.shape !== "") {
      obj.shape = message.shape;
    }
    if (message.ociUrl !== "") {
      obj.ociUrl = message.ociUrl;
    }
    if (message.cpuCount !== 0) {
      obj.cpuCount = Math.round(message.cpuCount);
    }
    if (message.maxCpuCount !== 0) {
      obj.maxCpuCount = Math.round(message.maxCpuCount);
    }
    if (message.memorySizeGb !== 0) {
      obj.memorySizeGb = Math.round(message.memorySizeGb);
    }
    if (message.maxMemoryGb !== 0) {
      obj.maxMemoryGb = Math.round(message.maxMemoryGb);
    }
    if (message.dbNodeStorageSizeGb !== 0) {
      obj.dbNodeStorageSizeGb = Math.round(message.dbNodeStorageSizeGb);
    }
    if (message.maxDbNodeStorageSizeGb !== 0) {
      obj.maxDbNodeStorageSizeGb = Math.round(message.maxDbNodeStorageSizeGb);
    }
    if (message.dataStorageSizeTb !== 0) {
      obj.dataStorageSizeTb = message.dataStorageSizeTb;
    }
    if (message.maxDataStorageTb !== 0) {
      obj.maxDataStorageTb = message.maxDataStorageTb;
    }
    if (message.activatedStorageCount !== 0) {
      obj.activatedStorageCount = Math.round(message.activatedStorageCount);
    }
    if (message.additionalStorageCount !== 0) {
      obj.additionalStorageCount = Math.round(message.additionalStorageCount);
    }
    if (message.dbServerVersion !== "") {
      obj.dbServerVersion = message.dbServerVersion;
    }
    if (message.storageServerVersion !== "") {
      obj.storageServerVersion = message.storageServerVersion;
    }
    if (message.nextMaintenanceRunId !== "") {
      obj.nextMaintenanceRunId = message.nextMaintenanceRunId;
    }
    if (message.nextMaintenanceRunTime !== undefined) {
      obj.nextMaintenanceRunTime = message.nextMaintenanceRunTime.toISOString();
    }
    if (message.nextSecurityMaintenanceRunTime !== undefined) {
      obj.nextSecurityMaintenanceRunTime = message.nextSecurityMaintenanceRunTime.toISOString();
    }
    if (message.customerContacts?.length) {
      obj.customerContacts = message.customerContacts.map((e) => CustomerContact.toJSON(e));
    }
    if (message.monthlyStorageServerVersion !== "") {
      obj.monthlyStorageServerVersion = message.monthlyStorageServerVersion;
    }
    if (message.monthlyDbServerVersion !== "") {
      obj.monthlyDbServerVersion = message.monthlyDbServerVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<CloudExadataInfrastructureProperties>): CloudExadataInfrastructureProperties {
    return CloudExadataInfrastructureProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudExadataInfrastructureProperties>): CloudExadataInfrastructureProperties {
    const message = createBaseCloudExadataInfrastructureProperties();
    message.ocid = object.ocid ?? "";
    message.computeCount = object.computeCount ?? 0;
    message.storageCount = object.storageCount ?? 0;
    message.totalStorageSizeGb = object.totalStorageSizeGb ?? 0;
    message.availableStorageSizeGb = object.availableStorageSizeGb ?? 0;
    message.maintenanceWindow = (object.maintenanceWindow !== undefined && object.maintenanceWindow !== null)
      ? MaintenanceWindow.fromPartial(object.maintenanceWindow)
      : undefined;
    message.state = object.state ?? 0;
    message.shape = object.shape ?? "";
    message.ociUrl = object.ociUrl ?? "";
    message.cpuCount = object.cpuCount ?? 0;
    message.maxCpuCount = object.maxCpuCount ?? 0;
    message.memorySizeGb = object.memorySizeGb ?? 0;
    message.maxMemoryGb = object.maxMemoryGb ?? 0;
    message.dbNodeStorageSizeGb = object.dbNodeStorageSizeGb ?? 0;
    message.maxDbNodeStorageSizeGb = object.maxDbNodeStorageSizeGb ?? 0;
    message.dataStorageSizeTb = object.dataStorageSizeTb ?? 0;
    message.maxDataStorageTb = object.maxDataStorageTb ?? 0;
    message.activatedStorageCount = object.activatedStorageCount ?? 0;
    message.additionalStorageCount = object.additionalStorageCount ?? 0;
    message.dbServerVersion = object.dbServerVersion ?? "";
    message.storageServerVersion = object.storageServerVersion ?? "";
    message.nextMaintenanceRunId = object.nextMaintenanceRunId ?? "";
    message.nextMaintenanceRunTime = object.nextMaintenanceRunTime ?? undefined;
    message.nextSecurityMaintenanceRunTime = object.nextSecurityMaintenanceRunTime ?? undefined;
    message.customerContacts = object.customerContacts?.map((e) => CustomerContact.fromPartial(e)) || [];
    message.monthlyStorageServerVersion = object.monthlyStorageServerVersion ?? "";
    message.monthlyDbServerVersion = object.monthlyDbServerVersion ?? "";
    return message;
  },
};

function createBaseMaintenanceWindow(): MaintenanceWindow {
  return {
    preference: 0,
    months: [],
    weeksOfMonth: [],
    daysOfWeek: [],
    hoursOfDay: [],
    leadTimeWeek: 0,
    patchingMode: 0,
    customActionTimeoutMins: 0,
    isCustomActionTimeoutEnabled: false,
  };
}

export const MaintenanceWindow: MessageFns<MaintenanceWindow> = {
  encode(message: MaintenanceWindow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.preference !== 0) {
      writer.uint32(8).int32(message.preference);
    }
    writer.uint32(18).fork();
    for (const v of message.months) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.weeksOfMonth) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(34).fork();
    for (const v of message.daysOfWeek) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(42).fork();
    for (const v of message.hoursOfDay) {
      writer.int32(v);
    }
    writer.join();
    if (message.leadTimeWeek !== 0) {
      writer.uint32(48).int32(message.leadTimeWeek);
    }
    if (message.patchingMode !== 0) {
      writer.uint32(56).int32(message.patchingMode);
    }
    if (message.customActionTimeoutMins !== 0) {
      writer.uint32(64).int32(message.customActionTimeoutMins);
    }
    if (message.isCustomActionTimeoutEnabled !== false) {
      writer.uint32(72).bool(message.isCustomActionTimeoutEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MaintenanceWindow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaintenanceWindow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.preference = reader.int32() as any;
          continue;
        case 2:
          if (tag === 16) {
            message.months.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.months.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 3:
          if (tag === 24) {
            message.weeksOfMonth.push(reader.int32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.weeksOfMonth.push(reader.int32());
            }

            continue;
          }

          break;
        case 4:
          if (tag === 32) {
            message.daysOfWeek.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.daysOfWeek.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag === 40) {
            message.hoursOfDay.push(reader.int32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.hoursOfDay.push(reader.int32());
            }

            continue;
          }

          break;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.leadTimeWeek = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.patchingMode = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.customActionTimeoutMins = reader.int32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.isCustomActionTimeoutEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MaintenanceWindow {
    return {
      preference: isSet(object.preference)
        ? maintenanceWindow_MaintenanceWindowPreferenceFromJSON(object.preference)
        : 0,
      months: globalThis.Array.isArray(object?.months) ? object.months.map((e: any) => monthFromJSON(e)) : [],
      weeksOfMonth: globalThis.Array.isArray(object?.weeksOfMonth)
        ? object.weeksOfMonth.map((e: any) => globalThis.Number(e))
        : [],
      daysOfWeek: globalThis.Array.isArray(object?.daysOfWeek)
        ? object.daysOfWeek.map((e: any) => dayOfWeekFromJSON(e))
        : [],
      hoursOfDay: globalThis.Array.isArray(object?.hoursOfDay)
        ? object.hoursOfDay.map((e: any) => globalThis.Number(e))
        : [],
      leadTimeWeek: isSet(object.leadTimeWeek) ? globalThis.Number(object.leadTimeWeek) : 0,
      patchingMode: isSet(object.patchingMode) ? maintenanceWindow_PatchingModeFromJSON(object.patchingMode) : 0,
      customActionTimeoutMins: isSet(object.customActionTimeoutMins)
        ? globalThis.Number(object.customActionTimeoutMins)
        : 0,
      isCustomActionTimeoutEnabled: isSet(object.isCustomActionTimeoutEnabled)
        ? globalThis.Boolean(object.isCustomActionTimeoutEnabled)
        : false,
    };
  },

  toJSON(message: MaintenanceWindow): unknown {
    const obj: any = {};
    if (message.preference !== 0) {
      obj.preference = maintenanceWindow_MaintenanceWindowPreferenceToJSON(message.preference);
    }
    if (message.months?.length) {
      obj.months = message.months.map((e) => monthToJSON(e));
    }
    if (message.weeksOfMonth?.length) {
      obj.weeksOfMonth = message.weeksOfMonth.map((e) => Math.round(e));
    }
    if (message.daysOfWeek?.length) {
      obj.daysOfWeek = message.daysOfWeek.map((e) => dayOfWeekToJSON(e));
    }
    if (message.hoursOfDay?.length) {
      obj.hoursOfDay = message.hoursOfDay.map((e) => Math.round(e));
    }
    if (message.leadTimeWeek !== 0) {
      obj.leadTimeWeek = Math.round(message.leadTimeWeek);
    }
    if (message.patchingMode !== 0) {
      obj.patchingMode = maintenanceWindow_PatchingModeToJSON(message.patchingMode);
    }
    if (message.customActionTimeoutMins !== 0) {
      obj.customActionTimeoutMins = Math.round(message.customActionTimeoutMins);
    }
    if (message.isCustomActionTimeoutEnabled !== false) {
      obj.isCustomActionTimeoutEnabled = message.isCustomActionTimeoutEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<MaintenanceWindow>): MaintenanceWindow {
    return MaintenanceWindow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MaintenanceWindow>): MaintenanceWindow {
    const message = createBaseMaintenanceWindow();
    message.preference = object.preference ?? 0;
    message.months = object.months?.map((e) => e) || [];
    message.weeksOfMonth = object.weeksOfMonth?.map((e) => e) || [];
    message.daysOfWeek = object.daysOfWeek?.map((e) => e) || [];
    message.hoursOfDay = object.hoursOfDay?.map((e) => e) || [];
    message.leadTimeWeek = object.leadTimeWeek ?? 0;
    message.patchingMode = object.patchingMode ?? 0;
    message.customActionTimeoutMins = object.customActionTimeoutMins ?? 0;
    message.isCustomActionTimeoutEnabled = object.isCustomActionTimeoutEnabled ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
