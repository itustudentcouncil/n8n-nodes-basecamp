// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/oracledatabase/v1/entitlement.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.oracledatabase.v1";

/** Details of the Entitlement resource. */
export interface Entitlement {
  /**
   * Identifier. The name of the Entitlement resource with the format:
   * projects/{project}/locations/{region}/entitlements/{entitlement}
   */
  name: string;
  /** Details of the OCI Cloud Account. */
  cloudAccountDetails:
    | CloudAccountDetails
    | undefined;
  /** Output only. Google Cloud Marketplace order ID (aka entitlement ID) */
  entitlementId: string;
  /** Output only. Entitlement State. */
  state: Entitlement_State;
}

/** The various lifecycle states of the subscription. */
export enum Entitlement_State {
  /** STATE_UNSPECIFIED - Default unspecified value. */
  STATE_UNSPECIFIED = 0,
  /** ACCOUNT_NOT_LINKED - Account not linked. */
  ACCOUNT_NOT_LINKED = 1,
  /** ACCOUNT_NOT_ACTIVE - Account is linked but not active. */
  ACCOUNT_NOT_ACTIVE = 2,
  /** ACTIVE - Entitlement and Account are active. */
  ACTIVE = 3,
  UNRECOGNIZED = -1,
}

export function entitlement_StateFromJSON(object: any): Entitlement_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Entitlement_State.STATE_UNSPECIFIED;
    case 1:
    case "ACCOUNT_NOT_LINKED":
      return Entitlement_State.ACCOUNT_NOT_LINKED;
    case 2:
    case "ACCOUNT_NOT_ACTIVE":
      return Entitlement_State.ACCOUNT_NOT_ACTIVE;
    case 3:
    case "ACTIVE":
      return Entitlement_State.ACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Entitlement_State.UNRECOGNIZED;
  }
}

export function entitlement_StateToJSON(object: Entitlement_State): string {
  switch (object) {
    case Entitlement_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Entitlement_State.ACCOUNT_NOT_LINKED:
      return "ACCOUNT_NOT_LINKED";
    case Entitlement_State.ACCOUNT_NOT_ACTIVE:
      return "ACCOUNT_NOT_ACTIVE";
    case Entitlement_State.ACTIVE:
      return "ACTIVE";
    case Entitlement_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Details of the OCI Cloud Account. */
export interface CloudAccountDetails {
  /** Output only. OCI account name. */
  cloudAccount: string;
  /** Output only. OCI account home region. */
  cloudAccountHomeRegion: string;
  /** Output only. URL to link an existing account. */
  linkExistingAccountUri?:
    | string
    | undefined;
  /** Output only. URL to create a new account and link. */
  accountCreationUri?: string | undefined;
}

function createBaseEntitlement(): Entitlement {
  return { name: "", cloudAccountDetails: undefined, entitlementId: "", state: 0 };
}

export const Entitlement: MessageFns<Entitlement> = {
  encode(message: Entitlement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.cloudAccountDetails !== undefined) {
      CloudAccountDetails.encode(message.cloudAccountDetails, writer.uint32(18).fork()).join();
    }
    if (message.entitlementId !== "") {
      writer.uint32(26).string(message.entitlementId);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entitlement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitlement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cloudAccountDetails = CloudAccountDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.entitlementId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Entitlement {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      cloudAccountDetails: isSet(object.cloudAccountDetails)
        ? CloudAccountDetails.fromJSON(object.cloudAccountDetails)
        : undefined,
      entitlementId: isSet(object.entitlementId) ? globalThis.String(object.entitlementId) : "",
      state: isSet(object.state) ? entitlement_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Entitlement): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.cloudAccountDetails !== undefined) {
      obj.cloudAccountDetails = CloudAccountDetails.toJSON(message.cloudAccountDetails);
    }
    if (message.entitlementId !== "") {
      obj.entitlementId = message.entitlementId;
    }
    if (message.state !== 0) {
      obj.state = entitlement_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Entitlement>): Entitlement {
    return Entitlement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Entitlement>): Entitlement {
    const message = createBaseEntitlement();
    message.name = object.name ?? "";
    message.cloudAccountDetails = (object.cloudAccountDetails !== undefined && object.cloudAccountDetails !== null)
      ? CloudAccountDetails.fromPartial(object.cloudAccountDetails)
      : undefined;
    message.entitlementId = object.entitlementId ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseCloudAccountDetails(): CloudAccountDetails {
  return {
    cloudAccount: "",
    cloudAccountHomeRegion: "",
    linkExistingAccountUri: undefined,
    accountCreationUri: undefined,
  };
}

export const CloudAccountDetails: MessageFns<CloudAccountDetails> = {
  encode(message: CloudAccountDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cloudAccount !== "") {
      writer.uint32(10).string(message.cloudAccount);
    }
    if (message.cloudAccountHomeRegion !== "") {
      writer.uint32(18).string(message.cloudAccountHomeRegion);
    }
    if (message.linkExistingAccountUri !== undefined) {
      writer.uint32(26).string(message.linkExistingAccountUri);
    }
    if (message.accountCreationUri !== undefined) {
      writer.uint32(34).string(message.accountCreationUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudAccountDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudAccountDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cloudAccount = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cloudAccountHomeRegion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.linkExistingAccountUri = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.accountCreationUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudAccountDetails {
    return {
      cloudAccount: isSet(object.cloudAccount) ? globalThis.String(object.cloudAccount) : "",
      cloudAccountHomeRegion: isSet(object.cloudAccountHomeRegion)
        ? globalThis.String(object.cloudAccountHomeRegion)
        : "",
      linkExistingAccountUri: isSet(object.linkExistingAccountUri)
        ? globalThis.String(object.linkExistingAccountUri)
        : undefined,
      accountCreationUri: isSet(object.accountCreationUri) ? globalThis.String(object.accountCreationUri) : undefined,
    };
  },

  toJSON(message: CloudAccountDetails): unknown {
    const obj: any = {};
    if (message.cloudAccount !== "") {
      obj.cloudAccount = message.cloudAccount;
    }
    if (message.cloudAccountHomeRegion !== "") {
      obj.cloudAccountHomeRegion = message.cloudAccountHomeRegion;
    }
    if (message.linkExistingAccountUri !== undefined) {
      obj.linkExistingAccountUri = message.linkExistingAccountUri;
    }
    if (message.accountCreationUri !== undefined) {
      obj.accountCreationUri = message.accountCreationUri;
    }
    return obj;
  },

  create(base?: DeepPartial<CloudAccountDetails>): CloudAccountDetails {
    return CloudAccountDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudAccountDetails>): CloudAccountDetails {
    const message = createBaseCloudAccountDetails();
    message.cloudAccount = object.cloudAccount ?? "";
    message.cloudAccountHomeRegion = object.cloudAccountHomeRegion ?? "";
    message.linkExistingAccountUri = object.linkExistingAccountUri ?? undefined;
    message.accountCreationUri = object.accountCreationUri ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
