// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/oracledatabase/v1/autonomous_database_character_set.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.oracledatabase.v1";

/**
 * Details of the Autonomous Database character set resource.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/AutonomousDatabaseCharacterSets/
 */
export interface AutonomousDatabaseCharacterSet {
  /**
   * Identifier. The name of the Autonomous Database Character Set resource in
   * the following format:
   * projects/{project}/locations/{region}/autonomousDatabaseCharacterSets/{autonomous_database_character_set}
   */
  name: string;
  /** Output only. The character set type for the Autonomous Database. */
  characterSetType: AutonomousDatabaseCharacterSet_CharacterSetType;
  /**
   * Output only. The character set name for the Autonomous Database which is
   * the ID in the resource name.
   */
  characterSet: string;
}

/** The type of character set an Autonomous Database can have. */
export enum AutonomousDatabaseCharacterSet_CharacterSetType {
  /** CHARACTER_SET_TYPE_UNSPECIFIED - Character set type is not specified. */
  CHARACTER_SET_TYPE_UNSPECIFIED = 0,
  /** DATABASE - Character set type is set to database. */
  DATABASE = 1,
  /** NATIONAL - Character set type is set to national. */
  NATIONAL = 2,
  UNRECOGNIZED = -1,
}

export function autonomousDatabaseCharacterSet_CharacterSetTypeFromJSON(
  object: any,
): AutonomousDatabaseCharacterSet_CharacterSetType {
  switch (object) {
    case 0:
    case "CHARACTER_SET_TYPE_UNSPECIFIED":
      return AutonomousDatabaseCharacterSet_CharacterSetType.CHARACTER_SET_TYPE_UNSPECIFIED;
    case 1:
    case "DATABASE":
      return AutonomousDatabaseCharacterSet_CharacterSetType.DATABASE;
    case 2:
    case "NATIONAL":
      return AutonomousDatabaseCharacterSet_CharacterSetType.NATIONAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutonomousDatabaseCharacterSet_CharacterSetType.UNRECOGNIZED;
  }
}

export function autonomousDatabaseCharacterSet_CharacterSetTypeToJSON(
  object: AutonomousDatabaseCharacterSet_CharacterSetType,
): string {
  switch (object) {
    case AutonomousDatabaseCharacterSet_CharacterSetType.CHARACTER_SET_TYPE_UNSPECIFIED:
      return "CHARACTER_SET_TYPE_UNSPECIFIED";
    case AutonomousDatabaseCharacterSet_CharacterSetType.DATABASE:
      return "DATABASE";
    case AutonomousDatabaseCharacterSet_CharacterSetType.NATIONAL:
      return "NATIONAL";
    case AutonomousDatabaseCharacterSet_CharacterSetType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAutonomousDatabaseCharacterSet(): AutonomousDatabaseCharacterSet {
  return { name: "", characterSetType: 0, characterSet: "" };
}

export const AutonomousDatabaseCharacterSet: MessageFns<AutonomousDatabaseCharacterSet> = {
  encode(message: AutonomousDatabaseCharacterSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.characterSetType !== 0) {
      writer.uint32(16).int32(message.characterSetType);
    }
    if (message.characterSet !== "") {
      writer.uint32(26).string(message.characterSet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutonomousDatabaseCharacterSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutonomousDatabaseCharacterSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.characterSetType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.characterSet = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutonomousDatabaseCharacterSet {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      characterSetType: isSet(object.characterSetType)
        ? autonomousDatabaseCharacterSet_CharacterSetTypeFromJSON(object.characterSetType)
        : 0,
      characterSet: isSet(object.characterSet) ? globalThis.String(object.characterSet) : "",
    };
  },

  toJSON(message: AutonomousDatabaseCharacterSet): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.characterSetType !== 0) {
      obj.characterSetType = autonomousDatabaseCharacterSet_CharacterSetTypeToJSON(message.characterSetType);
    }
    if (message.characterSet !== "") {
      obj.characterSet = message.characterSet;
    }
    return obj;
  },

  create(base?: DeepPartial<AutonomousDatabaseCharacterSet>): AutonomousDatabaseCharacterSet {
    return AutonomousDatabaseCharacterSet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutonomousDatabaseCharacterSet>): AutonomousDatabaseCharacterSet {
    const message = createBaseAutonomousDatabaseCharacterSet();
    message.name = object.name ?? "";
    message.characterSetType = object.characterSetType ?? 0;
    message.characterSet = object.characterSet ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
