// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/oracledatabase/v1/db_server.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.oracledatabase.v1";

/**
 * Details of the database server resource.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/DbServer/
 */
export interface DbServer {
  /**
   * Identifier. The name of the database server resource with the format:
   * projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}/dbServers/{db_server}
   */
  name: string;
  /** Optional. User friendly name for this resource. */
  displayName: string;
  /** Optional. Various properties of the database server. */
  properties: DbServerProperties | undefined;
}

/** Various properties and settings associated with Exadata database server. */
export interface DbServerProperties {
  /** Output only. OCID of database server. */
  ocid: string;
  /** Optional. OCPU count per database. */
  ocpuCount: number;
  /** Optional. Maximum OCPU count per database. */
  maxOcpuCount: number;
  /** Optional. Memory allocated in GBs. */
  memorySizeGb: number;
  /** Optional. Maximum memory allocated in GBs. */
  maxMemorySizeGb: number;
  /** Optional. Local storage per VM. */
  dbNodeStorageSizeGb: number;
  /** Optional. Maximum local storage per VM. */
  maxDbNodeStorageSizeGb: number;
  /** Optional. Vm count per database. */
  vmCount: number;
  /** Output only. State of the database server. */
  state: DbServerProperties_State;
  /** Output only. OCID of database nodes associated with the database server. */
  dbNodeIds: string[];
}

/** The various lifecycle states of the database server. */
export enum DbServerProperties_State {
  /** STATE_UNSPECIFIED - Default unspecified value. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Indicates that the resource is in creating state. */
  CREATING = 1,
  /** AVAILABLE - Indicates that the resource is in available state. */
  AVAILABLE = 2,
  /** UNAVAILABLE - Indicates that the resource is in unavailable state. */
  UNAVAILABLE = 3,
  /** DELETING - Indicates that the resource is in deleting state. */
  DELETING = 4,
  /** DELETED - Indicates that the resource is in deleted state. */
  DELETED = 5,
  UNRECOGNIZED = -1,
}

export function dbServerProperties_StateFromJSON(object: any): DbServerProperties_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return DbServerProperties_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return DbServerProperties_State.CREATING;
    case 2:
    case "AVAILABLE":
      return DbServerProperties_State.AVAILABLE;
    case 3:
    case "UNAVAILABLE":
      return DbServerProperties_State.UNAVAILABLE;
    case 4:
    case "DELETING":
      return DbServerProperties_State.DELETING;
    case 5:
    case "DELETED":
      return DbServerProperties_State.DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DbServerProperties_State.UNRECOGNIZED;
  }
}

export function dbServerProperties_StateToJSON(object: DbServerProperties_State): string {
  switch (object) {
    case DbServerProperties_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case DbServerProperties_State.CREATING:
      return "CREATING";
    case DbServerProperties_State.AVAILABLE:
      return "AVAILABLE";
    case DbServerProperties_State.UNAVAILABLE:
      return "UNAVAILABLE";
    case DbServerProperties_State.DELETING:
      return "DELETING";
    case DbServerProperties_State.DELETED:
      return "DELETED";
    case DbServerProperties_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDbServer(): DbServer {
  return { name: "", displayName: "", properties: undefined };
}

export const DbServer: MessageFns<DbServer> = {
  encode(message: DbServer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.properties !== undefined) {
      DbServerProperties.encode(message.properties, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DbServer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDbServer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.properties = DbServerProperties.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DbServer {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      properties: isSet(object.properties) ? DbServerProperties.fromJSON(object.properties) : undefined,
    };
  },

  toJSON(message: DbServer): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.properties !== undefined) {
      obj.properties = DbServerProperties.toJSON(message.properties);
    }
    return obj;
  },

  create(base?: DeepPartial<DbServer>): DbServer {
    return DbServer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DbServer>): DbServer {
    const message = createBaseDbServer();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.properties = (object.properties !== undefined && object.properties !== null)
      ? DbServerProperties.fromPartial(object.properties)
      : undefined;
    return message;
  },
};

function createBaseDbServerProperties(): DbServerProperties {
  return {
    ocid: "",
    ocpuCount: 0,
    maxOcpuCount: 0,
    memorySizeGb: 0,
    maxMemorySizeGb: 0,
    dbNodeStorageSizeGb: 0,
    maxDbNodeStorageSizeGb: 0,
    vmCount: 0,
    state: 0,
    dbNodeIds: [],
  };
}

export const DbServerProperties: MessageFns<DbServerProperties> = {
  encode(message: DbServerProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ocid !== "") {
      writer.uint32(10).string(message.ocid);
    }
    if (message.ocpuCount !== 0) {
      writer.uint32(16).int32(message.ocpuCount);
    }
    if (message.maxOcpuCount !== 0) {
      writer.uint32(24).int32(message.maxOcpuCount);
    }
    if (message.memorySizeGb !== 0) {
      writer.uint32(32).int32(message.memorySizeGb);
    }
    if (message.maxMemorySizeGb !== 0) {
      writer.uint32(40).int32(message.maxMemorySizeGb);
    }
    if (message.dbNodeStorageSizeGb !== 0) {
      writer.uint32(48).int32(message.dbNodeStorageSizeGb);
    }
    if (message.maxDbNodeStorageSizeGb !== 0) {
      writer.uint32(56).int32(message.maxDbNodeStorageSizeGb);
    }
    if (message.vmCount !== 0) {
      writer.uint32(64).int32(message.vmCount);
    }
    if (message.state !== 0) {
      writer.uint32(72).int32(message.state);
    }
    for (const v of message.dbNodeIds) {
      writer.uint32(82).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DbServerProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDbServerProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ocid = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ocpuCount = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxOcpuCount = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.memorySizeGb = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.maxMemorySizeGb = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.dbNodeStorageSizeGb = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.maxDbNodeStorageSizeGb = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.vmCount = reader.int32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.dbNodeIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DbServerProperties {
    return {
      ocid: isSet(object.ocid) ? globalThis.String(object.ocid) : "",
      ocpuCount: isSet(object.ocpuCount) ? globalThis.Number(object.ocpuCount) : 0,
      maxOcpuCount: isSet(object.maxOcpuCount) ? globalThis.Number(object.maxOcpuCount) : 0,
      memorySizeGb: isSet(object.memorySizeGb) ? globalThis.Number(object.memorySizeGb) : 0,
      maxMemorySizeGb: isSet(object.maxMemorySizeGb) ? globalThis.Number(object.maxMemorySizeGb) : 0,
      dbNodeStorageSizeGb: isSet(object.dbNodeStorageSizeGb) ? globalThis.Number(object.dbNodeStorageSizeGb) : 0,
      maxDbNodeStorageSizeGb: isSet(object.maxDbNodeStorageSizeGb)
        ? globalThis.Number(object.maxDbNodeStorageSizeGb)
        : 0,
      vmCount: isSet(object.vmCount) ? globalThis.Number(object.vmCount) : 0,
      state: isSet(object.state) ? dbServerProperties_StateFromJSON(object.state) : 0,
      dbNodeIds: globalThis.Array.isArray(object?.dbNodeIds)
        ? object.dbNodeIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DbServerProperties): unknown {
    const obj: any = {};
    if (message.ocid !== "") {
      obj.ocid = message.ocid;
    }
    if (message.ocpuCount !== 0) {
      obj.ocpuCount = Math.round(message.ocpuCount);
    }
    if (message.maxOcpuCount !== 0) {
      obj.maxOcpuCount = Math.round(message.maxOcpuCount);
    }
    if (message.memorySizeGb !== 0) {
      obj.memorySizeGb = Math.round(message.memorySizeGb);
    }
    if (message.maxMemorySizeGb !== 0) {
      obj.maxMemorySizeGb = Math.round(message.maxMemorySizeGb);
    }
    if (message.dbNodeStorageSizeGb !== 0) {
      obj.dbNodeStorageSizeGb = Math.round(message.dbNodeStorageSizeGb);
    }
    if (message.maxDbNodeStorageSizeGb !== 0) {
      obj.maxDbNodeStorageSizeGb = Math.round(message.maxDbNodeStorageSizeGb);
    }
    if (message.vmCount !== 0) {
      obj.vmCount = Math.round(message.vmCount);
    }
    if (message.state !== 0) {
      obj.state = dbServerProperties_StateToJSON(message.state);
    }
    if (message.dbNodeIds?.length) {
      obj.dbNodeIds = message.dbNodeIds;
    }
    return obj;
  },

  create(base?: DeepPartial<DbServerProperties>): DbServerProperties {
    return DbServerProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DbServerProperties>): DbServerProperties {
    const message = createBaseDbServerProperties();
    message.ocid = object.ocid ?? "";
    message.ocpuCount = object.ocpuCount ?? 0;
    message.maxOcpuCount = object.maxOcpuCount ?? 0;
    message.memorySizeGb = object.memorySizeGb ?? 0;
    message.maxMemorySizeGb = object.maxMemorySizeGb ?? 0;
    message.dbNodeStorageSizeGb = object.dbNodeStorageSizeGb ?? 0;
    message.maxDbNodeStorageSizeGb = object.maxDbNodeStorageSizeGb ?? 0;
    message.vmCount = object.vmCount ?? 0;
    message.state = object.state ?? 0;
    message.dbNodeIds = object.dbNodeIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
