// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/oracledatabase/v1/db_system_shape.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.oracledatabase.v1";

/**
 * Details of the Database System Shapes resource.
 * https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/DbSystemShapeSummary/
 */
export interface DbSystemShape {
  /**
   * Identifier. The name of the Database System Shape resource with the format:
   * projects/{project}/locations/{region}/dbSystemShapes/{db_system_shape}
   */
  name: string;
  /** Optional. shape */
  shape: string;
  /** Optional. Minimum number of database servers. */
  minNodeCount: number;
  /** Optional. Maximum number of database servers. */
  maxNodeCount: number;
  /** Optional. Minimum number of storage servers. */
  minStorageCount: number;
  /** Optional. Maximum number of storage servers. */
  maxStorageCount: number;
  /** Optional. Number of cores per node. */
  availableCoreCountPerNode: number;
  /** Optional. Memory per database server node in gigabytes. */
  availableMemoryPerNodeGb: number;
  /** Optional. Storage per storage server in terabytes. */
  availableDataStorageTb: number;
  /** Optional. Minimum core count per node. */
  minCoreCountPerNode: number;
  /** Optional. Minimum memory per node in gigabytes. */
  minMemoryPerNodeGb: number;
  /** Optional. Minimum node storage per database server in gigabytes. */
  minDbNodeStoragePerNodeGb: number;
}

function createBaseDbSystemShape(): DbSystemShape {
  return {
    name: "",
    shape: "",
    minNodeCount: 0,
    maxNodeCount: 0,
    minStorageCount: 0,
    maxStorageCount: 0,
    availableCoreCountPerNode: 0,
    availableMemoryPerNodeGb: 0,
    availableDataStorageTb: 0,
    minCoreCountPerNode: 0,
    minMemoryPerNodeGb: 0,
    minDbNodeStoragePerNodeGb: 0,
  };
}

export const DbSystemShape: MessageFns<DbSystemShape> = {
  encode(message: DbSystemShape, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.shape !== "") {
      writer.uint32(18).string(message.shape);
    }
    if (message.minNodeCount !== 0) {
      writer.uint32(24).int32(message.minNodeCount);
    }
    if (message.maxNodeCount !== 0) {
      writer.uint32(32).int32(message.maxNodeCount);
    }
    if (message.minStorageCount !== 0) {
      writer.uint32(40).int32(message.minStorageCount);
    }
    if (message.maxStorageCount !== 0) {
      writer.uint32(48).int32(message.maxStorageCount);
    }
    if (message.availableCoreCountPerNode !== 0) {
      writer.uint32(56).int32(message.availableCoreCountPerNode);
    }
    if (message.availableMemoryPerNodeGb !== 0) {
      writer.uint32(64).int32(message.availableMemoryPerNodeGb);
    }
    if (message.availableDataStorageTb !== 0) {
      writer.uint32(72).int32(message.availableDataStorageTb);
    }
    if (message.minCoreCountPerNode !== 0) {
      writer.uint32(80).int32(message.minCoreCountPerNode);
    }
    if (message.minMemoryPerNodeGb !== 0) {
      writer.uint32(88).int32(message.minMemoryPerNodeGb);
    }
    if (message.minDbNodeStoragePerNodeGb !== 0) {
      writer.uint32(96).int32(message.minDbNodeStoragePerNodeGb);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DbSystemShape {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDbSystemShape();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.shape = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.minNodeCount = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.maxNodeCount = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.minStorageCount = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.maxStorageCount = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.availableCoreCountPerNode = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.availableMemoryPerNodeGb = reader.int32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.availableDataStorageTb = reader.int32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.minCoreCountPerNode = reader.int32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.minMemoryPerNodeGb = reader.int32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.minDbNodeStoragePerNodeGb = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DbSystemShape {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      shape: isSet(object.shape) ? globalThis.String(object.shape) : "",
      minNodeCount: isSet(object.minNodeCount) ? globalThis.Number(object.minNodeCount) : 0,
      maxNodeCount: isSet(object.maxNodeCount) ? globalThis.Number(object.maxNodeCount) : 0,
      minStorageCount: isSet(object.minStorageCount) ? globalThis.Number(object.minStorageCount) : 0,
      maxStorageCount: isSet(object.maxStorageCount) ? globalThis.Number(object.maxStorageCount) : 0,
      availableCoreCountPerNode: isSet(object.availableCoreCountPerNode)
        ? globalThis.Number(object.availableCoreCountPerNode)
        : 0,
      availableMemoryPerNodeGb: isSet(object.availableMemoryPerNodeGb)
        ? globalThis.Number(object.availableMemoryPerNodeGb)
        : 0,
      availableDataStorageTb: isSet(object.availableDataStorageTb)
        ? globalThis.Number(object.availableDataStorageTb)
        : 0,
      minCoreCountPerNode: isSet(object.minCoreCountPerNode) ? globalThis.Number(object.minCoreCountPerNode) : 0,
      minMemoryPerNodeGb: isSet(object.minMemoryPerNodeGb) ? globalThis.Number(object.minMemoryPerNodeGb) : 0,
      minDbNodeStoragePerNodeGb: isSet(object.minDbNodeStoragePerNodeGb)
        ? globalThis.Number(object.minDbNodeStoragePerNodeGb)
        : 0,
    };
  },

  toJSON(message: DbSystemShape): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.shape !== "") {
      obj.shape = message.shape;
    }
    if (message.minNodeCount !== 0) {
      obj.minNodeCount = Math.round(message.minNodeCount);
    }
    if (message.maxNodeCount !== 0) {
      obj.maxNodeCount = Math.round(message.maxNodeCount);
    }
    if (message.minStorageCount !== 0) {
      obj.minStorageCount = Math.round(message.minStorageCount);
    }
    if (message.maxStorageCount !== 0) {
      obj.maxStorageCount = Math.round(message.maxStorageCount);
    }
    if (message.availableCoreCountPerNode !== 0) {
      obj.availableCoreCountPerNode = Math.round(message.availableCoreCountPerNode);
    }
    if (message.availableMemoryPerNodeGb !== 0) {
      obj.availableMemoryPerNodeGb = Math.round(message.availableMemoryPerNodeGb);
    }
    if (message.availableDataStorageTb !== 0) {
      obj.availableDataStorageTb = Math.round(message.availableDataStorageTb);
    }
    if (message.minCoreCountPerNode !== 0) {
      obj.minCoreCountPerNode = Math.round(message.minCoreCountPerNode);
    }
    if (message.minMemoryPerNodeGb !== 0) {
      obj.minMemoryPerNodeGb = Math.round(message.minMemoryPerNodeGb);
    }
    if (message.minDbNodeStoragePerNodeGb !== 0) {
      obj.minDbNodeStoragePerNodeGb = Math.round(message.minDbNodeStoragePerNodeGb);
    }
    return obj;
  },

  create(base?: DeepPartial<DbSystemShape>): DbSystemShape {
    return DbSystemShape.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DbSystemShape>): DbSystemShape {
    const message = createBaseDbSystemShape();
    message.name = object.name ?? "";
    message.shape = object.shape ?? "";
    message.minNodeCount = object.minNodeCount ?? 0;
    message.maxNodeCount = object.maxNodeCount ?? 0;
    message.minStorageCount = object.minStorageCount ?? 0;
    message.maxStorageCount = object.maxStorageCount ?? 0;
    message.availableCoreCountPerNode = object.availableCoreCountPerNode ?? 0;
    message.availableMemoryPerNodeGb = object.availableMemoryPerNodeGb ?? 0;
    message.availableDataStorageTb = object.availableDataStorageTb ?? 0;
    message.minCoreCountPerNode = object.minCoreCountPerNode ?? 0;
    message.minMemoryPerNodeGb = object.minMemoryPerNodeGb ?? 0;
    message.minDbNodeStoragePerNodeGb = object.minDbNodeStoragePerNodeGb ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
