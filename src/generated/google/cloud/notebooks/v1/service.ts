// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/notebooks/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DiagnosticConfig } from "./diagnostic_config.js";
import { Environment } from "./environment.js";
import { Execution } from "./execution.js";
import {
  Instance,
  Instance_AcceleratorType,
  instance_AcceleratorTypeFromJSON,
  instance_AcceleratorTypeToJSON,
  Instance_ShieldedInstanceConfig,
} from "./instance.js";
import { InstanceConfig } from "./instance_config.js";
import { Schedule } from "./schedule.js";

export const protobufPackage = "google.cloud.notebooks.v1";

/**
 * Definition of the types of upgrade that can be used on this
 * instance.
 */
export enum UpgradeType {
  /** UPGRADE_TYPE_UNSPECIFIED - Upgrade type is not specified. */
  UPGRADE_TYPE_UNSPECIFIED = 0,
  /** UPGRADE_FRAMEWORK - Upgrade ML framework. */
  UPGRADE_FRAMEWORK = 1,
  /** UPGRADE_OS - Upgrade Operating System. */
  UPGRADE_OS = 2,
  /** UPGRADE_CUDA - Upgrade CUDA. */
  UPGRADE_CUDA = 3,
  /** UPGRADE_ALL - Upgrade All (OS, Framework and CUDA). */
  UPGRADE_ALL = 4,
  UNRECOGNIZED = -1,
}

export function upgradeTypeFromJSON(object: any): UpgradeType {
  switch (object) {
    case 0:
    case "UPGRADE_TYPE_UNSPECIFIED":
      return UpgradeType.UPGRADE_TYPE_UNSPECIFIED;
    case 1:
    case "UPGRADE_FRAMEWORK":
      return UpgradeType.UPGRADE_FRAMEWORK;
    case 2:
    case "UPGRADE_OS":
      return UpgradeType.UPGRADE_OS;
    case 3:
    case "UPGRADE_CUDA":
      return UpgradeType.UPGRADE_CUDA;
    case 4:
    case "UPGRADE_ALL":
      return UpgradeType.UPGRADE_ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UpgradeType.UNRECOGNIZED;
  }
}

export function upgradeTypeToJSON(object: UpgradeType): string {
  switch (object) {
    case UpgradeType.UPGRADE_TYPE_UNSPECIFIED:
      return "UPGRADE_TYPE_UNSPECIFIED";
    case UpgradeType.UPGRADE_FRAMEWORK:
      return "UPGRADE_FRAMEWORK";
    case UpgradeType.UPGRADE_OS:
      return "UPGRADE_OS";
    case UpgradeType.UPGRADE_CUDA:
      return "UPGRADE_CUDA";
    case UpgradeType.UPGRADE_ALL:
      return "UPGRADE_ALL";
    case UpgradeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Server-defined resource path for the target of the operation. */
  target: string;
  /** Name of the verb executed by the operation. */
  verb: string;
  /** Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** API version used to start the operation. */
  apiVersion: string;
  /** API endpoint name of this operation. */
  endpoint: string;
}

/** Request for listing notebook instances. */
export interface ListInstancesRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Maximum return size of the list call. */
  pageSize: number;
  /**
   * A previous returned page token that can be used to continue listing
   * from the last result.
   */
  pageToken: string;
}

/** Response for listing notebook instances. */
export interface ListInstancesResponse {
  /** A list of returned instances. */
  instances: Instance[];
  /**
   * Page token that can be used to continue listing from the last result in the
   * next list call.
   */
  nextPageToken: string;
  /**
   * Locations that could not be reached. For example,
   * `['us-west1-a', 'us-central1-b']`.
   * A ListInstancesResponse will only contain either instances or unreachables,
   */
  unreachable: string[];
}

/** Request for getting a notebook instance. */
export interface GetInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for creating a notebook instance. */
export interface CreateInstanceRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Required. User-defined unique ID of this instance. */
  instanceId: string;
  /** Required. The instance to be created. */
  instance: Instance | undefined;
}

/** Request for registering a notebook instance. */
export interface RegisterInstanceRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /**
   * Required. User defined unique ID of this instance. The `instance_id` must
   * be 1 to 63 characters long and contain only lowercase letters,
   * numeric characters, and dashes. The first character must be a lowercase
   * letter and the last character cannot be a dash.
   */
  instanceId: string;
}

/** Request for setting instance accelerator. */
export interface SetInstanceAcceleratorRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /** Required. Type of this accelerator. */
  type: Instance_AcceleratorType;
  /**
   * Required. Count of cores of this accelerator. Note that not all combinations
   * of `type` and `core_count` are valid. Check [GPUs on
   * Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to
   * find a valid combination. TPUs are not supported.
   */
  coreCount: Long;
}

/** Request for setting instance machine type. */
export interface SetInstanceMachineTypeRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /**
   * Required. The [Compute Engine machine
   * type](https://cloud.google.com/compute/docs/machine-types).
   */
  machineType: string;
}

/** Request for updating instance configurations. */
export interface UpdateInstanceConfigRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /** The instance configurations to be updated. */
  config: InstanceConfig | undefined;
}

/** Request for setting instance labels. */
export interface SetInstanceLabelsRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /**
   * Labels to apply to this instance.
   * These can be later modified by the setLabels method
   */
  labels: { [key: string]: string };
}

export interface SetInstanceLabelsRequest_LabelsEntry {
  key: string;
  value: string;
}

/** Request for adding/changing metadata items  for an instance. */
export interface UpdateInstanceMetadataItemsRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /** Metadata items to add/update for the instance. */
  items: { [key: string]: string };
}

export interface UpdateInstanceMetadataItemsRequest_ItemsEntry {
  key: string;
  value: string;
}

/** Response for adding/changing metadata items for an instance. */
export interface UpdateInstanceMetadataItemsResponse {
  /** Map of items that were added/updated to/in the metadata. */
  items: { [key: string]: string };
}

export interface UpdateInstanceMetadataItemsResponse_ItemsEntry {
  key: string;
  value: string;
}

/**
 * Request for updating the Shielded Instance config for a notebook instance.
 * You can only use this method on a stopped instance
 */
export interface UpdateShieldedInstanceConfigRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /** ShieldedInstance configuration to be updated. */
  shieldedInstanceConfig: Instance_ShieldedInstanceConfig | undefined;
}

/** Request for deleting a notebook instance. */
export interface DeleteInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for starting a notebook instance */
export interface StartInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for stopping a notebook instance */
export interface StopInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for resetting a notebook instance */
export interface ResetInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for notebook instances to report information to Notebooks API. */
export interface ReportInstanceInfoRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /**
   * Required. The VM hardware token for authenticating the VM.
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   */
  vmId: string;
  /**
   * The metadata reported to Notebooks API. This will be merged to the instance
   * metadata store
   */
  metadata: { [key: string]: string };
}

export interface ReportInstanceInfoRequest_MetadataEntry {
  key: string;
  value: string;
}

/** Request for checking if a notebook instance is upgradeable. */
export interface IsInstanceUpgradeableRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  notebookInstance: string;
  /**
   * Optional. The optional UpgradeType. Setting this field will search for additional
   * compute images to upgrade this instance.
   */
  type: UpgradeType;
}

/** Response for checking if a notebook instance is upgradeable. */
export interface IsInstanceUpgradeableResponse {
  /** If an instance is upgradeable. */
  upgradeable: boolean;
  /**
   * The version this instance will be upgraded to if calling the upgrade
   * endpoint. This field will only be populated if field upgradeable is true.
   */
  upgradeVersion: string;
  /** Additional information about upgrade. */
  upgradeInfo: string;
  /**
   * The new image self link this instance will be upgraded to if calling the
   * upgrade endpoint. This field will only be populated if field upgradeable
   * is true.
   */
  upgradeImage: string;
}

/** Request for checking if a notebook instance is healthy. */
export interface GetInstanceHealthRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Response for checking if a notebook instance is healthy. */
export interface GetInstanceHealthResponse {
  /** Output only. Runtime health_state. */
  healthState: GetInstanceHealthResponse_HealthState;
  /**
   * Output only. Additional information about instance health.
   * Example:
   *     healthInfo": {
   *       "docker_proxy_agent_status": "1",
   *       "docker_status": "1",
   *       "jupyterlab_api_status": "-1",
   *       "jupyterlab_status": "-1",
   *       "updated": "2020-10-18 09:40:03.573409"
   *     }
   */
  healthInfo: { [key: string]: string };
}

/** If an instance is healthy or not. */
export enum GetInstanceHealthResponse_HealthState {
  /** HEALTH_STATE_UNSPECIFIED - The instance substate is unknown. */
  HEALTH_STATE_UNSPECIFIED = 0,
  /**
   * HEALTHY - The instance is known to be in an healthy state
   * (for example, critical daemons are running)
   * Applies to ACTIVE state.
   */
  HEALTHY = 1,
  /**
   * UNHEALTHY - The instance is known to be in an unhealthy state
   * (for example, critical daemons are not running)
   * Applies to ACTIVE state.
   */
  UNHEALTHY = 2,
  /**
   * AGENT_NOT_INSTALLED - The instance has not installed health monitoring agent.
   * Applies to ACTIVE state.
   */
  AGENT_NOT_INSTALLED = 3,
  /**
   * AGENT_NOT_RUNNING - The instance health monitoring agent is not running.
   * Applies to ACTIVE state.
   */
  AGENT_NOT_RUNNING = 4,
  UNRECOGNIZED = -1,
}

export function getInstanceHealthResponse_HealthStateFromJSON(object: any): GetInstanceHealthResponse_HealthState {
  switch (object) {
    case 0:
    case "HEALTH_STATE_UNSPECIFIED":
      return GetInstanceHealthResponse_HealthState.HEALTH_STATE_UNSPECIFIED;
    case 1:
    case "HEALTHY":
      return GetInstanceHealthResponse_HealthState.HEALTHY;
    case 2:
    case "UNHEALTHY":
      return GetInstanceHealthResponse_HealthState.UNHEALTHY;
    case 3:
    case "AGENT_NOT_INSTALLED":
      return GetInstanceHealthResponse_HealthState.AGENT_NOT_INSTALLED;
    case 4:
    case "AGENT_NOT_RUNNING":
      return GetInstanceHealthResponse_HealthState.AGENT_NOT_RUNNING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GetInstanceHealthResponse_HealthState.UNRECOGNIZED;
  }
}

export function getInstanceHealthResponse_HealthStateToJSON(object: GetInstanceHealthResponse_HealthState): string {
  switch (object) {
    case GetInstanceHealthResponse_HealthState.HEALTH_STATE_UNSPECIFIED:
      return "HEALTH_STATE_UNSPECIFIED";
    case GetInstanceHealthResponse_HealthState.HEALTHY:
      return "HEALTHY";
    case GetInstanceHealthResponse_HealthState.UNHEALTHY:
      return "UNHEALTHY";
    case GetInstanceHealthResponse_HealthState.AGENT_NOT_INSTALLED:
      return "AGENT_NOT_INSTALLED";
    case GetInstanceHealthResponse_HealthState.AGENT_NOT_RUNNING:
      return "AGENT_NOT_RUNNING";
    case GetInstanceHealthResponse_HealthState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GetInstanceHealthResponse_HealthInfoEntry {
  key: string;
  value: string;
}

/** Request for upgrading a notebook instance */
export interface UpgradeInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /**
   * Optional. The optional UpgradeType. Setting this field will search for additional
   * compute images to upgrade this instance.
   */
  type: UpgradeType;
}

/** Request for rollbacking a notebook instance */
export interface RollbackInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /**
   * Required. The snapshot for rollback.
   * Example: `projects/test-project/global/snapshots/krwlzipynril`.
   */
  targetSnapshot: string;
}

/** Request for upgrading a notebook instance from within the VM */
export interface UpgradeInstanceInternalRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /**
   * Required. The VM hardware token for authenticating the VM.
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   */
  vmId: string;
  /**
   * Optional. The optional UpgradeType. Setting this field will search for additional
   * compute images to upgrade this instance.
   */
  type: UpgradeType;
}

/** Request for listing environments. */
export interface ListEnvironmentsRequest {
  /** Required. Format: `projects/{project_id}/locations/{location}` */
  parent: string;
  /** Maximum return size of the list call. */
  pageSize: number;
  /**
   * A previous returned page token that can be used to continue listing from
   * the last result.
   */
  pageToken: string;
}

/** Request for creating a notebook instance diagnostic file. */
export interface DiagnoseInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /** Required. Defines flags that are used to run the diagnostic tool */
  diagnosticConfig: DiagnosticConfig | undefined;
}

/** Response for listing environments. */
export interface ListEnvironmentsResponse {
  /** A list of returned environments. */
  environments: Environment[];
  /**
   * A page token that can be used to continue listing from the last result
   * in the next list call.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for getting a notebook environment. */
export interface GetEnvironmentRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/environments/{environment_id}`
   */
  name: string;
}

/** Request for creating a notebook environment. */
export interface CreateEnvironmentRequest {
  /** Required. Format: `projects/{project_id}/locations/{location}` */
  parent: string;
  /**
   * Required. User-defined unique ID of this environment. The `environment_id` must
   * be 1 to 63 characters long and contain only lowercase letters,
   * numeric characters, and dashes. The first character must be a lowercase
   * letter and the last character cannot be a dash.
   */
  environmentId: string;
  /** Required. The environment to be created. */
  environment: Environment | undefined;
}

/** Request for deleting a notebook environment. */
export interface DeleteEnvironmentRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/environments/{environment_id}`
   */
  name: string;
}

/** Request for listing scheduled notebook job. */
export interface ListSchedulesRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Maximum return size of the list call. */
  pageSize: number;
  /**
   * A previous returned page token that can be used to continue listing
   * from the last result.
   */
  pageToken: string;
  /** Filter applied to resulting schedules. */
  filter: string;
  /** Field to order results by. */
  orderBy: string;
}

/** Response for listing scheduled notebook job. */
export interface ListSchedulesResponse {
  /** A list of returned instances. */
  schedules: Schedule[];
  /**
   * Page token that can be used to continue listing from the last result in the
   * next list call.
   */
  nextPageToken: string;
  /**
   * Schedules that could not be reached. For example:
   *
   *     ['projects/{project_id}/location/{location}/schedules/monthly_digest',
   *      'projects/{project_id}/location/{location}/schedules/weekly_sentiment']
   */
  unreachable: string[];
}

/** Request for getting scheduled notebook. */
export interface GetScheduleRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
   */
  name: string;
}

/** Request for deleting an Schedule */
export interface DeleteScheduleRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
   */
  name: string;
}

/** Request for created scheduled notebooks */
export interface CreateScheduleRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Required. User-defined unique ID of this schedule. */
  scheduleId: string;
  /** Required. The schedule to be created. */
  schedule: Schedule | undefined;
}

/** Request for created scheduled notebooks */
export interface TriggerScheduleRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}/schedules/{schedule_id}`
   */
  name: string;
}

/** Request for listing scheduled notebook executions. */
export interface ListExecutionsRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Maximum return size of the list call. */
  pageSize: number;
  /**
   * A previous returned page token that can be used to continue listing
   * from the last result.
   */
  pageToken: string;
  /**
   * Filter applied to resulting executions. Currently only supports filtering
   * executions by a specified `schedule_id`.
   * Format: `schedule_id=<Schedule_ID>`
   */
  filter: string;
  /** Sort by field. */
  orderBy: string;
}

/** Response for listing scheduled notebook executions */
export interface ListExecutionsResponse {
  /** A list of returned instances. */
  executions: Execution[];
  /**
   * Page token that can be used to continue listing from the last result in the
   * next list call.
   */
  nextPageToken: string;
  /**
   * Executions IDs that could not be reached. For example:
   *
   *     ['projects/{project_id}/location/{location}/executions/imagenet_test1',
   *      'projects/{project_id}/location/{location}/executions/classifier_train1']
   */
  unreachable: string[];
}

/** Request for getting scheduled notebook execution */
export interface GetExecutionRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/executions/{execution_id}`
   */
  name: string;
}

/** Request for deleting a scheduled notebook execution */
export interface DeleteExecutionRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/executions/{execution_id}`
   */
  name: string;
}

/** Request to create notebook execution */
export interface CreateExecutionRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Required. User-defined unique ID of this execution. */
  executionId: string;
  /** Required. The execution to be created. */
  execution: Execution | undefined;
}

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
    endpoint: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    if (message.endpoint !== "") {
      writer.uint32(66).string(message.endpoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.endpoint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    message.endpoint = object.endpoint ?? "";
    return message;
  },
};

function createBaseListInstancesRequest(): ListInstancesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListInstancesRequest: MessageFns<ListInstancesRequest> = {
  encode(message: ListInstancesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstancesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstancesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListInstancesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstancesRequest>): ListInstancesRequest {
    return ListInstancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstancesRequest>): ListInstancesRequest {
    const message = createBaseListInstancesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListInstancesResponse(): ListInstancesResponse {
  return { instances: [], nextPageToken: "", unreachable: [] };
}

export const ListInstancesResponse: MessageFns<ListInstancesResponse> = {
  encode(message: ListInstancesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.instances) {
      Instance.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstancesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instances.push(Instance.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstancesResponse {
    return {
      instances: globalThis.Array.isArray(object?.instances)
        ? object.instances.map((e: any) => Instance.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListInstancesResponse): unknown {
    const obj: any = {};
    if (message.instances?.length) {
      obj.instances = message.instances.map((e) => Instance.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstancesResponse>): ListInstancesResponse {
    return ListInstancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstancesResponse>): ListInstancesResponse {
    const message = createBaseListInstancesResponse();
    message.instances = object.instances?.map((e) => Instance.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetInstanceRequest(): GetInstanceRequest {
  return { name: "" };
}

export const GetInstanceRequest: MessageFns<GetInstanceRequest> = {
  encode(message: GetInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInstanceRequest>): GetInstanceRequest {
    return GetInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInstanceRequest>): GetInstanceRequest {
    const message = createBaseGetInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateInstanceRequest(): CreateInstanceRequest {
  return { parent: "", instanceId: "", instance: undefined };
}

export const CreateInstanceRequest: MessageFns<CreateInstanceRequest> = {
  encode(message: CreateInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    if (message.instance !== undefined) {
      Instance.encode(message.instance, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.instance = Instance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInstanceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
    };
  },

  toJSON(message: CreateInstanceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.instance !== undefined) {
      obj.instance = Instance.toJSON(message.instance);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateInstanceRequest>): CreateInstanceRequest {
    return CreateInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateInstanceRequest>): CreateInstanceRequest {
    const message = createBaseCreateInstanceRequest();
    message.parent = object.parent ?? "";
    message.instanceId = object.instanceId ?? "";
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? Instance.fromPartial(object.instance)
      : undefined;
    return message;
  },
};

function createBaseRegisterInstanceRequest(): RegisterInstanceRequest {
  return { parent: "", instanceId: "" };
}

export const RegisterInstanceRequest: MessageFns<RegisterInstanceRequest> = {
  encode(message: RegisterInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterInstanceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
    };
  },

  toJSON(message: RegisterInstanceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    return obj;
  },

  create(base?: DeepPartial<RegisterInstanceRequest>): RegisterInstanceRequest {
    return RegisterInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegisterInstanceRequest>): RegisterInstanceRequest {
    const message = createBaseRegisterInstanceRequest();
    message.parent = object.parent ?? "";
    message.instanceId = object.instanceId ?? "";
    return message;
  },
};

function createBaseSetInstanceAcceleratorRequest(): SetInstanceAcceleratorRequest {
  return { name: "", type: 0, coreCount: Long.ZERO };
}

export const SetInstanceAcceleratorRequest: MessageFns<SetInstanceAcceleratorRequest> = {
  encode(message: SetInstanceAcceleratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (!message.coreCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.coreCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInstanceAcceleratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInstanceAcceleratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.coreCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInstanceAcceleratorRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? instance_AcceleratorTypeFromJSON(object.type) : 0,
      coreCount: isSet(object.coreCount) ? Long.fromValue(object.coreCount) : Long.ZERO,
    };
  },

  toJSON(message: SetInstanceAcceleratorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = instance_AcceleratorTypeToJSON(message.type);
    }
    if (!message.coreCount.equals(Long.ZERO)) {
      obj.coreCount = (message.coreCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<SetInstanceAcceleratorRequest>): SetInstanceAcceleratorRequest {
    return SetInstanceAcceleratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetInstanceAcceleratorRequest>): SetInstanceAcceleratorRequest {
    const message = createBaseSetInstanceAcceleratorRequest();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.coreCount = (object.coreCount !== undefined && object.coreCount !== null)
      ? Long.fromValue(object.coreCount)
      : Long.ZERO;
    return message;
  },
};

function createBaseSetInstanceMachineTypeRequest(): SetInstanceMachineTypeRequest {
  return { name: "", machineType: "" };
}

export const SetInstanceMachineTypeRequest: MessageFns<SetInstanceMachineTypeRequest> = {
  encode(message: SetInstanceMachineTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.machineType !== "") {
      writer.uint32(18).string(message.machineType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInstanceMachineTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInstanceMachineTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.machineType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInstanceMachineTypeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      machineType: isSet(object.machineType) ? globalThis.String(object.machineType) : "",
    };
  },

  toJSON(message: SetInstanceMachineTypeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.machineType !== "") {
      obj.machineType = message.machineType;
    }
    return obj;
  },

  create(base?: DeepPartial<SetInstanceMachineTypeRequest>): SetInstanceMachineTypeRequest {
    return SetInstanceMachineTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetInstanceMachineTypeRequest>): SetInstanceMachineTypeRequest {
    const message = createBaseSetInstanceMachineTypeRequest();
    message.name = object.name ?? "";
    message.machineType = object.machineType ?? "";
    return message;
  },
};

function createBaseUpdateInstanceConfigRequest(): UpdateInstanceConfigRequest {
  return { name: "", config: undefined };
}

export const UpdateInstanceConfigRequest: MessageFns<UpdateInstanceConfigRequest> = {
  encode(message: UpdateInstanceConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.config !== undefined) {
      InstanceConfig.encode(message.config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInstanceConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInstanceConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = InstanceConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInstanceConfigRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      config: isSet(object.config) ? InstanceConfig.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: UpdateInstanceConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.config !== undefined) {
      obj.config = InstanceConfig.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateInstanceConfigRequest>): UpdateInstanceConfigRequest {
    return UpdateInstanceConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateInstanceConfigRequest>): UpdateInstanceConfigRequest {
    const message = createBaseUpdateInstanceConfigRequest();
    message.name = object.name ?? "";
    message.config = (object.config !== undefined && object.config !== null)
      ? InstanceConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseSetInstanceLabelsRequest(): SetInstanceLabelsRequest {
  return { name: "", labels: {} };
}

export const SetInstanceLabelsRequest: MessageFns<SetInstanceLabelsRequest> = {
  encode(message: SetInstanceLabelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      SetInstanceLabelsRequest_LabelsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInstanceLabelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInstanceLabelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = SetInstanceLabelsRequest_LabelsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.labels[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInstanceLabelsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SetInstanceLabelsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<SetInstanceLabelsRequest>): SetInstanceLabelsRequest {
    return SetInstanceLabelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetInstanceLabelsRequest>): SetInstanceLabelsRequest {
    const message = createBaseSetInstanceLabelsRequest();
    message.name = object.name ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSetInstanceLabelsRequest_LabelsEntry(): SetInstanceLabelsRequest_LabelsEntry {
  return { key: "", value: "" };
}

export const SetInstanceLabelsRequest_LabelsEntry: MessageFns<SetInstanceLabelsRequest_LabelsEntry> = {
  encode(message: SetInstanceLabelsRequest_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInstanceLabelsRequest_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInstanceLabelsRequest_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInstanceLabelsRequest_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SetInstanceLabelsRequest_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SetInstanceLabelsRequest_LabelsEntry>): SetInstanceLabelsRequest_LabelsEntry {
    return SetInstanceLabelsRequest_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetInstanceLabelsRequest_LabelsEntry>): SetInstanceLabelsRequest_LabelsEntry {
    const message = createBaseSetInstanceLabelsRequest_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUpdateInstanceMetadataItemsRequest(): UpdateInstanceMetadataItemsRequest {
  return { name: "", items: {} };
}

export const UpdateInstanceMetadataItemsRequest: MessageFns<UpdateInstanceMetadataItemsRequest> = {
  encode(message: UpdateInstanceMetadataItemsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.items).forEach(([key, value]) => {
      UpdateInstanceMetadataItemsRequest_ItemsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInstanceMetadataItemsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInstanceMetadataItemsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = UpdateInstanceMetadataItemsRequest_ItemsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.items[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInstanceMetadataItemsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      items: isObject(object.items)
        ? Object.entries(object.items).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UpdateInstanceMetadataItemsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.items) {
      const entries = Object.entries(message.items);
      if (entries.length > 0) {
        obj.items = {};
        entries.forEach(([k, v]) => {
          obj.items[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateInstanceMetadataItemsRequest>): UpdateInstanceMetadataItemsRequest {
    return UpdateInstanceMetadataItemsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateInstanceMetadataItemsRequest>): UpdateInstanceMetadataItemsRequest {
    const message = createBaseUpdateInstanceMetadataItemsRequest();
    message.name = object.name ?? "";
    message.items = Object.entries(object.items ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseUpdateInstanceMetadataItemsRequest_ItemsEntry(): UpdateInstanceMetadataItemsRequest_ItemsEntry {
  return { key: "", value: "" };
}

export const UpdateInstanceMetadataItemsRequest_ItemsEntry: MessageFns<UpdateInstanceMetadataItemsRequest_ItemsEntry> =
  {
    encode(
      message: UpdateInstanceMetadataItemsRequest_ItemsEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateInstanceMetadataItemsRequest_ItemsEntry {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseUpdateInstanceMetadataItemsRequest_ItemsEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.value = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): UpdateInstanceMetadataItemsRequest_ItemsEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value) ? globalThis.String(object.value) : "",
      };
    },

    toJSON(message: UpdateInstanceMetadataItemsRequest_ItemsEntry): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== "") {
        obj.value = message.value;
      }
      return obj;
    },

    create(
      base?: DeepPartial<UpdateInstanceMetadataItemsRequest_ItemsEntry>,
    ): UpdateInstanceMetadataItemsRequest_ItemsEntry {
      return UpdateInstanceMetadataItemsRequest_ItemsEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<UpdateInstanceMetadataItemsRequest_ItemsEntry>,
    ): UpdateInstanceMetadataItemsRequest_ItemsEntry {
      const message = createBaseUpdateInstanceMetadataItemsRequest_ItemsEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    },
  };

function createBaseUpdateInstanceMetadataItemsResponse(): UpdateInstanceMetadataItemsResponse {
  return { items: {} };
}

export const UpdateInstanceMetadataItemsResponse: MessageFns<UpdateInstanceMetadataItemsResponse> = {
  encode(message: UpdateInstanceMetadataItemsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.items).forEach(([key, value]) => {
      UpdateInstanceMetadataItemsResponse_ItemsEntry.encode({ key: key as any, value }, writer.uint32(10).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInstanceMetadataItemsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInstanceMetadataItemsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = UpdateInstanceMetadataItemsResponse_ItemsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.items[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInstanceMetadataItemsResponse {
    return {
      items: isObject(object.items)
        ? Object.entries(object.items).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UpdateInstanceMetadataItemsResponse): unknown {
    const obj: any = {};
    if (message.items) {
      const entries = Object.entries(message.items);
      if (entries.length > 0) {
        obj.items = {};
        entries.forEach(([k, v]) => {
          obj.items[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateInstanceMetadataItemsResponse>): UpdateInstanceMetadataItemsResponse {
    return UpdateInstanceMetadataItemsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateInstanceMetadataItemsResponse>): UpdateInstanceMetadataItemsResponse {
    const message = createBaseUpdateInstanceMetadataItemsResponse();
    message.items = Object.entries(object.items ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseUpdateInstanceMetadataItemsResponse_ItemsEntry(): UpdateInstanceMetadataItemsResponse_ItemsEntry {
  return { key: "", value: "" };
}

export const UpdateInstanceMetadataItemsResponse_ItemsEntry: MessageFns<
  UpdateInstanceMetadataItemsResponse_ItemsEntry
> = {
  encode(
    message: UpdateInstanceMetadataItemsResponse_ItemsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInstanceMetadataItemsResponse_ItemsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInstanceMetadataItemsResponse_ItemsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInstanceMetadataItemsResponse_ItemsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: UpdateInstanceMetadataItemsResponse_ItemsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<UpdateInstanceMetadataItemsResponse_ItemsEntry>,
  ): UpdateInstanceMetadataItemsResponse_ItemsEntry {
    return UpdateInstanceMetadataItemsResponse_ItemsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateInstanceMetadataItemsResponse_ItemsEntry>,
  ): UpdateInstanceMetadataItemsResponse_ItemsEntry {
    const message = createBaseUpdateInstanceMetadataItemsResponse_ItemsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUpdateShieldedInstanceConfigRequest(): UpdateShieldedInstanceConfigRequest {
  return { name: "", shieldedInstanceConfig: undefined };
}

export const UpdateShieldedInstanceConfigRequest: MessageFns<UpdateShieldedInstanceConfigRequest> = {
  encode(message: UpdateShieldedInstanceConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.shieldedInstanceConfig !== undefined) {
      Instance_ShieldedInstanceConfig.encode(message.shieldedInstanceConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateShieldedInstanceConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateShieldedInstanceConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.shieldedInstanceConfig = Instance_ShieldedInstanceConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateShieldedInstanceConfigRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      shieldedInstanceConfig: isSet(object.shieldedInstanceConfig)
        ? Instance_ShieldedInstanceConfig.fromJSON(object.shieldedInstanceConfig)
        : undefined,
    };
  },

  toJSON(message: UpdateShieldedInstanceConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.shieldedInstanceConfig !== undefined) {
      obj.shieldedInstanceConfig = Instance_ShieldedInstanceConfig.toJSON(message.shieldedInstanceConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateShieldedInstanceConfigRequest>): UpdateShieldedInstanceConfigRequest {
    return UpdateShieldedInstanceConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateShieldedInstanceConfigRequest>): UpdateShieldedInstanceConfigRequest {
    const message = createBaseUpdateShieldedInstanceConfigRequest();
    message.name = object.name ?? "";
    message.shieldedInstanceConfig =
      (object.shieldedInstanceConfig !== undefined && object.shieldedInstanceConfig !== null)
        ? Instance_ShieldedInstanceConfig.fromPartial(object.shieldedInstanceConfig)
        : undefined;
    return message;
  },
};

function createBaseDeleteInstanceRequest(): DeleteInstanceRequest {
  return { name: "" };
}

export const DeleteInstanceRequest: MessageFns<DeleteInstanceRequest> = {
  encode(message: DeleteInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteInstanceRequest>): DeleteInstanceRequest {
    return DeleteInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteInstanceRequest>): DeleteInstanceRequest {
    const message = createBaseDeleteInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStartInstanceRequest(): StartInstanceRequest {
  return { name: "" };
}

export const StartInstanceRequest: MessageFns<StartInstanceRequest> = {
  encode(message: StartInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StartInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StartInstanceRequest>): StartInstanceRequest {
    return StartInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartInstanceRequest>): StartInstanceRequest {
    const message = createBaseStartInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStopInstanceRequest(): StopInstanceRequest {
  return { name: "" };
}

export const StopInstanceRequest: MessageFns<StopInstanceRequest> = {
  encode(message: StopInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StopInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StopInstanceRequest>): StopInstanceRequest {
    return StopInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopInstanceRequest>): StopInstanceRequest {
    const message = createBaseStopInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResetInstanceRequest(): ResetInstanceRequest {
  return { name: "" };
}

export const ResetInstanceRequest: MessageFns<ResetInstanceRequest> = {
  encode(message: ResetInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ResetInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetInstanceRequest>): ResetInstanceRequest {
    return ResetInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetInstanceRequest>): ResetInstanceRequest {
    const message = createBaseResetInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseReportInstanceInfoRequest(): ReportInstanceInfoRequest {
  return { name: "", vmId: "", metadata: {} };
}

export const ReportInstanceInfoRequest: MessageFns<ReportInstanceInfoRequest> = {
  encode(message: ReportInstanceInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.vmId !== "") {
      writer.uint32(18).string(message.vmId);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      ReportInstanceInfoRequest_MetadataEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportInstanceInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportInstanceInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vmId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = ReportInstanceInfoRequest_MetadataEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.metadata[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportInstanceInfoRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      vmId: isSet(object.vmId) ? globalThis.String(object.vmId) : "",
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ReportInstanceInfoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.vmId !== "") {
      obj.vmId = message.vmId;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ReportInstanceInfoRequest>): ReportInstanceInfoRequest {
    return ReportInstanceInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportInstanceInfoRequest>): ReportInstanceInfoRequest {
    const message = createBaseReportInstanceInfoRequest();
    message.name = object.name ?? "";
    message.vmId = object.vmId ?? "";
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseReportInstanceInfoRequest_MetadataEntry(): ReportInstanceInfoRequest_MetadataEntry {
  return { key: "", value: "" };
}

export const ReportInstanceInfoRequest_MetadataEntry: MessageFns<ReportInstanceInfoRequest_MetadataEntry> = {
  encode(message: ReportInstanceInfoRequest_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportInstanceInfoRequest_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportInstanceInfoRequest_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportInstanceInfoRequest_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ReportInstanceInfoRequest_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportInstanceInfoRequest_MetadataEntry>): ReportInstanceInfoRequest_MetadataEntry {
    return ReportInstanceInfoRequest_MetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportInstanceInfoRequest_MetadataEntry>): ReportInstanceInfoRequest_MetadataEntry {
    const message = createBaseReportInstanceInfoRequest_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseIsInstanceUpgradeableRequest(): IsInstanceUpgradeableRequest {
  return { notebookInstance: "", type: 0 };
}

export const IsInstanceUpgradeableRequest: MessageFns<IsInstanceUpgradeableRequest> = {
  encode(message: IsInstanceUpgradeableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notebookInstance !== "") {
      writer.uint32(10).string(message.notebookInstance);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsInstanceUpgradeableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsInstanceUpgradeableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notebookInstance = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsInstanceUpgradeableRequest {
    return {
      notebookInstance: isSet(object.notebookInstance) ? globalThis.String(object.notebookInstance) : "",
      type: isSet(object.type) ? upgradeTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: IsInstanceUpgradeableRequest): unknown {
    const obj: any = {};
    if (message.notebookInstance !== "") {
      obj.notebookInstance = message.notebookInstance;
    }
    if (message.type !== 0) {
      obj.type = upgradeTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<IsInstanceUpgradeableRequest>): IsInstanceUpgradeableRequest {
    return IsInstanceUpgradeableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsInstanceUpgradeableRequest>): IsInstanceUpgradeableRequest {
    const message = createBaseIsInstanceUpgradeableRequest();
    message.notebookInstance = object.notebookInstance ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseIsInstanceUpgradeableResponse(): IsInstanceUpgradeableResponse {
  return { upgradeable: false, upgradeVersion: "", upgradeInfo: "", upgradeImage: "" };
}

export const IsInstanceUpgradeableResponse: MessageFns<IsInstanceUpgradeableResponse> = {
  encode(message: IsInstanceUpgradeableResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.upgradeable !== false) {
      writer.uint32(8).bool(message.upgradeable);
    }
    if (message.upgradeVersion !== "") {
      writer.uint32(18).string(message.upgradeVersion);
    }
    if (message.upgradeInfo !== "") {
      writer.uint32(26).string(message.upgradeInfo);
    }
    if (message.upgradeImage !== "") {
      writer.uint32(34).string(message.upgradeImage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsInstanceUpgradeableResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsInstanceUpgradeableResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.upgradeable = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.upgradeVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.upgradeInfo = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.upgradeImage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsInstanceUpgradeableResponse {
    return {
      upgradeable: isSet(object.upgradeable) ? globalThis.Boolean(object.upgradeable) : false,
      upgradeVersion: isSet(object.upgradeVersion) ? globalThis.String(object.upgradeVersion) : "",
      upgradeInfo: isSet(object.upgradeInfo) ? globalThis.String(object.upgradeInfo) : "",
      upgradeImage: isSet(object.upgradeImage) ? globalThis.String(object.upgradeImage) : "",
    };
  },

  toJSON(message: IsInstanceUpgradeableResponse): unknown {
    const obj: any = {};
    if (message.upgradeable !== false) {
      obj.upgradeable = message.upgradeable;
    }
    if (message.upgradeVersion !== "") {
      obj.upgradeVersion = message.upgradeVersion;
    }
    if (message.upgradeInfo !== "") {
      obj.upgradeInfo = message.upgradeInfo;
    }
    if (message.upgradeImage !== "") {
      obj.upgradeImage = message.upgradeImage;
    }
    return obj;
  },

  create(base?: DeepPartial<IsInstanceUpgradeableResponse>): IsInstanceUpgradeableResponse {
    return IsInstanceUpgradeableResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsInstanceUpgradeableResponse>): IsInstanceUpgradeableResponse {
    const message = createBaseIsInstanceUpgradeableResponse();
    message.upgradeable = object.upgradeable ?? false;
    message.upgradeVersion = object.upgradeVersion ?? "";
    message.upgradeInfo = object.upgradeInfo ?? "";
    message.upgradeImage = object.upgradeImage ?? "";
    return message;
  },
};

function createBaseGetInstanceHealthRequest(): GetInstanceHealthRequest {
  return { name: "" };
}

export const GetInstanceHealthRequest: MessageFns<GetInstanceHealthRequest> = {
  encode(message: GetInstanceHealthRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstanceHealthRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstanceHealthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstanceHealthRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInstanceHealthRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInstanceHealthRequest>): GetInstanceHealthRequest {
    return GetInstanceHealthRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInstanceHealthRequest>): GetInstanceHealthRequest {
    const message = createBaseGetInstanceHealthRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetInstanceHealthResponse(): GetInstanceHealthResponse {
  return { healthState: 0, healthInfo: {} };
}

export const GetInstanceHealthResponse: MessageFns<GetInstanceHealthResponse> = {
  encode(message: GetInstanceHealthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.healthState !== 0) {
      writer.uint32(8).int32(message.healthState);
    }
    Object.entries(message.healthInfo).forEach(([key, value]) => {
      GetInstanceHealthResponse_HealthInfoEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstanceHealthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstanceHealthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.healthState = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = GetInstanceHealthResponse_HealthInfoEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.healthInfo[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstanceHealthResponse {
    return {
      healthState: isSet(object.healthState) ? getInstanceHealthResponse_HealthStateFromJSON(object.healthState) : 0,
      healthInfo: isObject(object.healthInfo)
        ? Object.entries(object.healthInfo).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: GetInstanceHealthResponse): unknown {
    const obj: any = {};
    if (message.healthState !== 0) {
      obj.healthState = getInstanceHealthResponse_HealthStateToJSON(message.healthState);
    }
    if (message.healthInfo) {
      const entries = Object.entries(message.healthInfo);
      if (entries.length > 0) {
        obj.healthInfo = {};
        entries.forEach(([k, v]) => {
          obj.healthInfo[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<GetInstanceHealthResponse>): GetInstanceHealthResponse {
    return GetInstanceHealthResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInstanceHealthResponse>): GetInstanceHealthResponse {
    const message = createBaseGetInstanceHealthResponse();
    message.healthState = object.healthState ?? 0;
    message.healthInfo = Object.entries(object.healthInfo ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseGetInstanceHealthResponse_HealthInfoEntry(): GetInstanceHealthResponse_HealthInfoEntry {
  return { key: "", value: "" };
}

export const GetInstanceHealthResponse_HealthInfoEntry: MessageFns<GetInstanceHealthResponse_HealthInfoEntry> = {
  encode(message: GetInstanceHealthResponse_HealthInfoEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstanceHealthResponse_HealthInfoEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstanceHealthResponse_HealthInfoEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstanceHealthResponse_HealthInfoEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: GetInstanceHealthResponse_HealthInfoEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInstanceHealthResponse_HealthInfoEntry>): GetInstanceHealthResponse_HealthInfoEntry {
    return GetInstanceHealthResponse_HealthInfoEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetInstanceHealthResponse_HealthInfoEntry>,
  ): GetInstanceHealthResponse_HealthInfoEntry {
    const message = createBaseGetInstanceHealthResponse_HealthInfoEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUpgradeInstanceRequest(): UpgradeInstanceRequest {
  return { name: "", type: 0 };
}

export const UpgradeInstanceRequest: MessageFns<UpgradeInstanceRequest> = {
  encode(message: UpgradeInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeInstanceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? upgradeTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: UpgradeInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = upgradeTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<UpgradeInstanceRequest>): UpgradeInstanceRequest {
    return UpgradeInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpgradeInstanceRequest>): UpgradeInstanceRequest {
    const message = createBaseUpgradeInstanceRequest();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRollbackInstanceRequest(): RollbackInstanceRequest {
  return { name: "", targetSnapshot: "" };
}

export const RollbackInstanceRequest: MessageFns<RollbackInstanceRequest> = {
  encode(message: RollbackInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.targetSnapshot !== "") {
      writer.uint32(18).string(message.targetSnapshot);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollbackInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollbackInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetSnapshot = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollbackInstanceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      targetSnapshot: isSet(object.targetSnapshot) ? globalThis.String(object.targetSnapshot) : "",
    };
  },

  toJSON(message: RollbackInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.targetSnapshot !== "") {
      obj.targetSnapshot = message.targetSnapshot;
    }
    return obj;
  },

  create(base?: DeepPartial<RollbackInstanceRequest>): RollbackInstanceRequest {
    return RollbackInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RollbackInstanceRequest>): RollbackInstanceRequest {
    const message = createBaseRollbackInstanceRequest();
    message.name = object.name ?? "";
    message.targetSnapshot = object.targetSnapshot ?? "";
    return message;
  },
};

function createBaseUpgradeInstanceInternalRequest(): UpgradeInstanceInternalRequest {
  return { name: "", vmId: "", type: 0 };
}

export const UpgradeInstanceInternalRequest: MessageFns<UpgradeInstanceInternalRequest> = {
  encode(message: UpgradeInstanceInternalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.vmId !== "") {
      writer.uint32(18).string(message.vmId);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeInstanceInternalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeInstanceInternalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vmId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeInstanceInternalRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      vmId: isSet(object.vmId) ? globalThis.String(object.vmId) : "",
      type: isSet(object.type) ? upgradeTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: UpgradeInstanceInternalRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.vmId !== "") {
      obj.vmId = message.vmId;
    }
    if (message.type !== 0) {
      obj.type = upgradeTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<UpgradeInstanceInternalRequest>): UpgradeInstanceInternalRequest {
    return UpgradeInstanceInternalRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpgradeInstanceInternalRequest>): UpgradeInstanceInternalRequest {
    const message = createBaseUpgradeInstanceInternalRequest();
    message.name = object.name ?? "";
    message.vmId = object.vmId ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseListEnvironmentsRequest(): ListEnvironmentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEnvironmentsRequest: MessageFns<ListEnvironmentsRequest> = {
  encode(message: ListEnvironmentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnvironmentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnvironmentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnvironmentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEnvironmentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnvironmentsRequest>): ListEnvironmentsRequest {
    return ListEnvironmentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnvironmentsRequest>): ListEnvironmentsRequest {
    const message = createBaseListEnvironmentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseDiagnoseInstanceRequest(): DiagnoseInstanceRequest {
  return { name: "", diagnosticConfig: undefined };
}

export const DiagnoseInstanceRequest: MessageFns<DiagnoseInstanceRequest> = {
  encode(message: DiagnoseInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.diagnosticConfig !== undefined) {
      DiagnosticConfig.encode(message.diagnosticConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiagnoseInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiagnoseInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.diagnosticConfig = DiagnosticConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiagnoseInstanceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      diagnosticConfig: isSet(object.diagnosticConfig) ? DiagnosticConfig.fromJSON(object.diagnosticConfig) : undefined,
    };
  },

  toJSON(message: DiagnoseInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.diagnosticConfig !== undefined) {
      obj.diagnosticConfig = DiagnosticConfig.toJSON(message.diagnosticConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<DiagnoseInstanceRequest>): DiagnoseInstanceRequest {
    return DiagnoseInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiagnoseInstanceRequest>): DiagnoseInstanceRequest {
    const message = createBaseDiagnoseInstanceRequest();
    message.name = object.name ?? "";
    message.diagnosticConfig = (object.diagnosticConfig !== undefined && object.diagnosticConfig !== null)
      ? DiagnosticConfig.fromPartial(object.diagnosticConfig)
      : undefined;
    return message;
  },
};

function createBaseListEnvironmentsResponse(): ListEnvironmentsResponse {
  return { environments: [], nextPageToken: "", unreachable: [] };
}

export const ListEnvironmentsResponse: MessageFns<ListEnvironmentsResponse> = {
  encode(message: ListEnvironmentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.environments) {
      Environment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnvironmentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnvironmentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.environments.push(Environment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnvironmentsResponse {
    return {
      environments: globalThis.Array.isArray(object?.environments)
        ? object.environments.map((e: any) => Environment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListEnvironmentsResponse): unknown {
    const obj: any = {};
    if (message.environments?.length) {
      obj.environments = message.environments.map((e) => Environment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnvironmentsResponse>): ListEnvironmentsResponse {
    return ListEnvironmentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnvironmentsResponse>): ListEnvironmentsResponse {
    const message = createBaseListEnvironmentsResponse();
    message.environments = object.environments?.map((e) => Environment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetEnvironmentRequest(): GetEnvironmentRequest {
  return { name: "" };
}

export const GetEnvironmentRequest: MessageFns<GetEnvironmentRequest> = {
  encode(message: GetEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEnvironmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEnvironmentRequest>): GetEnvironmentRequest {
    return GetEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEnvironmentRequest>): GetEnvironmentRequest {
    const message = createBaseGetEnvironmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateEnvironmentRequest(): CreateEnvironmentRequest {
  return { parent: "", environmentId: "", environment: undefined };
}

export const CreateEnvironmentRequest: MessageFns<CreateEnvironmentRequest> = {
  encode(message: CreateEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.environmentId !== "") {
      writer.uint32(18).string(message.environmentId);
    }
    if (message.environment !== undefined) {
      Environment.encode(message.environment, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.environment = Environment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEnvironmentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      environment: isSet(object.environment) ? Environment.fromJSON(object.environment) : undefined,
    };
  },

  toJSON(message: CreateEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.environment !== undefined) {
      obj.environment = Environment.toJSON(message.environment);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEnvironmentRequest>): CreateEnvironmentRequest {
    return CreateEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEnvironmentRequest>): CreateEnvironmentRequest {
    const message = createBaseCreateEnvironmentRequest();
    message.parent = object.parent ?? "";
    message.environmentId = object.environmentId ?? "";
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? Environment.fromPartial(object.environment)
      : undefined;
    return message;
  },
};

function createBaseDeleteEnvironmentRequest(): DeleteEnvironmentRequest {
  return { name: "" };
}

export const DeleteEnvironmentRequest: MessageFns<DeleteEnvironmentRequest> = {
  encode(message: DeleteEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEnvironmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEnvironmentRequest>): DeleteEnvironmentRequest {
    return DeleteEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEnvironmentRequest>): DeleteEnvironmentRequest {
    const message = createBaseDeleteEnvironmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSchedulesRequest(): ListSchedulesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListSchedulesRequest: MessageFns<ListSchedulesRequest> = {
  encode(message: ListSchedulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSchedulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSchedulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSchedulesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListSchedulesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSchedulesRequest>): ListSchedulesRequest {
    return ListSchedulesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSchedulesRequest>): ListSchedulesRequest {
    const message = createBaseListSchedulesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListSchedulesResponse(): ListSchedulesResponse {
  return { schedules: [], nextPageToken: "", unreachable: [] };
}

export const ListSchedulesResponse: MessageFns<ListSchedulesResponse> = {
  encode(message: ListSchedulesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.schedules) {
      Schedule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSchedulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSchedulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schedules.push(Schedule.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSchedulesResponse {
    return {
      schedules: globalThis.Array.isArray(object?.schedules)
        ? object.schedules.map((e: any) => Schedule.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListSchedulesResponse): unknown {
    const obj: any = {};
    if (message.schedules?.length) {
      obj.schedules = message.schedules.map((e) => Schedule.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSchedulesResponse>): ListSchedulesResponse {
    return ListSchedulesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSchedulesResponse>): ListSchedulesResponse {
    const message = createBaseListSchedulesResponse();
    message.schedules = object.schedules?.map((e) => Schedule.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetScheduleRequest(): GetScheduleRequest {
  return { name: "" };
}

export const GetScheduleRequest: MessageFns<GetScheduleRequest> = {
  encode(message: GetScheduleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScheduleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScheduleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScheduleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetScheduleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetScheduleRequest>): GetScheduleRequest {
    return GetScheduleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetScheduleRequest>): GetScheduleRequest {
    const message = createBaseGetScheduleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteScheduleRequest(): DeleteScheduleRequest {
  return { name: "" };
}

export const DeleteScheduleRequest: MessageFns<DeleteScheduleRequest> = {
  encode(message: DeleteScheduleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteScheduleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteScheduleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteScheduleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteScheduleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteScheduleRequest>): DeleteScheduleRequest {
    return DeleteScheduleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteScheduleRequest>): DeleteScheduleRequest {
    const message = createBaseDeleteScheduleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateScheduleRequest(): CreateScheduleRequest {
  return { parent: "", scheduleId: "", schedule: undefined };
}

export const CreateScheduleRequest: MessageFns<CreateScheduleRequest> = {
  encode(message: CreateScheduleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.scheduleId !== "") {
      writer.uint32(18).string(message.scheduleId);
    }
    if (message.schedule !== undefined) {
      Schedule.encode(message.schedule, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateScheduleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateScheduleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scheduleId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.schedule = Schedule.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateScheduleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      scheduleId: isSet(object.scheduleId) ? globalThis.String(object.scheduleId) : "",
      schedule: isSet(object.schedule) ? Schedule.fromJSON(object.schedule) : undefined,
    };
  },

  toJSON(message: CreateScheduleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.scheduleId !== "") {
      obj.scheduleId = message.scheduleId;
    }
    if (message.schedule !== undefined) {
      obj.schedule = Schedule.toJSON(message.schedule);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateScheduleRequest>): CreateScheduleRequest {
    return CreateScheduleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateScheduleRequest>): CreateScheduleRequest {
    const message = createBaseCreateScheduleRequest();
    message.parent = object.parent ?? "";
    message.scheduleId = object.scheduleId ?? "";
    message.schedule = (object.schedule !== undefined && object.schedule !== null)
      ? Schedule.fromPartial(object.schedule)
      : undefined;
    return message;
  },
};

function createBaseTriggerScheduleRequest(): TriggerScheduleRequest {
  return { name: "" };
}

export const TriggerScheduleRequest: MessageFns<TriggerScheduleRequest> = {
  encode(message: TriggerScheduleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TriggerScheduleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerScheduleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerScheduleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: TriggerScheduleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<TriggerScheduleRequest>): TriggerScheduleRequest {
    return TriggerScheduleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TriggerScheduleRequest>): TriggerScheduleRequest {
    const message = createBaseTriggerScheduleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListExecutionsRequest(): ListExecutionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListExecutionsRequest: MessageFns<ListExecutionsRequest> = {
  encode(message: ListExecutionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExecutionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExecutionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExecutionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListExecutionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExecutionsRequest>): ListExecutionsRequest {
    return ListExecutionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExecutionsRequest>): ListExecutionsRequest {
    const message = createBaseListExecutionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListExecutionsResponse(): ListExecutionsResponse {
  return { executions: [], nextPageToken: "", unreachable: [] };
}

export const ListExecutionsResponse: MessageFns<ListExecutionsResponse> = {
  encode(message: ListExecutionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.executions) {
      Execution.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExecutionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExecutionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.executions.push(Execution.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExecutionsResponse {
    return {
      executions: globalThis.Array.isArray(object?.executions)
        ? object.executions.map((e: any) => Execution.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListExecutionsResponse): unknown {
    const obj: any = {};
    if (message.executions?.length) {
      obj.executions = message.executions.map((e) => Execution.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExecutionsResponse>): ListExecutionsResponse {
    return ListExecutionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExecutionsResponse>): ListExecutionsResponse {
    const message = createBaseListExecutionsResponse();
    message.executions = object.executions?.map((e) => Execution.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetExecutionRequest(): GetExecutionRequest {
  return { name: "" };
}

export const GetExecutionRequest: MessageFns<GetExecutionRequest> = {
  encode(message: GetExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExecutionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetExecutionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetExecutionRequest>): GetExecutionRequest {
    return GetExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExecutionRequest>): GetExecutionRequest {
    const message = createBaseGetExecutionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteExecutionRequest(): DeleteExecutionRequest {
  return { name: "" };
}

export const DeleteExecutionRequest: MessageFns<DeleteExecutionRequest> = {
  encode(message: DeleteExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteExecutionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteExecutionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteExecutionRequest>): DeleteExecutionRequest {
    return DeleteExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteExecutionRequest>): DeleteExecutionRequest {
    const message = createBaseDeleteExecutionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateExecutionRequest(): CreateExecutionRequest {
  return { parent: "", executionId: "", execution: undefined };
}

export const CreateExecutionRequest: MessageFns<CreateExecutionRequest> = {
  encode(message: CreateExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.executionId !== "") {
      writer.uint32(18).string(message.executionId);
    }
    if (message.execution !== undefined) {
      Execution.encode(message.execution, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateExecutionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateExecutionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.executionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.execution = Execution.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateExecutionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      executionId: isSet(object.executionId) ? globalThis.String(object.executionId) : "",
      execution: isSet(object.execution) ? Execution.fromJSON(object.execution) : undefined,
    };
  },

  toJSON(message: CreateExecutionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.executionId !== "") {
      obj.executionId = message.executionId;
    }
    if (message.execution !== undefined) {
      obj.execution = Execution.toJSON(message.execution);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateExecutionRequest>): CreateExecutionRequest {
    return CreateExecutionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateExecutionRequest>): CreateExecutionRequest {
    const message = createBaseCreateExecutionRequest();
    message.parent = object.parent ?? "";
    message.executionId = object.executionId ?? "";
    message.execution = (object.execution !== undefined && object.execution !== null)
      ? Execution.fromPartial(object.execution)
      : undefined;
    return message;
  },
};

/** API v1 service for Cloud AI Platform Notebooks. */
export type NotebookServiceDefinition = typeof NotebookServiceDefinition;
export const NotebookServiceDefinition = {
  name: "NotebookService",
  fullName: "google.cloud.notebooks.v1.NotebookService",
  methods: {
    /** Lists instances in a given project and location. */
    listInstances: {
      name: "ListInstances",
      requestType: ListInstancesRequest,
      requestStream: false,
      responseType: ListInstancesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Instance. */
    getInstance: {
      name: "GetInstance",
      requestType: GetInstanceRequest,
      requestStream: false,
      responseType: Instance,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Instance in a given project and location. */
    createInstance: {
      name: "CreateInstance",
      requestType: CreateInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              44,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              8,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Registers an existing legacy notebook instance to the Notebooks API server.
     * Legacy instances are instances created with the legacy Compute Engine
     * calls. They are not manageable by the Notebooks API out of the box. This
     * call makes these instances manageable by the Notebooks API.
     */
    registerInstance: {
      name: "RegisterInstance",
      requestType: RegisterInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              58,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
            ]),
          ],
        },
      },
    },
    /** Updates the guest accelerators of a single Instance. */
    setInstanceAccelerator: {
      name: "SetInstanceAccelerator",
      requestType: SetInstanceAcceleratorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              50,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              65,
              99,
              99,
              101,
              108,
              101,
              114,
              97,
              116,
              111,
              114,
            ]),
          ],
        },
      },
    },
    /** Updates the machine type of a single Instance. */
    setInstanceMachineType: {
      name: "SetInstanceMachineType",
      requestType: SetInstanceMachineTypeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              50,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              84,
              121,
              112,
              101,
            ]),
          ],
        },
      },
    },
    /** Update Notebook Instance configurations. */
    updateInstanceConfig: {
      name: "UpdateInstanceConfig",
      requestType: UpdateInstanceConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              50,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              100,
              97,
              116,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    /** Updates the Shielded instance configuration of a single Instance. */
    updateShieldedInstanceConfig: {
      name: "UpdateShieldedInstanceConfig",
      requestType: UpdateShieldedInstanceConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              1,
              42,
              50,
              74,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              100,
              97,
              116,
              101,
              83,
              104,
              105,
              101,
              108,
              100,
              101,
              100,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              67,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    /** Replaces all the labels of an Instance. */
    setInstanceLabels: {
      name: "SetInstanceLabels",
      requestType: SetInstanceLabelsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              50,
              55,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              76,
              97,
              98,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Add/update metadata items for an instance. */
    updateInstanceMetadataItems: {
      name: "UpdateInstanceMetadataItems",
      requestType: UpdateInstanceMetadataItemsRequest,
      requestStream: false,
      responseType: UpdateInstanceMetadataItemsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              70,
              58,
              1,
              42,
              50,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              100,
              97,
              116,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              73,
              116,
              101,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Instance. */
    deleteInstance: {
      name: "DeleteInstance",
      requestType: DeleteInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              42,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Starts a notebook instance. */
    startInstance: {
      name: "StartInstance",
      requestType: StartInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Stops a notebook instance. */
    stopInstance: {
      name: "StopInstance",
      requestType: StopInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              111,
              112,
            ]),
          ],
        },
      },
    },
    /** Resets a notebook instance. */
    resetInstance: {
      name: "ResetInstance",
      requestType: ResetInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Allows notebook instances to
     * report their latest instance information to the Notebooks
     * API server. The server will merge the reported information to
     * the instance metadata store. Do not use this method directly.
     */
    reportInstanceInfo: {
      name: "ReportInstanceInfo",
      requestType: ReportInstanceInfoRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Check if a notebook instance is upgradable. */
    isInstanceUpgradeable: {
      name: "IsInstanceUpgradeable",
      requestType: IsInstanceUpgradeableRequest,
      requestStream: false,
      responseType: IsInstanceUpgradeableResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              74,
              18,
              72,
              47,
              118,
              49,
              47,
              123,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              105,
              115,
              85,
              112,
              103,
              114,
              97,
              100,
              101,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /** Check if a notebook instance is healthy. */
    getInstanceHealth: {
      name: "GetInstanceHealth",
      requestType: GetInstanceHealthRequest,
      requestStream: false,
      responseType: GetInstanceHealthResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              72,
              101,
              97,
              108,
              116,
              104,
            ]),
          ],
        },
      },
    },
    /** Upgrades a notebook instance to the latest version. */
    upgradeInstance: {
      name: "UpgradeInstance",
      requestType: UpgradeInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              103,
              114,
              97,
              100,
              101,
            ]),
          ],
        },
      },
    },
    /** Rollbacks a notebook instance to the previous version. */
    rollbackInstance: {
      name: "RollbackInstance",
      requestType: RollbackInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              111,
              108,
              108,
              98,
              97,
              99,
              107,
            ]),
          ],
        },
      },
    },
    /** Creates a Diagnostic File and runs Diagnostic Tool given an Instance. */
    diagnoseInstance: {
      name: "DiagnoseInstance",
      requestType: DiagnoseInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              22,
              110,
              97,
              109,
              101,
              44,
              100,
              105,
              97,
              103,
              110,
              111,
              115,
              116,
              105,
              99,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              100,
              105,
              97,
              103,
              110,
              111,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Allows notebook instances to
     * call this endpoint to upgrade themselves. Do not use this method directly.
     */
    upgradeInstanceInternal: {
      name: "UpgradeInstanceInternal",
      requestType: UpgradeInstanceInternalRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              103,
              114,
              97,
              100,
              101,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
            ]),
          ],
        },
      },
    },
    /** Lists environments in a project. */
    listEnvironments: {
      name: "ListEnvironments",
      requestType: ListEnvironmentsRequest,
      requestStream: false,
      responseType: ListEnvironmentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Environment. */
    getEnvironment: {
      name: "GetEnvironment",
      requestType: GetEnvironmentRequest,
      requestStream: false,
      responseType: Environment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Environment. */
    createEnvironment: {
      name: "CreateEnvironment",
      requestType: CreateEnvironmentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              69,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              44,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              11,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Environment. */
    deleteEnvironment: {
      name: "DeleteEnvironment",
      requestType: DeleteEnvironmentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists schedules in a given project and location. */
    listSchedules: {
      name: "ListSchedules",
      requestType: ListSchedulesRequest,
      requestStream: false,
      responseType: ListSchedulesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of schedule */
    getSchedule: {
      name: "GetSchedule",
      requestType: GetScheduleRequest,
      requestStream: false,
      responseType: Schedule,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes schedule and all underlying jobs */
    deleteSchedule: {
      name: "DeleteSchedule",
      requestType: DeleteScheduleRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              42,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Scheduled Notebook in a given project and location. */
    createSchedule: {
      name: "CreateSchedule",
      requestType: CreateScheduleRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              83,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              44,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              8,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Triggers execution of an existing schedule. */
    triggerSchedule: {
      name: "TriggerSchedule",
      requestType: TriggerScheduleRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              83,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              115,
              47,
              42,
              125,
              58,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
            ]),
          ],
        },
      },
    },
    /** Lists executions in a given project and location */
    listExecutions: {
      name: "ListExecutions",
      requestType: ListExecutionsRequest,
      requestStream: false,
      responseType: ListExecutionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of executions */
    getExecution: {
      name: "GetExecution",
      requestType: GetExecutionRequest,
      requestStream: false,
      responseType: Execution,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes execution */
    deleteExecution: {
      name: "DeleteExecution",
      requestType: DeleteExecutionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Execution in a given project and location. */
    createExecution: {
      name: "CreateExecution",
      requestType: CreateExecutionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              30,
              10,
              9,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              44,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              9,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface NotebookServiceImplementation<CallContextExt = {}> {
  /** Lists instances in a given project and location. */
  listInstances(
    request: ListInstancesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInstancesResponse>>;
  /** Gets details of a single Instance. */
  getInstance(request: GetInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Instance>>;
  /** Creates a new Instance in a given project and location. */
  createInstance(
    request: CreateInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Registers an existing legacy notebook instance to the Notebooks API server.
   * Legacy instances are instances created with the legacy Compute Engine
   * calls. They are not manageable by the Notebooks API out of the box. This
   * call makes these instances manageable by the Notebooks API.
   */
  registerInstance(
    request: RegisterInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the guest accelerators of a single Instance. */
  setInstanceAccelerator(
    request: SetInstanceAcceleratorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the machine type of a single Instance. */
  setInstanceMachineType(
    request: SetInstanceMachineTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Update Notebook Instance configurations. */
  updateInstanceConfig(
    request: UpdateInstanceConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the Shielded instance configuration of a single Instance. */
  updateShieldedInstanceConfig(
    request: UpdateShieldedInstanceConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Replaces all the labels of an Instance. */
  setInstanceLabels(
    request: SetInstanceLabelsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Add/update metadata items for an instance. */
  updateInstanceMetadataItems(
    request: UpdateInstanceMetadataItemsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateInstanceMetadataItemsResponse>>;
  /** Deletes a single Instance. */
  deleteInstance(
    request: DeleteInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Starts a notebook instance. */
  startInstance(request: StartInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Stops a notebook instance. */
  stopInstance(request: StopInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Resets a notebook instance. */
  resetInstance(request: ResetInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Allows notebook instances to
   * report their latest instance information to the Notebooks
   * API server. The server will merge the reported information to
   * the instance metadata store. Do not use this method directly.
   */
  reportInstanceInfo(
    request: ReportInstanceInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Check if a notebook instance is upgradable. */
  isInstanceUpgradeable(
    request: IsInstanceUpgradeableRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IsInstanceUpgradeableResponse>>;
  /** Check if a notebook instance is healthy. */
  getInstanceHealth(
    request: GetInstanceHealthRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetInstanceHealthResponse>>;
  /** Upgrades a notebook instance to the latest version. */
  upgradeInstance(
    request: UpgradeInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Rollbacks a notebook instance to the previous version. */
  rollbackInstance(
    request: RollbackInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a Diagnostic File and runs Diagnostic Tool given an Instance. */
  diagnoseInstance(
    request: DiagnoseInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Allows notebook instances to
   * call this endpoint to upgrade themselves. Do not use this method directly.
   */
  upgradeInstanceInternal(
    request: UpgradeInstanceInternalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists environments in a project. */
  listEnvironments(
    request: ListEnvironmentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEnvironmentsResponse>>;
  /** Gets details of a single Environment. */
  getEnvironment(
    request: GetEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Environment>>;
  /** Creates a new Environment. */
  createEnvironment(
    request: CreateEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Environment. */
  deleteEnvironment(
    request: DeleteEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists schedules in a given project and location. */
  listSchedules(
    request: ListSchedulesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSchedulesResponse>>;
  /** Gets details of schedule */
  getSchedule(request: GetScheduleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Schedule>>;
  /** Deletes schedule and all underlying jobs */
  deleteSchedule(
    request: DeleteScheduleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a new Scheduled Notebook in a given project and location. */
  createSchedule(
    request: CreateScheduleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Triggers execution of an existing schedule. */
  triggerSchedule(
    request: TriggerScheduleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists executions in a given project and location */
  listExecutions(
    request: ListExecutionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExecutionsResponse>>;
  /** Gets details of executions */
  getExecution(request: GetExecutionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Execution>>;
  /** Deletes execution */
  deleteExecution(
    request: DeleteExecutionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a new Execution in a given project and location. */
  createExecution(
    request: CreateExecutionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface NotebookServiceClient<CallOptionsExt = {}> {
  /** Lists instances in a given project and location. */
  listInstances(
    request: DeepPartial<ListInstancesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInstancesResponse>;
  /** Gets details of a single Instance. */
  getInstance(request: DeepPartial<GetInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Instance>;
  /** Creates a new Instance in a given project and location. */
  createInstance(
    request: DeepPartial<CreateInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Registers an existing legacy notebook instance to the Notebooks API server.
   * Legacy instances are instances created with the legacy Compute Engine
   * calls. They are not manageable by the Notebooks API out of the box. This
   * call makes these instances manageable by the Notebooks API.
   */
  registerInstance(
    request: DeepPartial<RegisterInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the guest accelerators of a single Instance. */
  setInstanceAccelerator(
    request: DeepPartial<SetInstanceAcceleratorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the machine type of a single Instance. */
  setInstanceMachineType(
    request: DeepPartial<SetInstanceMachineTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Update Notebook Instance configurations. */
  updateInstanceConfig(
    request: DeepPartial<UpdateInstanceConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the Shielded instance configuration of a single Instance. */
  updateShieldedInstanceConfig(
    request: DeepPartial<UpdateShieldedInstanceConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Replaces all the labels of an Instance. */
  setInstanceLabels(
    request: DeepPartial<SetInstanceLabelsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Add/update metadata items for an instance. */
  updateInstanceMetadataItems(
    request: DeepPartial<UpdateInstanceMetadataItemsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateInstanceMetadataItemsResponse>;
  /** Deletes a single Instance. */
  deleteInstance(
    request: DeepPartial<DeleteInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Starts a notebook instance. */
  startInstance(request: DeepPartial<StartInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Stops a notebook instance. */
  stopInstance(request: DeepPartial<StopInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Resets a notebook instance. */
  resetInstance(request: DeepPartial<ResetInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Allows notebook instances to
   * report their latest instance information to the Notebooks
   * API server. The server will merge the reported information to
   * the instance metadata store. Do not use this method directly.
   */
  reportInstanceInfo(
    request: DeepPartial<ReportInstanceInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Check if a notebook instance is upgradable. */
  isInstanceUpgradeable(
    request: DeepPartial<IsInstanceUpgradeableRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IsInstanceUpgradeableResponse>;
  /** Check if a notebook instance is healthy. */
  getInstanceHealth(
    request: DeepPartial<GetInstanceHealthRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetInstanceHealthResponse>;
  /** Upgrades a notebook instance to the latest version. */
  upgradeInstance(
    request: DeepPartial<UpgradeInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Rollbacks a notebook instance to the previous version. */
  rollbackInstance(
    request: DeepPartial<RollbackInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a Diagnostic File and runs Diagnostic Tool given an Instance. */
  diagnoseInstance(
    request: DeepPartial<DiagnoseInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Allows notebook instances to
   * call this endpoint to upgrade themselves. Do not use this method directly.
   */
  upgradeInstanceInternal(
    request: DeepPartial<UpgradeInstanceInternalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists environments in a project. */
  listEnvironments(
    request: DeepPartial<ListEnvironmentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEnvironmentsResponse>;
  /** Gets details of a single Environment. */
  getEnvironment(
    request: DeepPartial<GetEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Environment>;
  /** Creates a new Environment. */
  createEnvironment(
    request: DeepPartial<CreateEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Environment. */
  deleteEnvironment(
    request: DeepPartial<DeleteEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists schedules in a given project and location. */
  listSchedules(
    request: DeepPartial<ListSchedulesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSchedulesResponse>;
  /** Gets details of schedule */
  getSchedule(request: DeepPartial<GetScheduleRequest>, options?: CallOptions & CallOptionsExt): Promise<Schedule>;
  /** Deletes schedule and all underlying jobs */
  deleteSchedule(
    request: DeepPartial<DeleteScheduleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a new Scheduled Notebook in a given project and location. */
  createSchedule(
    request: DeepPartial<CreateScheduleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Triggers execution of an existing schedule. */
  triggerSchedule(
    request: DeepPartial<TriggerScheduleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists executions in a given project and location */
  listExecutions(
    request: DeepPartial<ListExecutionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExecutionsResponse>;
  /** Gets details of executions */
  getExecution(request: DeepPartial<GetExecutionRequest>, options?: CallOptions & CallOptionsExt): Promise<Execution>;
  /** Deletes execution */
  deleteExecution(
    request: DeepPartial<DeleteExecutionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a new Execution in a given project and location. */
  createExecution(
    request: DeepPartial<CreateExecutionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
