// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/notebooks/v1/runtime.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ContainerImage } from "./environment.js";

export const protobufPackage = "google.cloud.notebooks.v1";

/** The definition of a Runtime for a managed notebook instance. */
export interface Runtime {
  /**
   * Output only. The resource name of the runtime.
   * Format:
   * `projects/{project}/locations/{location}/runtimes/{runtimeId}`
   */
  name: string;
  /** Use a Compute Engine VM image to start the managed notebook instance. */
  virtualMachine?:
    | VirtualMachine
    | undefined;
  /** Output only. Runtime state. */
  state: Runtime_State;
  /** Output only. Runtime health_state. */
  healthState: Runtime_HealthState;
  /** The config settings for accessing runtime. */
  accessConfig:
    | RuntimeAccessConfig
    | undefined;
  /** The config settings for software inside the runtime. */
  softwareConfig:
    | RuntimeSoftwareConfig
    | undefined;
  /**
   * Output only. Contains Runtime daemon metrics such as Service status and JupyterLab
   * stats.
   */
  metrics:
    | RuntimeMetrics
    | undefined;
  /** Output only. Runtime creation time. */
  createTime:
    | Date
    | undefined;
  /** Output only. Runtime update time. */
  updateTime: Date | undefined;
}

/** The definition of the states of this runtime. */
export enum Runtime_State {
  /** STATE_UNSPECIFIED - State is not specified. */
  STATE_UNSPECIFIED = 0,
  /** STARTING - The compute layer is starting the runtime. It is not ready for use. */
  STARTING = 1,
  /**
   * PROVISIONING - The compute layer is installing required frameworks and registering the
   * runtime with notebook proxy. It cannot be used.
   */
  PROVISIONING = 2,
  /** ACTIVE - The runtime is currently running. It is ready for use. */
  ACTIVE = 3,
  /** STOPPING - The control logic is stopping the runtime. It cannot be used. */
  STOPPING = 4,
  /** STOPPED - The runtime is stopped. It cannot be used. */
  STOPPED = 5,
  /** DELETING - The runtime is being deleted. It cannot be used. */
  DELETING = 6,
  /** UPGRADING - The runtime is upgrading. It cannot be used. */
  UPGRADING = 7,
  /** INITIALIZING - The runtime is being created and set up. It is not ready for use. */
  INITIALIZING = 8,
  UNRECOGNIZED = -1,
}

export function runtime_StateFromJSON(object: any): Runtime_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Runtime_State.STATE_UNSPECIFIED;
    case 1:
    case "STARTING":
      return Runtime_State.STARTING;
    case 2:
    case "PROVISIONING":
      return Runtime_State.PROVISIONING;
    case 3:
    case "ACTIVE":
      return Runtime_State.ACTIVE;
    case 4:
    case "STOPPING":
      return Runtime_State.STOPPING;
    case 5:
    case "STOPPED":
      return Runtime_State.STOPPED;
    case 6:
    case "DELETING":
      return Runtime_State.DELETING;
    case 7:
    case "UPGRADING":
      return Runtime_State.UPGRADING;
    case 8:
    case "INITIALIZING":
      return Runtime_State.INITIALIZING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Runtime_State.UNRECOGNIZED;
  }
}

export function runtime_StateToJSON(object: Runtime_State): string {
  switch (object) {
    case Runtime_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Runtime_State.STARTING:
      return "STARTING";
    case Runtime_State.PROVISIONING:
      return "PROVISIONING";
    case Runtime_State.ACTIVE:
      return "ACTIVE";
    case Runtime_State.STOPPING:
      return "STOPPING";
    case Runtime_State.STOPPED:
      return "STOPPED";
    case Runtime_State.DELETING:
      return "DELETING";
    case Runtime_State.UPGRADING:
      return "UPGRADING";
    case Runtime_State.INITIALIZING:
      return "INITIALIZING";
    case Runtime_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The runtime substate. */
export enum Runtime_HealthState {
  /** HEALTH_STATE_UNSPECIFIED - The runtime substate is unknown. */
  HEALTH_STATE_UNSPECIFIED = 0,
  /**
   * HEALTHY - The runtime is known to be in an healthy state
   * (for example, critical daemons are running)
   * Applies to ACTIVE state.
   */
  HEALTHY = 1,
  /**
   * UNHEALTHY - The runtime is known to be in an unhealthy state
   * (for example, critical daemons are not running)
   * Applies to ACTIVE state.
   */
  UNHEALTHY = 2,
  /**
   * AGENT_NOT_INSTALLED - The runtime has not installed health monitoring agent.
   * Applies to ACTIVE state.
   */
  AGENT_NOT_INSTALLED = 3,
  /**
   * AGENT_NOT_RUNNING - The runtime health monitoring agent is not running.
   * Applies to ACTIVE state.
   */
  AGENT_NOT_RUNNING = 4,
  UNRECOGNIZED = -1,
}

export function runtime_HealthStateFromJSON(object: any): Runtime_HealthState {
  switch (object) {
    case 0:
    case "HEALTH_STATE_UNSPECIFIED":
      return Runtime_HealthState.HEALTH_STATE_UNSPECIFIED;
    case 1:
    case "HEALTHY":
      return Runtime_HealthState.HEALTHY;
    case 2:
    case "UNHEALTHY":
      return Runtime_HealthState.UNHEALTHY;
    case 3:
    case "AGENT_NOT_INSTALLED":
      return Runtime_HealthState.AGENT_NOT_INSTALLED;
    case 4:
    case "AGENT_NOT_RUNNING":
      return Runtime_HealthState.AGENT_NOT_RUNNING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Runtime_HealthState.UNRECOGNIZED;
  }
}

export function runtime_HealthStateToJSON(object: Runtime_HealthState): string {
  switch (object) {
    case Runtime_HealthState.HEALTH_STATE_UNSPECIFIED:
      return "HEALTH_STATE_UNSPECIFIED";
    case Runtime_HealthState.HEALTHY:
      return "HEALTHY";
    case Runtime_HealthState.UNHEALTHY:
      return "UNHEALTHY";
    case Runtime_HealthState.AGENT_NOT_INSTALLED:
      return "AGENT_NOT_INSTALLED";
    case Runtime_HealthState.AGENT_NOT_RUNNING:
      return "AGENT_NOT_RUNNING";
    case Runtime_HealthState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Definition of the types of hardware accelerators that can be used.
 * Definition of the types of hardware accelerators that can be used.
 * See [Compute Engine
 * AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes).
 * Examples:
 *
 * * `nvidia-tesla-k80`
 * * `nvidia-tesla-p100`
 * * `nvidia-tesla-v100`
 * * `nvidia-tesla-p4`
 * * `nvidia-tesla-t4`
 * * `nvidia-tesla-a100`
 */
export interface RuntimeAcceleratorConfig {
  /** Accelerator model. */
  type: RuntimeAcceleratorConfig_AcceleratorType;
  /** Count of cores of this accelerator. */
  coreCount: Long;
}

/** Type of this accelerator. */
export enum RuntimeAcceleratorConfig_AcceleratorType {
  /** ACCELERATOR_TYPE_UNSPECIFIED - Accelerator type is not specified. */
  ACCELERATOR_TYPE_UNSPECIFIED = 0,
  /**
   * NVIDIA_TESLA_K80 - Accelerator type is Nvidia Tesla K80.
   *
   * @deprecated
   */
  NVIDIA_TESLA_K80 = 1,
  /** NVIDIA_TESLA_P100 - Accelerator type is Nvidia Tesla P100. */
  NVIDIA_TESLA_P100 = 2,
  /** NVIDIA_TESLA_V100 - Accelerator type is Nvidia Tesla V100. */
  NVIDIA_TESLA_V100 = 3,
  /** NVIDIA_TESLA_P4 - Accelerator type is Nvidia Tesla P4. */
  NVIDIA_TESLA_P4 = 4,
  /** NVIDIA_TESLA_T4 - Accelerator type is Nvidia Tesla T4. */
  NVIDIA_TESLA_T4 = 5,
  /** NVIDIA_TESLA_A100 - Accelerator type is Nvidia Tesla A100. */
  NVIDIA_TESLA_A100 = 6,
  /** TPU_V2 - (Coming soon) Accelerator type is TPU V2. */
  TPU_V2 = 7,
  /** TPU_V3 - (Coming soon) Accelerator type is TPU V3. */
  TPU_V3 = 8,
  /** NVIDIA_TESLA_T4_VWS - Accelerator type is NVIDIA Tesla T4 Virtual Workstations. */
  NVIDIA_TESLA_T4_VWS = 9,
  /** NVIDIA_TESLA_P100_VWS - Accelerator type is NVIDIA Tesla P100 Virtual Workstations. */
  NVIDIA_TESLA_P100_VWS = 10,
  /** NVIDIA_TESLA_P4_VWS - Accelerator type is NVIDIA Tesla P4 Virtual Workstations. */
  NVIDIA_TESLA_P4_VWS = 11,
  UNRECOGNIZED = -1,
}

export function runtimeAcceleratorConfig_AcceleratorTypeFromJSON(
  object: any,
): RuntimeAcceleratorConfig_AcceleratorType {
  switch (object) {
    case 0:
    case "ACCELERATOR_TYPE_UNSPECIFIED":
      return RuntimeAcceleratorConfig_AcceleratorType.ACCELERATOR_TYPE_UNSPECIFIED;
    case 1:
    case "NVIDIA_TESLA_K80":
      return RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_K80;
    case 2:
    case "NVIDIA_TESLA_P100":
      return RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_P100;
    case 3:
    case "NVIDIA_TESLA_V100":
      return RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_V100;
    case 4:
    case "NVIDIA_TESLA_P4":
      return RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_P4;
    case 5:
    case "NVIDIA_TESLA_T4":
      return RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_T4;
    case 6:
    case "NVIDIA_TESLA_A100":
      return RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_A100;
    case 7:
    case "TPU_V2":
      return RuntimeAcceleratorConfig_AcceleratorType.TPU_V2;
    case 8:
    case "TPU_V3":
      return RuntimeAcceleratorConfig_AcceleratorType.TPU_V3;
    case 9:
    case "NVIDIA_TESLA_T4_VWS":
      return RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_T4_VWS;
    case 10:
    case "NVIDIA_TESLA_P100_VWS":
      return RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_P100_VWS;
    case 11:
    case "NVIDIA_TESLA_P4_VWS":
      return RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_P4_VWS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RuntimeAcceleratorConfig_AcceleratorType.UNRECOGNIZED;
  }
}

export function runtimeAcceleratorConfig_AcceleratorTypeToJSON(
  object: RuntimeAcceleratorConfig_AcceleratorType,
): string {
  switch (object) {
    case RuntimeAcceleratorConfig_AcceleratorType.ACCELERATOR_TYPE_UNSPECIFIED:
      return "ACCELERATOR_TYPE_UNSPECIFIED";
    case RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_K80:
      return "NVIDIA_TESLA_K80";
    case RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_P100:
      return "NVIDIA_TESLA_P100";
    case RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_V100:
      return "NVIDIA_TESLA_V100";
    case RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_P4:
      return "NVIDIA_TESLA_P4";
    case RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_T4:
      return "NVIDIA_TESLA_T4";
    case RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_A100:
      return "NVIDIA_TESLA_A100";
    case RuntimeAcceleratorConfig_AcceleratorType.TPU_V2:
      return "TPU_V2";
    case RuntimeAcceleratorConfig_AcceleratorType.TPU_V3:
      return "TPU_V3";
    case RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_T4_VWS:
      return "NVIDIA_TESLA_T4_VWS";
    case RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_P100_VWS:
      return "NVIDIA_TESLA_P100_VWS";
    case RuntimeAcceleratorConfig_AcceleratorType.NVIDIA_TESLA_P4_VWS:
      return "NVIDIA_TESLA_P4_VWS";
    case RuntimeAcceleratorConfig_AcceleratorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Represents a custom encryption key configuration that can be applied to
 * a resource. This will encrypt all disks in Virtual Machine.
 */
export interface EncryptionConfig {
  /**
   * The Cloud KMS resource identifier of the customer-managed encryption key
   * used to protect a resource, such as a disks. It has the following
   * format:
   * `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`
   */
  kmsKey: string;
}

/** A Local attached disk resource. */
export interface LocalDisk {
  /**
   * Optional. Output only. Specifies whether the disk will be auto-deleted when the
   * instance is deleted (but not when the disk is detached from the instance).
   */
  autoDelete: boolean;
  /**
   * Optional. Output only. Indicates that this is a boot disk. The virtual machine
   * will use the first partition of the disk for its root filesystem.
   */
  boot: boolean;
  /**
   * Optional. Output only. Specifies a unique device name
   * of your choice that is reflected into the
   * `/dev/disk/by-id/google-*` tree of a Linux operating system running within
   * the instance. This name can be used to reference the device for mounting,
   * resizing, and so on, from within the instance.
   *
   * If not specified, the server chooses a default device name to apply to this
   * disk, in the form persistent-disk-x, where x is a number assigned by Google
   * Compute Engine. This field is only applicable for persistent disks.
   */
  deviceName: string;
  /**
   * Output only. Indicates a list of features to enable on the guest operating system.
   * Applicable only for bootable images. Read  Enabling guest operating
   * system features to see a list of available options.
   */
  guestOsFeatures: LocalDisk_RuntimeGuestOsFeature[];
  /**
   * Output only. A zero-based index to this disk, where 0 is reserved for the
   * boot disk. If you have many disks attached to an instance, each disk would
   * have a unique index number.
   */
  index: number;
  /**
   * Input only. Specifies the parameters for a new disk that will be created
   * alongside the new instance. Use initialization parameters to create boot
   * disks or local SSDs attached to the new instance.
   *
   * This property is mutually exclusive with the source property; you can only
   * define one or the other, but not both.
   */
  initializeParams:
    | LocalDiskInitializeParams
    | undefined;
  /**
   * Specifies the disk interface to use for attaching this disk, which is
   * either SCSI or NVME. The default is SCSI. Persistent disks must always use
   * SCSI and the request will fail if you attempt to attach a persistent disk
   * in any other format than SCSI. Local SSDs can use either NVME or SCSI. For
   * performance characteristics of SCSI over NVMe, see Local SSD performance.
   * Valid values:
   *
   * * `NVME`
   * * `SCSI`
   */
  interface: string;
  /** Output only. Type of the resource. Always compute#attachedDisk for attached disks. */
  kind: string;
  /** Output only. Any valid publicly visible licenses. */
  licenses: string[];
  /**
   * The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`.
   * If not specified, the default is to attach the disk in `READ_WRITE` mode.
   * Valid values:
   *
   * * `READ_ONLY`
   * * `READ_WRITE`
   */
  mode: string;
  /**
   * Specifies a valid partial or full URL to an existing Persistent Disk
   * resource.
   */
  source: string;
  /**
   * Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not
   * specified, the default is `PERSISTENT`.
   * Valid values:
   *
   * * `PERSISTENT`
   * * `SCRATCH`
   */
  type: string;
}

/**
 * Optional. A list of features to enable on the guest operating system.
 * Applicable only for bootable images.
 * Read [Enabling guest operating system
 * features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features)
 * to see a list of available options.
 * Guest OS features for boot disk.
 */
export interface LocalDisk_RuntimeGuestOsFeature {
  /**
   * The ID of a supported feature. Read [Enabling guest operating system
   * features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features)
   * to see a list of available options.
   *
   * Valid values:
   *
   * * `FEATURE_TYPE_UNSPECIFIED`
   * * `MULTI_IP_SUBNET`
   * * `SECURE_BOOT`
   * * `UEFI_COMPATIBLE`
   * * `VIRTIO_SCSI_MULTIQUEUE`
   * * `WINDOWS`
   */
  type: string;
}

/**
 * Input only. Specifies the parameters for a new disk that will be created
 * alongside the new instance. Use initialization parameters to create boot
 * disks or local SSDs attached to the new runtime.
 * This property is mutually exclusive with the source property; you can only
 * define one or the other, but not both.
 */
export interface LocalDiskInitializeParams {
  /** Optional. Provide this property when creating the disk. */
  description: string;
  /**
   * Optional. Specifies the disk name. If not specified, the default is to use the name
   * of the instance. If the disk with the instance name exists already in the
   * given zone/region, a new name will be automatically generated.
   */
  diskName: string;
  /**
   * Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk
   * will be the same size as the image (usually 10GB). If specified, the size
   * must be equal to or larger than 10GB. Default 100 GB.
   */
  diskSizeGb: Long;
  /**
   * Input only. The type of the boot disk attached to this instance, defaults to
   * standard persistent disk (`PD_STANDARD`).
   */
  diskType: LocalDiskInitializeParams_DiskType;
  /**
   * Optional. Labels to apply to this disk. These can be later modified by the
   * disks.setLabels method. This field is only applicable for persistent disks.
   */
  labels: { [key: string]: string };
}

/** Possible disk types. */
export enum LocalDiskInitializeParams_DiskType {
  /** DISK_TYPE_UNSPECIFIED - Disk type not set. */
  DISK_TYPE_UNSPECIFIED = 0,
  /** PD_STANDARD - Standard persistent disk type. */
  PD_STANDARD = 1,
  /** PD_SSD - SSD persistent disk type. */
  PD_SSD = 2,
  /** PD_BALANCED - Balanced persistent disk type. */
  PD_BALANCED = 3,
  /** PD_EXTREME - Extreme persistent disk type. */
  PD_EXTREME = 4,
  UNRECOGNIZED = -1,
}

export function localDiskInitializeParams_DiskTypeFromJSON(object: any): LocalDiskInitializeParams_DiskType {
  switch (object) {
    case 0:
    case "DISK_TYPE_UNSPECIFIED":
      return LocalDiskInitializeParams_DiskType.DISK_TYPE_UNSPECIFIED;
    case 1:
    case "PD_STANDARD":
      return LocalDiskInitializeParams_DiskType.PD_STANDARD;
    case 2:
    case "PD_SSD":
      return LocalDiskInitializeParams_DiskType.PD_SSD;
    case 3:
    case "PD_BALANCED":
      return LocalDiskInitializeParams_DiskType.PD_BALANCED;
    case 4:
    case "PD_EXTREME":
      return LocalDiskInitializeParams_DiskType.PD_EXTREME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LocalDiskInitializeParams_DiskType.UNRECOGNIZED;
  }
}

export function localDiskInitializeParams_DiskTypeToJSON(object: LocalDiskInitializeParams_DiskType): string {
  switch (object) {
    case LocalDiskInitializeParams_DiskType.DISK_TYPE_UNSPECIFIED:
      return "DISK_TYPE_UNSPECIFIED";
    case LocalDiskInitializeParams_DiskType.PD_STANDARD:
      return "PD_STANDARD";
    case LocalDiskInitializeParams_DiskType.PD_SSD:
      return "PD_SSD";
    case LocalDiskInitializeParams_DiskType.PD_BALANCED:
      return "PD_BALANCED";
    case LocalDiskInitializeParams_DiskType.PD_EXTREME:
      return "PD_EXTREME";
    case LocalDiskInitializeParams_DiskType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LocalDiskInitializeParams_LabelsEntry {
  key: string;
  value: string;
}

/** Specifies the login configuration for Runtime */
export interface RuntimeAccessConfig {
  /** The type of access mode this instance. */
  accessType: RuntimeAccessConfig_RuntimeAccessType;
  /**
   * The owner of this runtime after creation. Format: `alias@example.com`
   * Currently supports one owner only.
   */
  runtimeOwner: string;
  /** Output only. The proxy endpoint that is used to access the runtime. */
  proxyUri: string;
}

/**
 * Possible ways to access runtime. Authentication mode.
 * Currently supports: Single User only.
 */
export enum RuntimeAccessConfig_RuntimeAccessType {
  /** RUNTIME_ACCESS_TYPE_UNSPECIFIED - Unspecified access. */
  RUNTIME_ACCESS_TYPE_UNSPECIFIED = 0,
  /** SINGLE_USER - Single user login. */
  SINGLE_USER = 1,
  /**
   * SERVICE_ACCOUNT - Service Account mode.
   * In Service Account mode, Runtime creator will specify a SA that exists
   * in the consumer project. Using Runtime Service Account field.
   * Users accessing the Runtime need ActAs (Service Account User) permission.
   */
  SERVICE_ACCOUNT = 2,
  UNRECOGNIZED = -1,
}

export function runtimeAccessConfig_RuntimeAccessTypeFromJSON(object: any): RuntimeAccessConfig_RuntimeAccessType {
  switch (object) {
    case 0:
    case "RUNTIME_ACCESS_TYPE_UNSPECIFIED":
      return RuntimeAccessConfig_RuntimeAccessType.RUNTIME_ACCESS_TYPE_UNSPECIFIED;
    case 1:
    case "SINGLE_USER":
      return RuntimeAccessConfig_RuntimeAccessType.SINGLE_USER;
    case 2:
    case "SERVICE_ACCOUNT":
      return RuntimeAccessConfig_RuntimeAccessType.SERVICE_ACCOUNT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RuntimeAccessConfig_RuntimeAccessType.UNRECOGNIZED;
  }
}

export function runtimeAccessConfig_RuntimeAccessTypeToJSON(object: RuntimeAccessConfig_RuntimeAccessType): string {
  switch (object) {
    case RuntimeAccessConfig_RuntimeAccessType.RUNTIME_ACCESS_TYPE_UNSPECIFIED:
      return "RUNTIME_ACCESS_TYPE_UNSPECIFIED";
    case RuntimeAccessConfig_RuntimeAccessType.SINGLE_USER:
      return "SINGLE_USER";
    case RuntimeAccessConfig_RuntimeAccessType.SERVICE_ACCOUNT:
      return "SERVICE_ACCOUNT";
    case RuntimeAccessConfig_RuntimeAccessType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Specifies the selection and configuration of software inside the runtime.
 * The properties to set on runtime.
 * Properties keys are specified in `key:value` format, for example:
 *
 * * `idle_shutdown: true`
 * * `idle_shutdown_timeout: 180`
 * * `enable_health_monitoring: true`
 */
export interface RuntimeSoftwareConfig {
  /**
   * Cron expression in UTC timezone, used to schedule instance auto upgrade.
   * Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
   */
  notebookUpgradeSchedule: string;
  /**
   * Verifies core internal services are running.
   * Default: True
   */
  enableHealthMonitoring?:
    | boolean
    | undefined;
  /**
   * Runtime will automatically shutdown after idle_shutdown_time.
   * Default: True
   */
  idleShutdown?:
    | boolean
    | undefined;
  /** Time in minutes to wait before shutting down runtime. Default: 180 minutes */
  idleShutdownTimeout: number;
  /**
   * Install Nvidia Driver automatically.
   * Default: True
   */
  installGpuDriver: boolean;
  /**
   * Specify a custom Cloud Storage path where the GPU driver is stored.
   * If not specified, we'll automatically choose from official GPU drivers.
   */
  customGpuDriverPath: string;
  /**
   * Path to a Bash script that automatically runs after a notebook instance
   * fully boots up. The path must be a URL or
   * Cloud Storage path (`gs://path-to-file/file-name`).
   */
  postStartupScript: string;
  /** Optional. Use a list of container images to use as Kernels in the notebook instance. */
  kernels: ContainerImage[];
  /** Output only. Bool indicating whether an newer image is available in an image family. */
  upgradeable?:
    | boolean
    | undefined;
  /** Behavior for the post startup script. */
  postStartupScriptBehavior: RuntimeSoftwareConfig_PostStartupScriptBehavior;
  /**
   * Bool indicating whether JupyterLab terminal will be available or not.
   * Default: False
   */
  disableTerminal?:
    | boolean
    | undefined;
  /** Output only. version of boot image such as M100, from release label of the image. */
  version?: string | undefined;
}

/** Behavior for the post startup script. */
export enum RuntimeSoftwareConfig_PostStartupScriptBehavior {
  /** POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED - Unspecified post startup script behavior. Will run only once at creation. */
  POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED = 0,
  /** RUN_EVERY_START - Runs the post startup script provided during creation at every start. */
  RUN_EVERY_START = 1,
  /** DOWNLOAD_AND_RUN_EVERY_START - Downloads and runs the provided post startup script at every start. */
  DOWNLOAD_AND_RUN_EVERY_START = 2,
  UNRECOGNIZED = -1,
}

export function runtimeSoftwareConfig_PostStartupScriptBehaviorFromJSON(
  object: any,
): RuntimeSoftwareConfig_PostStartupScriptBehavior {
  switch (object) {
    case 0:
    case "POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED":
      return RuntimeSoftwareConfig_PostStartupScriptBehavior.POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED;
    case 1:
    case "RUN_EVERY_START":
      return RuntimeSoftwareConfig_PostStartupScriptBehavior.RUN_EVERY_START;
    case 2:
    case "DOWNLOAD_AND_RUN_EVERY_START":
      return RuntimeSoftwareConfig_PostStartupScriptBehavior.DOWNLOAD_AND_RUN_EVERY_START;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RuntimeSoftwareConfig_PostStartupScriptBehavior.UNRECOGNIZED;
  }
}

export function runtimeSoftwareConfig_PostStartupScriptBehaviorToJSON(
  object: RuntimeSoftwareConfig_PostStartupScriptBehavior,
): string {
  switch (object) {
    case RuntimeSoftwareConfig_PostStartupScriptBehavior.POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED:
      return "POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED";
    case RuntimeSoftwareConfig_PostStartupScriptBehavior.RUN_EVERY_START:
      return "RUN_EVERY_START";
    case RuntimeSoftwareConfig_PostStartupScriptBehavior.DOWNLOAD_AND_RUN_EVERY_START:
      return "DOWNLOAD_AND_RUN_EVERY_START";
    case RuntimeSoftwareConfig_PostStartupScriptBehavior.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Contains runtime daemon metrics, such as OS and kernels and sessions stats. */
export interface RuntimeMetrics {
  /** Output only. The system metrics. */
  systemMetrics: { [key: string]: string };
}

export interface RuntimeMetrics_SystemMetricsEntry {
  key: string;
  value: string;
}

/**
 * A set of Shielded Instance options.
 * Check [Images using supported Shielded VM
 * features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
 * Not all combinations are valid.
 */
export interface RuntimeShieldedInstanceConfig {
  /**
   * Defines whether the instance has Secure Boot enabled.
   *
   * Secure Boot helps ensure that the system only runs authentic software by
   * verifying the digital signature of all boot components, and halting the
   * boot process if signature verification fails. Disabled by default.
   */
  enableSecureBoot: boolean;
  /** Defines whether the instance has the vTPM enabled. Enabled by default. */
  enableVtpm: boolean;
  /**
   * Defines whether the instance has integrity monitoring enabled.
   *
   * Enables monitoring and attestation of the boot integrity of the instance.
   * The attestation is performed against the integrity policy baseline. This
   * baseline is initially derived from the implicitly trusted boot image when
   * the instance is created. Enabled by default.
   */
  enableIntegrityMonitoring: boolean;
}

/** Runtime using Virtual Machine for computing. */
export interface VirtualMachine {
  /** Output only. The user-friendly name of the Managed Compute Engine instance. */
  instanceName: string;
  /** Output only. The unique identifier of the Managed Compute Engine instance. */
  instanceId: string;
  /** Virtual Machine configuration settings. */
  virtualMachineConfig: VirtualMachineConfig | undefined;
}

/** The config settings for virtual machine. */
export interface VirtualMachineConfig {
  /**
   * Output only. The zone where the virtual machine is located.
   * If using regional request, the notebooks service will pick a location
   * in the corresponding runtime region.
   * On a get request, zone will always be present. Example:
   * * `us-central1-b`
   */
  zone: string;
  /**
   * Required. The Compute Engine machine type used for runtimes.
   * Short name is valid. Examples:
   * * `n1-standard-2`
   * * `e2-standard-8`
   */
  machineType: string;
  /** Optional. Use a list of container images to use as Kernels in the notebook instance. */
  containerImages: ContainerImage[];
  /** Required. Data disk option configuration settings. */
  dataDisk:
    | LocalDisk
    | undefined;
  /** Optional. Encryption settings for virtual machine data disk. */
  encryptionConfig:
    | EncryptionConfig
    | undefined;
  /** Optional. Shielded VM Instance configuration settings. */
  shieldedInstanceConfig:
    | RuntimeShieldedInstanceConfig
    | undefined;
  /** Optional. The Compute Engine accelerator configuration for this runtime. */
  acceleratorConfig:
    | RuntimeAcceleratorConfig
    | undefined;
  /**
   * Optional. The Compute Engine network to be used for machine
   * communications. Cannot be specified with subnetwork. If neither
   * `network` nor `subnet` is specified, the "default" network of
   * the project is used, if it exists.
   *
   * A full URL or partial URI. Examples:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default`
   * * `projects/[project_id]/global/networks/default`
   *
   * Runtimes are managed resources inside Google Infrastructure.
   * Runtimes support the following network configurations:
   *
   * * Google Managed Network (Network & subnet are empty)
   * * Consumer Project VPC (network & subnet are required). Requires
   * configuring Private Service Access.
   * * Shared VPC (network & subnet are required). Requires configuring Private
   * Service Access.
   */
  network: string;
  /**
   * Optional. The Compute Engine subnetwork to be used for machine
   * communications. Cannot be specified with network.
   *
   * A full URL or partial URI are valid. Examples:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0`
   * * `projects/[project_id]/regions/us-east1/subnetworks/sub0`
   */
  subnet: string;
  /**
   * Optional. If true, runtime will only have internal IP
   * addresses. By default, runtimes are not restricted to internal IP
   * addresses, and will have ephemeral external IP addresses assigned to each
   * vm. This `internal_ip_only` restriction can only be enabled for
   * subnetwork enabled networks, and all dependencies must be
   * configured to be accessible without external IP addresses.
   */
  internalIpOnly: boolean;
  /**
   * Optional. The Compute Engine tags to add to runtime (see [Tagging
   * instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
   */
  tags: string[];
  /**
   * Output only. The Compute Engine guest attributes. (see
   * [Project and instance
   * guest
   * attributes](https://cloud.google.com/compute/docs/storing-retrieving-metadata#guest_attributes)).
   */
  guestAttributes: { [key: string]: string };
  /**
   * Optional. The Compute Engine metadata entries to add to virtual machine. (see
   * [Project and instance
   * metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
   */
  metadata: { [key: string]: string };
  /**
   * Optional. The labels to associate with this runtime.
   * Label **keys** must contain 1 to 63 characters, and must conform to
   * [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
   * Label **values** may be empty, but, if present, must contain 1 to 63
   * characters, and must conform to [RFC
   * 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
   * associated with a cluster.
   */
  labels: { [key: string]: string };
  /**
   * Optional. The type of vNIC to be used on this interface. This may be gVNIC or
   * VirtioNet.
   */
  nicType: VirtualMachineConfig_NicType;
  /**
   * Optional. Reserved IP Range name is used for VPC Peering.
   * The subnetwork allocation will use the range *name* if it's assigned.
   *
   * Example: managed-notebooks-range-c
   *
   *     PEERING_RANGE_NAME_3=managed-notebooks-range-c
   *     gcloud compute addresses create $PEERING_RANGE_NAME_3 \
   *       --global \
   *       --prefix-length=24 \
   *       --description="Google Cloud Managed Notebooks Range 24 c" \
   *       --network=$NETWORK \
   *       --addresses=192.168.0.0 \
   *       --purpose=VPC_PEERING
   *
   * Field value will be: `managed-notebooks-range-c`
   */
  reservedIpRange: string;
  /** Optional. Boot image metadata used for runtime upgradeability. */
  bootImage: VirtualMachineConfig_BootImage | undefined;
}

/**
 * The type of vNIC driver.
 * Default should be UNSPECIFIED_NIC_TYPE.
 */
export enum VirtualMachineConfig_NicType {
  /** UNSPECIFIED_NIC_TYPE - No type specified. */
  UNSPECIFIED_NIC_TYPE = 0,
  /** VIRTIO_NET - VIRTIO */
  VIRTIO_NET = 1,
  /** GVNIC - GVNIC */
  GVNIC = 2,
  UNRECOGNIZED = -1,
}

export function virtualMachineConfig_NicTypeFromJSON(object: any): VirtualMachineConfig_NicType {
  switch (object) {
    case 0:
    case "UNSPECIFIED_NIC_TYPE":
      return VirtualMachineConfig_NicType.UNSPECIFIED_NIC_TYPE;
    case 1:
    case "VIRTIO_NET":
      return VirtualMachineConfig_NicType.VIRTIO_NET;
    case 2:
    case "GVNIC":
      return VirtualMachineConfig_NicType.GVNIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VirtualMachineConfig_NicType.UNRECOGNIZED;
  }
}

export function virtualMachineConfig_NicTypeToJSON(object: VirtualMachineConfig_NicType): string {
  switch (object) {
    case VirtualMachineConfig_NicType.UNSPECIFIED_NIC_TYPE:
      return "UNSPECIFIED_NIC_TYPE";
    case VirtualMachineConfig_NicType.VIRTIO_NET:
      return "VIRTIO_NET";
    case VirtualMachineConfig_NicType.GVNIC:
      return "GVNIC";
    case VirtualMachineConfig_NicType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Definition of the boot image used by the Runtime.
 * Used to facilitate runtime upgradeability.
 */
export interface VirtualMachineConfig_BootImage {
}

export interface VirtualMachineConfig_GuestAttributesEntry {
  key: string;
  value: string;
}

export interface VirtualMachineConfig_MetadataEntry {
  key: string;
  value: string;
}

export interface VirtualMachineConfig_LabelsEntry {
  key: string;
  value: string;
}

function createBaseRuntime(): Runtime {
  return {
    name: "",
    virtualMachine: undefined,
    state: 0,
    healthState: 0,
    accessConfig: undefined,
    softwareConfig: undefined,
    metrics: undefined,
    createTime: undefined,
    updateTime: undefined,
  };
}

export const Runtime: MessageFns<Runtime> = {
  encode(message: Runtime, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.virtualMachine !== undefined) {
      VirtualMachine.encode(message.virtualMachine, writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.healthState !== 0) {
      writer.uint32(32).int32(message.healthState);
    }
    if (message.accessConfig !== undefined) {
      RuntimeAccessConfig.encode(message.accessConfig, writer.uint32(42).fork()).join();
    }
    if (message.softwareConfig !== undefined) {
      RuntimeSoftwareConfig.encode(message.softwareConfig, writer.uint32(50).fork()).join();
    }
    if (message.metrics !== undefined) {
      RuntimeMetrics.encode(message.metrics, writer.uint32(58).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(162).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(170).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Runtime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.virtualMachine = VirtualMachine.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.healthState = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.accessConfig = RuntimeAccessConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.softwareConfig = RuntimeSoftwareConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.metrics = RuntimeMetrics.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Runtime {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      virtualMachine: isSet(object.virtualMachine) ? VirtualMachine.fromJSON(object.virtualMachine) : undefined,
      state: isSet(object.state) ? runtime_StateFromJSON(object.state) : 0,
      healthState: isSet(object.healthState) ? runtime_HealthStateFromJSON(object.healthState) : 0,
      accessConfig: isSet(object.accessConfig) ? RuntimeAccessConfig.fromJSON(object.accessConfig) : undefined,
      softwareConfig: isSet(object.softwareConfig) ? RuntimeSoftwareConfig.fromJSON(object.softwareConfig) : undefined,
      metrics: isSet(object.metrics) ? RuntimeMetrics.fromJSON(object.metrics) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: Runtime): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.virtualMachine !== undefined) {
      obj.virtualMachine = VirtualMachine.toJSON(message.virtualMachine);
    }
    if (message.state !== 0) {
      obj.state = runtime_StateToJSON(message.state);
    }
    if (message.healthState !== 0) {
      obj.healthState = runtime_HealthStateToJSON(message.healthState);
    }
    if (message.accessConfig !== undefined) {
      obj.accessConfig = RuntimeAccessConfig.toJSON(message.accessConfig);
    }
    if (message.softwareConfig !== undefined) {
      obj.softwareConfig = RuntimeSoftwareConfig.toJSON(message.softwareConfig);
    }
    if (message.metrics !== undefined) {
      obj.metrics = RuntimeMetrics.toJSON(message.metrics);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Runtime>): Runtime {
    return Runtime.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Runtime>): Runtime {
    const message = createBaseRuntime();
    message.name = object.name ?? "";
    message.virtualMachine = (object.virtualMachine !== undefined && object.virtualMachine !== null)
      ? VirtualMachine.fromPartial(object.virtualMachine)
      : undefined;
    message.state = object.state ?? 0;
    message.healthState = object.healthState ?? 0;
    message.accessConfig = (object.accessConfig !== undefined && object.accessConfig !== null)
      ? RuntimeAccessConfig.fromPartial(object.accessConfig)
      : undefined;
    message.softwareConfig = (object.softwareConfig !== undefined && object.softwareConfig !== null)
      ? RuntimeSoftwareConfig.fromPartial(object.softwareConfig)
      : undefined;
    message.metrics = (object.metrics !== undefined && object.metrics !== null)
      ? RuntimeMetrics.fromPartial(object.metrics)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseRuntimeAcceleratorConfig(): RuntimeAcceleratorConfig {
  return { type: 0, coreCount: Long.ZERO };
}

export const RuntimeAcceleratorConfig: MessageFns<RuntimeAcceleratorConfig> = {
  encode(message: RuntimeAcceleratorConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (!message.coreCount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.coreCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeAcceleratorConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeAcceleratorConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.coreCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeAcceleratorConfig {
    return {
      type: isSet(object.type) ? runtimeAcceleratorConfig_AcceleratorTypeFromJSON(object.type) : 0,
      coreCount: isSet(object.coreCount) ? Long.fromValue(object.coreCount) : Long.ZERO,
    };
  },

  toJSON(message: RuntimeAcceleratorConfig): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = runtimeAcceleratorConfig_AcceleratorTypeToJSON(message.type);
    }
    if (!message.coreCount.equals(Long.ZERO)) {
      obj.coreCount = (message.coreCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeAcceleratorConfig>): RuntimeAcceleratorConfig {
    return RuntimeAcceleratorConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeAcceleratorConfig>): RuntimeAcceleratorConfig {
    const message = createBaseRuntimeAcceleratorConfig();
    message.type = object.type ?? 0;
    message.coreCount = (object.coreCount !== undefined && object.coreCount !== null)
      ? Long.fromValue(object.coreCount)
      : Long.ZERO;
    return message;
  },
};

function createBaseEncryptionConfig(): EncryptionConfig {
  return { kmsKey: "" };
}

export const EncryptionConfig: MessageFns<EncryptionConfig> = {
  encode(message: EncryptionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kmsKey !== "") {
      writer.uint32(10).string(message.kmsKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kmsKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptionConfig {
    return { kmsKey: isSet(object.kmsKey) ? globalThis.String(object.kmsKey) : "" };
  },

  toJSON(message: EncryptionConfig): unknown {
    const obj: any = {};
    if (message.kmsKey !== "") {
      obj.kmsKey = message.kmsKey;
    }
    return obj;
  },

  create(base?: DeepPartial<EncryptionConfig>): EncryptionConfig {
    return EncryptionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EncryptionConfig>): EncryptionConfig {
    const message = createBaseEncryptionConfig();
    message.kmsKey = object.kmsKey ?? "";
    return message;
  },
};

function createBaseLocalDisk(): LocalDisk {
  return {
    autoDelete: false,
    boot: false,
    deviceName: "",
    guestOsFeatures: [],
    index: 0,
    initializeParams: undefined,
    interface: "",
    kind: "",
    licenses: [],
    mode: "",
    source: "",
    type: "",
  };
}

export const LocalDisk: MessageFns<LocalDisk> = {
  encode(message: LocalDisk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.autoDelete !== false) {
      writer.uint32(8).bool(message.autoDelete);
    }
    if (message.boot !== false) {
      writer.uint32(16).bool(message.boot);
    }
    if (message.deviceName !== "") {
      writer.uint32(26).string(message.deviceName);
    }
    for (const v of message.guestOsFeatures) {
      LocalDisk_RuntimeGuestOsFeature.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.index !== 0) {
      writer.uint32(40).int32(message.index);
    }
    if (message.initializeParams !== undefined) {
      LocalDiskInitializeParams.encode(message.initializeParams, writer.uint32(50).fork()).join();
    }
    if (message.interface !== "") {
      writer.uint32(58).string(message.interface);
    }
    if (message.kind !== "") {
      writer.uint32(66).string(message.kind);
    }
    for (const v of message.licenses) {
      writer.uint32(74).string(v!);
    }
    if (message.mode !== "") {
      writer.uint32(82).string(message.mode);
    }
    if (message.source !== "") {
      writer.uint32(90).string(message.source);
    }
    if (message.type !== "") {
      writer.uint32(98).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalDisk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalDisk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.autoDelete = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.boot = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deviceName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.guestOsFeatures.push(LocalDisk_RuntimeGuestOsFeature.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.index = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.initializeParams = LocalDiskInitializeParams.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.interface = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.licenses.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.mode = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.source = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalDisk {
    return {
      autoDelete: isSet(object.autoDelete) ? globalThis.Boolean(object.autoDelete) : false,
      boot: isSet(object.boot) ? globalThis.Boolean(object.boot) : false,
      deviceName: isSet(object.deviceName) ? globalThis.String(object.deviceName) : "",
      guestOsFeatures: globalThis.Array.isArray(object?.guestOsFeatures)
        ? object.guestOsFeatures.map((e: any) => LocalDisk_RuntimeGuestOsFeature.fromJSON(e))
        : [],
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      initializeParams: isSet(object.initializeParams)
        ? LocalDiskInitializeParams.fromJSON(object.initializeParams)
        : undefined,
      interface: isSet(object.interface) ? globalThis.String(object.interface) : "",
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      licenses: globalThis.Array.isArray(object?.licenses) ? object.licenses.map((e: any) => globalThis.String(e)) : [],
      mode: isSet(object.mode) ? globalThis.String(object.mode) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: LocalDisk): unknown {
    const obj: any = {};
    if (message.autoDelete !== false) {
      obj.autoDelete = message.autoDelete;
    }
    if (message.boot !== false) {
      obj.boot = message.boot;
    }
    if (message.deviceName !== "") {
      obj.deviceName = message.deviceName;
    }
    if (message.guestOsFeatures?.length) {
      obj.guestOsFeatures = message.guestOsFeatures.map((e) => LocalDisk_RuntimeGuestOsFeature.toJSON(e));
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.initializeParams !== undefined) {
      obj.initializeParams = LocalDiskInitializeParams.toJSON(message.initializeParams);
    }
    if (message.interface !== "") {
      obj.interface = message.interface;
    }
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.licenses?.length) {
      obj.licenses = message.licenses;
    }
    if (message.mode !== "") {
      obj.mode = message.mode;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create(base?: DeepPartial<LocalDisk>): LocalDisk {
    return LocalDisk.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalDisk>): LocalDisk {
    const message = createBaseLocalDisk();
    message.autoDelete = object.autoDelete ?? false;
    message.boot = object.boot ?? false;
    message.deviceName = object.deviceName ?? "";
    message.guestOsFeatures = object.guestOsFeatures?.map((e) => LocalDisk_RuntimeGuestOsFeature.fromPartial(e)) || [];
    message.index = object.index ?? 0;
    message.initializeParams = (object.initializeParams !== undefined && object.initializeParams !== null)
      ? LocalDiskInitializeParams.fromPartial(object.initializeParams)
      : undefined;
    message.interface = object.interface ?? "";
    message.kind = object.kind ?? "";
    message.licenses = object.licenses?.map((e) => e) || [];
    message.mode = object.mode ?? "";
    message.source = object.source ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseLocalDisk_RuntimeGuestOsFeature(): LocalDisk_RuntimeGuestOsFeature {
  return { type: "" };
}

export const LocalDisk_RuntimeGuestOsFeature: MessageFns<LocalDisk_RuntimeGuestOsFeature> = {
  encode(message: LocalDisk_RuntimeGuestOsFeature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalDisk_RuntimeGuestOsFeature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalDisk_RuntimeGuestOsFeature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalDisk_RuntimeGuestOsFeature {
    return { type: isSet(object.type) ? globalThis.String(object.type) : "" };
  },

  toJSON(message: LocalDisk_RuntimeGuestOsFeature): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create(base?: DeepPartial<LocalDisk_RuntimeGuestOsFeature>): LocalDisk_RuntimeGuestOsFeature {
    return LocalDisk_RuntimeGuestOsFeature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalDisk_RuntimeGuestOsFeature>): LocalDisk_RuntimeGuestOsFeature {
    const message = createBaseLocalDisk_RuntimeGuestOsFeature();
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseLocalDiskInitializeParams(): LocalDiskInitializeParams {
  return { description: "", diskName: "", diskSizeGb: Long.ZERO, diskType: 0, labels: {} };
}

export const LocalDiskInitializeParams: MessageFns<LocalDiskInitializeParams> = {
  encode(message: LocalDiskInitializeParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.diskName !== "") {
      writer.uint32(18).string(message.diskName);
    }
    if (!message.diskSizeGb.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.diskSizeGb.toString());
    }
    if (message.diskType !== 0) {
      writer.uint32(32).int32(message.diskType);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      LocalDiskInitializeParams_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalDiskInitializeParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalDiskInitializeParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.diskName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.diskSizeGb = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.diskType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = LocalDiskInitializeParams_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalDiskInitializeParams {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      diskName: isSet(object.diskName) ? globalThis.String(object.diskName) : "",
      diskSizeGb: isSet(object.diskSizeGb) ? Long.fromValue(object.diskSizeGb) : Long.ZERO,
      diskType: isSet(object.diskType) ? localDiskInitializeParams_DiskTypeFromJSON(object.diskType) : 0,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: LocalDiskInitializeParams): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.diskName !== "") {
      obj.diskName = message.diskName;
    }
    if (!message.diskSizeGb.equals(Long.ZERO)) {
      obj.diskSizeGb = (message.diskSizeGb || Long.ZERO).toString();
    }
    if (message.diskType !== 0) {
      obj.diskType = localDiskInitializeParams_DiskTypeToJSON(message.diskType);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<LocalDiskInitializeParams>): LocalDiskInitializeParams {
    return LocalDiskInitializeParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalDiskInitializeParams>): LocalDiskInitializeParams {
    const message = createBaseLocalDiskInitializeParams();
    message.description = object.description ?? "";
    message.diskName = object.diskName ?? "";
    message.diskSizeGb = (object.diskSizeGb !== undefined && object.diskSizeGb !== null)
      ? Long.fromValue(object.diskSizeGb)
      : Long.ZERO;
    message.diskType = object.diskType ?? 0;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseLocalDiskInitializeParams_LabelsEntry(): LocalDiskInitializeParams_LabelsEntry {
  return { key: "", value: "" };
}

export const LocalDiskInitializeParams_LabelsEntry: MessageFns<LocalDiskInitializeParams_LabelsEntry> = {
  encode(message: LocalDiskInitializeParams_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalDiskInitializeParams_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalDiskInitializeParams_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalDiskInitializeParams_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LocalDiskInitializeParams_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<LocalDiskInitializeParams_LabelsEntry>): LocalDiskInitializeParams_LabelsEntry {
    return LocalDiskInitializeParams_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocalDiskInitializeParams_LabelsEntry>): LocalDiskInitializeParams_LabelsEntry {
    const message = createBaseLocalDiskInitializeParams_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRuntimeAccessConfig(): RuntimeAccessConfig {
  return { accessType: 0, runtimeOwner: "", proxyUri: "" };
}

export const RuntimeAccessConfig: MessageFns<RuntimeAccessConfig> = {
  encode(message: RuntimeAccessConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessType !== 0) {
      writer.uint32(8).int32(message.accessType);
    }
    if (message.runtimeOwner !== "") {
      writer.uint32(18).string(message.runtimeOwner);
    }
    if (message.proxyUri !== "") {
      writer.uint32(26).string(message.proxyUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeAccessConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeAccessConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.accessType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.runtimeOwner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.proxyUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeAccessConfig {
    return {
      accessType: isSet(object.accessType) ? runtimeAccessConfig_RuntimeAccessTypeFromJSON(object.accessType) : 0,
      runtimeOwner: isSet(object.runtimeOwner) ? globalThis.String(object.runtimeOwner) : "",
      proxyUri: isSet(object.proxyUri) ? globalThis.String(object.proxyUri) : "",
    };
  },

  toJSON(message: RuntimeAccessConfig): unknown {
    const obj: any = {};
    if (message.accessType !== 0) {
      obj.accessType = runtimeAccessConfig_RuntimeAccessTypeToJSON(message.accessType);
    }
    if (message.runtimeOwner !== "") {
      obj.runtimeOwner = message.runtimeOwner;
    }
    if (message.proxyUri !== "") {
      obj.proxyUri = message.proxyUri;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeAccessConfig>): RuntimeAccessConfig {
    return RuntimeAccessConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeAccessConfig>): RuntimeAccessConfig {
    const message = createBaseRuntimeAccessConfig();
    message.accessType = object.accessType ?? 0;
    message.runtimeOwner = object.runtimeOwner ?? "";
    message.proxyUri = object.proxyUri ?? "";
    return message;
  },
};

function createBaseRuntimeSoftwareConfig(): RuntimeSoftwareConfig {
  return {
    notebookUpgradeSchedule: "",
    enableHealthMonitoring: undefined,
    idleShutdown: undefined,
    idleShutdownTimeout: 0,
    installGpuDriver: false,
    customGpuDriverPath: "",
    postStartupScript: "",
    kernels: [],
    upgradeable: undefined,
    postStartupScriptBehavior: 0,
    disableTerminal: undefined,
    version: undefined,
  };
}

export const RuntimeSoftwareConfig: MessageFns<RuntimeSoftwareConfig> = {
  encode(message: RuntimeSoftwareConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notebookUpgradeSchedule !== "") {
      writer.uint32(10).string(message.notebookUpgradeSchedule);
    }
    if (message.enableHealthMonitoring !== undefined) {
      writer.uint32(16).bool(message.enableHealthMonitoring);
    }
    if (message.idleShutdown !== undefined) {
      writer.uint32(24).bool(message.idleShutdown);
    }
    if (message.idleShutdownTimeout !== 0) {
      writer.uint32(32).int32(message.idleShutdownTimeout);
    }
    if (message.installGpuDriver !== false) {
      writer.uint32(40).bool(message.installGpuDriver);
    }
    if (message.customGpuDriverPath !== "") {
      writer.uint32(50).string(message.customGpuDriverPath);
    }
    if (message.postStartupScript !== "") {
      writer.uint32(58).string(message.postStartupScript);
    }
    for (const v of message.kernels) {
      ContainerImage.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.upgradeable !== undefined) {
      writer.uint32(72).bool(message.upgradeable);
    }
    if (message.postStartupScriptBehavior !== 0) {
      writer.uint32(80).int32(message.postStartupScriptBehavior);
    }
    if (message.disableTerminal !== undefined) {
      writer.uint32(88).bool(message.disableTerminal);
    }
    if (message.version !== undefined) {
      writer.uint32(98).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeSoftwareConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeSoftwareConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notebookUpgradeSchedule = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.enableHealthMonitoring = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.idleShutdown = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.idleShutdownTimeout = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.installGpuDriver = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.customGpuDriverPath = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.postStartupScript = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.kernels.push(ContainerImage.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.upgradeable = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.postStartupScriptBehavior = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.disableTerminal = reader.bool();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeSoftwareConfig {
    return {
      notebookUpgradeSchedule: isSet(object.notebookUpgradeSchedule)
        ? globalThis.String(object.notebookUpgradeSchedule)
        : "",
      enableHealthMonitoring: isSet(object.enableHealthMonitoring)
        ? globalThis.Boolean(object.enableHealthMonitoring)
        : undefined,
      idleShutdown: isSet(object.idleShutdown) ? globalThis.Boolean(object.idleShutdown) : undefined,
      idleShutdownTimeout: isSet(object.idleShutdownTimeout) ? globalThis.Number(object.idleShutdownTimeout) : 0,
      installGpuDriver: isSet(object.installGpuDriver) ? globalThis.Boolean(object.installGpuDriver) : false,
      customGpuDriverPath: isSet(object.customGpuDriverPath) ? globalThis.String(object.customGpuDriverPath) : "",
      postStartupScript: isSet(object.postStartupScript) ? globalThis.String(object.postStartupScript) : "",
      kernels: globalThis.Array.isArray(object?.kernels)
        ? object.kernels.map((e: any) => ContainerImage.fromJSON(e))
        : [],
      upgradeable: isSet(object.upgradeable) ? globalThis.Boolean(object.upgradeable) : undefined,
      postStartupScriptBehavior: isSet(object.postStartupScriptBehavior)
        ? runtimeSoftwareConfig_PostStartupScriptBehaviorFromJSON(object.postStartupScriptBehavior)
        : 0,
      disableTerminal: isSet(object.disableTerminal) ? globalThis.Boolean(object.disableTerminal) : undefined,
      version: isSet(object.version) ? globalThis.String(object.version) : undefined,
    };
  },

  toJSON(message: RuntimeSoftwareConfig): unknown {
    const obj: any = {};
    if (message.notebookUpgradeSchedule !== "") {
      obj.notebookUpgradeSchedule = message.notebookUpgradeSchedule;
    }
    if (message.enableHealthMonitoring !== undefined) {
      obj.enableHealthMonitoring = message.enableHealthMonitoring;
    }
    if (message.idleShutdown !== undefined) {
      obj.idleShutdown = message.idleShutdown;
    }
    if (message.idleShutdownTimeout !== 0) {
      obj.idleShutdownTimeout = Math.round(message.idleShutdownTimeout);
    }
    if (message.installGpuDriver !== false) {
      obj.installGpuDriver = message.installGpuDriver;
    }
    if (message.customGpuDriverPath !== "") {
      obj.customGpuDriverPath = message.customGpuDriverPath;
    }
    if (message.postStartupScript !== "") {
      obj.postStartupScript = message.postStartupScript;
    }
    if (message.kernels?.length) {
      obj.kernels = message.kernels.map((e) => ContainerImage.toJSON(e));
    }
    if (message.upgradeable !== undefined) {
      obj.upgradeable = message.upgradeable;
    }
    if (message.postStartupScriptBehavior !== 0) {
      obj.postStartupScriptBehavior = runtimeSoftwareConfig_PostStartupScriptBehaviorToJSON(
        message.postStartupScriptBehavior,
      );
    }
    if (message.disableTerminal !== undefined) {
      obj.disableTerminal = message.disableTerminal;
    }
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeSoftwareConfig>): RuntimeSoftwareConfig {
    return RuntimeSoftwareConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeSoftwareConfig>): RuntimeSoftwareConfig {
    const message = createBaseRuntimeSoftwareConfig();
    message.notebookUpgradeSchedule = object.notebookUpgradeSchedule ?? "";
    message.enableHealthMonitoring = object.enableHealthMonitoring ?? undefined;
    message.idleShutdown = object.idleShutdown ?? undefined;
    message.idleShutdownTimeout = object.idleShutdownTimeout ?? 0;
    message.installGpuDriver = object.installGpuDriver ?? false;
    message.customGpuDriverPath = object.customGpuDriverPath ?? "";
    message.postStartupScript = object.postStartupScript ?? "";
    message.kernels = object.kernels?.map((e) => ContainerImage.fromPartial(e)) || [];
    message.upgradeable = object.upgradeable ?? undefined;
    message.postStartupScriptBehavior = object.postStartupScriptBehavior ?? 0;
    message.disableTerminal = object.disableTerminal ?? undefined;
    message.version = object.version ?? undefined;
    return message;
  },
};

function createBaseRuntimeMetrics(): RuntimeMetrics {
  return { systemMetrics: {} };
}

export const RuntimeMetrics: MessageFns<RuntimeMetrics> = {
  encode(message: RuntimeMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.systemMetrics).forEach(([key, value]) => {
      RuntimeMetrics_SystemMetricsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = RuntimeMetrics_SystemMetricsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.systemMetrics[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeMetrics {
    return {
      systemMetrics: isObject(object.systemMetrics)
        ? Object.entries(object.systemMetrics).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: RuntimeMetrics): unknown {
    const obj: any = {};
    if (message.systemMetrics) {
      const entries = Object.entries(message.systemMetrics);
      if (entries.length > 0) {
        obj.systemMetrics = {};
        entries.forEach(([k, v]) => {
          obj.systemMetrics[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeMetrics>): RuntimeMetrics {
    return RuntimeMetrics.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeMetrics>): RuntimeMetrics {
    const message = createBaseRuntimeMetrics();
    message.systemMetrics = Object.entries(object.systemMetrics ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseRuntimeMetrics_SystemMetricsEntry(): RuntimeMetrics_SystemMetricsEntry {
  return { key: "", value: "" };
}

export const RuntimeMetrics_SystemMetricsEntry: MessageFns<RuntimeMetrics_SystemMetricsEntry> = {
  encode(message: RuntimeMetrics_SystemMetricsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeMetrics_SystemMetricsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeMetrics_SystemMetricsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeMetrics_SystemMetricsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RuntimeMetrics_SystemMetricsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeMetrics_SystemMetricsEntry>): RuntimeMetrics_SystemMetricsEntry {
    return RuntimeMetrics_SystemMetricsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeMetrics_SystemMetricsEntry>): RuntimeMetrics_SystemMetricsEntry {
    const message = createBaseRuntimeMetrics_SystemMetricsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRuntimeShieldedInstanceConfig(): RuntimeShieldedInstanceConfig {
  return { enableSecureBoot: false, enableVtpm: false, enableIntegrityMonitoring: false };
}

export const RuntimeShieldedInstanceConfig: MessageFns<RuntimeShieldedInstanceConfig> = {
  encode(message: RuntimeShieldedInstanceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableSecureBoot !== false) {
      writer.uint32(8).bool(message.enableSecureBoot);
    }
    if (message.enableVtpm !== false) {
      writer.uint32(16).bool(message.enableVtpm);
    }
    if (message.enableIntegrityMonitoring !== false) {
      writer.uint32(24).bool(message.enableIntegrityMonitoring);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeShieldedInstanceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeShieldedInstanceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableSecureBoot = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.enableVtpm = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enableIntegrityMonitoring = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeShieldedInstanceConfig {
    return {
      enableSecureBoot: isSet(object.enableSecureBoot) ? globalThis.Boolean(object.enableSecureBoot) : false,
      enableVtpm: isSet(object.enableVtpm) ? globalThis.Boolean(object.enableVtpm) : false,
      enableIntegrityMonitoring: isSet(object.enableIntegrityMonitoring)
        ? globalThis.Boolean(object.enableIntegrityMonitoring)
        : false,
    };
  },

  toJSON(message: RuntimeShieldedInstanceConfig): unknown {
    const obj: any = {};
    if (message.enableSecureBoot !== false) {
      obj.enableSecureBoot = message.enableSecureBoot;
    }
    if (message.enableVtpm !== false) {
      obj.enableVtpm = message.enableVtpm;
    }
    if (message.enableIntegrityMonitoring !== false) {
      obj.enableIntegrityMonitoring = message.enableIntegrityMonitoring;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeShieldedInstanceConfig>): RuntimeShieldedInstanceConfig {
    return RuntimeShieldedInstanceConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeShieldedInstanceConfig>): RuntimeShieldedInstanceConfig {
    const message = createBaseRuntimeShieldedInstanceConfig();
    message.enableSecureBoot = object.enableSecureBoot ?? false;
    message.enableVtpm = object.enableVtpm ?? false;
    message.enableIntegrityMonitoring = object.enableIntegrityMonitoring ?? false;
    return message;
  },
};

function createBaseVirtualMachine(): VirtualMachine {
  return { instanceName: "", instanceId: "", virtualMachineConfig: undefined };
}

export const VirtualMachine: MessageFns<VirtualMachine> = {
  encode(message: VirtualMachine, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceName !== "") {
      writer.uint32(10).string(message.instanceName);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    if (message.virtualMachineConfig !== undefined) {
      VirtualMachineConfig.encode(message.virtualMachineConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualMachine {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualMachine();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instanceName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.virtualMachineConfig = VirtualMachineConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualMachine {
    return {
      instanceName: isSet(object.instanceName) ? globalThis.String(object.instanceName) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      virtualMachineConfig: isSet(object.virtualMachineConfig)
        ? VirtualMachineConfig.fromJSON(object.virtualMachineConfig)
        : undefined,
    };
  },

  toJSON(message: VirtualMachine): unknown {
    const obj: any = {};
    if (message.instanceName !== "") {
      obj.instanceName = message.instanceName;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.virtualMachineConfig !== undefined) {
      obj.virtualMachineConfig = VirtualMachineConfig.toJSON(message.virtualMachineConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<VirtualMachine>): VirtualMachine {
    return VirtualMachine.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VirtualMachine>): VirtualMachine {
    const message = createBaseVirtualMachine();
    message.instanceName = object.instanceName ?? "";
    message.instanceId = object.instanceId ?? "";
    message.virtualMachineConfig = (object.virtualMachineConfig !== undefined && object.virtualMachineConfig !== null)
      ? VirtualMachineConfig.fromPartial(object.virtualMachineConfig)
      : undefined;
    return message;
  },
};

function createBaseVirtualMachineConfig(): VirtualMachineConfig {
  return {
    zone: "",
    machineType: "",
    containerImages: [],
    dataDisk: undefined,
    encryptionConfig: undefined,
    shieldedInstanceConfig: undefined,
    acceleratorConfig: undefined,
    network: "",
    subnet: "",
    internalIpOnly: false,
    tags: [],
    guestAttributes: {},
    metadata: {},
    labels: {},
    nicType: 0,
    reservedIpRange: "",
    bootImage: undefined,
  };
}

export const VirtualMachineConfig: MessageFns<VirtualMachineConfig> = {
  encode(message: VirtualMachineConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.zone !== "") {
      writer.uint32(10).string(message.zone);
    }
    if (message.machineType !== "") {
      writer.uint32(18).string(message.machineType);
    }
    for (const v of message.containerImages) {
      ContainerImage.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.dataDisk !== undefined) {
      LocalDisk.encode(message.dataDisk, writer.uint32(34).fork()).join();
    }
    if (message.encryptionConfig !== undefined) {
      EncryptionConfig.encode(message.encryptionConfig, writer.uint32(42).fork()).join();
    }
    if (message.shieldedInstanceConfig !== undefined) {
      RuntimeShieldedInstanceConfig.encode(message.shieldedInstanceConfig, writer.uint32(50).fork()).join();
    }
    if (message.acceleratorConfig !== undefined) {
      RuntimeAcceleratorConfig.encode(message.acceleratorConfig, writer.uint32(58).fork()).join();
    }
    if (message.network !== "") {
      writer.uint32(66).string(message.network);
    }
    if (message.subnet !== "") {
      writer.uint32(74).string(message.subnet);
    }
    if (message.internalIpOnly !== false) {
      writer.uint32(80).bool(message.internalIpOnly);
    }
    for (const v of message.tags) {
      writer.uint32(106).string(v!);
    }
    Object.entries(message.guestAttributes).forEach(([key, value]) => {
      VirtualMachineConfig_GuestAttributesEntry.encode({ key: key as any, value }, writer.uint32(114).fork()).join();
    });
    Object.entries(message.metadata).forEach(([key, value]) => {
      VirtualMachineConfig_MetadataEntry.encode({ key: key as any, value }, writer.uint32(122).fork()).join();
    });
    Object.entries(message.labels).forEach(([key, value]) => {
      VirtualMachineConfig_LabelsEntry.encode({ key: key as any, value }, writer.uint32(130).fork()).join();
    });
    if (message.nicType !== 0) {
      writer.uint32(136).int32(message.nicType);
    }
    if (message.reservedIpRange !== "") {
      writer.uint32(146).string(message.reservedIpRange);
    }
    if (message.bootImage !== undefined) {
      VirtualMachineConfig_BootImage.encode(message.bootImage, writer.uint32(154).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualMachineConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualMachineConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.zone = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.machineType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.containerImages.push(ContainerImage.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataDisk = LocalDisk.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.encryptionConfig = EncryptionConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.shieldedInstanceConfig = RuntimeShieldedInstanceConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.acceleratorConfig = RuntimeAcceleratorConfig.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.network = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.subnet = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.internalIpOnly = reader.bool();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          const entry14 = VirtualMachineConfig_GuestAttributesEntry.decode(reader, reader.uint32());
          if (entry14.value !== undefined) {
            message.guestAttributes[entry14.key] = entry14.value;
          }
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          const entry15 = VirtualMachineConfig_MetadataEntry.decode(reader, reader.uint32());
          if (entry15.value !== undefined) {
            message.metadata[entry15.key] = entry15.value;
          }
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          const entry16 = VirtualMachineConfig_LabelsEntry.decode(reader, reader.uint32());
          if (entry16.value !== undefined) {
            message.labels[entry16.key] = entry16.value;
          }
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.nicType = reader.int32() as any;
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.reservedIpRange = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.bootImage = VirtualMachineConfig_BootImage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualMachineConfig {
    return {
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      machineType: isSet(object.machineType) ? globalThis.String(object.machineType) : "",
      containerImages: globalThis.Array.isArray(object?.containerImages)
        ? object.containerImages.map((e: any) => ContainerImage.fromJSON(e))
        : [],
      dataDisk: isSet(object.dataDisk) ? LocalDisk.fromJSON(object.dataDisk) : undefined,
      encryptionConfig: isSet(object.encryptionConfig) ? EncryptionConfig.fromJSON(object.encryptionConfig) : undefined,
      shieldedInstanceConfig: isSet(object.shieldedInstanceConfig)
        ? RuntimeShieldedInstanceConfig.fromJSON(object.shieldedInstanceConfig)
        : undefined,
      acceleratorConfig: isSet(object.acceleratorConfig)
        ? RuntimeAcceleratorConfig.fromJSON(object.acceleratorConfig)
        : undefined,
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      subnet: isSet(object.subnet) ? globalThis.String(object.subnet) : "",
      internalIpOnly: isSet(object.internalIpOnly) ? globalThis.Boolean(object.internalIpOnly) : false,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      guestAttributes: isObject(object.guestAttributes)
        ? Object.entries(object.guestAttributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      nicType: isSet(object.nicType) ? virtualMachineConfig_NicTypeFromJSON(object.nicType) : 0,
      reservedIpRange: isSet(object.reservedIpRange) ? globalThis.String(object.reservedIpRange) : "",
      bootImage: isSet(object.bootImage) ? VirtualMachineConfig_BootImage.fromJSON(object.bootImage) : undefined,
    };
  },

  toJSON(message: VirtualMachineConfig): unknown {
    const obj: any = {};
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.machineType !== "") {
      obj.machineType = message.machineType;
    }
    if (message.containerImages?.length) {
      obj.containerImages = message.containerImages.map((e) => ContainerImage.toJSON(e));
    }
    if (message.dataDisk !== undefined) {
      obj.dataDisk = LocalDisk.toJSON(message.dataDisk);
    }
    if (message.encryptionConfig !== undefined) {
      obj.encryptionConfig = EncryptionConfig.toJSON(message.encryptionConfig);
    }
    if (message.shieldedInstanceConfig !== undefined) {
      obj.shieldedInstanceConfig = RuntimeShieldedInstanceConfig.toJSON(message.shieldedInstanceConfig);
    }
    if (message.acceleratorConfig !== undefined) {
      obj.acceleratorConfig = RuntimeAcceleratorConfig.toJSON(message.acceleratorConfig);
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.subnet !== "") {
      obj.subnet = message.subnet;
    }
    if (message.internalIpOnly !== false) {
      obj.internalIpOnly = message.internalIpOnly;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.guestAttributes) {
      const entries = Object.entries(message.guestAttributes);
      if (entries.length > 0) {
        obj.guestAttributes = {};
        entries.forEach(([k, v]) => {
          obj.guestAttributes[k] = v;
        });
      }
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.nicType !== 0) {
      obj.nicType = virtualMachineConfig_NicTypeToJSON(message.nicType);
    }
    if (message.reservedIpRange !== "") {
      obj.reservedIpRange = message.reservedIpRange;
    }
    if (message.bootImage !== undefined) {
      obj.bootImage = VirtualMachineConfig_BootImage.toJSON(message.bootImage);
    }
    return obj;
  },

  create(base?: DeepPartial<VirtualMachineConfig>): VirtualMachineConfig {
    return VirtualMachineConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VirtualMachineConfig>): VirtualMachineConfig {
    const message = createBaseVirtualMachineConfig();
    message.zone = object.zone ?? "";
    message.machineType = object.machineType ?? "";
    message.containerImages = object.containerImages?.map((e) => ContainerImage.fromPartial(e)) || [];
    message.dataDisk = (object.dataDisk !== undefined && object.dataDisk !== null)
      ? LocalDisk.fromPartial(object.dataDisk)
      : undefined;
    message.encryptionConfig = (object.encryptionConfig !== undefined && object.encryptionConfig !== null)
      ? EncryptionConfig.fromPartial(object.encryptionConfig)
      : undefined;
    message.shieldedInstanceConfig =
      (object.shieldedInstanceConfig !== undefined && object.shieldedInstanceConfig !== null)
        ? RuntimeShieldedInstanceConfig.fromPartial(object.shieldedInstanceConfig)
        : undefined;
    message.acceleratorConfig = (object.acceleratorConfig !== undefined && object.acceleratorConfig !== null)
      ? RuntimeAcceleratorConfig.fromPartial(object.acceleratorConfig)
      : undefined;
    message.network = object.network ?? "";
    message.subnet = object.subnet ?? "";
    message.internalIpOnly = object.internalIpOnly ?? false;
    message.tags = object.tags?.map((e) => e) || [];
    message.guestAttributes = Object.entries(object.guestAttributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.nicType = object.nicType ?? 0;
    message.reservedIpRange = object.reservedIpRange ?? "";
    message.bootImage = (object.bootImage !== undefined && object.bootImage !== null)
      ? VirtualMachineConfig_BootImage.fromPartial(object.bootImage)
      : undefined;
    return message;
  },
};

function createBaseVirtualMachineConfig_BootImage(): VirtualMachineConfig_BootImage {
  return {};
}

export const VirtualMachineConfig_BootImage: MessageFns<VirtualMachineConfig_BootImage> = {
  encode(_: VirtualMachineConfig_BootImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualMachineConfig_BootImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualMachineConfig_BootImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VirtualMachineConfig_BootImage {
    return {};
  },

  toJSON(_: VirtualMachineConfig_BootImage): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<VirtualMachineConfig_BootImage>): VirtualMachineConfig_BootImage {
    return VirtualMachineConfig_BootImage.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<VirtualMachineConfig_BootImage>): VirtualMachineConfig_BootImage {
    const message = createBaseVirtualMachineConfig_BootImage();
    return message;
  },
};

function createBaseVirtualMachineConfig_GuestAttributesEntry(): VirtualMachineConfig_GuestAttributesEntry {
  return { key: "", value: "" };
}

export const VirtualMachineConfig_GuestAttributesEntry: MessageFns<VirtualMachineConfig_GuestAttributesEntry> = {
  encode(message: VirtualMachineConfig_GuestAttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualMachineConfig_GuestAttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualMachineConfig_GuestAttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualMachineConfig_GuestAttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: VirtualMachineConfig_GuestAttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<VirtualMachineConfig_GuestAttributesEntry>): VirtualMachineConfig_GuestAttributesEntry {
    return VirtualMachineConfig_GuestAttributesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<VirtualMachineConfig_GuestAttributesEntry>,
  ): VirtualMachineConfig_GuestAttributesEntry {
    const message = createBaseVirtualMachineConfig_GuestAttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseVirtualMachineConfig_MetadataEntry(): VirtualMachineConfig_MetadataEntry {
  return { key: "", value: "" };
}

export const VirtualMachineConfig_MetadataEntry: MessageFns<VirtualMachineConfig_MetadataEntry> = {
  encode(message: VirtualMachineConfig_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualMachineConfig_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualMachineConfig_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualMachineConfig_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: VirtualMachineConfig_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<VirtualMachineConfig_MetadataEntry>): VirtualMachineConfig_MetadataEntry {
    return VirtualMachineConfig_MetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VirtualMachineConfig_MetadataEntry>): VirtualMachineConfig_MetadataEntry {
    const message = createBaseVirtualMachineConfig_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseVirtualMachineConfig_LabelsEntry(): VirtualMachineConfig_LabelsEntry {
  return { key: "", value: "" };
}

export const VirtualMachineConfig_LabelsEntry: MessageFns<VirtualMachineConfig_LabelsEntry> = {
  encode(message: VirtualMachineConfig_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualMachineConfig_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualMachineConfig_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualMachineConfig_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: VirtualMachineConfig_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<VirtualMachineConfig_LabelsEntry>): VirtualMachineConfig_LabelsEntry {
    return VirtualMachineConfig_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VirtualMachineConfig_LabelsEntry>): VirtualMachineConfig_LabelsEntry {
    const message = createBaseVirtualMachineConfig_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
