// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/notebooks/v1beta1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Environment } from "./environment.js";
import {
  Instance,
  Instance_AcceleratorType,
  instance_AcceleratorTypeFromJSON,
  instance_AcceleratorTypeToJSON,
} from "./instance.js";

export const protobufPackage = "google.cloud.notebooks.v1beta1";

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Server-defined resource path for the target of the operation. */
  target: string;
  /** Name of the verb executed by the operation. */
  verb: string;
  /** Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** API version used to start the operation. */
  apiVersion: string;
  /** API endpoint name of this operation. */
  endpoint: string;
}

/** Request for listing notebook instances. */
export interface ListInstancesRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Maximum return size of the list call. */
  pageSize: number;
  /**
   * A previous returned page token that can be used to continue listing
   * from the last result.
   */
  pageToken: string;
}

/** Response for listing notebook instances. */
export interface ListInstancesResponse {
  /** A list of returned instances. */
  instances: Instance[];
  /**
   * Page token that can be used to continue listing from the last result in the
   * next list call.
   */
  nextPageToken: string;
  /**
   * Locations that could not be reached. For example,
   * `['us-west1-a', 'us-central1-b']`.
   * A ListInstancesResponse will only contain either instances or unreachables,
   */
  unreachable: string[];
}

/** Request for getting a notebook instance. */
export interface GetInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for creating a notebook instance. */
export interface CreateInstanceRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Required. User-defined unique ID of this instance. */
  instanceId: string;
  /** Required. The instance to be created. */
  instance: Instance | undefined;
}

/** Request for registering a notebook instance. */
export interface RegisterInstanceRequest {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   */
  parent: string;
  /**
   * Required. User defined unique ID of this instance. The `instance_id` must
   * be 1 to 63 characters long and contain only lowercase letters,
   * numeric characters, and dashes. The first character must be a lowercase
   * letter and the last character cannot be a dash.
   */
  instanceId: string;
}

/** Request for setting instance accelerator. */
export interface SetInstanceAcceleratorRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /** Required. Type of this accelerator. */
  type: Instance_AcceleratorType;
  /**
   * Required. Count of cores of this accelerator. Note that not all combinations
   * of `type` and `core_count` are valid. Check [GPUs on
   * Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to
   * find a valid combination. TPUs are not supported.
   */
  coreCount: Long;
}

/** Request for setting instance machine type. */
export interface SetInstanceMachineTypeRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /**
   * Required. The [Compute Engine machine
   * type](https://cloud.google.com/compute/docs/machine-types).
   */
  machineType: string;
}

/** Request for setting instance labels. */
export interface SetInstanceLabelsRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /**
   * Labels to apply to this instance.
   * These can be later modified by the setLabels method
   */
  labels: { [key: string]: string };
}

export interface SetInstanceLabelsRequest_LabelsEntry {
  key: string;
  value: string;
}

/** Request for deleting a notebook instance. */
export interface DeleteInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for starting a notebook instance */
export interface StartInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for stopping a notebook instance */
export interface StopInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for reseting a notebook instance */
export interface ResetInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for notebook instances to report information to Notebooks API. */
export interface ReportInstanceInfoRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /**
   * Required. The VM hardware token for authenticating the VM.
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   */
  vmId: string;
  /**
   * The metadata reported to Notebooks API. This will be merged to the instance
   * metadata store
   */
  metadata: { [key: string]: string };
}

export interface ReportInstanceInfoRequest_MetadataEntry {
  key: string;
  value: string;
}

/** Request for checking if a notebook instance is upgradeable. */
export interface IsInstanceUpgradeableRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  notebookInstance: string;
}

/** Response for checking if a notebook instance is upgradeable. */
export interface IsInstanceUpgradeableResponse {
  /** If an instance is upgradeable. */
  upgradeable: boolean;
  /**
   * The version this instance will be upgraded to if calling the upgrade
   * endpoint. This field will only be populated if field upgradeable is true.
   */
  upgradeVersion: string;
  /** Additional information about upgrade. */
  upgradeInfo: string;
  /**
   * The new image self link this instance will be upgraded to if calling the
   * upgrade endpoint. This field will only be populated if field upgradeable
   * is true.
   */
  upgradeImage: string;
}

/** Request for upgrading a notebook instance */
export interface UpgradeInstanceRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
}

/** Request for upgrading a notebook instance from within the VM */
export interface UpgradeInstanceInternalRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   */
  name: string;
  /**
   * Required. The VM hardware token for authenticating the VM.
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   */
  vmId: string;
}

/** Request for listing environments. */
export interface ListEnvironmentsRequest {
  /** Required. Format: `projects/{project_id}/locations/{location}` */
  parent: string;
  /** Maximum return size of the list call. */
  pageSize: number;
  /**
   * A previous returned page token that can be used to continue listing from
   * the last result.
   */
  pageToken: string;
}

/** Response for listing environments. */
export interface ListEnvironmentsResponse {
  /** A list of returned environments. */
  environments: Environment[];
  /**
   * A page token that can be used to continue listing from the last result
   * in the next list call.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for getting a notebook environment. */
export interface GetEnvironmentRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/environments/{environment_id}`
   */
  name: string;
}

/** Request for creating a notebook environment. */
export interface CreateEnvironmentRequest {
  /** Required. Format: `projects/{project_id}/locations/{location}` */
  parent: string;
  /**
   * Required. User-defined unique ID of this environment. The `environment_id` must
   * be 1 to 63 characters long and contain only lowercase letters,
   * numeric characters, and dashes. The first character must be a lowercase
   * letter and the last character cannot be a dash.
   */
  environmentId: string;
  /** Required. The environment to be created. */
  environment: Environment | undefined;
}

/** Request for deleting a notebook environment. */
export interface DeleteEnvironmentRequest {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/environments/{environment_id}`
   */
  name: string;
}

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
    endpoint: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    if (message.endpoint !== "") {
      writer.uint32(66).string(message.endpoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.endpoint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    message.endpoint = object.endpoint ?? "";
    return message;
  },
};

function createBaseListInstancesRequest(): ListInstancesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListInstancesRequest: MessageFns<ListInstancesRequest> = {
  encode(message: ListInstancesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstancesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstancesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListInstancesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstancesRequest>): ListInstancesRequest {
    return ListInstancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstancesRequest>): ListInstancesRequest {
    const message = createBaseListInstancesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListInstancesResponse(): ListInstancesResponse {
  return { instances: [], nextPageToken: "", unreachable: [] };
}

export const ListInstancesResponse: MessageFns<ListInstancesResponse> = {
  encode(message: ListInstancesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.instances) {
      Instance.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstancesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instances.push(Instance.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstancesResponse {
    return {
      instances: globalThis.Array.isArray(object?.instances)
        ? object.instances.map((e: any) => Instance.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListInstancesResponse): unknown {
    const obj: any = {};
    if (message.instances?.length) {
      obj.instances = message.instances.map((e) => Instance.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstancesResponse>): ListInstancesResponse {
    return ListInstancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstancesResponse>): ListInstancesResponse {
    const message = createBaseListInstancesResponse();
    message.instances = object.instances?.map((e) => Instance.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetInstanceRequest(): GetInstanceRequest {
  return { name: "" };
}

export const GetInstanceRequest: MessageFns<GetInstanceRequest> = {
  encode(message: GetInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInstanceRequest>): GetInstanceRequest {
    return GetInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInstanceRequest>): GetInstanceRequest {
    const message = createBaseGetInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateInstanceRequest(): CreateInstanceRequest {
  return { parent: "", instanceId: "", instance: undefined };
}

export const CreateInstanceRequest: MessageFns<CreateInstanceRequest> = {
  encode(message: CreateInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    if (message.instance !== undefined) {
      Instance.encode(message.instance, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.instance = Instance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInstanceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
    };
  },

  toJSON(message: CreateInstanceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.instance !== undefined) {
      obj.instance = Instance.toJSON(message.instance);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateInstanceRequest>): CreateInstanceRequest {
    return CreateInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateInstanceRequest>): CreateInstanceRequest {
    const message = createBaseCreateInstanceRequest();
    message.parent = object.parent ?? "";
    message.instanceId = object.instanceId ?? "";
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? Instance.fromPartial(object.instance)
      : undefined;
    return message;
  },
};

function createBaseRegisterInstanceRequest(): RegisterInstanceRequest {
  return { parent: "", instanceId: "" };
}

export const RegisterInstanceRequest: MessageFns<RegisterInstanceRequest> = {
  encode(message: RegisterInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterInstanceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
    };
  },

  toJSON(message: RegisterInstanceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    return obj;
  },

  create(base?: DeepPartial<RegisterInstanceRequest>): RegisterInstanceRequest {
    return RegisterInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegisterInstanceRequest>): RegisterInstanceRequest {
    const message = createBaseRegisterInstanceRequest();
    message.parent = object.parent ?? "";
    message.instanceId = object.instanceId ?? "";
    return message;
  },
};

function createBaseSetInstanceAcceleratorRequest(): SetInstanceAcceleratorRequest {
  return { name: "", type: 0, coreCount: Long.ZERO };
}

export const SetInstanceAcceleratorRequest: MessageFns<SetInstanceAcceleratorRequest> = {
  encode(message: SetInstanceAcceleratorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (!message.coreCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.coreCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInstanceAcceleratorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInstanceAcceleratorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.coreCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInstanceAcceleratorRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? instance_AcceleratorTypeFromJSON(object.type) : 0,
      coreCount: isSet(object.coreCount) ? Long.fromValue(object.coreCount) : Long.ZERO,
    };
  },

  toJSON(message: SetInstanceAcceleratorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = instance_AcceleratorTypeToJSON(message.type);
    }
    if (!message.coreCount.equals(Long.ZERO)) {
      obj.coreCount = (message.coreCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<SetInstanceAcceleratorRequest>): SetInstanceAcceleratorRequest {
    return SetInstanceAcceleratorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetInstanceAcceleratorRequest>): SetInstanceAcceleratorRequest {
    const message = createBaseSetInstanceAcceleratorRequest();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.coreCount = (object.coreCount !== undefined && object.coreCount !== null)
      ? Long.fromValue(object.coreCount)
      : Long.ZERO;
    return message;
  },
};

function createBaseSetInstanceMachineTypeRequest(): SetInstanceMachineTypeRequest {
  return { name: "", machineType: "" };
}

export const SetInstanceMachineTypeRequest: MessageFns<SetInstanceMachineTypeRequest> = {
  encode(message: SetInstanceMachineTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.machineType !== "") {
      writer.uint32(18).string(message.machineType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInstanceMachineTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInstanceMachineTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.machineType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInstanceMachineTypeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      machineType: isSet(object.machineType) ? globalThis.String(object.machineType) : "",
    };
  },

  toJSON(message: SetInstanceMachineTypeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.machineType !== "") {
      obj.machineType = message.machineType;
    }
    return obj;
  },

  create(base?: DeepPartial<SetInstanceMachineTypeRequest>): SetInstanceMachineTypeRequest {
    return SetInstanceMachineTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetInstanceMachineTypeRequest>): SetInstanceMachineTypeRequest {
    const message = createBaseSetInstanceMachineTypeRequest();
    message.name = object.name ?? "";
    message.machineType = object.machineType ?? "";
    return message;
  },
};

function createBaseSetInstanceLabelsRequest(): SetInstanceLabelsRequest {
  return { name: "", labels: {} };
}

export const SetInstanceLabelsRequest: MessageFns<SetInstanceLabelsRequest> = {
  encode(message: SetInstanceLabelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      SetInstanceLabelsRequest_LabelsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInstanceLabelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInstanceLabelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = SetInstanceLabelsRequest_LabelsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.labels[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInstanceLabelsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SetInstanceLabelsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<SetInstanceLabelsRequest>): SetInstanceLabelsRequest {
    return SetInstanceLabelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetInstanceLabelsRequest>): SetInstanceLabelsRequest {
    const message = createBaseSetInstanceLabelsRequest();
    message.name = object.name ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSetInstanceLabelsRequest_LabelsEntry(): SetInstanceLabelsRequest_LabelsEntry {
  return { key: "", value: "" };
}

export const SetInstanceLabelsRequest_LabelsEntry: MessageFns<SetInstanceLabelsRequest_LabelsEntry> = {
  encode(message: SetInstanceLabelsRequest_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetInstanceLabelsRequest_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInstanceLabelsRequest_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInstanceLabelsRequest_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SetInstanceLabelsRequest_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SetInstanceLabelsRequest_LabelsEntry>): SetInstanceLabelsRequest_LabelsEntry {
    return SetInstanceLabelsRequest_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetInstanceLabelsRequest_LabelsEntry>): SetInstanceLabelsRequest_LabelsEntry {
    const message = createBaseSetInstanceLabelsRequest_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDeleteInstanceRequest(): DeleteInstanceRequest {
  return { name: "" };
}

export const DeleteInstanceRequest: MessageFns<DeleteInstanceRequest> = {
  encode(message: DeleteInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteInstanceRequest>): DeleteInstanceRequest {
    return DeleteInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteInstanceRequest>): DeleteInstanceRequest {
    const message = createBaseDeleteInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStartInstanceRequest(): StartInstanceRequest {
  return { name: "" };
}

export const StartInstanceRequest: MessageFns<StartInstanceRequest> = {
  encode(message: StartInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StartInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StartInstanceRequest>): StartInstanceRequest {
    return StartInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartInstanceRequest>): StartInstanceRequest {
    const message = createBaseStartInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStopInstanceRequest(): StopInstanceRequest {
  return { name: "" };
}

export const StopInstanceRequest: MessageFns<StopInstanceRequest> = {
  encode(message: StopInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StopInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StopInstanceRequest>): StopInstanceRequest {
    return StopInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopInstanceRequest>): StopInstanceRequest {
    const message = createBaseStopInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResetInstanceRequest(): ResetInstanceRequest {
  return { name: "" };
}

export const ResetInstanceRequest: MessageFns<ResetInstanceRequest> = {
  encode(message: ResetInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ResetInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetInstanceRequest>): ResetInstanceRequest {
    return ResetInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetInstanceRequest>): ResetInstanceRequest {
    const message = createBaseResetInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseReportInstanceInfoRequest(): ReportInstanceInfoRequest {
  return { name: "", vmId: "", metadata: {} };
}

export const ReportInstanceInfoRequest: MessageFns<ReportInstanceInfoRequest> = {
  encode(message: ReportInstanceInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.vmId !== "") {
      writer.uint32(18).string(message.vmId);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      ReportInstanceInfoRequest_MetadataEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportInstanceInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportInstanceInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vmId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = ReportInstanceInfoRequest_MetadataEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.metadata[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportInstanceInfoRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      vmId: isSet(object.vmId) ? globalThis.String(object.vmId) : "",
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ReportInstanceInfoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.vmId !== "") {
      obj.vmId = message.vmId;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ReportInstanceInfoRequest>): ReportInstanceInfoRequest {
    return ReportInstanceInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportInstanceInfoRequest>): ReportInstanceInfoRequest {
    const message = createBaseReportInstanceInfoRequest();
    message.name = object.name ?? "";
    message.vmId = object.vmId ?? "";
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseReportInstanceInfoRequest_MetadataEntry(): ReportInstanceInfoRequest_MetadataEntry {
  return { key: "", value: "" };
}

export const ReportInstanceInfoRequest_MetadataEntry: MessageFns<ReportInstanceInfoRequest_MetadataEntry> = {
  encode(message: ReportInstanceInfoRequest_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportInstanceInfoRequest_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportInstanceInfoRequest_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportInstanceInfoRequest_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ReportInstanceInfoRequest_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportInstanceInfoRequest_MetadataEntry>): ReportInstanceInfoRequest_MetadataEntry {
    return ReportInstanceInfoRequest_MetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportInstanceInfoRequest_MetadataEntry>): ReportInstanceInfoRequest_MetadataEntry {
    const message = createBaseReportInstanceInfoRequest_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseIsInstanceUpgradeableRequest(): IsInstanceUpgradeableRequest {
  return { notebookInstance: "" };
}

export const IsInstanceUpgradeableRequest: MessageFns<IsInstanceUpgradeableRequest> = {
  encode(message: IsInstanceUpgradeableRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notebookInstance !== "") {
      writer.uint32(10).string(message.notebookInstance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsInstanceUpgradeableRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsInstanceUpgradeableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notebookInstance = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsInstanceUpgradeableRequest {
    return { notebookInstance: isSet(object.notebookInstance) ? globalThis.String(object.notebookInstance) : "" };
  },

  toJSON(message: IsInstanceUpgradeableRequest): unknown {
    const obj: any = {};
    if (message.notebookInstance !== "") {
      obj.notebookInstance = message.notebookInstance;
    }
    return obj;
  },

  create(base?: DeepPartial<IsInstanceUpgradeableRequest>): IsInstanceUpgradeableRequest {
    return IsInstanceUpgradeableRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsInstanceUpgradeableRequest>): IsInstanceUpgradeableRequest {
    const message = createBaseIsInstanceUpgradeableRequest();
    message.notebookInstance = object.notebookInstance ?? "";
    return message;
  },
};

function createBaseIsInstanceUpgradeableResponse(): IsInstanceUpgradeableResponse {
  return { upgradeable: false, upgradeVersion: "", upgradeInfo: "", upgradeImage: "" };
}

export const IsInstanceUpgradeableResponse: MessageFns<IsInstanceUpgradeableResponse> = {
  encode(message: IsInstanceUpgradeableResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.upgradeable !== false) {
      writer.uint32(8).bool(message.upgradeable);
    }
    if (message.upgradeVersion !== "") {
      writer.uint32(18).string(message.upgradeVersion);
    }
    if (message.upgradeInfo !== "") {
      writer.uint32(26).string(message.upgradeInfo);
    }
    if (message.upgradeImage !== "") {
      writer.uint32(34).string(message.upgradeImage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsInstanceUpgradeableResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsInstanceUpgradeableResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.upgradeable = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.upgradeVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.upgradeInfo = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.upgradeImage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsInstanceUpgradeableResponse {
    return {
      upgradeable: isSet(object.upgradeable) ? globalThis.Boolean(object.upgradeable) : false,
      upgradeVersion: isSet(object.upgradeVersion) ? globalThis.String(object.upgradeVersion) : "",
      upgradeInfo: isSet(object.upgradeInfo) ? globalThis.String(object.upgradeInfo) : "",
      upgradeImage: isSet(object.upgradeImage) ? globalThis.String(object.upgradeImage) : "",
    };
  },

  toJSON(message: IsInstanceUpgradeableResponse): unknown {
    const obj: any = {};
    if (message.upgradeable !== false) {
      obj.upgradeable = message.upgradeable;
    }
    if (message.upgradeVersion !== "") {
      obj.upgradeVersion = message.upgradeVersion;
    }
    if (message.upgradeInfo !== "") {
      obj.upgradeInfo = message.upgradeInfo;
    }
    if (message.upgradeImage !== "") {
      obj.upgradeImage = message.upgradeImage;
    }
    return obj;
  },

  create(base?: DeepPartial<IsInstanceUpgradeableResponse>): IsInstanceUpgradeableResponse {
    return IsInstanceUpgradeableResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsInstanceUpgradeableResponse>): IsInstanceUpgradeableResponse {
    const message = createBaseIsInstanceUpgradeableResponse();
    message.upgradeable = object.upgradeable ?? false;
    message.upgradeVersion = object.upgradeVersion ?? "";
    message.upgradeInfo = object.upgradeInfo ?? "";
    message.upgradeImage = object.upgradeImage ?? "";
    return message;
  },
};

function createBaseUpgradeInstanceRequest(): UpgradeInstanceRequest {
  return { name: "" };
}

export const UpgradeInstanceRequest: MessageFns<UpgradeInstanceRequest> = {
  encode(message: UpgradeInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UpgradeInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UpgradeInstanceRequest>): UpgradeInstanceRequest {
    return UpgradeInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpgradeInstanceRequest>): UpgradeInstanceRequest {
    const message = createBaseUpgradeInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpgradeInstanceInternalRequest(): UpgradeInstanceInternalRequest {
  return { name: "", vmId: "" };
}

export const UpgradeInstanceInternalRequest: MessageFns<UpgradeInstanceInternalRequest> = {
  encode(message: UpgradeInstanceInternalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.vmId !== "") {
      writer.uint32(18).string(message.vmId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeInstanceInternalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeInstanceInternalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vmId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeInstanceInternalRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      vmId: isSet(object.vmId) ? globalThis.String(object.vmId) : "",
    };
  },

  toJSON(message: UpgradeInstanceInternalRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.vmId !== "") {
      obj.vmId = message.vmId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpgradeInstanceInternalRequest>): UpgradeInstanceInternalRequest {
    return UpgradeInstanceInternalRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpgradeInstanceInternalRequest>): UpgradeInstanceInternalRequest {
    const message = createBaseUpgradeInstanceInternalRequest();
    message.name = object.name ?? "";
    message.vmId = object.vmId ?? "";
    return message;
  },
};

function createBaseListEnvironmentsRequest(): ListEnvironmentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEnvironmentsRequest: MessageFns<ListEnvironmentsRequest> = {
  encode(message: ListEnvironmentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnvironmentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnvironmentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnvironmentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEnvironmentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnvironmentsRequest>): ListEnvironmentsRequest {
    return ListEnvironmentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnvironmentsRequest>): ListEnvironmentsRequest {
    const message = createBaseListEnvironmentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEnvironmentsResponse(): ListEnvironmentsResponse {
  return { environments: [], nextPageToken: "", unreachable: [] };
}

export const ListEnvironmentsResponse: MessageFns<ListEnvironmentsResponse> = {
  encode(message: ListEnvironmentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.environments) {
      Environment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnvironmentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnvironmentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.environments.push(Environment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnvironmentsResponse {
    return {
      environments: globalThis.Array.isArray(object?.environments)
        ? object.environments.map((e: any) => Environment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListEnvironmentsResponse): unknown {
    const obj: any = {};
    if (message.environments?.length) {
      obj.environments = message.environments.map((e) => Environment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnvironmentsResponse>): ListEnvironmentsResponse {
    return ListEnvironmentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnvironmentsResponse>): ListEnvironmentsResponse {
    const message = createBaseListEnvironmentsResponse();
    message.environments = object.environments?.map((e) => Environment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetEnvironmentRequest(): GetEnvironmentRequest {
  return { name: "" };
}

export const GetEnvironmentRequest: MessageFns<GetEnvironmentRequest> = {
  encode(message: GetEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEnvironmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEnvironmentRequest>): GetEnvironmentRequest {
    return GetEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEnvironmentRequest>): GetEnvironmentRequest {
    const message = createBaseGetEnvironmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateEnvironmentRequest(): CreateEnvironmentRequest {
  return { parent: "", environmentId: "", environment: undefined };
}

export const CreateEnvironmentRequest: MessageFns<CreateEnvironmentRequest> = {
  encode(message: CreateEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.environmentId !== "") {
      writer.uint32(18).string(message.environmentId);
    }
    if (message.environment !== undefined) {
      Environment.encode(message.environment, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.environment = Environment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEnvironmentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      environment: isSet(object.environment) ? Environment.fromJSON(object.environment) : undefined,
    };
  },

  toJSON(message: CreateEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.environment !== undefined) {
      obj.environment = Environment.toJSON(message.environment);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEnvironmentRequest>): CreateEnvironmentRequest {
    return CreateEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEnvironmentRequest>): CreateEnvironmentRequest {
    const message = createBaseCreateEnvironmentRequest();
    message.parent = object.parent ?? "";
    message.environmentId = object.environmentId ?? "";
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? Environment.fromPartial(object.environment)
      : undefined;
    return message;
  },
};

function createBaseDeleteEnvironmentRequest(): DeleteEnvironmentRequest {
  return { name: "" };
}

export const DeleteEnvironmentRequest: MessageFns<DeleteEnvironmentRequest> = {
  encode(message: DeleteEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEnvironmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEnvironmentRequest>): DeleteEnvironmentRequest {
    return DeleteEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEnvironmentRequest>): DeleteEnvironmentRequest {
    const message = createBaseDeleteEnvironmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** API v1beta1 service for Cloud AI Platform Notebooks. */
export type NotebookServiceDefinition = typeof NotebookServiceDefinition;
export const NotebookServiceDefinition = {
  name: "NotebookService",
  fullName: "google.cloud.notebooks.v1beta1.NotebookService",
  methods: {
    /** Lists instances in a given project and location. */
    listInstances: {
      name: "ListInstances",
      requestType: ListInstancesRequest,
      requestStream: false,
      responseType: ListInstancesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Instance. */
    getInstance: {
      name: "GetInstance",
      requestType: GetInstanceRequest,
      requestStream: false,
      responseType: Instance,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Instance in a given project and location. */
    createInstance: {
      name: "CreateInstance",
      requestType: CreateInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              8,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              34,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Registers an existing legacy notebook instance to the Notebooks API server.
     * Legacy instances are instances created with the legacy Compute Engine
     * calls. They are not manageable by the Notebooks API out of the box. This
     * call makes these instances manageable by the Notebooks API.
     */
    registerInstance: {
      name: "RegisterInstance",
      requestType: RegisterInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              58,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
            ]),
          ],
        },
      },
    },
    /** Updates the guest accelerators of a single Instance. */
    setInstanceAccelerator: {
      name: "SetInstanceAccelerator",
      requestType: SetInstanceAcceleratorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              1,
              42,
              50,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              65,
              99,
              99,
              101,
              108,
              101,
              114,
              97,
              116,
              111,
              114,
            ]),
          ],
        },
      },
    },
    /** Updates the machine type of a single Instance. */
    setInstanceMachineType: {
      name: "SetInstanceMachineType",
      requestType: SetInstanceMachineTypeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              1,
              42,
              50,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              84,
              121,
              112,
              101,
            ]),
          ],
        },
      },
    },
    /** Updates the labels of an Instance. */
    setInstanceLabels: {
      name: "SetInstanceLabels",
      requestType: SetInstanceLabelsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              50,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              76,
              97,
              98,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Instance. */
    deleteInstance: {
      name: "DeleteInstance",
      requestType: DeleteInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Starts a notebook instance. */
    startInstance: {
      name: "StartInstance",
      requestType: StartInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Stops a notebook instance. */
    stopInstance: {
      name: "StopInstance",
      requestType: StopInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              111,
              112,
            ]),
          ],
        },
      },
    },
    /** Resets a notebook instance. */
    resetInstance: {
      name: "ResetInstance",
      requestType: ResetInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Allows notebook instances to
     * report their latest instance information to the Notebooks
     * API server. The server will merge the reported information to
     * the instance metadata store. Do not use this method directly.
     */
    reportInstanceInfo: {
      name: "ReportInstanceInfo",
      requestType: ReportInstanceInfoRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Check if a notebook instance is upgradable.
     * Deprecated. Please consider using v1.
     *
     * @deprecated
     */
    isInstanceUpgradeable: {
      name: "IsInstanceUpgradeable",
      requestType: IsInstanceUpgradeableRequest,
      requestStream: false,
      responseType: IsInstanceUpgradeableResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              79,
              18,
              77,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              105,
              115,
              85,
              112,
              103,
              114,
              97,
              100,
              101,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Upgrades a notebook instance to the latest version.
     * Deprecated. Please consider using v1.
     *
     * @deprecated
     */
    upgradeInstance: {
      name: "UpgradeInstance",
      requestType: UpgradeInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              103,
              114,
              97,
              100,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Allows notebook instances to
     * call this endpoint to upgrade themselves. Do not use this method directly.
     * Deprecated. Please consider using v1.
     *
     * @deprecated
     */
    upgradeInstanceInternal: {
      name: "UpgradeInstanceInternal",
      requestType: UpgradeInstanceInternalRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              1,
              42,
              34,
              66,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              103,
              114,
              97,
              100,
              101,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
            ]),
          ],
        },
      },
    },
    /** Lists environments in a project. */
    listEnvironments: {
      name: "ListEnvironments",
      requestType: ListEnvironmentsRequest,
      requestStream: false,
      responseType: ListEnvironmentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Environment. */
    getEnvironment: {
      name: "GetEnvironment",
      requestType: GetEnvironmentRequest,
      requestStream: false,
      responseType: Environment,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Environment. */
    createEnvironment: {
      name: "CreateEnvironment",
      requestType: CreateEnvironmentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              69,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              11,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Environment. */
    deleteEnvironment: {
      name: "DeleteEnvironment",
      requestType: DeleteEnvironmentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              42,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface NotebookServiceImplementation<CallContextExt = {}> {
  /** Lists instances in a given project and location. */
  listInstances(
    request: ListInstancesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInstancesResponse>>;
  /** Gets details of a single Instance. */
  getInstance(request: GetInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Instance>>;
  /** Creates a new Instance in a given project and location. */
  createInstance(
    request: CreateInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Registers an existing legacy notebook instance to the Notebooks API server.
   * Legacy instances are instances created with the legacy Compute Engine
   * calls. They are not manageable by the Notebooks API out of the box. This
   * call makes these instances manageable by the Notebooks API.
   */
  registerInstance(
    request: RegisterInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the guest accelerators of a single Instance. */
  setInstanceAccelerator(
    request: SetInstanceAcceleratorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the machine type of a single Instance. */
  setInstanceMachineType(
    request: SetInstanceMachineTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the labels of an Instance. */
  setInstanceLabels(
    request: SetInstanceLabelsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Instance. */
  deleteInstance(
    request: DeleteInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Starts a notebook instance. */
  startInstance(request: StartInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Stops a notebook instance. */
  stopInstance(request: StopInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Resets a notebook instance. */
  resetInstance(request: ResetInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Allows notebook instances to
   * report their latest instance information to the Notebooks
   * API server. The server will merge the reported information to
   * the instance metadata store. Do not use this method directly.
   */
  reportInstanceInfo(
    request: ReportInstanceInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Check if a notebook instance is upgradable.
   * Deprecated. Please consider using v1.
   *
   * @deprecated
   */
  isInstanceUpgradeable(
    request: IsInstanceUpgradeableRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IsInstanceUpgradeableResponse>>;
  /**
   * Upgrades a notebook instance to the latest version.
   * Deprecated. Please consider using v1.
   *
   * @deprecated
   */
  upgradeInstance(
    request: UpgradeInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Allows notebook instances to
   * call this endpoint to upgrade themselves. Do not use this method directly.
   * Deprecated. Please consider using v1.
   *
   * @deprecated
   */
  upgradeInstanceInternal(
    request: UpgradeInstanceInternalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists environments in a project. */
  listEnvironments(
    request: ListEnvironmentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEnvironmentsResponse>>;
  /** Gets details of a single Environment. */
  getEnvironment(
    request: GetEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Environment>>;
  /** Creates a new Environment. */
  createEnvironment(
    request: CreateEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Environment. */
  deleteEnvironment(
    request: DeleteEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface NotebookServiceClient<CallOptionsExt = {}> {
  /** Lists instances in a given project and location. */
  listInstances(
    request: DeepPartial<ListInstancesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInstancesResponse>;
  /** Gets details of a single Instance. */
  getInstance(request: DeepPartial<GetInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Instance>;
  /** Creates a new Instance in a given project and location. */
  createInstance(
    request: DeepPartial<CreateInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Registers an existing legacy notebook instance to the Notebooks API server.
   * Legacy instances are instances created with the legacy Compute Engine
   * calls. They are not manageable by the Notebooks API out of the box. This
   * call makes these instances manageable by the Notebooks API.
   */
  registerInstance(
    request: DeepPartial<RegisterInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the guest accelerators of a single Instance. */
  setInstanceAccelerator(
    request: DeepPartial<SetInstanceAcceleratorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the machine type of a single Instance. */
  setInstanceMachineType(
    request: DeepPartial<SetInstanceMachineTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the labels of an Instance. */
  setInstanceLabels(
    request: DeepPartial<SetInstanceLabelsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Instance. */
  deleteInstance(
    request: DeepPartial<DeleteInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Starts a notebook instance. */
  startInstance(request: DeepPartial<StartInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Stops a notebook instance. */
  stopInstance(request: DeepPartial<StopInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Resets a notebook instance. */
  resetInstance(request: DeepPartial<ResetInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Allows notebook instances to
   * report their latest instance information to the Notebooks
   * API server. The server will merge the reported information to
   * the instance metadata store. Do not use this method directly.
   */
  reportInstanceInfo(
    request: DeepPartial<ReportInstanceInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Check if a notebook instance is upgradable.
   * Deprecated. Please consider using v1.
   *
   * @deprecated
   */
  isInstanceUpgradeable(
    request: DeepPartial<IsInstanceUpgradeableRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IsInstanceUpgradeableResponse>;
  /**
   * Upgrades a notebook instance to the latest version.
   * Deprecated. Please consider using v1.
   *
   * @deprecated
   */
  upgradeInstance(
    request: DeepPartial<UpgradeInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Allows notebook instances to
   * call this endpoint to upgrade themselves. Do not use this method directly.
   * Deprecated. Please consider using v1.
   *
   * @deprecated
   */
  upgradeInstanceInternal(
    request: DeepPartial<UpgradeInstanceInternalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists environments in a project. */
  listEnvironments(
    request: DeepPartial<ListEnvironmentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEnvironmentsResponse>;
  /** Gets details of a single Environment. */
  getEnvironment(
    request: DeepPartial<GetEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Environment>;
  /** Creates a new Environment. */
  createEnvironment(
    request: DeepPartial<CreateEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Environment. */
  deleteEnvironment(
    request: DeepPartial<DeleteEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
