// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/security/privateca/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import {
  CaPool,
  Certificate,
  CertificateAuthority,
  CertificateRevocationList,
  CertificateTemplate,
  RevocationReason,
  revocationReasonFromJSON,
  revocationReasonToJSON,
  SubordinateConfig,
} from "./resources.js";

export const protobufPackage = "google.cloud.security.privateca.v1";

/**
 * Request message for
 * [CertificateAuthorityService.CreateCertificate][google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCertificate].
 */
export interface CreateCertificateRequest {
  /**
   * Required. The resource name of the
   * [CaPool][google.cloud.security.privateca.v1.CaPool] associated with the
   * [Certificate][google.cloud.security.privateca.v1.Certificate], in the
   * format `projects/* /locations/* /caPools/*`.
   */
  parent: string;
  /**
   * Optional. It must be unique within a location and match the regular
   * expression `[a-zA-Z0-9_-]{1,63}`. This field is required when using a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the Enterprise [CertificateAuthority.Tier][], but is optional and its
   * value is ignored otherwise.
   */
  certificateId: string;
  /**
   * Required. A [Certificate][google.cloud.security.privateca.v1.Certificate]
   * with initial field values.
   */
  certificate:
    | Certificate
    | undefined;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If this is true, no
   * [Certificate][google.cloud.security.privateca.v1.Certificate] resource will
   * be persisted regardless of the
   * [CaPool][google.cloud.security.privateca.v1.CaPool]'s
   * [tier][google.cloud.security.privateca.v1.CaPool.tier], and the returned
   * [Certificate][google.cloud.security.privateca.v1.Certificate] will not
   * contain the
   * [pem_certificate][google.cloud.security.privateca.v1.Certificate.pem_certificate]
   * field.
   */
  validateOnly: boolean;
  /**
   * Optional. The resource ID of the
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that should issue the certificate.  This optional field will ignore the
   * load-balancing scheme of the Pool and directly issue the certificate from
   * the CA with the specified ID, contained in the same
   * [CaPool][google.cloud.security.privateca.v1.CaPool] referenced by `parent`.
   * Per-CA quota rules apply. If left empty, a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * will be chosen from the [CaPool][google.cloud.security.privateca.v1.CaPool]
   * by the service. For example, to issue a
   * [Certificate][google.cloud.security.privateca.v1.Certificate] from a
   * Certificate Authority with resource name
   * "projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca",
   * you can set the
   * [parent][google.cloud.security.privateca.v1.CreateCertificateRequest.parent]
   * to "projects/my-project/locations/us-central1/caPools/my-pool" and the
   * [issuing_certificate_authority_id][google.cloud.security.privateca.v1.CreateCertificateRequest.issuing_certificate_authority_id]
   * to "my-ca".
   */
  issuingCertificateAuthorityId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.GetCertificate][google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificate].
 */
export interface GetCertificateRequest {
  /**
   * Required. The [name][google.cloud.security.privateca.v1.Certificate.name]
   * of the [Certificate][google.cloud.security.privateca.v1.Certificate] to
   * get.
   */
  name: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.ListCertificates][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificates].
 */
export interface ListCertificatesRequest {
  /**
   * Required. The resource name of the location associated with the
   * [Certificates][google.cloud.security.privateca.v1.Certificate], in the
   * format `projects/* /locations/* /caPools/*`.
   */
  parent: string;
  /**
   * Optional. Limit on the number of
   * [Certificates][google.cloud.security.privateca.v1.Certificate] to include
   * in the response. Further
   * [Certificates][google.cloud.security.privateca.v1.Certificate] can
   * subsequently be obtained by including the
   * [ListCertificatesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificatesResponse.next_page_token]
   * in a subsequent request. If unspecified, the server will pick an
   * appropriate default.
   */
  pageSize: number;
  /**
   * Optional. Pagination token, returned earlier via
   * [ListCertificatesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificatesResponse.next_page_token].
   */
  pageToken: string;
  /**
   * Optional. Only include resources that match the filter in the response. For
   * details on supported filters and syntax, see [Certificates Filtering
   * documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#filtering_support).
   */
  filter: string;
  /**
   * Optional. Specify how the results should be sorted. For details on
   * supported fields and syntax, see [Certificates Sorting
   * documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#sorting_support).
   */
  orderBy: string;
}

/**
 * Response message for
 * [CertificateAuthorityService.ListCertificates][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificates].
 */
export interface ListCertificatesResponse {
  /** The list of [Certificates][google.cloud.security.privateca.v1.Certificate]. */
  certificates: Certificate[];
  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListCertificatesRequest.next_page_token][] to retrieve the
   * next page of results.
   */
  nextPageToken: string;
  /** A list of locations (e.g. "us-west1") that could not be reached. */
  unreachable: string[];
}

/**
 * Request message for
 * [CertificateAuthorityService.RevokeCertificate][google.cloud.security.privateca.v1.CertificateAuthorityService.RevokeCertificate].
 */
export interface RevokeCertificateRequest {
  /**
   * Required. The resource name for this
   * [Certificate][google.cloud.security.privateca.v1.Certificate] in the format
   * `projects/* /locations/* /caPools/* /certificates/*`.
   */
  name: string;
  /**
   * Required. The
   * [RevocationReason][google.cloud.security.privateca.v1.RevocationReason] for
   * revoking this certificate.
   */
  reason: RevocationReason;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.UpdateCertificate][google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificate].
 */
export interface UpdateCertificateRequest {
  /**
   * Required. [Certificate][google.cloud.security.privateca.v1.Certificate]
   * with updated values.
   */
  certificate:
    | Certificate
    | undefined;
  /** Required. A list of fields to be updated in this request. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
 */
export interface ActivateCertificateAuthorityRequest {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
   */
  name: string;
  /**
   * Required. The signed CA certificate issued from
   * [FetchCertificateAuthorityCsrResponse.pem_csr][google.cloud.security.privateca.v1.FetchCertificateAuthorityCsrResponse.pem_csr].
   */
  pemCaCertificate: string;
  /**
   * Required. Must include information about the issuer of
   * 'pem_ca_certificate', and any further issuers until the self-signed CA.
   */
  subordinateConfig:
    | SubordinateConfig
    | undefined;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.CreateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCertificateAuthority].
 */
export interface CreateCertificateAuthorityRequest {
  /**
   * Required. The resource name of the
   * [CaPool][google.cloud.security.privateca.v1.CaPool] associated with the
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority],
   * in the format `projects/* /locations/* /caPools/*`.
   */
  parent: string;
  /**
   * Required. It must be unique within a location and match the regular
   * expression `[a-zA-Z0-9_-]{1,63}`
   */
  certificateAuthorityId: string;
  /**
   * Required. A
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * with initial field values.
   */
  certificateAuthority:
    | CertificateAuthority
    | undefined;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.DisableCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.DisableCertificateAuthority].
 */
export interface DisableCertificateAuthorityRequest {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
   */
  name: string;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. This field allows this CA to be disabled even if it's being
   * depended on by another resource. However, doing so may result in unintended
   * and unrecoverable effects on any dependent resources since the CA will
   * no longer be able to issue certificates.
   */
  ignoreDependentResources: boolean;
}

/**
 * Request message for
 * [CertificateAuthorityService.EnableCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.EnableCertificateAuthority].
 */
export interface EnableCertificateAuthorityRequest {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
   */
  name: string;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr].
 */
export interface FetchCertificateAuthorityCsrRequest {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
   */
  name: string;
}

/**
 * Response message for
 * [CertificateAuthorityService.FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr].
 */
export interface FetchCertificateAuthorityCsrResponse {
  /** Output only. The PEM-encoded signed certificate signing request (CSR). */
  pemCsr: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.GetCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificateAuthority].
 */
export interface GetCertificateAuthorityRequest {
  /**
   * Required. The
   * [name][google.cloud.security.privateca.v1.CertificateAuthority.name] of the
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * to get.
   */
  name: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.ListCertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateAuthorities].
 */
export interface ListCertificateAuthoritiesRequest {
  /**
   * Required. The resource name of the
   * [CaPool][google.cloud.security.privateca.v1.CaPool] associated with the
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority],
   * in the format `projects/* /locations/* /caPools/*`.
   */
  parent: string;
  /**
   * Optional. Limit on the number of
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority]
   * to include in the response. Further
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority]
   * can subsequently be obtained by including the
   * [ListCertificateAuthoritiesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.next_page_token]
   * in a subsequent request. If unspecified, the server will pick an
   * appropriate default.
   */
  pageSize: number;
  /**
   * Optional. Pagination token, returned earlier via
   * [ListCertificateAuthoritiesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.next_page_token].
   */
  pageToken: string;
  /** Optional. Only include resources that match the filter in the response. */
  filter: string;
  /** Optional. Specify how the results should be sorted. */
  orderBy: string;
}

/**
 * Response message for
 * [CertificateAuthorityService.ListCertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateAuthorities].
 */
export interface ListCertificateAuthoritiesResponse {
  /**
   * The list of
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  certificateAuthorities: CertificateAuthority[];
  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListCertificateAuthoritiesRequest.next_page_token][] to retrieve the next
   * page of results.
   */
  nextPageToken: string;
  /** A list of locations (e.g. "us-west1") that could not be reached. */
  unreachable: string[];
}

/**
 * Request message for
 * [CertificateAuthorityService.UndeleteCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.UndeleteCertificateAuthority].
 */
export interface UndeleteCertificateAuthorityRequest {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
   */
  name: string;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.DeleteCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.DeleteCertificateAuthority].
 */
export interface DeleteCertificateAuthorityRequest {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
   */
  name: string;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. This field allows the CA to be deleted even if the CA has
   * active certs. Active certs include both unrevoked and unexpired certs.
   */
  ignoreActiveCertificates: boolean;
  /**
   * Optional. If this flag is set, the Certificate Authority will be deleted as
   * soon as possible without a 30-day grace period where undeletion would have
   * been allowed. If you proceed, there will be no way to recover this CA.
   */
  skipGracePeriod: boolean;
  /**
   * Optional. This field allows this CA to be deleted even if it's being
   * depended on by another resource. However, doing so may result in unintended
   * and unrecoverable effects on any dependent resources since the CA will
   * no longer be able to issue certificates.
   */
  ignoreDependentResources: boolean;
}

/**
 * Request message for
 * [CertificateAuthorityService.UpdateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificateAuthority].
 */
export interface UpdateCertificateAuthorityRequest {
  /**
   * Required.
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * with updated values.
   */
  certificateAuthority:
    | CertificateAuthority
    | undefined;
  /** Required. A list of fields to be updated in this request. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.CreateCaPool][google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCaPool].
 */
export interface CreateCaPoolRequest {
  /**
   * Required. The resource name of the location associated with the
   * [CaPool][google.cloud.security.privateca.v1.CaPool], in the format
   * `projects/* /locations/*`.
   */
  parent: string;
  /**
   * Required. It must be unique within a location and match the regular
   * expression `[a-zA-Z0-9_-]{1,63}`
   */
  caPoolId: string;
  /**
   * Required. A [CaPool][google.cloud.security.privateca.v1.CaPool] with
   * initial field values.
   */
  caPool:
    | CaPool
    | undefined;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.UpdateCaPool][google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCaPool].
 */
export interface UpdateCaPoolRequest {
  /**
   * Required. [CaPool][google.cloud.security.privateca.v1.CaPool] with updated
   * values.
   */
  caPool:
    | CaPool
    | undefined;
  /** Required. A list of fields to be updated in this request. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.DeleteCaPool][google.cloud.security.privateca.v1.CertificateAuthorityService.DeleteCaPool].
 */
export interface DeleteCaPoolRequest {
  /**
   * Required. The resource name for this
   * [CaPool][google.cloud.security.privateca.v1.CaPool] in the format
   * `projects/* /locations/* /caPools/*`.
   */
  name: string;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. This field allows this pool to be deleted even if it's being
   * depended on by another resource. However, doing so may result in unintended
   * and unrecoverable effects on any dependent resources since the pool will
   * no longer be able to issue certificates.
   */
  ignoreDependentResources: boolean;
}

/**
 * Request message for
 * [CertificateAuthorityService.FetchCaCerts][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCaCerts].
 */
export interface FetchCaCertsRequest {
  /**
   * Required. The resource name for the
   * [CaPool][google.cloud.security.privateca.v1.CaPool] in the format
   * `projects/* /locations/* /caPools/*`.
   */
  caPool: string;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Response message for
 * [CertificateAuthorityService.FetchCaCerts][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCaCerts].
 */
export interface FetchCaCertsResponse {
  /**
   * The PEM encoded CA certificate chains of all certificate authorities in
   * this [CaPool][google.cloud.security.privateca.v1.CaPool] in the ENABLED,
   * DISABLED, or STAGED states.
   */
  caCerts: FetchCaCertsResponse_CertChain[];
}

export interface FetchCaCertsResponse_CertChain {
  /** The certificates that form the CA chain, from leaf to root order. */
  certificates: string[];
}

/**
 * Request message for
 * [CertificateAuthorityService.GetCaPool][google.cloud.security.privateca.v1.CertificateAuthorityService.GetCaPool].
 */
export interface GetCaPoolRequest {
  /**
   * Required. The [name][google.cloud.security.privateca.v1.CaPool.name] of the
   * [CaPool][google.cloud.security.privateca.v1.CaPool] to get.
   */
  name: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.ListCaPools][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCaPools].
 */
export interface ListCaPoolsRequest {
  /**
   * Required. The resource name of the location associated with the
   * [CaPools][google.cloud.security.privateca.v1.CaPool], in the format
   * `projects/* /locations/*`.
   */
  parent: string;
  /**
   * Optional. Limit on the number of
   * [CaPools][google.cloud.security.privateca.v1.CaPool] to include in the
   * response. Further [CaPools][google.cloud.security.privateca.v1.CaPool] can
   * subsequently be obtained by including the
   * [ListCaPoolsResponse.next_page_token][google.cloud.security.privateca.v1.ListCaPoolsResponse.next_page_token]
   * in a subsequent request. If unspecified, the server will pick an
   * appropriate default.
   */
  pageSize: number;
  /**
   * Optional. Pagination token, returned earlier via
   * [ListCaPoolsResponse.next_page_token][google.cloud.security.privateca.v1.ListCaPoolsResponse.next_page_token].
   */
  pageToken: string;
  /** Optional. Only include resources that match the filter in the response. */
  filter: string;
  /** Optional. Specify how the results should be sorted. */
  orderBy: string;
}

/**
 * Response message for
 * [CertificateAuthorityService.ListCaPools][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCaPools].
 */
export interface ListCaPoolsResponse {
  /** The list of [CaPools][google.cloud.security.privateca.v1.CaPool]. */
  caPools: CaPool[];
  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListCertificateAuthoritiesRequest.next_page_token][] to retrieve the next
   * page of results.
   */
  nextPageToken: string;
  /** A list of locations (e.g. "us-west1") that could not be reached. */
  unreachable: string[];
}

/**
 * Request message for
 * [CertificateAuthorityService.GetCertificateRevocationList][google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificateRevocationList].
 */
export interface GetCertificateRevocationListRequest {
  /**
   * Required. The
   * [name][google.cloud.security.privateca.v1.CertificateRevocationList.name]
   * of the
   * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList]
   * to get.
   */
  name: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.ListCertificateRevocationLists][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateRevocationLists].
 */
export interface ListCertificateRevocationListsRequest {
  /**
   * Required. The resource name of the location associated with the
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList],
   * in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
   */
  parent: string;
  /**
   * Optional. Limit on the number of
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList]
   * to include in the response. Further
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList]
   * can subsequently be obtained by including the
   * [ListCertificateRevocationListsResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.next_page_token]
   * in a subsequent request. If unspecified, the server will pick an
   * appropriate default.
   */
  pageSize: number;
  /**
   * Optional. Pagination token, returned earlier via
   * [ListCertificateRevocationListsResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.next_page_token].
   */
  pageToken: string;
  /** Optional. Only include resources that match the filter in the response. */
  filter: string;
  /** Optional. Specify how the results should be sorted. */
  orderBy: string;
}

/**
 * Response message for
 * [CertificateAuthorityService.ListCertificateRevocationLists][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateRevocationLists].
 */
export interface ListCertificateRevocationListsResponse {
  /**
   * The list of
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
   */
  certificateRevocationLists: CertificateRevocationList[];
  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListCertificateRevocationListsRequest.next_page_token][] to retrieve the
   * next page of results.
   */
  nextPageToken: string;
  /** A list of locations (e.g. "us-west1") that could not be reached. */
  unreachable: string[];
}

/**
 * Request message for
 * [CertificateAuthorityService.UpdateCertificateRevocationList][google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificateRevocationList].
 */
export interface UpdateCertificateRevocationListRequest {
  /**
   * Required.
   * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList]
   * with updated values.
   */
  certificateRevocationList:
    | CertificateRevocationList
    | undefined;
  /** Required. A list of fields to be updated in this request. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.CreateCertificateTemplate][google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCertificateTemplate].
 */
export interface CreateCertificateTemplateRequest {
  /**
   * Required. The resource name of the location associated with the
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate],
   * in the format `projects/* /locations/*`.
   */
  parent: string;
  /**
   * Required. It must be unique within a location and match the regular
   * expression `[a-zA-Z0-9_-]{1,63}`
   */
  certificateTemplateId: string;
  /**
   * Required. A
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * with initial field values.
   */
  certificateTemplate:
    | CertificateTemplate
    | undefined;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.DeleteCertificateTemplate][google.cloud.security.privateca.v1.CertificateAuthorityService.DeleteCertificateTemplate].
 */
export interface DeleteCertificateTemplateRequest {
  /**
   * Required. The resource name for this
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * in the format `projects/* /locations/* /certificateTemplates/*`.
   */
  name: string;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.GetCertificateTemplate][google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificateTemplate].
 */
export interface GetCertificateTemplateRequest {
  /**
   * Required. The
   * [name][google.cloud.security.privateca.v1.CertificateTemplate.name] of the
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * to get.
   */
  name: string;
}

/**
 * Request message for
 * [CertificateAuthorityService.ListCertificateTemplates][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateTemplates].
 */
export interface ListCertificateTemplatesRequest {
  /**
   * Required. The resource name of the location associated with the
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate],
   * in the format `projects/* /locations/*`.
   */
  parent: string;
  /**
   * Optional. Limit on the number of
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate]
   * to include in the response. Further
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate]
   * can subsequently be obtained by including the
   * [ListCertificateTemplatesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.next_page_token]
   * in a subsequent request. If unspecified, the server will pick an
   * appropriate default.
   */
  pageSize: number;
  /**
   * Optional. Pagination token, returned earlier via
   * [ListCertificateTemplatesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.next_page_token].
   */
  pageToken: string;
  /** Optional. Only include resources that match the filter in the response. */
  filter: string;
  /** Optional. Specify how the results should be sorted. */
  orderBy: string;
}

/**
 * Response message for
 * [CertificateAuthorityService.ListCertificateTemplates][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateTemplates].
 */
export interface ListCertificateTemplatesResponse {
  /**
   * The list of
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
   */
  certificateTemplates: CertificateTemplate[];
  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListCertificateTemplatesRequest.next_page_token][] to retrieve
   * the next page of results.
   */
  nextPageToken: string;
  /** A list of locations (e.g. "us-west1") that could not be reached. */
  unreachable: string[];
}

/**
 * Request message for
 * [CertificateAuthorityService.UpdateCertificateTemplate][google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificateTemplate].
 */
export interface UpdateCertificateTemplateRequest {
  /**
   * Required.
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * with updated values.
   */
  certificateTemplate:
    | CertificateTemplate
    | undefined;
  /** Required. A list of fields to be updated in this request. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseCreateCertificateRequest(): CreateCertificateRequest {
  return {
    parent: "",
    certificateId: "",
    certificate: undefined,
    requestId: "",
    validateOnly: false,
    issuingCertificateAuthorityId: "",
  };
}

export const CreateCertificateRequest: MessageFns<CreateCertificateRequest> = {
  encode(message: CreateCertificateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.certificateId !== "") {
      writer.uint32(18).string(message.certificateId);
    }
    if (message.certificate !== undefined) {
      Certificate.encode(message.certificate, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    if (message.issuingCertificateAuthorityId !== "") {
      writer.uint32(50).string(message.issuingCertificateAuthorityId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCertificateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCertificateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.certificateId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.certificate = Certificate.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.issuingCertificateAuthorityId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCertificateRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      certificateId: isSet(object.certificateId) ? globalThis.String(object.certificateId) : "",
      certificate: isSet(object.certificate) ? Certificate.fromJSON(object.certificate) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      issuingCertificateAuthorityId: isSet(object.issuingCertificateAuthorityId)
        ? globalThis.String(object.issuingCertificateAuthorityId)
        : "",
    };
  },

  toJSON(message: CreateCertificateRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.certificateId !== "") {
      obj.certificateId = message.certificateId;
    }
    if (message.certificate !== undefined) {
      obj.certificate = Certificate.toJSON(message.certificate);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.issuingCertificateAuthorityId !== "") {
      obj.issuingCertificateAuthorityId = message.issuingCertificateAuthorityId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCertificateRequest>): CreateCertificateRequest {
    return CreateCertificateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCertificateRequest>): CreateCertificateRequest {
    const message = createBaseCreateCertificateRequest();
    message.parent = object.parent ?? "";
    message.certificateId = object.certificateId ?? "";
    message.certificate = (object.certificate !== undefined && object.certificate !== null)
      ? Certificate.fromPartial(object.certificate)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.issuingCertificateAuthorityId = object.issuingCertificateAuthorityId ?? "";
    return message;
  },
};

function createBaseGetCertificateRequest(): GetCertificateRequest {
  return { name: "" };
}

export const GetCertificateRequest: MessageFns<GetCertificateRequest> = {
  encode(message: GetCertificateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCertificateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCertificateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCertificateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCertificateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCertificateRequest>): GetCertificateRequest {
    return GetCertificateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCertificateRequest>): GetCertificateRequest {
    const message = createBaseGetCertificateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCertificatesRequest(): ListCertificatesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListCertificatesRequest: MessageFns<ListCertificatesRequest> = {
  encode(message: ListCertificatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCertificatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCertificatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCertificatesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListCertificatesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCertificatesRequest>): ListCertificatesRequest {
    return ListCertificatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCertificatesRequest>): ListCertificatesRequest {
    const message = createBaseListCertificatesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListCertificatesResponse(): ListCertificatesResponse {
  return { certificates: [], nextPageToken: "", unreachable: [] };
}

export const ListCertificatesResponse: MessageFns<ListCertificatesResponse> = {
  encode(message: ListCertificatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.certificates) {
      Certificate.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCertificatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCertificatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificates.push(Certificate.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCertificatesResponse {
    return {
      certificates: globalThis.Array.isArray(object?.certificates)
        ? object.certificates.map((e: any) => Certificate.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListCertificatesResponse): unknown {
    const obj: any = {};
    if (message.certificates?.length) {
      obj.certificates = message.certificates.map((e) => Certificate.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCertificatesResponse>): ListCertificatesResponse {
    return ListCertificatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCertificatesResponse>): ListCertificatesResponse {
    const message = createBaseListCertificatesResponse();
    message.certificates = object.certificates?.map((e) => Certificate.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseRevokeCertificateRequest(): RevokeCertificateRequest {
  return { name: "", reason: 0, requestId: "" };
}

export const RevokeCertificateRequest: MessageFns<RevokeCertificateRequest> = {
  encode(message: RevokeCertificateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevokeCertificateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevokeCertificateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevokeCertificateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      reason: isSet(object.reason) ? revocationReasonFromJSON(object.reason) : 0,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: RevokeCertificateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.reason !== 0) {
      obj.reason = revocationReasonToJSON(message.reason);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<RevokeCertificateRequest>): RevokeCertificateRequest {
    return RevokeCertificateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RevokeCertificateRequest>): RevokeCertificateRequest {
    const message = createBaseRevokeCertificateRequest();
    message.name = object.name ?? "";
    message.reason = object.reason ?? 0;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateCertificateRequest(): UpdateCertificateRequest {
  return { certificate: undefined, updateMask: undefined, requestId: "" };
}

export const UpdateCertificateRequest: MessageFns<UpdateCertificateRequest> = {
  encode(message: UpdateCertificateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.certificate !== undefined) {
      Certificate.encode(message.certificate, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCertificateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCertificateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificate = Certificate.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCertificateRequest {
    return {
      certificate: isSet(object.certificate) ? Certificate.fromJSON(object.certificate) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateCertificateRequest): unknown {
    const obj: any = {};
    if (message.certificate !== undefined) {
      obj.certificate = Certificate.toJSON(message.certificate);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCertificateRequest>): UpdateCertificateRequest {
    return UpdateCertificateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCertificateRequest>): UpdateCertificateRequest {
    const message = createBaseUpdateCertificateRequest();
    message.certificate = (object.certificate !== undefined && object.certificate !== null)
      ? Certificate.fromPartial(object.certificate)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseActivateCertificateAuthorityRequest(): ActivateCertificateAuthorityRequest {
  return { name: "", pemCaCertificate: "", subordinateConfig: undefined, requestId: "" };
}

export const ActivateCertificateAuthorityRequest: MessageFns<ActivateCertificateAuthorityRequest> = {
  encode(message: ActivateCertificateAuthorityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pemCaCertificate !== "") {
      writer.uint32(18).string(message.pemCaCertificate);
    }
    if (message.subordinateConfig !== undefined) {
      SubordinateConfig.encode(message.subordinateConfig, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivateCertificateAuthorityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateCertificateAuthorityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pemCaCertificate = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subordinateConfig = SubordinateConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivateCertificateAuthorityRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pemCaCertificate: isSet(object.pemCaCertificate) ? globalThis.String(object.pemCaCertificate) : "",
      subordinateConfig: isSet(object.subordinateConfig)
        ? SubordinateConfig.fromJSON(object.subordinateConfig)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: ActivateCertificateAuthorityRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pemCaCertificate !== "") {
      obj.pemCaCertificate = message.pemCaCertificate;
    }
    if (message.subordinateConfig !== undefined) {
      obj.subordinateConfig = SubordinateConfig.toJSON(message.subordinateConfig);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<ActivateCertificateAuthorityRequest>): ActivateCertificateAuthorityRequest {
    return ActivateCertificateAuthorityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivateCertificateAuthorityRequest>): ActivateCertificateAuthorityRequest {
    const message = createBaseActivateCertificateAuthorityRequest();
    message.name = object.name ?? "";
    message.pemCaCertificate = object.pemCaCertificate ?? "";
    message.subordinateConfig = (object.subordinateConfig !== undefined && object.subordinateConfig !== null)
      ? SubordinateConfig.fromPartial(object.subordinateConfig)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseCreateCertificateAuthorityRequest(): CreateCertificateAuthorityRequest {
  return { parent: "", certificateAuthorityId: "", certificateAuthority: undefined, requestId: "" };
}

export const CreateCertificateAuthorityRequest: MessageFns<CreateCertificateAuthorityRequest> = {
  encode(message: CreateCertificateAuthorityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.certificateAuthorityId !== "") {
      writer.uint32(18).string(message.certificateAuthorityId);
    }
    if (message.certificateAuthority !== undefined) {
      CertificateAuthority.encode(message.certificateAuthority, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCertificateAuthorityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCertificateAuthorityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.certificateAuthorityId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.certificateAuthority = CertificateAuthority.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCertificateAuthorityRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      certificateAuthorityId: isSet(object.certificateAuthorityId)
        ? globalThis.String(object.certificateAuthorityId)
        : "",
      certificateAuthority: isSet(object.certificateAuthority)
        ? CertificateAuthority.fromJSON(object.certificateAuthority)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateCertificateAuthorityRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.certificateAuthorityId !== "") {
      obj.certificateAuthorityId = message.certificateAuthorityId;
    }
    if (message.certificateAuthority !== undefined) {
      obj.certificateAuthority = CertificateAuthority.toJSON(message.certificateAuthority);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCertificateAuthorityRequest>): CreateCertificateAuthorityRequest {
    return CreateCertificateAuthorityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCertificateAuthorityRequest>): CreateCertificateAuthorityRequest {
    const message = createBaseCreateCertificateAuthorityRequest();
    message.parent = object.parent ?? "";
    message.certificateAuthorityId = object.certificateAuthorityId ?? "";
    message.certificateAuthority = (object.certificateAuthority !== undefined && object.certificateAuthority !== null)
      ? CertificateAuthority.fromPartial(object.certificateAuthority)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDisableCertificateAuthorityRequest(): DisableCertificateAuthorityRequest {
  return { name: "", requestId: "", ignoreDependentResources: false };
}

export const DisableCertificateAuthorityRequest: MessageFns<DisableCertificateAuthorityRequest> = {
  encode(message: DisableCertificateAuthorityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.ignoreDependentResources !== false) {
      writer.uint32(24).bool(message.ignoreDependentResources);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableCertificateAuthorityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableCertificateAuthorityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.ignoreDependentResources = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableCertificateAuthorityRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      ignoreDependentResources: isSet(object.ignoreDependentResources)
        ? globalThis.Boolean(object.ignoreDependentResources)
        : false,
    };
  },

  toJSON(message: DisableCertificateAuthorityRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.ignoreDependentResources !== false) {
      obj.ignoreDependentResources = message.ignoreDependentResources;
    }
    return obj;
  },

  create(base?: DeepPartial<DisableCertificateAuthorityRequest>): DisableCertificateAuthorityRequest {
    return DisableCertificateAuthorityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisableCertificateAuthorityRequest>): DisableCertificateAuthorityRequest {
    const message = createBaseDisableCertificateAuthorityRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.ignoreDependentResources = object.ignoreDependentResources ?? false;
    return message;
  },
};

function createBaseEnableCertificateAuthorityRequest(): EnableCertificateAuthorityRequest {
  return { name: "", requestId: "" };
}

export const EnableCertificateAuthorityRequest: MessageFns<EnableCertificateAuthorityRequest> = {
  encode(message: EnableCertificateAuthorityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableCertificateAuthorityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableCertificateAuthorityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableCertificateAuthorityRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: EnableCertificateAuthorityRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<EnableCertificateAuthorityRequest>): EnableCertificateAuthorityRequest {
    return EnableCertificateAuthorityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnableCertificateAuthorityRequest>): EnableCertificateAuthorityRequest {
    const message = createBaseEnableCertificateAuthorityRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseFetchCertificateAuthorityCsrRequest(): FetchCertificateAuthorityCsrRequest {
  return { name: "" };
}

export const FetchCertificateAuthorityCsrRequest: MessageFns<FetchCertificateAuthorityCsrRequest> = {
  encode(message: FetchCertificateAuthorityCsrRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchCertificateAuthorityCsrRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchCertificateAuthorityCsrRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchCertificateAuthorityCsrRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: FetchCertificateAuthorityCsrRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchCertificateAuthorityCsrRequest>): FetchCertificateAuthorityCsrRequest {
    return FetchCertificateAuthorityCsrRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchCertificateAuthorityCsrRequest>): FetchCertificateAuthorityCsrRequest {
    const message = createBaseFetchCertificateAuthorityCsrRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseFetchCertificateAuthorityCsrResponse(): FetchCertificateAuthorityCsrResponse {
  return { pemCsr: "" };
}

export const FetchCertificateAuthorityCsrResponse: MessageFns<FetchCertificateAuthorityCsrResponse> = {
  encode(message: FetchCertificateAuthorityCsrResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pemCsr !== "") {
      writer.uint32(10).string(message.pemCsr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchCertificateAuthorityCsrResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchCertificateAuthorityCsrResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pemCsr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchCertificateAuthorityCsrResponse {
    return { pemCsr: isSet(object.pemCsr) ? globalThis.String(object.pemCsr) : "" };
  },

  toJSON(message: FetchCertificateAuthorityCsrResponse): unknown {
    const obj: any = {};
    if (message.pemCsr !== "") {
      obj.pemCsr = message.pemCsr;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchCertificateAuthorityCsrResponse>): FetchCertificateAuthorityCsrResponse {
    return FetchCertificateAuthorityCsrResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchCertificateAuthorityCsrResponse>): FetchCertificateAuthorityCsrResponse {
    const message = createBaseFetchCertificateAuthorityCsrResponse();
    message.pemCsr = object.pemCsr ?? "";
    return message;
  },
};

function createBaseGetCertificateAuthorityRequest(): GetCertificateAuthorityRequest {
  return { name: "" };
}

export const GetCertificateAuthorityRequest: MessageFns<GetCertificateAuthorityRequest> = {
  encode(message: GetCertificateAuthorityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCertificateAuthorityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCertificateAuthorityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCertificateAuthorityRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCertificateAuthorityRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCertificateAuthorityRequest>): GetCertificateAuthorityRequest {
    return GetCertificateAuthorityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCertificateAuthorityRequest>): GetCertificateAuthorityRequest {
    const message = createBaseGetCertificateAuthorityRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCertificateAuthoritiesRequest(): ListCertificateAuthoritiesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListCertificateAuthoritiesRequest: MessageFns<ListCertificateAuthoritiesRequest> = {
  encode(message: ListCertificateAuthoritiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCertificateAuthoritiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCertificateAuthoritiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCertificateAuthoritiesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListCertificateAuthoritiesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCertificateAuthoritiesRequest>): ListCertificateAuthoritiesRequest {
    return ListCertificateAuthoritiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCertificateAuthoritiesRequest>): ListCertificateAuthoritiesRequest {
    const message = createBaseListCertificateAuthoritiesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListCertificateAuthoritiesResponse(): ListCertificateAuthoritiesResponse {
  return { certificateAuthorities: [], nextPageToken: "", unreachable: [] };
}

export const ListCertificateAuthoritiesResponse: MessageFns<ListCertificateAuthoritiesResponse> = {
  encode(message: ListCertificateAuthoritiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.certificateAuthorities) {
      CertificateAuthority.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCertificateAuthoritiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCertificateAuthoritiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificateAuthorities.push(CertificateAuthority.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCertificateAuthoritiesResponse {
    return {
      certificateAuthorities: globalThis.Array.isArray(object?.certificateAuthorities)
        ? object.certificateAuthorities.map((e: any) => CertificateAuthority.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListCertificateAuthoritiesResponse): unknown {
    const obj: any = {};
    if (message.certificateAuthorities?.length) {
      obj.certificateAuthorities = message.certificateAuthorities.map((e) => CertificateAuthority.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCertificateAuthoritiesResponse>): ListCertificateAuthoritiesResponse {
    return ListCertificateAuthoritiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCertificateAuthoritiesResponse>): ListCertificateAuthoritiesResponse {
    const message = createBaseListCertificateAuthoritiesResponse();
    message.certificateAuthorities = object.certificateAuthorities?.map((e) => CertificateAuthority.fromPartial(e)) ||
      [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseUndeleteCertificateAuthorityRequest(): UndeleteCertificateAuthorityRequest {
  return { name: "", requestId: "" };
}

export const UndeleteCertificateAuthorityRequest: MessageFns<UndeleteCertificateAuthorityRequest> = {
  encode(message: UndeleteCertificateAuthorityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeleteCertificateAuthorityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeleteCertificateAuthorityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeleteCertificateAuthorityRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UndeleteCertificateAuthorityRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeleteCertificateAuthorityRequest>): UndeleteCertificateAuthorityRequest {
    return UndeleteCertificateAuthorityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeleteCertificateAuthorityRequest>): UndeleteCertificateAuthorityRequest {
    const message = createBaseUndeleteCertificateAuthorityRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteCertificateAuthorityRequest(): DeleteCertificateAuthorityRequest {
  return {
    name: "",
    requestId: "",
    ignoreActiveCertificates: false,
    skipGracePeriod: false,
    ignoreDependentResources: false,
  };
}

export const DeleteCertificateAuthorityRequest: MessageFns<DeleteCertificateAuthorityRequest> = {
  encode(message: DeleteCertificateAuthorityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.ignoreActiveCertificates !== false) {
      writer.uint32(32).bool(message.ignoreActiveCertificates);
    }
    if (message.skipGracePeriod !== false) {
      writer.uint32(40).bool(message.skipGracePeriod);
    }
    if (message.ignoreDependentResources !== false) {
      writer.uint32(48).bool(message.ignoreDependentResources);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCertificateAuthorityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCertificateAuthorityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.ignoreActiveCertificates = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.skipGracePeriod = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.ignoreDependentResources = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCertificateAuthorityRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      ignoreActiveCertificates: isSet(object.ignoreActiveCertificates)
        ? globalThis.Boolean(object.ignoreActiveCertificates)
        : false,
      skipGracePeriod: isSet(object.skipGracePeriod) ? globalThis.Boolean(object.skipGracePeriod) : false,
      ignoreDependentResources: isSet(object.ignoreDependentResources)
        ? globalThis.Boolean(object.ignoreDependentResources)
        : false,
    };
  },

  toJSON(message: DeleteCertificateAuthorityRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.ignoreActiveCertificates !== false) {
      obj.ignoreActiveCertificates = message.ignoreActiveCertificates;
    }
    if (message.skipGracePeriod !== false) {
      obj.skipGracePeriod = message.skipGracePeriod;
    }
    if (message.ignoreDependentResources !== false) {
      obj.ignoreDependentResources = message.ignoreDependentResources;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCertificateAuthorityRequest>): DeleteCertificateAuthorityRequest {
    return DeleteCertificateAuthorityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCertificateAuthorityRequest>): DeleteCertificateAuthorityRequest {
    const message = createBaseDeleteCertificateAuthorityRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.ignoreActiveCertificates = object.ignoreActiveCertificates ?? false;
    message.skipGracePeriod = object.skipGracePeriod ?? false;
    message.ignoreDependentResources = object.ignoreDependentResources ?? false;
    return message;
  },
};

function createBaseUpdateCertificateAuthorityRequest(): UpdateCertificateAuthorityRequest {
  return { certificateAuthority: undefined, updateMask: undefined, requestId: "" };
}

export const UpdateCertificateAuthorityRequest: MessageFns<UpdateCertificateAuthorityRequest> = {
  encode(message: UpdateCertificateAuthorityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.certificateAuthority !== undefined) {
      CertificateAuthority.encode(message.certificateAuthority, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCertificateAuthorityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCertificateAuthorityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificateAuthority = CertificateAuthority.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCertificateAuthorityRequest {
    return {
      certificateAuthority: isSet(object.certificateAuthority)
        ? CertificateAuthority.fromJSON(object.certificateAuthority)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateCertificateAuthorityRequest): unknown {
    const obj: any = {};
    if (message.certificateAuthority !== undefined) {
      obj.certificateAuthority = CertificateAuthority.toJSON(message.certificateAuthority);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCertificateAuthorityRequest>): UpdateCertificateAuthorityRequest {
    return UpdateCertificateAuthorityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCertificateAuthorityRequest>): UpdateCertificateAuthorityRequest {
    const message = createBaseUpdateCertificateAuthorityRequest();
    message.certificateAuthority = (object.certificateAuthority !== undefined && object.certificateAuthority !== null)
      ? CertificateAuthority.fromPartial(object.certificateAuthority)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseCreateCaPoolRequest(): CreateCaPoolRequest {
  return { parent: "", caPoolId: "", caPool: undefined, requestId: "" };
}

export const CreateCaPoolRequest: MessageFns<CreateCaPoolRequest> = {
  encode(message: CreateCaPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.caPoolId !== "") {
      writer.uint32(18).string(message.caPoolId);
    }
    if (message.caPool !== undefined) {
      CaPool.encode(message.caPool, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCaPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCaPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.caPoolId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.caPool = CaPool.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCaPoolRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      caPoolId: isSet(object.caPoolId) ? globalThis.String(object.caPoolId) : "",
      caPool: isSet(object.caPool) ? CaPool.fromJSON(object.caPool) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateCaPoolRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.caPoolId !== "") {
      obj.caPoolId = message.caPoolId;
    }
    if (message.caPool !== undefined) {
      obj.caPool = CaPool.toJSON(message.caPool);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCaPoolRequest>): CreateCaPoolRequest {
    return CreateCaPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCaPoolRequest>): CreateCaPoolRequest {
    const message = createBaseCreateCaPoolRequest();
    message.parent = object.parent ?? "";
    message.caPoolId = object.caPoolId ?? "";
    message.caPool = (object.caPool !== undefined && object.caPool !== null)
      ? CaPool.fromPartial(object.caPool)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateCaPoolRequest(): UpdateCaPoolRequest {
  return { caPool: undefined, updateMask: undefined, requestId: "" };
}

export const UpdateCaPoolRequest: MessageFns<UpdateCaPoolRequest> = {
  encode(message: UpdateCaPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.caPool !== undefined) {
      CaPool.encode(message.caPool, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCaPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCaPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caPool = CaPool.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCaPoolRequest {
    return {
      caPool: isSet(object.caPool) ? CaPool.fromJSON(object.caPool) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateCaPoolRequest): unknown {
    const obj: any = {};
    if (message.caPool !== undefined) {
      obj.caPool = CaPool.toJSON(message.caPool);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCaPoolRequest>): UpdateCaPoolRequest {
    return UpdateCaPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCaPoolRequest>): UpdateCaPoolRequest {
    const message = createBaseUpdateCaPoolRequest();
    message.caPool = (object.caPool !== undefined && object.caPool !== null)
      ? CaPool.fromPartial(object.caPool)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteCaPoolRequest(): DeleteCaPoolRequest {
  return { name: "", requestId: "", ignoreDependentResources: false };
}

export const DeleteCaPoolRequest: MessageFns<DeleteCaPoolRequest> = {
  encode(message: DeleteCaPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.ignoreDependentResources !== false) {
      writer.uint32(32).bool(message.ignoreDependentResources);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCaPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCaPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.ignoreDependentResources = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCaPoolRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      ignoreDependentResources: isSet(object.ignoreDependentResources)
        ? globalThis.Boolean(object.ignoreDependentResources)
        : false,
    };
  },

  toJSON(message: DeleteCaPoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.ignoreDependentResources !== false) {
      obj.ignoreDependentResources = message.ignoreDependentResources;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCaPoolRequest>): DeleteCaPoolRequest {
    return DeleteCaPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCaPoolRequest>): DeleteCaPoolRequest {
    const message = createBaseDeleteCaPoolRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.ignoreDependentResources = object.ignoreDependentResources ?? false;
    return message;
  },
};

function createBaseFetchCaCertsRequest(): FetchCaCertsRequest {
  return { caPool: "", requestId: "" };
}

export const FetchCaCertsRequest: MessageFns<FetchCaCertsRequest> = {
  encode(message: FetchCaCertsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.caPool !== "") {
      writer.uint32(10).string(message.caPool);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchCaCertsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchCaCertsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caPool = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchCaCertsRequest {
    return {
      caPool: isSet(object.caPool) ? globalThis.String(object.caPool) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: FetchCaCertsRequest): unknown {
    const obj: any = {};
    if (message.caPool !== "") {
      obj.caPool = message.caPool;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchCaCertsRequest>): FetchCaCertsRequest {
    return FetchCaCertsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchCaCertsRequest>): FetchCaCertsRequest {
    const message = createBaseFetchCaCertsRequest();
    message.caPool = object.caPool ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseFetchCaCertsResponse(): FetchCaCertsResponse {
  return { caCerts: [] };
}

export const FetchCaCertsResponse: MessageFns<FetchCaCertsResponse> = {
  encode(message: FetchCaCertsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.caCerts) {
      FetchCaCertsResponse_CertChain.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchCaCertsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchCaCertsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caCerts.push(FetchCaCertsResponse_CertChain.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchCaCertsResponse {
    return {
      caCerts: globalThis.Array.isArray(object?.caCerts)
        ? object.caCerts.map((e: any) => FetchCaCertsResponse_CertChain.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FetchCaCertsResponse): unknown {
    const obj: any = {};
    if (message.caCerts?.length) {
      obj.caCerts = message.caCerts.map((e) => FetchCaCertsResponse_CertChain.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FetchCaCertsResponse>): FetchCaCertsResponse {
    return FetchCaCertsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchCaCertsResponse>): FetchCaCertsResponse {
    const message = createBaseFetchCaCertsResponse();
    message.caCerts = object.caCerts?.map((e) => FetchCaCertsResponse_CertChain.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFetchCaCertsResponse_CertChain(): FetchCaCertsResponse_CertChain {
  return { certificates: [] };
}

export const FetchCaCertsResponse_CertChain: MessageFns<FetchCaCertsResponse_CertChain> = {
  encode(message: FetchCaCertsResponse_CertChain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.certificates) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchCaCertsResponse_CertChain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchCaCertsResponse_CertChain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificates.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchCaCertsResponse_CertChain {
    return {
      certificates: globalThis.Array.isArray(object?.certificates)
        ? object.certificates.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: FetchCaCertsResponse_CertChain): unknown {
    const obj: any = {};
    if (message.certificates?.length) {
      obj.certificates = message.certificates;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchCaCertsResponse_CertChain>): FetchCaCertsResponse_CertChain {
    return FetchCaCertsResponse_CertChain.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchCaCertsResponse_CertChain>): FetchCaCertsResponse_CertChain {
    const message = createBaseFetchCaCertsResponse_CertChain();
    message.certificates = object.certificates?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetCaPoolRequest(): GetCaPoolRequest {
  return { name: "" };
}

export const GetCaPoolRequest: MessageFns<GetCaPoolRequest> = {
  encode(message: GetCaPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCaPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCaPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCaPoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCaPoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCaPoolRequest>): GetCaPoolRequest {
    return GetCaPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCaPoolRequest>): GetCaPoolRequest {
    const message = createBaseGetCaPoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCaPoolsRequest(): ListCaPoolsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListCaPoolsRequest: MessageFns<ListCaPoolsRequest> = {
  encode(message: ListCaPoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCaPoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCaPoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCaPoolsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListCaPoolsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCaPoolsRequest>): ListCaPoolsRequest {
    return ListCaPoolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCaPoolsRequest>): ListCaPoolsRequest {
    const message = createBaseListCaPoolsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListCaPoolsResponse(): ListCaPoolsResponse {
  return { caPools: [], nextPageToken: "", unreachable: [] };
}

export const ListCaPoolsResponse: MessageFns<ListCaPoolsResponse> = {
  encode(message: ListCaPoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.caPools) {
      CaPool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCaPoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCaPoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.caPools.push(CaPool.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCaPoolsResponse {
    return {
      caPools: globalThis.Array.isArray(object?.caPools) ? object.caPools.map((e: any) => CaPool.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListCaPoolsResponse): unknown {
    const obj: any = {};
    if (message.caPools?.length) {
      obj.caPools = message.caPools.map((e) => CaPool.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCaPoolsResponse>): ListCaPoolsResponse {
    return ListCaPoolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCaPoolsResponse>): ListCaPoolsResponse {
    const message = createBaseListCaPoolsResponse();
    message.caPools = object.caPools?.map((e) => CaPool.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetCertificateRevocationListRequest(): GetCertificateRevocationListRequest {
  return { name: "" };
}

export const GetCertificateRevocationListRequest: MessageFns<GetCertificateRevocationListRequest> = {
  encode(message: GetCertificateRevocationListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCertificateRevocationListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCertificateRevocationListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCertificateRevocationListRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCertificateRevocationListRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCertificateRevocationListRequest>): GetCertificateRevocationListRequest {
    return GetCertificateRevocationListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCertificateRevocationListRequest>): GetCertificateRevocationListRequest {
    const message = createBaseGetCertificateRevocationListRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCertificateRevocationListsRequest(): ListCertificateRevocationListsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListCertificateRevocationListsRequest: MessageFns<ListCertificateRevocationListsRequest> = {
  encode(message: ListCertificateRevocationListsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCertificateRevocationListsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCertificateRevocationListsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCertificateRevocationListsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListCertificateRevocationListsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCertificateRevocationListsRequest>): ListCertificateRevocationListsRequest {
    return ListCertificateRevocationListsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCertificateRevocationListsRequest>): ListCertificateRevocationListsRequest {
    const message = createBaseListCertificateRevocationListsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListCertificateRevocationListsResponse(): ListCertificateRevocationListsResponse {
  return { certificateRevocationLists: [], nextPageToken: "", unreachable: [] };
}

export const ListCertificateRevocationListsResponse: MessageFns<ListCertificateRevocationListsResponse> = {
  encode(message: ListCertificateRevocationListsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.certificateRevocationLists) {
      CertificateRevocationList.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCertificateRevocationListsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCertificateRevocationListsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificateRevocationLists.push(CertificateRevocationList.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCertificateRevocationListsResponse {
    return {
      certificateRevocationLists: globalThis.Array.isArray(object?.certificateRevocationLists)
        ? object.certificateRevocationLists.map((e: any) => CertificateRevocationList.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListCertificateRevocationListsResponse): unknown {
    const obj: any = {};
    if (message.certificateRevocationLists?.length) {
      obj.certificateRevocationLists = message.certificateRevocationLists.map((e) =>
        CertificateRevocationList.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCertificateRevocationListsResponse>): ListCertificateRevocationListsResponse {
    return ListCertificateRevocationListsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCertificateRevocationListsResponse>): ListCertificateRevocationListsResponse {
    const message = createBaseListCertificateRevocationListsResponse();
    message.certificateRevocationLists =
      object.certificateRevocationLists?.map((e) => CertificateRevocationList.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateCertificateRevocationListRequest(): UpdateCertificateRevocationListRequest {
  return { certificateRevocationList: undefined, updateMask: undefined, requestId: "" };
}

export const UpdateCertificateRevocationListRequest: MessageFns<UpdateCertificateRevocationListRequest> = {
  encode(message: UpdateCertificateRevocationListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.certificateRevocationList !== undefined) {
      CertificateRevocationList.encode(message.certificateRevocationList, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCertificateRevocationListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCertificateRevocationListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificateRevocationList = CertificateRevocationList.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCertificateRevocationListRequest {
    return {
      certificateRevocationList: isSet(object.certificateRevocationList)
        ? CertificateRevocationList.fromJSON(object.certificateRevocationList)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateCertificateRevocationListRequest): unknown {
    const obj: any = {};
    if (message.certificateRevocationList !== undefined) {
      obj.certificateRevocationList = CertificateRevocationList.toJSON(message.certificateRevocationList);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCertificateRevocationListRequest>): UpdateCertificateRevocationListRequest {
    return UpdateCertificateRevocationListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCertificateRevocationListRequest>): UpdateCertificateRevocationListRequest {
    const message = createBaseUpdateCertificateRevocationListRequest();
    message.certificateRevocationList =
      (object.certificateRevocationList !== undefined && object.certificateRevocationList !== null)
        ? CertificateRevocationList.fromPartial(object.certificateRevocationList)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseCreateCertificateTemplateRequest(): CreateCertificateTemplateRequest {
  return { parent: "", certificateTemplateId: "", certificateTemplate: undefined, requestId: "" };
}

export const CreateCertificateTemplateRequest: MessageFns<CreateCertificateTemplateRequest> = {
  encode(message: CreateCertificateTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.certificateTemplateId !== "") {
      writer.uint32(18).string(message.certificateTemplateId);
    }
    if (message.certificateTemplate !== undefined) {
      CertificateTemplate.encode(message.certificateTemplate, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCertificateTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCertificateTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.certificateTemplateId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.certificateTemplate = CertificateTemplate.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCertificateTemplateRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      certificateTemplateId: isSet(object.certificateTemplateId) ? globalThis.String(object.certificateTemplateId) : "",
      certificateTemplate: isSet(object.certificateTemplate)
        ? CertificateTemplate.fromJSON(object.certificateTemplate)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateCertificateTemplateRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.certificateTemplateId !== "") {
      obj.certificateTemplateId = message.certificateTemplateId;
    }
    if (message.certificateTemplate !== undefined) {
      obj.certificateTemplate = CertificateTemplate.toJSON(message.certificateTemplate);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCertificateTemplateRequest>): CreateCertificateTemplateRequest {
    return CreateCertificateTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCertificateTemplateRequest>): CreateCertificateTemplateRequest {
    const message = createBaseCreateCertificateTemplateRequest();
    message.parent = object.parent ?? "";
    message.certificateTemplateId = object.certificateTemplateId ?? "";
    message.certificateTemplate = (object.certificateTemplate !== undefined && object.certificateTemplate !== null)
      ? CertificateTemplate.fromPartial(object.certificateTemplate)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteCertificateTemplateRequest(): DeleteCertificateTemplateRequest {
  return { name: "", requestId: "" };
}

export const DeleteCertificateTemplateRequest: MessageFns<DeleteCertificateTemplateRequest> = {
  encode(message: DeleteCertificateTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCertificateTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCertificateTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCertificateTemplateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteCertificateTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCertificateTemplateRequest>): DeleteCertificateTemplateRequest {
    return DeleteCertificateTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCertificateTemplateRequest>): DeleteCertificateTemplateRequest {
    const message = createBaseDeleteCertificateTemplateRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetCertificateTemplateRequest(): GetCertificateTemplateRequest {
  return { name: "" };
}

export const GetCertificateTemplateRequest: MessageFns<GetCertificateTemplateRequest> = {
  encode(message: GetCertificateTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCertificateTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCertificateTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCertificateTemplateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCertificateTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCertificateTemplateRequest>): GetCertificateTemplateRequest {
    return GetCertificateTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCertificateTemplateRequest>): GetCertificateTemplateRequest {
    const message = createBaseGetCertificateTemplateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCertificateTemplatesRequest(): ListCertificateTemplatesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListCertificateTemplatesRequest: MessageFns<ListCertificateTemplatesRequest> = {
  encode(message: ListCertificateTemplatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCertificateTemplatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCertificateTemplatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCertificateTemplatesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListCertificateTemplatesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCertificateTemplatesRequest>): ListCertificateTemplatesRequest {
    return ListCertificateTemplatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCertificateTemplatesRequest>): ListCertificateTemplatesRequest {
    const message = createBaseListCertificateTemplatesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListCertificateTemplatesResponse(): ListCertificateTemplatesResponse {
  return { certificateTemplates: [], nextPageToken: "", unreachable: [] };
}

export const ListCertificateTemplatesResponse: MessageFns<ListCertificateTemplatesResponse> = {
  encode(message: ListCertificateTemplatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.certificateTemplates) {
      CertificateTemplate.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCertificateTemplatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCertificateTemplatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificateTemplates.push(CertificateTemplate.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCertificateTemplatesResponse {
    return {
      certificateTemplates: globalThis.Array.isArray(object?.certificateTemplates)
        ? object.certificateTemplates.map((e: any) => CertificateTemplate.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListCertificateTemplatesResponse): unknown {
    const obj: any = {};
    if (message.certificateTemplates?.length) {
      obj.certificateTemplates = message.certificateTemplates.map((e) => CertificateTemplate.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCertificateTemplatesResponse>): ListCertificateTemplatesResponse {
    return ListCertificateTemplatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCertificateTemplatesResponse>): ListCertificateTemplatesResponse {
    const message = createBaseListCertificateTemplatesResponse();
    message.certificateTemplates = object.certificateTemplates?.map((e) => CertificateTemplate.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateCertificateTemplateRequest(): UpdateCertificateTemplateRequest {
  return { certificateTemplate: undefined, updateMask: undefined, requestId: "" };
}

export const UpdateCertificateTemplateRequest: MessageFns<UpdateCertificateTemplateRequest> = {
  encode(message: UpdateCertificateTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.certificateTemplate !== undefined) {
      CertificateTemplate.encode(message.certificateTemplate, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCertificateTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCertificateTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.certificateTemplate = CertificateTemplate.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCertificateTemplateRequest {
    return {
      certificateTemplate: isSet(object.certificateTemplate)
        ? CertificateTemplate.fromJSON(object.certificateTemplate)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateCertificateTemplateRequest): unknown {
    const obj: any = {};
    if (message.certificateTemplate !== undefined) {
      obj.certificateTemplate = CertificateTemplate.toJSON(message.certificateTemplate);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCertificateTemplateRequest>): UpdateCertificateTemplateRequest {
    return UpdateCertificateTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCertificateTemplateRequest>): UpdateCertificateTemplateRequest {
    const message = createBaseUpdateCertificateTemplateRequest();
    message.certificateTemplate = (object.certificateTemplate !== undefined && object.certificateTemplate !== null)
      ? CertificateTemplate.fromPartial(object.certificateTemplate)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * [Certificate Authority
 * Service][google.cloud.security.privateca.v1.CertificateAuthorityService]
 * manages private certificate authorities and issued certificates.
 */
export type CertificateAuthorityServiceDefinition = typeof CertificateAuthorityServiceDefinition;
export const CertificateAuthorityServiceDefinition = {
  name: "CertificateAuthorityService",
  fullName: "google.cloud.security.privateca.v1.CertificateAuthorityService",
  methods: {
    /**
     * Create a new [Certificate][google.cloud.security.privateca.v1.Certificate]
     * in a given Project, Location from a particular
     * [CaPool][google.cloud.security.privateca.v1.CaPool].
     */
    createCertificate: {
      name: "CreateCertificate",
      requestType: CreateCertificateRequest,
      requestStream: false,
      responseType: Certificate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              44,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              73,
              58,
              11,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              34,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns a [Certificate][google.cloud.security.privateca.v1.Certificate]. */
    getCertificate: {
      name: "GetCertificate",
      requestType: GetCertificateRequest,
      requestStream: false,
      responseType: Certificate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists [Certificates][google.cloud.security.privateca.v1.Certificate]. */
    listCertificates: {
      name: "ListCertificates",
      requestType: ListCertificatesRequest,
      requestStream: false,
      responseType: ListCertificatesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Revoke a [Certificate][google.cloud.security.privateca.v1.Certificate]. */
    revokeCertificate: {
      name: "RevokeCertificate",
      requestType: RevokeCertificateRequest,
      requestStream: false,
      responseType: Certificate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              70,
              58,
              1,
              42,
              34,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              118,
              111,
              107,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Update a [Certificate][google.cloud.security.privateca.v1.Certificate].
     * Currently, the only field you can update is the
     * [labels][google.cloud.security.privateca.v1.Certificate.labels] field.
     */
    updateCertificate: {
      name: "UpdateCertificate",
      requestType: UpdateCertificateRequest,
      requestStream: false,
      responseType: Certificate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              85,
              58,
              11,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              50,
              70,
              47,
              118,
              49,
              47,
              123,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Activate a
     * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
     * that is in state
     * [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
     * and is of type
     * [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
     * After the parent Certificate Authority signs a certificate signing request
     * from
     * [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr],
     * this method can complete the activation process.
     */
    activateCertificateAuthority: {
      name: "ActivateCertificateAuthority",
      requestType: ActivateCertificateAuthorityRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              20,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              82,
              58,
              1,
              42,
              34,
              77,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Create a new
     * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
     * in a given Project and Location.
     */
    createCertificateAuthority: {
      name: "CreateCertificateAuthority",
      requestType: CreateCertificateAuthorityRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              20,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              53,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              44,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              93,
              58,
              21,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              34,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Disable a
     * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
     */
    disableCertificateAuthority: {
      name: "DisableCertificateAuthority",
      requestType: DisableCertificateAuthorityRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              20,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              100,
              105,
              115,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Enable a
     * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
     */
    enableCertificateAuthority: {
      name: "EnableCertificateAuthority",
      requestType: EnableCertificateAuthorityRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              20,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              80,
              58,
              1,
              42,
              34,
              75,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Fetch a certificate signing request (CSR) from a
     * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
     * that is in state
     * [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
     * and is of type
     * [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
     * The CSR must then be signed by the desired parent Certificate Authority,
     * which could be another
     * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
     * resource, or could be an on-prem certificate authority. See also
     * [ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
     */
    fetchCertificateAuthorityCsr: {
      name: "FetchCertificateAuthorityCsr",
      requestType: FetchCertificateAuthorityCsrRequest,
      requestStream: false,
      responseType: FetchCertificateAuthorityCsrResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              76,
              18,
              74,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a
     * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
     */
    getCertificateAuthority: {
      name: "GetCertificateAuthority",
      requestType: GetCertificateAuthorityRequest,
      requestStream: false,
      responseType: CertificateAuthority,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists
     * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
     */
    listCertificateAuthorities: {
      name: "ListCertificateAuthorities",
      requestType: ListCertificateAuthoritiesRequest,
      requestStream: false,
      responseType: ListCertificateAuthoritiesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Undelete a
     * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
     * that has been deleted.
     */
    undeleteCertificateAuthority: {
      name: "UndeleteCertificateAuthority",
      requestType: UndeleteCertificateAuthorityRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              20,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              82,
              58,
              1,
              42,
              34,
              77,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Delete a
     * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
     */
    deleteCertificateAuthority: {
      name: "DeleteCertificateAuthority",
      requestType: DeleteCertificateAuthorityRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              20,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              70,
              42,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Update a
     * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
     */
    updateCertificateAuthority: {
      name: "UpdateCertificateAuthority",
      requestType: UpdateCertificateAuthorityRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              20,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              115,
              58,
              21,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              50,
              90,
              47,
              118,
              49,
              47,
              123,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Create a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
    createCaPool: {
      name: "CreateCaPool",
      requestType: CreateCaPoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              6,
              67,
              97,
              80,
              111,
              111,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              97,
              95,
              112,
              111,
              111,
              108,
              44,
              99,
              97,
              95,
              112,
              111,
              111,
              108,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              58,
              7,
              99,
              97,
              95,
              112,
              111,
              111,
              108,
              34,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Update a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
    updateCaPool: {
      name: "UpdateCaPool",
      requestType: UpdateCaPoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              6,
              67,
              97,
              80,
              111,
              111,
              108,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 99, 97, 95, 112, 111, 111, 108, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              7,
              99,
              97,
              95,
              112,
              111,
              111,
              108,
              50,
              51,
              47,
              118,
              49,
              47,
              123,
              99,
              97,
              95,
              112,
              111,
              111,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
    getCaPool: {
      name: "GetCaPool",
      requestType: GetCaPoolRequest,
      requestStream: false,
      responseType: CaPool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists [CaPools][google.cloud.security.privateca.v1.CaPool]. */
    listCaPools: {
      name: "ListCaPools",
      requestType: ListCaPoolsRequest,
      requestStream: false,
      responseType: ListCaPoolsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Delete a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
    deleteCaPool: {
      name: "DeleteCaPool",
      requestType: DeleteCaPoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              42,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * FetchCaCerts returns the current trust anchor for the
     * [CaPool][google.cloud.security.privateca.v1.CaPool]. This will include CA
     * certificate chains for all certificate authorities in the ENABLED,
     * DISABLED, or STAGED states.
     */
    fetchCaCerts: {
      name: "FetchCaCerts",
      requestType: FetchCaCertsRequest,
      requestStream: false,
      responseType: FetchCaCertsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([7, 99, 97, 95, 112, 111, 111, 108])],
          578365826: [
            Buffer.from([
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              99,
              97,
              95,
              112,
              111,
              111,
              108,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              67,
              97,
              67,
              101,
              114,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a
     * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
     */
    getCertificateRevocationList: {
      name: "GetCertificateRevocationList",
      requestType: GetCertificateRevocationListRequest,
      requestStream: false,
      responseType: CertificateRevocationList,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              99,
              18,
              97,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              82,
              101,
              118,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              76,
              105,
              115,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists
     * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
     */
    listCertificateRevocationLists: {
      name: "ListCertificateRevocationLists",
      requestType: ListCertificateRevocationListsRequest,
      requestStream: false,
      responseType: ListCertificateRevocationListsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              99,
              18,
              97,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              82,
              101,
              118,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              76,
              105,
              115,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Update a
     * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
     */
    updateCertificateRevocationList: {
      name: "UpdateCertificateRevocationList",
      requestType: UpdateCertificateRevocationListRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              46,
              10,
              25,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              82,
              101,
              118,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              76,
              105,
              115,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              39,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              114,
              101,
              118,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              108,
              105,
              115,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              156,
              1,
              58,
              27,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              114,
              101,
              118,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              108,
              105,
              115,
              116,
              50,
              125,
              47,
              118,
              49,
              47,
              123,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              114,
              101,
              118,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              95,
              108,
              105,
              115,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              116,
              105,
              101,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              82,
              101,
              118,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              76,
              105,
              115,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Create a new
     * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
     * in a given Project and Location.
     */
    createCertificateTemplate: {
      name: "CreateCertificateTemplate",
      requestType: CreateCertificateTemplateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              19,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              51,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              44,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              20,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * DeleteCertificateTemplate deletes a
     * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
     */
    deleteCertificateTemplate: {
      name: "DeleteCertificateTemplate",
      requestType: DeleteCertificateTemplateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              77,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              52,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              46,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              99,
              97,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              42,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns a
     * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
     */
    getCertificateTemplate: {
      name: "GetCertificateTemplate",
      requestType: GetCertificateTemplateRequest,
      requestStream: false,
      responseType: CertificateTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists
     * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
     */
    listCertificateTemplates: {
      name: "ListCertificateTemplates",
      requestType: ListCertificateTemplatesRequest,
      requestStream: false,
      responseType: ListCertificateTemplatesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Update a
     * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
     */
    updateCertificateTemplate: {
      name: "UpdateCertificateTemplate",
      requestType: UpdateCertificateTemplateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              19,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              32,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              101,
              58,
              20,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              50,
              77,
              47,
              118,
              49,
              47,
              123,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CertificateAuthorityServiceImplementation<CallContextExt = {}> {
  /**
   * Create a new [Certificate][google.cloud.security.privateca.v1.Certificate]
   * in a given Project, Location from a particular
   * [CaPool][google.cloud.security.privateca.v1.CaPool].
   */
  createCertificate(
    request: CreateCertificateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Certificate>>;
  /** Returns a [Certificate][google.cloud.security.privateca.v1.Certificate]. */
  getCertificate(
    request: GetCertificateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Certificate>>;
  /** Lists [Certificates][google.cloud.security.privateca.v1.Certificate]. */
  listCertificates(
    request: ListCertificatesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCertificatesResponse>>;
  /** Revoke a [Certificate][google.cloud.security.privateca.v1.Certificate]. */
  revokeCertificate(
    request: RevokeCertificateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Certificate>>;
  /**
   * Update a [Certificate][google.cloud.security.privateca.v1.Certificate].
   * Currently, the only field you can update is the
   * [labels][google.cloud.security.privateca.v1.Certificate.labels] field.
   */
  updateCertificate(
    request: UpdateCertificateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Certificate>>;
  /**
   * Activate a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that is in state
   * [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
   * and is of type
   * [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
   * After the parent Certificate Authority signs a certificate signing request
   * from
   * [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr],
   * this method can complete the activation process.
   */
  activateCertificateAuthority(
    request: ActivateCertificateAuthorityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Create a new
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in a given Project and Location.
   */
  createCertificateAuthority(
    request: CreateCertificateAuthorityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Disable a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  disableCertificateAuthority(
    request: DisableCertificateAuthorityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Enable a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  enableCertificateAuthority(
    request: EnableCertificateAuthorityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Fetch a certificate signing request (CSR) from a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that is in state
   * [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
   * and is of type
   * [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
   * The CSR must then be signed by the desired parent Certificate Authority,
   * which could be another
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * resource, or could be an on-prem certificate authority. See also
   * [ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
   */
  fetchCertificateAuthorityCsr(
    request: FetchCertificateAuthorityCsrRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchCertificateAuthorityCsrResponse>>;
  /**
   * Returns a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  getCertificateAuthority(
    request: GetCertificateAuthorityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CertificateAuthority>>;
  /**
   * Lists
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  listCertificateAuthorities(
    request: ListCertificateAuthoritiesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCertificateAuthoritiesResponse>>;
  /**
   * Undelete a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that has been deleted.
   */
  undeleteCertificateAuthority(
    request: UndeleteCertificateAuthorityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Delete a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  deleteCertificateAuthority(
    request: DeleteCertificateAuthorityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Update a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  updateCertificateAuthority(
    request: UpdateCertificateAuthorityRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Create a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
  createCaPool(request: CreateCaPoolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Update a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
  updateCaPool(request: UpdateCaPoolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Returns a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
  getCaPool(request: GetCaPoolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<CaPool>>;
  /** Lists [CaPools][google.cloud.security.privateca.v1.CaPool]. */
  listCaPools(
    request: ListCaPoolsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCaPoolsResponse>>;
  /** Delete a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
  deleteCaPool(request: DeleteCaPoolRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * FetchCaCerts returns the current trust anchor for the
   * [CaPool][google.cloud.security.privateca.v1.CaPool]. This will include CA
   * certificate chains for all certificate authorities in the ENABLED,
   * DISABLED, or STAGED states.
   */
  fetchCaCerts(
    request: FetchCaCertsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchCaCertsResponse>>;
  /**
   * Returns a
   * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
   */
  getCertificateRevocationList(
    request: GetCertificateRevocationListRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CertificateRevocationList>>;
  /**
   * Lists
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
   */
  listCertificateRevocationLists(
    request: ListCertificateRevocationListsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCertificateRevocationListsResponse>>;
  /**
   * Update a
   * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
   */
  updateCertificateRevocationList(
    request: UpdateCertificateRevocationListRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Create a new
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * in a given Project and Location.
   */
  createCertificateTemplate(
    request: CreateCertificateTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * DeleteCertificateTemplate deletes a
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
   */
  deleteCertificateTemplate(
    request: DeleteCertificateTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Returns a
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
   */
  getCertificateTemplate(
    request: GetCertificateTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CertificateTemplate>>;
  /**
   * Lists
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
   */
  listCertificateTemplates(
    request: ListCertificateTemplatesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCertificateTemplatesResponse>>;
  /**
   * Update a
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
   */
  updateCertificateTemplate(
    request: UpdateCertificateTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface CertificateAuthorityServiceClient<CallOptionsExt = {}> {
  /**
   * Create a new [Certificate][google.cloud.security.privateca.v1.Certificate]
   * in a given Project, Location from a particular
   * [CaPool][google.cloud.security.privateca.v1.CaPool].
   */
  createCertificate(
    request: DeepPartial<CreateCertificateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Certificate>;
  /** Returns a [Certificate][google.cloud.security.privateca.v1.Certificate]. */
  getCertificate(
    request: DeepPartial<GetCertificateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Certificate>;
  /** Lists [Certificates][google.cloud.security.privateca.v1.Certificate]. */
  listCertificates(
    request: DeepPartial<ListCertificatesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCertificatesResponse>;
  /** Revoke a [Certificate][google.cloud.security.privateca.v1.Certificate]. */
  revokeCertificate(
    request: DeepPartial<RevokeCertificateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Certificate>;
  /**
   * Update a [Certificate][google.cloud.security.privateca.v1.Certificate].
   * Currently, the only field you can update is the
   * [labels][google.cloud.security.privateca.v1.Certificate.labels] field.
   */
  updateCertificate(
    request: DeepPartial<UpdateCertificateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Certificate>;
  /**
   * Activate a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that is in state
   * [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
   * and is of type
   * [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
   * After the parent Certificate Authority signs a certificate signing request
   * from
   * [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr],
   * this method can complete the activation process.
   */
  activateCertificateAuthority(
    request: DeepPartial<ActivateCertificateAuthorityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Create a new
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in a given Project and Location.
   */
  createCertificateAuthority(
    request: DeepPartial<CreateCertificateAuthorityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Disable a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  disableCertificateAuthority(
    request: DeepPartial<DisableCertificateAuthorityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Enable a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  enableCertificateAuthority(
    request: DeepPartial<EnableCertificateAuthorityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Fetch a certificate signing request (CSR) from a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that is in state
   * [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
   * and is of type
   * [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
   * The CSR must then be signed by the desired parent Certificate Authority,
   * which could be another
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * resource, or could be an on-prem certificate authority. See also
   * [ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
   */
  fetchCertificateAuthorityCsr(
    request: DeepPartial<FetchCertificateAuthorityCsrRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchCertificateAuthorityCsrResponse>;
  /**
   * Returns a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  getCertificateAuthority(
    request: DeepPartial<GetCertificateAuthorityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CertificateAuthority>;
  /**
   * Lists
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  listCertificateAuthorities(
    request: DeepPartial<ListCertificateAuthoritiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCertificateAuthoritiesResponse>;
  /**
   * Undelete a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that has been deleted.
   */
  undeleteCertificateAuthority(
    request: DeepPartial<UndeleteCertificateAuthorityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Delete a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  deleteCertificateAuthority(
    request: DeepPartial<DeleteCertificateAuthorityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Update a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   */
  updateCertificateAuthority(
    request: DeepPartial<UpdateCertificateAuthorityRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Create a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
  createCaPool(request: DeepPartial<CreateCaPoolRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Update a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
  updateCaPool(request: DeepPartial<UpdateCaPoolRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Returns a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
  getCaPool(request: DeepPartial<GetCaPoolRequest>, options?: CallOptions & CallOptionsExt): Promise<CaPool>;
  /** Lists [CaPools][google.cloud.security.privateca.v1.CaPool]. */
  listCaPools(
    request: DeepPartial<ListCaPoolsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCaPoolsResponse>;
  /** Delete a [CaPool][google.cloud.security.privateca.v1.CaPool]. */
  deleteCaPool(request: DeepPartial<DeleteCaPoolRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * FetchCaCerts returns the current trust anchor for the
   * [CaPool][google.cloud.security.privateca.v1.CaPool]. This will include CA
   * certificate chains for all certificate authorities in the ENABLED,
   * DISABLED, or STAGED states.
   */
  fetchCaCerts(
    request: DeepPartial<FetchCaCertsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchCaCertsResponse>;
  /**
   * Returns a
   * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
   */
  getCertificateRevocationList(
    request: DeepPartial<GetCertificateRevocationListRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CertificateRevocationList>;
  /**
   * Lists
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
   */
  listCertificateRevocationLists(
    request: DeepPartial<ListCertificateRevocationListsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCertificateRevocationListsResponse>;
  /**
   * Update a
   * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
   */
  updateCertificateRevocationList(
    request: DeepPartial<UpdateCertificateRevocationListRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Create a new
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * in a given Project and Location.
   */
  createCertificateTemplate(
    request: DeepPartial<CreateCertificateTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * DeleteCertificateTemplate deletes a
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
   */
  deleteCertificateTemplate(
    request: DeepPartial<DeleteCertificateTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Returns a
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
   */
  getCertificateTemplate(
    request: DeepPartial<GetCertificateTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CertificateTemplate>;
  /**
   * Lists
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
   */
  listCertificateTemplates(
    request: DeepPartial<ListCertificateTemplatesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCertificateTemplatesResponse>;
  /**
   * Update a
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
   */
  updateCertificateTemplate(
    request: DeepPartial<UpdateCertificateTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
