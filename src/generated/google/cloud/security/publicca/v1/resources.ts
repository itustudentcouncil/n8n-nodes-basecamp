// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/security/publicca/v1/resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.security.publicca.v1";

/**
 * A representation of an ExternalAccountKey used for [external account
 * binding](https://tools.ietf.org/html/rfc8555#section-7.3.4) within ACME.
 */
export interface ExternalAccountKey {
  /**
   * Output only. Resource name.
   * projects/{project}/locations/{location}/externalAccountKeys/{key_id}
   */
  name: string;
  /**
   * Output only. Key ID.
   * It is generated by the PublicCertificateAuthorityService
   * when the ExternalAccountKey is created
   */
  keyId: string;
  /**
   * Output only. Base64-URL-encoded HS256 key.
   * It is generated by the PublicCertificateAuthorityService
   * when the ExternalAccountKey is created
   */
  b64MacKey: Buffer;
}

function createBaseExternalAccountKey(): ExternalAccountKey {
  return { name: "", keyId: "", b64MacKey: Buffer.alloc(0) };
}

export const ExternalAccountKey: MessageFns<ExternalAccountKey> = {
  encode(message: ExternalAccountKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.keyId !== "") {
      writer.uint32(18).string(message.keyId);
    }
    if (message.b64MacKey.length !== 0) {
      writer.uint32(26).bytes(message.b64MacKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalAccountKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalAccountKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.b64MacKey = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalAccountKey {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
      b64MacKey: isSet(object.b64MacKey) ? Buffer.from(bytesFromBase64(object.b64MacKey)) : Buffer.alloc(0),
    };
  },

  toJSON(message: ExternalAccountKey): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.b64MacKey.length !== 0) {
      obj.b64MacKey = base64FromBytes(message.b64MacKey);
    }
    return obj;
  },

  create(base?: DeepPartial<ExternalAccountKey>): ExternalAccountKey {
    return ExternalAccountKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExternalAccountKey>): ExternalAccountKey {
    const message = createBaseExternalAccountKey();
    message.name = object.name ?? "";
    message.keyId = object.keyId ?? "";
    message.b64MacKey = object.b64MacKey ?? Buffer.alloc(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
