// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/channel/v1/customers.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { PostalAddress } from "../../../type/postal_address.js";
import { CloudIdentityInfo } from "./common.js";

export const protobufPackage = "google.cloud.channel.v1";

/** Entity representing a customer of a reseller or distributor. */
export interface Customer {
  /**
   * Output only. Resource name of the customer.
   * Format: accounts/{account_id}/customers/{customer_id}
   */
  name: string;
  /** Required. Name of the organization that the customer entity represents. */
  orgDisplayName: string;
  /**
   * Required. The organization address for the customer. To enforce US laws and
   * embargoes, we require a region, postal code, and address lines. You must
   * provide valid addresses for every customer. To set the customer's
   * language, use the Customer-level language code.
   */
  orgPostalAddress:
    | PostalAddress
    | undefined;
  /** Primary contact info. */
  primaryContactInfo:
    | ContactInfo
    | undefined;
  /**
   * Secondary contact email. You need to provide an alternate email to create
   * different domains if a primary contact email already exists. Users will
   * receive a notification with credentials when you create an admin.google.com
   * account. Secondary emails are also recovery email addresses. Alternate
   * emails are optional when you create Team customers.
   */
  alternateEmail: string;
  /**
   * Required. The customer's primary domain. Must match the primary contact
   * email's domain.
   */
  domain: string;
  /** Output only. Time when the customer was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when the customer was updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. The customer's Cloud Identity ID if the customer has a Cloud
   * Identity resource.
   */
  cloudIdentityId: string;
  /**
   * Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more
   * information, see
   * https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
   */
  languageCode: string;
  /**
   * Output only. Cloud Identity information for the customer.
   * Populated only if a Cloud Identity account exists for this customer.
   */
  cloudIdentityInfo:
    | CloudIdentityInfo
    | undefined;
  /**
   * Cloud Identity ID of the customer's channel partner.
   * Populated only if a channel partner exists for this customer.
   */
  channelPartnerId: string;
  /**
   * Optional. External CRM ID for the customer.
   * Populated only if a CRM ID exists for this customer.
   */
  correlationId: string;
}

/** Contact information for a customer account. */
export interface ContactInfo {
  /** The customer account contact's first name. Optional for Team customers. */
  firstName: string;
  /** The customer account contact's last name. Optional for Team customers. */
  lastName: string;
  /**
   * Output only. The customer account contact's display name, formatted as a
   * combination of the customer's first and last name.
   */
  displayName: string;
  /**
   * The customer account's contact email. Required for entitlements that create
   * admin.google.com accounts, and serves as the customer's username for those
   * accounts. Use this email to invite Team customers.
   */
  email: string;
  /** Optional. The customer account contact's job title. */
  title: string;
  /** The customer account's contact phone number. */
  phone: string;
}

function createBaseCustomer(): Customer {
  return {
    name: "",
    orgDisplayName: "",
    orgPostalAddress: undefined,
    primaryContactInfo: undefined,
    alternateEmail: "",
    domain: "",
    createTime: undefined,
    updateTime: undefined,
    cloudIdentityId: "",
    languageCode: "",
    cloudIdentityInfo: undefined,
    channelPartnerId: "",
    correlationId: "",
  };
}

export const Customer: MessageFns<Customer> = {
  encode(message: Customer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.orgDisplayName !== "") {
      writer.uint32(18).string(message.orgDisplayName);
    }
    if (message.orgPostalAddress !== undefined) {
      PostalAddress.encode(message.orgPostalAddress, writer.uint32(26).fork()).join();
    }
    if (message.primaryContactInfo !== undefined) {
      ContactInfo.encode(message.primaryContactInfo, writer.uint32(34).fork()).join();
    }
    if (message.alternateEmail !== "") {
      writer.uint32(42).string(message.alternateEmail);
    }
    if (message.domain !== "") {
      writer.uint32(50).string(message.domain);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    if (message.cloudIdentityId !== "") {
      writer.uint32(74).string(message.cloudIdentityId);
    }
    if (message.languageCode !== "") {
      writer.uint32(82).string(message.languageCode);
    }
    if (message.cloudIdentityInfo !== undefined) {
      CloudIdentityInfo.encode(message.cloudIdentityInfo, writer.uint32(98).fork()).join();
    }
    if (message.channelPartnerId !== "") {
      writer.uint32(106).string(message.channelPartnerId);
    }
    if (message.correlationId !== "") {
      writer.uint32(114).string(message.correlationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Customer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orgDisplayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.orgPostalAddress = PostalAddress.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.primaryContactInfo = ContactInfo.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.alternateEmail = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.cloudIdentityId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.cloudIdentityInfo = CloudIdentityInfo.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.channelPartnerId = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.correlationId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Customer {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      orgDisplayName: isSet(object.orgDisplayName) ? globalThis.String(object.orgDisplayName) : "",
      orgPostalAddress: isSet(object.orgPostalAddress) ? PostalAddress.fromJSON(object.orgPostalAddress) : undefined,
      primaryContactInfo: isSet(object.primaryContactInfo)
        ? ContactInfo.fromJSON(object.primaryContactInfo)
        : undefined,
      alternateEmail: isSet(object.alternateEmail) ? globalThis.String(object.alternateEmail) : "",
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      cloudIdentityId: isSet(object.cloudIdentityId) ? globalThis.String(object.cloudIdentityId) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      cloudIdentityInfo: isSet(object.cloudIdentityInfo)
        ? CloudIdentityInfo.fromJSON(object.cloudIdentityInfo)
        : undefined,
      channelPartnerId: isSet(object.channelPartnerId) ? globalThis.String(object.channelPartnerId) : "",
      correlationId: isSet(object.correlationId) ? globalThis.String(object.correlationId) : "",
    };
  },

  toJSON(message: Customer): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.orgDisplayName !== "") {
      obj.orgDisplayName = message.orgDisplayName;
    }
    if (message.orgPostalAddress !== undefined) {
      obj.orgPostalAddress = PostalAddress.toJSON(message.orgPostalAddress);
    }
    if (message.primaryContactInfo !== undefined) {
      obj.primaryContactInfo = ContactInfo.toJSON(message.primaryContactInfo);
    }
    if (message.alternateEmail !== "") {
      obj.alternateEmail = message.alternateEmail;
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.cloudIdentityId !== "") {
      obj.cloudIdentityId = message.cloudIdentityId;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.cloudIdentityInfo !== undefined) {
      obj.cloudIdentityInfo = CloudIdentityInfo.toJSON(message.cloudIdentityInfo);
    }
    if (message.channelPartnerId !== "") {
      obj.channelPartnerId = message.channelPartnerId;
    }
    if (message.correlationId !== "") {
      obj.correlationId = message.correlationId;
    }
    return obj;
  },

  create(base?: DeepPartial<Customer>): Customer {
    return Customer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Customer>): Customer {
    const message = createBaseCustomer();
    message.name = object.name ?? "";
    message.orgDisplayName = object.orgDisplayName ?? "";
    message.orgPostalAddress = (object.orgPostalAddress !== undefined && object.orgPostalAddress !== null)
      ? PostalAddress.fromPartial(object.orgPostalAddress)
      : undefined;
    message.primaryContactInfo = (object.primaryContactInfo !== undefined && object.primaryContactInfo !== null)
      ? ContactInfo.fromPartial(object.primaryContactInfo)
      : undefined;
    message.alternateEmail = object.alternateEmail ?? "";
    message.domain = object.domain ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.cloudIdentityId = object.cloudIdentityId ?? "";
    message.languageCode = object.languageCode ?? "";
    message.cloudIdentityInfo = (object.cloudIdentityInfo !== undefined && object.cloudIdentityInfo !== null)
      ? CloudIdentityInfo.fromPartial(object.cloudIdentityInfo)
      : undefined;
    message.channelPartnerId = object.channelPartnerId ?? "";
    message.correlationId = object.correlationId ?? "";
    return message;
  },
};

function createBaseContactInfo(): ContactInfo {
  return { firstName: "", lastName: "", displayName: "", email: "", title: "", phone: "" };
}

export const ContactInfo: MessageFns<ContactInfo> = {
  encode(message: ContactInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.email !== "") {
      writer.uint32(42).string(message.email);
    }
    if (message.title !== "") {
      writer.uint32(50).string(message.title);
    }
    if (message.phone !== "") {
      writer.uint32(58).string(message.phone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContactInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContactInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.email = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.phone = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContactInfo {
    return {
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
    };
  },

  toJSON(message: ContactInfo): unknown {
    const obj: any = {};
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    return obj;
  },

  create(base?: DeepPartial<ContactInfo>): ContactInfo {
    return ContactInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContactInfo>): ContactInfo {
    const message = createBaseContactInfo();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.displayName = object.displayName ?? "";
    message.email = object.email ?? "";
    message.title = object.title ?? "";
    message.phone = object.phone ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
