// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/channel/v1/entitlement_changes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  Entitlement_SuspensionReason,
  entitlement_SuspensionReasonFromJSON,
  entitlement_SuspensionReasonToJSON,
  Parameter,
  ProvisionedService,
} from "./entitlements.js";

export const protobufPackage = "google.cloud.channel.v1";

/** Change event entry for Entitlement order history */
export interface EntitlementChange {
  /** Suspension reason for the Entitlement. */
  suspensionReason?:
    | Entitlement_SuspensionReason
    | undefined;
  /** Cancellation reason for the Entitlement. */
  cancellationReason?:
    | EntitlementChange_CancellationReason
    | undefined;
  /** The Entitlement's activation reason */
  activationReason?:
    | EntitlementChange_ActivationReason
    | undefined;
  /** e.g. purchase_number change reason, entered by CRS. */
  otherChangeReason?:
    | string
    | undefined;
  /**
   * Required. Resource name of an entitlement in the form:
   * accounts/{account_id}/customers/{customer_id}/entitlements/{entitlement_id}
   */
  entitlement: string;
  /**
   * Required. Resource name of the Offer at the time of change.
   * Takes the form: accounts/{account_id}/offers/{offer_id}.
   */
  offer: string;
  /** Service provisioned for an Entitlement. */
  provisionedService:
    | ProvisionedService
    | undefined;
  /** The change action type. */
  changeType: EntitlementChange_ChangeType;
  /** The submitted time of the change. */
  createTime:
    | Date
    | undefined;
  /** Operator type responsible for the change. */
  operatorType: EntitlementChange_OperatorType;
  /**
   * Extended parameters, such as:
   * purchase_order_number, gcp_details;
   * internal_correlation_id, long_running_operation_id, order_id;
   * etc.
   */
  parameters: Parameter[];
  /**
   * Human-readable identifier that shows what operator made a change.
   * When the operator_type is RESELLER, this is the user's email address.
   * For all other operator types, this is empty.
   */
  operator: string;
}

/** Specifies the type of change action */
export enum EntitlementChange_ChangeType {
  /** CHANGE_TYPE_UNSPECIFIED - Not used. */
  CHANGE_TYPE_UNSPECIFIED = 0,
  /** CREATED - New Entitlement was created. */
  CREATED = 1,
  /** PRICE_PLAN_SWITCHED - Price plan associated with an Entitlement was changed. */
  PRICE_PLAN_SWITCHED = 3,
  /** COMMITMENT_CHANGED - Number of seats committed for a commitment Entitlement was changed. */
  COMMITMENT_CHANGED = 4,
  /** RENEWED - An annual Entitlement was renewed. */
  RENEWED = 5,
  /** SUSPENDED - Entitlement was suspended. */
  SUSPENDED = 6,
  /** ACTIVATED - Entitlement was activated. */
  ACTIVATED = 7,
  /** CANCELLED - Entitlement was cancelled. */
  CANCELLED = 8,
  /**
   * SKU_CHANGED - Entitlement was upgraded or downgraded for ex. from Google Workspace
   * Business Standard to Google Workspace Business Plus.
   */
  SKU_CHANGED = 9,
  /** RENEWAL_SETTING_CHANGED - The settings for renewal of an Entitlement have changed. */
  RENEWAL_SETTING_CHANGED = 10,
  /**
   * PAID_SUBSCRIPTION_STARTED - Use for Google Workspace subscription.
   * Either a trial was converted to a paid subscription or a new subscription
   * with no trial is created.
   */
  PAID_SUBSCRIPTION_STARTED = 11,
  /** LICENSE_CAP_CHANGED - License cap was changed for the entitlement. */
  LICENSE_CAP_CHANGED = 12,
  /** SUSPENSION_DETAILS_CHANGED - The suspension details have changed (but it is still suspended). */
  SUSPENSION_DETAILS_CHANGED = 13,
  /** TRIAL_END_DATE_EXTENDED - The trial end date was extended. */
  TRIAL_END_DATE_EXTENDED = 14,
  /** TRIAL_STARTED - Entitlement started trial. */
  TRIAL_STARTED = 15,
  UNRECOGNIZED = -1,
}

export function entitlementChange_ChangeTypeFromJSON(object: any): EntitlementChange_ChangeType {
  switch (object) {
    case 0:
    case "CHANGE_TYPE_UNSPECIFIED":
      return EntitlementChange_ChangeType.CHANGE_TYPE_UNSPECIFIED;
    case 1:
    case "CREATED":
      return EntitlementChange_ChangeType.CREATED;
    case 3:
    case "PRICE_PLAN_SWITCHED":
      return EntitlementChange_ChangeType.PRICE_PLAN_SWITCHED;
    case 4:
    case "COMMITMENT_CHANGED":
      return EntitlementChange_ChangeType.COMMITMENT_CHANGED;
    case 5:
    case "RENEWED":
      return EntitlementChange_ChangeType.RENEWED;
    case 6:
    case "SUSPENDED":
      return EntitlementChange_ChangeType.SUSPENDED;
    case 7:
    case "ACTIVATED":
      return EntitlementChange_ChangeType.ACTIVATED;
    case 8:
    case "CANCELLED":
      return EntitlementChange_ChangeType.CANCELLED;
    case 9:
    case "SKU_CHANGED":
      return EntitlementChange_ChangeType.SKU_CHANGED;
    case 10:
    case "RENEWAL_SETTING_CHANGED":
      return EntitlementChange_ChangeType.RENEWAL_SETTING_CHANGED;
    case 11:
    case "PAID_SUBSCRIPTION_STARTED":
      return EntitlementChange_ChangeType.PAID_SUBSCRIPTION_STARTED;
    case 12:
    case "LICENSE_CAP_CHANGED":
      return EntitlementChange_ChangeType.LICENSE_CAP_CHANGED;
    case 13:
    case "SUSPENSION_DETAILS_CHANGED":
      return EntitlementChange_ChangeType.SUSPENSION_DETAILS_CHANGED;
    case 14:
    case "TRIAL_END_DATE_EXTENDED":
      return EntitlementChange_ChangeType.TRIAL_END_DATE_EXTENDED;
    case 15:
    case "TRIAL_STARTED":
      return EntitlementChange_ChangeType.TRIAL_STARTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EntitlementChange_ChangeType.UNRECOGNIZED;
  }
}

export function entitlementChange_ChangeTypeToJSON(object: EntitlementChange_ChangeType): string {
  switch (object) {
    case EntitlementChange_ChangeType.CHANGE_TYPE_UNSPECIFIED:
      return "CHANGE_TYPE_UNSPECIFIED";
    case EntitlementChange_ChangeType.CREATED:
      return "CREATED";
    case EntitlementChange_ChangeType.PRICE_PLAN_SWITCHED:
      return "PRICE_PLAN_SWITCHED";
    case EntitlementChange_ChangeType.COMMITMENT_CHANGED:
      return "COMMITMENT_CHANGED";
    case EntitlementChange_ChangeType.RENEWED:
      return "RENEWED";
    case EntitlementChange_ChangeType.SUSPENDED:
      return "SUSPENDED";
    case EntitlementChange_ChangeType.ACTIVATED:
      return "ACTIVATED";
    case EntitlementChange_ChangeType.CANCELLED:
      return "CANCELLED";
    case EntitlementChange_ChangeType.SKU_CHANGED:
      return "SKU_CHANGED";
    case EntitlementChange_ChangeType.RENEWAL_SETTING_CHANGED:
      return "RENEWAL_SETTING_CHANGED";
    case EntitlementChange_ChangeType.PAID_SUBSCRIPTION_STARTED:
      return "PAID_SUBSCRIPTION_STARTED";
    case EntitlementChange_ChangeType.LICENSE_CAP_CHANGED:
      return "LICENSE_CAP_CHANGED";
    case EntitlementChange_ChangeType.SUSPENSION_DETAILS_CHANGED:
      return "SUSPENSION_DETAILS_CHANGED";
    case EntitlementChange_ChangeType.TRIAL_END_DATE_EXTENDED:
      return "TRIAL_END_DATE_EXTENDED";
    case EntitlementChange_ChangeType.TRIAL_STARTED:
      return "TRIAL_STARTED";
    case EntitlementChange_ChangeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Specifies the type of operator responsible for the change */
export enum EntitlementChange_OperatorType {
  /** OPERATOR_TYPE_UNSPECIFIED - Not used. */
  OPERATOR_TYPE_UNSPECIFIED = 0,
  /** CUSTOMER_SERVICE_REPRESENTATIVE - Customer service representative. */
  CUSTOMER_SERVICE_REPRESENTATIVE = 1,
  /** SYSTEM - System auto job. */
  SYSTEM = 2,
  /** CUSTOMER - Customer user. */
  CUSTOMER = 3,
  /** RESELLER - Reseller user. */
  RESELLER = 4,
  UNRECOGNIZED = -1,
}

export function entitlementChange_OperatorTypeFromJSON(object: any): EntitlementChange_OperatorType {
  switch (object) {
    case 0:
    case "OPERATOR_TYPE_UNSPECIFIED":
      return EntitlementChange_OperatorType.OPERATOR_TYPE_UNSPECIFIED;
    case 1:
    case "CUSTOMER_SERVICE_REPRESENTATIVE":
      return EntitlementChange_OperatorType.CUSTOMER_SERVICE_REPRESENTATIVE;
    case 2:
    case "SYSTEM":
      return EntitlementChange_OperatorType.SYSTEM;
    case 3:
    case "CUSTOMER":
      return EntitlementChange_OperatorType.CUSTOMER;
    case 4:
    case "RESELLER":
      return EntitlementChange_OperatorType.RESELLER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EntitlementChange_OperatorType.UNRECOGNIZED;
  }
}

export function entitlementChange_OperatorTypeToJSON(object: EntitlementChange_OperatorType): string {
  switch (object) {
    case EntitlementChange_OperatorType.OPERATOR_TYPE_UNSPECIFIED:
      return "OPERATOR_TYPE_UNSPECIFIED";
    case EntitlementChange_OperatorType.CUSTOMER_SERVICE_REPRESENTATIVE:
      return "CUSTOMER_SERVICE_REPRESENTATIVE";
    case EntitlementChange_OperatorType.SYSTEM:
      return "SYSTEM";
    case EntitlementChange_OperatorType.CUSTOMER:
      return "CUSTOMER";
    case EntitlementChange_OperatorType.RESELLER:
      return "RESELLER";
    case EntitlementChange_OperatorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Cancellation reason for the entitlement */
export enum EntitlementChange_CancellationReason {
  /** CANCELLATION_REASON_UNSPECIFIED - Not used. */
  CANCELLATION_REASON_UNSPECIFIED = 0,
  /** SERVICE_TERMINATED - Reseller triggered a cancellation of the service. */
  SERVICE_TERMINATED = 1,
  /**
   * RELATIONSHIP_ENDED - Relationship between the reseller and customer has ended due to a
   * transfer.
   */
  RELATIONSHIP_ENDED = 2,
  /**
   * PARTIAL_TRANSFER - Entitlement transferred away from reseller while still keeping other
   * entitlement(s) with the reseller.
   */
  PARTIAL_TRANSFER = 3,
  UNRECOGNIZED = -1,
}

export function entitlementChange_CancellationReasonFromJSON(object: any): EntitlementChange_CancellationReason {
  switch (object) {
    case 0:
    case "CANCELLATION_REASON_UNSPECIFIED":
      return EntitlementChange_CancellationReason.CANCELLATION_REASON_UNSPECIFIED;
    case 1:
    case "SERVICE_TERMINATED":
      return EntitlementChange_CancellationReason.SERVICE_TERMINATED;
    case 2:
    case "RELATIONSHIP_ENDED":
      return EntitlementChange_CancellationReason.RELATIONSHIP_ENDED;
    case 3:
    case "PARTIAL_TRANSFER":
      return EntitlementChange_CancellationReason.PARTIAL_TRANSFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EntitlementChange_CancellationReason.UNRECOGNIZED;
  }
}

export function entitlementChange_CancellationReasonToJSON(object: EntitlementChange_CancellationReason): string {
  switch (object) {
    case EntitlementChange_CancellationReason.CANCELLATION_REASON_UNSPECIFIED:
      return "CANCELLATION_REASON_UNSPECIFIED";
    case EntitlementChange_CancellationReason.SERVICE_TERMINATED:
      return "SERVICE_TERMINATED";
    case EntitlementChange_CancellationReason.RELATIONSHIP_ENDED:
      return "RELATIONSHIP_ENDED";
    case EntitlementChange_CancellationReason.PARTIAL_TRANSFER:
      return "PARTIAL_TRANSFER";
    case EntitlementChange_CancellationReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The Entitlement's activation reason */
export enum EntitlementChange_ActivationReason {
  /** ACTIVATION_REASON_UNSPECIFIED - Not used. */
  ACTIVATION_REASON_UNSPECIFIED = 0,
  /** RESELLER_REVOKED_SUSPENSION - Reseller reactivated a suspended Entitlement. */
  RESELLER_REVOKED_SUSPENSION = 1,
  /** CUSTOMER_ACCEPTED_PENDING_TOS - Customer accepted pending terms of service. */
  CUSTOMER_ACCEPTED_PENDING_TOS = 2,
  /**
   * RENEWAL_SETTINGS_CHANGED - Reseller updated the renewal settings on an entitlement that was
   * suspended due to cancellation, and this update reactivated the
   * entitlement.
   */
  RENEWAL_SETTINGS_CHANGED = 3,
  /**
   * OTHER_ACTIVATION_REASON - Other reasons (Activated temporarily for cancellation, added a payment
   * plan to a trial entitlement, etc.)
   */
  OTHER_ACTIVATION_REASON = 100,
  UNRECOGNIZED = -1,
}

export function entitlementChange_ActivationReasonFromJSON(object: any): EntitlementChange_ActivationReason {
  switch (object) {
    case 0:
    case "ACTIVATION_REASON_UNSPECIFIED":
      return EntitlementChange_ActivationReason.ACTIVATION_REASON_UNSPECIFIED;
    case 1:
    case "RESELLER_REVOKED_SUSPENSION":
      return EntitlementChange_ActivationReason.RESELLER_REVOKED_SUSPENSION;
    case 2:
    case "CUSTOMER_ACCEPTED_PENDING_TOS":
      return EntitlementChange_ActivationReason.CUSTOMER_ACCEPTED_PENDING_TOS;
    case 3:
    case "RENEWAL_SETTINGS_CHANGED":
      return EntitlementChange_ActivationReason.RENEWAL_SETTINGS_CHANGED;
    case 100:
    case "OTHER_ACTIVATION_REASON":
      return EntitlementChange_ActivationReason.OTHER_ACTIVATION_REASON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EntitlementChange_ActivationReason.UNRECOGNIZED;
  }
}

export function entitlementChange_ActivationReasonToJSON(object: EntitlementChange_ActivationReason): string {
  switch (object) {
    case EntitlementChange_ActivationReason.ACTIVATION_REASON_UNSPECIFIED:
      return "ACTIVATION_REASON_UNSPECIFIED";
    case EntitlementChange_ActivationReason.RESELLER_REVOKED_SUSPENSION:
      return "RESELLER_REVOKED_SUSPENSION";
    case EntitlementChange_ActivationReason.CUSTOMER_ACCEPTED_PENDING_TOS:
      return "CUSTOMER_ACCEPTED_PENDING_TOS";
    case EntitlementChange_ActivationReason.RENEWAL_SETTINGS_CHANGED:
      return "RENEWAL_SETTINGS_CHANGED";
    case EntitlementChange_ActivationReason.OTHER_ACTIVATION_REASON:
      return "OTHER_ACTIVATION_REASON";
    case EntitlementChange_ActivationReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseEntitlementChange(): EntitlementChange {
  return {
    suspensionReason: undefined,
    cancellationReason: undefined,
    activationReason: undefined,
    otherChangeReason: undefined,
    entitlement: "",
    offer: "",
    provisionedService: undefined,
    changeType: 0,
    createTime: undefined,
    operatorType: 0,
    parameters: [],
    operator: "",
  };
}

export const EntitlementChange: MessageFns<EntitlementChange> = {
  encode(message: EntitlementChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.suspensionReason !== undefined) {
      writer.uint32(72).int32(message.suspensionReason);
    }
    if (message.cancellationReason !== undefined) {
      writer.uint32(80).int32(message.cancellationReason);
    }
    if (message.activationReason !== undefined) {
      writer.uint32(88).int32(message.activationReason);
    }
    if (message.otherChangeReason !== undefined) {
      writer.uint32(802).string(message.otherChangeReason);
    }
    if (message.entitlement !== "") {
      writer.uint32(10).string(message.entitlement);
    }
    if (message.offer !== "") {
      writer.uint32(18).string(message.offer);
    }
    if (message.provisionedService !== undefined) {
      ProvisionedService.encode(message.provisionedService, writer.uint32(26).fork()).join();
    }
    if (message.changeType !== 0) {
      writer.uint32(32).int32(message.changeType);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.operatorType !== 0) {
      writer.uint32(48).int32(message.operatorType);
    }
    for (const v of message.parameters) {
      Parameter.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.operator !== "") {
      writer.uint32(98).string(message.operator);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntitlementChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitlementChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 9:
          if (tag !== 72) {
            break;
          }

          message.suspensionReason = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.cancellationReason = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.activationReason = reader.int32() as any;
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.otherChangeReason = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entitlement = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.offer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.provisionedService = ProvisionedService.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.changeType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.operatorType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.parameters.push(Parameter.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.operator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EntitlementChange {
    return {
      suspensionReason: isSet(object.suspensionReason)
        ? entitlement_SuspensionReasonFromJSON(object.suspensionReason)
        : undefined,
      cancellationReason: isSet(object.cancellationReason)
        ? entitlementChange_CancellationReasonFromJSON(object.cancellationReason)
        : undefined,
      activationReason: isSet(object.activationReason)
        ? entitlementChange_ActivationReasonFromJSON(object.activationReason)
        : undefined,
      otherChangeReason: isSet(object.otherChangeReason) ? globalThis.String(object.otherChangeReason) : undefined,
      entitlement: isSet(object.entitlement) ? globalThis.String(object.entitlement) : "",
      offer: isSet(object.offer) ? globalThis.String(object.offer) : "",
      provisionedService: isSet(object.provisionedService)
        ? ProvisionedService.fromJSON(object.provisionedService)
        : undefined,
      changeType: isSet(object.changeType) ? entitlementChange_ChangeTypeFromJSON(object.changeType) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      operatorType: isSet(object.operatorType) ? entitlementChange_OperatorTypeFromJSON(object.operatorType) : 0,
      parameters: globalThis.Array.isArray(object?.parameters)
        ? object.parameters.map((e: any) => Parameter.fromJSON(e))
        : [],
      operator: isSet(object.operator) ? globalThis.String(object.operator) : "",
    };
  },

  toJSON(message: EntitlementChange): unknown {
    const obj: any = {};
    if (message.suspensionReason !== undefined) {
      obj.suspensionReason = entitlement_SuspensionReasonToJSON(message.suspensionReason);
    }
    if (message.cancellationReason !== undefined) {
      obj.cancellationReason = entitlementChange_CancellationReasonToJSON(message.cancellationReason);
    }
    if (message.activationReason !== undefined) {
      obj.activationReason = entitlementChange_ActivationReasonToJSON(message.activationReason);
    }
    if (message.otherChangeReason !== undefined) {
      obj.otherChangeReason = message.otherChangeReason;
    }
    if (message.entitlement !== "") {
      obj.entitlement = message.entitlement;
    }
    if (message.offer !== "") {
      obj.offer = message.offer;
    }
    if (message.provisionedService !== undefined) {
      obj.provisionedService = ProvisionedService.toJSON(message.provisionedService);
    }
    if (message.changeType !== 0) {
      obj.changeType = entitlementChange_ChangeTypeToJSON(message.changeType);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.operatorType !== 0) {
      obj.operatorType = entitlementChange_OperatorTypeToJSON(message.operatorType);
    }
    if (message.parameters?.length) {
      obj.parameters = message.parameters.map((e) => Parameter.toJSON(e));
    }
    if (message.operator !== "") {
      obj.operator = message.operator;
    }
    return obj;
  },

  create(base?: DeepPartial<EntitlementChange>): EntitlementChange {
    return EntitlementChange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntitlementChange>): EntitlementChange {
    const message = createBaseEntitlementChange();
    message.suspensionReason = object.suspensionReason ?? undefined;
    message.cancellationReason = object.cancellationReason ?? undefined;
    message.activationReason = object.activationReason ?? undefined;
    message.otherChangeReason = object.otherChangeReason ?? undefined;
    message.entitlement = object.entitlement ?? "";
    message.offer = object.offer ?? "";
    message.provisionedService = (object.provisionedService !== undefined && object.provisionedService !== null)
      ? ProvisionedService.fromPartial(object.provisionedService)
      : undefined;
    message.changeType = object.changeType ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.operatorType = object.operatorType ?? 0;
    message.parameters = object.parameters?.map((e) => Parameter.fromPartial(e)) || [];
    message.operator = object.operator ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
