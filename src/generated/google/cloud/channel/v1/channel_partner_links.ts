// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/channel/v1/channel_partner_links.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { CloudIdentityInfo } from "./common.js";

export const protobufPackage = "google.cloud.channel.v1";

/**
 * The level of granularity the
 * [ChannelPartnerLink][google.cloud.channel.v1.ChannelPartnerLink] will
 * display.
 */
export enum ChannelPartnerLinkView {
  /**
   * UNSPECIFIED - The default / unset value.
   * The API will default to the BASIC view.
   */
  UNSPECIFIED = 0,
  /**
   * BASIC - Includes all fields except the
   * [ChannelPartnerLink.channel_partner_cloud_identity_info][google.cloud.channel.v1.ChannelPartnerLink.channel_partner_cloud_identity_info].
   */
  BASIC = 1,
  /** FULL - Includes all fields. */
  FULL = 2,
  UNRECOGNIZED = -1,
}

export function channelPartnerLinkViewFromJSON(object: any): ChannelPartnerLinkView {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ChannelPartnerLinkView.UNSPECIFIED;
    case 1:
    case "BASIC":
      return ChannelPartnerLinkView.BASIC;
    case 2:
    case "FULL":
      return ChannelPartnerLinkView.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChannelPartnerLinkView.UNRECOGNIZED;
  }
}

export function channelPartnerLinkViewToJSON(object: ChannelPartnerLinkView): string {
  switch (object) {
    case ChannelPartnerLinkView.UNSPECIFIED:
      return "UNSPECIFIED";
    case ChannelPartnerLinkView.BASIC:
      return "BASIC";
    case ChannelPartnerLinkView.FULL:
      return "FULL";
    case ChannelPartnerLinkView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ChannelPartnerLinkState represents state of a channel partner link. */
export enum ChannelPartnerLinkState {
  /** CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED - Not used. */
  CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED = 0,
  /**
   * INVITED - An invitation has been sent to the reseller to create a channel partner
   * link.
   */
  INVITED = 1,
  /** ACTIVE - Status when the reseller is active. */
  ACTIVE = 2,
  /** REVOKED - Status when the reseller has been revoked by the distributor. */
  REVOKED = 3,
  /** SUSPENDED - Status when the reseller is suspended by Google or distributor. */
  SUSPENDED = 4,
  UNRECOGNIZED = -1,
}

export function channelPartnerLinkStateFromJSON(object: any): ChannelPartnerLinkState {
  switch (object) {
    case 0:
    case "CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED":
      return ChannelPartnerLinkState.CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED;
    case 1:
    case "INVITED":
      return ChannelPartnerLinkState.INVITED;
    case 2:
    case "ACTIVE":
      return ChannelPartnerLinkState.ACTIVE;
    case 3:
    case "REVOKED":
      return ChannelPartnerLinkState.REVOKED;
    case 4:
    case "SUSPENDED":
      return ChannelPartnerLinkState.SUSPENDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChannelPartnerLinkState.UNRECOGNIZED;
  }
}

export function channelPartnerLinkStateToJSON(object: ChannelPartnerLinkState): string {
  switch (object) {
    case ChannelPartnerLinkState.CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED:
      return "CHANNEL_PARTNER_LINK_STATE_UNSPECIFIED";
    case ChannelPartnerLinkState.INVITED:
      return "INVITED";
    case ChannelPartnerLinkState.ACTIVE:
      return "ACTIVE";
    case ChannelPartnerLinkState.REVOKED:
      return "REVOKED";
    case ChannelPartnerLinkState.SUSPENDED:
      return "SUSPENDED";
    case ChannelPartnerLinkState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Entity representing a link between distributors and their indirect
 * resellers in an n-tier resale channel.
 */
export interface ChannelPartnerLink {
  /**
   * Output only. Resource name for the channel partner link, in the format
   * accounts/{account_id}/channelPartnerLinks/{id}.
   */
  name: string;
  /** Required. Cloud Identity ID of the linked reseller. */
  resellerCloudIdentityId: string;
  /** Required. State of the channel partner link. */
  linkState: ChannelPartnerLinkState;
  /** Output only. URI of the web page where partner accepts the link invitation. */
  inviteLinkUri: string;
  /** Output only. Timestamp of when the channel partner link is created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp of when the channel partner link is updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. Public identifier that a customer must use to generate a
   * transfer token to move to this distributor-reseller combination.
   */
  publicId: string;
  /** Output only. Cloud Identity info of the channel partner (IR). */
  channelPartnerCloudIdentityInfo: CloudIdentityInfo | undefined;
}

function createBaseChannelPartnerLink(): ChannelPartnerLink {
  return {
    name: "",
    resellerCloudIdentityId: "",
    linkState: 0,
    inviteLinkUri: "",
    createTime: undefined,
    updateTime: undefined,
    publicId: "",
    channelPartnerCloudIdentityInfo: undefined,
  };
}

export const ChannelPartnerLink: MessageFns<ChannelPartnerLink> = {
  encode(message: ChannelPartnerLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.resellerCloudIdentityId !== "") {
      writer.uint32(18).string(message.resellerCloudIdentityId);
    }
    if (message.linkState !== 0) {
      writer.uint32(24).int32(message.linkState);
    }
    if (message.inviteLinkUri !== "") {
      writer.uint32(34).string(message.inviteLinkUri);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.publicId !== "") {
      writer.uint32(58).string(message.publicId);
    }
    if (message.channelPartnerCloudIdentityInfo !== undefined) {
      CloudIdentityInfo.encode(message.channelPartnerCloudIdentityInfo, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelPartnerLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelPartnerLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resellerCloudIdentityId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.linkState = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.inviteLinkUri = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.publicId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.channelPartnerCloudIdentityInfo = CloudIdentityInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelPartnerLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      resellerCloudIdentityId: isSet(object.resellerCloudIdentityId)
        ? globalThis.String(object.resellerCloudIdentityId)
        : "",
      linkState: isSet(object.linkState) ? channelPartnerLinkStateFromJSON(object.linkState) : 0,
      inviteLinkUri: isSet(object.inviteLinkUri) ? globalThis.String(object.inviteLinkUri) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      publicId: isSet(object.publicId) ? globalThis.String(object.publicId) : "",
      channelPartnerCloudIdentityInfo: isSet(object.channelPartnerCloudIdentityInfo)
        ? CloudIdentityInfo.fromJSON(object.channelPartnerCloudIdentityInfo)
        : undefined,
    };
  },

  toJSON(message: ChannelPartnerLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.resellerCloudIdentityId !== "") {
      obj.resellerCloudIdentityId = message.resellerCloudIdentityId;
    }
    if (message.linkState !== 0) {
      obj.linkState = channelPartnerLinkStateToJSON(message.linkState);
    }
    if (message.inviteLinkUri !== "") {
      obj.inviteLinkUri = message.inviteLinkUri;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.publicId !== "") {
      obj.publicId = message.publicId;
    }
    if (message.channelPartnerCloudIdentityInfo !== undefined) {
      obj.channelPartnerCloudIdentityInfo = CloudIdentityInfo.toJSON(message.channelPartnerCloudIdentityInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<ChannelPartnerLink>): ChannelPartnerLink {
    return ChannelPartnerLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChannelPartnerLink>): ChannelPartnerLink {
    const message = createBaseChannelPartnerLink();
    message.name = object.name ?? "";
    message.resellerCloudIdentityId = object.resellerCloudIdentityId ?? "";
    message.linkState = object.linkState ?? 0;
    message.inviteLinkUri = object.inviteLinkUri ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.publicId = object.publicId ?? "";
    message.channelPartnerCloudIdentityInfo =
      (object.channelPartnerCloudIdentityInfo !== undefined && object.channelPartnerCloudIdentityInfo !== null)
        ? CloudIdentityInfo.fromPartial(object.channelPartnerCloudIdentityInfo)
        : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
