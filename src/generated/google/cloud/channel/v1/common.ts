// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/channel/v1/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../protobuf/any.js";

export const protobufPackage = "google.cloud.channel.v1";

/** Required Edu Attributes */
export interface EduData {
  /** Designated institute type of customer. */
  instituteType: EduData_InstituteType;
  /** Size of the institute. */
  instituteSize: EduData_InstituteSize;
  /** Web address for the edu customer's institution. */
  website: string;
}

/** Enum to specify the institute type. */
export enum EduData_InstituteType {
  /** INSTITUTE_TYPE_UNSPECIFIED - Not used. */
  INSTITUTE_TYPE_UNSPECIFIED = 0,
  /** K12 - Elementary/Secondary Schools & Districts */
  K12 = 1,
  /** UNIVERSITY - Higher Education Universities & Colleges */
  UNIVERSITY = 2,
  UNRECOGNIZED = -1,
}

export function eduData_InstituteTypeFromJSON(object: any): EduData_InstituteType {
  switch (object) {
    case 0:
    case "INSTITUTE_TYPE_UNSPECIFIED":
      return EduData_InstituteType.INSTITUTE_TYPE_UNSPECIFIED;
    case 1:
    case "K12":
      return EduData_InstituteType.K12;
    case 2:
    case "UNIVERSITY":
      return EduData_InstituteType.UNIVERSITY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EduData_InstituteType.UNRECOGNIZED;
  }
}

export function eduData_InstituteTypeToJSON(object: EduData_InstituteType): string {
  switch (object) {
    case EduData_InstituteType.INSTITUTE_TYPE_UNSPECIFIED:
      return "INSTITUTE_TYPE_UNSPECIFIED";
    case EduData_InstituteType.K12:
      return "K12";
    case EduData_InstituteType.UNIVERSITY:
      return "UNIVERSITY";
    case EduData_InstituteType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Number of students and staff the institute has. */
export enum EduData_InstituteSize {
  /** INSTITUTE_SIZE_UNSPECIFIED - Not used. */
  INSTITUTE_SIZE_UNSPECIFIED = 0,
  /** SIZE_1_100 - 1 - 100 */
  SIZE_1_100 = 1,
  /** SIZE_101_500 - 101 - 500 */
  SIZE_101_500 = 2,
  /** SIZE_501_1000 - 501 - 1,000 */
  SIZE_501_1000 = 3,
  /** SIZE_1001_2000 - 1,001 - 2,000 */
  SIZE_1001_2000 = 4,
  /** SIZE_2001_5000 - 2,001 - 5,000 */
  SIZE_2001_5000 = 5,
  /** SIZE_5001_10000 - 5,001 - 10,000 */
  SIZE_5001_10000 = 6,
  /** SIZE_10001_OR_MORE - 10,001 + */
  SIZE_10001_OR_MORE = 7,
  UNRECOGNIZED = -1,
}

export function eduData_InstituteSizeFromJSON(object: any): EduData_InstituteSize {
  switch (object) {
    case 0:
    case "INSTITUTE_SIZE_UNSPECIFIED":
      return EduData_InstituteSize.INSTITUTE_SIZE_UNSPECIFIED;
    case 1:
    case "SIZE_1_100":
      return EduData_InstituteSize.SIZE_1_100;
    case 2:
    case "SIZE_101_500":
      return EduData_InstituteSize.SIZE_101_500;
    case 3:
    case "SIZE_501_1000":
      return EduData_InstituteSize.SIZE_501_1000;
    case 4:
    case "SIZE_1001_2000":
      return EduData_InstituteSize.SIZE_1001_2000;
    case 5:
    case "SIZE_2001_5000":
      return EduData_InstituteSize.SIZE_2001_5000;
    case 6:
    case "SIZE_5001_10000":
      return EduData_InstituteSize.SIZE_5001_10000;
    case 7:
    case "SIZE_10001_OR_MORE":
      return EduData_InstituteSize.SIZE_10001_OR_MORE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EduData_InstituteSize.UNRECOGNIZED;
  }
}

export function eduData_InstituteSizeToJSON(object: EduData_InstituteSize): string {
  switch (object) {
    case EduData_InstituteSize.INSTITUTE_SIZE_UNSPECIFIED:
      return "INSTITUTE_SIZE_UNSPECIFIED";
    case EduData_InstituteSize.SIZE_1_100:
      return "SIZE_1_100";
    case EduData_InstituteSize.SIZE_101_500:
      return "SIZE_101_500";
    case EduData_InstituteSize.SIZE_501_1000:
      return "SIZE_501_1000";
    case EduData_InstituteSize.SIZE_1001_2000:
      return "SIZE_1001_2000";
    case EduData_InstituteSize.SIZE_2001_5000:
      return "SIZE_2001_5000";
    case EduData_InstituteSize.SIZE_5001_10000:
      return "SIZE_5001_10000";
    case EduData_InstituteSize.SIZE_10001_OR_MORE:
      return "SIZE_10001_OR_MORE";
    case EduData_InstituteSize.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Cloud Identity information for the Cloud Channel Customer. */
export interface CloudIdentityInfo {
  /** CustomerType indicates verification type needed for using services. */
  customerType: CloudIdentityInfo_CustomerType;
  /** Output only. The primary domain name. */
  primaryDomain: string;
  /**
   * Output only. Whether the domain is verified.
   * This field is not returned for a Customer's cloud_identity_info resource.
   * Partners can use the domains.get() method of the Workspace SDK's
   * Directory API, or listen to the PRIMARY_DOMAIN_VERIFIED Pub/Sub event in
   * to track domain verification of their resolve Workspace customers.
   */
  isDomainVerified: boolean;
  /** The alternate email. */
  alternateEmail: string;
  /** Phone number associated with the Cloud Identity. */
  phoneNumber: string;
  /** Language code. */
  languageCode: string;
  /** Output only. URI of Customer's Admin console dashboard. */
  adminConsoleUri: string;
  /** Edu information about the customer. */
  eduData: EduData | undefined;
}

/** CustomerType of the customer */
export enum CloudIdentityInfo_CustomerType {
  /** CUSTOMER_TYPE_UNSPECIFIED - Not used. */
  CUSTOMER_TYPE_UNSPECIFIED = 0,
  /** DOMAIN - Domain-owning customer which needs domain verification to use services. */
  DOMAIN = 1,
  /** TEAM - Team customer which needs email verification to use services. */
  TEAM = 2,
  UNRECOGNIZED = -1,
}

export function cloudIdentityInfo_CustomerTypeFromJSON(object: any): CloudIdentityInfo_CustomerType {
  switch (object) {
    case 0:
    case "CUSTOMER_TYPE_UNSPECIFIED":
      return CloudIdentityInfo_CustomerType.CUSTOMER_TYPE_UNSPECIFIED;
    case 1:
    case "DOMAIN":
      return CloudIdentityInfo_CustomerType.DOMAIN;
    case 2:
    case "TEAM":
      return CloudIdentityInfo_CustomerType.TEAM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CloudIdentityInfo_CustomerType.UNRECOGNIZED;
  }
}

export function cloudIdentityInfo_CustomerTypeToJSON(object: CloudIdentityInfo_CustomerType): string {
  switch (object) {
    case CloudIdentityInfo_CustomerType.CUSTOMER_TYPE_UNSPECIFIED:
      return "CUSTOMER_TYPE_UNSPECIFIED";
    case CloudIdentityInfo_CustomerType.DOMAIN:
      return "DOMAIN";
    case CloudIdentityInfo_CustomerType.TEAM:
      return "TEAM";
    case CloudIdentityInfo_CustomerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Data type and value of a parameter. */
export interface Value {
  /** Represents an int64 value. */
  int64Value?:
    | Long
    | undefined;
  /** Represents a string value. */
  stringValue?:
    | string
    | undefined;
  /** Represents a double value. */
  doubleValue?:
    | number
    | undefined;
  /** Represents an 'Any' proto value. */
  protoValue?:
    | Any
    | undefined;
  /** Represents a boolean value. */
  boolValue?: boolean | undefined;
}

/** Information needed to create an Admin User for Google Workspace. */
export interface AdminUser {
  /** Primary email of the admin user. */
  email: string;
  /** Given name of the admin user. */
  givenName: string;
  /** Family name of the admin user. */
  familyName: string;
}

function createBaseEduData(): EduData {
  return { instituteType: 0, instituteSize: 0, website: "" };
}

export const EduData: MessageFns<EduData> = {
  encode(message: EduData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instituteType !== 0) {
      writer.uint32(8).int32(message.instituteType);
    }
    if (message.instituteSize !== 0) {
      writer.uint32(16).int32(message.instituteSize);
    }
    if (message.website !== "") {
      writer.uint32(26).string(message.website);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EduData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEduData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.instituteType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.instituteSize = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.website = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EduData {
    return {
      instituteType: isSet(object.instituteType) ? eduData_InstituteTypeFromJSON(object.instituteType) : 0,
      instituteSize: isSet(object.instituteSize) ? eduData_InstituteSizeFromJSON(object.instituteSize) : 0,
      website: isSet(object.website) ? globalThis.String(object.website) : "",
    };
  },

  toJSON(message: EduData): unknown {
    const obj: any = {};
    if (message.instituteType !== 0) {
      obj.instituteType = eduData_InstituteTypeToJSON(message.instituteType);
    }
    if (message.instituteSize !== 0) {
      obj.instituteSize = eduData_InstituteSizeToJSON(message.instituteSize);
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    return obj;
  },

  create(base?: DeepPartial<EduData>): EduData {
    return EduData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EduData>): EduData {
    const message = createBaseEduData();
    message.instituteType = object.instituteType ?? 0;
    message.instituteSize = object.instituteSize ?? 0;
    message.website = object.website ?? "";
    return message;
  },
};

function createBaseCloudIdentityInfo(): CloudIdentityInfo {
  return {
    customerType: 0,
    primaryDomain: "",
    isDomainVerified: false,
    alternateEmail: "",
    phoneNumber: "",
    languageCode: "",
    adminConsoleUri: "",
    eduData: undefined,
  };
}

export const CloudIdentityInfo: MessageFns<CloudIdentityInfo> = {
  encode(message: CloudIdentityInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customerType !== 0) {
      writer.uint32(8).int32(message.customerType);
    }
    if (message.primaryDomain !== "") {
      writer.uint32(74).string(message.primaryDomain);
    }
    if (message.isDomainVerified !== false) {
      writer.uint32(32).bool(message.isDomainVerified);
    }
    if (message.alternateEmail !== "") {
      writer.uint32(50).string(message.alternateEmail);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(58).string(message.phoneNumber);
    }
    if (message.languageCode !== "") {
      writer.uint32(66).string(message.languageCode);
    }
    if (message.adminConsoleUri !== "") {
      writer.uint32(82).string(message.adminConsoleUri);
    }
    if (message.eduData !== undefined) {
      EduData.encode(message.eduData, writer.uint32(178).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudIdentityInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudIdentityInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.customerType = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.primaryDomain = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isDomainVerified = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.alternateEmail = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.adminConsoleUri = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.eduData = EduData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudIdentityInfo {
    return {
      customerType: isSet(object.customerType) ? cloudIdentityInfo_CustomerTypeFromJSON(object.customerType) : 0,
      primaryDomain: isSet(object.primaryDomain) ? globalThis.String(object.primaryDomain) : "",
      isDomainVerified: isSet(object.isDomainVerified) ? globalThis.Boolean(object.isDomainVerified) : false,
      alternateEmail: isSet(object.alternateEmail) ? globalThis.String(object.alternateEmail) : "",
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      adminConsoleUri: isSet(object.adminConsoleUri) ? globalThis.String(object.adminConsoleUri) : "",
      eduData: isSet(object.eduData) ? EduData.fromJSON(object.eduData) : undefined,
    };
  },

  toJSON(message: CloudIdentityInfo): unknown {
    const obj: any = {};
    if (message.customerType !== 0) {
      obj.customerType = cloudIdentityInfo_CustomerTypeToJSON(message.customerType);
    }
    if (message.primaryDomain !== "") {
      obj.primaryDomain = message.primaryDomain;
    }
    if (message.isDomainVerified !== false) {
      obj.isDomainVerified = message.isDomainVerified;
    }
    if (message.alternateEmail !== "") {
      obj.alternateEmail = message.alternateEmail;
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.adminConsoleUri !== "") {
      obj.adminConsoleUri = message.adminConsoleUri;
    }
    if (message.eduData !== undefined) {
      obj.eduData = EduData.toJSON(message.eduData);
    }
    return obj;
  },

  create(base?: DeepPartial<CloudIdentityInfo>): CloudIdentityInfo {
    return CloudIdentityInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudIdentityInfo>): CloudIdentityInfo {
    const message = createBaseCloudIdentityInfo();
    message.customerType = object.customerType ?? 0;
    message.primaryDomain = object.primaryDomain ?? "";
    message.isDomainVerified = object.isDomainVerified ?? false;
    message.alternateEmail = object.alternateEmail ?? "";
    message.phoneNumber = object.phoneNumber ?? "";
    message.languageCode = object.languageCode ?? "";
    message.adminConsoleUri = object.adminConsoleUri ?? "";
    message.eduData = (object.eduData !== undefined && object.eduData !== null)
      ? EduData.fromPartial(object.eduData)
      : undefined;
    return message;
  },
};

function createBaseValue(): Value {
  return {
    int64Value: undefined,
    stringValue: undefined,
    doubleValue: undefined,
    protoValue: undefined,
    boolValue: undefined,
  };
}

export const Value: MessageFns<Value> = {
  encode(message: Value, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.int64Value !== undefined) {
      writer.uint32(8).int64(message.int64Value.toString());
    }
    if (message.stringValue !== undefined) {
      writer.uint32(18).string(message.stringValue);
    }
    if (message.doubleValue !== undefined) {
      writer.uint32(25).double(message.doubleValue);
    }
    if (message.protoValue !== undefined) {
      Any.encode(message.protoValue, writer.uint32(34).fork()).join();
    }
    if (message.boolValue !== undefined) {
      writer.uint32(40).bool(message.boolValue);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Value {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.int64Value = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.protoValue = Any.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Value {
    return {
      int64Value: isSet(object.int64Value) ? Long.fromValue(object.int64Value) : undefined,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : undefined,
      protoValue: isSet(object.protoValue) ? Any.fromJSON(object.protoValue) : undefined,
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : undefined,
    };
  },

  toJSON(message: Value): unknown {
    const obj: any = {};
    if (message.int64Value !== undefined) {
      obj.int64Value = (message.int64Value || Long.ZERO).toString();
    }
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.doubleValue !== undefined) {
      obj.doubleValue = message.doubleValue;
    }
    if (message.protoValue !== undefined) {
      obj.protoValue = Any.toJSON(message.protoValue);
    }
    if (message.boolValue !== undefined) {
      obj.boolValue = message.boolValue;
    }
    return obj;
  },

  create(base?: DeepPartial<Value>): Value {
    return Value.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Value>): Value {
    const message = createBaseValue();
    message.int64Value = (object.int64Value !== undefined && object.int64Value !== null)
      ? Long.fromValue(object.int64Value)
      : undefined;
    message.stringValue = object.stringValue ?? undefined;
    message.doubleValue = object.doubleValue ?? undefined;
    message.protoValue = (object.protoValue !== undefined && object.protoValue !== null)
      ? Any.fromPartial(object.protoValue)
      : undefined;
    message.boolValue = object.boolValue ?? undefined;
    return message;
  },
};

function createBaseAdminUser(): AdminUser {
  return { email: "", givenName: "", familyName: "" };
}

export const AdminUser: MessageFns<AdminUser> = {
  encode(message: AdminUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.givenName !== "") {
      writer.uint32(18).string(message.givenName);
    }
    if (message.familyName !== "") {
      writer.uint32(26).string(message.familyName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdminUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdminUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.givenName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.familyName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdminUser {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      givenName: isSet(object.givenName) ? globalThis.String(object.givenName) : "",
      familyName: isSet(object.familyName) ? globalThis.String(object.familyName) : "",
    };
  },

  toJSON(message: AdminUser): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.givenName !== "") {
      obj.givenName = message.givenName;
    }
    if (message.familyName !== "") {
      obj.familyName = message.familyName;
    }
    return obj;
  },

  create(base?: DeepPartial<AdminUser>): AdminUser {
    return AdminUser.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdminUser>): AdminUser {
    const message = createBaseAdminUser();
    message.email = object.email ?? "";
    message.givenName = object.givenName ?? "";
    message.familyName = object.familyName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
