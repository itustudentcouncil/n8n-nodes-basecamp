// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/paymentgateway/issuerswitch/v1/logs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { LogSeverity, logSeverityFromJSON, logSeverityToJSON } from "../../../../logging/type/log_severity.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import {
  ApiType,
  apiTypeFromJSON,
  apiTypeToJSON,
  TransactionType,
  transactionTypeFromJSON,
  transactionTypeToJSON,
  XmlApiType,
  xmlApiTypeFromJSON,
  xmlApiTypeToJSON,
} from "./common_fields.js";
import { TransactionInfo_State, transactionInfo_StateFromJSON, transactionInfo_StateToJSON } from "./transactions.js";

export const protobufPackage = "google.cloud.paymentgateway.issuerswitch.v1";

/** The payload for the log entry. */
export interface UpiTransaction {
  /** A human readable message about the log entry. */
  message: string;
  /** The severity of the log entry. */
  severity: LogSeverity;
  /** The API type of the transaction. */
  apiType: ApiType;
  /** The XML API type of the transaction. */
  xmlApiType: XmlApiType;
  /** The type of the transaction. */
  transactionType: TransactionType;
  /** UPI's transaction ID. */
  transactionId: string;
  /** UPI's message ID. */
  messageId: string;
  /**
   * The payment's RRN. This will be present only for payment related
   * transactions.
   */
  rrn: string;
  /** The timestamp at which the payload was received by the issuer switch. */
  payloadReceiptTime:
    | Date
    | undefined;
  /** The timestamp at which the payload was sent by the issuer switch. */
  payloadSentTime:
    | Date
    | undefined;
  /**
   * Status of the transaction which could be SUCCESS or FAILURE. This will be
   * populated only after transaction is complete.
   */
  status: TransactionInfo_State;
  /**
   * Issuer switch error code. This will be present only for failed
   * transactions.
   */
  errorCode: string;
  /**
   * UPI error code that was sent back to NPCI. This will be present only for
   * failed transactions.
   */
  upiErrorCode: string;
  /**
   * Issuer switch error message. This will be present only for failed
   * transactions.
   */
  errorMessage: string;
  /** The payload in XML format sent to the issuer switch. */
  sent?:
    | string
    | undefined;
  /** The payload in XML format received by the issuer switch. */
  received?: string | undefined;
}

function createBaseUpiTransaction(): UpiTransaction {
  return {
    message: "",
    severity: 0,
    apiType: 0,
    xmlApiType: 0,
    transactionType: 0,
    transactionId: "",
    messageId: "",
    rrn: "",
    payloadReceiptTime: undefined,
    payloadSentTime: undefined,
    status: 0,
    errorCode: "",
    upiErrorCode: "",
    errorMessage: "",
    sent: undefined,
    received: undefined,
  };
}

export const UpiTransaction: MessageFns<UpiTransaction> = {
  encode(message: UpiTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.severity !== 0) {
      writer.uint32(16).int32(message.severity);
    }
    if (message.apiType !== 0) {
      writer.uint32(24).int32(message.apiType);
    }
    if (message.xmlApiType !== 0) {
      writer.uint32(32).int32(message.xmlApiType);
    }
    if (message.transactionType !== 0) {
      writer.uint32(40).int32(message.transactionType);
    }
    if (message.transactionId !== "") {
      writer.uint32(50).string(message.transactionId);
    }
    if (message.messageId !== "") {
      writer.uint32(58).string(message.messageId);
    }
    if (message.rrn !== "") {
      writer.uint32(66).string(message.rrn);
    }
    if (message.payloadReceiptTime !== undefined) {
      Timestamp.encode(toTimestamp(message.payloadReceiptTime), writer.uint32(74).fork()).join();
    }
    if (message.payloadSentTime !== undefined) {
      Timestamp.encode(toTimestamp(message.payloadSentTime), writer.uint32(82).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(88).int32(message.status);
    }
    if (message.errorCode !== "") {
      writer.uint32(98).string(message.errorCode);
    }
    if (message.upiErrorCode !== "") {
      writer.uint32(106).string(message.upiErrorCode);
    }
    if (message.errorMessage !== "") {
      writer.uint32(114).string(message.errorMessage);
    }
    if (message.sent !== undefined) {
      writer.uint32(122).string(message.sent);
    }
    if (message.received !== undefined) {
      writer.uint32(130).string(message.received);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpiTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpiTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.apiType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.xmlApiType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.transactionType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.messageId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.rrn = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.payloadReceiptTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.payloadSentTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.errorCode = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.upiErrorCode = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.sent = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.received = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpiTransaction {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      severity: isSet(object.severity) ? logSeverityFromJSON(object.severity) : 0,
      apiType: isSet(object.apiType) ? apiTypeFromJSON(object.apiType) : 0,
      xmlApiType: isSet(object.xmlApiType) ? xmlApiTypeFromJSON(object.xmlApiType) : 0,
      transactionType: isSet(object.transactionType) ? transactionTypeFromJSON(object.transactionType) : 0,
      transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "",
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      rrn: isSet(object.rrn) ? globalThis.String(object.rrn) : "",
      payloadReceiptTime: isSet(object.payloadReceiptTime) ? fromJsonTimestamp(object.payloadReceiptTime) : undefined,
      payloadSentTime: isSet(object.payloadSentTime) ? fromJsonTimestamp(object.payloadSentTime) : undefined,
      status: isSet(object.status) ? transactionInfo_StateFromJSON(object.status) : 0,
      errorCode: isSet(object.errorCode) ? globalThis.String(object.errorCode) : "",
      upiErrorCode: isSet(object.upiErrorCode) ? globalThis.String(object.upiErrorCode) : "",
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      sent: isSet(object.sent) ? globalThis.String(object.sent) : undefined,
      received: isSet(object.received) ? globalThis.String(object.received) : undefined,
    };
  },

  toJSON(message: UpiTransaction): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.severity !== 0) {
      obj.severity = logSeverityToJSON(message.severity);
    }
    if (message.apiType !== 0) {
      obj.apiType = apiTypeToJSON(message.apiType);
    }
    if (message.xmlApiType !== 0) {
      obj.xmlApiType = xmlApiTypeToJSON(message.xmlApiType);
    }
    if (message.transactionType !== 0) {
      obj.transactionType = transactionTypeToJSON(message.transactionType);
    }
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.rrn !== "") {
      obj.rrn = message.rrn;
    }
    if (message.payloadReceiptTime !== undefined) {
      obj.payloadReceiptTime = message.payloadReceiptTime.toISOString();
    }
    if (message.payloadSentTime !== undefined) {
      obj.payloadSentTime = message.payloadSentTime.toISOString();
    }
    if (message.status !== 0) {
      obj.status = transactionInfo_StateToJSON(message.status);
    }
    if (message.errorCode !== "") {
      obj.errorCode = message.errorCode;
    }
    if (message.upiErrorCode !== "") {
      obj.upiErrorCode = message.upiErrorCode;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.sent !== undefined) {
      obj.sent = message.sent;
    }
    if (message.received !== undefined) {
      obj.received = message.received;
    }
    return obj;
  },

  create(base?: DeepPartial<UpiTransaction>): UpiTransaction {
    return UpiTransaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpiTransaction>): UpiTransaction {
    const message = createBaseUpiTransaction();
    message.message = object.message ?? "";
    message.severity = object.severity ?? 0;
    message.apiType = object.apiType ?? 0;
    message.xmlApiType = object.xmlApiType ?? 0;
    message.transactionType = object.transactionType ?? 0;
    message.transactionId = object.transactionId ?? "";
    message.messageId = object.messageId ?? "";
    message.rrn = object.rrn ?? "";
    message.payloadReceiptTime = object.payloadReceiptTime ?? undefined;
    message.payloadSentTime = object.payloadSentTime ?? undefined;
    message.status = object.status ?? 0;
    message.errorCode = object.errorCode ?? "";
    message.upiErrorCode = object.upiErrorCode ?? "";
    message.errorMessage = object.errorMessage ?? "";
    message.sent = object.sent ?? undefined;
    message.received = object.received ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
