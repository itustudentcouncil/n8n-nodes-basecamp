// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/paymentgateway/issuerswitch/accountmanager/v1/managed_accounts.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../../../protobuf/timestamp.js";
import { Money } from "../../../../../type/money.js";
import { AccountReference } from "../../v1/common_fields.js";

export const protobufPackage = "google.cloud.paymentgateway.issuerswitch.accountmanager.v1";

/** Entity representing an account managed by the account manager. */
export interface ManagedAccount {
  /**
   * The name of the account which uniquely identifies the account.
   * Format:
   * projects/{project}/accountManagers/{account_manager}/accounts/{account}
   * When account manager is used for managing UPI Lite transactions,
   * `{account}` is the Lite Reference Number (LRN).
   */
  name: string;
  /** Required. The associated bank account information. */
  accountReference:
    | AccountReference
    | undefined;
  /** Output only. State of the account. */
  state: ManagedAccount_State;
  /** Required. Current balance of the account. */
  balance:
    | Money
    | undefined;
  /** Output only. State of the last reconciliation done on the account. */
  lastReconciliationState: ManagedAccount_AccountReconciliationState;
  /** Output only. Time at which last reconciliation was done on the account. */
  lastReconciliationTime:
    | Date
    | undefined;
  /**
   * Output only. The time at which the account was created by the account
   * manager.
   */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The time at which the account was last updated by the account
   * manager.
   */
  updateTime: Date | undefined;
}

/** State of an account. */
export enum ManagedAccount_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - Account is active. */
  ACTIVE = 1,
  /** DEACTIVATED - Account is inactive. */
  DEACTIVATED = 2,
  UNRECOGNIZED = -1,
}

export function managedAccount_StateFromJSON(object: any): ManagedAccount_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ManagedAccount_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return ManagedAccount_State.ACTIVE;
    case 2:
    case "DEACTIVATED":
      return ManagedAccount_State.DEACTIVATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ManagedAccount_State.UNRECOGNIZED;
  }
}

export function managedAccount_StateToJSON(object: ManagedAccount_State): string {
  switch (object) {
    case ManagedAccount_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ManagedAccount_State.ACTIVE:
      return "ACTIVE";
    case ManagedAccount_State.DEACTIVATED:
      return "DEACTIVATED";
    case ManagedAccount_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Reconciliation state of an account. */
export enum ManagedAccount_AccountReconciliationState {
  /** ACCOUNT_RECONCILIATION_STATE_UNSPECIFIED - Unspecified state. */
  ACCOUNT_RECONCILIATION_STATE_UNSPECIFIED = 0,
  /** SUCCEEDED - Successful reconciliation. */
  SUCCEEDED = 1,
  /** FAILED - Reconciliation failed. */
  FAILED = 2,
  UNRECOGNIZED = -1,
}

export function managedAccount_AccountReconciliationStateFromJSON(
  object: any,
): ManagedAccount_AccountReconciliationState {
  switch (object) {
    case 0:
    case "ACCOUNT_RECONCILIATION_STATE_UNSPECIFIED":
      return ManagedAccount_AccountReconciliationState.ACCOUNT_RECONCILIATION_STATE_UNSPECIFIED;
    case 1:
    case "SUCCEEDED":
      return ManagedAccount_AccountReconciliationState.SUCCEEDED;
    case 2:
    case "FAILED":
      return ManagedAccount_AccountReconciliationState.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ManagedAccount_AccountReconciliationState.UNRECOGNIZED;
  }
}

export function managedAccount_AccountReconciliationStateToJSON(
  object: ManagedAccount_AccountReconciliationState,
): string {
  switch (object) {
    case ManagedAccount_AccountReconciliationState.ACCOUNT_RECONCILIATION_STATE_UNSPECIFIED:
      return "ACCOUNT_RECONCILIATION_STATE_UNSPECIFIED";
    case ManagedAccount_AccountReconciliationState.SUCCEEDED:
      return "SUCCEEDED";
    case ManagedAccount_AccountReconciliationState.FAILED:
      return "FAILED";
    case ManagedAccount_AccountReconciliationState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Reconciliation request for an account balance. */
export interface ReconcileManagedAccountBalanceRequest {
  /** Required. Account that needs to be reconciled. */
  account:
    | ManagedAccount
    | undefined;
  /** Required. Expected balance amount for the account. */
  expectedBalance:
    | Money
    | undefined;
  /**
   * Required. Timestamp to be taken as reference for reconciling the balance
   * amount.
   */
  referenceTime: Date | undefined;
}

/** Request for the `BatchReconcileManagedAccountBalance` method. */
export interface BatchReconcileManagedAccountBalanceRequest {
  /**
   * Required. The parent resource. The format is
   * `projects/{project}/accountManagers/{account_manager}`.
   */
  parent: string;
  /**
   * Required. The request message specifying the accounts to reconcile.
   * A maximum of 200 account balances can be reconciled in a batch.
   */
  requests: ReconcileManagedAccountBalanceRequest[];
}

/** Response for the `BatchReconcileManagedAccountBalance` method. */
export interface BatchReconcileManagedAccountBalanceResponse {
  /** Accounts whose balances were reconciled. */
  accounts: ManagedAccount[];
}

/** Request for the `GetManagedAccount` method. */
export interface GetManagedAccountRequest {
  /**
   * Required. The name of the managed account to retrieve.
   * Format:
   * `projects/{project}/accountManagers/{account_manager}/accounts/{account}`
   * When account manager is used for managing UPI Lite transactions, {account}
   * should be the Lite Reference Number (LRN).
   */
  name: string;
}

function createBaseManagedAccount(): ManagedAccount {
  return {
    name: "",
    accountReference: undefined,
    state: 0,
    balance: undefined,
    lastReconciliationState: 0,
    lastReconciliationTime: undefined,
    createTime: undefined,
    updateTime: undefined,
  };
}

export const ManagedAccount: MessageFns<ManagedAccount> = {
  encode(message: ManagedAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.accountReference !== undefined) {
      AccountReference.encode(message.accountReference, writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.balance !== undefined) {
      Money.encode(message.balance, writer.uint32(34).fork()).join();
    }
    if (message.lastReconciliationState !== 0) {
      writer.uint32(40).int32(message.lastReconciliationState);
    }
    if (message.lastReconciliationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastReconciliationTime), writer.uint32(50).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagedAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagedAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accountReference = AccountReference.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.balance = Money.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.lastReconciliationState = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.lastReconciliationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagedAccount {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      accountReference: isSet(object.accountReference) ? AccountReference.fromJSON(object.accountReference) : undefined,
      state: isSet(object.state) ? managedAccount_StateFromJSON(object.state) : 0,
      balance: isSet(object.balance) ? Money.fromJSON(object.balance) : undefined,
      lastReconciliationState: isSet(object.lastReconciliationState)
        ? managedAccount_AccountReconciliationStateFromJSON(object.lastReconciliationState)
        : 0,
      lastReconciliationTime: isSet(object.lastReconciliationTime)
        ? fromJsonTimestamp(object.lastReconciliationTime)
        : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: ManagedAccount): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.accountReference !== undefined) {
      obj.accountReference = AccountReference.toJSON(message.accountReference);
    }
    if (message.state !== 0) {
      obj.state = managedAccount_StateToJSON(message.state);
    }
    if (message.balance !== undefined) {
      obj.balance = Money.toJSON(message.balance);
    }
    if (message.lastReconciliationState !== 0) {
      obj.lastReconciliationState = managedAccount_AccountReconciliationStateToJSON(message.lastReconciliationState);
    }
    if (message.lastReconciliationTime !== undefined) {
      obj.lastReconciliationTime = message.lastReconciliationTime.toISOString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ManagedAccount>): ManagedAccount {
    return ManagedAccount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ManagedAccount>): ManagedAccount {
    const message = createBaseManagedAccount();
    message.name = object.name ?? "";
    message.accountReference = (object.accountReference !== undefined && object.accountReference !== null)
      ? AccountReference.fromPartial(object.accountReference)
      : undefined;
    message.state = object.state ?? 0;
    message.balance = (object.balance !== undefined && object.balance !== null)
      ? Money.fromPartial(object.balance)
      : undefined;
    message.lastReconciliationState = object.lastReconciliationState ?? 0;
    message.lastReconciliationTime = object.lastReconciliationTime ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseReconcileManagedAccountBalanceRequest(): ReconcileManagedAccountBalanceRequest {
  return { account: undefined, expectedBalance: undefined, referenceTime: undefined };
}

export const ReconcileManagedAccountBalanceRequest: MessageFns<ReconcileManagedAccountBalanceRequest> = {
  encode(message: ReconcileManagedAccountBalanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.account !== undefined) {
      ManagedAccount.encode(message.account, writer.uint32(10).fork()).join();
    }
    if (message.expectedBalance !== undefined) {
      Money.encode(message.expectedBalance, writer.uint32(18).fork()).join();
    }
    if (message.referenceTime !== undefined) {
      Timestamp.encode(toTimestamp(message.referenceTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReconcileManagedAccountBalanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReconcileManagedAccountBalanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = ManagedAccount.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expectedBalance = Money.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.referenceTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReconcileManagedAccountBalanceRequest {
    return {
      account: isSet(object.account) ? ManagedAccount.fromJSON(object.account) : undefined,
      expectedBalance: isSet(object.expectedBalance) ? Money.fromJSON(object.expectedBalance) : undefined,
      referenceTime: isSet(object.referenceTime) ? fromJsonTimestamp(object.referenceTime) : undefined,
    };
  },

  toJSON(message: ReconcileManagedAccountBalanceRequest): unknown {
    const obj: any = {};
    if (message.account !== undefined) {
      obj.account = ManagedAccount.toJSON(message.account);
    }
    if (message.expectedBalance !== undefined) {
      obj.expectedBalance = Money.toJSON(message.expectedBalance);
    }
    if (message.referenceTime !== undefined) {
      obj.referenceTime = message.referenceTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ReconcileManagedAccountBalanceRequest>): ReconcileManagedAccountBalanceRequest {
    return ReconcileManagedAccountBalanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReconcileManagedAccountBalanceRequest>): ReconcileManagedAccountBalanceRequest {
    const message = createBaseReconcileManagedAccountBalanceRequest();
    message.account = (object.account !== undefined && object.account !== null)
      ? ManagedAccount.fromPartial(object.account)
      : undefined;
    message.expectedBalance = (object.expectedBalance !== undefined && object.expectedBalance !== null)
      ? Money.fromPartial(object.expectedBalance)
      : undefined;
    message.referenceTime = object.referenceTime ?? undefined;
    return message;
  },
};

function createBaseBatchReconcileManagedAccountBalanceRequest(): BatchReconcileManagedAccountBalanceRequest {
  return { parent: "", requests: [] };
}

export const BatchReconcileManagedAccountBalanceRequest: MessageFns<BatchReconcileManagedAccountBalanceRequest> = {
  encode(message: BatchReconcileManagedAccountBalanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      ReconcileManagedAccountBalanceRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchReconcileManagedAccountBalanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchReconcileManagedAccountBalanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests.push(ReconcileManagedAccountBalanceRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchReconcileManagedAccountBalanceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => ReconcileManagedAccountBalanceRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchReconcileManagedAccountBalanceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => ReconcileManagedAccountBalanceRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchReconcileManagedAccountBalanceRequest>): BatchReconcileManagedAccountBalanceRequest {
    return BatchReconcileManagedAccountBalanceRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BatchReconcileManagedAccountBalanceRequest>,
  ): BatchReconcileManagedAccountBalanceRequest {
    const message = createBaseBatchReconcileManagedAccountBalanceRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => ReconcileManagedAccountBalanceRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchReconcileManagedAccountBalanceResponse(): BatchReconcileManagedAccountBalanceResponse {
  return { accounts: [] };
}

export const BatchReconcileManagedAccountBalanceResponse: MessageFns<BatchReconcileManagedAccountBalanceResponse> = {
  encode(
    message: BatchReconcileManagedAccountBalanceResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.accounts) {
      ManagedAccount.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchReconcileManagedAccountBalanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchReconcileManagedAccountBalanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accounts.push(ManagedAccount.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchReconcileManagedAccountBalanceResponse {
    return {
      accounts: globalThis.Array.isArray(object?.accounts)
        ? object.accounts.map((e: any) => ManagedAccount.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchReconcileManagedAccountBalanceResponse): unknown {
    const obj: any = {};
    if (message.accounts?.length) {
      obj.accounts = message.accounts.map((e) => ManagedAccount.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchReconcileManagedAccountBalanceResponse>): BatchReconcileManagedAccountBalanceResponse {
    return BatchReconcileManagedAccountBalanceResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BatchReconcileManagedAccountBalanceResponse>,
  ): BatchReconcileManagedAccountBalanceResponse {
    const message = createBaseBatchReconcileManagedAccountBalanceResponse();
    message.accounts = object.accounts?.map((e) => ManagedAccount.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetManagedAccountRequest(): GetManagedAccountRequest {
  return { name: "" };
}

export const GetManagedAccountRequest: MessageFns<GetManagedAccountRequest> = {
  encode(message: GetManagedAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetManagedAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetManagedAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetManagedAccountRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetManagedAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetManagedAccountRequest>): GetManagedAccountRequest {
    return GetManagedAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetManagedAccountRequest>): GetManagedAccountRequest {
    const message = createBaseGetManagedAccountRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Reconciles and provide balance information for an account within the account
 * manager.
 */
export type ManagedAccountsDefinition = typeof ManagedAccountsDefinition;
export const ManagedAccountsDefinition = {
  name: "ManagedAccounts",
  fullName: "google.cloud.paymentgateway.issuerswitch.accountmanager.v1.ManagedAccounts",
  methods: {
    /** Batch reconcile account balance and return status for each account. */
    batchReconcileManagedAccountBalance: {
      name: "BatchReconcileManagedAccountBalance",
      requestType: BatchReconcileManagedAccountBalanceRequest,
      requestStream: false,
      responseType: BatchReconcileManagedAccountBalanceResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 114, 101, 113, 117, 101, 115, 116, 115])],
          578365826: [
            Buffer.from([
              77,
              58,
              1,
              42,
              34,
              72,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              82,
              101,
              99,
              111,
              110,
              99,
              105,
              108,
              101,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
            ]),
          ],
        },
      },
    },
    /** Get information on the account managed by account manager. */
    getManagedAccount: {
      name: "GetManagedAccount",
      requestType: GetManagedAccountRequest,
      requestStream: false,
      responseType: ManagedAccount,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ManagedAccountsServiceImplementation<CallContextExt = {}> {
  /** Batch reconcile account balance and return status for each account. */
  batchReconcileManagedAccountBalance(
    request: BatchReconcileManagedAccountBalanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchReconcileManagedAccountBalanceResponse>>;
  /** Get information on the account managed by account manager. */
  getManagedAccount(
    request: GetManagedAccountRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ManagedAccount>>;
}

export interface ManagedAccountsClient<CallOptionsExt = {}> {
  /** Batch reconcile account balance and return status for each account. */
  batchReconcileManagedAccountBalance(
    request: DeepPartial<BatchReconcileManagedAccountBalanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchReconcileManagedAccountBalanceResponse>;
  /** Get information on the account managed by account manager. */
  getManagedAccount(
    request: DeepPartial<GetManagedAccountRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ManagedAccount>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
