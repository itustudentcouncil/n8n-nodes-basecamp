// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/video/stitcher/v1/vod_configs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FetchOptions } from "./fetch_options.js";

export const protobufPackage = "google.cloud.video.stitcher.v1";

/** Metadata used to register VOD configs. */
export interface VodConfig {
  /**
   * Output only. The resource name of the VOD config, in the form of
   * `projects/{project}/locations/{location}/vodConfigs/{id}`.
   */
  name: string;
  /** Required. Source URI for the VOD stream manifest. */
  sourceUri: string;
  /** Required. The default ad tag associated with this VOD config. */
  adTagUri: string;
  /** Optional. Google Ad Manager (GAM) metadata. */
  gamVodConfig:
    | GamVodConfig
    | undefined;
  /** Output only. State of the VOD config. */
  state: VodConfig_State;
  /** Options for fetching source manifests and segments. */
  sourceFetchOptions: FetchOptions | undefined;
}

/** State of the VOD config. */
export enum VodConfig_State {
  /** STATE_UNSPECIFIED - State is not specified. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - VOD config is being created. */
  CREATING = 1,
  /** READY - VOD config is ready for use. */
  READY = 2,
  /** DELETING - VOD config is queued up for deletion. */
  DELETING = 3,
  UNRECOGNIZED = -1,
}

export function vodConfig_StateFromJSON(object: any): VodConfig_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return VodConfig_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return VodConfig_State.CREATING;
    case 2:
    case "READY":
      return VodConfig_State.READY;
    case 3:
    case "DELETING":
      return VodConfig_State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VodConfig_State.UNRECOGNIZED;
  }
}

export function vodConfig_StateToJSON(object: VodConfig_State): string {
  switch (object) {
    case VodConfig_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case VodConfig_State.CREATING:
      return "CREATING";
    case VodConfig_State.READY:
      return "READY";
    case VodConfig_State.DELETING:
      return "DELETING";
    case VodConfig_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Metadata used for GAM ad decisioning. */
export interface GamVodConfig {
  /** Required. Ad Manager network code to associate with the VOD config. */
  networkCode: string;
}

function createBaseVodConfig(): VodConfig {
  return { name: "", sourceUri: "", adTagUri: "", gamVodConfig: undefined, state: 0, sourceFetchOptions: undefined };
}

export const VodConfig: MessageFns<VodConfig> = {
  encode(message: VodConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.sourceUri !== "") {
      writer.uint32(18).string(message.sourceUri);
    }
    if (message.adTagUri !== "") {
      writer.uint32(26).string(message.adTagUri);
    }
    if (message.gamVodConfig !== undefined) {
      GamVodConfig.encode(message.gamVodConfig, writer.uint32(34).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    if (message.sourceFetchOptions !== undefined) {
      FetchOptions.encode(message.sourceFetchOptions, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VodConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVodConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.adTagUri = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.gamVodConfig = GamVodConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.sourceFetchOptions = FetchOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VodConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      sourceUri: isSet(object.sourceUri) ? globalThis.String(object.sourceUri) : "",
      adTagUri: isSet(object.adTagUri) ? globalThis.String(object.adTagUri) : "",
      gamVodConfig: isSet(object.gamVodConfig) ? GamVodConfig.fromJSON(object.gamVodConfig) : undefined,
      state: isSet(object.state) ? vodConfig_StateFromJSON(object.state) : 0,
      sourceFetchOptions: isSet(object.sourceFetchOptions)
        ? FetchOptions.fromJSON(object.sourceFetchOptions)
        : undefined,
    };
  },

  toJSON(message: VodConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.sourceUri !== "") {
      obj.sourceUri = message.sourceUri;
    }
    if (message.adTagUri !== "") {
      obj.adTagUri = message.adTagUri;
    }
    if (message.gamVodConfig !== undefined) {
      obj.gamVodConfig = GamVodConfig.toJSON(message.gamVodConfig);
    }
    if (message.state !== 0) {
      obj.state = vodConfig_StateToJSON(message.state);
    }
    if (message.sourceFetchOptions !== undefined) {
      obj.sourceFetchOptions = FetchOptions.toJSON(message.sourceFetchOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<VodConfig>): VodConfig {
    return VodConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VodConfig>): VodConfig {
    const message = createBaseVodConfig();
    message.name = object.name ?? "";
    message.sourceUri = object.sourceUri ?? "";
    message.adTagUri = object.adTagUri ?? "";
    message.gamVodConfig = (object.gamVodConfig !== undefined && object.gamVodConfig !== null)
      ? GamVodConfig.fromPartial(object.gamVodConfig)
      : undefined;
    message.state = object.state ?? 0;
    message.sourceFetchOptions = (object.sourceFetchOptions !== undefined && object.sourceFetchOptions !== null)
      ? FetchOptions.fromPartial(object.sourceFetchOptions)
      : undefined;
    return message;
  },
};

function createBaseGamVodConfig(): GamVodConfig {
  return { networkCode: "" };
}

export const GamVodConfig: MessageFns<GamVodConfig> = {
  encode(message: GamVodConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.networkCode !== "") {
      writer.uint32(10).string(message.networkCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GamVodConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGamVodConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.networkCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GamVodConfig {
    return { networkCode: isSet(object.networkCode) ? globalThis.String(object.networkCode) : "" };
  },

  toJSON(message: GamVodConfig): unknown {
    const obj: any = {};
    if (message.networkCode !== "") {
      obj.networkCode = message.networkCode;
    }
    return obj;
  },

  create(base?: DeepPartial<GamVodConfig>): GamVodConfig {
    return GamVodConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GamVodConfig>): GamVodConfig {
    const message = createBaseGamVodConfig();
    message.networkCode = object.networkCode ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
