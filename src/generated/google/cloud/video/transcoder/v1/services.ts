// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/video/transcoder/v1/services.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { Job, JobTemplate } from "./resources.js";

export const protobufPackage = "google.cloud.video.transcoder.v1";

/** Request message for `TranscoderService.CreateJob`. */
export interface CreateJobRequest {
  /**
   * Required. The parent location to create and process this job.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. Parameters for creating transcoding job. */
  job: Job | undefined;
}

/**
 * Request message for `TranscoderService.ListJobs`.
 * The parent location from which to retrieve the collection of jobs.
 */
export interface ListJobsRequest {
  /** Required. Format: `projects/{project}/locations/{location}` */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /**
   * The `next_page_token` value returned from a previous List request, if
   * any.
   */
  pageToken: string;
  /**
   * The filter expression, following the syntax outlined in
   * https://google.aip.dev/160.
   */
  filter: string;
  /**
   * One or more fields to compare and use to sort the output.
   * See https://google.aip.dev/132#ordering.
   */
  orderBy: string;
}

/** Request message for `TranscoderService.GetJob`. */
export interface GetJobRequest {
  /**
   * Required. The name of the job to retrieve.
   * Format: `projects/{project}/locations/{location}/jobs/{job}`
   */
  name: string;
}

/** Request message for `TranscoderService.DeleteJob`. */
export interface DeleteJobRequest {
  /**
   * Required. The name of the job to delete.
   * Format: `projects/{project}/locations/{location}/jobs/{job}`
   */
  name: string;
  /**
   * If set to true, and the job is not found, the request will succeed but no
   * action will be taken on the server.
   */
  allowMissing: boolean;
}

/** Response message for `TranscoderService.ListJobs`. */
export interface ListJobsResponse {
  /** List of jobs in the specified region. */
  jobs: Job[];
  /** The pagination token. */
  nextPageToken: string;
  /** List of regions that could not be reached. */
  unreachable: string[];
}

/** Request message for `TranscoderService.CreateJobTemplate`. */
export interface CreateJobTemplateRequest {
  /**
   * Required. The parent location to create this job template.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. Parameters for creating job template. */
  jobTemplate:
    | JobTemplate
    | undefined;
  /**
   * Required. The ID to use for the job template, which will become the final
   * component of the job template's resource name.
   *
   * This value should be 4-63 characters, and valid characters must match the
   * regular expression `[a-zA-Z][a-zA-Z0-9_-]*`.
   */
  jobTemplateId: string;
}

/** Request message for `TranscoderService.ListJobTemplates`. */
export interface ListJobTemplatesRequest {
  /**
   * Required. The parent location from which to retrieve the collection of job
   * templates. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /**
   * The `next_page_token` value returned from a previous List request, if
   * any.
   */
  pageToken: string;
  /**
   * The filter expression, following the syntax outlined in
   * https://google.aip.dev/160.
   */
  filter: string;
  /**
   * One or more fields to compare and use to sort the output.
   * See https://google.aip.dev/132#ordering.
   */
  orderBy: string;
}

/** Request message for `TranscoderService.GetJobTemplate`. */
export interface GetJobTemplateRequest {
  /**
   * Required. The name of the job template to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/jobTemplates/{job_template}`
   */
  name: string;
}

/** Request message for `TranscoderService.DeleteJobTemplate`. */
export interface DeleteJobTemplateRequest {
  /**
   * Required. The name of the job template to delete.
   * `projects/{project}/locations/{location}/jobTemplates/{job_template}`
   */
  name: string;
  /**
   * If set to true, and the job template is not found, the request will succeed
   * but no action will be taken on the server.
   */
  allowMissing: boolean;
}

/** Response message for `TranscoderService.ListJobTemplates`. */
export interface ListJobTemplatesResponse {
  /** List of job templates in the specified region. */
  jobTemplates: JobTemplate[];
  /** The pagination token. */
  nextPageToken: string;
  /** List of regions that could not be reached. */
  unreachable: string[];
}

function createBaseCreateJobRequest(): CreateJobRequest {
  return { parent: "", job: undefined };
}

export const CreateJobRequest: MessageFns<CreateJobRequest> = {
  encode(message: CreateJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.job !== undefined) {
      Job.encode(message.job, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.job = Job.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      job: isSet(object.job) ? Job.fromJSON(object.job) : undefined,
    };
  },

  toJSON(message: CreateJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.job !== undefined) {
      obj.job = Job.toJSON(message.job);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateJobRequest>): CreateJobRequest {
    return CreateJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateJobRequest>): CreateJobRequest {
    const message = createBaseCreateJobRequest();
    message.parent = object.parent ?? "";
    message.job = (object.job !== undefined && object.job !== null) ? Job.fromPartial(object.job) : undefined;
    return message;
  },
};

function createBaseListJobsRequest(): ListJobsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListJobsRequest: MessageFns<ListJobsRequest> = {
  encode(message: ListJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListJobsRequest>): ListJobsRequest {
    return ListJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListJobsRequest>): ListJobsRequest {
    const message = createBaseListJobsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseGetJobRequest(): GetJobRequest {
  return { name: "" };
}

export const GetJobRequest: MessageFns<GetJobRequest> = {
  encode(message: GetJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetJobRequest>): GetJobRequest {
    return GetJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetJobRequest>): GetJobRequest {
    const message = createBaseGetJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteJobRequest(): DeleteJobRequest {
  return { name: "", allowMissing: false };
}

export const DeleteJobRequest: MessageFns<DeleteJobRequest> = {
  encode(message: DeleteJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.allowMissing !== false) {
      writer.uint32(16).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteJobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: DeleteJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteJobRequest>): DeleteJobRequest {
    return DeleteJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteJobRequest>): DeleteJobRequest {
    const message = createBaseDeleteJobRequest();
    message.name = object.name ?? "";
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseListJobsResponse(): ListJobsResponse {
  return { jobs: [], nextPageToken: "", unreachable: [] };
}

export const ListJobsResponse: MessageFns<ListJobsResponse> = {
  encode(message: ListJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobs) {
      Job.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobs.push(Job.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListJobsResponse {
    return {
      jobs: globalThis.Array.isArray(object?.jobs) ? object.jobs.map((e: any) => Job.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListJobsResponse): unknown {
    const obj: any = {};
    if (message.jobs?.length) {
      obj.jobs = message.jobs.map((e) => Job.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListJobsResponse>): ListJobsResponse {
    return ListJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListJobsResponse>): ListJobsResponse {
    const message = createBaseListJobsResponse();
    message.jobs = object.jobs?.map((e) => Job.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateJobTemplateRequest(): CreateJobTemplateRequest {
  return { parent: "", jobTemplate: undefined, jobTemplateId: "" };
}

export const CreateJobTemplateRequest: MessageFns<CreateJobTemplateRequest> = {
  encode(message: CreateJobTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.jobTemplate !== undefined) {
      JobTemplate.encode(message.jobTemplate, writer.uint32(18).fork()).join();
    }
    if (message.jobTemplateId !== "") {
      writer.uint32(26).string(message.jobTemplateId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateJobTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateJobTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobTemplate = JobTemplate.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobTemplateId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateJobTemplateRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      jobTemplate: isSet(object.jobTemplate) ? JobTemplate.fromJSON(object.jobTemplate) : undefined,
      jobTemplateId: isSet(object.jobTemplateId) ? globalThis.String(object.jobTemplateId) : "",
    };
  },

  toJSON(message: CreateJobTemplateRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.jobTemplate !== undefined) {
      obj.jobTemplate = JobTemplate.toJSON(message.jobTemplate);
    }
    if (message.jobTemplateId !== "") {
      obj.jobTemplateId = message.jobTemplateId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateJobTemplateRequest>): CreateJobTemplateRequest {
    return CreateJobTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateJobTemplateRequest>): CreateJobTemplateRequest {
    const message = createBaseCreateJobTemplateRequest();
    message.parent = object.parent ?? "";
    message.jobTemplate = (object.jobTemplate !== undefined && object.jobTemplate !== null)
      ? JobTemplate.fromPartial(object.jobTemplate)
      : undefined;
    message.jobTemplateId = object.jobTemplateId ?? "";
    return message;
  },
};

function createBaseListJobTemplatesRequest(): ListJobTemplatesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListJobTemplatesRequest: MessageFns<ListJobTemplatesRequest> = {
  encode(message: ListJobTemplatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListJobTemplatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListJobTemplatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListJobTemplatesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListJobTemplatesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListJobTemplatesRequest>): ListJobTemplatesRequest {
    return ListJobTemplatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListJobTemplatesRequest>): ListJobTemplatesRequest {
    const message = createBaseListJobTemplatesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseGetJobTemplateRequest(): GetJobTemplateRequest {
  return { name: "" };
}

export const GetJobTemplateRequest: MessageFns<GetJobTemplateRequest> = {
  encode(message: GetJobTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobTemplateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetJobTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetJobTemplateRequest>): GetJobTemplateRequest {
    return GetJobTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetJobTemplateRequest>): GetJobTemplateRequest {
    const message = createBaseGetJobTemplateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteJobTemplateRequest(): DeleteJobTemplateRequest {
  return { name: "", allowMissing: false };
}

export const DeleteJobTemplateRequest: MessageFns<DeleteJobTemplateRequest> = {
  encode(message: DeleteJobTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.allowMissing !== false) {
      writer.uint32(16).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteJobTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteJobTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteJobTemplateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: DeleteJobTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteJobTemplateRequest>): DeleteJobTemplateRequest {
    return DeleteJobTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteJobTemplateRequest>): DeleteJobTemplateRequest {
    const message = createBaseDeleteJobTemplateRequest();
    message.name = object.name ?? "";
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseListJobTemplatesResponse(): ListJobTemplatesResponse {
  return { jobTemplates: [], nextPageToken: "", unreachable: [] };
}

export const ListJobTemplatesResponse: MessageFns<ListJobTemplatesResponse> = {
  encode(message: ListJobTemplatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobTemplates) {
      JobTemplate.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListJobTemplatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListJobTemplatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobTemplates.push(JobTemplate.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListJobTemplatesResponse {
    return {
      jobTemplates: globalThis.Array.isArray(object?.jobTemplates)
        ? object.jobTemplates.map((e: any) => JobTemplate.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListJobTemplatesResponse): unknown {
    const obj: any = {};
    if (message.jobTemplates?.length) {
      obj.jobTemplates = message.jobTemplates.map((e) => JobTemplate.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListJobTemplatesResponse>): ListJobTemplatesResponse {
    return ListJobTemplatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListJobTemplatesResponse>): ListJobTemplatesResponse {
    const message = createBaseListJobTemplatesResponse();
    message.jobTemplates = object.jobTemplates?.map((e) => JobTemplate.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

/**
 * Using the Transcoder API, you can queue asynchronous jobs for transcoding
 * media into various output formats. Output formats may include different
 * streaming standards such as HTTP Live Streaming (HLS) and Dynamic Adaptive
 * Streaming over HTTP (DASH). You can also customize jobs using advanced
 * features such as Digital Rights Management (DRM), audio equalization, content
 * concatenation, and digital ad-stitch ready content generation.
 */
export type TranscoderServiceDefinition = typeof TranscoderServiceDefinition;
export const TranscoderServiceDefinition = {
  name: "TranscoderService",
  fullName: "google.cloud.video.transcoder.v1.TranscoderService",
  methods: {
    /** Creates a job in the specified region. */
    createJob: {
      name: "CreateJob",
      requestType: CreateJobRequest,
      requestStream: false,
      responseType: Job,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 112, 97, 114, 101, 110, 116, 44, 106, 111, 98])],
          578365826: [
            Buffer.from([
              47,
              58,
              3,
              106,
              111,
              98,
              34,
              40,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              106,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists jobs in the specified region. */
    listJobs: {
      name: "ListJobs",
      requestType: ListJobsRequest,
      requestStream: false,
      responseType: ListJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              106,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns the job data. */
    getJob: {
      name: "GetJob",
      requestType: GetJobRequest,
      requestStream: false,
      responseType: Job,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              18,
              40,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a job. */
    deleteJob: {
      name: "DeleteJob",
      requestType: DeleteJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              42,
              42,
              40,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a job template in the specified region. */
    createJobTemplate: {
      name: "CreateJobTemplate",
      requestType: CreateJobTemplateRequest,
      requestStream: false,
      responseType: JobTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              106,
              111,
              98,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              44,
              106,
              111,
              98,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              12,
              106,
              111,
              98,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              106,
              111,
              98,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists job templates in the specified region. */
    listJobTemplates: {
      name: "ListJobTemplates",
      requestType: ListJobTemplatesRequest,
      requestStream: false,
      responseType: ListJobTemplatesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              106,
              111,
              98,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns the job template data. */
    getJobTemplate: {
      name: "GetJobTemplate",
      requestType: GetJobTemplateRequest,
      requestStream: false,
      responseType: JobTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a job template. */
    deleteJobTemplate: {
      name: "DeleteJobTemplate",
      requestType: DeleteJobTemplateRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              106,
              111,
              98,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TranscoderServiceImplementation<CallContextExt = {}> {
  /** Creates a job in the specified region. */
  createJob(request: CreateJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Job>>;
  /** Lists jobs in the specified region. */
  listJobs(request: ListJobsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListJobsResponse>>;
  /** Returns the job data. */
  getJob(request: GetJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Job>>;
  /** Deletes a job. */
  deleteJob(request: DeleteJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Creates a job template in the specified region. */
  createJobTemplate(
    request: CreateJobTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<JobTemplate>>;
  /** Lists job templates in the specified region. */
  listJobTemplates(
    request: ListJobTemplatesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListJobTemplatesResponse>>;
  /** Returns the job template data. */
  getJobTemplate(
    request: GetJobTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<JobTemplate>>;
  /** Deletes a job template. */
  deleteJobTemplate(
    request: DeleteJobTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface TranscoderServiceClient<CallOptionsExt = {}> {
  /** Creates a job in the specified region. */
  createJob(request: DeepPartial<CreateJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Job>;
  /** Lists jobs in the specified region. */
  listJobs(request: DeepPartial<ListJobsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListJobsResponse>;
  /** Returns the job data. */
  getJob(request: DeepPartial<GetJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Job>;
  /** Deletes a job. */
  deleteJob(request: DeepPartial<DeleteJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Creates a job template in the specified region. */
  createJobTemplate(
    request: DeepPartial<CreateJobTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<JobTemplate>;
  /** Lists job templates in the specified region. */
  listJobTemplates(
    request: DeepPartial<ListJobTemplatesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListJobTemplatesResponse>;
  /** Returns the job template data. */
  getJobTemplate(
    request: DeepPartial<GetJobTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<JobTemplate>;
  /** Deletes a job template. */
  deleteJobTemplate(
    request: DeepPartial<DeleteJobTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
