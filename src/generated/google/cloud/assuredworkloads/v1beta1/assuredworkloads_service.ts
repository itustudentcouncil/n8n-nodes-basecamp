// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/assuredworkloads/v1beta1/assuredworkloads_service.proto

/* eslint-disable */
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import {
  AnalyzeWorkloadMoveRequest,
  AnalyzeWorkloadMoveResponse,
  CreateWorkloadRequest,
  DeleteWorkloadRequest,
  GetWorkloadRequest,
  ListWorkloadsRequest,
  ListWorkloadsResponse,
  RestrictAllowedResourcesRequest,
  RestrictAllowedResourcesResponse,
  UpdateWorkloadRequest,
  Workload,
} from "./assuredworkloads.js";

export const protobufPackage = "google.cloud.assuredworkloads.v1beta1";

/** Service to manage AssuredWorkloads. */
export type AssuredWorkloadsServiceDefinition = typeof AssuredWorkloadsServiceDefinition;
export const AssuredWorkloadsServiceDefinition = {
  name: "AssuredWorkloadsService",
  fullName: "google.cloud.assuredworkloads.v1beta1.AssuredWorkloadsService",
  methods: {
    /** Creates Assured Workload. */
    createWorkload: {
      name: "CreateWorkload",
      requestType: CreateWorkloadRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              43,
              10,
              8,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              18,
              31,
              67,
              114,
              101,
              97,
              116,
              101,
              87,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 119, 111, 114, 107, 108, 111, 97, 100])],
          578365826: [
            Buffer.from([
              67,
              58,
              8,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              34,
              55,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an existing workload.
     * Currently allows updating of workload display_name and labels.
     * For force updates don't set etag field in the Workload.
     * Only one update operation per workload can be in progress.
     */
    updateWorkload: {
      name: "UpdateWorkload",
      requestType: UpdateWorkloadRequest,
      requestStream: false,
      responseType: Workload,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
        },
      },
    },
    /**
     * Restrict the list of resources allowed in the Workload environment.
     * The current list of allowed products can be found at
     * https://cloud.google.com/assured-workloads/docs/supported-products
     * In addition to assuredworkloads.workload.update permission, the user should
     * also have orgpolicy.policy.set permission on the folder resource
     * to use this functionality.
     */
    restrictAllowedResources: {
      name: "RestrictAllowedResources",
      requestType: RestrictAllowedResourcesRequest,
      requestStream: false,
      responseType: RestrictAllowedResourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              85,
              58,
              1,
              42,
              34,
              80,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              116,
              114,
              105,
              99,
              116,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the workload. Make sure that workload's direct children are already
     * in a deleted state, otherwise the request will fail with a
     * FAILED_PRECONDITION error.
     * In addition to assuredworkloads.workload.delete permission, the user should
     * also have orgpolicy.policy.set permission on the deleted folder to remove
     * Assured Workloads OrgPolicies.
     */
    deleteWorkload: {
      name: "DeleteWorkload",
      requestType: DeleteWorkloadRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              42,
              55,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets Assured Workload associated with a CRM Node */
    getWorkload: {
      name: "GetWorkload",
      requestType: GetWorkloadRequest,
      requestStream: false,
      responseType: Workload,
      responseStream: false,
      options: { _unknownFields: { 8410: [Buffer.from([4, 110, 97, 109, 101])] } },
    },
    /**
     * Analyze if the source Assured Workloads can be moved to the target Assured
     * Workload
     */
    analyzeWorkloadMove: {
      name: "AnalyzeWorkloadMove",
      requestType: AnalyzeWorkloadMoveRequest,
      requestStream: false,
      responseType: AnalyzeWorkloadMoveResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 114, 111, 106, 101, 99, 116, 44, 116, 97, 114, 103, 101, 116])],
        },
      },
    },
    /** Lists Assured Workloads under a CRM Node. */
    listWorkloads: {
      name: "ListWorkloads",
      requestType: ListWorkloadsRequest,
      requestStream: false,
      responseType: ListWorkloadsResponse,
      responseStream: false,
      options: { _unknownFields: { 8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])] } },
    },
  },
} as const;

export interface AssuredWorkloadsServiceImplementation<CallContextExt = {}> {
  /** Creates Assured Workload. */
  createWorkload(
    request: CreateWorkloadRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates an existing workload.
   * Currently allows updating of workload display_name and labels.
   * For force updates don't set etag field in the Workload.
   * Only one update operation per workload can be in progress.
   */
  updateWorkload(request: UpdateWorkloadRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Workload>>;
  /**
   * Restrict the list of resources allowed in the Workload environment.
   * The current list of allowed products can be found at
   * https://cloud.google.com/assured-workloads/docs/supported-products
   * In addition to assuredworkloads.workload.update permission, the user should
   * also have orgpolicy.policy.set permission on the folder resource
   * to use this functionality.
   */
  restrictAllowedResources(
    request: RestrictAllowedResourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RestrictAllowedResourcesResponse>>;
  /**
   * Deletes the workload. Make sure that workload's direct children are already
   * in a deleted state, otherwise the request will fail with a
   * FAILED_PRECONDITION error.
   * In addition to assuredworkloads.workload.delete permission, the user should
   * also have orgpolicy.policy.set permission on the deleted folder to remove
   * Assured Workloads OrgPolicies.
   */
  deleteWorkload(request: DeleteWorkloadRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Gets Assured Workload associated with a CRM Node */
  getWorkload(request: GetWorkloadRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Workload>>;
  /**
   * Analyze if the source Assured Workloads can be moved to the target Assured
   * Workload
   */
  analyzeWorkloadMove(
    request: AnalyzeWorkloadMoveRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AnalyzeWorkloadMoveResponse>>;
  /** Lists Assured Workloads under a CRM Node. */
  listWorkloads(
    request: ListWorkloadsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListWorkloadsResponse>>;
}

export interface AssuredWorkloadsServiceClient<CallOptionsExt = {}> {
  /** Creates Assured Workload. */
  createWorkload(
    request: DeepPartial<CreateWorkloadRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates an existing workload.
   * Currently allows updating of workload display_name and labels.
   * For force updates don't set etag field in the Workload.
   * Only one update operation per workload can be in progress.
   */
  updateWorkload(
    request: DeepPartial<UpdateWorkloadRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Workload>;
  /**
   * Restrict the list of resources allowed in the Workload environment.
   * The current list of allowed products can be found at
   * https://cloud.google.com/assured-workloads/docs/supported-products
   * In addition to assuredworkloads.workload.update permission, the user should
   * also have orgpolicy.policy.set permission on the folder resource
   * to use this functionality.
   */
  restrictAllowedResources(
    request: DeepPartial<RestrictAllowedResourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RestrictAllowedResourcesResponse>;
  /**
   * Deletes the workload. Make sure that workload's direct children are already
   * in a deleted state, otherwise the request will fail with a
   * FAILED_PRECONDITION error.
   * In addition to assuredworkloads.workload.delete permission, the user should
   * also have orgpolicy.policy.set permission on the deleted folder to remove
   * Assured Workloads OrgPolicies.
   */
  deleteWorkload(request: DeepPartial<DeleteWorkloadRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Gets Assured Workload associated with a CRM Node */
  getWorkload(request: DeepPartial<GetWorkloadRequest>, options?: CallOptions & CallOptionsExt): Promise<Workload>;
  /**
   * Analyze if the source Assured Workloads can be moved to the target Assured
   * Workload
   */
  analyzeWorkloadMove(
    request: DeepPartial<AnalyzeWorkloadMoveRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AnalyzeWorkloadMoveResponse>;
  /** Lists Assured Workloads under a CRM Node. */
  listWorkloads(
    request: DeepPartial<ListWorkloadsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListWorkloadsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
