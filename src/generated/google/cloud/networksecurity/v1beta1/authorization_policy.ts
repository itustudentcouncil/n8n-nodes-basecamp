// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networksecurity/v1beta1/authorization_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.networksecurity.v1beta1";

/**
 * AuthorizationPolicy is a resource that specifies how a server
 * should authorize incoming connections. This resource in itself does
 * not change the configuration unless it's attached to a target https
 * proxy or endpoint config selector resource.
 */
export interface AuthorizationPolicy {
  /**
   * Required. Name of the AuthorizationPolicy resource. It matches pattern
   * `projects/{project}/locations/{location}/authorizationPolicies/<authorization_policy>`.
   */
  name: string;
  /** Optional. Free-text description of the resource. */
  description: string;
  /** Output only. The timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp when the resource was updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Set of label tags associated with the AuthorizationPolicy
   * resource.
   */
  labels: { [key: string]: string };
  /**
   * Required. The action to take when a rule match is found. Possible values
   * are "ALLOW" or "DENY".
   */
  action: AuthorizationPolicy_Action;
  /**
   * Optional. List of rules to match. Note that at least one of the rules must
   * match in order for the action specified in the 'action' field to be taken.
   * A rule is a match if there is a matching source and destination. If left
   * blank, the action specified in the `action` field will be applied on every
   * request.
   */
  rules: AuthorizationPolicy_Rule[];
}

/** Possible values that define what action to take. */
export enum AuthorizationPolicy_Action {
  /** ACTION_UNSPECIFIED - Default value. */
  ACTION_UNSPECIFIED = 0,
  /** ALLOW - Grant access. */
  ALLOW = 1,
  /**
   * DENY - Deny access.
   * Deny rules should be avoided unless they are used to provide a default
   * "deny all" fallback.
   */
  DENY = 2,
  UNRECOGNIZED = -1,
}

export function authorizationPolicy_ActionFromJSON(object: any): AuthorizationPolicy_Action {
  switch (object) {
    case 0:
    case "ACTION_UNSPECIFIED":
      return AuthorizationPolicy_Action.ACTION_UNSPECIFIED;
    case 1:
    case "ALLOW":
      return AuthorizationPolicy_Action.ALLOW;
    case 2:
    case "DENY":
      return AuthorizationPolicy_Action.DENY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AuthorizationPolicy_Action.UNRECOGNIZED;
  }
}

export function authorizationPolicy_ActionToJSON(object: AuthorizationPolicy_Action): string {
  switch (object) {
    case AuthorizationPolicy_Action.ACTION_UNSPECIFIED:
      return "ACTION_UNSPECIFIED";
    case AuthorizationPolicy_Action.ALLOW:
      return "ALLOW";
    case AuthorizationPolicy_Action.DENY:
      return "DENY";
    case AuthorizationPolicy_Action.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Specification of rules. */
export interface AuthorizationPolicy_Rule {
  /**
   * Optional. List of attributes for the traffic source. All of the sources
   * must match. A source is a match if both principals and ip_blocks match.
   * If not set, the action specified in the 'action' field will be applied
   * without any rule checks for the source.
   */
  sources: AuthorizationPolicy_Rule_Source[];
  /**
   * Optional. List of attributes for the traffic destination. All of the
   * destinations must match. A destination is a match if a request matches
   * all the specified hosts, ports, methods and headers. If not set, the
   * action specified in the 'action' field will be applied without any rule
   * checks for the destination.
   */
  destinations: AuthorizationPolicy_Rule_Destination[];
}

/** Specification of traffic source attributes. */
export interface AuthorizationPolicy_Rule_Source {
  /**
   * Optional. List of peer identities to match for authorization. At least
   * one principal should match. Each peer can be an exact match, or a
   * prefix match (example, "namespace/*") or a suffix match (example,
   * "* /service-account") or a presence match "*". Authorization based on
   * the principal name without certificate validation (configured by
   * ServerTlsPolicy resource) is considered insecure.
   */
  principals: string[];
  /**
   * Optional. List of CIDR ranges to match based on source IP address. At
   * least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR
   * (e.g., "1.2.3.0/24") are supported. Authorization based on source IP
   * alone should be avoided. The IP addresses of any load balancers or
   * proxies should be considered untrusted.
   */
  ipBlocks: string[];
}

/** Specification of traffic destination attributes. */
export interface AuthorizationPolicy_Rule_Destination {
  /**
   * Required. List of host names to match. Matched against the ":authority"
   * header in http requests. At least one host should match. Each host can
   * be an exact match, or a prefix match (example "mydomain.*") or a suffix
   * match (example "*.myorg.com") or a presence (any) match "*".
   */
  hosts: string[];
  /**
   * Required. List of destination ports to match. At least one port should
   * match.
   */
  ports: number[];
  /**
   * Optional. A list of HTTP methods to match. At least one method should
   * match. Should not be set for gRPC services.
   */
  methods: string[];
  /**
   * Optional. Match against key:value pair in http header. Provides a
   * flexible match based on HTTP headers, for potentially advanced use
   * cases. At least one header should match. Avoid using header matches to
   * make authorization decisions unless there is a strong guarantee that
   * requests arrive through a trusted client or proxy.
   */
  httpHeaderMatch: AuthorizationPolicy_Rule_Destination_HttpHeaderMatch | undefined;
}

/** Specification of HTTP header match attributes. */
export interface AuthorizationPolicy_Rule_Destination_HttpHeaderMatch {
  /**
   * Required. The value of the header must match the regular expression
   * specified in regexMatch. For regular expression grammar,
   * please see: en.cppreference.com/w/cpp/regex/ecmascript
   * For matching against a port specified in the HTTP
   * request, use a headerMatch with headerName set to Host
   * and a regular expression that satisfies the RFC2616 Host
   * header's port specifier.
   */
  regexMatch?:
    | string
    | undefined;
  /**
   * Required. The name of the HTTP header to match. For matching
   * against the HTTP request's authority, use a headerMatch
   * with the header name ":authority". For matching a
   * request's method, use the headerName ":method".
   */
  headerName: string;
}

export interface AuthorizationPolicy_LabelsEntry {
  key: string;
  value: string;
}

/** Request used with the ListAuthorizationPolicies method. */
export interface ListAuthorizationPoliciesRequest {
  /**
   * Required. The project and location from which the AuthorizationPolicies
   * should be listed, specified in the format
   * `projects/{project}/locations/{location}`.
   */
  parent: string;
  /** Maximum number of AuthorizationPolicies to return per call. */
  pageSize: number;
  /**
   * The value returned by the last
   * `ListAuthorizationPoliciesResponse` Indicates that this is a
   * continuation of a prior `ListAuthorizationPolicies` call, and
   * that the system should return the next page of data.
   */
  pageToken: string;
}

/** Response returned by the ListAuthorizationPolicies method. */
export interface ListAuthorizationPoliciesResponse {
  /** List of AuthorizationPolicies resources. */
  authorizationPolicies: AuthorizationPolicy[];
  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   */
  nextPageToken: string;
}

/** Request used by the GetAuthorizationPolicy method. */
export interface GetAuthorizationPolicyRequest {
  /**
   * Required. A name of the AuthorizationPolicy to get. Must be in the format
   * `projects/{project}/locations/{location}/authorizationPolicies/*`.
   */
  name: string;
}

/** Request used by the CreateAuthorizationPolicy method. */
export interface CreateAuthorizationPolicyRequest {
  /**
   * Required. The parent resource of the AuthorizationPolicy. Must be in the
   * format `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * Required. Short name of the AuthorizationPolicy resource to be created.
   * This value should be 1-63 characters long, containing only
   * letters, numbers, hyphens, and underscores, and should not start
   * with a number. E.g. "authz_policy".
   */
  authorizationPolicyId: string;
  /** Required. AuthorizationPolicy resource to be created. */
  authorizationPolicy: AuthorizationPolicy | undefined;
}

/** Request used by the UpdateAuthorizationPolicy method. */
export interface UpdateAuthorizationPolicyRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * AuthorizationPolicy resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Updated AuthorizationPolicy resource. */
  authorizationPolicy: AuthorizationPolicy | undefined;
}

/** Request used by the DeleteAuthorizationPolicy method. */
export interface DeleteAuthorizationPolicyRequest {
  /**
   * Required. A name of the AuthorizationPolicy to delete. Must be in the
   * format `projects/{project}/locations/{location}/authorizationPolicies/*`.
   */
  name: string;
}

function createBaseAuthorizationPolicy(): AuthorizationPolicy {
  return { name: "", description: "", createTime: undefined, updateTime: undefined, labels: {}, action: 0, rules: [] };
}

export const AuthorizationPolicy: MessageFns<AuthorizationPolicy> = {
  encode(message: AuthorizationPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      AuthorizationPolicy_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.action !== 0) {
      writer.uint32(48).int32(message.action);
    }
    for (const v of message.rules) {
      AuthorizationPolicy_Rule.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizationPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizationPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = AuthorizationPolicy_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.rules.push(AuthorizationPolicy_Rule.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizationPolicy {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      action: isSet(object.action) ? authorizationPolicy_ActionFromJSON(object.action) : 0,
      rules: globalThis.Array.isArray(object?.rules)
        ? object.rules.map((e: any) => AuthorizationPolicy_Rule.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AuthorizationPolicy): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.action !== 0) {
      obj.action = authorizationPolicy_ActionToJSON(message.action);
    }
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => AuthorizationPolicy_Rule.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AuthorizationPolicy>): AuthorizationPolicy {
    return AuthorizationPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthorizationPolicy>): AuthorizationPolicy {
    const message = createBaseAuthorizationPolicy();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.action = object.action ?? 0;
    message.rules = object.rules?.map((e) => AuthorizationPolicy_Rule.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAuthorizationPolicy_Rule(): AuthorizationPolicy_Rule {
  return { sources: [], destinations: [] };
}

export const AuthorizationPolicy_Rule: MessageFns<AuthorizationPolicy_Rule> = {
  encode(message: AuthorizationPolicy_Rule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sources) {
      AuthorizationPolicy_Rule_Source.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.destinations) {
      AuthorizationPolicy_Rule_Destination.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizationPolicy_Rule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizationPolicy_Rule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sources.push(AuthorizationPolicy_Rule_Source.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinations.push(AuthorizationPolicy_Rule_Destination.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizationPolicy_Rule {
    return {
      sources: globalThis.Array.isArray(object?.sources)
        ? object.sources.map((e: any) => AuthorizationPolicy_Rule_Source.fromJSON(e))
        : [],
      destinations: globalThis.Array.isArray(object?.destinations)
        ? object.destinations.map((e: any) => AuthorizationPolicy_Rule_Destination.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AuthorizationPolicy_Rule): unknown {
    const obj: any = {};
    if (message.sources?.length) {
      obj.sources = message.sources.map((e) => AuthorizationPolicy_Rule_Source.toJSON(e));
    }
    if (message.destinations?.length) {
      obj.destinations = message.destinations.map((e) => AuthorizationPolicy_Rule_Destination.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AuthorizationPolicy_Rule>): AuthorizationPolicy_Rule {
    return AuthorizationPolicy_Rule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthorizationPolicy_Rule>): AuthorizationPolicy_Rule {
    const message = createBaseAuthorizationPolicy_Rule();
    message.sources = object.sources?.map((e) => AuthorizationPolicy_Rule_Source.fromPartial(e)) || [];
    message.destinations = object.destinations?.map((e) => AuthorizationPolicy_Rule_Destination.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAuthorizationPolicy_Rule_Source(): AuthorizationPolicy_Rule_Source {
  return { principals: [], ipBlocks: [] };
}

export const AuthorizationPolicy_Rule_Source: MessageFns<AuthorizationPolicy_Rule_Source> = {
  encode(message: AuthorizationPolicy_Rule_Source, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.principals) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.ipBlocks) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizationPolicy_Rule_Source {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizationPolicy_Rule_Source();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.principals.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ipBlocks.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizationPolicy_Rule_Source {
    return {
      principals: globalThis.Array.isArray(object?.principals)
        ? object.principals.map((e: any) => globalThis.String(e))
        : [],
      ipBlocks: globalThis.Array.isArray(object?.ipBlocks) ? object.ipBlocks.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: AuthorizationPolicy_Rule_Source): unknown {
    const obj: any = {};
    if (message.principals?.length) {
      obj.principals = message.principals;
    }
    if (message.ipBlocks?.length) {
      obj.ipBlocks = message.ipBlocks;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthorizationPolicy_Rule_Source>): AuthorizationPolicy_Rule_Source {
    return AuthorizationPolicy_Rule_Source.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthorizationPolicy_Rule_Source>): AuthorizationPolicy_Rule_Source {
    const message = createBaseAuthorizationPolicy_Rule_Source();
    message.principals = object.principals?.map((e) => e) || [];
    message.ipBlocks = object.ipBlocks?.map((e) => e) || [];
    return message;
  },
};

function createBaseAuthorizationPolicy_Rule_Destination(): AuthorizationPolicy_Rule_Destination {
  return { hosts: [], ports: [], methods: [], httpHeaderMatch: undefined };
}

export const AuthorizationPolicy_Rule_Destination: MessageFns<AuthorizationPolicy_Rule_Destination> = {
  encode(message: AuthorizationPolicy_Rule_Destination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hosts) {
      writer.uint32(10).string(v!);
    }
    writer.uint32(18).fork();
    for (const v of message.ports) {
      writer.uint32(v);
    }
    writer.join();
    for (const v of message.methods) {
      writer.uint32(34).string(v!);
    }
    if (message.httpHeaderMatch !== undefined) {
      AuthorizationPolicy_Rule_Destination_HttpHeaderMatch.encode(message.httpHeaderMatch, writer.uint32(42).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizationPolicy_Rule_Destination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizationPolicy_Rule_Destination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hosts.push(reader.string());
          continue;
        case 2:
          if (tag === 16) {
            message.ports.push(reader.uint32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ports.push(reader.uint32());
            }

            continue;
          }

          break;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.methods.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.httpHeaderMatch = AuthorizationPolicy_Rule_Destination_HttpHeaderMatch.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizationPolicy_Rule_Destination {
    return {
      hosts: globalThis.Array.isArray(object?.hosts) ? object.hosts.map((e: any) => globalThis.String(e)) : [],
      ports: globalThis.Array.isArray(object?.ports) ? object.ports.map((e: any) => globalThis.Number(e)) : [],
      methods: globalThis.Array.isArray(object?.methods) ? object.methods.map((e: any) => globalThis.String(e)) : [],
      httpHeaderMatch: isSet(object.httpHeaderMatch)
        ? AuthorizationPolicy_Rule_Destination_HttpHeaderMatch.fromJSON(object.httpHeaderMatch)
        : undefined,
    };
  },

  toJSON(message: AuthorizationPolicy_Rule_Destination): unknown {
    const obj: any = {};
    if (message.hosts?.length) {
      obj.hosts = message.hosts;
    }
    if (message.ports?.length) {
      obj.ports = message.ports.map((e) => Math.round(e));
    }
    if (message.methods?.length) {
      obj.methods = message.methods;
    }
    if (message.httpHeaderMatch !== undefined) {
      obj.httpHeaderMatch = AuthorizationPolicy_Rule_Destination_HttpHeaderMatch.toJSON(message.httpHeaderMatch);
    }
    return obj;
  },

  create(base?: DeepPartial<AuthorizationPolicy_Rule_Destination>): AuthorizationPolicy_Rule_Destination {
    return AuthorizationPolicy_Rule_Destination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthorizationPolicy_Rule_Destination>): AuthorizationPolicy_Rule_Destination {
    const message = createBaseAuthorizationPolicy_Rule_Destination();
    message.hosts = object.hosts?.map((e) => e) || [];
    message.ports = object.ports?.map((e) => e) || [];
    message.methods = object.methods?.map((e) => e) || [];
    message.httpHeaderMatch = (object.httpHeaderMatch !== undefined && object.httpHeaderMatch !== null)
      ? AuthorizationPolicy_Rule_Destination_HttpHeaderMatch.fromPartial(object.httpHeaderMatch)
      : undefined;
    return message;
  },
};

function createBaseAuthorizationPolicy_Rule_Destination_HttpHeaderMatch(): AuthorizationPolicy_Rule_Destination_HttpHeaderMatch {
  return { regexMatch: undefined, headerName: "" };
}

export const AuthorizationPolicy_Rule_Destination_HttpHeaderMatch: MessageFns<
  AuthorizationPolicy_Rule_Destination_HttpHeaderMatch
> = {
  encode(
    message: AuthorizationPolicy_Rule_Destination_HttpHeaderMatch,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.regexMatch !== undefined) {
      writer.uint32(18).string(message.regexMatch);
    }
    if (message.headerName !== "") {
      writer.uint32(10).string(message.headerName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizationPolicy_Rule_Destination_HttpHeaderMatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizationPolicy_Rule_Destination_HttpHeaderMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.regexMatch = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headerName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizationPolicy_Rule_Destination_HttpHeaderMatch {
    return {
      regexMatch: isSet(object.regexMatch) ? globalThis.String(object.regexMatch) : undefined,
      headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
    };
  },

  toJSON(message: AuthorizationPolicy_Rule_Destination_HttpHeaderMatch): unknown {
    const obj: any = {};
    if (message.regexMatch !== undefined) {
      obj.regexMatch = message.regexMatch;
    }
    if (message.headerName !== "") {
      obj.headerName = message.headerName;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AuthorizationPolicy_Rule_Destination_HttpHeaderMatch>,
  ): AuthorizationPolicy_Rule_Destination_HttpHeaderMatch {
    return AuthorizationPolicy_Rule_Destination_HttpHeaderMatch.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AuthorizationPolicy_Rule_Destination_HttpHeaderMatch>,
  ): AuthorizationPolicy_Rule_Destination_HttpHeaderMatch {
    const message = createBaseAuthorizationPolicy_Rule_Destination_HttpHeaderMatch();
    message.regexMatch = object.regexMatch ?? undefined;
    message.headerName = object.headerName ?? "";
    return message;
  },
};

function createBaseAuthorizationPolicy_LabelsEntry(): AuthorizationPolicy_LabelsEntry {
  return { key: "", value: "" };
}

export const AuthorizationPolicy_LabelsEntry: MessageFns<AuthorizationPolicy_LabelsEntry> = {
  encode(message: AuthorizationPolicy_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizationPolicy_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizationPolicy_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizationPolicy_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AuthorizationPolicy_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthorizationPolicy_LabelsEntry>): AuthorizationPolicy_LabelsEntry {
    return AuthorizationPolicy_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthorizationPolicy_LabelsEntry>): AuthorizationPolicy_LabelsEntry {
    const message = createBaseAuthorizationPolicy_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListAuthorizationPoliciesRequest(): ListAuthorizationPoliciesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAuthorizationPoliciesRequest: MessageFns<ListAuthorizationPoliciesRequest> = {
  encode(message: ListAuthorizationPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAuthorizationPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAuthorizationPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAuthorizationPoliciesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAuthorizationPoliciesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAuthorizationPoliciesRequest>): ListAuthorizationPoliciesRequest {
    return ListAuthorizationPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAuthorizationPoliciesRequest>): ListAuthorizationPoliciesRequest {
    const message = createBaseListAuthorizationPoliciesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAuthorizationPoliciesResponse(): ListAuthorizationPoliciesResponse {
  return { authorizationPolicies: [], nextPageToken: "" };
}

export const ListAuthorizationPoliciesResponse: MessageFns<ListAuthorizationPoliciesResponse> = {
  encode(message: ListAuthorizationPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.authorizationPolicies) {
      AuthorizationPolicy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAuthorizationPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAuthorizationPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authorizationPolicies.push(AuthorizationPolicy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAuthorizationPoliciesResponse {
    return {
      authorizationPolicies: globalThis.Array.isArray(object?.authorizationPolicies)
        ? object.authorizationPolicies.map((e: any) => AuthorizationPolicy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAuthorizationPoliciesResponse): unknown {
    const obj: any = {};
    if (message.authorizationPolicies?.length) {
      obj.authorizationPolicies = message.authorizationPolicies.map((e) => AuthorizationPolicy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAuthorizationPoliciesResponse>): ListAuthorizationPoliciesResponse {
    return ListAuthorizationPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAuthorizationPoliciesResponse>): ListAuthorizationPoliciesResponse {
    const message = createBaseListAuthorizationPoliciesResponse();
    message.authorizationPolicies = object.authorizationPolicies?.map((e) => AuthorizationPolicy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetAuthorizationPolicyRequest(): GetAuthorizationPolicyRequest {
  return { name: "" };
}

export const GetAuthorizationPolicyRequest: MessageFns<GetAuthorizationPolicyRequest> = {
  encode(message: GetAuthorizationPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAuthorizationPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAuthorizationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAuthorizationPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAuthorizationPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAuthorizationPolicyRequest>): GetAuthorizationPolicyRequest {
    return GetAuthorizationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAuthorizationPolicyRequest>): GetAuthorizationPolicyRequest {
    const message = createBaseGetAuthorizationPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateAuthorizationPolicyRequest(): CreateAuthorizationPolicyRequest {
  return { parent: "", authorizationPolicyId: "", authorizationPolicy: undefined };
}

export const CreateAuthorizationPolicyRequest: MessageFns<CreateAuthorizationPolicyRequest> = {
  encode(message: CreateAuthorizationPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.authorizationPolicyId !== "") {
      writer.uint32(18).string(message.authorizationPolicyId);
    }
    if (message.authorizationPolicy !== undefined) {
      AuthorizationPolicy.encode(message.authorizationPolicy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAuthorizationPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAuthorizationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authorizationPolicyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.authorizationPolicy = AuthorizationPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAuthorizationPolicyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      authorizationPolicyId: isSet(object.authorizationPolicyId) ? globalThis.String(object.authorizationPolicyId) : "",
      authorizationPolicy: isSet(object.authorizationPolicy)
        ? AuthorizationPolicy.fromJSON(object.authorizationPolicy)
        : undefined,
    };
  },

  toJSON(message: CreateAuthorizationPolicyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.authorizationPolicyId !== "") {
      obj.authorizationPolicyId = message.authorizationPolicyId;
    }
    if (message.authorizationPolicy !== undefined) {
      obj.authorizationPolicy = AuthorizationPolicy.toJSON(message.authorizationPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAuthorizationPolicyRequest>): CreateAuthorizationPolicyRequest {
    return CreateAuthorizationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAuthorizationPolicyRequest>): CreateAuthorizationPolicyRequest {
    const message = createBaseCreateAuthorizationPolicyRequest();
    message.parent = object.parent ?? "";
    message.authorizationPolicyId = object.authorizationPolicyId ?? "";
    message.authorizationPolicy = (object.authorizationPolicy !== undefined && object.authorizationPolicy !== null)
      ? AuthorizationPolicy.fromPartial(object.authorizationPolicy)
      : undefined;
    return message;
  },
};

function createBaseUpdateAuthorizationPolicyRequest(): UpdateAuthorizationPolicyRequest {
  return { updateMask: undefined, authorizationPolicy: undefined };
}

export const UpdateAuthorizationPolicyRequest: MessageFns<UpdateAuthorizationPolicyRequest> = {
  encode(message: UpdateAuthorizationPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.authorizationPolicy !== undefined) {
      AuthorizationPolicy.encode(message.authorizationPolicy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAuthorizationPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAuthorizationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authorizationPolicy = AuthorizationPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAuthorizationPolicyRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      authorizationPolicy: isSet(object.authorizationPolicy)
        ? AuthorizationPolicy.fromJSON(object.authorizationPolicy)
        : undefined,
    };
  },

  toJSON(message: UpdateAuthorizationPolicyRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.authorizationPolicy !== undefined) {
      obj.authorizationPolicy = AuthorizationPolicy.toJSON(message.authorizationPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAuthorizationPolicyRequest>): UpdateAuthorizationPolicyRequest {
    return UpdateAuthorizationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAuthorizationPolicyRequest>): UpdateAuthorizationPolicyRequest {
    const message = createBaseUpdateAuthorizationPolicyRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.authorizationPolicy = (object.authorizationPolicy !== undefined && object.authorizationPolicy !== null)
      ? AuthorizationPolicy.fromPartial(object.authorizationPolicy)
      : undefined;
    return message;
  },
};

function createBaseDeleteAuthorizationPolicyRequest(): DeleteAuthorizationPolicyRequest {
  return { name: "" };
}

export const DeleteAuthorizationPolicyRequest: MessageFns<DeleteAuthorizationPolicyRequest> = {
  encode(message: DeleteAuthorizationPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAuthorizationPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAuthorizationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAuthorizationPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAuthorizationPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAuthorizationPolicyRequest>): DeleteAuthorizationPolicyRequest {
    return DeleteAuthorizationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAuthorizationPolicyRequest>): DeleteAuthorizationPolicyRequest {
    const message = createBaseDeleteAuthorizationPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
