// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/speech/v1p1beta1/cloud_speech_adaptation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { CustomClass, PhraseSet } from "./resource.js";

export const protobufPackage = "google.cloud.speech.v1p1beta1";

/** Message sent by the client for the `CreatePhraseSet` method. */
export interface CreatePhraseSetRequest {
  /**
   * Required. The parent resource where this phrase set will be created.
   * Format:
   *
   * `projects/{project}/locations/{location}`
   *
   * Speech-to-Text supports three locations: `global`, `us` (US North America),
   * and `eu` (Europe). If you are calling the `speech.googleapis.com`
   * endpoint, use the `global` location. To specify a region, use a
   * [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints)
   * with matching `us` or `eu` location value.
   */
  parent: string;
  /**
   * Required. The ID to use for the phrase set, which will become the final
   * component of the phrase set's resource name.
   *
   * This value should restrict to letters, numbers, and hyphens, with the first
   * character a letter, the last a letter or a number, and be 4-63 characters.
   */
  phraseSetId: string;
  /** Required. The phrase set to create. */
  phraseSet: PhraseSet | undefined;
}

/** Message sent by the client for the `UpdatePhraseSet` method. */
export interface UpdatePhraseSetRequest {
  /**
   * Required. The phrase set to update.
   *
   * The phrase set's `name` field is used to identify the set to be
   * updated. Format:
   *
   * `projects/{project}/locations/{location}/phraseSets/{phrase_set}`
   *
   * Speech-to-Text supports three locations: `global`, `us` (US North America),
   * and `eu` (Europe). If you are calling the `speech.googleapis.com`
   * endpoint, use the `global` location. To specify a region, use a
   * [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints)
   * with matching `us` or `eu` location value.
   */
  phraseSet:
    | PhraseSet
    | undefined;
  /** The list of fields to be updated. */
  updateMask: string[] | undefined;
}

/** Message sent by the client for the `GetPhraseSet` method. */
export interface GetPhraseSetRequest {
  /**
   * Required. The name of the phrase set to retrieve. Format:
   *
   * `projects/{project}/locations/{location}/phraseSets/{phrase_set}`
   *
   * Speech-to-Text supports three locations: `global`, `us` (US North America),
   * and `eu` (Europe). If you are calling the `speech.googleapis.com`
   * endpoint, use the `global` location. To specify a region, use a
   * [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints)
   * with matching `us` or `eu` location value.
   */
  name: string;
}

/** Message sent by the client for the `ListPhraseSet` method. */
export interface ListPhraseSetRequest {
  /**
   * Required. The parent, which owns this collection of phrase set. Format:
   *
   * `projects/{project}/locations/{location}`
   *
   * Speech-to-Text supports three locations: `global`, `us` (US North America),
   * and `eu` (Europe). If you are calling the `speech.googleapis.com`
   * endpoint, use the `global` location. To specify a region, use a
   * [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints)
   * with matching `us` or `eu` location value.
   */
  parent: string;
  /**
   * The maximum number of phrase sets to return. The service may return
   * fewer than this value. If unspecified, at most 50 phrase sets will be
   * returned. The maximum value is 1000; values above 1000 will be coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListPhraseSet` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListPhraseSet` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Message returned to the client by the `ListPhraseSet` method. */
export interface ListPhraseSetResponse {
  /** The phrase set. */
  phraseSets: PhraseSet[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Message sent by the client for the `DeletePhraseSet` method. */
export interface DeletePhraseSetRequest {
  /**
   * Required. The name of the phrase set to delete. Format:
   *
   * `projects/{project}/locations/{location}/phraseSets/{phrase_set}`
   */
  name: string;
}

/** Message sent by the client for the `CreateCustomClass` method. */
export interface CreateCustomClassRequest {
  /**
   * Required. The parent resource where this custom class will be created.
   * Format:
   *
   * `projects/{project}/locations/{location}/customClasses`
   *
   * Speech-to-Text supports three locations: `global`, `us` (US North America),
   * and `eu` (Europe). If you are calling the `speech.googleapis.com`
   * endpoint, use the `global` location. To specify a region, use a
   * [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints)
   * with matching `us` or `eu` location value.
   */
  parent: string;
  /**
   * Required. The ID to use for the custom class, which will become the final
   * component of the custom class' resource name.
   *
   * This value should restrict to letters, numbers, and hyphens, with the first
   * character a letter, the last a letter or a number, and be 4-63 characters.
   */
  customClassId: string;
  /** Required. The custom class to create. */
  customClass: CustomClass | undefined;
}

/** Message sent by the client for the `UpdateCustomClass` method. */
export interface UpdateCustomClassRequest {
  /**
   * Required. The custom class to update.
   *
   * The custom class's `name` field is used to identify the custom class to be
   * updated. Format:
   *
   * `projects/{project}/locations/{location}/customClasses/{custom_class}`
   *
   * Speech-to-Text supports three locations: `global`, `us` (US North America),
   * and `eu` (Europe). If you are calling the `speech.googleapis.com`
   * endpoint, use the `global` location. To specify a region, use a
   * [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints)
   * with matching `us` or `eu` location value.
   */
  customClass:
    | CustomClass
    | undefined;
  /** The list of fields to be updated. */
  updateMask: string[] | undefined;
}

/** Message sent by the client for the `GetCustomClass` method. */
export interface GetCustomClassRequest {
  /**
   * Required. The name of the custom class to retrieve. Format:
   *
   * `projects/{project}/locations/{location}/customClasses/{custom_class}`
   */
  name: string;
}

/** Message sent by the client for the `ListCustomClasses` method. */
export interface ListCustomClassesRequest {
  /**
   * Required. The parent, which owns this collection of custom classes. Format:
   *
   * `projects/{project}/locations/{location}/customClasses`
   *
   * Speech-to-Text supports three locations: `global`, `us` (US North America),
   * and `eu` (Europe). If you are calling the `speech.googleapis.com`
   * endpoint, use the `global` location. To specify a region, use a
   * [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints)
   * with matching `us` or `eu` location value.
   */
  parent: string;
  /**
   * The maximum number of custom classes to return. The service may return
   * fewer than this value. If unspecified, at most 50 custom classes will be
   * returned. The maximum value is 1000; values above 1000 will be coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListCustomClass` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListCustomClass` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Message returned to the client by the `ListCustomClasses` method. */
export interface ListCustomClassesResponse {
  /** The custom classes. */
  customClasses: CustomClass[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Message sent by the client for the `DeleteCustomClass` method. */
export interface DeleteCustomClassRequest {
  /**
   * Required. The name of the custom class to delete. Format:
   *
   * `projects/{project}/locations/{location}/customClasses/{custom_class}`
   *
   * Speech-to-Text supports three locations: `global`, `us` (US North America),
   * and `eu` (Europe). If you are calling the `speech.googleapis.com`
   * endpoint, use the `global` location. To specify a region, use a
   * [regional endpoint](https://cloud.google.com/speech-to-text/docs/endpoints)
   * with matching `us` or `eu` location value.
   */
  name: string;
}

function createBaseCreatePhraseSetRequest(): CreatePhraseSetRequest {
  return { parent: "", phraseSetId: "", phraseSet: undefined };
}

export const CreatePhraseSetRequest: MessageFns<CreatePhraseSetRequest> = {
  encode(message: CreatePhraseSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.phraseSetId !== "") {
      writer.uint32(18).string(message.phraseSetId);
    }
    if (message.phraseSet !== undefined) {
      PhraseSet.encode(message.phraseSet, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePhraseSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePhraseSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.phraseSetId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.phraseSet = PhraseSet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePhraseSetRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      phraseSetId: isSet(object.phraseSetId) ? globalThis.String(object.phraseSetId) : "",
      phraseSet: isSet(object.phraseSet) ? PhraseSet.fromJSON(object.phraseSet) : undefined,
    };
  },

  toJSON(message: CreatePhraseSetRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.phraseSetId !== "") {
      obj.phraseSetId = message.phraseSetId;
    }
    if (message.phraseSet !== undefined) {
      obj.phraseSet = PhraseSet.toJSON(message.phraseSet);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePhraseSetRequest>): CreatePhraseSetRequest {
    return CreatePhraseSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePhraseSetRequest>): CreatePhraseSetRequest {
    const message = createBaseCreatePhraseSetRequest();
    message.parent = object.parent ?? "";
    message.phraseSetId = object.phraseSetId ?? "";
    message.phraseSet = (object.phraseSet !== undefined && object.phraseSet !== null)
      ? PhraseSet.fromPartial(object.phraseSet)
      : undefined;
    return message;
  },
};

function createBaseUpdatePhraseSetRequest(): UpdatePhraseSetRequest {
  return { phraseSet: undefined, updateMask: undefined };
}

export const UpdatePhraseSetRequest: MessageFns<UpdatePhraseSetRequest> = {
  encode(message: UpdatePhraseSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phraseSet !== undefined) {
      PhraseSet.encode(message.phraseSet, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePhraseSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePhraseSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phraseSet = PhraseSet.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePhraseSetRequest {
    return {
      phraseSet: isSet(object.phraseSet) ? PhraseSet.fromJSON(object.phraseSet) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdatePhraseSetRequest): unknown {
    const obj: any = {};
    if (message.phraseSet !== undefined) {
      obj.phraseSet = PhraseSet.toJSON(message.phraseSet);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePhraseSetRequest>): UpdatePhraseSetRequest {
    return UpdatePhraseSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePhraseSetRequest>): UpdatePhraseSetRequest {
    const message = createBaseUpdatePhraseSetRequest();
    message.phraseSet = (object.phraseSet !== undefined && object.phraseSet !== null)
      ? PhraseSet.fromPartial(object.phraseSet)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetPhraseSetRequest(): GetPhraseSetRequest {
  return { name: "" };
}

export const GetPhraseSetRequest: MessageFns<GetPhraseSetRequest> = {
  encode(message: GetPhraseSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPhraseSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPhraseSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPhraseSetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPhraseSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPhraseSetRequest>): GetPhraseSetRequest {
    return GetPhraseSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPhraseSetRequest>): GetPhraseSetRequest {
    const message = createBaseGetPhraseSetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListPhraseSetRequest(): ListPhraseSetRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListPhraseSetRequest: MessageFns<ListPhraseSetRequest> = {
  encode(message: ListPhraseSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPhraseSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPhraseSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPhraseSetRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPhraseSetRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPhraseSetRequest>): ListPhraseSetRequest {
    return ListPhraseSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPhraseSetRequest>): ListPhraseSetRequest {
    const message = createBaseListPhraseSetRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPhraseSetResponse(): ListPhraseSetResponse {
  return { phraseSets: [], nextPageToken: "" };
}

export const ListPhraseSetResponse: MessageFns<ListPhraseSetResponse> = {
  encode(message: ListPhraseSetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.phraseSets) {
      PhraseSet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPhraseSetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPhraseSetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phraseSets.push(PhraseSet.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPhraseSetResponse {
    return {
      phraseSets: globalThis.Array.isArray(object?.phraseSets)
        ? object.phraseSets.map((e: any) => PhraseSet.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPhraseSetResponse): unknown {
    const obj: any = {};
    if (message.phraseSets?.length) {
      obj.phraseSets = message.phraseSets.map((e) => PhraseSet.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPhraseSetResponse>): ListPhraseSetResponse {
    return ListPhraseSetResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPhraseSetResponse>): ListPhraseSetResponse {
    const message = createBaseListPhraseSetResponse();
    message.phraseSets = object.phraseSets?.map((e) => PhraseSet.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeletePhraseSetRequest(): DeletePhraseSetRequest {
  return { name: "" };
}

export const DeletePhraseSetRequest: MessageFns<DeletePhraseSetRequest> = {
  encode(message: DeletePhraseSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePhraseSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePhraseSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePhraseSetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeletePhraseSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePhraseSetRequest>): DeletePhraseSetRequest {
    return DeletePhraseSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePhraseSetRequest>): DeletePhraseSetRequest {
    const message = createBaseDeletePhraseSetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateCustomClassRequest(): CreateCustomClassRequest {
  return { parent: "", customClassId: "", customClass: undefined };
}

export const CreateCustomClassRequest: MessageFns<CreateCustomClassRequest> = {
  encode(message: CreateCustomClassRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.customClassId !== "") {
      writer.uint32(18).string(message.customClassId);
    }
    if (message.customClass !== undefined) {
      CustomClass.encode(message.customClass, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCustomClassRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCustomClassRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customClassId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.customClass = CustomClass.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCustomClassRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      customClassId: isSet(object.customClassId) ? globalThis.String(object.customClassId) : "",
      customClass: isSet(object.customClass) ? CustomClass.fromJSON(object.customClass) : undefined,
    };
  },

  toJSON(message: CreateCustomClassRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.customClassId !== "") {
      obj.customClassId = message.customClassId;
    }
    if (message.customClass !== undefined) {
      obj.customClass = CustomClass.toJSON(message.customClass);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCustomClassRequest>): CreateCustomClassRequest {
    return CreateCustomClassRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCustomClassRequest>): CreateCustomClassRequest {
    const message = createBaseCreateCustomClassRequest();
    message.parent = object.parent ?? "";
    message.customClassId = object.customClassId ?? "";
    message.customClass = (object.customClass !== undefined && object.customClass !== null)
      ? CustomClass.fromPartial(object.customClass)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomClassRequest(): UpdateCustomClassRequest {
  return { customClass: undefined, updateMask: undefined };
}

export const UpdateCustomClassRequest: MessageFns<UpdateCustomClassRequest> = {
  encode(message: UpdateCustomClassRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customClass !== undefined) {
      CustomClass.encode(message.customClass, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomClassRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomClassRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customClass = CustomClass.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomClassRequest {
    return {
      customClass: isSet(object.customClass) ? CustomClass.fromJSON(object.customClass) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateCustomClassRequest): unknown {
    const obj: any = {};
    if (message.customClass !== undefined) {
      obj.customClass = CustomClass.toJSON(message.customClass);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomClassRequest>): UpdateCustomClassRequest {
    return UpdateCustomClassRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomClassRequest>): UpdateCustomClassRequest {
    const message = createBaseUpdateCustomClassRequest();
    message.customClass = (object.customClass !== undefined && object.customClass !== null)
      ? CustomClass.fromPartial(object.customClass)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetCustomClassRequest(): GetCustomClassRequest {
  return { name: "" };
}

export const GetCustomClassRequest: MessageFns<GetCustomClassRequest> = {
  encode(message: GetCustomClassRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomClassRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomClassRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomClassRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCustomClassRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomClassRequest>): GetCustomClassRequest {
    return GetCustomClassRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomClassRequest>): GetCustomClassRequest {
    const message = createBaseGetCustomClassRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCustomClassesRequest(): ListCustomClassesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCustomClassesRequest: MessageFns<ListCustomClassesRequest> = {
  encode(message: ListCustomClassesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomClassesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomClassesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomClassesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCustomClassesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomClassesRequest>): ListCustomClassesRequest {
    return ListCustomClassesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomClassesRequest>): ListCustomClassesRequest {
    const message = createBaseListCustomClassesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCustomClassesResponse(): ListCustomClassesResponse {
  return { customClasses: [], nextPageToken: "" };
}

export const ListCustomClassesResponse: MessageFns<ListCustomClassesResponse> = {
  encode(message: ListCustomClassesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customClasses) {
      CustomClass.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomClassesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomClassesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customClasses.push(CustomClass.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomClassesResponse {
    return {
      customClasses: globalThis.Array.isArray(object?.customClasses)
        ? object.customClasses.map((e: any) => CustomClass.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCustomClassesResponse): unknown {
    const obj: any = {};
    if (message.customClasses?.length) {
      obj.customClasses = message.customClasses.map((e) => CustomClass.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomClassesResponse>): ListCustomClassesResponse {
    return ListCustomClassesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomClassesResponse>): ListCustomClassesResponse {
    const message = createBaseListCustomClassesResponse();
    message.customClasses = object.customClasses?.map((e) => CustomClass.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteCustomClassRequest(): DeleteCustomClassRequest {
  return { name: "" };
}

export const DeleteCustomClassRequest: MessageFns<DeleteCustomClassRequest> = {
  encode(message: DeleteCustomClassRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCustomClassRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCustomClassRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCustomClassRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteCustomClassRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCustomClassRequest>): DeleteCustomClassRequest {
    return DeleteCustomClassRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCustomClassRequest>): DeleteCustomClassRequest {
    const message = createBaseDeleteCustomClassRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Service that implements Google Cloud Speech Adaptation API. */
export type AdaptationDefinition = typeof AdaptationDefinition;
export const AdaptationDefinition = {
  name: "Adaptation",
  fullName: "google.cloud.speech.v1p1beta1.Adaptation",
  methods: {
    /**
     * Create a set of phrase hints. Each item in the set can be a single word or
     * a multi-word phrase. The items in the PhraseSet are favored by the
     * recognition model when you send a call that includes the PhraseSet.
     */
    createPhraseSet: {
      name: "CreatePhraseSet",
      requestType: CreatePhraseSetRequest,
      requestStream: false,
      responseType: PhraseSet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              104,
              114,
              97,
              115,
              101,
              95,
              115,
              101,
              116,
              44,
              112,
              104,
              114,
              97,
              115,
              101,
              95,
              115,
              101,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              104,
              114,
              97,
              115,
              101,
              83,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Get a phrase set. */
    getPhraseSet: {
      name: "GetPhraseSet",
      requestType: GetPhraseSetRequest,
      requestStream: false,
      responseType: PhraseSet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              104,
              114,
              97,
              115,
              101,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List phrase sets. */
    listPhraseSet: {
      name: "ListPhraseSet",
      requestType: ListPhraseSetRequest,
      requestStream: false,
      responseType: ListPhraseSetResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              104,
              114,
              97,
              115,
              101,
              83,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Update a phrase set. */
    updatePhraseSet: {
      name: "UpdatePhraseSet",
      requestType: UpdatePhraseSetRequest,
      requestStream: false,
      responseType: PhraseSet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              112,
              104,
              114,
              97,
              115,
              101,
              95,
              115,
              101,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              10,
              112,
              104,
              114,
              97,
              115,
              101,
              95,
              115,
              101,
              116,
              50,
              64,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              104,
              114,
              97,
              115,
              101,
              95,
              115,
              101,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              104,
              114,
              97,
              115,
              101,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete a phrase set. */
    deletePhraseSet: {
      name: "DeletePhraseSet",
      requestType: DeletePhraseSetRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              42,
              53,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              104,
              114,
              97,
              115,
              101,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Create a custom class. */
    createCustomClass: {
      name: "CreateCustomClass",
      requestType: CreateCustomClassRequest,
      requestStream: false,
      responseType: CustomClass,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              99,
              108,
              97,
              115,
              115,
              44,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              99,
              108,
              97,
              115,
              115,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              108,
              97,
              115,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Get a custom class. */
    getCustomClass: {
      name: "GetCustomClass",
      requestType: GetCustomClassRequest,
      requestStream: false,
      responseType: CustomClass,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              108,
              97,
              115,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List custom classes. */
    listCustomClasses: {
      name: "ListCustomClasses",
      requestType: ListCustomClassesRequest,
      requestStream: false,
      responseType: ListCustomClassesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              108,
              97,
              115,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Update a custom class. */
    updateCustomClass: {
      name: "UpdateCustomClass",
      requestType: UpdateCustomClassRequest,
      requestStream: false,
      responseType: CustomClass,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              99,
              108,
              97,
              115,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              85,
              58,
              12,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              99,
              108,
              97,
              115,
              115,
              50,
              69,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              99,
              108,
              97,
              115,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              108,
              97,
              115,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete a custom class. */
    deleteCustomClass: {
      name: "DeleteCustomClass",
      requestType: DeleteCustomClassRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              42,
              56,
              47,
              118,
              49,
              112,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              67,
              108,
              97,
              115,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AdaptationServiceImplementation<CallContextExt = {}> {
  /**
   * Create a set of phrase hints. Each item in the set can be a single word or
   * a multi-word phrase. The items in the PhraseSet are favored by the
   * recognition model when you send a call that includes the PhraseSet.
   */
  createPhraseSet(
    request: CreatePhraseSetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PhraseSet>>;
  /** Get a phrase set. */
  getPhraseSet(request: GetPhraseSetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PhraseSet>>;
  /** List phrase sets. */
  listPhraseSet(
    request: ListPhraseSetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPhraseSetResponse>>;
  /** Update a phrase set. */
  updatePhraseSet(
    request: UpdatePhraseSetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PhraseSet>>;
  /** Delete a phrase set. */
  deletePhraseSet(request: DeletePhraseSetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Create a custom class. */
  createCustomClass(
    request: CreateCustomClassRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomClass>>;
  /** Get a custom class. */
  getCustomClass(
    request: GetCustomClassRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomClass>>;
  /** List custom classes. */
  listCustomClasses(
    request: ListCustomClassesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomClassesResponse>>;
  /** Update a custom class. */
  updateCustomClass(
    request: UpdateCustomClassRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomClass>>;
  /** Delete a custom class. */
  deleteCustomClass(
    request: DeleteCustomClassRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface AdaptationClient<CallOptionsExt = {}> {
  /**
   * Create a set of phrase hints. Each item in the set can be a single word or
   * a multi-word phrase. The items in the PhraseSet are favored by the
   * recognition model when you send a call that includes the PhraseSet.
   */
  createPhraseSet(
    request: DeepPartial<CreatePhraseSetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PhraseSet>;
  /** Get a phrase set. */
  getPhraseSet(request: DeepPartial<GetPhraseSetRequest>, options?: CallOptions & CallOptionsExt): Promise<PhraseSet>;
  /** List phrase sets. */
  listPhraseSet(
    request: DeepPartial<ListPhraseSetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPhraseSetResponse>;
  /** Update a phrase set. */
  updatePhraseSet(
    request: DeepPartial<UpdatePhraseSetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PhraseSet>;
  /** Delete a phrase set. */
  deletePhraseSet(request: DeepPartial<DeletePhraseSetRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Create a custom class. */
  createCustomClass(
    request: DeepPartial<CreateCustomClassRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomClass>;
  /** Get a custom class. */
  getCustomClass(
    request: DeepPartial<GetCustomClassRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomClass>;
  /** List custom classes. */
  listCustomClasses(
    request: DeepPartial<ListCustomClassesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomClassesResponse>;
  /** Update a custom class. */
  updateCustomClass(
    request: DeepPartial<UpdateCustomClassRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomClass>;
  /** Delete a custom class. */
  deleteCustomClass(
    request: DeepPartial<DeleteCustomClassRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
