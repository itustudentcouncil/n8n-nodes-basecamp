// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/speech/v2/locations_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.speech.v2";

/**
 * Representes a singular feature of a model. If the feature is `recognizer`,
 * the release_state of the feature represents the release_state of the model
 */
export interface ModelFeature {
  /** The name of the feature (Note: the feature can be `recognizer`) */
  feature: string;
  /** The release state of the feature */
  releaseState: string;
}

/** Represents the collection of features belonging to a model */
export interface ModelFeatures {
  /** Repeated field that contains all features of the model */
  modelFeature: ModelFeature[];
}

/**
 * The metadata about the models in a given region for a specific locale.
 * Currently this is just the features of the model
 */
export interface ModelMetadata {
  /** Map of the model name -> features of that model */
  modelFeatures: { [key: string]: ModelFeatures };
}

export interface ModelMetadata_ModelFeaturesEntry {
  key: string;
  value: ModelFeatures | undefined;
}

/**
 * The metadata about locales available in a given region. Currently this is
 * just the models that are available for each locale
 */
export interface LanguageMetadata {
  /** Map of locale (language code) -> models */
  models: { [key: string]: ModelMetadata };
}

export interface LanguageMetadata_ModelsEntry {
  key: string;
  value: ModelMetadata | undefined;
}

/**
 * The access metadata for a particular region. This can be applied if the org
 * policy for the given project disallows a particular region.
 */
export interface AccessMetadata {
  /** Describes the different types of constraints that are applied. */
  constraintType: AccessMetadata_ConstraintType;
}

/**
 * Describes the different types of constraints that can be applied on a
 * region.
 */
export enum AccessMetadata_ConstraintType {
  /** CONSTRAINT_TYPE_UNSPECIFIED - Unspecified constraint applied. */
  CONSTRAINT_TYPE_UNSPECIFIED = 0,
  /** RESOURCE_LOCATIONS_ORG_POLICY_CREATE_CONSTRAINT - The project's org policy disallows the given region. */
  RESOURCE_LOCATIONS_ORG_POLICY_CREATE_CONSTRAINT = 1,
  UNRECOGNIZED = -1,
}

export function accessMetadata_ConstraintTypeFromJSON(object: any): AccessMetadata_ConstraintType {
  switch (object) {
    case 0:
    case "CONSTRAINT_TYPE_UNSPECIFIED":
      return AccessMetadata_ConstraintType.CONSTRAINT_TYPE_UNSPECIFIED;
    case 1:
    case "RESOURCE_LOCATIONS_ORG_POLICY_CREATE_CONSTRAINT":
      return AccessMetadata_ConstraintType.RESOURCE_LOCATIONS_ORG_POLICY_CREATE_CONSTRAINT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AccessMetadata_ConstraintType.UNRECOGNIZED;
  }
}

export function accessMetadata_ConstraintTypeToJSON(object: AccessMetadata_ConstraintType): string {
  switch (object) {
    case AccessMetadata_ConstraintType.CONSTRAINT_TYPE_UNSPECIFIED:
      return "CONSTRAINT_TYPE_UNSPECIFIED";
    case AccessMetadata_ConstraintType.RESOURCE_LOCATIONS_ORG_POLICY_CREATE_CONSTRAINT:
      return "RESOURCE_LOCATIONS_ORG_POLICY_CREATE_CONSTRAINT";
    case AccessMetadata_ConstraintType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Main metadata for the Locations API for STT V2. Currently this is just the
 * metadata about locales, models, and features
 */
export interface LocationsMetadata {
  /**
   * Information about available locales, models, and features represented in
   * the hierarchical structure of locales -> models -> features
   */
  languages:
    | LanguageMetadata
    | undefined;
  /** Information about access metadata for the region and given project. */
  accessMetadata: AccessMetadata | undefined;
}

function createBaseModelFeature(): ModelFeature {
  return { feature: "", releaseState: "" };
}

export const ModelFeature: MessageFns<ModelFeature> = {
  encode(message: ModelFeature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feature !== "") {
      writer.uint32(10).string(message.feature);
    }
    if (message.releaseState !== "") {
      writer.uint32(18).string(message.releaseState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelFeature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelFeature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.feature = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.releaseState = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelFeature {
    return {
      feature: isSet(object.feature) ? globalThis.String(object.feature) : "",
      releaseState: isSet(object.releaseState) ? globalThis.String(object.releaseState) : "",
    };
  },

  toJSON(message: ModelFeature): unknown {
    const obj: any = {};
    if (message.feature !== "") {
      obj.feature = message.feature;
    }
    if (message.releaseState !== "") {
      obj.releaseState = message.releaseState;
    }
    return obj;
  },

  create(base?: DeepPartial<ModelFeature>): ModelFeature {
    return ModelFeature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelFeature>): ModelFeature {
    const message = createBaseModelFeature();
    message.feature = object.feature ?? "";
    message.releaseState = object.releaseState ?? "";
    return message;
  },
};

function createBaseModelFeatures(): ModelFeatures {
  return { modelFeature: [] };
}

export const ModelFeatures: MessageFns<ModelFeatures> = {
  encode(message: ModelFeatures, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.modelFeature) {
      ModelFeature.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelFeatures {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelFeatures();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelFeature.push(ModelFeature.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelFeatures {
    return {
      modelFeature: globalThis.Array.isArray(object?.modelFeature)
        ? object.modelFeature.map((e: any) => ModelFeature.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ModelFeatures): unknown {
    const obj: any = {};
    if (message.modelFeature?.length) {
      obj.modelFeature = message.modelFeature.map((e) => ModelFeature.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ModelFeatures>): ModelFeatures {
    return ModelFeatures.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelFeatures>): ModelFeatures {
    const message = createBaseModelFeatures();
    message.modelFeature = object.modelFeature?.map((e) => ModelFeature.fromPartial(e)) || [];
    return message;
  },
};

function createBaseModelMetadata(): ModelMetadata {
  return { modelFeatures: {} };
}

export const ModelMetadata: MessageFns<ModelMetadata> = {
  encode(message: ModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.modelFeatures).forEach(([key, value]) => {
      ModelMetadata_ModelFeaturesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = ModelMetadata_ModelFeaturesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.modelFeatures[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMetadata {
    return {
      modelFeatures: isObject(object.modelFeatures)
        ? Object.entries(object.modelFeatures).reduce<{ [key: string]: ModelFeatures }>((acc, [key, value]) => {
          acc[key] = ModelFeatures.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ModelMetadata): unknown {
    const obj: any = {};
    if (message.modelFeatures) {
      const entries = Object.entries(message.modelFeatures);
      if (entries.length > 0) {
        obj.modelFeatures = {};
        entries.forEach(([k, v]) => {
          obj.modelFeatures[k] = ModelFeatures.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMetadata>): ModelMetadata {
    return ModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMetadata>): ModelMetadata {
    const message = createBaseModelMetadata();
    message.modelFeatures = Object.entries(object.modelFeatures ?? {}).reduce<{ [key: string]: ModelFeatures }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ModelFeatures.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseModelMetadata_ModelFeaturesEntry(): ModelMetadata_ModelFeaturesEntry {
  return { key: "", value: undefined };
}

export const ModelMetadata_ModelFeaturesEntry: MessageFns<ModelMetadata_ModelFeaturesEntry> = {
  encode(message: ModelMetadata_ModelFeaturesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ModelFeatures.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMetadata_ModelFeaturesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMetadata_ModelFeaturesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ModelFeatures.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMetadata_ModelFeaturesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ModelFeatures.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ModelMetadata_ModelFeaturesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ModelFeatures.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMetadata_ModelFeaturesEntry>): ModelMetadata_ModelFeaturesEntry {
    return ModelMetadata_ModelFeaturesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMetadata_ModelFeaturesEntry>): ModelMetadata_ModelFeaturesEntry {
    const message = createBaseModelMetadata_ModelFeaturesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ModelFeatures.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseLanguageMetadata(): LanguageMetadata {
  return { models: {} };
}

export const LanguageMetadata: MessageFns<LanguageMetadata> = {
  encode(message: LanguageMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.models).forEach(([key, value]) => {
      LanguageMetadata_ModelsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LanguageMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLanguageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = LanguageMetadata_ModelsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.models[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LanguageMetadata {
    return {
      models: isObject(object.models)
        ? Object.entries(object.models).reduce<{ [key: string]: ModelMetadata }>((acc, [key, value]) => {
          acc[key] = ModelMetadata.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: LanguageMetadata): unknown {
    const obj: any = {};
    if (message.models) {
      const entries = Object.entries(message.models);
      if (entries.length > 0) {
        obj.models = {};
        entries.forEach(([k, v]) => {
          obj.models[k] = ModelMetadata.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<LanguageMetadata>): LanguageMetadata {
    return LanguageMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LanguageMetadata>): LanguageMetadata {
    const message = createBaseLanguageMetadata();
    message.models = Object.entries(object.models ?? {}).reduce<{ [key: string]: ModelMetadata }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ModelMetadata.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseLanguageMetadata_ModelsEntry(): LanguageMetadata_ModelsEntry {
  return { key: "", value: undefined };
}

export const LanguageMetadata_ModelsEntry: MessageFns<LanguageMetadata_ModelsEntry> = {
  encode(message: LanguageMetadata_ModelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ModelMetadata.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LanguageMetadata_ModelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLanguageMetadata_ModelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ModelMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LanguageMetadata_ModelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ModelMetadata.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: LanguageMetadata_ModelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ModelMetadata.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<LanguageMetadata_ModelsEntry>): LanguageMetadata_ModelsEntry {
    return LanguageMetadata_ModelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LanguageMetadata_ModelsEntry>): LanguageMetadata_ModelsEntry {
    const message = createBaseLanguageMetadata_ModelsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ModelMetadata.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseAccessMetadata(): AccessMetadata {
  return { constraintType: 0 };
}

export const AccessMetadata: MessageFns<AccessMetadata> = {
  encode(message: AccessMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.constraintType !== 0) {
      writer.uint32(8).int32(message.constraintType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.constraintType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessMetadata {
    return {
      constraintType: isSet(object.constraintType) ? accessMetadata_ConstraintTypeFromJSON(object.constraintType) : 0,
    };
  },

  toJSON(message: AccessMetadata): unknown {
    const obj: any = {};
    if (message.constraintType !== 0) {
      obj.constraintType = accessMetadata_ConstraintTypeToJSON(message.constraintType);
    }
    return obj;
  },

  create(base?: DeepPartial<AccessMetadata>): AccessMetadata {
    return AccessMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessMetadata>): AccessMetadata {
    const message = createBaseAccessMetadata();
    message.constraintType = object.constraintType ?? 0;
    return message;
  },
};

function createBaseLocationsMetadata(): LocationsMetadata {
  return { languages: undefined, accessMetadata: undefined };
}

export const LocationsMetadata: MessageFns<LocationsMetadata> = {
  encode(message: LocationsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.languages !== undefined) {
      LanguageMetadata.encode(message.languages, writer.uint32(10).fork()).join();
    }
    if (message.accessMetadata !== undefined) {
      AccessMetadata.encode(message.accessMetadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languages = LanguageMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accessMetadata = AccessMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationsMetadata {
    return {
      languages: isSet(object.languages) ? LanguageMetadata.fromJSON(object.languages) : undefined,
      accessMetadata: isSet(object.accessMetadata) ? AccessMetadata.fromJSON(object.accessMetadata) : undefined,
    };
  },

  toJSON(message: LocationsMetadata): unknown {
    const obj: any = {};
    if (message.languages !== undefined) {
      obj.languages = LanguageMetadata.toJSON(message.languages);
    }
    if (message.accessMetadata !== undefined) {
      obj.accessMetadata = AccessMetadata.toJSON(message.accessMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<LocationsMetadata>): LocationsMetadata {
    return LocationsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocationsMetadata>): LocationsMetadata {
    const message = createBaseLocationsMetadata();
    message.languages = (object.languages !== undefined && object.languages !== null)
      ? LanguageMetadata.fromPartial(object.languages)
      : undefined;
    message.accessMetadata = (object.accessMetadata !== undefined && object.accessMetadata !== null)
      ? AccessMetadata.fromPartial(object.accessMetadata)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
