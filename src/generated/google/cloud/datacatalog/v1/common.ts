// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datacatalog/v1/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.datacatalog.v1";

/** This enum lists all the systems that Data Catalog integrates with. */
export enum IntegratedSystem {
  /** INTEGRATED_SYSTEM_UNSPECIFIED - Default unknown system. */
  INTEGRATED_SYSTEM_UNSPECIFIED = 0,
  /** BIGQUERY - BigQuery. */
  BIGQUERY = 1,
  /** CLOUD_PUBSUB - Cloud Pub/Sub. */
  CLOUD_PUBSUB = 2,
  /** DATAPROC_METASTORE - Dataproc Metastore. */
  DATAPROC_METASTORE = 3,
  /** DATAPLEX - Dataplex. */
  DATAPLEX = 4,
  /** CLOUD_SPANNER - Cloud Spanner */
  CLOUD_SPANNER = 6,
  /** CLOUD_BIGTABLE - Cloud Bigtable */
  CLOUD_BIGTABLE = 7,
  /** CLOUD_SQL - Cloud Sql */
  CLOUD_SQL = 8,
  /** LOOKER - Looker */
  LOOKER = 9,
  /** VERTEX_AI - Vertex AI */
  VERTEX_AI = 10,
  UNRECOGNIZED = -1,
}

export function integratedSystemFromJSON(object: any): IntegratedSystem {
  switch (object) {
    case 0:
    case "INTEGRATED_SYSTEM_UNSPECIFIED":
      return IntegratedSystem.INTEGRATED_SYSTEM_UNSPECIFIED;
    case 1:
    case "BIGQUERY":
      return IntegratedSystem.BIGQUERY;
    case 2:
    case "CLOUD_PUBSUB":
      return IntegratedSystem.CLOUD_PUBSUB;
    case 3:
    case "DATAPROC_METASTORE":
      return IntegratedSystem.DATAPROC_METASTORE;
    case 4:
    case "DATAPLEX":
      return IntegratedSystem.DATAPLEX;
    case 6:
    case "CLOUD_SPANNER":
      return IntegratedSystem.CLOUD_SPANNER;
    case 7:
    case "CLOUD_BIGTABLE":
      return IntegratedSystem.CLOUD_BIGTABLE;
    case 8:
    case "CLOUD_SQL":
      return IntegratedSystem.CLOUD_SQL;
    case 9:
    case "LOOKER":
      return IntegratedSystem.LOOKER;
    case 10:
    case "VERTEX_AI":
      return IntegratedSystem.VERTEX_AI;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IntegratedSystem.UNRECOGNIZED;
  }
}

export function integratedSystemToJSON(object: IntegratedSystem): string {
  switch (object) {
    case IntegratedSystem.INTEGRATED_SYSTEM_UNSPECIFIED:
      return "INTEGRATED_SYSTEM_UNSPECIFIED";
    case IntegratedSystem.BIGQUERY:
      return "BIGQUERY";
    case IntegratedSystem.CLOUD_PUBSUB:
      return "CLOUD_PUBSUB";
    case IntegratedSystem.DATAPROC_METASTORE:
      return "DATAPROC_METASTORE";
    case IntegratedSystem.DATAPLEX:
      return "DATAPLEX";
    case IntegratedSystem.CLOUD_SPANNER:
      return "CLOUD_SPANNER";
    case IntegratedSystem.CLOUD_BIGTABLE:
      return "CLOUD_BIGTABLE";
    case IntegratedSystem.CLOUD_SQL:
      return "CLOUD_SQL";
    case IntegratedSystem.LOOKER:
      return "LOOKER";
    case IntegratedSystem.VERTEX_AI:
      return "VERTEX_AI";
    case IntegratedSystem.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * This enum describes all the systems that manage
 * Taxonomy and PolicyTag resources in DataCatalog.
 */
export enum ManagingSystem {
  /** MANAGING_SYSTEM_UNSPECIFIED - Default value */
  MANAGING_SYSTEM_UNSPECIFIED = 0,
  /** MANAGING_SYSTEM_DATAPLEX - Dataplex. */
  MANAGING_SYSTEM_DATAPLEX = 1,
  /** MANAGING_SYSTEM_OTHER - Other */
  MANAGING_SYSTEM_OTHER = 2,
  UNRECOGNIZED = -1,
}

export function managingSystemFromJSON(object: any): ManagingSystem {
  switch (object) {
    case 0:
    case "MANAGING_SYSTEM_UNSPECIFIED":
      return ManagingSystem.MANAGING_SYSTEM_UNSPECIFIED;
    case 1:
    case "MANAGING_SYSTEM_DATAPLEX":
      return ManagingSystem.MANAGING_SYSTEM_DATAPLEX;
    case 2:
    case "MANAGING_SYSTEM_OTHER":
      return ManagingSystem.MANAGING_SYSTEM_OTHER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ManagingSystem.UNRECOGNIZED;
  }
}

export function managingSystemToJSON(object: ManagingSystem): string {
  switch (object) {
    case ManagingSystem.MANAGING_SYSTEM_UNSPECIFIED:
      return "MANAGING_SYSTEM_UNSPECIFIED";
    case ManagingSystem.MANAGING_SYSTEM_DATAPLEX:
      return "MANAGING_SYSTEM_DATAPLEX";
    case ManagingSystem.MANAGING_SYSTEM_OTHER:
      return "MANAGING_SYSTEM_OTHER";
    case ManagingSystem.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Entry metadata relevant only to the user and private to them. */
export interface PersonalDetails {
  /** True if the entry is starred by the user; false otherwise. */
  starred: boolean;
  /** Set if the entry is starred; unset otherwise. */
  starTime: Date | undefined;
}

function createBasePersonalDetails(): PersonalDetails {
  return { starred: false, starTime: undefined };
}

export const PersonalDetails: MessageFns<PersonalDetails> = {
  encode(message: PersonalDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.starred !== false) {
      writer.uint32(8).bool(message.starred);
    }
    if (message.starTime !== undefined) {
      Timestamp.encode(toTimestamp(message.starTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PersonalDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePersonalDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.starred = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.starTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PersonalDetails {
    return {
      starred: isSet(object.starred) ? globalThis.Boolean(object.starred) : false,
      starTime: isSet(object.starTime) ? fromJsonTimestamp(object.starTime) : undefined,
    };
  },

  toJSON(message: PersonalDetails): unknown {
    const obj: any = {};
    if (message.starred !== false) {
      obj.starred = message.starred;
    }
    if (message.starTime !== undefined) {
      obj.starTime = message.starTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<PersonalDetails>): PersonalDetails {
    return PersonalDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PersonalDetails>): PersonalDetails {
    const message = createBasePersonalDetails();
    message.starred = object.starred ?? false;
    message.starTime = object.starTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
