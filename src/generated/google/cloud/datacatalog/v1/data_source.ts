// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datacatalog/v1/data_source.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.datacatalog.v1";

/** Physical location of an entry. */
export interface DataSource {
  /** Service that physically stores the data. */
  service: DataSource_Service;
  /**
   * Full name of a resource as defined by the service. For example:
   *
   * `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`
   */
  resource: string;
  /** Output only. Data Catalog entry name, if applicable. */
  sourceEntry: string;
  /** Detailed properties of the underlying storage. */
  storageProperties?: StorageProperties | undefined;
}

/** Name of a service that stores the data. */
export enum DataSource_Service {
  /** SERVICE_UNSPECIFIED - Default unknown service. */
  SERVICE_UNSPECIFIED = 0,
  /** CLOUD_STORAGE - Google Cloud Storage service. */
  CLOUD_STORAGE = 1,
  /** BIGQUERY - BigQuery service. */
  BIGQUERY = 2,
  UNRECOGNIZED = -1,
}

export function dataSource_ServiceFromJSON(object: any): DataSource_Service {
  switch (object) {
    case 0:
    case "SERVICE_UNSPECIFIED":
      return DataSource_Service.SERVICE_UNSPECIFIED;
    case 1:
    case "CLOUD_STORAGE":
      return DataSource_Service.CLOUD_STORAGE;
    case 2:
    case "BIGQUERY":
      return DataSource_Service.BIGQUERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataSource_Service.UNRECOGNIZED;
  }
}

export function dataSource_ServiceToJSON(object: DataSource_Service): string {
  switch (object) {
    case DataSource_Service.SERVICE_UNSPECIFIED:
      return "SERVICE_UNSPECIFIED";
    case DataSource_Service.CLOUD_STORAGE:
      return "CLOUD_STORAGE";
    case DataSource_Service.BIGQUERY:
      return "BIGQUERY";
    case DataSource_Service.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Details the properties of the underlying storage. */
export interface StorageProperties {
  /**
   * Patterns to identify a set of files for this fileset.
   *
   * Examples of a valid `file_pattern`:
   *
   *  * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir`
   *                              directory
   *  * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir`
   *                               and all subdirectories recursively
   *  * `gs://bucket_name/file*`: matches files prefixed by `file` in
   *                              `bucket_name`
   *  * `gs://bucket_name/??.txt`: matches files with two characters followed by
   *                               `.txt` in `bucket_name`
   *  * `gs://bucket_name/[aeiou].txt`: matches files that contain a single
   *                                    vowel character followed by `.txt` in
   *                                    `bucket_name`
   *  * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ...
   *                                  or `m` followed by `.txt` in `bucket_name`
   *  * `gs://bucket_name/a/* /b`: matches all files in `bucket_name` that match
   *                              the `a/* /b` pattern, such as `a/c/b`, `a/d/b`
   *  * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`
   */
  filePattern: string[];
  /** File type in MIME format, for example, `text/plain`. */
  fileType: string;
}

function createBaseDataSource(): DataSource {
  return { service: 0, resource: "", sourceEntry: "", storageProperties: undefined };
}

export const DataSource: MessageFns<DataSource> = {
  encode(message: DataSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== 0) {
      writer.uint32(8).int32(message.service);
    }
    if (message.resource !== "") {
      writer.uint32(18).string(message.resource);
    }
    if (message.sourceEntry !== "") {
      writer.uint32(26).string(message.sourceEntry);
    }
    if (message.storageProperties !== undefined) {
      StorageProperties.encode(message.storageProperties, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.service = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sourceEntry = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.storageProperties = StorageProperties.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataSource {
    return {
      service: isSet(object.service) ? dataSource_ServiceFromJSON(object.service) : 0,
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      sourceEntry: isSet(object.sourceEntry) ? globalThis.String(object.sourceEntry) : "",
      storageProperties: isSet(object.storageProperties)
        ? StorageProperties.fromJSON(object.storageProperties)
        : undefined,
    };
  },

  toJSON(message: DataSource): unknown {
    const obj: any = {};
    if (message.service !== 0) {
      obj.service = dataSource_ServiceToJSON(message.service);
    }
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.sourceEntry !== "") {
      obj.sourceEntry = message.sourceEntry;
    }
    if (message.storageProperties !== undefined) {
      obj.storageProperties = StorageProperties.toJSON(message.storageProperties);
    }
    return obj;
  },

  create(base?: DeepPartial<DataSource>): DataSource {
    return DataSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataSource>): DataSource {
    const message = createBaseDataSource();
    message.service = object.service ?? 0;
    message.resource = object.resource ?? "";
    message.sourceEntry = object.sourceEntry ?? "";
    message.storageProperties = (object.storageProperties !== undefined && object.storageProperties !== null)
      ? StorageProperties.fromPartial(object.storageProperties)
      : undefined;
    return message;
  },
};

function createBaseStorageProperties(): StorageProperties {
  return { filePattern: [], fileType: "" };
}

export const StorageProperties: MessageFns<StorageProperties> = {
  encode(message: StorageProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.filePattern) {
      writer.uint32(10).string(v!);
    }
    if (message.fileType !== "") {
      writer.uint32(18).string(message.fileType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StorageProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStorageProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filePattern.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fileType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StorageProperties {
    return {
      filePattern: globalThis.Array.isArray(object?.filePattern)
        ? object.filePattern.map((e: any) => globalThis.String(e))
        : [],
      fileType: isSet(object.fileType) ? globalThis.String(object.fileType) : "",
    };
  },

  toJSON(message: StorageProperties): unknown {
    const obj: any = {};
    if (message.filePattern?.length) {
      obj.filePattern = message.filePattern;
    }
    if (message.fileType !== "") {
      obj.fileType = message.fileType;
    }
    return obj;
  },

  create(base?: DeepPartial<StorageProperties>): StorageProperties {
    return StorageProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StorageProperties>): StorageProperties {
    const message = createBaseStorageProperties();
    message.filePattern = object.filePattern?.map((e) => e) || [];
    message.fileType = object.fileType ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
