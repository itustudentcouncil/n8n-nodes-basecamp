// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datacatalog/v1beta1/usage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.datacatalog.v1beta1";

/**
 * Detailed counts on the entry's usage.
 * Caveats:
 * - Only BigQuery tables have usage stats
 * - The usage stats only include BigQuery query jobs
 * - The usage stats might be underestimated, e.g. wildcard table references
 * are not yet counted in usage computation
 * https://cloud.google.com/bigquery/docs/querying-wildcard-tables
 */
export interface UsageStats {
  /** The number of times that the underlying entry was successfully used. */
  totalCompletions: number;
  /**
   * The number of times that the underlying entry was attempted to be used
   * but failed.
   */
  totalFailures: number;
  /**
   * The number of times that the underlying entry was attempted to be used
   * but was cancelled by the user.
   */
  totalCancellations: number;
  /** Total time spent (in milliseconds) during uses the resulted in completions. */
  totalExecutionTimeForCompletionsMillis: number;
}

/** The set of all usage signals that we store in Data Catalog. */
export interface UsageSignal {
  /** The timestamp of the end of the usage statistics duration. */
  updateTime:
    | Date
    | undefined;
  /**
   * Usage statistics over each of the pre-defined time ranges, supported
   * strings for time ranges are {"24H", "7D", "30D"}.
   */
  usageWithinTimeRange: { [key: string]: UsageStats };
}

export interface UsageSignal_UsageWithinTimeRangeEntry {
  key: string;
  value: UsageStats | undefined;
}

function createBaseUsageStats(): UsageStats {
  return { totalCompletions: 0, totalFailures: 0, totalCancellations: 0, totalExecutionTimeForCompletionsMillis: 0 };
}

export const UsageStats: MessageFns<UsageStats> = {
  encode(message: UsageStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalCompletions !== 0) {
      writer.uint32(13).float(message.totalCompletions);
    }
    if (message.totalFailures !== 0) {
      writer.uint32(21).float(message.totalFailures);
    }
    if (message.totalCancellations !== 0) {
      writer.uint32(29).float(message.totalCancellations);
    }
    if (message.totalExecutionTimeForCompletionsMillis !== 0) {
      writer.uint32(37).float(message.totalExecutionTimeForCompletionsMillis);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.totalCompletions = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.totalFailures = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.totalCancellations = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.totalExecutionTimeForCompletionsMillis = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageStats {
    return {
      totalCompletions: isSet(object.totalCompletions) ? globalThis.Number(object.totalCompletions) : 0,
      totalFailures: isSet(object.totalFailures) ? globalThis.Number(object.totalFailures) : 0,
      totalCancellations: isSet(object.totalCancellations) ? globalThis.Number(object.totalCancellations) : 0,
      totalExecutionTimeForCompletionsMillis: isSet(object.totalExecutionTimeForCompletionsMillis)
        ? globalThis.Number(object.totalExecutionTimeForCompletionsMillis)
        : 0,
    };
  },

  toJSON(message: UsageStats): unknown {
    const obj: any = {};
    if (message.totalCompletions !== 0) {
      obj.totalCompletions = message.totalCompletions;
    }
    if (message.totalFailures !== 0) {
      obj.totalFailures = message.totalFailures;
    }
    if (message.totalCancellations !== 0) {
      obj.totalCancellations = message.totalCancellations;
    }
    if (message.totalExecutionTimeForCompletionsMillis !== 0) {
      obj.totalExecutionTimeForCompletionsMillis = message.totalExecutionTimeForCompletionsMillis;
    }
    return obj;
  },

  create(base?: DeepPartial<UsageStats>): UsageStats {
    return UsageStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageStats>): UsageStats {
    const message = createBaseUsageStats();
    message.totalCompletions = object.totalCompletions ?? 0;
    message.totalFailures = object.totalFailures ?? 0;
    message.totalCancellations = object.totalCancellations ?? 0;
    message.totalExecutionTimeForCompletionsMillis = object.totalExecutionTimeForCompletionsMillis ?? 0;
    return message;
  },
};

function createBaseUsageSignal(): UsageSignal {
  return { updateTime: undefined, usageWithinTimeRange: {} };
}

export const UsageSignal: MessageFns<UsageSignal> = {
  encode(message: UsageSignal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(10).fork()).join();
    }
    Object.entries(message.usageWithinTimeRange).forEach(([key, value]) => {
      UsageSignal_UsageWithinTimeRangeEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageSignal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageSignal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = UsageSignal_UsageWithinTimeRangeEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.usageWithinTimeRange[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageSignal {
    return {
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      usageWithinTimeRange: isObject(object.usageWithinTimeRange)
        ? Object.entries(object.usageWithinTimeRange).reduce<{ [key: string]: UsageStats }>((acc, [key, value]) => {
          acc[key] = UsageStats.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UsageSignal): unknown {
    const obj: any = {};
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.usageWithinTimeRange) {
      const entries = Object.entries(message.usageWithinTimeRange);
      if (entries.length > 0) {
        obj.usageWithinTimeRange = {};
        entries.forEach(([k, v]) => {
          obj.usageWithinTimeRange[k] = UsageStats.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<UsageSignal>): UsageSignal {
    return UsageSignal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageSignal>): UsageSignal {
    const message = createBaseUsageSignal();
    message.updateTime = object.updateTime ?? undefined;
    message.usageWithinTimeRange = Object.entries(object.usageWithinTimeRange ?? {}).reduce<
      { [key: string]: UsageStats }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = UsageStats.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseUsageSignal_UsageWithinTimeRangeEntry(): UsageSignal_UsageWithinTimeRangeEntry {
  return { key: "", value: undefined };
}

export const UsageSignal_UsageWithinTimeRangeEntry: MessageFns<UsageSignal_UsageWithinTimeRangeEntry> = {
  encode(message: UsageSignal_UsageWithinTimeRangeEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      UsageStats.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsageSignal_UsageWithinTimeRangeEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsageSignal_UsageWithinTimeRangeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = UsageStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsageSignal_UsageWithinTimeRangeEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? UsageStats.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UsageSignal_UsageWithinTimeRangeEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = UsageStats.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<UsageSignal_UsageWithinTimeRangeEntry>): UsageSignal_UsageWithinTimeRangeEntry {
    return UsageSignal_UsageWithinTimeRangeEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsageSignal_UsageWithinTimeRangeEntry>): UsageSignal_UsageWithinTimeRangeEntry {
    const message = createBaseUsageSignal_UsageWithinTimeRangeEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? UsageStats.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
