// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/memcache/v1/cloud_memcache.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Duration } from "../../../protobuf/duration.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DayOfWeek, dayOfWeekFromJSON, dayOfWeekToJSON } from "../../../type/dayofweek.js";
import { TimeOfDay } from "../../../type/timeofday.js";

export const protobufPackage = "google.cloud.memcache.v1";

/** Memcached versions supported by our service. */
export enum MemcacheVersion {
  MEMCACHE_VERSION_UNSPECIFIED = 0,
  /** MEMCACHE_1_5 - Memcached 1.5 version. */
  MEMCACHE_1_5 = 1,
  UNRECOGNIZED = -1,
}

export function memcacheVersionFromJSON(object: any): MemcacheVersion {
  switch (object) {
    case 0:
    case "MEMCACHE_VERSION_UNSPECIFIED":
      return MemcacheVersion.MEMCACHE_VERSION_UNSPECIFIED;
    case 1:
    case "MEMCACHE_1_5":
      return MemcacheVersion.MEMCACHE_1_5;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MemcacheVersion.UNRECOGNIZED;
  }
}

export function memcacheVersionToJSON(object: MemcacheVersion): string {
  switch (object) {
    case MemcacheVersion.MEMCACHE_VERSION_UNSPECIFIED:
      return "MEMCACHE_VERSION_UNSPECIFIED";
    case MemcacheVersion.MEMCACHE_1_5:
      return "MEMCACHE_1_5";
    case MemcacheVersion.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A Memorystore for Memcached instance */
export interface Instance {
  /**
   * Required. Unique name of the resource in this scope including project and
   * location using the form:
   *     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
   *
   * Note: Memcached instances are managed and addressed at the regional level
   * so `location_id` here refers to a Google Cloud region; however, users may
   * choose which zones Memcached nodes should be provisioned in within an
   * instance. Refer to [zones][google.cloud.memcache.v1.Instance.zones] field for more details.
   */
  name: string;
  /**
   * User provided name for the instance, which is only used for display
   * purposes. Cannot be more than 80 characters.
   */
  displayName: string;
  /**
   * Resource labels to represent user-provided metadata.
   * Refer to cloud documentation on labels for more details.
   * https://cloud.google.com/compute/docs/labeling-resources
   */
  labels: { [key: string]: string };
  /**
   * The full name of the Google Compute Engine
   * [network](/compute/docs/networks-and-firewalls#networks) to which the
   * instance is connected. If left unspecified, the `default` network
   * will be used.
   */
  authorizedNetwork: string;
  /**
   * Zones in which Memcached nodes should be provisioned.
   * Memcached nodes will be equally distributed across these zones. If not
   * provided, the service will by default create nodes in all zones in the
   * region for the instance.
   */
  zones: string[];
  /** Required. Number of nodes in the Memcached instance. */
  nodeCount: number;
  /** Required. Configuration for Memcached nodes. */
  nodeConfig:
    | Instance_NodeConfig
    | undefined;
  /**
   * The major version of Memcached software.
   * If not provided, latest supported version will be used. Currently the
   * latest supported major version is `MEMCACHE_1_5`.
   * The minor version will be automatically determined by our system based on
   * the latest supported minor version.
   */
  memcacheVersion: MemcacheVersion;
  /**
   * User defined parameters to apply to the memcached process
   * on each node.
   */
  parameters:
    | MemcacheParameters
    | undefined;
  /**
   * Output only. List of Memcached nodes.
   * Refer to [Node][google.cloud.memcache.v1.Instance.Node] message for more details.
   */
  memcacheNodes: Instance_Node[];
  /** Output only. The time the instance was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the instance was updated. */
  updateTime:
    | Date
    | undefined;
  /** Output only. The state of this Memcached instance. */
  state: Instance_State;
  /**
   * Output only. The full version of memcached server running on this instance.
   * System automatically determines the full memcached version for an instance
   * based on the input MemcacheVersion.
   * The full version format will be "memcached-1.5.16".
   */
  memcacheFullVersion: string;
  /** List of messages that describe the current state of the Memcached instance. */
  instanceMessages: Instance_InstanceMessage[];
  /** Output only. Endpoint for the Discovery API. */
  discoveryEndpoint: string;
  /**
   * The maintenance policy for the instance. If not provided,
   * the maintenance event will be performed based on Memorystore
   * internal rollout schedule.
   */
  maintenancePolicy:
    | MaintenancePolicy
    | undefined;
  /** Output only. Published maintenance schedule. */
  maintenanceSchedule: MaintenanceSchedule | undefined;
}

/** Different states of a Memcached instance. */
export enum Instance_State {
  /** STATE_UNSPECIFIED - State not set. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Memcached instance is being created. */
  CREATING = 1,
  /** READY - Memcached instance has been created and ready to be used. */
  READY = 2,
  /**
   * UPDATING - Memcached instance is updating configuration such as maintenance policy
   * and schedule.
   */
  UPDATING = 3,
  /** DELETING - Memcached instance is being deleted. */
  DELETING = 4,
  /** PERFORMING_MAINTENANCE - Memcached instance is going through maintenance, e.g. data plane rollout. */
  PERFORMING_MAINTENANCE = 5,
  UNRECOGNIZED = -1,
}

export function instance_StateFromJSON(object: any): Instance_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Instance_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Instance_State.CREATING;
    case 2:
    case "READY":
      return Instance_State.READY;
    case 3:
    case "UPDATING":
      return Instance_State.UPDATING;
    case 4:
    case "DELETING":
      return Instance_State.DELETING;
    case 5:
    case "PERFORMING_MAINTENANCE":
      return Instance_State.PERFORMING_MAINTENANCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Instance_State.UNRECOGNIZED;
  }
}

export function instance_StateToJSON(object: Instance_State): string {
  switch (object) {
    case Instance_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Instance_State.CREATING:
      return "CREATING";
    case Instance_State.READY:
      return "READY";
    case Instance_State.UPDATING:
      return "UPDATING";
    case Instance_State.DELETING:
      return "DELETING";
    case Instance_State.PERFORMING_MAINTENANCE:
      return "PERFORMING_MAINTENANCE";
    case Instance_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Configuration for a Memcached Node. */
export interface Instance_NodeConfig {
  /** Required. Number of cpus per Memcached node. */
  cpuCount: number;
  /** Required. Memory size in MiB for each Memcached node. */
  memorySizeMb: number;
}

export interface Instance_Node {
  /**
   * Output only. Identifier of the Memcached node. The node id does not
   * include project or location like the Memcached instance name.
   */
  nodeId: string;
  /** Output only. Location (GCP Zone) for the Memcached node. */
  zone: string;
  /** Output only. Current state of the Memcached node. */
  state: Instance_Node_State;
  /**
   * Output only. Hostname or IP address of the Memcached node used by the
   * clients to connect to the Memcached server on this node.
   */
  host: string;
  /** Output only. The port number of the Memcached server on this node. */
  port: number;
  /** User defined parameters currently applied to the node. */
  parameters: MemcacheParameters | undefined;
}

/** Different states of a Memcached node. */
export enum Instance_Node_State {
  /** STATE_UNSPECIFIED - Node state is not set. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Node is being created. */
  CREATING = 1,
  /** READY - Node has been created and ready to be used. */
  READY = 2,
  /** DELETING - Node is being deleted. */
  DELETING = 3,
  /** UPDATING - Node is being updated. */
  UPDATING = 4,
  UNRECOGNIZED = -1,
}

export function instance_Node_StateFromJSON(object: any): Instance_Node_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Instance_Node_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Instance_Node_State.CREATING;
    case 2:
    case "READY":
      return Instance_Node_State.READY;
    case 3:
    case "DELETING":
      return Instance_Node_State.DELETING;
    case 4:
    case "UPDATING":
      return Instance_Node_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Instance_Node_State.UNRECOGNIZED;
  }
}

export function instance_Node_StateToJSON(object: Instance_Node_State): string {
  switch (object) {
    case Instance_Node_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Instance_Node_State.CREATING:
      return "CREATING";
    case Instance_Node_State.READY:
      return "READY";
    case Instance_Node_State.DELETING:
      return "DELETING";
    case Instance_Node_State.UPDATING:
      return "UPDATING";
    case Instance_Node_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Instance_InstanceMessage {
  /** A code that correspond to one type of user-facing message. */
  code: Instance_InstanceMessage_Code;
  /** Message on memcached instance which will be exposed to users. */
  message: string;
}

export enum Instance_InstanceMessage_Code {
  /** CODE_UNSPECIFIED - Message Code not set. */
  CODE_UNSPECIFIED = 0,
  /** ZONE_DISTRIBUTION_UNBALANCED - Memcached nodes are distributed unevenly. */
  ZONE_DISTRIBUTION_UNBALANCED = 1,
  UNRECOGNIZED = -1,
}

export function instance_InstanceMessage_CodeFromJSON(object: any): Instance_InstanceMessage_Code {
  switch (object) {
    case 0:
    case "CODE_UNSPECIFIED":
      return Instance_InstanceMessage_Code.CODE_UNSPECIFIED;
    case 1:
    case "ZONE_DISTRIBUTION_UNBALANCED":
      return Instance_InstanceMessage_Code.ZONE_DISTRIBUTION_UNBALANCED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Instance_InstanceMessage_Code.UNRECOGNIZED;
  }
}

export function instance_InstanceMessage_CodeToJSON(object: Instance_InstanceMessage_Code): string {
  switch (object) {
    case Instance_InstanceMessage_Code.CODE_UNSPECIFIED:
      return "CODE_UNSPECIFIED";
    case Instance_InstanceMessage_Code.ZONE_DISTRIBUTION_UNBALANCED:
      return "ZONE_DISTRIBUTION_UNBALANCED";
    case Instance_InstanceMessage_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Instance_LabelsEntry {
  key: string;
  value: string;
}

/** Maintenance policy per instance. */
export interface MaintenancePolicy {
  /** Output only. The time when the policy was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the policy was updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Description of what this policy is for. Create/Update methods
   * return INVALID_ARGUMENT if the length is greater than 512.
   */
  description: string;
  /**
   * Required. Maintenance window that is applied to resources covered by this
   * policy. Minimum 1. For the current version, the maximum number of
   * weekly_maintenance_windows is expected to be one.
   */
  weeklyMaintenanceWindow: WeeklyMaintenanceWindow[];
}

/** Time window specified for weekly operations. */
export interface WeeklyMaintenanceWindow {
  /** Required. Allows to define schedule that runs specified day of the week. */
  day: DayOfWeek;
  /** Required. Start time of the window in UTC. */
  startTime:
    | TimeOfDay
    | undefined;
  /** Required. Duration of the time window. */
  duration: Duration | undefined;
}

/** Upcoming maintenance schedule. */
export interface MaintenanceSchedule {
  /** Output only. The start time of any upcoming scheduled maintenance for this instance. */
  startTime:
    | Date
    | undefined;
  /** Output only. The end time of any upcoming scheduled maintenance for this instance. */
  endTime:
    | Date
    | undefined;
  /**
   * Output only. The deadline that the maintenance schedule start time can not go beyond,
   * including reschedule.
   */
  scheduleDeadlineTime: Date | undefined;
}

/** Request for [RescheduleMaintenance][google.cloud.memcache.v1.CloudMemcache.RescheduleMaintenance]. */
export interface RescheduleMaintenanceRequest {
  /**
   * Required. Memcache instance resource name using the form:
   *     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
   * where `location_id` refers to a GCP region.
   */
  instance: string;
  /** Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as well. */
  rescheduleType: RescheduleMaintenanceRequest_RescheduleType;
  /**
   * Timestamp when the maintenance shall be rescheduled to if
   * reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for
   * example `2012-11-15T16:19:00.094Z`.
   */
  scheduleTime: Date | undefined;
}

/** Reschedule options. */
export enum RescheduleMaintenanceRequest_RescheduleType {
  /** RESCHEDULE_TYPE_UNSPECIFIED - Not set. */
  RESCHEDULE_TYPE_UNSPECIFIED = 0,
  /** IMMEDIATE - If the user wants to schedule the maintenance to happen now. */
  IMMEDIATE = 1,
  /**
   * NEXT_AVAILABLE_WINDOW - If the user wants to use the existing maintenance policy to find the
   * next available window.
   */
  NEXT_AVAILABLE_WINDOW = 2,
  /** SPECIFIC_TIME - If the user wants to reschedule the maintenance to a specific time. */
  SPECIFIC_TIME = 3,
  UNRECOGNIZED = -1,
}

export function rescheduleMaintenanceRequest_RescheduleTypeFromJSON(
  object: any,
): RescheduleMaintenanceRequest_RescheduleType {
  switch (object) {
    case 0:
    case "RESCHEDULE_TYPE_UNSPECIFIED":
      return RescheduleMaintenanceRequest_RescheduleType.RESCHEDULE_TYPE_UNSPECIFIED;
    case 1:
    case "IMMEDIATE":
      return RescheduleMaintenanceRequest_RescheduleType.IMMEDIATE;
    case 2:
    case "NEXT_AVAILABLE_WINDOW":
      return RescheduleMaintenanceRequest_RescheduleType.NEXT_AVAILABLE_WINDOW;
    case 3:
    case "SPECIFIC_TIME":
      return RescheduleMaintenanceRequest_RescheduleType.SPECIFIC_TIME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RescheduleMaintenanceRequest_RescheduleType.UNRECOGNIZED;
  }
}

export function rescheduleMaintenanceRequest_RescheduleTypeToJSON(
  object: RescheduleMaintenanceRequest_RescheduleType,
): string {
  switch (object) {
    case RescheduleMaintenanceRequest_RescheduleType.RESCHEDULE_TYPE_UNSPECIFIED:
      return "RESCHEDULE_TYPE_UNSPECIFIED";
    case RescheduleMaintenanceRequest_RescheduleType.IMMEDIATE:
      return "IMMEDIATE";
    case RescheduleMaintenanceRequest_RescheduleType.NEXT_AVAILABLE_WINDOW:
      return "NEXT_AVAILABLE_WINDOW";
    case RescheduleMaintenanceRequest_RescheduleType.SPECIFIC_TIME:
      return "SPECIFIC_TIME";
    case RescheduleMaintenanceRequest_RescheduleType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request for [ListInstances][google.cloud.memcache.v1.CloudMemcache.ListInstances]. */
export interface ListInstancesRequest {
  /**
   * Required. The resource name of the instance location using the form:
   *     `projects/{project_id}/locations/{location_id}`
   * where `location_id` refers to a GCP region
   */
  parent: string;
  /**
   * The maximum number of items to return.
   *
   * If not specified, a default value of 1000 will be used by the service.
   * Regardless of the `page_size` value, the response may include a partial
   * list and a caller should only rely on response's
   * [`next_page_token`][google.cloud.memcache.v1.ListInstancesResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /** The `next_page_token` value returned from a previous List request, if any. */
  pageToken: string;
  /**
   * List filter. For example, exclude all Memcached instances with name as
   * my-instance by specifying `"name != my-instance"`.
   */
  filter: string;
  /** Sort results. Supported values are "name", "name desc" or "" (unsorted). */
  orderBy: string;
}

/** Response for [ListInstances][google.cloud.memcache.v1.CloudMemcache.ListInstances]. */
export interface ListInstancesResponse {
  /**
   * A list of Memcached instances in the project in the specified location,
   * or across all locations.
   *
   * If the `location_id` in the parent field of the request is "-", all regions
   * available to the project are queried, and the results aggregated.
   */
  instances: Instance[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for [GetInstance][google.cloud.memcache.v1.CloudMemcache.GetInstance]. */
export interface GetInstanceRequest {
  /**
   * Required. Memcached instance resource name in the format:
   *     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
   * where `location_id` refers to a GCP region
   */
  name: string;
}

/** Request for [CreateInstance][google.cloud.memcache.v1.CloudMemcache.CreateInstance]. */
export interface CreateInstanceRequest {
  /**
   * Required. The resource name of the instance location using the form:
   *     `projects/{project_id}/locations/{location_id}`
   * where `location_id` refers to a GCP region
   */
  parent: string;
  /**
   * Required. The logical name of the Memcached instance in the user
   * project with the following restrictions:
   *
   * * Must contain only lowercase letters, numbers, and hyphens.
   * * Must start with a letter.
   * * Must be between 1-40 characters.
   * * Must end with a number or a letter.
   * * Must be unique within the user project / location.
   *
   * If any of the above are not met, the API raises an invalid argument error.
   */
  instanceId: string;
  /** Required. A Memcached Instance */
  instance: Instance | undefined;
}

/** Request for [UpdateInstance][google.cloud.memcache.v1.CloudMemcache.UpdateInstance]. */
export interface UpdateInstanceRequest {
  /**
   * Required. Mask of fields to update.
   *
   *  *   `displayName`
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. A Memcached Instance.
   * Only fields specified in update_mask are updated.
   */
  instance: Instance | undefined;
}

/** Request for [DeleteInstance][google.cloud.memcache.v1.CloudMemcache.DeleteInstance]. */
export interface DeleteInstanceRequest {
  /**
   * Required. Memcached instance resource name in the format:
   *     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
   * where `location_id` refers to a GCP region
   */
  name: string;
}

/** Request for [ApplyParameters][google.cloud.memcache.v1.CloudMemcache.ApplyParameters]. */
export interface ApplyParametersRequest {
  /**
   * Required. Resource name of the Memcached instance for which parameter group updates
   * should be applied.
   */
  name: string;
  /** Nodes to which the instance-level parameter group is applied. */
  nodeIds: string[];
  /**
   * Whether to apply instance-level parameter group to all nodes. If set to
   * true, users are restricted from specifying individual nodes, and
   * `ApplyParameters` updates all nodes within the instance.
   */
  applyAll: boolean;
}

/** Request for [UpdateParameters][google.cloud.memcache.v1.CloudMemcache.UpdateParameters]. */
export interface UpdateParametersRequest {
  /**
   * Required. Resource name of the Memcached instance for which the parameters should be
   * updated.
   */
  name: string;
  /** Required. Mask of fields to update. */
  updateMask:
    | string[]
    | undefined;
  /** The parameters to apply to the instance. */
  parameters: MemcacheParameters | undefined;
}

export interface MemcacheParameters {
  /**
   * Output only. The unique ID associated with this set of parameters. Users
   * can use this id to determine if the parameters associated with the instance
   * differ from the parameters associated with the nodes. A discrepancy between
   * parameter ids can inform users that they may need to take action to apply
   * parameters on nodes.
   */
  id: string;
  /** User defined set of parameters to use in the memcached process. */
  params: { [key: string]: string };
}

export interface MemcacheParameters_ParamsEntry {
  key: string;
  value: string;
}

/** Represents the metadata of a long-running operation. */
export interface OperationMetadata {
  /** Output only. Time when the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusDetail: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   */
  cancelRequested: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

/** Metadata for the given [google.cloud.location.Location][google.cloud.location.Location]. */
export interface LocationMetadata {
  /**
   * Output only. The set of available zones in the location. The map is keyed
   * by the lowercase ID of each zone, as defined by GCE. These keys can be
   * specified in the `zones` field when creating a Memcached instance.
   */
  availableZones: { [key: string]: ZoneMetadata };
}

export interface LocationMetadata_AvailableZonesEntry {
  key: string;
  value: ZoneMetadata | undefined;
}

export interface ZoneMetadata {
}

function createBaseInstance(): Instance {
  return {
    name: "",
    displayName: "",
    labels: {},
    authorizedNetwork: "",
    zones: [],
    nodeCount: 0,
    nodeConfig: undefined,
    memcacheVersion: 0,
    parameters: undefined,
    memcacheNodes: [],
    createTime: undefined,
    updateTime: undefined,
    state: 0,
    memcacheFullVersion: "",
    instanceMessages: [],
    discoveryEndpoint: "",
    maintenancePolicy: undefined,
    maintenanceSchedule: undefined,
  };
}

export const Instance: MessageFns<Instance> = {
  encode(message: Instance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Instance_LabelsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.authorizedNetwork !== "") {
      writer.uint32(34).string(message.authorizedNetwork);
    }
    for (const v of message.zones) {
      writer.uint32(42).string(v!);
    }
    if (message.nodeCount !== 0) {
      writer.uint32(48).int32(message.nodeCount);
    }
    if (message.nodeConfig !== undefined) {
      Instance_NodeConfig.encode(message.nodeConfig, writer.uint32(58).fork()).join();
    }
    if (message.memcacheVersion !== 0) {
      writer.uint32(72).int32(message.memcacheVersion);
    }
    if (message.parameters !== undefined) {
      MemcacheParameters.encode(message.parameters, writer.uint32(90).fork()).join();
    }
    for (const v of message.memcacheNodes) {
      Instance_Node.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(106).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(114).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(120).int32(message.state);
    }
    if (message.memcacheFullVersion !== "") {
      writer.uint32(146).string(message.memcacheFullVersion);
    }
    for (const v of message.instanceMessages) {
      Instance_InstanceMessage.encode(v!, writer.uint32(154).fork()).join();
    }
    if (message.discoveryEndpoint !== "") {
      writer.uint32(162).string(message.discoveryEndpoint);
    }
    if (message.maintenancePolicy !== undefined) {
      MaintenancePolicy.encode(message.maintenancePolicy, writer.uint32(170).fork()).join();
    }
    if (message.maintenanceSchedule !== undefined) {
      MaintenanceSchedule.encode(message.maintenanceSchedule, writer.uint32(178).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = Instance_LabelsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.labels[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.authorizedNetwork = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.zones.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.nodeCount = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.nodeConfig = Instance_NodeConfig.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.memcacheVersion = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.parameters = MemcacheParameters.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.memcacheNodes.push(Instance_Node.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.memcacheFullVersion = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.instanceMessages.push(Instance_InstanceMessage.decode(reader, reader.uint32()));
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.discoveryEndpoint = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.maintenancePolicy = MaintenancePolicy.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.maintenanceSchedule = MaintenanceSchedule.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      authorizedNetwork: isSet(object.authorizedNetwork) ? globalThis.String(object.authorizedNetwork) : "",
      zones: globalThis.Array.isArray(object?.zones) ? object.zones.map((e: any) => globalThis.String(e)) : [],
      nodeCount: isSet(object.nodeCount) ? globalThis.Number(object.nodeCount) : 0,
      nodeConfig: isSet(object.nodeConfig) ? Instance_NodeConfig.fromJSON(object.nodeConfig) : undefined,
      memcacheVersion: isSet(object.memcacheVersion) ? memcacheVersionFromJSON(object.memcacheVersion) : 0,
      parameters: isSet(object.parameters) ? MemcacheParameters.fromJSON(object.parameters) : undefined,
      memcacheNodes: globalThis.Array.isArray(object?.memcacheNodes)
        ? object.memcacheNodes.map((e: any) => Instance_Node.fromJSON(e))
        : [],
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      state: isSet(object.state) ? instance_StateFromJSON(object.state) : 0,
      memcacheFullVersion: isSet(object.memcacheFullVersion) ? globalThis.String(object.memcacheFullVersion) : "",
      instanceMessages: globalThis.Array.isArray(object?.instanceMessages)
        ? object.instanceMessages.map((e: any) => Instance_InstanceMessage.fromJSON(e))
        : [],
      discoveryEndpoint: isSet(object.discoveryEndpoint) ? globalThis.String(object.discoveryEndpoint) : "",
      maintenancePolicy: isSet(object.maintenancePolicy)
        ? MaintenancePolicy.fromJSON(object.maintenancePolicy)
        : undefined,
      maintenanceSchedule: isSet(object.maintenanceSchedule)
        ? MaintenanceSchedule.fromJSON(object.maintenanceSchedule)
        : undefined,
    };
  },

  toJSON(message: Instance): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.authorizedNetwork !== "") {
      obj.authorizedNetwork = message.authorizedNetwork;
    }
    if (message.zones?.length) {
      obj.zones = message.zones;
    }
    if (message.nodeCount !== 0) {
      obj.nodeCount = Math.round(message.nodeCount);
    }
    if (message.nodeConfig !== undefined) {
      obj.nodeConfig = Instance_NodeConfig.toJSON(message.nodeConfig);
    }
    if (message.memcacheVersion !== 0) {
      obj.memcacheVersion = memcacheVersionToJSON(message.memcacheVersion);
    }
    if (message.parameters !== undefined) {
      obj.parameters = MemcacheParameters.toJSON(message.parameters);
    }
    if (message.memcacheNodes?.length) {
      obj.memcacheNodes = message.memcacheNodes.map((e) => Instance_Node.toJSON(e));
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = instance_StateToJSON(message.state);
    }
    if (message.memcacheFullVersion !== "") {
      obj.memcacheFullVersion = message.memcacheFullVersion;
    }
    if (message.instanceMessages?.length) {
      obj.instanceMessages = message.instanceMessages.map((e) => Instance_InstanceMessage.toJSON(e));
    }
    if (message.discoveryEndpoint !== "") {
      obj.discoveryEndpoint = message.discoveryEndpoint;
    }
    if (message.maintenancePolicy !== undefined) {
      obj.maintenancePolicy = MaintenancePolicy.toJSON(message.maintenancePolicy);
    }
    if (message.maintenanceSchedule !== undefined) {
      obj.maintenanceSchedule = MaintenanceSchedule.toJSON(message.maintenanceSchedule);
    }
    return obj;
  },

  create(base?: DeepPartial<Instance>): Instance {
    return Instance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Instance>): Instance {
    const message = createBaseInstance();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.authorizedNetwork = object.authorizedNetwork ?? "";
    message.zones = object.zones?.map((e) => e) || [];
    message.nodeCount = object.nodeCount ?? 0;
    message.nodeConfig = (object.nodeConfig !== undefined && object.nodeConfig !== null)
      ? Instance_NodeConfig.fromPartial(object.nodeConfig)
      : undefined;
    message.memcacheVersion = object.memcacheVersion ?? 0;
    message.parameters = (object.parameters !== undefined && object.parameters !== null)
      ? MemcacheParameters.fromPartial(object.parameters)
      : undefined;
    message.memcacheNodes = object.memcacheNodes?.map((e) => Instance_Node.fromPartial(e)) || [];
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.state = object.state ?? 0;
    message.memcacheFullVersion = object.memcacheFullVersion ?? "";
    message.instanceMessages = object.instanceMessages?.map((e) => Instance_InstanceMessage.fromPartial(e)) || [];
    message.discoveryEndpoint = object.discoveryEndpoint ?? "";
    message.maintenancePolicy = (object.maintenancePolicy !== undefined && object.maintenancePolicy !== null)
      ? MaintenancePolicy.fromPartial(object.maintenancePolicy)
      : undefined;
    message.maintenanceSchedule = (object.maintenanceSchedule !== undefined && object.maintenanceSchedule !== null)
      ? MaintenanceSchedule.fromPartial(object.maintenanceSchedule)
      : undefined;
    return message;
  },
};

function createBaseInstance_NodeConfig(): Instance_NodeConfig {
  return { cpuCount: 0, memorySizeMb: 0 };
}

export const Instance_NodeConfig: MessageFns<Instance_NodeConfig> = {
  encode(message: Instance_NodeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpuCount !== 0) {
      writer.uint32(8).int32(message.cpuCount);
    }
    if (message.memorySizeMb !== 0) {
      writer.uint32(16).int32(message.memorySizeMb);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance_NodeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance_NodeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.cpuCount = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.memorySizeMb = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance_NodeConfig {
    return {
      cpuCount: isSet(object.cpuCount) ? globalThis.Number(object.cpuCount) : 0,
      memorySizeMb: isSet(object.memorySizeMb) ? globalThis.Number(object.memorySizeMb) : 0,
    };
  },

  toJSON(message: Instance_NodeConfig): unknown {
    const obj: any = {};
    if (message.cpuCount !== 0) {
      obj.cpuCount = Math.round(message.cpuCount);
    }
    if (message.memorySizeMb !== 0) {
      obj.memorySizeMb = Math.round(message.memorySizeMb);
    }
    return obj;
  },

  create(base?: DeepPartial<Instance_NodeConfig>): Instance_NodeConfig {
    return Instance_NodeConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Instance_NodeConfig>): Instance_NodeConfig {
    const message = createBaseInstance_NodeConfig();
    message.cpuCount = object.cpuCount ?? 0;
    message.memorySizeMb = object.memorySizeMb ?? 0;
    return message;
  },
};

function createBaseInstance_Node(): Instance_Node {
  return { nodeId: "", zone: "", state: 0, host: "", port: 0, parameters: undefined };
}

export const Instance_Node: MessageFns<Instance_Node> = {
  encode(message: Instance_Node, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeId !== "") {
      writer.uint32(10).string(message.nodeId);
    }
    if (message.zone !== "") {
      writer.uint32(18).string(message.zone);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.host !== "") {
      writer.uint32(34).string(message.host);
    }
    if (message.port !== 0) {
      writer.uint32(40).int32(message.port);
    }
    if (message.parameters !== undefined) {
      MemcacheParameters.encode(message.parameters, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance_Node {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance_Node();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nodeId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.zone = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.host = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.port = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.parameters = MemcacheParameters.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance_Node {
    return {
      nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      state: isSet(object.state) ? instance_Node_StateFromJSON(object.state) : 0,
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
      parameters: isSet(object.parameters) ? MemcacheParameters.fromJSON(object.parameters) : undefined,
    };
  },

  toJSON(message: Instance_Node): unknown {
    const obj: any = {};
    if (message.nodeId !== "") {
      obj.nodeId = message.nodeId;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.state !== 0) {
      obj.state = instance_Node_StateToJSON(message.state);
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    if (message.parameters !== undefined) {
      obj.parameters = MemcacheParameters.toJSON(message.parameters);
    }
    return obj;
  },

  create(base?: DeepPartial<Instance_Node>): Instance_Node {
    return Instance_Node.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Instance_Node>): Instance_Node {
    const message = createBaseInstance_Node();
    message.nodeId = object.nodeId ?? "";
    message.zone = object.zone ?? "";
    message.state = object.state ?? 0;
    message.host = object.host ?? "";
    message.port = object.port ?? 0;
    message.parameters = (object.parameters !== undefined && object.parameters !== null)
      ? MemcacheParameters.fromPartial(object.parameters)
      : undefined;
    return message;
  },
};

function createBaseInstance_InstanceMessage(): Instance_InstanceMessage {
  return { code: 0, message: "" };
}

export const Instance_InstanceMessage: MessageFns<Instance_InstanceMessage> = {
  encode(message: Instance_InstanceMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance_InstanceMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance_InstanceMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance_InstanceMessage {
    return {
      code: isSet(object.code) ? instance_InstanceMessage_CodeFromJSON(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: Instance_InstanceMessage): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = instance_InstanceMessage_CodeToJSON(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<Instance_InstanceMessage>): Instance_InstanceMessage {
    return Instance_InstanceMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Instance_InstanceMessage>): Instance_InstanceMessage {
    const message = createBaseInstance_InstanceMessage();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseInstance_LabelsEntry(): Instance_LabelsEntry {
  return { key: "", value: "" };
}

export const Instance_LabelsEntry: MessageFns<Instance_LabelsEntry> = {
  encode(message: Instance_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Instance_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstance_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Instance_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Instance_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Instance_LabelsEntry>): Instance_LabelsEntry {
    return Instance_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Instance_LabelsEntry>): Instance_LabelsEntry {
    const message = createBaseInstance_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMaintenancePolicy(): MaintenancePolicy {
  return { createTime: undefined, updateTime: undefined, description: "", weeklyMaintenanceWindow: [] };
}

export const MaintenancePolicy: MessageFns<MaintenancePolicy> = {
  encode(message: MaintenancePolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(18).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.weeklyMaintenanceWindow) {
      WeeklyMaintenanceWindow.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MaintenancePolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaintenancePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.weeklyMaintenanceWindow.push(WeeklyMaintenanceWindow.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MaintenancePolicy {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      weeklyMaintenanceWindow: globalThis.Array.isArray(object?.weeklyMaintenanceWindow)
        ? object.weeklyMaintenanceWindow.map((e: any) => WeeklyMaintenanceWindow.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MaintenancePolicy): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.weeklyMaintenanceWindow?.length) {
      obj.weeklyMaintenanceWindow = message.weeklyMaintenanceWindow.map((e) => WeeklyMaintenanceWindow.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MaintenancePolicy>): MaintenancePolicy {
    return MaintenancePolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MaintenancePolicy>): MaintenancePolicy {
    const message = createBaseMaintenancePolicy();
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.weeklyMaintenanceWindow =
      object.weeklyMaintenanceWindow?.map((e) => WeeklyMaintenanceWindow.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWeeklyMaintenanceWindow(): WeeklyMaintenanceWindow {
  return { day: 0, startTime: undefined, duration: undefined };
}

export const WeeklyMaintenanceWindow: MessageFns<WeeklyMaintenanceWindow> = {
  encode(message: WeeklyMaintenanceWindow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.day !== 0) {
      writer.uint32(8).int32(message.day);
    }
    if (message.startTime !== undefined) {
      TimeOfDay.encode(message.startTime, writer.uint32(18).fork()).join();
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeeklyMaintenanceWindow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeeklyMaintenanceWindow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.day = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startTime = TimeOfDay.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeeklyMaintenanceWindow {
    return {
      day: isSet(object.day) ? dayOfWeekFromJSON(object.day) : 0,
      startTime: isSet(object.startTime) ? TimeOfDay.fromJSON(object.startTime) : undefined,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
    };
  },

  toJSON(message: WeeklyMaintenanceWindow): unknown {
    const obj: any = {};
    if (message.day !== 0) {
      obj.day = dayOfWeekToJSON(message.day);
    }
    if (message.startTime !== undefined) {
      obj.startTime = TimeOfDay.toJSON(message.startTime);
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    return obj;
  },

  create(base?: DeepPartial<WeeklyMaintenanceWindow>): WeeklyMaintenanceWindow {
    return WeeklyMaintenanceWindow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WeeklyMaintenanceWindow>): WeeklyMaintenanceWindow {
    const message = createBaseWeeklyMaintenanceWindow();
    message.day = object.day ?? 0;
    message.startTime = (object.startTime !== undefined && object.startTime !== null)
      ? TimeOfDay.fromPartial(object.startTime)
      : undefined;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    return message;
  },
};

function createBaseMaintenanceSchedule(): MaintenanceSchedule {
  return { startTime: undefined, endTime: undefined, scheduleDeadlineTime: undefined };
}

export const MaintenanceSchedule: MessageFns<MaintenanceSchedule> = {
  encode(message: MaintenanceSchedule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.scheduleDeadlineTime !== undefined) {
      Timestamp.encode(toTimestamp(message.scheduleDeadlineTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MaintenanceSchedule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaintenanceSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scheduleDeadlineTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MaintenanceSchedule {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      scheduleDeadlineTime: isSet(object.scheduleDeadlineTime)
        ? fromJsonTimestamp(object.scheduleDeadlineTime)
        : undefined,
    };
  },

  toJSON(message: MaintenanceSchedule): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.scheduleDeadlineTime !== undefined) {
      obj.scheduleDeadlineTime = message.scheduleDeadlineTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<MaintenanceSchedule>): MaintenanceSchedule {
    return MaintenanceSchedule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MaintenanceSchedule>): MaintenanceSchedule {
    const message = createBaseMaintenanceSchedule();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.scheduleDeadlineTime = object.scheduleDeadlineTime ?? undefined;
    return message;
  },
};

function createBaseRescheduleMaintenanceRequest(): RescheduleMaintenanceRequest {
  return { instance: "", rescheduleType: 0, scheduleTime: undefined };
}

export const RescheduleMaintenanceRequest: MessageFns<RescheduleMaintenanceRequest> = {
  encode(message: RescheduleMaintenanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.rescheduleType !== 0) {
      writer.uint32(16).int32(message.rescheduleType);
    }
    if (message.scheduleTime !== undefined) {
      Timestamp.encode(toTimestamp(message.scheduleTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RescheduleMaintenanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRescheduleMaintenanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.rescheduleType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.scheduleTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RescheduleMaintenanceRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      rescheduleType: isSet(object.rescheduleType)
        ? rescheduleMaintenanceRequest_RescheduleTypeFromJSON(object.rescheduleType)
        : 0,
      scheduleTime: isSet(object.scheduleTime) ? fromJsonTimestamp(object.scheduleTime) : undefined,
    };
  },

  toJSON(message: RescheduleMaintenanceRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.rescheduleType !== 0) {
      obj.rescheduleType = rescheduleMaintenanceRequest_RescheduleTypeToJSON(message.rescheduleType);
    }
    if (message.scheduleTime !== undefined) {
      obj.scheduleTime = message.scheduleTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<RescheduleMaintenanceRequest>): RescheduleMaintenanceRequest {
    return RescheduleMaintenanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RescheduleMaintenanceRequest>): RescheduleMaintenanceRequest {
    const message = createBaseRescheduleMaintenanceRequest();
    message.instance = object.instance ?? "";
    message.rescheduleType = object.rescheduleType ?? 0;
    message.scheduleTime = object.scheduleTime ?? undefined;
    return message;
  },
};

function createBaseListInstancesRequest(): ListInstancesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListInstancesRequest: MessageFns<ListInstancesRequest> = {
  encode(message: ListInstancesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstancesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstancesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListInstancesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstancesRequest>): ListInstancesRequest {
    return ListInstancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstancesRequest>): ListInstancesRequest {
    const message = createBaseListInstancesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListInstancesResponse(): ListInstancesResponse {
  return { instances: [], nextPageToken: "", unreachable: [] };
}

export const ListInstancesResponse: MessageFns<ListInstancesResponse> = {
  encode(message: ListInstancesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.instances) {
      Instance.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstancesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instances.push(Instance.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstancesResponse {
    return {
      instances: globalThis.Array.isArray(object?.instances)
        ? object.instances.map((e: any) => Instance.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListInstancesResponse): unknown {
    const obj: any = {};
    if (message.instances?.length) {
      obj.instances = message.instances.map((e) => Instance.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstancesResponse>): ListInstancesResponse {
    return ListInstancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstancesResponse>): ListInstancesResponse {
    const message = createBaseListInstancesResponse();
    message.instances = object.instances?.map((e) => Instance.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetInstanceRequest(): GetInstanceRequest {
  return { name: "" };
}

export const GetInstanceRequest: MessageFns<GetInstanceRequest> = {
  encode(message: GetInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInstanceRequest>): GetInstanceRequest {
    return GetInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInstanceRequest>): GetInstanceRequest {
    const message = createBaseGetInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateInstanceRequest(): CreateInstanceRequest {
  return { parent: "", instanceId: "", instance: undefined };
}

export const CreateInstanceRequest: MessageFns<CreateInstanceRequest> = {
  encode(message: CreateInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    if (message.instance !== undefined) {
      Instance.encode(message.instance, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.instance = Instance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInstanceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
    };
  },

  toJSON(message: CreateInstanceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.instance !== undefined) {
      obj.instance = Instance.toJSON(message.instance);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateInstanceRequest>): CreateInstanceRequest {
    return CreateInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateInstanceRequest>): CreateInstanceRequest {
    const message = createBaseCreateInstanceRequest();
    message.parent = object.parent ?? "";
    message.instanceId = object.instanceId ?? "";
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? Instance.fromPartial(object.instance)
      : undefined;
    return message;
  },
};

function createBaseUpdateInstanceRequest(): UpdateInstanceRequest {
  return { updateMask: undefined, instance: undefined };
}

export const UpdateInstanceRequest: MessageFns<UpdateInstanceRequest> = {
  encode(message: UpdateInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.instance !== undefined) {
      Instance.encode(message.instance, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instance = Instance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInstanceRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
    };
  },

  toJSON(message: UpdateInstanceRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.instance !== undefined) {
      obj.instance = Instance.toJSON(message.instance);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateInstanceRequest>): UpdateInstanceRequest {
    return UpdateInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateInstanceRequest>): UpdateInstanceRequest {
    const message = createBaseUpdateInstanceRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.instance = (object.instance !== undefined && object.instance !== null)
      ? Instance.fromPartial(object.instance)
      : undefined;
    return message;
  },
};

function createBaseDeleteInstanceRequest(): DeleteInstanceRequest {
  return { name: "" };
}

export const DeleteInstanceRequest: MessageFns<DeleteInstanceRequest> = {
  encode(message: DeleteInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteInstanceRequest>): DeleteInstanceRequest {
    return DeleteInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteInstanceRequest>): DeleteInstanceRequest {
    const message = createBaseDeleteInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseApplyParametersRequest(): ApplyParametersRequest {
  return { name: "", nodeIds: [], applyAll: false };
}

export const ApplyParametersRequest: MessageFns<ApplyParametersRequest> = {
  encode(message: ApplyParametersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.nodeIds) {
      writer.uint32(18).string(v!);
    }
    if (message.applyAll !== false) {
      writer.uint32(24).bool(message.applyAll);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplyParametersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplyParametersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nodeIds.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.applyAll = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplyParametersRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      nodeIds: globalThis.Array.isArray(object?.nodeIds) ? object.nodeIds.map((e: any) => globalThis.String(e)) : [],
      applyAll: isSet(object.applyAll) ? globalThis.Boolean(object.applyAll) : false,
    };
  },

  toJSON(message: ApplyParametersRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.nodeIds?.length) {
      obj.nodeIds = message.nodeIds;
    }
    if (message.applyAll !== false) {
      obj.applyAll = message.applyAll;
    }
    return obj;
  },

  create(base?: DeepPartial<ApplyParametersRequest>): ApplyParametersRequest {
    return ApplyParametersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApplyParametersRequest>): ApplyParametersRequest {
    const message = createBaseApplyParametersRequest();
    message.name = object.name ?? "";
    message.nodeIds = object.nodeIds?.map((e) => e) || [];
    message.applyAll = object.applyAll ?? false;
    return message;
  },
};

function createBaseUpdateParametersRequest(): UpdateParametersRequest {
  return { name: "", updateMask: undefined, parameters: undefined };
}

export const UpdateParametersRequest: MessageFns<UpdateParametersRequest> = {
  encode(message: UpdateParametersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.parameters !== undefined) {
      MemcacheParameters.encode(message.parameters, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateParametersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateParametersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parameters = MemcacheParameters.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateParametersRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      parameters: isSet(object.parameters) ? MemcacheParameters.fromJSON(object.parameters) : undefined,
    };
  },

  toJSON(message: UpdateParametersRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.parameters !== undefined) {
      obj.parameters = MemcacheParameters.toJSON(message.parameters);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateParametersRequest>): UpdateParametersRequest {
    return UpdateParametersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateParametersRequest>): UpdateParametersRequest {
    const message = createBaseUpdateParametersRequest();
    message.name = object.name ?? "";
    message.updateMask = object.updateMask ?? undefined;
    message.parameters = (object.parameters !== undefined && object.parameters !== null)
      ? MemcacheParameters.fromPartial(object.parameters)
      : undefined;
    return message;
  },
};

function createBaseMemcacheParameters(): MemcacheParameters {
  return { id: "", params: {} };
}

export const MemcacheParameters: MessageFns<MemcacheParameters> = {
  encode(message: MemcacheParameters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    Object.entries(message.params).forEach(([key, value]) => {
      MemcacheParameters_ParamsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MemcacheParameters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemcacheParameters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = MemcacheParameters_ParamsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.params[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MemcacheParameters {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      params: isObject(object.params)
        ? Object.entries(object.params).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: MemcacheParameters): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.params) {
      const entries = Object.entries(message.params);
      if (entries.length > 0) {
        obj.params = {};
        entries.forEach(([k, v]) => {
          obj.params[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<MemcacheParameters>): MemcacheParameters {
    return MemcacheParameters.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MemcacheParameters>): MemcacheParameters {
    const message = createBaseMemcacheParameters();
    message.id = object.id ?? "";
    message.params = Object.entries(object.params ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseMemcacheParameters_ParamsEntry(): MemcacheParameters_ParamsEntry {
  return { key: "", value: "" };
}

export const MemcacheParameters_ParamsEntry: MessageFns<MemcacheParameters_ParamsEntry> = {
  encode(message: MemcacheParameters_ParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MemcacheParameters_ParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemcacheParameters_ParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MemcacheParameters_ParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MemcacheParameters_ParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<MemcacheParameters_ParamsEntry>): MemcacheParameters_ParamsEntry {
    return MemcacheParameters_ParamsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MemcacheParameters_ParamsEntry>): MemcacheParameters_ParamsEntry {
    const message = createBaseMemcacheParameters_ParamsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusDetail: "",
    cancelRequested: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusDetail !== "") {
      writer.uint32(42).string(message.statusDetail);
    }
    if (message.cancelRequested !== false) {
      writer.uint32(48).bool(message.cancelRequested);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusDetail = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.cancelRequested = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusDetail: isSet(object.statusDetail) ? globalThis.String(object.statusDetail) : "",
      cancelRequested: isSet(object.cancelRequested) ? globalThis.Boolean(object.cancelRequested) : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusDetail !== "") {
      obj.statusDetail = message.statusDetail;
    }
    if (message.cancelRequested !== false) {
      obj.cancelRequested = message.cancelRequested;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusDetail = object.statusDetail ?? "";
    message.cancelRequested = object.cancelRequested ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

function createBaseLocationMetadata(): LocationMetadata {
  return { availableZones: {} };
}

export const LocationMetadata: MessageFns<LocationMetadata> = {
  encode(message: LocationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.availableZones).forEach(([key, value]) => {
      LocationMetadata_AvailableZonesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = LocationMetadata_AvailableZonesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.availableZones[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationMetadata {
    return {
      availableZones: isObject(object.availableZones)
        ? Object.entries(object.availableZones).reduce<{ [key: string]: ZoneMetadata }>((acc, [key, value]) => {
          acc[key] = ZoneMetadata.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: LocationMetadata): unknown {
    const obj: any = {};
    if (message.availableZones) {
      const entries = Object.entries(message.availableZones);
      if (entries.length > 0) {
        obj.availableZones = {};
        entries.forEach(([k, v]) => {
          obj.availableZones[k] = ZoneMetadata.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<LocationMetadata>): LocationMetadata {
    return LocationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocationMetadata>): LocationMetadata {
    const message = createBaseLocationMetadata();
    message.availableZones = Object.entries(object.availableZones ?? {}).reduce<{ [key: string]: ZoneMetadata }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ZoneMetadata.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseLocationMetadata_AvailableZonesEntry(): LocationMetadata_AvailableZonesEntry {
  return { key: "", value: undefined };
}

export const LocationMetadata_AvailableZonesEntry: MessageFns<LocationMetadata_AvailableZonesEntry> = {
  encode(message: LocationMetadata_AvailableZonesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ZoneMetadata.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationMetadata_AvailableZonesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationMetadata_AvailableZonesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ZoneMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationMetadata_AvailableZonesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ZoneMetadata.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: LocationMetadata_AvailableZonesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ZoneMetadata.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<LocationMetadata_AvailableZonesEntry>): LocationMetadata_AvailableZonesEntry {
    return LocationMetadata_AvailableZonesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LocationMetadata_AvailableZonesEntry>): LocationMetadata_AvailableZonesEntry {
    const message = createBaseLocationMetadata_AvailableZonesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ZoneMetadata.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseZoneMetadata(): ZoneMetadata {
  return {};
}

export const ZoneMetadata: MessageFns<ZoneMetadata> = {
  encode(_: ZoneMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZoneMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoneMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ZoneMetadata {
    return {};
  },

  toJSON(_: ZoneMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ZoneMetadata>): ZoneMetadata {
    return ZoneMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ZoneMetadata>): ZoneMetadata {
    const message = createBaseZoneMetadata();
    return message;
  },
};

/**
 * Configures and manages Cloud Memorystore for Memcached instances.
 *
 * The `memcache.googleapis.com` service implements the Google Cloud Memorystore
 * for Memcached API and defines the following resource model for managing
 * Memorystore Memcached (also called Memcached below) instances:
 * * The service works with a collection of cloud projects, named: `/projects/*`
 * * Each project has a collection of available locations, named: `/locations/*`
 * * Each location has a collection of Memcached instances, named:
 * `/instances/*`
 * * As such, Memcached instances are resources of the form:
 *   `/projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *
 * Note that location_id must be a GCP `region`; for example:
 * * `projects/my-memcached-project/locations/us-central1/instances/my-memcached`
 */
export type CloudMemcacheDefinition = typeof CloudMemcacheDefinition;
export const CloudMemcacheDefinition = {
  name: "CloudMemcache",
  fullName: "google.cloud.memcache.v1.CloudMemcache",
  methods: {
    /** Lists Instances in a given location. */
    listInstances: {
      name: "ListInstances",
      requestType: ListInstancesRequest,
      requestStream: false,
      responseType: ListInstancesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Instance. */
    getInstance: {
      name: "GetInstance",
      requestType: GetInstanceRequest,
      requestStream: false,
      responseType: Instance,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Instance in a given location. */
    createInstance: {
      name: "CreateInstance",
      requestType: CreateInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              79,
              10,
              33,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              42,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              44,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              8,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an existing Instance in a given project and location. */
    updateInstance: {
      name: "UpdateInstance",
      requestType: UpdateInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              79,
              10,
              33,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              42,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              8,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              50,
              54,
              47,
              118,
              49,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the defined Memcached parameters for an existing instance.
     * This method only stages the parameters, it must be followed by
     * `ApplyParameters` to apply the parameters to nodes of the Memcached
     * instance.
     */
    updateParameters: {
      name: "UpdateParameters",
      requestType: UpdateParametersRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              79,
              10,
              33,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              42,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              110,
              97,
              109,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
              44,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              1,
              42,
              50,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              100,
              97,
              116,
              101,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Instance. */
    deleteInstance: {
      name: "DeleteInstance",
      requestType: DeleteInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              67,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              42,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              42,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * `ApplyParameters` restarts the set of specified nodes in order to update
     * them to the current set of parameters for the Memcached Instance.
     */
    applyParameters: {
      name: "ApplyParameters",
      requestType: ApplyParametersRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              79,
              10,
              33,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              42,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              110,
              97,
              109,
              101,
              44,
              110,
              111,
              100,
              101,
              95,
              105,
              100,
              115,
              44,
              97,
              112,
              112,
              108,
              121,
              95,
              97,
              108,
              108,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              97,
              112,
              112,
              108,
              121,
              80,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Reschedules upcoming maintenance event. */
    rescheduleMaintenance: {
      name: "RescheduleMaintenance",
      requestType: RescheduleMaintenanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              79,
              10,
              33,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              42,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              109,
              101,
              109,
              99,
              97,
              99,
              104,
              101,
              46,
              118,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              40,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              44,
              32,
              114,
              101,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              95,
              116,
              121,
              112,
              101,
              44,
              32,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              95,
              116,
              105,
              109,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              77,
              97,
              105,
              110,
              116,
              101,
              110,
              97,
              110,
              99,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CloudMemcacheServiceImplementation<CallContextExt = {}> {
  /** Lists Instances in a given location. */
  listInstances(
    request: ListInstancesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInstancesResponse>>;
  /** Gets details of a single Instance. */
  getInstance(request: GetInstanceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Instance>>;
  /** Creates a new Instance in a given location. */
  createInstance(
    request: CreateInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates an existing Instance in a given project and location. */
  updateInstance(
    request: UpdateInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates the defined Memcached parameters for an existing instance.
   * This method only stages the parameters, it must be followed by
   * `ApplyParameters` to apply the parameters to nodes of the Memcached
   * instance.
   */
  updateParameters(
    request: UpdateParametersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Instance. */
  deleteInstance(
    request: DeleteInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * `ApplyParameters` restarts the set of specified nodes in order to update
   * them to the current set of parameters for the Memcached Instance.
   */
  applyParameters(
    request: ApplyParametersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Reschedules upcoming maintenance event. */
  rescheduleMaintenance(
    request: RescheduleMaintenanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface CloudMemcacheClient<CallOptionsExt = {}> {
  /** Lists Instances in a given location. */
  listInstances(
    request: DeepPartial<ListInstancesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInstancesResponse>;
  /** Gets details of a single Instance. */
  getInstance(request: DeepPartial<GetInstanceRequest>, options?: CallOptions & CallOptionsExt): Promise<Instance>;
  /** Creates a new Instance in a given location. */
  createInstance(
    request: DeepPartial<CreateInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates an existing Instance in a given project and location. */
  updateInstance(
    request: DeepPartial<UpdateInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates the defined Memcached parameters for an existing instance.
   * This method only stages the parameters, it must be followed by
   * `ApplyParameters` to apply the parameters to nodes of the Memcached
   * instance.
   */
  updateParameters(
    request: DeepPartial<UpdateParametersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Instance. */
  deleteInstance(
    request: DeepPartial<DeleteInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * `ApplyParameters` restarts the set of specified nodes in order to update
   * them to the current set of parameters for the Memcached Instance.
   */
  applyParameters(
    request: DeepPartial<ApplyParametersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Reschedules upcoming maintenance event. */
  rescheduleMaintenance(
    request: DeepPartial<RescheduleMaintenanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
