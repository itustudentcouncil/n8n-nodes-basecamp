// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/developerconnect/v1/developer_connect.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.developerconnect.v1";

/** Message describing Connection object */
export interface Connection {
  /** Configuration for connections to github.com. */
  githubConfig?:
    | GitHubConfig
    | undefined;
  /**
   * Identifier. The resource name of the connection, in the format
   * `projects/{project}/locations/{location}/connections/{connection_id}`.
   */
  name: string;
  /** Output only. [Output only] Create timestamp */
  createTime:
    | Date
    | undefined;
  /** Output only. [Output only] Update timestamp */
  updateTime:
    | Date
    | undefined;
  /** Output only. [Output only] Delete timestamp */
  deleteTime:
    | Date
    | undefined;
  /** Optional. Labels as key value pairs */
  labels: { [key: string]: string };
  /** Output only. Installation state of the Connection. */
  installationState:
    | InstallationState
    | undefined;
  /**
   * Optional. If disabled is set to true, functionality is disabled for this
   * connection. Repository based API methods and webhooks processing for
   * repositories in this connection will be disabled.
   */
  disabled: boolean;
  /**
   * Output only. Set to true when the connection is being set up or updated in
   * the background.
   */
  reconciling: boolean;
  /** Optional. Allows clients to store small amounts of arbitrary data. */
  annotations: { [key: string]: string };
  /**
   * Optional. This checksum is computed by the server based on the value of
   * other fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   */
  etag: string;
  /**
   * Output only. A system-assigned unique identifier for a the
   * GitRepositoryLink.
   */
  uid: string;
}

export interface Connection_LabelsEntry {
  key: string;
  value: string;
}

export interface Connection_AnnotationsEntry {
  key: string;
  value: string;
}

/**
 * Describes stage and necessary actions to be taken by the
 * user to complete the installation. Used for GitHub and GitHub Enterprise
 * based connections.
 */
export interface InstallationState {
  /** Output only. Current step of the installation process. */
  stage: InstallationState_Stage;
  /**
   * Output only. Message of what the user should do next to continue the
   * installation. Empty string if the installation is already complete.
   */
  message: string;
  /**
   * Output only. Link to follow for next action. Empty string if the
   * installation is already complete.
   */
  actionUri: string;
}

/** Stage of the installation process. */
export enum InstallationState_Stage {
  /** STAGE_UNSPECIFIED - No stage specified. */
  STAGE_UNSPECIFIED = 0,
  /**
   * PENDING_CREATE_APP - Only for GitHub Enterprise. An App creation has been requested.
   * The user needs to confirm the creation in their GitHub enterprise host.
   */
  PENDING_CREATE_APP = 1,
  /** PENDING_USER_OAUTH - User needs to authorize the GitHub (or Enterprise) App via OAuth. */
  PENDING_USER_OAUTH = 2,
  /** PENDING_INSTALL_APP - User needs to follow the link to install the GitHub (or Enterprise) App. */
  PENDING_INSTALL_APP = 3,
  /** COMPLETE - Installation process has been completed. */
  COMPLETE = 10,
  UNRECOGNIZED = -1,
}

export function installationState_StageFromJSON(object: any): InstallationState_Stage {
  switch (object) {
    case 0:
    case "STAGE_UNSPECIFIED":
      return InstallationState_Stage.STAGE_UNSPECIFIED;
    case 1:
    case "PENDING_CREATE_APP":
      return InstallationState_Stage.PENDING_CREATE_APP;
    case 2:
    case "PENDING_USER_OAUTH":
      return InstallationState_Stage.PENDING_USER_OAUTH;
    case 3:
    case "PENDING_INSTALL_APP":
      return InstallationState_Stage.PENDING_INSTALL_APP;
    case 10:
    case "COMPLETE":
      return InstallationState_Stage.COMPLETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InstallationState_Stage.UNRECOGNIZED;
  }
}

export function installationState_StageToJSON(object: InstallationState_Stage): string {
  switch (object) {
    case InstallationState_Stage.STAGE_UNSPECIFIED:
      return "STAGE_UNSPECIFIED";
    case InstallationState_Stage.PENDING_CREATE_APP:
      return "PENDING_CREATE_APP";
    case InstallationState_Stage.PENDING_USER_OAUTH:
      return "PENDING_USER_OAUTH";
    case InstallationState_Stage.PENDING_INSTALL_APP:
      return "PENDING_INSTALL_APP";
    case InstallationState_Stage.COMPLETE:
      return "COMPLETE";
    case InstallationState_Stage.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Configuration for connections to github.com. */
export interface GitHubConfig {
  /**
   * Required. Immutable. The GitHub Application that was installed to the
   * GitHub user or organization.
   */
  githubApp: GitHubConfig_GitHubApp;
  /**
   * Optional. OAuth credential of the account that authorized the GitHub App.
   * It is recommended to use a robot account instead of a human user account.
   * The OAuth token must be tied to the GitHub App of this config.
   */
  authorizerCredential:
    | OAuthCredential
    | undefined;
  /** Optional. GitHub App installation id. */
  appInstallationId: Long;
  /**
   * Output only. The URI to navigate to in order to manage the installation
   * associated with this GitHubConfig.
   */
  installationUri: string;
}

/**
 * Represents the various GitHub Applications that can be installed to a
 * GitHub user or organization and used with Developer Connect.
 */
export enum GitHubConfig_GitHubApp {
  /** GIT_HUB_APP_UNSPECIFIED - GitHub App not specified. */
  GIT_HUB_APP_UNSPECIFIED = 0,
  /** DEVELOPER_CONNECT - The Developer Connect GitHub Application. */
  DEVELOPER_CONNECT = 1,
  /** FIREBASE - The Firebase GitHub Application. */
  FIREBASE = 2,
  UNRECOGNIZED = -1,
}

export function gitHubConfig_GitHubAppFromJSON(object: any): GitHubConfig_GitHubApp {
  switch (object) {
    case 0:
    case "GIT_HUB_APP_UNSPECIFIED":
      return GitHubConfig_GitHubApp.GIT_HUB_APP_UNSPECIFIED;
    case 1:
    case "DEVELOPER_CONNECT":
      return GitHubConfig_GitHubApp.DEVELOPER_CONNECT;
    case 2:
    case "FIREBASE":
      return GitHubConfig_GitHubApp.FIREBASE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GitHubConfig_GitHubApp.UNRECOGNIZED;
  }
}

export function gitHubConfig_GitHubAppToJSON(object: GitHubConfig_GitHubApp): string {
  switch (object) {
    case GitHubConfig_GitHubApp.GIT_HUB_APP_UNSPECIFIED:
      return "GIT_HUB_APP_UNSPECIFIED";
    case GitHubConfig_GitHubApp.DEVELOPER_CONNECT:
      return "DEVELOPER_CONNECT";
    case GitHubConfig_GitHubApp.FIREBASE:
      return "FIREBASE";
    case GitHubConfig_GitHubApp.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Represents an OAuth token of the account that authorized the Connection,
 * and associated metadata.
 */
export interface OAuthCredential {
  /**
   * Required. A SecretManager resource containing the OAuth token that
   * authorizes the connection. Format: `projects/* /secrets/* /versions/*`.
   */
  oauthTokenSecretVersion: string;
  /** Output only. The username associated with this token. */
  username: string;
}

/** Message for requesting list of Connections */
export interface ListConnectionsRequest {
  /** Required. Parent value for ListConnectionsRequest */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results */
  filter: string;
  /** Optional. Hint for how to order the results */
  orderBy: string;
}

/** Message for response to listing Connections */
export interface ListConnectionsResponse {
  /** The list of Connection */
  connections: Connection[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a Connection */
export interface GetConnectionRequest {
  /** Required. Name of the resource */
  name: string;
}

/** Message for creating a Connection */
export interface CreateConnectionRequest {
  /** Required. Value for parent. */
  parent: string;
  /**
   * Required. Id of the requesting object
   * If auto-generating Id server-side, remove this field and
   * connection_id from the method_signature of Create RPC
   */
  connectionId: string;
  /** Required. The resource being created */
  connection:
    | Connection
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /** Optional. If set, validate the request, but do not actually post it. */
  validateOnly: boolean;
}

/** Message for updating a Connection */
export interface UpdateConnectionRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Connection resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated */
  connection:
    | Connection
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set to true, and the connection is not found a new connection
   * will be created. In this situation `update_mask` is ignored.
   * The creation will succeed only if the input connection has all the
   * necessary information (e.g a github_config with both  user_oauth_token and
   * installation_id properties).
   */
  allowMissing: boolean;
  /** Optional. If set, validate the request, but do not actually post it. */
  validateOnly: boolean;
}

/** Message for deleting a Connection */
export interface DeleteConnectionRequest {
  /** Required. Name of the resource */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /** Optional. If set, validate the request, but do not actually post it. */
  validateOnly: boolean;
  /**
   * Optional. The current etag of the Connection.
   * If an etag is provided and does not match the current etag of the
   * Connection, deletion will be blocked and an ABORTED error will be returned.
   */
  etag: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

/** Message describing the GitRepositoryLink object */
export interface GitRepositoryLink {
  /**
   * Identifier. Resource name of the repository, in the format
   * `projects/* /locations/* /connections/* /gitRepositoryLinks/*`.
   */
  name: string;
  /** Required. Git Clone URI. */
  cloneUri: string;
  /** Output only. [Output only] Create timestamp */
  createTime:
    | Date
    | undefined;
  /** Output only. [Output only] Update timestamp */
  updateTime:
    | Date
    | undefined;
  /** Output only. [Output only] Delete timestamp */
  deleteTime:
    | Date
    | undefined;
  /** Optional. Labels as key value pairs */
  labels: { [key: string]: string };
  /**
   * Optional. This checksum is computed by the server based on the value of
   * other fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   */
  etag: string;
  /**
   * Output only. Set to true when the connection is being set up or updated in
   * the background.
   */
  reconciling: boolean;
  /** Optional. Allows clients to store small amounts of arbitrary data. */
  annotations: { [key: string]: string };
  /**
   * Output only. A system-assigned unique identifier for a the
   * GitRepositoryLink.
   */
  uid: string;
}

export interface GitRepositoryLink_LabelsEntry {
  key: string;
  value: string;
}

export interface GitRepositoryLink_AnnotationsEntry {
  key: string;
  value: string;
}

/** Message for creating a GitRepositoryLink */
export interface CreateGitRepositoryLinkRequest {
  /** Required. Value for parent. */
  parent: string;
  /** Required. The resource being created */
  gitRepositoryLink:
    | GitRepositoryLink
    | undefined;
  /**
   * Required. The ID to use for the repository, which will become the final
   * component of the repository's resource name. This ID should be unique in
   * the connection. Allows alphanumeric characters and any of
   * -._~%!$&'()*+,;=@.
   */
  gitRepositoryLinkId: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /** Optional. If set, validate the request, but do not actually post it. */
  validateOnly: boolean;
}

/** Message for deleting a GitRepositoryLink */
export interface DeleteGitRepositoryLinkRequest {
  /** Required. Name of the resource */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /** Optional. If set, validate the request, but do not actually post it. */
  validateOnly: boolean;
  /**
   * Optional. This checksum is computed by the server based on the value of
   * other fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   */
  etag: string;
}

/** Message for requesting a list of GitRepositoryLinks */
export interface ListGitRepositoryLinksRequest {
  /** Required. Parent value for ListGitRepositoryLinksRequest */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results */
  filter: string;
  /** Optional. Hint for how to order the results */
  orderBy: string;
}

/** Message for response to listing GitRepositoryLinks */
export interface ListGitRepositoryLinksResponse {
  /** The list of GitRepositoryLinks */
  gitRepositoryLinks: GitRepositoryLink[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a GitRepositoryLink */
export interface GetGitRepositoryLinkRequest {
  /** Required. Name of the resource */
  name: string;
}

/** Message for fetching SCM read/write token. */
export interface FetchReadWriteTokenRequest {
  /**
   * Required. The resource name of the gitRepositoryLink in the format
   * `projects/* /locations/* /connections/* /gitRepositoryLinks/*`.
   */
  gitRepositoryLink: string;
}

/** Message for fetching SCM read token. */
export interface FetchReadTokenRequest {
  /**
   * Required. The resource name of the gitRepositoryLink in the format
   * `projects/* /locations/* /connections/* /gitRepositoryLinks/*`.
   */
  gitRepositoryLink: string;
}

/** Message for responding to get read token. */
export interface FetchReadTokenResponse {
  /** The token content. */
  token: string;
  /** Expiration timestamp. Can be empty if unknown or non-expiring. */
  expirationTime:
    | Date
    | undefined;
  /**
   * The git_username to specify when making a git clone with the
   * token. For example, for GitHub GitRepositoryLinks, this would be
   * "x-access-token"
   */
  gitUsername: string;
}

/** Message for responding to get read/write token. */
export interface FetchReadWriteTokenResponse {
  /** The token content. */
  token: string;
  /** Expiration timestamp. Can be empty if unknown or non-expiring. */
  expirationTime:
    | Date
    | undefined;
  /**
   * The git_username to specify when making a git clone with the
   * token. For example, for GitHub GitRepositoryLinks, this would be
   * "x-access-token"
   */
  gitUsername: string;
}

/** Request message for FetchLinkableGitRepositoriesRequest. */
export interface FetchLinkableGitRepositoriesRequest {
  /**
   * Required. The name of the Connection.
   * Format: `projects/* /locations/* /connections/*`.
   */
  connection: string;
  /** Optional. Number of results to return in the list. Defaults to 20. */
  pageSize: number;
  /** Optional. Page start. */
  pageToken: string;
}

/** Response message for FetchLinkableGitRepositories. */
export interface FetchLinkableGitRepositoriesResponse {
  /** The git repositories that can be linked to the connection. */
  linkableGitRepositories: LinkableGitRepository[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/**
 * LinkableGitRepository represents a git repository that can be linked to a
 * connection.
 */
export interface LinkableGitRepository {
  /** The clone uri of the repository. */
  cloneUri: string;
}

/** Request for fetching github installations. */
export interface FetchGitHubInstallationsRequest {
  /**
   * Required. The resource name of the connection in the format
   * `projects/* /locations/* /connections/*`.
   */
  connection: string;
}

/** Response of fetching github installations. */
export interface FetchGitHubInstallationsResponse {
  /**
   * List of installations available to the OAuth user (for github.com)
   * or all the installations (for GitHub enterprise).
   */
  installations: FetchGitHubInstallationsResponse_Installation[];
}

/** Represents an installation of the GitHub App. */
export interface FetchGitHubInstallationsResponse_Installation {
  /** ID of the installation in GitHub. */
  id: Long;
  /** Name of the GitHub user or organization that owns this installation. */
  name: string;
  /** Either "user" or "organization". */
  type: string;
}

/** Request for fetching git refs. */
export interface FetchGitRefsRequest {
  /**
   * Required. The resource name of GitRepositoryLink in the format
   * `projects/* /locations/* /connections/* /gitRepositoryLinks/*`.
   */
  gitRepositoryLink: string;
  /** Required. Type of refs to fetch. */
  refType: FetchGitRefsRequest_RefType;
  /** Optional. Number of results to return in the list. Default to 20. */
  pageSize: number;
  /** Optional. Page start. */
  pageToken: string;
}

/** Type of refs. */
export enum FetchGitRefsRequest_RefType {
  /** REF_TYPE_UNSPECIFIED - No type specified. */
  REF_TYPE_UNSPECIFIED = 0,
  /** TAG - To fetch tags. */
  TAG = 1,
  /** BRANCH - To fetch branches. */
  BRANCH = 2,
  UNRECOGNIZED = -1,
}

export function fetchGitRefsRequest_RefTypeFromJSON(object: any): FetchGitRefsRequest_RefType {
  switch (object) {
    case 0:
    case "REF_TYPE_UNSPECIFIED":
      return FetchGitRefsRequest_RefType.REF_TYPE_UNSPECIFIED;
    case 1:
    case "TAG":
      return FetchGitRefsRequest_RefType.TAG;
    case 2:
    case "BRANCH":
      return FetchGitRefsRequest_RefType.BRANCH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FetchGitRefsRequest_RefType.UNRECOGNIZED;
  }
}

export function fetchGitRefsRequest_RefTypeToJSON(object: FetchGitRefsRequest_RefType): string {
  switch (object) {
    case FetchGitRefsRequest_RefType.REF_TYPE_UNSPECIFIED:
      return "REF_TYPE_UNSPECIFIED";
    case FetchGitRefsRequest_RefType.TAG:
      return "TAG";
    case FetchGitRefsRequest_RefType.BRANCH:
      return "BRANCH";
    case FetchGitRefsRequest_RefType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Response for fetching git refs. */
export interface FetchGitRefsResponse {
  /** Name of the refs fetched. */
  refNames: string[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

function createBaseConnection(): Connection {
  return {
    githubConfig: undefined,
    name: "",
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    labels: {},
    installationState: undefined,
    disabled: false,
    reconciling: false,
    annotations: {},
    etag: "",
    uid: "",
  };
}

export const Connection: MessageFns<Connection> = {
  encode(message: Connection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.githubConfig !== undefined) {
      GitHubConfig.encode(message.githubConfig, writer.uint32(42).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(90).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Connection_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.installationState !== undefined) {
      InstallationState.encode(message.installationState, writer.uint32(50).fork()).join();
    }
    if (message.disabled !== false) {
      writer.uint32(56).bool(message.disabled);
    }
    if (message.reconciling !== false) {
      writer.uint32(64).bool(message.reconciling);
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      Connection_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    if (message.etag !== "") {
      writer.uint32(82).string(message.etag);
    }
    if (message.uid !== "") {
      writer.uint32(98).string(message.uid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Connection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.githubConfig = GitHubConfig.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Connection_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.installationState = InstallationState.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.disabled = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.reconciling = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = Connection_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.annotations[entry9.key] = entry9.value;
          }
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.uid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Connection {
    return {
      githubConfig: isSet(object.githubConfig) ? GitHubConfig.fromJSON(object.githubConfig) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      installationState: isSet(object.installationState)
        ? InstallationState.fromJSON(object.installationState)
        : undefined,
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
      reconciling: isSet(object.reconciling) ? globalThis.Boolean(object.reconciling) : false,
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
    };
  },

  toJSON(message: Connection): unknown {
    const obj: any = {};
    if (message.githubConfig !== undefined) {
      obj.githubConfig = GitHubConfig.toJSON(message.githubConfig);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.installationState !== undefined) {
      obj.installationState = InstallationState.toJSON(message.installationState);
    }
    if (message.disabled !== false) {
      obj.disabled = message.disabled;
    }
    if (message.reconciling !== false) {
      obj.reconciling = message.reconciling;
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    return obj;
  },

  create(base?: DeepPartial<Connection>): Connection {
    return Connection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Connection>): Connection {
    const message = createBaseConnection();
    message.githubConfig = (object.githubConfig !== undefined && object.githubConfig !== null)
      ? GitHubConfig.fromPartial(object.githubConfig)
      : undefined;
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.installationState = (object.installationState !== undefined && object.installationState !== null)
      ? InstallationState.fromPartial(object.installationState)
      : undefined;
    message.disabled = object.disabled ?? false;
    message.reconciling = object.reconciling ?? false;
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.etag = object.etag ?? "";
    message.uid = object.uid ?? "";
    return message;
  },
};

function createBaseConnection_LabelsEntry(): Connection_LabelsEntry {
  return { key: "", value: "" };
}

export const Connection_LabelsEntry: MessageFns<Connection_LabelsEntry> = {
  encode(message: Connection_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Connection_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnection_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Connection_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Connection_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Connection_LabelsEntry>): Connection_LabelsEntry {
    return Connection_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Connection_LabelsEntry>): Connection_LabelsEntry {
    const message = createBaseConnection_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseConnection_AnnotationsEntry(): Connection_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Connection_AnnotationsEntry: MessageFns<Connection_AnnotationsEntry> = {
  encode(message: Connection_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Connection_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnection_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Connection_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Connection_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Connection_AnnotationsEntry>): Connection_AnnotationsEntry {
    return Connection_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Connection_AnnotationsEntry>): Connection_AnnotationsEntry {
    const message = createBaseConnection_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInstallationState(): InstallationState {
  return { stage: 0, message: "", actionUri: "" };
}

export const InstallationState: MessageFns<InstallationState> = {
  encode(message: InstallationState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stage !== 0) {
      writer.uint32(8).int32(message.stage);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.actionUri !== "") {
      writer.uint32(26).string(message.actionUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstallationState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstallationState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.stage = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actionUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstallationState {
    return {
      stage: isSet(object.stage) ? installationState_StageFromJSON(object.stage) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      actionUri: isSet(object.actionUri) ? globalThis.String(object.actionUri) : "",
    };
  },

  toJSON(message: InstallationState): unknown {
    const obj: any = {};
    if (message.stage !== 0) {
      obj.stage = installationState_StageToJSON(message.stage);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.actionUri !== "") {
      obj.actionUri = message.actionUri;
    }
    return obj;
  },

  create(base?: DeepPartial<InstallationState>): InstallationState {
    return InstallationState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InstallationState>): InstallationState {
    const message = createBaseInstallationState();
    message.stage = object.stage ?? 0;
    message.message = object.message ?? "";
    message.actionUri = object.actionUri ?? "";
    return message;
  },
};

function createBaseGitHubConfig(): GitHubConfig {
  return { githubApp: 0, authorizerCredential: undefined, appInstallationId: Long.ZERO, installationUri: "" };
}

export const GitHubConfig: MessageFns<GitHubConfig> = {
  encode(message: GitHubConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.githubApp !== 0) {
      writer.uint32(8).int32(message.githubApp);
    }
    if (message.authorizerCredential !== undefined) {
      OAuthCredential.encode(message.authorizerCredential, writer.uint32(18).fork()).join();
    }
    if (!message.appInstallationId.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.appInstallationId.toString());
    }
    if (message.installationUri !== "") {
      writer.uint32(34).string(message.installationUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitHubConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitHubConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.githubApp = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.authorizerCredential = OAuthCredential.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.appInstallationId = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.installationUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitHubConfig {
    return {
      githubApp: isSet(object.githubApp) ? gitHubConfig_GitHubAppFromJSON(object.githubApp) : 0,
      authorizerCredential: isSet(object.authorizerCredential)
        ? OAuthCredential.fromJSON(object.authorizerCredential)
        : undefined,
      appInstallationId: isSet(object.appInstallationId) ? Long.fromValue(object.appInstallationId) : Long.ZERO,
      installationUri: isSet(object.installationUri) ? globalThis.String(object.installationUri) : "",
    };
  },

  toJSON(message: GitHubConfig): unknown {
    const obj: any = {};
    if (message.githubApp !== 0) {
      obj.githubApp = gitHubConfig_GitHubAppToJSON(message.githubApp);
    }
    if (message.authorizerCredential !== undefined) {
      obj.authorizerCredential = OAuthCredential.toJSON(message.authorizerCredential);
    }
    if (!message.appInstallationId.equals(Long.ZERO)) {
      obj.appInstallationId = (message.appInstallationId || Long.ZERO).toString();
    }
    if (message.installationUri !== "") {
      obj.installationUri = message.installationUri;
    }
    return obj;
  },

  create(base?: DeepPartial<GitHubConfig>): GitHubConfig {
    return GitHubConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitHubConfig>): GitHubConfig {
    const message = createBaseGitHubConfig();
    message.githubApp = object.githubApp ?? 0;
    message.authorizerCredential = (object.authorizerCredential !== undefined && object.authorizerCredential !== null)
      ? OAuthCredential.fromPartial(object.authorizerCredential)
      : undefined;
    message.appInstallationId = (object.appInstallationId !== undefined && object.appInstallationId !== null)
      ? Long.fromValue(object.appInstallationId)
      : Long.ZERO;
    message.installationUri = object.installationUri ?? "";
    return message;
  },
};

function createBaseOAuthCredential(): OAuthCredential {
  return { oauthTokenSecretVersion: "", username: "" };
}

export const OAuthCredential: MessageFns<OAuthCredential> = {
  encode(message: OAuthCredential, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oauthTokenSecretVersion !== "") {
      writer.uint32(10).string(message.oauthTokenSecretVersion);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OAuthCredential {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOAuthCredential();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.oauthTokenSecretVersion = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OAuthCredential {
    return {
      oauthTokenSecretVersion: isSet(object.oauthTokenSecretVersion)
        ? globalThis.String(object.oauthTokenSecretVersion)
        : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: OAuthCredential): unknown {
    const obj: any = {};
    if (message.oauthTokenSecretVersion !== "") {
      obj.oauthTokenSecretVersion = message.oauthTokenSecretVersion;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create(base?: DeepPartial<OAuthCredential>): OAuthCredential {
    return OAuthCredential.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OAuthCredential>): OAuthCredential {
    const message = createBaseOAuthCredential();
    message.oauthTokenSecretVersion = object.oauthTokenSecretVersion ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseListConnectionsRequest(): ListConnectionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListConnectionsRequest: MessageFns<ListConnectionsRequest> = {
  encode(message: ListConnectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListConnectionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectionsRequest>): ListConnectionsRequest {
    return ListConnectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectionsRequest>): ListConnectionsRequest {
    const message = createBaseListConnectionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListConnectionsResponse(): ListConnectionsResponse {
  return { connections: [], nextPageToken: "", unreachable: [] };
}

export const ListConnectionsResponse: MessageFns<ListConnectionsResponse> = {
  encode(message: ListConnectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.connections) {
      Connection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connections.push(Connection.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectionsResponse {
    return {
      connections: globalThis.Array.isArray(object?.connections)
        ? object.connections.map((e: any) => Connection.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListConnectionsResponse): unknown {
    const obj: any = {};
    if (message.connections?.length) {
      obj.connections = message.connections.map((e) => Connection.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectionsResponse>): ListConnectionsResponse {
    return ListConnectionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectionsResponse>): ListConnectionsResponse {
    const message = createBaseListConnectionsResponse();
    message.connections = object.connections?.map((e) => Connection.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetConnectionRequest(): GetConnectionRequest {
  return { name: "" };
}

export const GetConnectionRequest: MessageFns<GetConnectionRequest> = {
  encode(message: GetConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConnectionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConnectionRequest>): GetConnectionRequest {
    return GetConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConnectionRequest>): GetConnectionRequest {
    const message = createBaseGetConnectionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateConnectionRequest(): CreateConnectionRequest {
  return { parent: "", connectionId: "", connection: undefined, requestId: "", validateOnly: false };
}

export const CreateConnectionRequest: MessageFns<CreateConnectionRequest> = {
  encode(message: CreateConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.connectionId !== "") {
      writer.uint32(18).string(message.connectionId);
    }
    if (message.connection !== undefined) {
      Connection.encode(message.connection, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.connection = Connection.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConnectionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      connectionId: isSet(object.connectionId) ? globalThis.String(object.connectionId) : "",
      connection: isSet(object.connection) ? Connection.fromJSON(object.connection) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateConnectionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.connectionId !== "") {
      obj.connectionId = message.connectionId;
    }
    if (message.connection !== undefined) {
      obj.connection = Connection.toJSON(message.connection);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConnectionRequest>): CreateConnectionRequest {
    return CreateConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConnectionRequest>): CreateConnectionRequest {
    const message = createBaseCreateConnectionRequest();
    message.parent = object.parent ?? "";
    message.connectionId = object.connectionId ?? "";
    message.connection = (object.connection !== undefined && object.connection !== null)
      ? Connection.fromPartial(object.connection)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateConnectionRequest(): UpdateConnectionRequest {
  return { updateMask: undefined, connection: undefined, requestId: "", allowMissing: false, validateOnly: false };
}

export const UpdateConnectionRequest: MessageFns<UpdateConnectionRequest> = {
  encode(message: UpdateConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.connection !== undefined) {
      Connection.encode(message.connection, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.allowMissing !== false) {
      writer.uint32(32).bool(message.allowMissing);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connection = Connection.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConnectionRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      connection: isSet(object.connection) ? Connection.fromJSON(object.connection) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateConnectionRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.connection !== undefined) {
      obj.connection = Connection.toJSON(message.connection);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConnectionRequest>): UpdateConnectionRequest {
    return UpdateConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConnectionRequest>): UpdateConnectionRequest {
    const message = createBaseUpdateConnectionRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.connection = (object.connection !== undefined && object.connection !== null)
      ? Connection.fromPartial(object.connection)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.allowMissing = object.allowMissing ?? false;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteConnectionRequest(): DeleteConnectionRequest {
  return { name: "", requestId: "", validateOnly: false, etag: "" };
}

export const DeleteConnectionRequest: MessageFns<DeleteConnectionRequest> = {
  encode(message: DeleteConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(34).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConnectionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConnectionRequest>): DeleteConnectionRequest {
    return DeleteConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConnectionRequest>): DeleteConnectionRequest {
    const message = createBaseDeleteConnectionRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

function createBaseGitRepositoryLink(): GitRepositoryLink {
  return {
    name: "",
    cloneUri: "",
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
    labels: {},
    etag: "",
    reconciling: false,
    annotations: {},
    uid: "",
  };
}

export const GitRepositoryLink: MessageFns<GitRepositoryLink> = {
  encode(message: GitRepositoryLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.cloneUri !== "") {
      writer.uint32(18).string(message.cloneUri);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(42).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      GitRepositoryLink_LabelsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.etag !== "") {
      writer.uint32(58).string(message.etag);
    }
    if (message.reconciling !== false) {
      writer.uint32(64).bool(message.reconciling);
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      GitRepositoryLink_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    if (message.uid !== "") {
      writer.uint32(82).string(message.uid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitRepositoryLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitRepositoryLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cloneUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = GitRepositoryLink_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.reconciling = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = GitRepositoryLink_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.annotations[entry9.key] = entry9.value;
          }
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.uid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitRepositoryLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      cloneUri: isSet(object.cloneUri) ? globalThis.String(object.cloneUri) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      reconciling: isSet(object.reconciling) ? globalThis.Boolean(object.reconciling) : false,
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
    };
  },

  toJSON(message: GitRepositoryLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.cloneUri !== "") {
      obj.cloneUri = message.cloneUri;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.reconciling !== false) {
      obj.reconciling = message.reconciling;
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    return obj;
  },

  create(base?: DeepPartial<GitRepositoryLink>): GitRepositoryLink {
    return GitRepositoryLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitRepositoryLink>): GitRepositoryLink {
    const message = createBaseGitRepositoryLink();
    message.name = object.name ?? "";
    message.cloneUri = object.cloneUri ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.etag = object.etag ?? "";
    message.reconciling = object.reconciling ?? false;
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.uid = object.uid ?? "";
    return message;
  },
};

function createBaseGitRepositoryLink_LabelsEntry(): GitRepositoryLink_LabelsEntry {
  return { key: "", value: "" };
}

export const GitRepositoryLink_LabelsEntry: MessageFns<GitRepositoryLink_LabelsEntry> = {
  encode(message: GitRepositoryLink_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitRepositoryLink_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitRepositoryLink_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitRepositoryLink_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: GitRepositoryLink_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<GitRepositoryLink_LabelsEntry>): GitRepositoryLink_LabelsEntry {
    return GitRepositoryLink_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitRepositoryLink_LabelsEntry>): GitRepositoryLink_LabelsEntry {
    const message = createBaseGitRepositoryLink_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGitRepositoryLink_AnnotationsEntry(): GitRepositoryLink_AnnotationsEntry {
  return { key: "", value: "" };
}

export const GitRepositoryLink_AnnotationsEntry: MessageFns<GitRepositoryLink_AnnotationsEntry> = {
  encode(message: GitRepositoryLink_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitRepositoryLink_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitRepositoryLink_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitRepositoryLink_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: GitRepositoryLink_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<GitRepositoryLink_AnnotationsEntry>): GitRepositoryLink_AnnotationsEntry {
    return GitRepositoryLink_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitRepositoryLink_AnnotationsEntry>): GitRepositoryLink_AnnotationsEntry {
    const message = createBaseGitRepositoryLink_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCreateGitRepositoryLinkRequest(): CreateGitRepositoryLinkRequest {
  return { parent: "", gitRepositoryLink: undefined, gitRepositoryLinkId: "", requestId: "", validateOnly: false };
}

export const CreateGitRepositoryLinkRequest: MessageFns<CreateGitRepositoryLinkRequest> = {
  encode(message: CreateGitRepositoryLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.gitRepositoryLink !== undefined) {
      GitRepositoryLink.encode(message.gitRepositoryLink, writer.uint32(18).fork()).join();
    }
    if (message.gitRepositoryLinkId !== "") {
      writer.uint32(26).string(message.gitRepositoryLinkId);
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGitRepositoryLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGitRepositoryLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gitRepositoryLink = GitRepositoryLink.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gitRepositoryLinkId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGitRepositoryLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      gitRepositoryLink: isSet(object.gitRepositoryLink)
        ? GitRepositoryLink.fromJSON(object.gitRepositoryLink)
        : undefined,
      gitRepositoryLinkId: isSet(object.gitRepositoryLinkId) ? globalThis.String(object.gitRepositoryLinkId) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateGitRepositoryLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.gitRepositoryLink !== undefined) {
      obj.gitRepositoryLink = GitRepositoryLink.toJSON(message.gitRepositoryLink);
    }
    if (message.gitRepositoryLinkId !== "") {
      obj.gitRepositoryLinkId = message.gitRepositoryLinkId;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateGitRepositoryLinkRequest>): CreateGitRepositoryLinkRequest {
    return CreateGitRepositoryLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateGitRepositoryLinkRequest>): CreateGitRepositoryLinkRequest {
    const message = createBaseCreateGitRepositoryLinkRequest();
    message.parent = object.parent ?? "";
    message.gitRepositoryLink = (object.gitRepositoryLink !== undefined && object.gitRepositoryLink !== null)
      ? GitRepositoryLink.fromPartial(object.gitRepositoryLink)
      : undefined;
    message.gitRepositoryLinkId = object.gitRepositoryLinkId ?? "";
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteGitRepositoryLinkRequest(): DeleteGitRepositoryLinkRequest {
  return { name: "", requestId: "", validateOnly: false, etag: "" };
}

export const DeleteGitRepositoryLinkRequest: MessageFns<DeleteGitRepositoryLinkRequest> = {
  encode(message: DeleteGitRepositoryLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    if (message.etag !== "") {
      writer.uint32(34).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGitRepositoryLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGitRepositoryLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGitRepositoryLinkRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteGitRepositoryLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGitRepositoryLinkRequest>): DeleteGitRepositoryLinkRequest {
    return DeleteGitRepositoryLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGitRepositoryLinkRequest>): DeleteGitRepositoryLinkRequest {
    const message = createBaseDeleteGitRepositoryLinkRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseListGitRepositoryLinksRequest(): ListGitRepositoryLinksRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListGitRepositoryLinksRequest: MessageFns<ListGitRepositoryLinksRequest> = {
  encode(message: ListGitRepositoryLinksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGitRepositoryLinksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGitRepositoryLinksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGitRepositoryLinksRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListGitRepositoryLinksRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGitRepositoryLinksRequest>): ListGitRepositoryLinksRequest {
    return ListGitRepositoryLinksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGitRepositoryLinksRequest>): ListGitRepositoryLinksRequest {
    const message = createBaseListGitRepositoryLinksRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListGitRepositoryLinksResponse(): ListGitRepositoryLinksResponse {
  return { gitRepositoryLinks: [], nextPageToken: "", unreachable: [] };
}

export const ListGitRepositoryLinksResponse: MessageFns<ListGitRepositoryLinksResponse> = {
  encode(message: ListGitRepositoryLinksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gitRepositoryLinks) {
      GitRepositoryLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGitRepositoryLinksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGitRepositoryLinksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gitRepositoryLinks.push(GitRepositoryLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGitRepositoryLinksResponse {
    return {
      gitRepositoryLinks: globalThis.Array.isArray(object?.gitRepositoryLinks)
        ? object.gitRepositoryLinks.map((e: any) => GitRepositoryLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListGitRepositoryLinksResponse): unknown {
    const obj: any = {};
    if (message.gitRepositoryLinks?.length) {
      obj.gitRepositoryLinks = message.gitRepositoryLinks.map((e) => GitRepositoryLink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGitRepositoryLinksResponse>): ListGitRepositoryLinksResponse {
    return ListGitRepositoryLinksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGitRepositoryLinksResponse>): ListGitRepositoryLinksResponse {
    const message = createBaseListGitRepositoryLinksResponse();
    message.gitRepositoryLinks = object.gitRepositoryLinks?.map((e) => GitRepositoryLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetGitRepositoryLinkRequest(): GetGitRepositoryLinkRequest {
  return { name: "" };
}

export const GetGitRepositoryLinkRequest: MessageFns<GetGitRepositoryLinkRequest> = {
  encode(message: GetGitRepositoryLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGitRepositoryLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGitRepositoryLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGitRepositoryLinkRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetGitRepositoryLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGitRepositoryLinkRequest>): GetGitRepositoryLinkRequest {
    return GetGitRepositoryLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGitRepositoryLinkRequest>): GetGitRepositoryLinkRequest {
    const message = createBaseGetGitRepositoryLinkRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseFetchReadWriteTokenRequest(): FetchReadWriteTokenRequest {
  return { gitRepositoryLink: "" };
}

export const FetchReadWriteTokenRequest: MessageFns<FetchReadWriteTokenRequest> = {
  encode(message: FetchReadWriteTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gitRepositoryLink !== "") {
      writer.uint32(10).string(message.gitRepositoryLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchReadWriteTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchReadWriteTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gitRepositoryLink = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchReadWriteTokenRequest {
    return { gitRepositoryLink: isSet(object.gitRepositoryLink) ? globalThis.String(object.gitRepositoryLink) : "" };
  },

  toJSON(message: FetchReadWriteTokenRequest): unknown {
    const obj: any = {};
    if (message.gitRepositoryLink !== "") {
      obj.gitRepositoryLink = message.gitRepositoryLink;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchReadWriteTokenRequest>): FetchReadWriteTokenRequest {
    return FetchReadWriteTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchReadWriteTokenRequest>): FetchReadWriteTokenRequest {
    const message = createBaseFetchReadWriteTokenRequest();
    message.gitRepositoryLink = object.gitRepositoryLink ?? "";
    return message;
  },
};

function createBaseFetchReadTokenRequest(): FetchReadTokenRequest {
  return { gitRepositoryLink: "" };
}

export const FetchReadTokenRequest: MessageFns<FetchReadTokenRequest> = {
  encode(message: FetchReadTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gitRepositoryLink !== "") {
      writer.uint32(10).string(message.gitRepositoryLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchReadTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchReadTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gitRepositoryLink = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchReadTokenRequest {
    return { gitRepositoryLink: isSet(object.gitRepositoryLink) ? globalThis.String(object.gitRepositoryLink) : "" };
  },

  toJSON(message: FetchReadTokenRequest): unknown {
    const obj: any = {};
    if (message.gitRepositoryLink !== "") {
      obj.gitRepositoryLink = message.gitRepositoryLink;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchReadTokenRequest>): FetchReadTokenRequest {
    return FetchReadTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchReadTokenRequest>): FetchReadTokenRequest {
    const message = createBaseFetchReadTokenRequest();
    message.gitRepositoryLink = object.gitRepositoryLink ?? "";
    return message;
  },
};

function createBaseFetchReadTokenResponse(): FetchReadTokenResponse {
  return { token: "", expirationTime: undefined, gitUsername: "" };
}

export const FetchReadTokenResponse: MessageFns<FetchReadTokenResponse> = {
  encode(message: FetchReadTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.expirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationTime), writer.uint32(18).fork()).join();
    }
    if (message.gitUsername !== "") {
      writer.uint32(26).string(message.gitUsername);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchReadTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchReadTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gitUsername = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchReadTokenResponse {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      expirationTime: isSet(object.expirationTime) ? fromJsonTimestamp(object.expirationTime) : undefined,
      gitUsername: isSet(object.gitUsername) ? globalThis.String(object.gitUsername) : "",
    };
  },

  toJSON(message: FetchReadTokenResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.expirationTime !== undefined) {
      obj.expirationTime = message.expirationTime.toISOString();
    }
    if (message.gitUsername !== "") {
      obj.gitUsername = message.gitUsername;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchReadTokenResponse>): FetchReadTokenResponse {
    return FetchReadTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchReadTokenResponse>): FetchReadTokenResponse {
    const message = createBaseFetchReadTokenResponse();
    message.token = object.token ?? "";
    message.expirationTime = object.expirationTime ?? undefined;
    message.gitUsername = object.gitUsername ?? "";
    return message;
  },
};

function createBaseFetchReadWriteTokenResponse(): FetchReadWriteTokenResponse {
  return { token: "", expirationTime: undefined, gitUsername: "" };
}

export const FetchReadWriteTokenResponse: MessageFns<FetchReadWriteTokenResponse> = {
  encode(message: FetchReadWriteTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.expirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationTime), writer.uint32(18).fork()).join();
    }
    if (message.gitUsername !== "") {
      writer.uint32(26).string(message.gitUsername);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchReadWriteTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchReadWriteTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gitUsername = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchReadWriteTokenResponse {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      expirationTime: isSet(object.expirationTime) ? fromJsonTimestamp(object.expirationTime) : undefined,
      gitUsername: isSet(object.gitUsername) ? globalThis.String(object.gitUsername) : "",
    };
  },

  toJSON(message: FetchReadWriteTokenResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.expirationTime !== undefined) {
      obj.expirationTime = message.expirationTime.toISOString();
    }
    if (message.gitUsername !== "") {
      obj.gitUsername = message.gitUsername;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchReadWriteTokenResponse>): FetchReadWriteTokenResponse {
    return FetchReadWriteTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchReadWriteTokenResponse>): FetchReadWriteTokenResponse {
    const message = createBaseFetchReadWriteTokenResponse();
    message.token = object.token ?? "";
    message.expirationTime = object.expirationTime ?? undefined;
    message.gitUsername = object.gitUsername ?? "";
    return message;
  },
};

function createBaseFetchLinkableGitRepositoriesRequest(): FetchLinkableGitRepositoriesRequest {
  return { connection: "", pageSize: 0, pageToken: "" };
}

export const FetchLinkableGitRepositoriesRequest: MessageFns<FetchLinkableGitRepositoriesRequest> = {
  encode(message: FetchLinkableGitRepositoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connection !== "") {
      writer.uint32(10).string(message.connection);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchLinkableGitRepositoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchLinkableGitRepositoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connection = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchLinkableGitRepositoriesRequest {
    return {
      connection: isSet(object.connection) ? globalThis.String(object.connection) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: FetchLinkableGitRepositoriesRequest): unknown {
    const obj: any = {};
    if (message.connection !== "") {
      obj.connection = message.connection;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchLinkableGitRepositoriesRequest>): FetchLinkableGitRepositoriesRequest {
    return FetchLinkableGitRepositoriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchLinkableGitRepositoriesRequest>): FetchLinkableGitRepositoriesRequest {
    const message = createBaseFetchLinkableGitRepositoriesRequest();
    message.connection = object.connection ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseFetchLinkableGitRepositoriesResponse(): FetchLinkableGitRepositoriesResponse {
  return { linkableGitRepositories: [], nextPageToken: "" };
}

export const FetchLinkableGitRepositoriesResponse: MessageFns<FetchLinkableGitRepositoriesResponse> = {
  encode(message: FetchLinkableGitRepositoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.linkableGitRepositories) {
      LinkableGitRepository.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchLinkableGitRepositoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchLinkableGitRepositoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.linkableGitRepositories.push(LinkableGitRepository.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchLinkableGitRepositoriesResponse {
    return {
      linkableGitRepositories: globalThis.Array.isArray(object?.linkableGitRepositories)
        ? object.linkableGitRepositories.map((e: any) => LinkableGitRepository.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: FetchLinkableGitRepositoriesResponse): unknown {
    const obj: any = {};
    if (message.linkableGitRepositories?.length) {
      obj.linkableGitRepositories = message.linkableGitRepositories.map((e) => LinkableGitRepository.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchLinkableGitRepositoriesResponse>): FetchLinkableGitRepositoriesResponse {
    return FetchLinkableGitRepositoriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchLinkableGitRepositoriesResponse>): FetchLinkableGitRepositoriesResponse {
    const message = createBaseFetchLinkableGitRepositoriesResponse();
    message.linkableGitRepositories =
      object.linkableGitRepositories?.map((e) => LinkableGitRepository.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseLinkableGitRepository(): LinkableGitRepository {
  return { cloneUri: "" };
}

export const LinkableGitRepository: MessageFns<LinkableGitRepository> = {
  encode(message: LinkableGitRepository, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cloneUri !== "") {
      writer.uint32(10).string(message.cloneUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkableGitRepository {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkableGitRepository();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cloneUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkableGitRepository {
    return { cloneUri: isSet(object.cloneUri) ? globalThis.String(object.cloneUri) : "" };
  },

  toJSON(message: LinkableGitRepository): unknown {
    const obj: any = {};
    if (message.cloneUri !== "") {
      obj.cloneUri = message.cloneUri;
    }
    return obj;
  },

  create(base?: DeepPartial<LinkableGitRepository>): LinkableGitRepository {
    return LinkableGitRepository.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LinkableGitRepository>): LinkableGitRepository {
    const message = createBaseLinkableGitRepository();
    message.cloneUri = object.cloneUri ?? "";
    return message;
  },
};

function createBaseFetchGitHubInstallationsRequest(): FetchGitHubInstallationsRequest {
  return { connection: "" };
}

export const FetchGitHubInstallationsRequest: MessageFns<FetchGitHubInstallationsRequest> = {
  encode(message: FetchGitHubInstallationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connection !== "") {
      writer.uint32(10).string(message.connection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchGitHubInstallationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchGitHubInstallationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connection = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchGitHubInstallationsRequest {
    return { connection: isSet(object.connection) ? globalThis.String(object.connection) : "" };
  },

  toJSON(message: FetchGitHubInstallationsRequest): unknown {
    const obj: any = {};
    if (message.connection !== "") {
      obj.connection = message.connection;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchGitHubInstallationsRequest>): FetchGitHubInstallationsRequest {
    return FetchGitHubInstallationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchGitHubInstallationsRequest>): FetchGitHubInstallationsRequest {
    const message = createBaseFetchGitHubInstallationsRequest();
    message.connection = object.connection ?? "";
    return message;
  },
};

function createBaseFetchGitHubInstallationsResponse(): FetchGitHubInstallationsResponse {
  return { installations: [] };
}

export const FetchGitHubInstallationsResponse: MessageFns<FetchGitHubInstallationsResponse> = {
  encode(message: FetchGitHubInstallationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.installations) {
      FetchGitHubInstallationsResponse_Installation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchGitHubInstallationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchGitHubInstallationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.installations.push(FetchGitHubInstallationsResponse_Installation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchGitHubInstallationsResponse {
    return {
      installations: globalThis.Array.isArray(object?.installations)
        ? object.installations.map((e: any) => FetchGitHubInstallationsResponse_Installation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FetchGitHubInstallationsResponse): unknown {
    const obj: any = {};
    if (message.installations?.length) {
      obj.installations = message.installations.map((e) => FetchGitHubInstallationsResponse_Installation.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FetchGitHubInstallationsResponse>): FetchGitHubInstallationsResponse {
    return FetchGitHubInstallationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchGitHubInstallationsResponse>): FetchGitHubInstallationsResponse {
    const message = createBaseFetchGitHubInstallationsResponse();
    message.installations =
      object.installations?.map((e) => FetchGitHubInstallationsResponse_Installation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFetchGitHubInstallationsResponse_Installation(): FetchGitHubInstallationsResponse_Installation {
  return { id: Long.ZERO, name: "", type: "" };
}

export const FetchGitHubInstallationsResponse_Installation: MessageFns<FetchGitHubInstallationsResponse_Installation> =
  {
    encode(
      message: FetchGitHubInstallationsResponse_Installation,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (!message.id.equals(Long.ZERO)) {
        writer.uint32(8).int64(message.id.toString());
      }
      if (message.name !== "") {
        writer.uint32(18).string(message.name);
      }
      if (message.type !== "") {
        writer.uint32(26).string(message.type);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): FetchGitHubInstallationsResponse_Installation {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseFetchGitHubInstallationsResponse_Installation();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.id = Long.fromString(reader.int64().toString());
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.name = reader.string();
            continue;
          case 3:
            if (tag !== 26) {
              break;
            }

            message.type = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): FetchGitHubInstallationsResponse_Installation {
      return {
        id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
        name: isSet(object.name) ? globalThis.String(object.name) : "",
        type: isSet(object.type) ? globalThis.String(object.type) : "",
      };
    },

    toJSON(message: FetchGitHubInstallationsResponse_Installation): unknown {
      const obj: any = {};
      if (!message.id.equals(Long.ZERO)) {
        obj.id = (message.id || Long.ZERO).toString();
      }
      if (message.name !== "") {
        obj.name = message.name;
      }
      if (message.type !== "") {
        obj.type = message.type;
      }
      return obj;
    },

    create(
      base?: DeepPartial<FetchGitHubInstallationsResponse_Installation>,
    ): FetchGitHubInstallationsResponse_Installation {
      return FetchGitHubInstallationsResponse_Installation.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<FetchGitHubInstallationsResponse_Installation>,
    ): FetchGitHubInstallationsResponse_Installation {
      const message = createBaseFetchGitHubInstallationsResponse_Installation();
      message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
      message.name = object.name ?? "";
      message.type = object.type ?? "";
      return message;
    },
  };

function createBaseFetchGitRefsRequest(): FetchGitRefsRequest {
  return { gitRepositoryLink: "", refType: 0, pageSize: 0, pageToken: "" };
}

export const FetchGitRefsRequest: MessageFns<FetchGitRefsRequest> = {
  encode(message: FetchGitRefsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gitRepositoryLink !== "") {
      writer.uint32(10).string(message.gitRepositoryLink);
    }
    if (message.refType !== 0) {
      writer.uint32(16).int32(message.refType);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchGitRefsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchGitRefsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gitRepositoryLink = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.refType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchGitRefsRequest {
    return {
      gitRepositoryLink: isSet(object.gitRepositoryLink) ? globalThis.String(object.gitRepositoryLink) : "",
      refType: isSet(object.refType) ? fetchGitRefsRequest_RefTypeFromJSON(object.refType) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: FetchGitRefsRequest): unknown {
    const obj: any = {};
    if (message.gitRepositoryLink !== "") {
      obj.gitRepositoryLink = message.gitRepositoryLink;
    }
    if (message.refType !== 0) {
      obj.refType = fetchGitRefsRequest_RefTypeToJSON(message.refType);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchGitRefsRequest>): FetchGitRefsRequest {
    return FetchGitRefsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchGitRefsRequest>): FetchGitRefsRequest {
    const message = createBaseFetchGitRefsRequest();
    message.gitRepositoryLink = object.gitRepositoryLink ?? "";
    message.refType = object.refType ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseFetchGitRefsResponse(): FetchGitRefsResponse {
  return { refNames: [], nextPageToken: "" };
}

export const FetchGitRefsResponse: MessageFns<FetchGitRefsResponse> = {
  encode(message: FetchGitRefsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.refNames) {
      writer.uint32(10).string(v!);
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchGitRefsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchGitRefsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.refNames.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchGitRefsResponse {
    return {
      refNames: globalThis.Array.isArray(object?.refNames) ? object.refNames.map((e: any) => globalThis.String(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: FetchGitRefsResponse): unknown {
    const obj: any = {};
    if (message.refNames?.length) {
      obj.refNames = message.refNames;
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchGitRefsResponse>): FetchGitRefsResponse {
    return FetchGitRefsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchGitRefsResponse>): FetchGitRefsResponse {
    const message = createBaseFetchGitRefsResponse();
    message.refNames = object.refNames?.map((e) => e) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service describing handlers for resources */
export type DeveloperConnectDefinition = typeof DeveloperConnectDefinition;
export const DeveloperConnectDefinition = {
  name: "DeveloperConnect",
  fullName: "google.cloud.developerconnect.v1.DeveloperConnect",
  methods: {
    /** Lists Connections in a given project and location. */
    listConnections: {
      name: "ListConnections",
      requestType: ListConnectionsRequest,
      requestStream: false,
      responseType: ListConnectionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Connection. */
    getConnection: {
      name: "GetConnection",
      requestType: GetConnectionRequest,
      requestStream: false,
      responseType: Connection,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Connection in a given project and location. */
    createConnection: {
      name: "CreateConnection",
      requestType: CreateConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              44,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              10,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single Connection. */
    updateConnection: {
      name: "UpdateConnection",
      requestType: UpdateConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              22,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              72,
              58,
              10,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              50,
              58,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Connection. */
    deleteConnection: {
      name: "DeleteConnection",
      requestType: DeleteConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
     * Connect will configure the Git Repository to send webhook events to
     * Developer Connect. Connections that use Firebase GitHub Application will
     * have events forwarded to the Firebase service. All other Connections will
     * have events forwarded to Cloud Build.
     */
    createGitRepositoryLink: {
      name: "CreateGitRepositoryLink",
      requestType: CreateGitRepositoryLinkRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              71,
              105,
              116,
              82,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              76,
              105,
              110,
              107,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              49,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              103,
              105,
              116,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              44,
              103,
              105,
              116,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              91,
              58,
              19,
              103,
              105,
              116,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              34,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              103,
              105,
              116,
              82,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single GitRepositoryLink. */
    deleteGitRepositoryLink: {
      name: "DeleteGitRepositoryLink",
      requestType: DeleteGitRepositoryLinkRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              70,
              42,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              105,
              116,
              82,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists GitRepositoryLinks in a given project, location, and connection. */
    listGitRepositoryLinks: {
      name: "ListGitRepositoryLinks",
      requestType: ListGitRepositoryLinksRequest,
      requestStream: false,
      responseType: ListGitRepositoryLinksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              103,
              105,
              116,
              82,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single GitRepositoryLink. */
    getGitRepositoryLink: {
      name: "GetGitRepositoryLink",
      requestType: GetGitRepositoryLinkRequest,
      requestStream: false,
      responseType: GitRepositoryLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              105,
              116,
              82,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Fetches read/write token of a given gitRepositoryLink. */
    fetchReadWriteToken: {
      name: "FetchReadWriteToken",
      requestType: FetchReadWriteTokenRequest,
      requestStream: false,
      responseType: FetchReadWriteTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              103,
              105,
              116,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              108,
              58,
              1,
              42,
              34,
              103,
              47,
              118,
              49,
              47,
              123,
              103,
              105,
              116,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              105,
              116,
              82,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              82,
              101,
              97,
              100,
              87,
              114,
              105,
              116,
              101,
              84,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /** Fetches read token of a given gitRepositoryLink. */
    fetchReadToken: {
      name: "FetchReadToken",
      requestType: FetchReadTokenRequest,
      requestStream: false,
      responseType: FetchReadTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              103,
              105,
              116,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              103,
              58,
              1,
              42,
              34,
              98,
              47,
              118,
              49,
              47,
              123,
              103,
              105,
              116,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              105,
              116,
              82,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              82,
              101,
              97,
              100,
              84,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * FetchLinkableGitRepositories returns a list of git repositories from an SCM
     * that are available to be added to a Connection.
     */
    fetchLinkableGitRepositories: {
      name: "FetchLinkableGitRepositories",
      requestType: FetchLinkableGitRepositoriesRequest,
      requestStream: false,
      responseType: FetchLinkableGitRepositoriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110])],
          578365826: [
            Buffer.from([
              84,
              18,
              82,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              76,
              105,
              110,
              107,
              97,
              98,
              108,
              101,
              71,
              105,
              116,
              82,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * FetchGitHubInstallations returns the list of GitHub Installations that
     * are available to be added to a Connection.
     * For github.com, only installations accessible to the authorizer token
     * are returned. For GitHub Enterprise, all installations are returned.
     */
    fetchGitHubInstallations: {
      name: "FetchGitHubInstallations",
      requestType: FetchGitHubInstallationsRequest,
      requestStream: false,
      responseType: FetchGitHubInstallationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110])],
          578365826: [
            Buffer.from([
              80,
              18,
              78,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              71,
              105,
              116,
              72,
              117,
              98,
              73,
              110,
              115,
              116,
              97,
              108,
              108,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Fetch the list of branches or tags for a given repository. */
    fetchGitRefs: {
      name: "FetchGitRefs",
      requestType: FetchGitRefsRequest,
      requestStream: false,
      responseType: FetchGitRefsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              28,
              103,
              105,
              116,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              44,
              114,
              101,
              102,
              95,
              116,
              121,
              112,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              98,
              18,
              96,
              47,
              118,
              49,
              47,
              123,
              103,
              105,
              116,
              95,
              114,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              95,
              108,
              105,
              110,
              107,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              103,
              105,
              116,
              82,
              101,
              112,
              111,
              115,
              105,
              116,
              111,
              114,
              121,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              71,
              105,
              116,
              82,
              101,
              102,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DeveloperConnectServiceImplementation<CallContextExt = {}> {
  /** Lists Connections in a given project and location. */
  listConnections(
    request: ListConnectionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConnectionsResponse>>;
  /** Gets details of a single Connection. */
  getConnection(request: GetConnectionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Connection>>;
  /** Creates a new Connection in a given project and location. */
  createConnection(
    request: CreateConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single Connection. */
  updateConnection(
    request: UpdateConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Connection. */
  deleteConnection(
    request: DeleteConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
   * Connect will configure the Git Repository to send webhook events to
   * Developer Connect. Connections that use Firebase GitHub Application will
   * have events forwarded to the Firebase service. All other Connections will
   * have events forwarded to Cloud Build.
   */
  createGitRepositoryLink(
    request: CreateGitRepositoryLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single GitRepositoryLink. */
  deleteGitRepositoryLink(
    request: DeleteGitRepositoryLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists GitRepositoryLinks in a given project, location, and connection. */
  listGitRepositoryLinks(
    request: ListGitRepositoryLinksRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGitRepositoryLinksResponse>>;
  /** Gets details of a single GitRepositoryLink. */
  getGitRepositoryLink(
    request: GetGitRepositoryLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GitRepositoryLink>>;
  /** Fetches read/write token of a given gitRepositoryLink. */
  fetchReadWriteToken(
    request: FetchReadWriteTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchReadWriteTokenResponse>>;
  /** Fetches read token of a given gitRepositoryLink. */
  fetchReadToken(
    request: FetchReadTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchReadTokenResponse>>;
  /**
   * FetchLinkableGitRepositories returns a list of git repositories from an SCM
   * that are available to be added to a Connection.
   */
  fetchLinkableGitRepositories(
    request: FetchLinkableGitRepositoriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchLinkableGitRepositoriesResponse>>;
  /**
   * FetchGitHubInstallations returns the list of GitHub Installations that
   * are available to be added to a Connection.
   * For github.com, only installations accessible to the authorizer token
   * are returned. For GitHub Enterprise, all installations are returned.
   */
  fetchGitHubInstallations(
    request: FetchGitHubInstallationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchGitHubInstallationsResponse>>;
  /** Fetch the list of branches or tags for a given repository. */
  fetchGitRefs(
    request: FetchGitRefsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchGitRefsResponse>>;
}

export interface DeveloperConnectClient<CallOptionsExt = {}> {
  /** Lists Connections in a given project and location. */
  listConnections(
    request: DeepPartial<ListConnectionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConnectionsResponse>;
  /** Gets details of a single Connection. */
  getConnection(
    request: DeepPartial<GetConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Connection>;
  /** Creates a new Connection in a given project and location. */
  createConnection(
    request: DeepPartial<CreateConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single Connection. */
  updateConnection(
    request: DeepPartial<UpdateConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Connection. */
  deleteConnection(
    request: DeepPartial<DeleteConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
   * Connect will configure the Git Repository to send webhook events to
   * Developer Connect. Connections that use Firebase GitHub Application will
   * have events forwarded to the Firebase service. All other Connections will
   * have events forwarded to Cloud Build.
   */
  createGitRepositoryLink(
    request: DeepPartial<CreateGitRepositoryLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single GitRepositoryLink. */
  deleteGitRepositoryLink(
    request: DeepPartial<DeleteGitRepositoryLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists GitRepositoryLinks in a given project, location, and connection. */
  listGitRepositoryLinks(
    request: DeepPartial<ListGitRepositoryLinksRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGitRepositoryLinksResponse>;
  /** Gets details of a single GitRepositoryLink. */
  getGitRepositoryLink(
    request: DeepPartial<GetGitRepositoryLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GitRepositoryLink>;
  /** Fetches read/write token of a given gitRepositoryLink. */
  fetchReadWriteToken(
    request: DeepPartial<FetchReadWriteTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchReadWriteTokenResponse>;
  /** Fetches read token of a given gitRepositoryLink. */
  fetchReadToken(
    request: DeepPartial<FetchReadTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchReadTokenResponse>;
  /**
   * FetchLinkableGitRepositories returns a list of git repositories from an SCM
   * that are available to be added to a Connection.
   */
  fetchLinkableGitRepositories(
    request: DeepPartial<FetchLinkableGitRepositoriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchLinkableGitRepositoriesResponse>;
  /**
   * FetchGitHubInstallations returns the list of GitHub Installations that
   * are available to be added to a Connection.
   * For github.com, only installations accessible to the authorizer token
   * are returned. For GitHub Enterprise, all installations are returned.
   */
  fetchGitHubInstallations(
    request: DeepPartial<FetchGitHubInstallationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchGitHubInstallationsResponse>;
  /** Fetch the list of branches or tags for a given repository. */
  fetchGitRefs(
    request: DeepPartial<FetchGitRefsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchGitRefsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
