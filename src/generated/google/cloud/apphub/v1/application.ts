// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apphub/v1/application.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Attributes } from "./attributes.js";

export const protobufPackage = "google.cloud.apphub.v1";

/**
 * Application defines the governance boundary for App Hub Entities that
 * perform a logical end-to-end business function.
 * App Hub supports application level IAM permission to align with governance
 * requirements.
 */
export interface Application {
  /**
   * Identifier. The resource name of an Application. Format:
   * "projects/{host-project-id}/locations/{location}/applications/{application-id}"
   */
  name: string;
  /**
   * Optional. User-defined name for the Application.
   * Can have a maximum length of 63 characters.
   */
  displayName: string;
  /**
   * Optional. User-defined description of an Application.
   * Can have a maximum length of 2048 characters.
   */
  description: string;
  /** Optional. Consumer provided attributes. */
  attributes:
    | Attributes
    | undefined;
  /** Output only. Create time. */
  createTime:
    | Date
    | undefined;
  /** Output only. Update time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Required. Immutable. Defines what data can be included into this
   * Application. Limits which Services and Workloads can be registered.
   */
  scope:
    | Scope
    | undefined;
  /**
   * Output only. A universally unique identifier (in UUID4 format) for the
   * `Application`.
   */
  uid: string;
  /** Output only. Application state. */
  state: Application_State;
}

/** Application state. */
export enum Application_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The Application is being created. */
  CREATING = 1,
  /** ACTIVE - The Application is ready to register Services and Workloads. */
  ACTIVE = 2,
  /** DELETING - The Application is being deleted. */
  DELETING = 3,
  UNRECOGNIZED = -1,
}

export function application_StateFromJSON(object: any): Application_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Application_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Application_State.CREATING;
    case 2:
    case "ACTIVE":
      return Application_State.ACTIVE;
    case 3:
    case "DELETING":
      return Application_State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Application_State.UNRECOGNIZED;
  }
}

export function application_StateToJSON(object: Application_State): string {
  switch (object) {
    case Application_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Application_State.CREATING:
      return "CREATING";
    case Application_State.ACTIVE:
      return "ACTIVE";
    case Application_State.DELETING:
      return "DELETING";
    case Application_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Scope of an application. */
export interface Scope {
  /** Required. Scope Type. */
  type: Scope_Type;
}

/** Scope Type. */
export enum Scope_Type {
  /** TYPE_UNSPECIFIED - Unspecified type. */
  TYPE_UNSPECIFIED = 0,
  /** REGIONAL - Regional type. */
  REGIONAL = 1,
  UNRECOGNIZED = -1,
}

export function scope_TypeFromJSON(object: any): Scope_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Scope_Type.TYPE_UNSPECIFIED;
    case 1:
    case "REGIONAL":
      return Scope_Type.REGIONAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Scope_Type.UNRECOGNIZED;
  }
}

export function scope_TypeToJSON(object: Scope_Type): string {
  switch (object) {
    case Scope_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Scope_Type.REGIONAL:
      return "REGIONAL";
    case Scope_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseApplication(): Application {
  return {
    name: "",
    displayName: "",
    description: "",
    attributes: undefined,
    createTime: undefined,
    updateTime: undefined,
    scope: undefined,
    uid: "",
    state: 0,
  };
}

export const Application: MessageFns<Application> = {
  encode(message: Application, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.attributes !== undefined) {
      Attributes.encode(message.attributes, writer.uint32(34).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.scope !== undefined) {
      Scope.encode(message.scope, writer.uint32(74).fork()).join();
    }
    if (message.uid !== "") {
      writer.uint32(82).string(message.uid);
    }
    if (message.state !== 0) {
      writer.uint32(88).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Application {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.attributes = Attributes.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.scope = Scope.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Application {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      attributes: isSet(object.attributes) ? Attributes.fromJSON(object.attributes) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      scope: isSet(object.scope) ? Scope.fromJSON(object.scope) : undefined,
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      state: isSet(object.state) ? application_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Application): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.attributes !== undefined) {
      obj.attributes = Attributes.toJSON(message.attributes);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.scope !== undefined) {
      obj.scope = Scope.toJSON(message.scope);
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.state !== 0) {
      obj.state = application_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Application>): Application {
    return Application.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Application>): Application {
    const message = createBaseApplication();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? Attributes.fromPartial(object.attributes)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.scope = (object.scope !== undefined && object.scope !== null) ? Scope.fromPartial(object.scope) : undefined;
    message.uid = object.uid ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseScope(): Scope {
  return { type: 0 };
}

export const Scope: MessageFns<Scope> = {
  encode(message: Scope, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Scope {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Scope {
    return { type: isSet(object.type) ? scope_TypeFromJSON(object.type) : 0 };
  },

  toJSON(message: Scope): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = scope_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Scope>): Scope {
    return Scope.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Scope>): Scope {
    const message = createBaseScope();
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
