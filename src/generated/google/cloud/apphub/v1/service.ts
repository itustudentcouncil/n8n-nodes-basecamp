// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apphub/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Attributes } from "./attributes.js";

export const protobufPackage = "google.cloud.apphub.v1";

/**
 * Service is an App Hub data model that contains a discovered service, which
 * represents a network/api interface that exposes some functionality to clients
 * for consumption over the network.
 */
export interface Service {
  /**
   * Identifier. The resource name of a Service. Format:
   * "projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}"
   */
  name: string;
  /**
   * Optional. User-defined name for the Service.
   * Can have a maximum length of 63 characters.
   */
  displayName: string;
  /**
   * Optional. User-defined description of a Service.
   * Can have a maximum length of 2048 characters.
   */
  description: string;
  /**
   * Output only. Reference to an underlying networking resource that can
   * comprise a Service. These are immutable.
   */
  serviceReference:
    | ServiceReference
    | undefined;
  /**
   * Output only. Properties of an underlying compute resource that can comprise
   * a Service. These are immutable.
   */
  serviceProperties:
    | ServiceProperties
    | undefined;
  /** Optional. Consumer provided attributes. */
  attributes:
    | Attributes
    | undefined;
  /** Required. Immutable. The resource name of the original discovered service. */
  discoveredService: string;
  /** Output only. Create time. */
  createTime:
    | Date
    | undefined;
  /** Output only. Update time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. A universally unique identifier (UUID) for the `Service` in
   * the UUID4 format.
   */
  uid: string;
  /** Output only. Service state. */
  state: Service_State;
}

/** Service state. */
export enum Service_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The service is being created. */
  CREATING = 1,
  /** ACTIVE - The service is ready. */
  ACTIVE = 2,
  /** DELETING - The service is being deleted. */
  DELETING = 3,
  /** DETACHED - The underlying networking resources have been deleted. */
  DETACHED = 4,
  UNRECOGNIZED = -1,
}

export function service_StateFromJSON(object: any): Service_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Service_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Service_State.CREATING;
    case 2:
    case "ACTIVE":
      return Service_State.ACTIVE;
    case 3:
    case "DELETING":
      return Service_State.DELETING;
    case 4:
    case "DETACHED":
      return Service_State.DETACHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Service_State.UNRECOGNIZED;
  }
}

export function service_StateToJSON(object: Service_State): string {
  switch (object) {
    case Service_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Service_State.CREATING:
      return "CREATING";
    case Service_State.ACTIVE:
      return "ACTIVE";
    case Service_State.DELETING:
      return "DELETING";
    case Service_State.DETACHED:
      return "DETACHED";
    case Service_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Reference to an underlying networking resource that can comprise a Service. */
export interface ServiceReference {
  /**
   * Output only. The underlying resource URI (For example, URI of Forwarding
   * Rule, URL Map, and Backend Service).
   */
  uri: string;
}

/** Properties of an underlying cloud resource that can comprise a Service. */
export interface ServiceProperties {
  /**
   * Output only. The service project identifier that the underlying cloud
   * resource resides in.
   */
  gcpProject: string;
  /**
   * Output only. The location that the underlying resource resides in, for
   * example, us-west1.
   */
  location: string;
  /**
   * Output only. The location that the underlying resource resides in if it is
   * zonal, for example, us-west1-a).
   */
  zone: string;
}

/**
 * DiscoveredService is a network/api interface that exposes some functionality
 * to clients for consumption over the network. A discovered service can be
 * registered to a App Hub service.
 */
export interface DiscoveredService {
  /**
   * Identifier. The resource name of the discovered service. Format:
   * "projects/{host-project-id}/locations/{location}/discoveredServices/{uuid}""
   */
  name: string;
  /**
   * Output only. Reference to an underlying networking resource that can
   * comprise a Service. These are immutable.
   */
  serviceReference:
    | ServiceReference
    | undefined;
  /**
   * Output only. Properties of an underlying compute resource that can comprise
   * a Service. These are immutable.
   */
  serviceProperties: ServiceProperties | undefined;
}

function createBaseService(): Service {
  return {
    name: "",
    displayName: "",
    description: "",
    serviceReference: undefined,
    serviceProperties: undefined,
    attributes: undefined,
    discoveredService: "",
    createTime: undefined,
    updateTime: undefined,
    uid: "",
    state: 0,
  };
}

export const Service: MessageFns<Service> = {
  encode(message: Service, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.serviceReference !== undefined) {
      ServiceReference.encode(message.serviceReference, writer.uint32(34).fork()).join();
    }
    if (message.serviceProperties !== undefined) {
      ServiceProperties.encode(message.serviceProperties, writer.uint32(42).fork()).join();
    }
    if (message.attributes !== undefined) {
      Attributes.encode(message.attributes, writer.uint32(50).fork()).join();
    }
    if (message.discoveredService !== "") {
      writer.uint32(58).string(message.discoveredService);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(66).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(74).fork()).join();
    }
    if (message.uid !== "") {
      writer.uint32(82).string(message.uid);
    }
    if (message.state !== 0) {
      writer.uint32(88).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Service {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serviceReference = ServiceReference.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.serviceProperties = ServiceProperties.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.attributes = Attributes.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.discoveredService = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Service {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      serviceReference: isSet(object.serviceReference) ? ServiceReference.fromJSON(object.serviceReference) : undefined,
      serviceProperties: isSet(object.serviceProperties)
        ? ServiceProperties.fromJSON(object.serviceProperties)
        : undefined,
      attributes: isSet(object.attributes) ? Attributes.fromJSON(object.attributes) : undefined,
      discoveredService: isSet(object.discoveredService) ? globalThis.String(object.discoveredService) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      state: isSet(object.state) ? service_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Service): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.serviceReference !== undefined) {
      obj.serviceReference = ServiceReference.toJSON(message.serviceReference);
    }
    if (message.serviceProperties !== undefined) {
      obj.serviceProperties = ServiceProperties.toJSON(message.serviceProperties);
    }
    if (message.attributes !== undefined) {
      obj.attributes = Attributes.toJSON(message.attributes);
    }
    if (message.discoveredService !== "") {
      obj.discoveredService = message.discoveredService;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.state !== 0) {
      obj.state = service_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Service>): Service {
    return Service.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Service>): Service {
    const message = createBaseService();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.serviceReference = (object.serviceReference !== undefined && object.serviceReference !== null)
      ? ServiceReference.fromPartial(object.serviceReference)
      : undefined;
    message.serviceProperties = (object.serviceProperties !== undefined && object.serviceProperties !== null)
      ? ServiceProperties.fromPartial(object.serviceProperties)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? Attributes.fromPartial(object.attributes)
      : undefined;
    message.discoveredService = object.discoveredService ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.uid = object.uid ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseServiceReference(): ServiceReference {
  return { uri: "" };
}

export const ServiceReference: MessageFns<ServiceReference> = {
  encode(message: ServiceReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceReference {
    return { uri: isSet(object.uri) ? globalThis.String(object.uri) : "" };
  },

  toJSON(message: ServiceReference): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(base?: DeepPartial<ServiceReference>): ServiceReference {
    return ServiceReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServiceReference>): ServiceReference {
    const message = createBaseServiceReference();
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseServiceProperties(): ServiceProperties {
  return { gcpProject: "", location: "", zone: "" };
}

export const ServiceProperties: MessageFns<ServiceProperties> = {
  encode(message: ServiceProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcpProject !== "") {
      writer.uint32(10).string(message.gcpProject);
    }
    if (message.location !== "") {
      writer.uint32(18).string(message.location);
    }
    if (message.zone !== "") {
      writer.uint32(26).string(message.zone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcpProject = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.location = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.zone = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceProperties {
    return {
      gcpProject: isSet(object.gcpProject) ? globalThis.String(object.gcpProject) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
    };
  },

  toJSON(message: ServiceProperties): unknown {
    const obj: any = {};
    if (message.gcpProject !== "") {
      obj.gcpProject = message.gcpProject;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    return obj;
  },

  create(base?: DeepPartial<ServiceProperties>): ServiceProperties {
    return ServiceProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServiceProperties>): ServiceProperties {
    const message = createBaseServiceProperties();
    message.gcpProject = object.gcpProject ?? "";
    message.location = object.location ?? "";
    message.zone = object.zone ?? "";
    return message;
  },
};

function createBaseDiscoveredService(): DiscoveredService {
  return { name: "", serviceReference: undefined, serviceProperties: undefined };
}

export const DiscoveredService: MessageFns<DiscoveredService> = {
  encode(message: DiscoveredService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.serviceReference !== undefined) {
      ServiceReference.encode(message.serviceReference, writer.uint32(18).fork()).join();
    }
    if (message.serviceProperties !== undefined) {
      ServiceProperties.encode(message.serviceProperties, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscoveredService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscoveredService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceReference = ServiceReference.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.serviceProperties = ServiceProperties.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscoveredService {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      serviceReference: isSet(object.serviceReference) ? ServiceReference.fromJSON(object.serviceReference) : undefined,
      serviceProperties: isSet(object.serviceProperties)
        ? ServiceProperties.fromJSON(object.serviceProperties)
        : undefined,
    };
  },

  toJSON(message: DiscoveredService): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.serviceReference !== undefined) {
      obj.serviceReference = ServiceReference.toJSON(message.serviceReference);
    }
    if (message.serviceProperties !== undefined) {
      obj.serviceProperties = ServiceProperties.toJSON(message.serviceProperties);
    }
    return obj;
  },

  create(base?: DeepPartial<DiscoveredService>): DiscoveredService {
    return DiscoveredService.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DiscoveredService>): DiscoveredService {
    const message = createBaseDiscoveredService();
    message.name = object.name ?? "";
    message.serviceReference = (object.serviceReference !== undefined && object.serviceReference !== null)
      ? ServiceReference.fromPartial(object.serviceReference)
      : undefined;
    message.serviceProperties = (object.serviceProperties !== undefined && object.serviceProperties !== null)
      ? ServiceProperties.fromPartial(object.serviceProperties)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
