// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apphub/v1/service_project_attachment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.apphub.v1";

/**
 * ServiceProjectAttachment represents an attachment from a service project to a
 * host project. Service projects contain the underlying cloud
 * infrastructure resources, and expose these resources to the host project
 * through a ServiceProjectAttachment. With the attachments, the host project
 * can provide an aggregated view of resources across all service projects.
 */
export interface ServiceProjectAttachment {
  /**
   * Identifier. The resource name of a ServiceProjectAttachment. Format:
   * "projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}."
   */
  name: string;
  /**
   * Required. Immutable. Service project name in the format: "projects/abc" or
   * "projects/123". As input, project name with either project id or number are
   * accepted. As output, this field will contain project number.
   */
  serviceProject: string;
  /** Output only. Create time. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. A globally unique identifier (in UUID4 format) for the
   * `ServiceProjectAttachment`.
   */
  uid: string;
  /** Output only. ServiceProjectAttachment state. */
  state: ServiceProjectAttachment_State;
}

/** ServiceProjectAttachment state. */
export enum ServiceProjectAttachment_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The ServiceProjectAttachment is being created. */
  CREATING = 1,
  /**
   * ACTIVE - The ServiceProjectAttachment is ready.
   * This means Services and Workloads under the corresponding
   * ServiceProjectAttachment is ready for registration.
   */
  ACTIVE = 2,
  /** DELETING - The ServiceProjectAttachment is being deleted. */
  DELETING = 3,
  UNRECOGNIZED = -1,
}

export function serviceProjectAttachment_StateFromJSON(object: any): ServiceProjectAttachment_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ServiceProjectAttachment_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return ServiceProjectAttachment_State.CREATING;
    case 2:
    case "ACTIVE":
      return ServiceProjectAttachment_State.ACTIVE;
    case 3:
    case "DELETING":
      return ServiceProjectAttachment_State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ServiceProjectAttachment_State.UNRECOGNIZED;
  }
}

export function serviceProjectAttachment_StateToJSON(object: ServiceProjectAttachment_State): string {
  switch (object) {
    case ServiceProjectAttachment_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ServiceProjectAttachment_State.CREATING:
      return "CREATING";
    case ServiceProjectAttachment_State.ACTIVE:
      return "ACTIVE";
    case ServiceProjectAttachment_State.DELETING:
      return "DELETING";
    case ServiceProjectAttachment_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseServiceProjectAttachment(): ServiceProjectAttachment {
  return { name: "", serviceProject: "", createTime: undefined, uid: "", state: 0 };
}

export const ServiceProjectAttachment: MessageFns<ServiceProjectAttachment> = {
  encode(message: ServiceProjectAttachment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.serviceProject !== "") {
      writer.uint32(18).string(message.serviceProject);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.uid !== "") {
      writer.uint32(34).string(message.uid);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceProjectAttachment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceProjectAttachment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceProject = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceProjectAttachment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      serviceProject: isSet(object.serviceProject) ? globalThis.String(object.serviceProject) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      state: isSet(object.state) ? serviceProjectAttachment_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: ServiceProjectAttachment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.serviceProject !== "") {
      obj.serviceProject = message.serviceProject;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.state !== 0) {
      obj.state = serviceProjectAttachment_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<ServiceProjectAttachment>): ServiceProjectAttachment {
    return ServiceProjectAttachment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServiceProjectAttachment>): ServiceProjectAttachment {
    const message = createBaseServiceProjectAttachment();
    message.name = object.name ?? "";
    message.serviceProject = object.serviceProject ?? "";
    message.createTime = object.createTime ?? undefined;
    message.uid = object.uid ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
