// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securityposture/v1/sha_constraints.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { CustomConfig } from "./sha_custom_config.js";

export const protobufPackage = "google.cloud.securityposture.v1";

/** Possible enablement states of a service or module. */
export enum EnablementState {
  /** ENABLEMENT_STATE_UNSPECIFIED - Default value. This value is unused. */
  ENABLEMENT_STATE_UNSPECIFIED = 0,
  /** ENABLED - State is enabled. */
  ENABLED = 1,
  /** DISABLED - State is disabled. */
  DISABLED = 2,
  UNRECOGNIZED = -1,
}

export function enablementStateFromJSON(object: any): EnablementState {
  switch (object) {
    case 0:
    case "ENABLEMENT_STATE_UNSPECIFIED":
      return EnablementState.ENABLEMENT_STATE_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return EnablementState.ENABLED;
    case 2:
    case "DISABLED":
      return EnablementState.DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EnablementState.UNRECOGNIZED;
  }
}

export function enablementStateToJSON(object: EnablementState): string {
  switch (object) {
    case EnablementState.ENABLEMENT_STATE_UNSPECIFIED:
      return "ENABLEMENT_STATE_UNSPECIFIED";
    case EnablementState.ENABLED:
      return "ENABLED";
    case EnablementState.DISABLED:
      return "DISABLED";
    case EnablementState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Message for Security Health Analytics built-in detector. */
export interface SecurityHealthAnalyticsModule {
  /** Required. The name of the module eg: BIGQUERY_TABLE_CMEK_DISABLED. */
  moduleName: string;
  /**
   * The state of enablement for the module at its level of the resource
   * hierarchy.
   */
  moduleEnablementState: EnablementState;
}

/** Message for SHA Custom Module */
export interface SecurityHealthAnalyticsCustomModule {
  /**
   * Output only. Immutable. The id of the custom module.
   * The id is server-generated and is not user settable.
   * It will be a numeric id containing 1-20 digits.
   */
  id: string;
  /**
   * Optional. The display name of the Security Health Analytics custom module.
   * This display name becomes the finding category for all findings that are
   * returned by this custom module. The display name must be between 1 and
   * 128 characters, start with a lowercase letter, and contain alphanumeric
   * characters or underscores only.
   */
  displayName: string;
  /** Required. custom module details */
  config:
    | CustomConfig
    | undefined;
  /**
   * The state of enablement for the module at its level of the resource
   * hierarchy.
   */
  moduleEnablementState: EnablementState;
}

function createBaseSecurityHealthAnalyticsModule(): SecurityHealthAnalyticsModule {
  return { moduleName: "", moduleEnablementState: 0 };
}

export const SecurityHealthAnalyticsModule: MessageFns<SecurityHealthAnalyticsModule> = {
  encode(message: SecurityHealthAnalyticsModule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.moduleName !== "") {
      writer.uint32(10).string(message.moduleName);
    }
    if (message.moduleEnablementState !== 0) {
      writer.uint32(16).int32(message.moduleEnablementState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityHealthAnalyticsModule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityHealthAnalyticsModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.moduleName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.moduleEnablementState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityHealthAnalyticsModule {
    return {
      moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
      moduleEnablementState: isSet(object.moduleEnablementState)
        ? enablementStateFromJSON(object.moduleEnablementState)
        : 0,
    };
  },

  toJSON(message: SecurityHealthAnalyticsModule): unknown {
    const obj: any = {};
    if (message.moduleName !== "") {
      obj.moduleName = message.moduleName;
    }
    if (message.moduleEnablementState !== 0) {
      obj.moduleEnablementState = enablementStateToJSON(message.moduleEnablementState);
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityHealthAnalyticsModule>): SecurityHealthAnalyticsModule {
    return SecurityHealthAnalyticsModule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityHealthAnalyticsModule>): SecurityHealthAnalyticsModule {
    const message = createBaseSecurityHealthAnalyticsModule();
    message.moduleName = object.moduleName ?? "";
    message.moduleEnablementState = object.moduleEnablementState ?? 0;
    return message;
  },
};

function createBaseSecurityHealthAnalyticsCustomModule(): SecurityHealthAnalyticsCustomModule {
  return { id: "", displayName: "", config: undefined, moduleEnablementState: 0 };
}

export const SecurityHealthAnalyticsCustomModule: MessageFns<SecurityHealthAnalyticsCustomModule> = {
  encode(message: SecurityHealthAnalyticsCustomModule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.config !== undefined) {
      CustomConfig.encode(message.config, writer.uint32(26).fork()).join();
    }
    if (message.moduleEnablementState !== 0) {
      writer.uint32(32).int32(message.moduleEnablementState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityHealthAnalyticsCustomModule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityHealthAnalyticsCustomModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.config = CustomConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.moduleEnablementState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityHealthAnalyticsCustomModule {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      config: isSet(object.config) ? CustomConfig.fromJSON(object.config) : undefined,
      moduleEnablementState: isSet(object.moduleEnablementState)
        ? enablementStateFromJSON(object.moduleEnablementState)
        : 0,
    };
  },

  toJSON(message: SecurityHealthAnalyticsCustomModule): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.config !== undefined) {
      obj.config = CustomConfig.toJSON(message.config);
    }
    if (message.moduleEnablementState !== 0) {
      obj.moduleEnablementState = enablementStateToJSON(message.moduleEnablementState);
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityHealthAnalyticsCustomModule>): SecurityHealthAnalyticsCustomModule {
    return SecurityHealthAnalyticsCustomModule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityHealthAnalyticsCustomModule>): SecurityHealthAnalyticsCustomModule {
    const message = createBaseSecurityHealthAnalyticsCustomModule();
    message.id = object.id ?? "";
    message.displayName = object.displayName ?? "";
    message.config = (object.config !== undefined && object.config !== null)
      ? CustomConfig.fromPartial(object.config)
      : undefined;
    message.moduleEnablementState = object.moduleEnablementState ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
