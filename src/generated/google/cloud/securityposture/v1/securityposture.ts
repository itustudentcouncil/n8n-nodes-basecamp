// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securityposture/v1/securityposture.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { OrgPolicyConstraint, OrgPolicyConstraintCustom } from "./org_policy_constraints.js";
import { SecurityHealthAnalyticsCustomModule, SecurityHealthAnalyticsModule } from "./sha_constraints.js";

export const protobufPackage = "google.cloud.securityposture.v1";

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
  /**
   * Output only. This is a output only optional field which will be filled only
   * in cases where PostureDeployments enter failure states like UPDATE_FAILED
   * or CREATE_FAILED or DELETE_FAILED.
   */
  errorMessage: string;
}

/**
 * Postures
 * Definition of a Posture.
 */
export interface Posture {
  /**
   * Required. Identifier. The name of this Posture resource, in the format of
   * organizations/{org_id}/locations/{location_id}/postures/{posture}.
   */
  name: string;
  /** Required. State of Posture resource. */
  state: Posture_State;
  /**
   * Output only. Immutable. The revision ID of the posture.
   * The format is an 8-character hexadecimal string.
   * https://google.aip.dev/162
   */
  revisionId: string;
  /** Output only. The timestamp that the posture was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp that the posture was updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. User provided description of the posture. */
  description: string;
  /** Required. List of Policy sets. */
  policySets: PolicySet[];
  /**
   * Optional. An opaque tag indicating the current version of the Posture, used
   * for concurrency control. When the `Posture` is returned from either a
   * `GetPosture` or a `ListPostures` request, this `etag` indicates the version
   * of the current `Posture` to use when executing a read-modify-write loop.
   *
   * When the `Posture` is used in a `UpdatePosture` method, use the `etag`
   * value that was returned from a `GetPosture` request as part of a
   * read-modify-write loop for concurrency control. Not setting the `etag` in a
   * `UpdatePosture` request will result in an unconditional write of the
   * `Posture`.
   */
  etag: string;
  /**
   * Optional. User annotations. These attributes can only be set and used by
   * the user, and not by Google Security Postures.
   * .
   */
  annotations: { [key: string]: string };
  /**
   * Output only. Whether or not this Posture is in the process of being
   * updated.
   */
  reconciling: boolean;
}

/** State of a Posture. */
export enum Posture_State {
  /** STATE_UNSPECIFIED - Unspecified operation state. */
  STATE_UNSPECIFIED = 0,
  /** DEPRECATED - The Posture is marked deprecated when it is not in use by the user. */
  DEPRECATED = 1,
  /** DRAFT - The Posture is created successfully but is not yet ready for usage. */
  DRAFT = 2,
  /** ACTIVE - The Posture state is active. Ready for use/deployments. */
  ACTIVE = 3,
  UNRECOGNIZED = -1,
}

export function posture_StateFromJSON(object: any): Posture_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Posture_State.STATE_UNSPECIFIED;
    case 1:
    case "DEPRECATED":
      return Posture_State.DEPRECATED;
    case 2:
    case "DRAFT":
      return Posture_State.DRAFT;
    case 3:
    case "ACTIVE":
      return Posture_State.ACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Posture_State.UNRECOGNIZED;
  }
}

export function posture_StateToJSON(object: Posture_State): string {
  switch (object) {
    case Posture_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Posture_State.DEPRECATED:
      return "DEPRECATED";
    case Posture_State.DRAFT:
      return "DRAFT";
    case Posture_State.ACTIVE:
      return "ACTIVE";
    case Posture_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Posture_AnnotationsEntry {
  key: string;
  value: string;
}

/** PolicySet representation. */
export interface PolicySet {
  /** Required. ID of the Policy set. */
  policySetId: string;
  /** Optional. Description of the Policy set. */
  description: string;
  /** Required. List of policies. */
  policies: Policy[];
}

/** Policy representation. */
export interface Policy {
  /**
   * Required. ID of the Policy that is user generated, immutable and unique
   * within the scope of a policy set.
   */
  policyId: string;
  /** Optional. Contains list of mapping for a Policy to a standard and control. */
  complianceStandards: Policy_ComplianceStandard[];
  /** Required. Constraint details. */
  constraint:
    | Constraint
    | undefined;
  /** Optional. Description of the Policy. */
  description: string;
}

/** Mapping for a Policy to standard and control. */
export interface Policy_ComplianceStandard {
  /** Optional. The compliance standard that the Policy maps to, e.g.: CIS-2.0. */
  standard: string;
  /** Optional. Control mapping provided by user for this Policy. e.g.: 1.5. */
  control: string;
}

/** Representation of a Constraint. */
export interface Constraint {
  /** Optional. SHA built-in detector. */
  securityHealthAnalyticsModule?:
    | SecurityHealthAnalyticsModule
    | undefined;
  /** Optional. SHA custom detector. */
  securityHealthAnalyticsCustomModule?:
    | SecurityHealthAnalyticsCustomModule
    | undefined;
  /** Optional. Org Policy builtin constraint. */
  orgPolicyConstraint?:
    | OrgPolicyConstraint
    | undefined;
  /** Optional. Org Policy custom constraint. */
  orgPolicyConstraintCustom?: OrgPolicyConstraintCustom | undefined;
}

/** Message for requesting list of Postures. */
export interface ListPosturesRequest {
  /** Required. Parent value for ListPosturesRequest. */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
}

/** Message for response to listing Postures. */
export interface ListPosturesResponse {
  /** The list of Posture. */
  postures: Posture[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Unreachable resources. */
  unreachable: string[];
}

/** Message for requesting list of Posture revisions. */
export interface ListPostureRevisionsRequest {
  /** Required. Name value for ListPostureRevisionsRequest. */
  name: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick 100 as default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
}

/** Message for response to listing PostureRevisions. */
export interface ListPostureRevisionsResponse {
  /** The list of Posture revisions. */
  revisions: Posture[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** Message for getting a Posture. */
export interface GetPostureRequest {
  /** Required. Name of the resource. */
  name: string;
  /** Optional. Posture revision which needs to be retrieved. */
  revisionId: string;
}

/** Message for creating a Posture. */
export interface CreatePostureRequest {
  /** Required. Value for parent. */
  parent: string;
  /**
   * Required. User provided identifier. It should be unique in scope of an
   * Organization and location.
   */
  postureId: string;
  /** Required. The resource being created. */
  posture: Posture | undefined;
}

/** Message for updating a Posture. */
export interface UpdatePostureRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Posture resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated. */
  posture:
    | Posture
    | undefined;
  /** Required. Posture revision which needs to be updated. */
  revisionId: string;
}

/** Message for deleting a Posture. */
export interface DeletePostureRequest {
  /** Required. Name of the resource. */
  name: string;
  /** Optional. Etag value of the Posture to be deleted. */
  etag: string;
}

/** Message for extracting existing policies on a workload as a Posture. */
export interface ExtractPostureRequest {
  /**
   * Required. The parent resource name. The format of this value is as follows:
   * `organizations/{organization}/locations/{location}`
   */
  parent: string;
  /**
   * Required. User provided identifier. It should be unique in scope of an
   * Organization and location.
   */
  postureId: string;
  /**
   * Required. Workload from which the policies are to be extracted, it should
   * belong to the same organization defined in parent. The format of this value
   * varies depending on the scope of the request:
   * - `folder/folderNumber`
   * - `project/projectNumber`
   * - `organization/organizationNumber`
   */
  workload: string;
}

/**
 * ========================== PostureDeployments ==========================
 * Message describing PostureDeployment resource.
 */
export interface PostureDeployment {
  /**
   * Required. The name of this PostureDeployment resource, in the format of
   * organizations/{organization}/locations/{location_id}/postureDeployments/{postureDeployment}.
   */
  name: string;
  /**
   * Required. Target resource where the Posture will be deployed. Currently
   * supported resources are of types: projects/projectNumber,
   * folders/folderNumber, organizations/organizationNumber.
   */
  targetResource: string;
  /** Output only. State of PostureDeployment resource. */
  state: PostureDeployment_State;
  /**
   * Required. Posture that needs to be deployed.
   * Format:
   * organizations/{org_id}/locations/{location_id}/postures/<posture>
   * Example:
   * organizations/99/locations/global/postures/les-miserables.
   */
  postureId: string;
  /** Required. Revision_id of the Posture that is to be deployed. */
  postureRevisionId: string;
  /** Output only. The timestamp that the PostureDeployment was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp that the PostureDeployment was updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. User provided description of the PostureDeployment. */
  description: string;
  /**
   * Optional. An opaque tag indicating the current version of the
   * PostureDeployment, used for concurrency control. When the
   * `PostureDeployment` is returned from either a `GetPostureDeployment` or a
   * `ListPostureDeployments` request, this `etag` indicates the version of the
   * current `PostureDeployment` to use when executing a read-modify-write loop.
   *
   * When the `PostureDeployment` is used in a `UpdatePostureDeployment` method,
   * use the `etag` value that was returned from a `GetPostureDeployment`
   * request as part of a read-modify-write loop for concurrency control. Not
   * setting the `etag` in a `UpdatePostureDeployment` request will result in an
   * unconditional write of the `PostureDeployment`.
   */
  etag: string;
  /**
   * Optional. User annotations. These attributes can only be set and used by
   * the user, and not by Google Security Postures.
   * .
   */
  annotations: { [key: string]: string };
  /**
   * Output only. Whether or not this Posture is in the process of being
   * updated.
   */
  reconciling: boolean;
  /**
   * Output only. This is a output only optional field which will be filled in
   * case where PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or
   * DELETE_FAILED. It denotes the desired Posture.
   */
  desiredPostureId: string;
  /**
   * Output only. Output only optional field which provides revision_id of the
   * desired_posture_id.
   */
  desiredPostureRevisionId: string;
  /**
   * Output only. This is a output only optional field which will be filled in
   * case where PostureDeployment enters a failure state like UPDATE_FAILED or
   * CREATE_FAILED or DELETE_FAILED.
   */
  failureMessage: string;
}

/** State of a PostureDeployment. */
export enum PostureDeployment_State {
  /** STATE_UNSPECIFIED - Unspecified operation state. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The PostureDeployment is being created. */
  CREATING = 1,
  /** DELETING - The PostureDeployment is being deleted. */
  DELETING = 2,
  /** UPDATING - The PostureDeployment state is being updated. */
  UPDATING = 3,
  /** ACTIVE - The PostureDeployment state is active and in use. */
  ACTIVE = 4,
  /** CREATE_FAILED - The PostureDeployment creation failed. */
  CREATE_FAILED = 5,
  /** UPDATE_FAILED - The PostureDeployment update failed. */
  UPDATE_FAILED = 6,
  /** DELETE_FAILED - The PostureDeployment deletion failed. */
  DELETE_FAILED = 7,
  UNRECOGNIZED = -1,
}

export function postureDeployment_StateFromJSON(object: any): PostureDeployment_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return PostureDeployment_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return PostureDeployment_State.CREATING;
    case 2:
    case "DELETING":
      return PostureDeployment_State.DELETING;
    case 3:
    case "UPDATING":
      return PostureDeployment_State.UPDATING;
    case 4:
    case "ACTIVE":
      return PostureDeployment_State.ACTIVE;
    case 5:
    case "CREATE_FAILED":
      return PostureDeployment_State.CREATE_FAILED;
    case 6:
    case "UPDATE_FAILED":
      return PostureDeployment_State.UPDATE_FAILED;
    case 7:
    case "DELETE_FAILED":
      return PostureDeployment_State.DELETE_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PostureDeployment_State.UNRECOGNIZED;
  }
}

export function postureDeployment_StateToJSON(object: PostureDeployment_State): string {
  switch (object) {
    case PostureDeployment_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case PostureDeployment_State.CREATING:
      return "CREATING";
    case PostureDeployment_State.DELETING:
      return "DELETING";
    case PostureDeployment_State.UPDATING:
      return "UPDATING";
    case PostureDeployment_State.ACTIVE:
      return "ACTIVE";
    case PostureDeployment_State.CREATE_FAILED:
      return "CREATE_FAILED";
    case PostureDeployment_State.UPDATE_FAILED:
      return "UPDATE_FAILED";
    case PostureDeployment_State.DELETE_FAILED:
      return "DELETE_FAILED";
    case PostureDeployment_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PostureDeployment_AnnotationsEntry {
  key: string;
  value: string;
}

/** Message for requesting list of PostureDeployments. */
export interface ListPostureDeploymentsRequest {
  /** Required. Parent value for ListPostureDeploymentsRequest. */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /**
   * Optional. Filter to be applied on the resource, defined by EBNF grammar
   * https://google.aip.dev/assets/misc/ebnf-filtering.txt.
   */
  filter: string;
}

/** Message for response to listing PostureDeployments. */
export interface ListPostureDeploymentsResponse {
  /** The list of PostureDeployment. */
  postureDeployments: PostureDeployment[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a PostureDeployment. */
export interface GetPostureDeploymentRequest {
  /** Required. Name of the resource. */
  name: string;
}

/** Message for creating a PostureDeployment. */
export interface CreatePostureDeploymentRequest {
  /**
   * Required. Value for parent.
   * Format: organizations/{org_id}/locations/{location}
   */
  parent: string;
  /**
   * Required. User provided identifier. It should be unique in scope of an
   * Organization and location.
   */
  postureDeploymentId: string;
  /** Required. The resource being created. */
  postureDeployment: PostureDeployment | undefined;
}

/** Message for updating a PostureDeployment. */
export interface UpdatePostureDeploymentRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * PostureDeployment resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated. */
  postureDeployment: PostureDeployment | undefined;
}

/** Message for deleting a PostureDeployment. */
export interface DeletePostureDeploymentRequest {
  /** Required. Name of the resource. */
  name: string;
  /** Optional. Etag value of the PostureDeployment to be deleted. */
  etag: string;
}

/**
 * PostureTemplates
 * Message describing PostureTemplate object.
 */
export interface PostureTemplate {
  /**
   * Output only. Identifier. The name of the Posture template will be of the
   * format
   * organizations/{organization}/locations/{location}/postureTemplates/{postureTemplate}
   */
  name: string;
  /** Output only. The revision_id of a PostureTemplate. */
  revisionId: string;
  /** Output only. Description of the Posture template. */
  description: string;
  /** Output only. State of PostureTemplate resource. */
  state: PostureTemplate_State;
  /** Output only. Policy_sets to be used by the user. */
  policySets: PolicySet[];
}

/** State of a PostureTemplate */
export enum PostureTemplate_State {
  /** STATE_UNSPECIFIED - Unspecified state */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - If the Posture template is adhering to the latest controls and standards. */
  ACTIVE = 1,
  /**
   * DEPRECATED - If the Posture template controls and standards are outdated and not
   * recommended for use.
   */
  DEPRECATED = 2,
  UNRECOGNIZED = -1,
}

export function postureTemplate_StateFromJSON(object: any): PostureTemplate_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return PostureTemplate_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return PostureTemplate_State.ACTIVE;
    case 2:
    case "DEPRECATED":
      return PostureTemplate_State.DEPRECATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PostureTemplate_State.UNRECOGNIZED;
  }
}

export function postureTemplate_StateToJSON(object: PostureTemplate_State): string {
  switch (object) {
    case PostureTemplate_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case PostureTemplate_State.ACTIVE:
      return "ACTIVE";
    case PostureTemplate_State.DEPRECATED:
      return "DEPRECATED";
    case PostureTemplate_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Message for requesting list of Posture Templates. */
export interface ListPostureTemplatesRequest {
  /** Required. Parent value for ListPostureTemplatesRequest. */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /**
   * Optional. Filter to be applied on the resource, defined by EBNF grammar
   * https://google.aip.dev/assets/misc/ebnf-filtering.txt.
   */
  filter: string;
}

/** Message for response to listing PostureTemplates. */
export interface ListPostureTemplatesResponse {
  /** The list of PostureTemplate. */
  postureTemplates: PostureTemplate[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
}

/** Message for getting a Posture Template. */
export interface GetPostureTemplateRequest {
  /** Required. Name of the resource. */
  name: string;
  /**
   * Optional. Specific revision_id of a Posture Template.
   * PostureTemplate revision_id which needs to be retrieved.
   */
  revisionId: string;
}

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
    errorMessage: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    if (message.errorMessage !== "") {
      writer.uint32(66).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    message.errorMessage = object.errorMessage ?? "";
    return message;
  },
};

function createBasePosture(): Posture {
  return {
    name: "",
    state: 0,
    revisionId: "",
    createTime: undefined,
    updateTime: undefined,
    description: "",
    policySets: [],
    etag: "",
    annotations: {},
    reconciling: false,
  };
}

export const Posture: MessageFns<Posture> = {
  encode(message: Posture, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.revisionId !== "") {
      writer.uint32(26).string(message.revisionId);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    for (const v of message.policySets) {
      PolicySet.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(66).string(message.etag);
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      Posture_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    if (message.reconciling !== false) {
      writer.uint32(80).bool(message.reconciling);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Posture {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosture();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.revisionId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.policySets.push(PolicySet.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = Posture_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.annotations[entry9.key] = entry9.value;
          }
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.reconciling = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Posture {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? posture_StateFromJSON(object.state) : 0,
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      policySets: globalThis.Array.isArray(object?.policySets)
        ? object.policySets.map((e: any) => PolicySet.fromJSON(e))
        : [],
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      reconciling: isSet(object.reconciling) ? globalThis.Boolean(object.reconciling) : false,
    };
  },

  toJSON(message: Posture): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = posture_StateToJSON(message.state);
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.policySets?.length) {
      obj.policySets = message.policySets.map((e) => PolicySet.toJSON(e));
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.reconciling !== false) {
      obj.reconciling = message.reconciling;
    }
    return obj;
  },

  create(base?: DeepPartial<Posture>): Posture {
    return Posture.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Posture>): Posture {
    const message = createBasePosture();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.revisionId = object.revisionId ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.policySets = object.policySets?.map((e) => PolicySet.fromPartial(e)) || [];
    message.etag = object.etag ?? "";
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.reconciling = object.reconciling ?? false;
    return message;
  },
};

function createBasePosture_AnnotationsEntry(): Posture_AnnotationsEntry {
  return { key: "", value: "" };
}

export const Posture_AnnotationsEntry: MessageFns<Posture_AnnotationsEntry> = {
  encode(message: Posture_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Posture_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosture_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Posture_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Posture_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Posture_AnnotationsEntry>): Posture_AnnotationsEntry {
    return Posture_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Posture_AnnotationsEntry>): Posture_AnnotationsEntry {
    const message = createBasePosture_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBasePolicySet(): PolicySet {
  return { policySetId: "", description: "", policies: [] };
}

export const PolicySet: MessageFns<PolicySet> = {
  encode(message: PolicySet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policySetId !== "") {
      writer.uint32(10).string(message.policySetId);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.policies) {
      Policy.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PolicySet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicySet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policySetId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.policies.push(Policy.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PolicySet {
    return {
      policySetId: isSet(object.policySetId) ? globalThis.String(object.policySetId) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      policies: globalThis.Array.isArray(object?.policies) ? object.policies.map((e: any) => Policy.fromJSON(e)) : [],
    };
  },

  toJSON(message: PolicySet): unknown {
    const obj: any = {};
    if (message.policySetId !== "") {
      obj.policySetId = message.policySetId;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.policies?.length) {
      obj.policies = message.policies.map((e) => Policy.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PolicySet>): PolicySet {
    return PolicySet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PolicySet>): PolicySet {
    const message = createBasePolicySet();
    message.policySetId = object.policySetId ?? "";
    message.description = object.description ?? "";
    message.policies = object.policies?.map((e) => Policy.fromPartial(e)) || [];
    return message;
  },
};

function createBasePolicy(): Policy {
  return { policyId: "", complianceStandards: [], constraint: undefined, description: "" };
}

export const Policy: MessageFns<Policy> = {
  encode(message: Policy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policyId !== "") {
      writer.uint32(10).string(message.policyId);
    }
    for (const v of message.complianceStandards) {
      Policy_ComplianceStandard.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.constraint !== undefined) {
      Constraint.encode(message.constraint, writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policyId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.complianceStandards.push(Policy_ComplianceStandard.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.constraint = Constraint.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy {
    return {
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      complianceStandards: globalThis.Array.isArray(object?.complianceStandards)
        ? object.complianceStandards.map((e: any) => Policy_ComplianceStandard.fromJSON(e))
        : [],
      constraint: isSet(object.constraint) ? Constraint.fromJSON(object.constraint) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Policy): unknown {
    const obj: any = {};
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.complianceStandards?.length) {
      obj.complianceStandards = message.complianceStandards.map((e) => Policy_ComplianceStandard.toJSON(e));
    }
    if (message.constraint !== undefined) {
      obj.constraint = Constraint.toJSON(message.constraint);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<Policy>): Policy {
    return Policy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Policy>): Policy {
    const message = createBasePolicy();
    message.policyId = object.policyId ?? "";
    message.complianceStandards = object.complianceStandards?.map((e) => Policy_ComplianceStandard.fromPartial(e)) ||
      [];
    message.constraint = (object.constraint !== undefined && object.constraint !== null)
      ? Constraint.fromPartial(object.constraint)
      : undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBasePolicy_ComplianceStandard(): Policy_ComplianceStandard {
  return { standard: "", control: "" };
}

export const Policy_ComplianceStandard: MessageFns<Policy_ComplianceStandard> = {
  encode(message: Policy_ComplianceStandard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.standard !== "") {
      writer.uint32(10).string(message.standard);
    }
    if (message.control !== "") {
      writer.uint32(18).string(message.control);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy_ComplianceStandard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy_ComplianceStandard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.standard = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.control = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy_ComplianceStandard {
    return {
      standard: isSet(object.standard) ? globalThis.String(object.standard) : "",
      control: isSet(object.control) ? globalThis.String(object.control) : "",
    };
  },

  toJSON(message: Policy_ComplianceStandard): unknown {
    const obj: any = {};
    if (message.standard !== "") {
      obj.standard = message.standard;
    }
    if (message.control !== "") {
      obj.control = message.control;
    }
    return obj;
  },

  create(base?: DeepPartial<Policy_ComplianceStandard>): Policy_ComplianceStandard {
    return Policy_ComplianceStandard.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Policy_ComplianceStandard>): Policy_ComplianceStandard {
    const message = createBasePolicy_ComplianceStandard();
    message.standard = object.standard ?? "";
    message.control = object.control ?? "";
    return message;
  },
};

function createBaseConstraint(): Constraint {
  return {
    securityHealthAnalyticsModule: undefined,
    securityHealthAnalyticsCustomModule: undefined,
    orgPolicyConstraint: undefined,
    orgPolicyConstraintCustom: undefined,
  };
}

export const Constraint: MessageFns<Constraint> = {
  encode(message: Constraint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.securityHealthAnalyticsModule !== undefined) {
      SecurityHealthAnalyticsModule.encode(message.securityHealthAnalyticsModule, writer.uint32(26).fork()).join();
    }
    if (message.securityHealthAnalyticsCustomModule !== undefined) {
      SecurityHealthAnalyticsCustomModule.encode(message.securityHealthAnalyticsCustomModule, writer.uint32(34).fork())
        .join();
    }
    if (message.orgPolicyConstraint !== undefined) {
      OrgPolicyConstraint.encode(message.orgPolicyConstraint, writer.uint32(42).fork()).join();
    }
    if (message.orgPolicyConstraintCustom !== undefined) {
      OrgPolicyConstraintCustom.encode(message.orgPolicyConstraintCustom, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Constraint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConstraint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.securityHealthAnalyticsModule = SecurityHealthAnalyticsModule.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.securityHealthAnalyticsCustomModule = SecurityHealthAnalyticsCustomModule.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orgPolicyConstraint = OrgPolicyConstraint.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orgPolicyConstraintCustom = OrgPolicyConstraintCustom.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Constraint {
    return {
      securityHealthAnalyticsModule: isSet(object.securityHealthAnalyticsModule)
        ? SecurityHealthAnalyticsModule.fromJSON(object.securityHealthAnalyticsModule)
        : undefined,
      securityHealthAnalyticsCustomModule: isSet(object.securityHealthAnalyticsCustomModule)
        ? SecurityHealthAnalyticsCustomModule.fromJSON(object.securityHealthAnalyticsCustomModule)
        : undefined,
      orgPolicyConstraint: isSet(object.orgPolicyConstraint)
        ? OrgPolicyConstraint.fromJSON(object.orgPolicyConstraint)
        : undefined,
      orgPolicyConstraintCustom: isSet(object.orgPolicyConstraintCustom)
        ? OrgPolicyConstraintCustom.fromJSON(object.orgPolicyConstraintCustom)
        : undefined,
    };
  },

  toJSON(message: Constraint): unknown {
    const obj: any = {};
    if (message.securityHealthAnalyticsModule !== undefined) {
      obj.securityHealthAnalyticsModule = SecurityHealthAnalyticsModule.toJSON(message.securityHealthAnalyticsModule);
    }
    if (message.securityHealthAnalyticsCustomModule !== undefined) {
      obj.securityHealthAnalyticsCustomModule = SecurityHealthAnalyticsCustomModule.toJSON(
        message.securityHealthAnalyticsCustomModule,
      );
    }
    if (message.orgPolicyConstraint !== undefined) {
      obj.orgPolicyConstraint = OrgPolicyConstraint.toJSON(message.orgPolicyConstraint);
    }
    if (message.orgPolicyConstraintCustom !== undefined) {
      obj.orgPolicyConstraintCustom = OrgPolicyConstraintCustom.toJSON(message.orgPolicyConstraintCustom);
    }
    return obj;
  },

  create(base?: DeepPartial<Constraint>): Constraint {
    return Constraint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Constraint>): Constraint {
    const message = createBaseConstraint();
    message.securityHealthAnalyticsModule =
      (object.securityHealthAnalyticsModule !== undefined && object.securityHealthAnalyticsModule !== null)
        ? SecurityHealthAnalyticsModule.fromPartial(object.securityHealthAnalyticsModule)
        : undefined;
    message.securityHealthAnalyticsCustomModule =
      (object.securityHealthAnalyticsCustomModule !== undefined && object.securityHealthAnalyticsCustomModule !== null)
        ? SecurityHealthAnalyticsCustomModule.fromPartial(object.securityHealthAnalyticsCustomModule)
        : undefined;
    message.orgPolicyConstraint = (object.orgPolicyConstraint !== undefined && object.orgPolicyConstraint !== null)
      ? OrgPolicyConstraint.fromPartial(object.orgPolicyConstraint)
      : undefined;
    message.orgPolicyConstraintCustom =
      (object.orgPolicyConstraintCustom !== undefined && object.orgPolicyConstraintCustom !== null)
        ? OrgPolicyConstraintCustom.fromPartial(object.orgPolicyConstraintCustom)
        : undefined;
    return message;
  },
};

function createBaseListPosturesRequest(): ListPosturesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListPosturesRequest: MessageFns<ListPosturesRequest> = {
  encode(message: ListPosturesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPosturesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPosturesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPosturesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPosturesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPosturesRequest>): ListPosturesRequest {
    return ListPosturesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPosturesRequest>): ListPosturesRequest {
    const message = createBaseListPosturesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPosturesResponse(): ListPosturesResponse {
  return { postures: [], nextPageToken: "", unreachable: [] };
}

export const ListPosturesResponse: MessageFns<ListPosturesResponse> = {
  encode(message: ListPosturesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.postures) {
      Posture.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPosturesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPosturesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.postures.push(Posture.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPosturesResponse {
    return {
      postures: globalThis.Array.isArray(object?.postures) ? object.postures.map((e: any) => Posture.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListPosturesResponse): unknown {
    const obj: any = {};
    if (message.postures?.length) {
      obj.postures = message.postures.map((e) => Posture.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPosturesResponse>): ListPosturesResponse {
    return ListPosturesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPosturesResponse>): ListPosturesResponse {
    const message = createBaseListPosturesResponse();
    message.postures = object.postures?.map((e) => Posture.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseListPostureRevisionsRequest(): ListPostureRevisionsRequest {
  return { name: "", pageSize: 0, pageToken: "" };
}

export const ListPostureRevisionsRequest: MessageFns<ListPostureRevisionsRequest> = {
  encode(message: ListPostureRevisionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPostureRevisionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPostureRevisionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPostureRevisionsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListPostureRevisionsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPostureRevisionsRequest>): ListPostureRevisionsRequest {
    return ListPostureRevisionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPostureRevisionsRequest>): ListPostureRevisionsRequest {
    const message = createBaseListPostureRevisionsRequest();
    message.name = object.name ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListPostureRevisionsResponse(): ListPostureRevisionsResponse {
  return { revisions: [], nextPageToken: "" };
}

export const ListPostureRevisionsResponse: MessageFns<ListPostureRevisionsResponse> = {
  encode(message: ListPostureRevisionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.revisions) {
      Posture.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPostureRevisionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPostureRevisionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.revisions.push(Posture.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPostureRevisionsResponse {
    return {
      revisions: globalThis.Array.isArray(object?.revisions)
        ? object.revisions.map((e: any) => Posture.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPostureRevisionsResponse): unknown {
    const obj: any = {};
    if (message.revisions?.length) {
      obj.revisions = message.revisions.map((e) => Posture.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPostureRevisionsResponse>): ListPostureRevisionsResponse {
    return ListPostureRevisionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPostureRevisionsResponse>): ListPostureRevisionsResponse {
    const message = createBaseListPostureRevisionsResponse();
    message.revisions = object.revisions?.map((e) => Posture.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetPostureRequest(): GetPostureRequest {
  return { name: "", revisionId: "" };
}

export const GetPostureRequest: MessageFns<GetPostureRequest> = {
  encode(message: GetPostureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.revisionId !== "") {
      writer.uint32(26).string(message.revisionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPostureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPostureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.revisionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPostureRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
    };
  },

  toJSON(message: GetPostureRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPostureRequest>): GetPostureRequest {
    return GetPostureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPostureRequest>): GetPostureRequest {
    const message = createBaseGetPostureRequest();
    message.name = object.name ?? "";
    message.revisionId = object.revisionId ?? "";
    return message;
  },
};

function createBaseCreatePostureRequest(): CreatePostureRequest {
  return { parent: "", postureId: "", posture: undefined };
}

export const CreatePostureRequest: MessageFns<CreatePostureRequest> = {
  encode(message: CreatePostureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.postureId !== "") {
      writer.uint32(18).string(message.postureId);
    }
    if (message.posture !== undefined) {
      Posture.encode(message.posture, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePostureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePostureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.postureId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.posture = Posture.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePostureRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      postureId: isSet(object.postureId) ? globalThis.String(object.postureId) : "",
      posture: isSet(object.posture) ? Posture.fromJSON(object.posture) : undefined,
    };
  },

  toJSON(message: CreatePostureRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.postureId !== "") {
      obj.postureId = message.postureId;
    }
    if (message.posture !== undefined) {
      obj.posture = Posture.toJSON(message.posture);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePostureRequest>): CreatePostureRequest {
    return CreatePostureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePostureRequest>): CreatePostureRequest {
    const message = createBaseCreatePostureRequest();
    message.parent = object.parent ?? "";
    message.postureId = object.postureId ?? "";
    message.posture = (object.posture !== undefined && object.posture !== null)
      ? Posture.fromPartial(object.posture)
      : undefined;
    return message;
  },
};

function createBaseUpdatePostureRequest(): UpdatePostureRequest {
  return { updateMask: undefined, posture: undefined, revisionId: "" };
}

export const UpdatePostureRequest: MessageFns<UpdatePostureRequest> = {
  encode(message: UpdatePostureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.posture !== undefined) {
      Posture.encode(message.posture, writer.uint32(18).fork()).join();
    }
    if (message.revisionId !== "") {
      writer.uint32(26).string(message.revisionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePostureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePostureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.posture = Posture.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.revisionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePostureRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      posture: isSet(object.posture) ? Posture.fromJSON(object.posture) : undefined,
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
    };
  },

  toJSON(message: UpdatePostureRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.posture !== undefined) {
      obj.posture = Posture.toJSON(message.posture);
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePostureRequest>): UpdatePostureRequest {
    return UpdatePostureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePostureRequest>): UpdatePostureRequest {
    const message = createBaseUpdatePostureRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.posture = (object.posture !== undefined && object.posture !== null)
      ? Posture.fromPartial(object.posture)
      : undefined;
    message.revisionId = object.revisionId ?? "";
    return message;
  },
};

function createBaseDeletePostureRequest(): DeletePostureRequest {
  return { name: "", etag: "" };
}

export const DeletePostureRequest: MessageFns<DeletePostureRequest> = {
  encode(message: DeletePostureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePostureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePostureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePostureRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeletePostureRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePostureRequest>): DeletePostureRequest {
    return DeletePostureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePostureRequest>): DeletePostureRequest {
    const message = createBaseDeletePostureRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseExtractPostureRequest(): ExtractPostureRequest {
  return { parent: "", postureId: "", workload: "" };
}

export const ExtractPostureRequest: MessageFns<ExtractPostureRequest> = {
  encode(message: ExtractPostureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.postureId !== "") {
      writer.uint32(18).string(message.postureId);
    }
    if (message.workload !== "") {
      writer.uint32(26).string(message.workload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtractPostureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtractPostureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.postureId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.workload = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtractPostureRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      postureId: isSet(object.postureId) ? globalThis.String(object.postureId) : "",
      workload: isSet(object.workload) ? globalThis.String(object.workload) : "",
    };
  },

  toJSON(message: ExtractPostureRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.postureId !== "") {
      obj.postureId = message.postureId;
    }
    if (message.workload !== "") {
      obj.workload = message.workload;
    }
    return obj;
  },

  create(base?: DeepPartial<ExtractPostureRequest>): ExtractPostureRequest {
    return ExtractPostureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtractPostureRequest>): ExtractPostureRequest {
    const message = createBaseExtractPostureRequest();
    message.parent = object.parent ?? "";
    message.postureId = object.postureId ?? "";
    message.workload = object.workload ?? "";
    return message;
  },
};

function createBasePostureDeployment(): PostureDeployment {
  return {
    name: "",
    targetResource: "",
    state: 0,
    postureId: "",
    postureRevisionId: "",
    createTime: undefined,
    updateTime: undefined,
    description: "",
    etag: "",
    annotations: {},
    reconciling: false,
    desiredPostureId: "",
    desiredPostureRevisionId: "",
    failureMessage: "",
  };
}

export const PostureDeployment: MessageFns<PostureDeployment> = {
  encode(message: PostureDeployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.targetResource !== "") {
      writer.uint32(106).string(message.targetResource);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.postureId !== "") {
      writer.uint32(26).string(message.postureId);
    }
    if (message.postureRevisionId !== "") {
      writer.uint32(34).string(message.postureRevisionId);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    if (message.etag !== "") {
      writer.uint32(66).string(message.etag);
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      PostureDeployment_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    if (message.reconciling !== false) {
      writer.uint32(80).bool(message.reconciling);
    }
    if (message.desiredPostureId !== "") {
      writer.uint32(90).string(message.desiredPostureId);
    }
    if (message.desiredPostureRevisionId !== "") {
      writer.uint32(98).string(message.desiredPostureRevisionId);
    }
    if (message.failureMessage !== "") {
      writer.uint32(114).string(message.failureMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostureDeployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostureDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.targetResource = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.postureId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.postureRevisionId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = PostureDeployment_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.annotations[entry9.key] = entry9.value;
          }
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.reconciling = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.desiredPostureId = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.desiredPostureRevisionId = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.failureMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostureDeployment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      targetResource: isSet(object.targetResource) ? globalThis.String(object.targetResource) : "",
      state: isSet(object.state) ? postureDeployment_StateFromJSON(object.state) : 0,
      postureId: isSet(object.postureId) ? globalThis.String(object.postureId) : "",
      postureRevisionId: isSet(object.postureRevisionId) ? globalThis.String(object.postureRevisionId) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      reconciling: isSet(object.reconciling) ? globalThis.Boolean(object.reconciling) : false,
      desiredPostureId: isSet(object.desiredPostureId) ? globalThis.String(object.desiredPostureId) : "",
      desiredPostureRevisionId: isSet(object.desiredPostureRevisionId)
        ? globalThis.String(object.desiredPostureRevisionId)
        : "",
      failureMessage: isSet(object.failureMessage) ? globalThis.String(object.failureMessage) : "",
    };
  },

  toJSON(message: PostureDeployment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.targetResource !== "") {
      obj.targetResource = message.targetResource;
    }
    if (message.state !== 0) {
      obj.state = postureDeployment_StateToJSON(message.state);
    }
    if (message.postureId !== "") {
      obj.postureId = message.postureId;
    }
    if (message.postureRevisionId !== "") {
      obj.postureRevisionId = message.postureRevisionId;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    if (message.reconciling !== false) {
      obj.reconciling = message.reconciling;
    }
    if (message.desiredPostureId !== "") {
      obj.desiredPostureId = message.desiredPostureId;
    }
    if (message.desiredPostureRevisionId !== "") {
      obj.desiredPostureRevisionId = message.desiredPostureRevisionId;
    }
    if (message.failureMessage !== "") {
      obj.failureMessage = message.failureMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<PostureDeployment>): PostureDeployment {
    return PostureDeployment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostureDeployment>): PostureDeployment {
    const message = createBasePostureDeployment();
    message.name = object.name ?? "";
    message.targetResource = object.targetResource ?? "";
    message.state = object.state ?? 0;
    message.postureId = object.postureId ?? "";
    message.postureRevisionId = object.postureRevisionId ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.etag = object.etag ?? "";
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.reconciling = object.reconciling ?? false;
    message.desiredPostureId = object.desiredPostureId ?? "";
    message.desiredPostureRevisionId = object.desiredPostureRevisionId ?? "";
    message.failureMessage = object.failureMessage ?? "";
    return message;
  },
};

function createBasePostureDeployment_AnnotationsEntry(): PostureDeployment_AnnotationsEntry {
  return { key: "", value: "" };
}

export const PostureDeployment_AnnotationsEntry: MessageFns<PostureDeployment_AnnotationsEntry> = {
  encode(message: PostureDeployment_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostureDeployment_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostureDeployment_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostureDeployment_AnnotationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: PostureDeployment_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<PostureDeployment_AnnotationsEntry>): PostureDeployment_AnnotationsEntry {
    return PostureDeployment_AnnotationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostureDeployment_AnnotationsEntry>): PostureDeployment_AnnotationsEntry {
    const message = createBasePostureDeployment_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListPostureDeploymentsRequest(): ListPostureDeploymentsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListPostureDeploymentsRequest: MessageFns<ListPostureDeploymentsRequest> = {
  encode(message: ListPostureDeploymentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPostureDeploymentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPostureDeploymentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPostureDeploymentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListPostureDeploymentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPostureDeploymentsRequest>): ListPostureDeploymentsRequest {
    return ListPostureDeploymentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPostureDeploymentsRequest>): ListPostureDeploymentsRequest {
    const message = createBaseListPostureDeploymentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListPostureDeploymentsResponse(): ListPostureDeploymentsResponse {
  return { postureDeployments: [], nextPageToken: "", unreachable: [] };
}

export const ListPostureDeploymentsResponse: MessageFns<ListPostureDeploymentsResponse> = {
  encode(message: ListPostureDeploymentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.postureDeployments) {
      PostureDeployment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPostureDeploymentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPostureDeploymentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.postureDeployments.push(PostureDeployment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPostureDeploymentsResponse {
    return {
      postureDeployments: globalThis.Array.isArray(object?.postureDeployments)
        ? object.postureDeployments.map((e: any) => PostureDeployment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListPostureDeploymentsResponse): unknown {
    const obj: any = {};
    if (message.postureDeployments?.length) {
      obj.postureDeployments = message.postureDeployments.map((e) => PostureDeployment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPostureDeploymentsResponse>): ListPostureDeploymentsResponse {
    return ListPostureDeploymentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPostureDeploymentsResponse>): ListPostureDeploymentsResponse {
    const message = createBaseListPostureDeploymentsResponse();
    message.postureDeployments = object.postureDeployments?.map((e) => PostureDeployment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetPostureDeploymentRequest(): GetPostureDeploymentRequest {
  return { name: "" };
}

export const GetPostureDeploymentRequest: MessageFns<GetPostureDeploymentRequest> = {
  encode(message: GetPostureDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPostureDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPostureDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPostureDeploymentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPostureDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPostureDeploymentRequest>): GetPostureDeploymentRequest {
    return GetPostureDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPostureDeploymentRequest>): GetPostureDeploymentRequest {
    const message = createBaseGetPostureDeploymentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreatePostureDeploymentRequest(): CreatePostureDeploymentRequest {
  return { parent: "", postureDeploymentId: "", postureDeployment: undefined };
}

export const CreatePostureDeploymentRequest: MessageFns<CreatePostureDeploymentRequest> = {
  encode(message: CreatePostureDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.postureDeploymentId !== "") {
      writer.uint32(18).string(message.postureDeploymentId);
    }
    if (message.postureDeployment !== undefined) {
      PostureDeployment.encode(message.postureDeployment, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePostureDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePostureDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.postureDeploymentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.postureDeployment = PostureDeployment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePostureDeploymentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      postureDeploymentId: isSet(object.postureDeploymentId) ? globalThis.String(object.postureDeploymentId) : "",
      postureDeployment: isSet(object.postureDeployment)
        ? PostureDeployment.fromJSON(object.postureDeployment)
        : undefined,
    };
  },

  toJSON(message: CreatePostureDeploymentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.postureDeploymentId !== "") {
      obj.postureDeploymentId = message.postureDeploymentId;
    }
    if (message.postureDeployment !== undefined) {
      obj.postureDeployment = PostureDeployment.toJSON(message.postureDeployment);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePostureDeploymentRequest>): CreatePostureDeploymentRequest {
    return CreatePostureDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePostureDeploymentRequest>): CreatePostureDeploymentRequest {
    const message = createBaseCreatePostureDeploymentRequest();
    message.parent = object.parent ?? "";
    message.postureDeploymentId = object.postureDeploymentId ?? "";
    message.postureDeployment = (object.postureDeployment !== undefined && object.postureDeployment !== null)
      ? PostureDeployment.fromPartial(object.postureDeployment)
      : undefined;
    return message;
  },
};

function createBaseUpdatePostureDeploymentRequest(): UpdatePostureDeploymentRequest {
  return { updateMask: undefined, postureDeployment: undefined };
}

export const UpdatePostureDeploymentRequest: MessageFns<UpdatePostureDeploymentRequest> = {
  encode(message: UpdatePostureDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.postureDeployment !== undefined) {
      PostureDeployment.encode(message.postureDeployment, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePostureDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePostureDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.postureDeployment = PostureDeployment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePostureDeploymentRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      postureDeployment: isSet(object.postureDeployment)
        ? PostureDeployment.fromJSON(object.postureDeployment)
        : undefined,
    };
  },

  toJSON(message: UpdatePostureDeploymentRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.postureDeployment !== undefined) {
      obj.postureDeployment = PostureDeployment.toJSON(message.postureDeployment);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePostureDeploymentRequest>): UpdatePostureDeploymentRequest {
    return UpdatePostureDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePostureDeploymentRequest>): UpdatePostureDeploymentRequest {
    const message = createBaseUpdatePostureDeploymentRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.postureDeployment = (object.postureDeployment !== undefined && object.postureDeployment !== null)
      ? PostureDeployment.fromPartial(object.postureDeployment)
      : undefined;
    return message;
  },
};

function createBaseDeletePostureDeploymentRequest(): DeletePostureDeploymentRequest {
  return { name: "", etag: "" };
}

export const DeletePostureDeploymentRequest: MessageFns<DeletePostureDeploymentRequest> = {
  encode(message: DeletePostureDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePostureDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePostureDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePostureDeploymentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeletePostureDeploymentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePostureDeploymentRequest>): DeletePostureDeploymentRequest {
    return DeletePostureDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePostureDeploymentRequest>): DeletePostureDeploymentRequest {
    const message = createBaseDeletePostureDeploymentRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBasePostureTemplate(): PostureTemplate {
  return { name: "", revisionId: "", description: "", state: 0, policySets: [] };
}

export const PostureTemplate: MessageFns<PostureTemplate> = {
  encode(message: PostureTemplate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.revisionId !== "") {
      writer.uint32(18).string(message.revisionId);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    for (const v of message.policySets) {
      PolicySet.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostureTemplate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostureTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.revisionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.policySets.push(PolicySet.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostureTemplate {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      state: isSet(object.state) ? postureTemplate_StateFromJSON(object.state) : 0,
      policySets: globalThis.Array.isArray(object?.policySets)
        ? object.policySets.map((e: any) => PolicySet.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PostureTemplate): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.state !== 0) {
      obj.state = postureTemplate_StateToJSON(message.state);
    }
    if (message.policySets?.length) {
      obj.policySets = message.policySets.map((e) => PolicySet.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PostureTemplate>): PostureTemplate {
    return PostureTemplate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostureTemplate>): PostureTemplate {
    const message = createBasePostureTemplate();
    message.name = object.name ?? "";
    message.revisionId = object.revisionId ?? "";
    message.description = object.description ?? "";
    message.state = object.state ?? 0;
    message.policySets = object.policySets?.map((e) => PolicySet.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListPostureTemplatesRequest(): ListPostureTemplatesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListPostureTemplatesRequest: MessageFns<ListPostureTemplatesRequest> = {
  encode(message: ListPostureTemplatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPostureTemplatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPostureTemplatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPostureTemplatesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListPostureTemplatesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPostureTemplatesRequest>): ListPostureTemplatesRequest {
    return ListPostureTemplatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPostureTemplatesRequest>): ListPostureTemplatesRequest {
    const message = createBaseListPostureTemplatesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListPostureTemplatesResponse(): ListPostureTemplatesResponse {
  return { postureTemplates: [], nextPageToken: "" };
}

export const ListPostureTemplatesResponse: MessageFns<ListPostureTemplatesResponse> = {
  encode(message: ListPostureTemplatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.postureTemplates) {
      PostureTemplate.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPostureTemplatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPostureTemplatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.postureTemplates.push(PostureTemplate.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPostureTemplatesResponse {
    return {
      postureTemplates: globalThis.Array.isArray(object?.postureTemplates)
        ? object.postureTemplates.map((e: any) => PostureTemplate.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPostureTemplatesResponse): unknown {
    const obj: any = {};
    if (message.postureTemplates?.length) {
      obj.postureTemplates = message.postureTemplates.map((e) => PostureTemplate.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPostureTemplatesResponse>): ListPostureTemplatesResponse {
    return ListPostureTemplatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPostureTemplatesResponse>): ListPostureTemplatesResponse {
    const message = createBaseListPostureTemplatesResponse();
    message.postureTemplates = object.postureTemplates?.map((e) => PostureTemplate.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetPostureTemplateRequest(): GetPostureTemplateRequest {
  return { name: "", revisionId: "" };
}

export const GetPostureTemplateRequest: MessageFns<GetPostureTemplateRequest> = {
  encode(message: GetPostureTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.revisionId !== "") {
      writer.uint32(18).string(message.revisionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPostureTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPostureTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.revisionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPostureTemplateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      revisionId: isSet(object.revisionId) ? globalThis.String(object.revisionId) : "",
    };
  },

  toJSON(message: GetPostureTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.revisionId !== "") {
      obj.revisionId = message.revisionId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPostureTemplateRequest>): GetPostureTemplateRequest {
    return GetPostureTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPostureTemplateRequest>): GetPostureTemplateRequest {
    const message = createBaseGetPostureTemplateRequest();
    message.name = object.name ?? "";
    message.revisionId = object.revisionId ?? "";
    return message;
  },
};

/** Service describing handlers for resources. */
export type SecurityPostureDefinition = typeof SecurityPostureDefinition;
export const SecurityPostureDefinition = {
  name: "SecurityPosture",
  fullName: "google.cloud.securityposture.v1.SecurityPosture",
  methods: {
    /**
     * (-- This option restricts the visibility of the API to only projects that
     * will
     * (-- be labeled as `PREVIEW` or `GOOGLE_INTERNAL` by the service.
     * (-- option (google.api.api_visibility).restriction =
     * "PREVIEW,GOOGLE_INTERNAL"; Postures Lists Postures in a given organization
     * and location. In case a posture has multiple revisions, the latest revision
     * as per UpdateTime will be returned.
     */
    listPostures: {
      name: "ListPostures",
      requestType: ListPosturesRequest,
      requestStream: false,
      responseType: ListPosturesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists revisions of a Posture in a given organization and location. */
    listPostureRevisions: {
      name: "ListPostureRevisions",
      requestType: ListPostureRevisionsRequest,
      requestStream: false,
      responseType: ListPostureRevisionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
              58,
              108,
              105,
              115,
              116,
              82,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a posture in a given organization and location.
     * User must provide revision_id to retrieve a specific revision of the
     * resource.
     * NOT_FOUND error is returned if the revision_id or the Posture name does not
     * exist. In case revision_id is not provided then the latest Posture revision
     * by UpdateTime is returned.
     */
    getPosture: {
      name: "GetPosture",
      requestType: GetPostureRequest,
      requestStream: false,
      responseType: Posture,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new Posture resource.
     * If a Posture with the specified name already exists in the specified
     * organization and location, the long running operation returns a
     * [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
     */
    createPosture: {
      name: "CreatePosture",
      requestType: CreatePostureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              80,
              111,
              115,
              116,
              117,
              114,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              44,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              7,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an existing Posture.
     * A new revision of the posture will be created if the revision to be
     * updated is currently deployed on a workload.
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * Posture does not exist.
     * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
     * supplied in the request does not match the persisted etag of the Posture.
     * Updatable fields are state, description and policy_sets.
     * State update operation cannot be clubbed with update of description and
     * policy_sets.
     * An ACTIVE posture can be updated to both DRAFT or DEPRECATED states.
     * Postures in DRAFT or DEPRECATED states can only be updated to ACTIVE state.
     */
    updatePosture: {
      name: "UpdatePosture",
      requestType: UpdatePostureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              80,
              111,
              115,
              116,
              117,
              114,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              19,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              7,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              50,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes all the revisions of a resource.
     * A posture can only be deleted when none of the revisions are deployed to
     * any workload.
     */
    deletePosture: {
      name: "DeletePosture",
      requestType: DeletePostureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Extracts existing policies on a workload as a posture.
     * If a Posture on the given workload already exists, the long running
     * operation returns a [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
     */
    extractPosture: {
      name: "ExtractPosture",
      requestType: ExtractPostureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              80,
              111,
              115,
              116,
              117,
              114,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              26,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              95,
              105,
              100,
              44,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              115,
              58,
              101,
              120,
              116,
              114,
              97,
              99,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * PostureDeployments
     * Lists PostureDeployments in a given project and location.
     */
    listPostureDeployments: {
      name: "ListPostureDeployments",
      requestType: ListPostureDeploymentsRequest,
      requestStream: false,
      responseType: ListPostureDeploymentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single PostureDeployment. */
    getPostureDeployment: {
      name: "GetPostureDeployment",
      requestType: GetPostureDeploymentRequest,
      requestStream: false,
      responseType: PostureDeployment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new PostureDeployment in a given project and location. */
    createPostureDeployment: {
      name: "CreatePostureDeployment",
      requestType: CreatePostureDeploymentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              80,
              111,
              115,
              116,
              117,
              114,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              47,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              44,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              81,
              58,
              18,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single PostureDeployment. */
    updatePostureDeployment: {
      name: "UpdatePostureDeployment",
      requestType: UpdatePostureDeploymentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              17,
              80,
              111,
              115,
              116,
              117,
              114,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              30,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              100,
              58,
              18,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              50,
              78,
              47,
              118,
              49,
              47,
              123,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single PostureDeployment. */
    deletePostureDeployment: {
      name: "DeletePostureDeployment",
      requestType: DeletePostureDeploymentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * PostureTemplates
     * Lists all the PostureTemplates available to the user.
     */
    listPostureTemplates: {
      name: "ListPostureTemplates",
      requestType: ListPostureTemplatesRequest,
      requestStream: false,
      responseType: ListPostureTemplatesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a PostureTemplate.
     * User must provide revision_id to retrieve a specific revision of the
     * resource.
     * NOT_FOUND error is returned if the revision_id or the PostureTemplate name
     * does not exist. In case revision_id is not provided then the
     * PostureTemplate with latest revision_id is returned.
     */
    getPostureTemplate: {
      name: "GetPostureTemplate",
      requestType: GetPostureTemplateRequest,
      requestStream: false,
      responseType: PostureTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              111,
              115,
              116,
              117,
              114,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SecurityPostureServiceImplementation<CallContextExt = {}> {
  /**
   * (-- This option restricts the visibility of the API to only projects that
   * will
   * (-- be labeled as `PREVIEW` or `GOOGLE_INTERNAL` by the service.
   * (-- option (google.api.api_visibility).restriction =
   * "PREVIEW,GOOGLE_INTERNAL"; Postures Lists Postures in a given organization
   * and location. In case a posture has multiple revisions, the latest revision
   * as per UpdateTime will be returned.
   */
  listPostures(
    request: ListPosturesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPosturesResponse>>;
  /** Lists revisions of a Posture in a given organization and location. */
  listPostureRevisions(
    request: ListPostureRevisionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPostureRevisionsResponse>>;
  /**
   * Gets a posture in a given organization and location.
   * User must provide revision_id to retrieve a specific revision of the
   * resource.
   * NOT_FOUND error is returned if the revision_id or the Posture name does not
   * exist. In case revision_id is not provided then the latest Posture revision
   * by UpdateTime is returned.
   */
  getPosture(request: GetPostureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Posture>>;
  /**
   * Creates a new Posture resource.
   * If a Posture with the specified name already exists in the specified
   * organization and location, the long running operation returns a
   * [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
   */
  createPosture(request: CreatePostureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Updates an existing Posture.
   * A new revision of the posture will be created if the revision to be
   * updated is currently deployed on a workload.
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * Posture does not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
   * supplied in the request does not match the persisted etag of the Posture.
   * Updatable fields are state, description and policy_sets.
   * State update operation cannot be clubbed with update of description and
   * policy_sets.
   * An ACTIVE posture can be updated to both DRAFT or DEPRECATED states.
   * Postures in DRAFT or DEPRECATED states can only be updated to ACTIVE state.
   */
  updatePosture(request: UpdatePostureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Deletes all the revisions of a resource.
   * A posture can only be deleted when none of the revisions are deployed to
   * any workload.
   */
  deletePosture(request: DeletePostureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Extracts existing policies on a workload as a posture.
   * If a Posture on the given workload already exists, the long running
   * operation returns a [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
   */
  extractPosture(
    request: ExtractPostureRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * PostureDeployments
   * Lists PostureDeployments in a given project and location.
   */
  listPostureDeployments(
    request: ListPostureDeploymentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPostureDeploymentsResponse>>;
  /** Gets details of a single PostureDeployment. */
  getPostureDeployment(
    request: GetPostureDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PostureDeployment>>;
  /** Creates a new PostureDeployment in a given project and location. */
  createPostureDeployment(
    request: CreatePostureDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single PostureDeployment. */
  updatePostureDeployment(
    request: UpdatePostureDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single PostureDeployment. */
  deletePostureDeployment(
    request: DeletePostureDeploymentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * PostureTemplates
   * Lists all the PostureTemplates available to the user.
   */
  listPostureTemplates(
    request: ListPostureTemplatesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPostureTemplatesResponse>>;
  /**
   * Gets a PostureTemplate.
   * User must provide revision_id to retrieve a specific revision of the
   * resource.
   * NOT_FOUND error is returned if the revision_id or the PostureTemplate name
   * does not exist. In case revision_id is not provided then the
   * PostureTemplate with latest revision_id is returned.
   */
  getPostureTemplate(
    request: GetPostureTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PostureTemplate>>;
}

export interface SecurityPostureClient<CallOptionsExt = {}> {
  /**
   * (-- This option restricts the visibility of the API to only projects that
   * will
   * (-- be labeled as `PREVIEW` or `GOOGLE_INTERNAL` by the service.
   * (-- option (google.api.api_visibility).restriction =
   * "PREVIEW,GOOGLE_INTERNAL"; Postures Lists Postures in a given organization
   * and location. In case a posture has multiple revisions, the latest revision
   * as per UpdateTime will be returned.
   */
  listPostures(
    request: DeepPartial<ListPosturesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPosturesResponse>;
  /** Lists revisions of a Posture in a given organization and location. */
  listPostureRevisions(
    request: DeepPartial<ListPostureRevisionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPostureRevisionsResponse>;
  /**
   * Gets a posture in a given organization and location.
   * User must provide revision_id to retrieve a specific revision of the
   * resource.
   * NOT_FOUND error is returned if the revision_id or the Posture name does not
   * exist. In case revision_id is not provided then the latest Posture revision
   * by UpdateTime is returned.
   */
  getPosture(request: DeepPartial<GetPostureRequest>, options?: CallOptions & CallOptionsExt): Promise<Posture>;
  /**
   * Creates a new Posture resource.
   * If a Posture with the specified name already exists in the specified
   * organization and location, the long running operation returns a
   * [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
   */
  createPosture(request: DeepPartial<CreatePostureRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Updates an existing Posture.
   * A new revision of the posture will be created if the revision to be
   * updated is currently deployed on a workload.
   * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
   * Posture does not exist.
   * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
   * supplied in the request does not match the persisted etag of the Posture.
   * Updatable fields are state, description and policy_sets.
   * State update operation cannot be clubbed with update of description and
   * policy_sets.
   * An ACTIVE posture can be updated to both DRAFT or DEPRECATED states.
   * Postures in DRAFT or DEPRECATED states can only be updated to ACTIVE state.
   */
  updatePosture(request: DeepPartial<UpdatePostureRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Deletes all the revisions of a resource.
   * A posture can only be deleted when none of the revisions are deployed to
   * any workload.
   */
  deletePosture(request: DeepPartial<DeletePostureRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Extracts existing policies on a workload as a posture.
   * If a Posture on the given workload already exists, the long running
   * operation returns a [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
   */
  extractPosture(
    request: DeepPartial<ExtractPostureRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * PostureDeployments
   * Lists PostureDeployments in a given project and location.
   */
  listPostureDeployments(
    request: DeepPartial<ListPostureDeploymentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPostureDeploymentsResponse>;
  /** Gets details of a single PostureDeployment. */
  getPostureDeployment(
    request: DeepPartial<GetPostureDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PostureDeployment>;
  /** Creates a new PostureDeployment in a given project and location. */
  createPostureDeployment(
    request: DeepPartial<CreatePostureDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single PostureDeployment. */
  updatePostureDeployment(
    request: DeepPartial<UpdatePostureDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single PostureDeployment. */
  deletePostureDeployment(
    request: DeepPartial<DeletePostureDeploymentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * PostureTemplates
   * Lists all the PostureTemplates available to the user.
   */
  listPostureTemplates(
    request: DeepPartial<ListPostureTemplatesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPostureTemplatesResponse>;
  /**
   * Gets a PostureTemplate.
   * User must provide revision_id to retrieve a specific revision of the
   * resource.
   * NOT_FOUND error is returned if the revision_id or the PostureTemplate name
   * does not exist. In case revision_id is not provided then the
   * PostureTemplate with latest revision_id is returned.
   */
  getPostureTemplate(
    request: DeepPartial<GetPostureTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PostureTemplate>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
