// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apihub/v1/host_project_registration_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.apihub.v1";

/**
 * The
 * [CreateHostProjectRegistration][google.cloud.apihub.v1.HostProjectRegistrationService.CreateHostProjectRegistration]
 * method's request.
 */
export interface CreateHostProjectRegistrationRequest {
  /**
   * Required. The parent resource for the host project.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Required. The ID to use for the Host Project Registration, which will
   * become the final component of the host project registration's resource
   * name. The ID must be the same as the Google cloud project specified in the
   * host_project_registration.gcp_project field.
   */
  hostProjectRegistrationId: string;
  /** Required. The host project registration to register. */
  hostProjectRegistration: HostProjectRegistration | undefined;
}

/**
 * The
 * [GetHostProjectRegistration][google.cloud.apihub.v1.HostProjectRegistrationService.GetHostProjectRegistration]
 * method's request.
 */
export interface GetHostProjectRegistrationRequest {
  /**
   * Required. Host project registration resource name.
   * projects/{project}/locations/{location}/hostProjectRegistrations/{host_project_registration_id}
   */
  name: string;
}

/**
 * The
 * [ListHostProjectRegistrations][google.cloud.apihub.v1.HostProjectRegistrationService.ListHostProjectRegistrations]
 * method's request.
 */
export interface ListHostProjectRegistrationsRequest {
  /**
   * Required. The parent, which owns this collection of host projects.
   * Format: `projects/* /locations/*`
   */
  parent: string;
  /**
   * Optional. The maximum number of host project registrations to return. The
   * service may return fewer than this value. If unspecified, at most 50 host
   * project registrations will be returned. The maximum value is 1000; values
   * above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous
   * `ListHostProjectRegistrations` call. Provide this to retrieve the
   * subsequent page.
   *
   * When paginating, all other parameters (except page_size) provided to
   * `ListHostProjectRegistrations` must match the call that provided the page
   * token.
   */
  pageToken: string;
  /**
   * Optional. An expression that filters the list of HostProjectRegistrations.
   *
   * A filter expression consists of a field name, a comparison
   * operator, and a value for filtering. The value must be a string. All
   * standard operators as documented at https://google.aip.dev/160 are
   * supported.
   *
   * The following fields in the `HostProjectRegistration` are eligible for
   * filtering:
   *
   *   * `name` - The name of the HostProjectRegistration.
   *   * `create_time` - The time at which the HostProjectRegistration was
   *   created. The value should be in the
   *   (RFC3339)[https://tools.ietf.org/html/rfc3339] format.
   *   * `gcp_project` - The Google cloud project associated with the
   *   HostProjectRegistration.
   */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/**
 * The
 * [ListHostProjectRegistrations][google.cloud.apihub.v1.HostProjectRegistrationService.ListHostProjectRegistrations]
 * method's response.
 */
export interface ListHostProjectRegistrationsResponse {
  /** The list of host project registrations. */
  hostProjectRegistrations: HostProjectRegistration[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Host project registration refers to the registration of a Google cloud
 * project with Api Hub as a host project. This is the project where Api Hub is
 * provisioned. It acts as the consumer project for the Api Hub instance
 * provisioned. Multiple runtime projects can be attached to the host project
 * and these attachments define the scope of Api Hub.
 */
export interface HostProjectRegistration {
  /**
   * Identifier. The name of the host project registration.
   * Format:
   * "projects/{project}/locations/{location}/hostProjectRegistrations/{host_project_registration}".
   */
  name: string;
  /**
   * Required. Immutable. Google cloud project name in the format:
   * "projects/abc" or "projects/123". As input, project name with either
   * project id or number are accepted. As output, this field will contain
   * project number.
   */
  gcpProject: string;
  /** Output only. The time at which the host project registration was created. */
  createTime: Date | undefined;
}

function createBaseCreateHostProjectRegistrationRequest(): CreateHostProjectRegistrationRequest {
  return { parent: "", hostProjectRegistrationId: "", hostProjectRegistration: undefined };
}

export const CreateHostProjectRegistrationRequest: MessageFns<CreateHostProjectRegistrationRequest> = {
  encode(message: CreateHostProjectRegistrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.hostProjectRegistrationId !== "") {
      writer.uint32(18).string(message.hostProjectRegistrationId);
    }
    if (message.hostProjectRegistration !== undefined) {
      HostProjectRegistration.encode(message.hostProjectRegistration, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateHostProjectRegistrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateHostProjectRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostProjectRegistrationId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hostProjectRegistration = HostProjectRegistration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateHostProjectRegistrationRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      hostProjectRegistrationId: isSet(object.hostProjectRegistrationId)
        ? globalThis.String(object.hostProjectRegistrationId)
        : "",
      hostProjectRegistration: isSet(object.hostProjectRegistration)
        ? HostProjectRegistration.fromJSON(object.hostProjectRegistration)
        : undefined,
    };
  },

  toJSON(message: CreateHostProjectRegistrationRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.hostProjectRegistrationId !== "") {
      obj.hostProjectRegistrationId = message.hostProjectRegistrationId;
    }
    if (message.hostProjectRegistration !== undefined) {
      obj.hostProjectRegistration = HostProjectRegistration.toJSON(message.hostProjectRegistration);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateHostProjectRegistrationRequest>): CreateHostProjectRegistrationRequest {
    return CreateHostProjectRegistrationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateHostProjectRegistrationRequest>): CreateHostProjectRegistrationRequest {
    const message = createBaseCreateHostProjectRegistrationRequest();
    message.parent = object.parent ?? "";
    message.hostProjectRegistrationId = object.hostProjectRegistrationId ?? "";
    message.hostProjectRegistration =
      (object.hostProjectRegistration !== undefined && object.hostProjectRegistration !== null)
        ? HostProjectRegistration.fromPartial(object.hostProjectRegistration)
        : undefined;
    return message;
  },
};

function createBaseGetHostProjectRegistrationRequest(): GetHostProjectRegistrationRequest {
  return { name: "" };
}

export const GetHostProjectRegistrationRequest: MessageFns<GetHostProjectRegistrationRequest> = {
  encode(message: GetHostProjectRegistrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHostProjectRegistrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHostProjectRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHostProjectRegistrationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetHostProjectRegistrationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetHostProjectRegistrationRequest>): GetHostProjectRegistrationRequest {
    return GetHostProjectRegistrationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHostProjectRegistrationRequest>): GetHostProjectRegistrationRequest {
    const message = createBaseGetHostProjectRegistrationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListHostProjectRegistrationsRequest(): ListHostProjectRegistrationsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListHostProjectRegistrationsRequest: MessageFns<ListHostProjectRegistrationsRequest> = {
  encode(message: ListHostProjectRegistrationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHostProjectRegistrationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHostProjectRegistrationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHostProjectRegistrationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListHostProjectRegistrationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHostProjectRegistrationsRequest>): ListHostProjectRegistrationsRequest {
    return ListHostProjectRegistrationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHostProjectRegistrationsRequest>): ListHostProjectRegistrationsRequest {
    const message = createBaseListHostProjectRegistrationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListHostProjectRegistrationsResponse(): ListHostProjectRegistrationsResponse {
  return { hostProjectRegistrations: [], nextPageToken: "" };
}

export const ListHostProjectRegistrationsResponse: MessageFns<ListHostProjectRegistrationsResponse> = {
  encode(message: ListHostProjectRegistrationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hostProjectRegistrations) {
      HostProjectRegistration.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHostProjectRegistrationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHostProjectRegistrationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostProjectRegistrations.push(HostProjectRegistration.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHostProjectRegistrationsResponse {
    return {
      hostProjectRegistrations: globalThis.Array.isArray(object?.hostProjectRegistrations)
        ? object.hostProjectRegistrations.map((e: any) => HostProjectRegistration.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListHostProjectRegistrationsResponse): unknown {
    const obj: any = {};
    if (message.hostProjectRegistrations?.length) {
      obj.hostProjectRegistrations = message.hostProjectRegistrations.map((e) => HostProjectRegistration.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHostProjectRegistrationsResponse>): ListHostProjectRegistrationsResponse {
    return ListHostProjectRegistrationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHostProjectRegistrationsResponse>): ListHostProjectRegistrationsResponse {
    const message = createBaseListHostProjectRegistrationsResponse();
    message.hostProjectRegistrations =
      object.hostProjectRegistrations?.map((e) => HostProjectRegistration.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseHostProjectRegistration(): HostProjectRegistration {
  return { name: "", gcpProject: "", createTime: undefined };
}

export const HostProjectRegistration: MessageFns<HostProjectRegistration> = {
  encode(message: HostProjectRegistration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.gcpProject !== "") {
      writer.uint32(18).string(message.gcpProject);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HostProjectRegistration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHostProjectRegistration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcpProject = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HostProjectRegistration {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      gcpProject: isSet(object.gcpProject) ? globalThis.String(object.gcpProject) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: HostProjectRegistration): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.gcpProject !== "") {
      obj.gcpProject = message.gcpProject;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<HostProjectRegistration>): HostProjectRegistration {
    return HostProjectRegistration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HostProjectRegistration>): HostProjectRegistration {
    const message = createBaseHostProjectRegistration();
    message.name = object.name ?? "";
    message.gcpProject = object.gcpProject ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

/** This service is used for managing the host project registrations. */
export type HostProjectRegistrationServiceDefinition = typeof HostProjectRegistrationServiceDefinition;
export const HostProjectRegistrationServiceDefinition = {
  name: "HostProjectRegistrationService",
  fullName: "google.cloud.apihub.v1.HostProjectRegistrationService",
  methods: {
    /**
     * Create a host project registration.
     * A Google cloud project can be registered as a host project if it is not
     * attached as a runtime project to another host project.
     * A project can be registered as a host project only once. Subsequent
     * register calls for the same project will fail.
     */
    createHostProjectRegistration: {
      name: "CreateHostProjectRegistration",
      requestType: CreateHostProjectRegistrationRequest,
      requestStream: false,
      responseType: HostProjectRegistration,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              61,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              104,
              111,
              115,
              116,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              44,
              104,
              111,
              115,
              116,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              89,
              58,
              25,
              104,
              111,
              115,
              116,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              104,
              111,
              115,
              116,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Get a host project registration. */
    getHostProjectRegistration: {
      name: "GetHostProjectRegistration",
      requestType: GetHostProjectRegistrationRequest,
      requestStream: false,
      responseType: HostProjectRegistration,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              104,
              111,
              115,
              116,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists host project registrations. */
    listHostProjectRegistrations: {
      name: "ListHostProjectRegistrations",
      requestType: ListHostProjectRegistrationsRequest,
      requestStream: false,
      responseType: ListHostProjectRegistrationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              104,
              111,
              115,
              116,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface HostProjectRegistrationServiceImplementation<CallContextExt = {}> {
  /**
   * Create a host project registration.
   * A Google cloud project can be registered as a host project if it is not
   * attached as a runtime project to another host project.
   * A project can be registered as a host project only once. Subsequent
   * register calls for the same project will fail.
   */
  createHostProjectRegistration(
    request: CreateHostProjectRegistrationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HostProjectRegistration>>;
  /** Get a host project registration. */
  getHostProjectRegistration(
    request: GetHostProjectRegistrationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HostProjectRegistration>>;
  /** Lists host project registrations. */
  listHostProjectRegistrations(
    request: ListHostProjectRegistrationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListHostProjectRegistrationsResponse>>;
}

export interface HostProjectRegistrationServiceClient<CallOptionsExt = {}> {
  /**
   * Create a host project registration.
   * A Google cloud project can be registered as a host project if it is not
   * attached as a runtime project to another host project.
   * A project can be registered as a host project only once. Subsequent
   * register calls for the same project will fail.
   */
  createHostProjectRegistration(
    request: DeepPartial<CreateHostProjectRegistrationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HostProjectRegistration>;
  /** Get a host project registration. */
  getHostProjectRegistration(
    request: DeepPartial<GetHostProjectRegistrationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HostProjectRegistration>;
  /** Lists host project registrations. */
  listHostProjectRegistrations(
    request: DeepPartial<ListHostProjectRegistrationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListHostProjectRegistrationsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
