// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apihub/v1/runtime_project_attachment_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.apihub.v1";

/**
 * The
 * [CreateRuntimeProjectAttachment][google.cloud.apihub.v1.RuntimeProjectAttachmentService.CreateRuntimeProjectAttachment]
 * method's request.
 */
export interface CreateRuntimeProjectAttachmentRequest {
  /**
   * Required. The parent resource for the Runtime Project Attachment.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Required. The ID to use for the Runtime Project Attachment, which will
   * become the final component of the Runtime Project Attachment's name. The ID
   * must be the same as the project ID of the Google cloud project specified in
   * the runtime_project_attachment.runtime_project field.
   */
  runtimeProjectAttachmentId: string;
  /** Required. The Runtime Project Attachment to create. */
  runtimeProjectAttachment: RuntimeProjectAttachment | undefined;
}

/**
 * The
 * [GetRuntimeProjectAttachment][google.cloud.apihub.v1.RuntimeProjectAttachmentService.GetRuntimeProjectAttachment]
 * method's request.
 */
export interface GetRuntimeProjectAttachmentRequest {
  /**
   * Required. The name of the API resource to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/runtimeProjectAttachments/{runtime_project_attachment}`
   */
  name: string;
}

/**
 * The
 * [ListRuntimeProjectAttachments][google.cloud.apihub.v1.RuntimeProjectAttachmentService.ListRuntimeProjectAttachments]
 * method's request.
 */
export interface ListRuntimeProjectAttachmentsRequest {
  /**
   * Required. The parent, which owns this collection of runtime project
   * attachments. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The maximum number of runtime project attachments to return. The
   * service may return fewer than this value. If unspecified, at most 50
   * runtime project attachments will be returned. The maximum value is 1000;
   * values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous
   * `ListRuntimeProjectAttachments` call. Provide this to retrieve the
   * subsequent page.
   *
   * When paginating, all other parameters (except page_size) provided to
   * `ListRuntimeProjectAttachments` must match the call that provided the page
   * token.
   */
  pageToken: string;
  /**
   * Optional. An expression that filters the list of RuntimeProjectAttachments.
   *
   * A filter expression consists of a field name, a comparison
   * operator, and a value for filtering. The value must be a string. All
   * standard operators as documented at https://google.aip.dev/160 are
   * supported.
   *
   * The following fields in the `RuntimeProjectAttachment` are eligible for
   * filtering:
   *
   *   * `name` - The name of the RuntimeProjectAttachment.
   *   * `create_time` - The time at which the RuntimeProjectAttachment was
   *   created. The value should be in the
   *   (RFC3339)[https://tools.ietf.org/html/rfc3339] format.
   *   * `runtime_project` - The Google cloud project associated with the
   *   RuntimeProjectAttachment.
   */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/**
 * The
 * [ListRuntimeProjectAttachments][google.cloud.apihub.v1.RuntimeProjectAttachmentService.ListRuntimeProjectAttachments]
 * method's response.
 */
export interface ListRuntimeProjectAttachmentsResponse {
  /** List of runtime project attachments. */
  runtimeProjectAttachments: RuntimeProjectAttachment[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * The
 * [DeleteRuntimeProjectAttachment][google.cloud.apihub.v1.RuntimeProjectAttachmentService.DeleteRuntimeProjectAttachment]
 * method's request.
 */
export interface DeleteRuntimeProjectAttachmentRequest {
  /**
   * Required. The name of the Runtime Project Attachment to delete.
   * Format:
   * `projects/{project}/locations/{location}/runtimeProjectAttachments/{runtime_project_attachment}`
   */
  name: string;
}

/**
 * The
 * [LookupRuntimeProjectAttachment][google.cloud.apihub.v1.RuntimeProjectAttachmentService.LookupRuntimeProjectAttachment]
 * method's request.
 */
export interface LookupRuntimeProjectAttachmentRequest {
  /**
   * Required. Runtime project ID to look up runtime project attachment for.
   * Lookup happens across all regions. Expected format:
   * `projects/{project}/locations/{location}`.
   */
  name: string;
}

/**
 * The
 * [ListRuntimeProjectAttachments][google.cloud.apihub.v1.RuntimeProjectAttachmentService.ListRuntimeProjectAttachments]
 * method's response.
 */
export interface LookupRuntimeProjectAttachmentResponse {
  /** Runtime project attachment for a project if exists, empty otherwise. */
  runtimeProjectAttachment: RuntimeProjectAttachment | undefined;
}

/**
 * Runtime project attachment represents an attachment from the runtime project
 * to the host project. Api Hub looks for deployments in the attached runtime
 * projects and creates corresponding resources in Api Hub for the discovered
 * deployments.
 */
export interface RuntimeProjectAttachment {
  /**
   * Identifier. The resource name of a runtime project attachment. Format:
   * "projects/{project}/locations/{location}/runtimeProjectAttachments/{runtime_project_attachment}".
   */
  name: string;
  /**
   * Required. Immutable. Google cloud project name in the format:
   * "projects/abc" or "projects/123". As input, project name with either
   * project id or number are accepted. As output, this field will contain
   * project number.
   */
  runtimeProject: string;
  /** Output only. Create time. */
  createTime: Date | undefined;
}

function createBaseCreateRuntimeProjectAttachmentRequest(): CreateRuntimeProjectAttachmentRequest {
  return { parent: "", runtimeProjectAttachmentId: "", runtimeProjectAttachment: undefined };
}

export const CreateRuntimeProjectAttachmentRequest: MessageFns<CreateRuntimeProjectAttachmentRequest> = {
  encode(message: CreateRuntimeProjectAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.runtimeProjectAttachmentId !== "") {
      writer.uint32(18).string(message.runtimeProjectAttachmentId);
    }
    if (message.runtimeProjectAttachment !== undefined) {
      RuntimeProjectAttachment.encode(message.runtimeProjectAttachment, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRuntimeProjectAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRuntimeProjectAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.runtimeProjectAttachmentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.runtimeProjectAttachment = RuntimeProjectAttachment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRuntimeProjectAttachmentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      runtimeProjectAttachmentId: isSet(object.runtimeProjectAttachmentId)
        ? globalThis.String(object.runtimeProjectAttachmentId)
        : "",
      runtimeProjectAttachment: isSet(object.runtimeProjectAttachment)
        ? RuntimeProjectAttachment.fromJSON(object.runtimeProjectAttachment)
        : undefined,
    };
  },

  toJSON(message: CreateRuntimeProjectAttachmentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.runtimeProjectAttachmentId !== "") {
      obj.runtimeProjectAttachmentId = message.runtimeProjectAttachmentId;
    }
    if (message.runtimeProjectAttachment !== undefined) {
      obj.runtimeProjectAttachment = RuntimeProjectAttachment.toJSON(message.runtimeProjectAttachment);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRuntimeProjectAttachmentRequest>): CreateRuntimeProjectAttachmentRequest {
    return CreateRuntimeProjectAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRuntimeProjectAttachmentRequest>): CreateRuntimeProjectAttachmentRequest {
    const message = createBaseCreateRuntimeProjectAttachmentRequest();
    message.parent = object.parent ?? "";
    message.runtimeProjectAttachmentId = object.runtimeProjectAttachmentId ?? "";
    message.runtimeProjectAttachment =
      (object.runtimeProjectAttachment !== undefined && object.runtimeProjectAttachment !== null)
        ? RuntimeProjectAttachment.fromPartial(object.runtimeProjectAttachment)
        : undefined;
    return message;
  },
};

function createBaseGetRuntimeProjectAttachmentRequest(): GetRuntimeProjectAttachmentRequest {
  return { name: "" };
}

export const GetRuntimeProjectAttachmentRequest: MessageFns<GetRuntimeProjectAttachmentRequest> = {
  encode(message: GetRuntimeProjectAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRuntimeProjectAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRuntimeProjectAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRuntimeProjectAttachmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRuntimeProjectAttachmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRuntimeProjectAttachmentRequest>): GetRuntimeProjectAttachmentRequest {
    return GetRuntimeProjectAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRuntimeProjectAttachmentRequest>): GetRuntimeProjectAttachmentRequest {
    const message = createBaseGetRuntimeProjectAttachmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListRuntimeProjectAttachmentsRequest(): ListRuntimeProjectAttachmentsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListRuntimeProjectAttachmentsRequest: MessageFns<ListRuntimeProjectAttachmentsRequest> = {
  encode(message: ListRuntimeProjectAttachmentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRuntimeProjectAttachmentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRuntimeProjectAttachmentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRuntimeProjectAttachmentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListRuntimeProjectAttachmentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRuntimeProjectAttachmentsRequest>): ListRuntimeProjectAttachmentsRequest {
    return ListRuntimeProjectAttachmentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRuntimeProjectAttachmentsRequest>): ListRuntimeProjectAttachmentsRequest {
    const message = createBaseListRuntimeProjectAttachmentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListRuntimeProjectAttachmentsResponse(): ListRuntimeProjectAttachmentsResponse {
  return { runtimeProjectAttachments: [], nextPageToken: "" };
}

export const ListRuntimeProjectAttachmentsResponse: MessageFns<ListRuntimeProjectAttachmentsResponse> = {
  encode(message: ListRuntimeProjectAttachmentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.runtimeProjectAttachments) {
      RuntimeProjectAttachment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRuntimeProjectAttachmentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRuntimeProjectAttachmentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.runtimeProjectAttachments.push(RuntimeProjectAttachment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRuntimeProjectAttachmentsResponse {
    return {
      runtimeProjectAttachments: globalThis.Array.isArray(object?.runtimeProjectAttachments)
        ? object.runtimeProjectAttachments.map((e: any) => RuntimeProjectAttachment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRuntimeProjectAttachmentsResponse): unknown {
    const obj: any = {};
    if (message.runtimeProjectAttachments?.length) {
      obj.runtimeProjectAttachments = message.runtimeProjectAttachments.map((e) => RuntimeProjectAttachment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRuntimeProjectAttachmentsResponse>): ListRuntimeProjectAttachmentsResponse {
    return ListRuntimeProjectAttachmentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRuntimeProjectAttachmentsResponse>): ListRuntimeProjectAttachmentsResponse {
    const message = createBaseListRuntimeProjectAttachmentsResponse();
    message.runtimeProjectAttachments =
      object.runtimeProjectAttachments?.map((e) => RuntimeProjectAttachment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteRuntimeProjectAttachmentRequest(): DeleteRuntimeProjectAttachmentRequest {
  return { name: "" };
}

export const DeleteRuntimeProjectAttachmentRequest: MessageFns<DeleteRuntimeProjectAttachmentRequest> = {
  encode(message: DeleteRuntimeProjectAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRuntimeProjectAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRuntimeProjectAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRuntimeProjectAttachmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteRuntimeProjectAttachmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRuntimeProjectAttachmentRequest>): DeleteRuntimeProjectAttachmentRequest {
    return DeleteRuntimeProjectAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRuntimeProjectAttachmentRequest>): DeleteRuntimeProjectAttachmentRequest {
    const message = createBaseDeleteRuntimeProjectAttachmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLookupRuntimeProjectAttachmentRequest(): LookupRuntimeProjectAttachmentRequest {
  return { name: "" };
}

export const LookupRuntimeProjectAttachmentRequest: MessageFns<LookupRuntimeProjectAttachmentRequest> = {
  encode(message: LookupRuntimeProjectAttachmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupRuntimeProjectAttachmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupRuntimeProjectAttachmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupRuntimeProjectAttachmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: LookupRuntimeProjectAttachmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupRuntimeProjectAttachmentRequest>): LookupRuntimeProjectAttachmentRequest {
    return LookupRuntimeProjectAttachmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupRuntimeProjectAttachmentRequest>): LookupRuntimeProjectAttachmentRequest {
    const message = createBaseLookupRuntimeProjectAttachmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLookupRuntimeProjectAttachmentResponse(): LookupRuntimeProjectAttachmentResponse {
  return { runtimeProjectAttachment: undefined };
}

export const LookupRuntimeProjectAttachmentResponse: MessageFns<LookupRuntimeProjectAttachmentResponse> = {
  encode(message: LookupRuntimeProjectAttachmentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.runtimeProjectAttachment !== undefined) {
      RuntimeProjectAttachment.encode(message.runtimeProjectAttachment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupRuntimeProjectAttachmentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupRuntimeProjectAttachmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.runtimeProjectAttachment = RuntimeProjectAttachment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupRuntimeProjectAttachmentResponse {
    return {
      runtimeProjectAttachment: isSet(object.runtimeProjectAttachment)
        ? RuntimeProjectAttachment.fromJSON(object.runtimeProjectAttachment)
        : undefined,
    };
  },

  toJSON(message: LookupRuntimeProjectAttachmentResponse): unknown {
    const obj: any = {};
    if (message.runtimeProjectAttachment !== undefined) {
      obj.runtimeProjectAttachment = RuntimeProjectAttachment.toJSON(message.runtimeProjectAttachment);
    }
    return obj;
  },

  create(base?: DeepPartial<LookupRuntimeProjectAttachmentResponse>): LookupRuntimeProjectAttachmentResponse {
    return LookupRuntimeProjectAttachmentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupRuntimeProjectAttachmentResponse>): LookupRuntimeProjectAttachmentResponse {
    const message = createBaseLookupRuntimeProjectAttachmentResponse();
    message.runtimeProjectAttachment =
      (object.runtimeProjectAttachment !== undefined && object.runtimeProjectAttachment !== null)
        ? RuntimeProjectAttachment.fromPartial(object.runtimeProjectAttachment)
        : undefined;
    return message;
  },
};

function createBaseRuntimeProjectAttachment(): RuntimeProjectAttachment {
  return { name: "", runtimeProject: "", createTime: undefined };
}

export const RuntimeProjectAttachment: MessageFns<RuntimeProjectAttachment> = {
  encode(message: RuntimeProjectAttachment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.runtimeProject !== "") {
      writer.uint32(18).string(message.runtimeProject);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeProjectAttachment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeProjectAttachment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.runtimeProject = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeProjectAttachment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      runtimeProject: isSet(object.runtimeProject) ? globalThis.String(object.runtimeProject) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: RuntimeProjectAttachment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.runtimeProject !== "") {
      obj.runtimeProject = message.runtimeProject;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeProjectAttachment>): RuntimeProjectAttachment {
    return RuntimeProjectAttachment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeProjectAttachment>): RuntimeProjectAttachment {
    const message = createBaseRuntimeProjectAttachment();
    message.name = object.name ?? "";
    message.runtimeProject = object.runtimeProject ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

/** This service is used for managing the runtime project attachments. */
export type RuntimeProjectAttachmentServiceDefinition = typeof RuntimeProjectAttachmentServiceDefinition;
export const RuntimeProjectAttachmentServiceDefinition = {
  name: "RuntimeProjectAttachmentService",
  fullName: "google.cloud.apihub.v1.RuntimeProjectAttachmentService",
  methods: {
    /** Attaches a runtime project to the host project. */
    createRuntimeProjectAttachment: {
      name: "CreateRuntimeProjectAttachment",
      requestType: CreateRuntimeProjectAttachmentRequest,
      requestStream: false,
      responseType: RuntimeProjectAttachment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              63,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              97,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              44,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              97,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              91,
              58,
              26,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              97,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a runtime project attachment. */
    getRuntimeProjectAttachment: {
      name: "GetRuntimeProjectAttachment",
      requestType: GetRuntimeProjectAttachmentRequest,
      requestStream: false,
      responseType: RuntimeProjectAttachment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List runtime projects attached to the host project. */
    listRuntimeProjectAttachments: {
      name: "ListRuntimeProjectAttachments",
      requestType: ListRuntimeProjectAttachmentsRequest,
      requestStream: false,
      responseType: ListRuntimeProjectAttachmentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Delete a runtime project attachment in the API Hub. This call will detach
     * the runtime project from the host project.
     */
    deleteRuntimeProjectAttachment: {
      name: "DeleteRuntimeProjectAttachment",
      requestType: DeleteRuntimeProjectAttachmentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              42,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Look up a runtime project attachment. This API can be called in the context
     * of any project.
     */
    lookupRuntimeProjectAttachment: {
      name: "LookupRuntimeProjectAttachment",
      requestType: LookupRuntimeProjectAttachmentRequest,
      requestStream: false,
      responseType: LookupRuntimeProjectAttachmentResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              108,
              111,
              111,
              107,
              117,
              112,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              65,
              116,
              116,
              97,
              99,
              104,
              109,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RuntimeProjectAttachmentServiceImplementation<CallContextExt = {}> {
  /** Attaches a runtime project to the host project. */
  createRuntimeProjectAttachment(
    request: CreateRuntimeProjectAttachmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RuntimeProjectAttachment>>;
  /** Gets a runtime project attachment. */
  getRuntimeProjectAttachment(
    request: GetRuntimeProjectAttachmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RuntimeProjectAttachment>>;
  /** List runtime projects attached to the host project. */
  listRuntimeProjectAttachments(
    request: ListRuntimeProjectAttachmentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRuntimeProjectAttachmentsResponse>>;
  /**
   * Delete a runtime project attachment in the API Hub. This call will detach
   * the runtime project from the host project.
   */
  deleteRuntimeProjectAttachment(
    request: DeleteRuntimeProjectAttachmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Look up a runtime project attachment. This API can be called in the context
   * of any project.
   */
  lookupRuntimeProjectAttachment(
    request: LookupRuntimeProjectAttachmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LookupRuntimeProjectAttachmentResponse>>;
}

export interface RuntimeProjectAttachmentServiceClient<CallOptionsExt = {}> {
  /** Attaches a runtime project to the host project. */
  createRuntimeProjectAttachment(
    request: DeepPartial<CreateRuntimeProjectAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RuntimeProjectAttachment>;
  /** Gets a runtime project attachment. */
  getRuntimeProjectAttachment(
    request: DeepPartial<GetRuntimeProjectAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RuntimeProjectAttachment>;
  /** List runtime projects attached to the host project. */
  listRuntimeProjectAttachments(
    request: DeepPartial<ListRuntimeProjectAttachmentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRuntimeProjectAttachmentsResponse>;
  /**
   * Delete a runtime project attachment in the API Hub. This call will detach
   * the runtime project from the host project.
   */
  deleteRuntimeProjectAttachment(
    request: DeepPartial<DeleteRuntimeProjectAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Look up a runtime project attachment. This API can be called in the context
   * of any project.
   */
  lookupRuntimeProjectAttachment(
    request: DeepPartial<LookupRuntimeProjectAttachmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LookupRuntimeProjectAttachmentResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
