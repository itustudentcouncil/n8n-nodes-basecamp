// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apihub/v1/linting_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Linter, linterFromJSON, linterToJSON } from "./common_fields.js";

export const protobufPackage = "google.cloud.apihub.v1";

/** The [GetStyleGuide][ApiHub.GetStyleGuide] method's request. */
export interface GetStyleGuideRequest {
  /**
   * Required. The name of the spec to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/plugins/{plugin}/styleGuide`.
   */
  name: string;
}

/** The [UpdateStyleGuide][ApiHub.UpdateStyleGuide] method's request. */
export interface UpdateStyleGuideRequest {
  /** Required. The Style guide resource to update. */
  styleGuide:
    | StyleGuide
    | undefined;
  /** Optional. The list of fields to update. */
  updateMask: string[] | undefined;
}

/** The [GetStyleGuideContents][ApiHub.GetStyleGuideContents] method's request. */
export interface GetStyleGuideContentsRequest {
  /**
   * Required. The name of the StyleGuide whose contents need to be retrieved.
   * There is exactly one style guide resource per project per location.
   * The expected format is
   * `projects/{project}/locations/{location}/plugins/{plugin}/styleGuide`.
   */
  name: string;
}

/** The [LintSpec][ApiHub.LintSpec] method's request. */
export interface LintSpecRequest {
  /**
   * Required. The name of the spec to be linted.
   * Format:
   * `projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}`
   */
  name: string;
}

/** The style guide contents. */
export interface StyleGuideContents {
  /** Required. The contents of the style guide. */
  contents: Buffer;
  /** Required. The mime type of the content. */
  mimeType: string;
}

/**
 * Represents a singleton style guide resource to be used for linting Open API
 * specs.
 */
export interface StyleGuide {
  /**
   * Identifier. The name of the style guide.
   *
   * Format:
   * `projects/{project}/locations/{location}/plugins/{plugin}/styleGuide`
   */
  name: string;
  /** Required. Target linter for the style guide. */
  linter: Linter;
  /** Required. Input only. The contents of the uploaded style guide. */
  contents: StyleGuideContents | undefined;
}

function createBaseGetStyleGuideRequest(): GetStyleGuideRequest {
  return { name: "" };
}

export const GetStyleGuideRequest: MessageFns<GetStyleGuideRequest> = {
  encode(message: GetStyleGuideRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStyleGuideRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStyleGuideRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStyleGuideRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetStyleGuideRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStyleGuideRequest>): GetStyleGuideRequest {
    return GetStyleGuideRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStyleGuideRequest>): GetStyleGuideRequest {
    const message = createBaseGetStyleGuideRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateStyleGuideRequest(): UpdateStyleGuideRequest {
  return { styleGuide: undefined, updateMask: undefined };
}

export const UpdateStyleGuideRequest: MessageFns<UpdateStyleGuideRequest> = {
  encode(message: UpdateStyleGuideRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.styleGuide !== undefined) {
      StyleGuide.encode(message.styleGuide, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStyleGuideRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStyleGuideRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.styleGuide = StyleGuide.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStyleGuideRequest {
    return {
      styleGuide: isSet(object.styleGuide) ? StyleGuide.fromJSON(object.styleGuide) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateStyleGuideRequest): unknown {
    const obj: any = {};
    if (message.styleGuide !== undefined) {
      obj.styleGuide = StyleGuide.toJSON(message.styleGuide);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateStyleGuideRequest>): UpdateStyleGuideRequest {
    return UpdateStyleGuideRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateStyleGuideRequest>): UpdateStyleGuideRequest {
    const message = createBaseUpdateStyleGuideRequest();
    message.styleGuide = (object.styleGuide !== undefined && object.styleGuide !== null)
      ? StyleGuide.fromPartial(object.styleGuide)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetStyleGuideContentsRequest(): GetStyleGuideContentsRequest {
  return { name: "" };
}

export const GetStyleGuideContentsRequest: MessageFns<GetStyleGuideContentsRequest> = {
  encode(message: GetStyleGuideContentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStyleGuideContentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStyleGuideContentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStyleGuideContentsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetStyleGuideContentsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStyleGuideContentsRequest>): GetStyleGuideContentsRequest {
    return GetStyleGuideContentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStyleGuideContentsRequest>): GetStyleGuideContentsRequest {
    const message = createBaseGetStyleGuideContentsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLintSpecRequest(): LintSpecRequest {
  return { name: "" };
}

export const LintSpecRequest: MessageFns<LintSpecRequest> = {
  encode(message: LintSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LintSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLintSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LintSpecRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: LintSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<LintSpecRequest>): LintSpecRequest {
    return LintSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LintSpecRequest>): LintSpecRequest {
    const message = createBaseLintSpecRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStyleGuideContents(): StyleGuideContents {
  return { contents: Buffer.alloc(0), mimeType: "" };
}

export const StyleGuideContents: MessageFns<StyleGuideContents> = {
  encode(message: StyleGuideContents, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contents.length !== 0) {
      writer.uint32(10).bytes(message.contents);
    }
    if (message.mimeType !== "") {
      writer.uint32(18).string(message.mimeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StyleGuideContents {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStyleGuideContents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contents = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mimeType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StyleGuideContents {
    return {
      contents: isSet(object.contents) ? Buffer.from(bytesFromBase64(object.contents)) : Buffer.alloc(0),
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
    };
  },

  toJSON(message: StyleGuideContents): unknown {
    const obj: any = {};
    if (message.contents.length !== 0) {
      obj.contents = base64FromBytes(message.contents);
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    return obj;
  },

  create(base?: DeepPartial<StyleGuideContents>): StyleGuideContents {
    return StyleGuideContents.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StyleGuideContents>): StyleGuideContents {
    const message = createBaseStyleGuideContents();
    message.contents = object.contents ?? Buffer.alloc(0);
    message.mimeType = object.mimeType ?? "";
    return message;
  },
};

function createBaseStyleGuide(): StyleGuide {
  return { name: "", linter: 0, contents: undefined };
}

export const StyleGuide: MessageFns<StyleGuide> = {
  encode(message: StyleGuide, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.linter !== 0) {
      writer.uint32(16).int32(message.linter);
    }
    if (message.contents !== undefined) {
      StyleGuideContents.encode(message.contents, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StyleGuide {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStyleGuide();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.linter = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contents = StyleGuideContents.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StyleGuide {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      linter: isSet(object.linter) ? linterFromJSON(object.linter) : 0,
      contents: isSet(object.contents) ? StyleGuideContents.fromJSON(object.contents) : undefined,
    };
  },

  toJSON(message: StyleGuide): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.linter !== 0) {
      obj.linter = linterToJSON(message.linter);
    }
    if (message.contents !== undefined) {
      obj.contents = StyleGuideContents.toJSON(message.contents);
    }
    return obj;
  },

  create(base?: DeepPartial<StyleGuide>): StyleGuide {
    return StyleGuide.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StyleGuide>): StyleGuide {
    const message = createBaseStyleGuide();
    message.name = object.name ?? "";
    message.linter = object.linter ?? 0;
    message.contents = (object.contents !== undefined && object.contents !== null)
      ? StyleGuideContents.fromPartial(object.contents)
      : undefined;
    return message;
  },
};

/** This service provides all methods related to the 1p Linter. */
export type LintingServiceDefinition = typeof LintingServiceDefinition;
export const LintingServiceDefinition = {
  name: "LintingService",
  fullName: "google.cloud.apihub.v1.LintingService",
  methods: {
    /** Get the style guide being used for linting. */
    getStyleGuide: {
      name: "GetStyleGuide",
      requestType: GetStyleGuideRequest,
      requestStream: false,
      responseType: StyleGuide,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              108,
              117,
              103,
              105,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              121,
              108,
              101,
              71,
              117,
              105,
              100,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /** Update the styleGuide to be used for liniting in by API hub. */
    updateStyleGuide: {
      name: "UpdateStyleGuide",
      requestType: UpdateStyleGuideRequest,
      requestStream: false,
      responseType: StyleGuide,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              115,
              116,
              121,
              108,
              101,
              95,
              103,
              117,
              105,
              100,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              81,
              58,
              11,
              115,
              116,
              121,
              108,
              101,
              95,
              103,
              117,
              105,
              100,
              101,
              50,
              66,
              47,
              118,
              49,
              47,
              123,
              115,
              116,
              121,
              108,
              101,
              95,
              103,
              117,
              105,
              100,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              108,
              117,
              103,
              105,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              121,
              108,
              101,
              71,
              117,
              105,
              100,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /** Get the contents of the style guide. */
    getStyleGuideContents: {
      name: "GetStyleGuideContents",
      requestType: GetStyleGuideContentsRequest,
      requestStream: false,
      responseType: StyleGuideContents,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              108,
              117,
              103,
              105,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              121,
              108,
              101,
              71,
              117,
              105,
              100,
              101,
              125,
              58,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lints the requested spec and updates the corresponding API Spec with the
     * lint response. This lint response will be available in all subsequent
     * Get and List Spec calls to Core service.
     */
    lintSpec: {
      name: "LintSpec",
      requestType: LintSpecRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              115,
              47,
              42,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
              58,
              108,
              105,
              110,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface LintingServiceImplementation<CallContextExt = {}> {
  /** Get the style guide being used for linting. */
  getStyleGuide(request: GetStyleGuideRequest, context: CallContext & CallContextExt): Promise<DeepPartial<StyleGuide>>;
  /** Update the styleGuide to be used for liniting in by API hub. */
  updateStyleGuide(
    request: UpdateStyleGuideRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StyleGuide>>;
  /** Get the contents of the style guide. */
  getStyleGuideContents(
    request: GetStyleGuideContentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StyleGuideContents>>;
  /**
   * Lints the requested spec and updates the corresponding API Spec with the
   * lint response. This lint response will be available in all subsequent
   * Get and List Spec calls to Core service.
   */
  lintSpec(request: LintSpecRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface LintingServiceClient<CallOptionsExt = {}> {
  /** Get the style guide being used for linting. */
  getStyleGuide(
    request: DeepPartial<GetStyleGuideRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StyleGuide>;
  /** Update the styleGuide to be used for liniting in by API hub. */
  updateStyleGuide(
    request: DeepPartial<UpdateStyleGuideRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StyleGuide>;
  /** Get the contents of the style guide. */
  getStyleGuideContents(
    request: DeepPartial<GetStyleGuideContentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StyleGuideContents>;
  /**
   * Lints the requested spec and updates the corresponding API Spec with the
   * lint response. This lint response will be available in all subsequent
   * Get and List Spec calls to Core service.
   */
  lintSpec(request: DeepPartial<LintSpecRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
