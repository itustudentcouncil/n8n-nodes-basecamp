// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apihub/v1/provisioning_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { ApiHubInstance } from "./common_fields.js";

export const protobufPackage = "google.cloud.apihub.v1";

/**
 * The
 * [CreateApiHubInstance][google.cloud.apihub.v1.Provisioning.CreateApiHubInstance]
 * method's request.
 */
export interface CreateApiHubInstanceRequest {
  /**
   * Required. The parent resource for the Api Hub instance resource.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. Identifier to assign to the Api Hub instance. Must be unique
   * within scope of the parent resource. If the field is not provided, system
   * generated id will be used.
   *
   * This value should be 4-40 characters, and valid characters
   * are `/[a-z][A-Z][0-9]-_/`.
   */
  apiHubInstanceId: string;
  /** Required. The ApiHub instance. */
  apiHubInstance: ApiHubInstance | undefined;
}

/**
 * The
 * [GetApiHubInstance][google.cloud.apihub.v1.Provisioning.GetApiHubInstance]
 * method's request.
 */
export interface GetApiHubInstanceRequest {
  /**
   * Required. The name of the Api Hub instance to retrieve.
   * Format:
   * `projects/{project}/locations/{location}/apiHubInstances/{apiHubInstance}`.
   */
  name: string;
}

/**
 * The
 * [LookupApiHubInstance][google.cloud.apihub.v1.Provisioning.LookupApiHubInstance]
 * method's request.
 */
export interface LookupApiHubInstanceRequest {
  /**
   * Required. There will always be only one Api Hub instance for a GCP project
   * across all locations.
   * The parent resource for the Api Hub instance resource.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
}

/**
 * The
 * [LookupApiHubInstance][google.cloud.apihub.v1.Provisioning.LookupApiHubInstance]
 * method's response.`
 */
export interface LookupApiHubInstanceResponse {
  /** API Hub instance for a project if it exists, empty otherwise. */
  apiHubInstance: ApiHubInstance | undefined;
}

function createBaseCreateApiHubInstanceRequest(): CreateApiHubInstanceRequest {
  return { parent: "", apiHubInstanceId: "", apiHubInstance: undefined };
}

export const CreateApiHubInstanceRequest: MessageFns<CreateApiHubInstanceRequest> = {
  encode(message: CreateApiHubInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.apiHubInstanceId !== "") {
      writer.uint32(18).string(message.apiHubInstanceId);
    }
    if (message.apiHubInstance !== undefined) {
      ApiHubInstance.encode(message.apiHubInstance, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApiHubInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApiHubInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiHubInstanceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.apiHubInstance = ApiHubInstance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApiHubInstanceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      apiHubInstanceId: isSet(object.apiHubInstanceId) ? globalThis.String(object.apiHubInstanceId) : "",
      apiHubInstance: isSet(object.apiHubInstance) ? ApiHubInstance.fromJSON(object.apiHubInstance) : undefined,
    };
  },

  toJSON(message: CreateApiHubInstanceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.apiHubInstanceId !== "") {
      obj.apiHubInstanceId = message.apiHubInstanceId;
    }
    if (message.apiHubInstance !== undefined) {
      obj.apiHubInstance = ApiHubInstance.toJSON(message.apiHubInstance);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateApiHubInstanceRequest>): CreateApiHubInstanceRequest {
    return CreateApiHubInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateApiHubInstanceRequest>): CreateApiHubInstanceRequest {
    const message = createBaseCreateApiHubInstanceRequest();
    message.parent = object.parent ?? "";
    message.apiHubInstanceId = object.apiHubInstanceId ?? "";
    message.apiHubInstance = (object.apiHubInstance !== undefined && object.apiHubInstance !== null)
      ? ApiHubInstance.fromPartial(object.apiHubInstance)
      : undefined;
    return message;
  },
};

function createBaseGetApiHubInstanceRequest(): GetApiHubInstanceRequest {
  return { name: "" };
}

export const GetApiHubInstanceRequest: MessageFns<GetApiHubInstanceRequest> = {
  encode(message: GetApiHubInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiHubInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiHubInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApiHubInstanceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetApiHubInstanceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetApiHubInstanceRequest>): GetApiHubInstanceRequest {
    return GetApiHubInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApiHubInstanceRequest>): GetApiHubInstanceRequest {
    const message = createBaseGetApiHubInstanceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLookupApiHubInstanceRequest(): LookupApiHubInstanceRequest {
  return { parent: "" };
}

export const LookupApiHubInstanceRequest: MessageFns<LookupApiHubInstanceRequest> = {
  encode(message: LookupApiHubInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupApiHubInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupApiHubInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupApiHubInstanceRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: LookupApiHubInstanceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupApiHubInstanceRequest>): LookupApiHubInstanceRequest {
    return LookupApiHubInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupApiHubInstanceRequest>): LookupApiHubInstanceRequest {
    const message = createBaseLookupApiHubInstanceRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseLookupApiHubInstanceResponse(): LookupApiHubInstanceResponse {
  return { apiHubInstance: undefined };
}

export const LookupApiHubInstanceResponse: MessageFns<LookupApiHubInstanceResponse> = {
  encode(message: LookupApiHubInstanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiHubInstance !== undefined) {
      ApiHubInstance.encode(message.apiHubInstance, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupApiHubInstanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupApiHubInstanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiHubInstance = ApiHubInstance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupApiHubInstanceResponse {
    return {
      apiHubInstance: isSet(object.apiHubInstance) ? ApiHubInstance.fromJSON(object.apiHubInstance) : undefined,
    };
  },

  toJSON(message: LookupApiHubInstanceResponse): unknown {
    const obj: any = {};
    if (message.apiHubInstance !== undefined) {
      obj.apiHubInstance = ApiHubInstance.toJSON(message.apiHubInstance);
    }
    return obj;
  },

  create(base?: DeepPartial<LookupApiHubInstanceResponse>): LookupApiHubInstanceResponse {
    return LookupApiHubInstanceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupApiHubInstanceResponse>): LookupApiHubInstanceResponse {
    const message = createBaseLookupApiHubInstanceResponse();
    message.apiHubInstance = (object.apiHubInstance !== undefined && object.apiHubInstance !== null)
      ? ApiHubInstance.fromPartial(object.apiHubInstance)
      : undefined;
    return message;
  },
};

/** This service is used for managing the data plane provisioning of the API hub. */
export type ProvisioningDefinition = typeof ProvisioningDefinition;
export const ProvisioningDefinition = {
  name: "Provisioning",
  fullName: "google.cloud.apihub.v1.Provisioning",
  methods: {
    /** Provisions instance resources for the API Hub. */
    createApiHubInstance: {
      name: "CreateApiHubInstance",
      requestType: CreateApiHubInstanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              35,
              10,
              14,
              65,
              112,
              105,
              72,
              117,
              98,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              43,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              112,
              105,
              95,
              104,
              117,
              98,
              95,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              44,
              97,
              112,
              105,
              95,
              104,
              117,
              98,
              95,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              16,
              97,
              112,
              105,
              95,
              104,
              117,
              98,
              95,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              105,
              72,
              117,
              98,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single API Hub instance. */
    getApiHubInstance: {
      name: "GetApiHubInstance",
      requestType: GetApiHubInstanceRequest,
      requestStream: false,
      responseType: ApiHubInstance,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              105,
              72,
              117,
              98,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Looks up an Api Hub instance in a given GCP project. There will always be
     * only one Api Hub instance for a GCP project across all locations.
     */
    lookupApiHubInstance: {
      name: "LookupApiHubInstance",
      requestType: LookupApiHubInstanceRequest,
      requestStream: false,
      responseType: LookupApiHubInstanceResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              105,
              72,
              117,
              98,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              58,
              108,
              111,
              111,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ProvisioningServiceImplementation<CallContextExt = {}> {
  /** Provisions instance resources for the API Hub. */
  createApiHubInstance(
    request: CreateApiHubInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets details of a single API Hub instance. */
  getApiHubInstance(
    request: GetApiHubInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ApiHubInstance>>;
  /**
   * Looks up an Api Hub instance in a given GCP project. There will always be
   * only one Api Hub instance for a GCP project across all locations.
   */
  lookupApiHubInstance(
    request: LookupApiHubInstanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LookupApiHubInstanceResponse>>;
}

export interface ProvisioningClient<CallOptionsExt = {}> {
  /** Provisions instance resources for the API Hub. */
  createApiHubInstance(
    request: DeepPartial<CreateApiHubInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets details of a single API Hub instance. */
  getApiHubInstance(
    request: DeepPartial<GetApiHubInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ApiHubInstance>;
  /**
   * Looks up an Api Hub instance in a given GCP project. There will always be
   * only one Api Hub instance for a GCP project across all locations.
   */
  lookupApiHubInstance(
    request: DeepPartial<LookupApiHubInstanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LookupApiHubInstanceResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
