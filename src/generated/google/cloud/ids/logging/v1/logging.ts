// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/ids/logging/v1/logging.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../../protobuf/duration.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.ids.logging.v1";

/** A threat detected by Cloud IDS. */
export interface ThreatLog {
  /** Name of the threat, e,g. "Suspicious HTTP Evasion" */
  name: string;
  /** Unique ID of the threat. */
  threatId: string;
  /** The time of the alert. */
  alertTime:
    | Date
    | undefined;
  /** Severity of threat. */
  alertSeverity: ThreatLog_Severity;
  /** The type of the threat, e.g. "Spyware". */
  type: string;
  /** Category (sub-type) of the threat, e.g. "code-execution". */
  category: string;
  /** The source IP Address of the packet, e.g. "35.191.8.79" */
  sourceIpAddress: string;
  /** The source port of the packet, e.g. 8080 */
  sourcePort: number;
  /** The destination IP Address of the packet, e.g. "192.168.100.2" */
  destinationIpAddress: string;
  /** The destination port of the packet, e.g. 100 */
  destinationPort: number;
  /** The IP protocol of the packet, e.g. "TCP". */
  ipProtocol: string;
  /** The direction of the packet - an optional field. */
  direction: ThreatLog_Direction;
  /** ID of the Layer 4 session of the threat. */
  sessionId: string;
  /**
   * Number of sessions with same source IP, destination IP, application, and
   * type seen within 5 seconds.
   */
  repeatCount: string;
  /** Application associated with the session. */
  application: string;
  /** Variable field. URI or filename of the relevant threat, if applicable. */
  uriOrFilename: string;
  /** CVE IDs of the threat. */
  cves: string[];
  /** Details of the threat reported by the IDS VM */
  details: string;
  /** The network associated with the IDS Endpoint. */
  network: string;
}

/** Describes the type of severity of the threat. */
export enum ThreatLog_Severity {
  /** SEVERITY_UNSPECIFIED - Default value - should never be used. */
  SEVERITY_UNSPECIFIED = 0,
  LOW = 2,
  MEDIUM = 3,
  HIGH = 4,
  CRITICAL = 5,
  INFORMATIONAL = 6,
  UNRECOGNIZED = -1,
}

export function threatLog_SeverityFromJSON(object: any): ThreatLog_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return ThreatLog_Severity.SEVERITY_UNSPECIFIED;
    case 2:
    case "LOW":
      return ThreatLog_Severity.LOW;
    case 3:
    case "MEDIUM":
      return ThreatLog_Severity.MEDIUM;
    case 4:
    case "HIGH":
      return ThreatLog_Severity.HIGH;
    case 5:
    case "CRITICAL":
      return ThreatLog_Severity.CRITICAL;
    case 6:
    case "INFORMATIONAL":
      return ThreatLog_Severity.INFORMATIONAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ThreatLog_Severity.UNRECOGNIZED;
  }
}

export function threatLog_SeverityToJSON(object: ThreatLog_Severity): string {
  switch (object) {
    case ThreatLog_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case ThreatLog_Severity.LOW:
      return "LOW";
    case ThreatLog_Severity.MEDIUM:
      return "MEDIUM";
    case ThreatLog_Severity.HIGH:
      return "HIGH";
    case ThreatLog_Severity.CRITICAL:
      return "CRITICAL";
    case ThreatLog_Severity.INFORMATIONAL:
      return "INFORMATIONAL";
    case ThreatLog_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ThreatLog_Direction {
  /** DIRECTION_UNDEFINED - Default value - permitted since Direction is optional. */
  DIRECTION_UNDEFINED = 0,
  /** CLIENT_TO_SERVER - Ingress traffic. */
  CLIENT_TO_SERVER = 1,
  /** SERVER_TO_CLIENT - Egress traffic. */
  SERVER_TO_CLIENT = 2,
  UNRECOGNIZED = -1,
}

export function threatLog_DirectionFromJSON(object: any): ThreatLog_Direction {
  switch (object) {
    case 0:
    case "DIRECTION_UNDEFINED":
      return ThreatLog_Direction.DIRECTION_UNDEFINED;
    case 1:
    case "CLIENT_TO_SERVER":
      return ThreatLog_Direction.CLIENT_TO_SERVER;
    case 2:
    case "SERVER_TO_CLIENT":
      return ThreatLog_Direction.SERVER_TO_CLIENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ThreatLog_Direction.UNRECOGNIZED;
  }
}

export function threatLog_DirectionToJSON(object: ThreatLog_Direction): string {
  switch (object) {
    case ThreatLog_Direction.DIRECTION_UNDEFINED:
      return "DIRECTION_UNDEFINED";
    case ThreatLog_Direction.CLIENT_TO_SERVER:
      return "CLIENT_TO_SERVER";
    case ThreatLog_Direction.SERVER_TO_CLIENT:
      return "SERVER_TO_CLIENT";
    case ThreatLog_Direction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Traffic detected by Cloud IDS.
 * Fields taken from:
 * https://docs.paloaltonetworks.com/pan-os/8-1/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/traffic-log-fields.html.
 */
export interface TrafficLog {
  /** Time of session start. */
  startTime:
    | Date
    | undefined;
  /** Elapsed time of the session. */
  elapsedTime:
    | Duration
    | undefined;
  /** The network associated with the IDS Endpoint. */
  network: string;
  /** The source IP Address of the packet, e.g. "35.191.8.79" */
  sourceIpAddress: string;
  /** The source port of the packet, e.g. 8080 */
  sourcePort: number;
  /** The destination IP Address of the packet, e.g. "192.168.100.2" */
  destinationIpAddress: string;
  /** The destination port of the packet, e.g. 100 */
  destinationPort: number;
  /** The IP protocol of the packet, e.g. "TCP". */
  ipProtocol: string;
  /** Application associated with the session. */
  application: string;
  /** The direction of the packet. */
  sessionId: string;
  /**
   * Number of sessions with same source IP, destination IP, application, and
   * type seen within 5 seconds.
   */
  repeatCount: string;
  /** Total number of bytes transferred in the session. */
  totalBytes: Long;
  /** Total number of packets transferred in the session. */
  totalPackets: Long;
}

function createBaseThreatLog(): ThreatLog {
  return {
    name: "",
    threatId: "",
    alertTime: undefined,
    alertSeverity: 0,
    type: "",
    category: "",
    sourceIpAddress: "",
    sourcePort: 0,
    destinationIpAddress: "",
    destinationPort: 0,
    ipProtocol: "",
    direction: 0,
    sessionId: "",
    repeatCount: "",
    application: "",
    uriOrFilename: "",
    cves: [],
    details: "",
    network: "",
  };
}

export const ThreatLog: MessageFns<ThreatLog> = {
  encode(message: ThreatLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.threatId !== "") {
      writer.uint32(106).string(message.threatId);
    }
    if (message.alertTime !== undefined) {
      Timestamp.encode(toTimestamp(message.alertTime), writer.uint32(18).fork()).join();
    }
    if (message.alertSeverity !== 0) {
      writer.uint32(152).int32(message.alertSeverity);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.category !== "") {
      writer.uint32(146).string(message.category);
    }
    if (message.sourceIpAddress !== "") {
      writer.uint32(42).string(message.sourceIpAddress);
    }
    if (message.sourcePort !== 0) {
      writer.uint32(48).int32(message.sourcePort);
    }
    if (message.destinationIpAddress !== "") {
      writer.uint32(58).string(message.destinationIpAddress);
    }
    if (message.destinationPort !== 0) {
      writer.uint32(64).int32(message.destinationPort);
    }
    if (message.ipProtocol !== "") {
      writer.uint32(74).string(message.ipProtocol);
    }
    if (message.direction !== 0) {
      writer.uint32(80).int32(message.direction);
    }
    if (message.sessionId !== "") {
      writer.uint32(114).string(message.sessionId);
    }
    if (message.repeatCount !== "") {
      writer.uint32(122).string(message.repeatCount);
    }
    if (message.application !== "") {
      writer.uint32(130).string(message.application);
    }
    if (message.uriOrFilename !== "") {
      writer.uint32(138).string(message.uriOrFilename);
    }
    for (const v of message.cves) {
      writer.uint32(162).string(v!);
    }
    if (message.details !== "") {
      writer.uint32(90).string(message.details);
    }
    if (message.network !== "") {
      writer.uint32(98).string(message.network);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ThreatLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThreatLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.threatId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.alertTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.alertSeverity = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.category = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sourceIpAddress = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.sourcePort = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.destinationIpAddress = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.destinationPort = reader.int32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.ipProtocol = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.repeatCount = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.application = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.uriOrFilename = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.cves.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.details = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.network = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ThreatLog {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      threatId: isSet(object.threatId) ? globalThis.String(object.threatId) : "",
      alertTime: isSet(object.alertTime) ? fromJsonTimestamp(object.alertTime) : undefined,
      alertSeverity: isSet(object.alertSeverity) ? threatLog_SeverityFromJSON(object.alertSeverity) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      sourceIpAddress: isSet(object.sourceIpAddress) ? globalThis.String(object.sourceIpAddress) : "",
      sourcePort: isSet(object.sourcePort) ? globalThis.Number(object.sourcePort) : 0,
      destinationIpAddress: isSet(object.destinationIpAddress) ? globalThis.String(object.destinationIpAddress) : "",
      destinationPort: isSet(object.destinationPort) ? globalThis.Number(object.destinationPort) : 0,
      ipProtocol: isSet(object.ipProtocol) ? globalThis.String(object.ipProtocol) : "",
      direction: isSet(object.direction) ? threatLog_DirectionFromJSON(object.direction) : 0,
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      repeatCount: isSet(object.repeatCount) ? globalThis.String(object.repeatCount) : "",
      application: isSet(object.application) ? globalThis.String(object.application) : "",
      uriOrFilename: isSet(object.uriOrFilename) ? globalThis.String(object.uriOrFilename) : "",
      cves: globalThis.Array.isArray(object?.cves) ? object.cves.map((e: any) => globalThis.String(e)) : [],
      details: isSet(object.details) ? globalThis.String(object.details) : "",
      network: isSet(object.network) ? globalThis.String(object.network) : "",
    };
  },

  toJSON(message: ThreatLog): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.threatId !== "") {
      obj.threatId = message.threatId;
    }
    if (message.alertTime !== undefined) {
      obj.alertTime = message.alertTime.toISOString();
    }
    if (message.alertSeverity !== 0) {
      obj.alertSeverity = threatLog_SeverityToJSON(message.alertSeverity);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.sourceIpAddress !== "") {
      obj.sourceIpAddress = message.sourceIpAddress;
    }
    if (message.sourcePort !== 0) {
      obj.sourcePort = Math.round(message.sourcePort);
    }
    if (message.destinationIpAddress !== "") {
      obj.destinationIpAddress = message.destinationIpAddress;
    }
    if (message.destinationPort !== 0) {
      obj.destinationPort = Math.round(message.destinationPort);
    }
    if (message.ipProtocol !== "") {
      obj.ipProtocol = message.ipProtocol;
    }
    if (message.direction !== 0) {
      obj.direction = threatLog_DirectionToJSON(message.direction);
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.repeatCount !== "") {
      obj.repeatCount = message.repeatCount;
    }
    if (message.application !== "") {
      obj.application = message.application;
    }
    if (message.uriOrFilename !== "") {
      obj.uriOrFilename = message.uriOrFilename;
    }
    if (message.cves?.length) {
      obj.cves = message.cves;
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    return obj;
  },

  create(base?: DeepPartial<ThreatLog>): ThreatLog {
    return ThreatLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ThreatLog>): ThreatLog {
    const message = createBaseThreatLog();
    message.name = object.name ?? "";
    message.threatId = object.threatId ?? "";
    message.alertTime = object.alertTime ?? undefined;
    message.alertSeverity = object.alertSeverity ?? 0;
    message.type = object.type ?? "";
    message.category = object.category ?? "";
    message.sourceIpAddress = object.sourceIpAddress ?? "";
    message.sourcePort = object.sourcePort ?? 0;
    message.destinationIpAddress = object.destinationIpAddress ?? "";
    message.destinationPort = object.destinationPort ?? 0;
    message.ipProtocol = object.ipProtocol ?? "";
    message.direction = object.direction ?? 0;
    message.sessionId = object.sessionId ?? "";
    message.repeatCount = object.repeatCount ?? "";
    message.application = object.application ?? "";
    message.uriOrFilename = object.uriOrFilename ?? "";
    message.cves = object.cves?.map((e) => e) || [];
    message.details = object.details ?? "";
    message.network = object.network ?? "";
    return message;
  },
};

function createBaseTrafficLog(): TrafficLog {
  return {
    startTime: undefined,
    elapsedTime: undefined,
    network: "",
    sourceIpAddress: "",
    sourcePort: 0,
    destinationIpAddress: "",
    destinationPort: 0,
    ipProtocol: "",
    application: "",
    sessionId: "",
    repeatCount: "",
    totalBytes: Long.ZERO,
    totalPackets: Long.ZERO,
  };
}

export const TrafficLog: MessageFns<TrafficLog> = {
  encode(message: TrafficLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.elapsedTime !== undefined) {
      Duration.encode(message.elapsedTime, writer.uint32(18).fork()).join();
    }
    if (message.network !== "") {
      writer.uint32(26).string(message.network);
    }
    if (message.sourceIpAddress !== "") {
      writer.uint32(34).string(message.sourceIpAddress);
    }
    if (message.sourcePort !== 0) {
      writer.uint32(40).int32(message.sourcePort);
    }
    if (message.destinationIpAddress !== "") {
      writer.uint32(50).string(message.destinationIpAddress);
    }
    if (message.destinationPort !== 0) {
      writer.uint32(56).int32(message.destinationPort);
    }
    if (message.ipProtocol !== "") {
      writer.uint32(66).string(message.ipProtocol);
    }
    if (message.application !== "") {
      writer.uint32(74).string(message.application);
    }
    if (message.sessionId !== "") {
      writer.uint32(98).string(message.sessionId);
    }
    if (message.repeatCount !== "") {
      writer.uint32(106).string(message.repeatCount);
    }
    if (!message.totalBytes.equals(Long.ZERO)) {
      writer.uint32(112).int64(message.totalBytes.toString());
    }
    if (!message.totalPackets.equals(Long.ZERO)) {
      writer.uint32(120).int64(message.totalPackets.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrafficLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrafficLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.elapsedTime = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.network = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sourceIpAddress = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.sourcePort = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.destinationIpAddress = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.destinationPort = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.ipProtocol = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.application = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.repeatCount = reader.string();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.totalBytes = Long.fromString(reader.int64().toString());
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.totalPackets = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrafficLog {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      elapsedTime: isSet(object.elapsedTime) ? Duration.fromJSON(object.elapsedTime) : undefined,
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      sourceIpAddress: isSet(object.sourceIpAddress) ? globalThis.String(object.sourceIpAddress) : "",
      sourcePort: isSet(object.sourcePort) ? globalThis.Number(object.sourcePort) : 0,
      destinationIpAddress: isSet(object.destinationIpAddress) ? globalThis.String(object.destinationIpAddress) : "",
      destinationPort: isSet(object.destinationPort) ? globalThis.Number(object.destinationPort) : 0,
      ipProtocol: isSet(object.ipProtocol) ? globalThis.String(object.ipProtocol) : "",
      application: isSet(object.application) ? globalThis.String(object.application) : "",
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      repeatCount: isSet(object.repeatCount) ? globalThis.String(object.repeatCount) : "",
      totalBytes: isSet(object.totalBytes) ? Long.fromValue(object.totalBytes) : Long.ZERO,
      totalPackets: isSet(object.totalPackets) ? Long.fromValue(object.totalPackets) : Long.ZERO,
    };
  },

  toJSON(message: TrafficLog): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.elapsedTime !== undefined) {
      obj.elapsedTime = Duration.toJSON(message.elapsedTime);
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.sourceIpAddress !== "") {
      obj.sourceIpAddress = message.sourceIpAddress;
    }
    if (message.sourcePort !== 0) {
      obj.sourcePort = Math.round(message.sourcePort);
    }
    if (message.destinationIpAddress !== "") {
      obj.destinationIpAddress = message.destinationIpAddress;
    }
    if (message.destinationPort !== 0) {
      obj.destinationPort = Math.round(message.destinationPort);
    }
    if (message.ipProtocol !== "") {
      obj.ipProtocol = message.ipProtocol;
    }
    if (message.application !== "") {
      obj.application = message.application;
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.repeatCount !== "") {
      obj.repeatCount = message.repeatCount;
    }
    if (!message.totalBytes.equals(Long.ZERO)) {
      obj.totalBytes = (message.totalBytes || Long.ZERO).toString();
    }
    if (!message.totalPackets.equals(Long.ZERO)) {
      obj.totalPackets = (message.totalPackets || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<TrafficLog>): TrafficLog {
    return TrafficLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrafficLog>): TrafficLog {
    const message = createBaseTrafficLog();
    message.startTime = object.startTime ?? undefined;
    message.elapsedTime = (object.elapsedTime !== undefined && object.elapsedTime !== null)
      ? Duration.fromPartial(object.elapsedTime)
      : undefined;
    message.network = object.network ?? "";
    message.sourceIpAddress = object.sourceIpAddress ?? "";
    message.sourcePort = object.sourcePort ?? 0;
    message.destinationIpAddress = object.destinationIpAddress ?? "";
    message.destinationPort = object.destinationPort ?? 0;
    message.ipProtocol = object.ipProtocol ?? "";
    message.application = object.application ?? "";
    message.sessionId = object.sessionId ?? "";
    message.repeatCount = object.repeatCount ?? "";
    message.totalBytes = (object.totalBytes !== undefined && object.totalBytes !== null)
      ? Long.fromValue(object.totalBytes)
      : Long.ZERO;
    message.totalPackets = (object.totalPackets !== undefined && object.totalPackets !== null)
      ? Long.fromValue(object.totalPackets)
      : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
