// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/ids/v1/ids.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.ids.v1";

/**
 * Endpoint describes a single IDS endpoint. It defines a forwarding rule to
 * which packets can be sent for IDS inspection.
 */
export interface Endpoint {
  /** Output only. The name of the endpoint. */
  name: string;
  /** Output only. The create time timestamp. */
  createTime:
    | Date
    | undefined;
  /** Output only. The update time timestamp. */
  updateTime:
    | Date
    | undefined;
  /** The labels of the endpoint. */
  labels: { [key: string]: string };
  /**
   * Required. The fully qualified URL of the network to which the IDS Endpoint is
   * attached.
   */
  network: string;
  /** Output only. The fully qualified URL of the endpoint's ILB Forwarding Rule. */
  endpointForwardingRule: string;
  /** Output only. The IP address of the IDS Endpoint's ILB. */
  endpointIp: string;
  /** User-provided description of the endpoint */
  description: string;
  /** Required. Lowest threat severity that this endpoint will alert on. */
  severity: Endpoint_Severity;
  /** Output only. Current state of the endpoint. */
  state: Endpoint_State;
  /** Whether the endpoint should report traffic logs in addition to threat logs. */
  trafficLogs: boolean;
}

/** Threat severity levels. */
export enum Endpoint_Severity {
  /** SEVERITY_UNSPECIFIED - Not set. */
  SEVERITY_UNSPECIFIED = 0,
  /** INFORMATIONAL - Informational alerts. */
  INFORMATIONAL = 1,
  /** LOW - Low severity alerts. */
  LOW = 2,
  /** MEDIUM - Medium severity alerts. */
  MEDIUM = 3,
  /** HIGH - High severity alerts. */
  HIGH = 4,
  /** CRITICAL - Critical severity alerts. */
  CRITICAL = 5,
  UNRECOGNIZED = -1,
}

export function endpoint_SeverityFromJSON(object: any): Endpoint_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return Endpoint_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "INFORMATIONAL":
      return Endpoint_Severity.INFORMATIONAL;
    case 2:
    case "LOW":
      return Endpoint_Severity.LOW;
    case 3:
    case "MEDIUM":
      return Endpoint_Severity.MEDIUM;
    case 4:
    case "HIGH":
      return Endpoint_Severity.HIGH;
    case 5:
    case "CRITICAL":
      return Endpoint_Severity.CRITICAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Endpoint_Severity.UNRECOGNIZED;
  }
}

export function endpoint_SeverityToJSON(object: Endpoint_Severity): string {
  switch (object) {
    case Endpoint_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case Endpoint_Severity.INFORMATIONAL:
      return "INFORMATIONAL";
    case Endpoint_Severity.LOW:
      return "LOW";
    case Endpoint_Severity.MEDIUM:
      return "MEDIUM";
    case Endpoint_Severity.HIGH:
      return "HIGH";
    case Endpoint_Severity.CRITICAL:
      return "CRITICAL";
    case Endpoint_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Endpoint state */
export enum Endpoint_State {
  /** STATE_UNSPECIFIED - Not set. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Being created. */
  CREATING = 1,
  /** READY - Active and ready for traffic. */
  READY = 2,
  /** DELETING - Being deleted. */
  DELETING = 3,
  UNRECOGNIZED = -1,
}

export function endpoint_StateFromJSON(object: any): Endpoint_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Endpoint_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Endpoint_State.CREATING;
    case 2:
    case "READY":
      return Endpoint_State.READY;
    case 3:
    case "DELETING":
      return Endpoint_State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Endpoint_State.UNRECOGNIZED;
  }
}

export function endpoint_StateToJSON(object: Endpoint_State): string {
  switch (object) {
    case Endpoint_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Endpoint_State.CREATING:
      return "CREATING";
    case Endpoint_State.READY:
      return "READY";
    case Endpoint_State.DELETING:
      return "DELETING";
    case Endpoint_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Endpoint_LabelsEntry {
  key: string;
  value: string;
}

export interface ListEndpointsRequest {
  /** Required. The parent, which owns this collection of endpoints. */
  parent: string;
  /**
   * Optional. The maximum number of endpoints to return. The service may return fewer
   * than this value.
   */
  pageSize: number;
  /**
   * Optional. A page token, received from a previous `ListEndpoints` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListEndpoints` must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. The filter expression, following the syntax outlined in
   * https://google.aip.dev/160.
   */
  filter: string;
  /**
   * Optional. One or more fields to compare and use to sort the output.
   * See https://google.aip.dev/132#ordering.
   */
  orderBy: string;
}

export interface ListEndpointsResponse {
  /** The list of endpoints response. */
  endpoints: Endpoint[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

export interface GetEndpointRequest {
  /**
   * Required. The name of the endpoint to retrieve.
   * Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`
   */
  name: string;
}

export interface CreateEndpointRequest {
  /** Required. The endpoint's parent. */
  parent: string;
  /**
   * Required. The endpoint identifier. This will be part of the endpoint's
   * resource name.
   * This value must start with a lowercase letter followed by up to 62
   * lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
   * Values that do not match this pattern will trigger an INVALID_ARGUMENT
   * error.
   */
  endpointId: string;
  /** Required. The endpoint to create. */
  endpoint:
    | Endpoint
    | undefined;
  /**
   * An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

export interface DeleteEndpointRequest {
  /** Required. The name of the endpoint to delete. */
  name: string;
  /**
   * An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseEndpoint(): Endpoint {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    network: "",
    endpointForwardingRule: "",
    endpointIp: "",
    description: "",
    severity: 0,
    state: 0,
    trafficLogs: false,
  };
}

export const Endpoint: MessageFns<Endpoint> = {
  encode(message: Endpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Endpoint_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.network !== "") {
      writer.uint32(42).string(message.network);
    }
    if (message.endpointForwardingRule !== "") {
      writer.uint32(50).string(message.endpointForwardingRule);
    }
    if (message.endpointIp !== "") {
      writer.uint32(58).string(message.endpointIp);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    if (message.severity !== 0) {
      writer.uint32(72).int32(message.severity);
    }
    if (message.state !== 0) {
      writer.uint32(96).int32(message.state);
    }
    if (message.trafficLogs !== false) {
      writer.uint32(104).bool(message.trafficLogs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Endpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Endpoint_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.network = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endpointForwardingRule = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.endpointIp = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.trafficLogs = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Endpoint {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      endpointForwardingRule: isSet(object.endpointForwardingRule)
        ? globalThis.String(object.endpointForwardingRule)
        : "",
      endpointIp: isSet(object.endpointIp) ? globalThis.String(object.endpointIp) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      severity: isSet(object.severity) ? endpoint_SeverityFromJSON(object.severity) : 0,
      state: isSet(object.state) ? endpoint_StateFromJSON(object.state) : 0,
      trafficLogs: isSet(object.trafficLogs) ? globalThis.Boolean(object.trafficLogs) : false,
    };
  },

  toJSON(message: Endpoint): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.endpointForwardingRule !== "") {
      obj.endpointForwardingRule = message.endpointForwardingRule;
    }
    if (message.endpointIp !== "") {
      obj.endpointIp = message.endpointIp;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.severity !== 0) {
      obj.severity = endpoint_SeverityToJSON(message.severity);
    }
    if (message.state !== 0) {
      obj.state = endpoint_StateToJSON(message.state);
    }
    if (message.trafficLogs !== false) {
      obj.trafficLogs = message.trafficLogs;
    }
    return obj;
  },

  create(base?: DeepPartial<Endpoint>): Endpoint {
    return Endpoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Endpoint>): Endpoint {
    const message = createBaseEndpoint();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.network = object.network ?? "";
    message.endpointForwardingRule = object.endpointForwardingRule ?? "";
    message.endpointIp = object.endpointIp ?? "";
    message.description = object.description ?? "";
    message.severity = object.severity ?? 0;
    message.state = object.state ?? 0;
    message.trafficLogs = object.trafficLogs ?? false;
    return message;
  },
};

function createBaseEndpoint_LabelsEntry(): Endpoint_LabelsEntry {
  return { key: "", value: "" };
}

export const Endpoint_LabelsEntry: MessageFns<Endpoint_LabelsEntry> = {
  encode(message: Endpoint_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Endpoint_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndpoint_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Endpoint_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Endpoint_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Endpoint_LabelsEntry>): Endpoint_LabelsEntry {
    return Endpoint_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Endpoint_LabelsEntry>): Endpoint_LabelsEntry {
    const message = createBaseEndpoint_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListEndpointsRequest(): ListEndpointsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListEndpointsRequest: MessageFns<ListEndpointsRequest> = {
  encode(message: ListEndpointsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEndpointsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEndpointsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEndpointsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListEndpointsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEndpointsRequest>): ListEndpointsRequest {
    return ListEndpointsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEndpointsRequest>): ListEndpointsRequest {
    const message = createBaseListEndpointsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListEndpointsResponse(): ListEndpointsResponse {
  return { endpoints: [], nextPageToken: "", unreachable: [] };
}

export const ListEndpointsResponse: MessageFns<ListEndpointsResponse> = {
  encode(message: ListEndpointsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.endpoints) {
      Endpoint.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEndpointsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEndpointsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoints.push(Endpoint.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEndpointsResponse {
    return {
      endpoints: globalThis.Array.isArray(object?.endpoints)
        ? object.endpoints.map((e: any) => Endpoint.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListEndpointsResponse): unknown {
    const obj: any = {};
    if (message.endpoints?.length) {
      obj.endpoints = message.endpoints.map((e) => Endpoint.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEndpointsResponse>): ListEndpointsResponse {
    return ListEndpointsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEndpointsResponse>): ListEndpointsResponse {
    const message = createBaseListEndpointsResponse();
    message.endpoints = object.endpoints?.map((e) => Endpoint.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetEndpointRequest(): GetEndpointRequest {
  return { name: "" };
}

export const GetEndpointRequest: MessageFns<GetEndpointRequest> = {
  encode(message: GetEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEndpointRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEndpointRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEndpointRequest>): GetEndpointRequest {
    return GetEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEndpointRequest>): GetEndpointRequest {
    const message = createBaseGetEndpointRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateEndpointRequest(): CreateEndpointRequest {
  return { parent: "", endpointId: "", endpoint: undefined, requestId: "" };
}

export const CreateEndpointRequest: MessageFns<CreateEndpointRequest> = {
  encode(message: CreateEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.endpointId !== "") {
      writer.uint32(18).string(message.endpointId);
    }
    if (message.endpoint !== undefined) {
      Endpoint.encode(message.endpoint, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endpoint = Endpoint.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEndpointRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      endpoint: isSet(object.endpoint) ? Endpoint.fromJSON(object.endpoint) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateEndpointRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.endpoint !== undefined) {
      obj.endpoint = Endpoint.toJSON(message.endpoint);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEndpointRequest>): CreateEndpointRequest {
    return CreateEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEndpointRequest>): CreateEndpointRequest {
    const message = createBaseCreateEndpointRequest();
    message.parent = object.parent ?? "";
    message.endpointId = object.endpointId ?? "";
    message.endpoint = (object.endpoint !== undefined && object.endpoint !== null)
      ? Endpoint.fromPartial(object.endpoint)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteEndpointRequest(): DeleteEndpointRequest {
  return { name: "", requestId: "" };
}

export const DeleteEndpointRequest: MessageFns<DeleteEndpointRequest> = {
  encode(message: DeleteEndpointRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEndpointRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEndpointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEndpointRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteEndpointRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEndpointRequest>): DeleteEndpointRequest {
    return DeleteEndpointRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEndpointRequest>): DeleteEndpointRequest {
    const message = createBaseDeleteEndpointRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/** The IDS Service */
export type IDSDefinition = typeof IDSDefinition;
export const IDSDefinition = {
  name: "IDS",
  fullName: "google.cloud.ids.v1.IDS",
  methods: {
    /** Lists Endpoints in a given project and location. */
    listEndpoints: {
      name: "ListEndpoints",
      requestType: ListEndpointsRequest,
      requestStream: false,
      responseType: ListEndpointsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Endpoint. */
    getEndpoint: {
      name: "GetEndpoint",
      requestType: GetEndpointRequest,
      requestStream: false,
      responseType: Endpoint,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Endpoint in a given project and location. */
    createEndpoint: {
      name: "CreateEndpoint",
      requestType: CreateEndpointRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              44,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              8,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Endpoint. */
    deleteEndpoint: {
      name: "DeleteEndpoint",
      requestType: DeleteEndpointRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              42,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface IDSServiceImplementation<CallContextExt = {}> {
  /** Lists Endpoints in a given project and location. */
  listEndpoints(
    request: ListEndpointsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEndpointsResponse>>;
  /** Gets details of a single Endpoint. */
  getEndpoint(request: GetEndpointRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Endpoint>>;
  /** Creates a new Endpoint in a given project and location. */
  createEndpoint(
    request: CreateEndpointRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Endpoint. */
  deleteEndpoint(
    request: DeleteEndpointRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface IDSClient<CallOptionsExt = {}> {
  /** Lists Endpoints in a given project and location. */
  listEndpoints(
    request: DeepPartial<ListEndpointsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEndpointsResponse>;
  /** Gets details of a single Endpoint. */
  getEndpoint(request: DeepPartial<GetEndpointRequest>, options?: CallOptions & CallOptionsExt): Promise<Endpoint>;
  /** Creates a new Endpoint in a given project and location. */
  createEndpoint(
    request: DeepPartial<CreateEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Endpoint. */
  deleteEndpoint(
    request: DeepPartial<DeleteEndpointRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
