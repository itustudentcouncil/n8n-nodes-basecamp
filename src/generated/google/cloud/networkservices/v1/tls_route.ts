// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkservices/v1/tls_route.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.networkservices.v1";

/**
 * TlsRoute defines how traffic should be routed based on SNI and other matching
 * L3 attributes.
 */
export interface TlsRoute {
  /**
   * Required. Name of the TlsRoute resource. It matches pattern
   * `projects/* /locations/global/tlsRoutes/tls_route_name>`.
   */
  name: string;
  /** Output only. Server-defined URL of this resource */
  selfLink: string;
  /** Output only. The timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp when the resource was updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. A free-text description of the resource. Max length 1024
   * characters.
   */
  description: string;
  /**
   * Required. Rules that define how traffic is routed and handled. At least one
   * RouteRule must be supplied. If there are multiple rules then the action
   * taken will be the first rule to match.
   */
  rules: TlsRoute_RouteRule[];
  /**
   * Optional. Meshes defines a list of meshes this TlsRoute is attached to, as
   * one of the routing rules to route the requests served by the mesh.
   *
   * Each mesh reference should match the pattern:
   * `projects/* /locations/global/meshes/<mesh_name>`
   *
   * The attached Mesh should be of a type SIDECAR
   */
  meshes: string[];
  /**
   * Optional. Gateways defines a list of gateways this TlsRoute is attached to,
   * as one of the routing rules to route the requests served by the gateway.
   *
   * Each gateway reference should match the pattern:
   * `projects/* /locations/global/gateways/<gateway_name>`
   */
  gateways: string[];
}

/**
 * Specifies how to match traffic and how to route traffic when traffic is
 * matched.
 */
export interface TlsRoute_RouteRule {
  /**
   * Required. RouteMatch defines the predicate used to match requests to a
   * given action. Multiple match types are "OR"ed for evaluation.
   */
  matches: TlsRoute_RouteMatch[];
  /** Required. The detailed rule defining how to route matched traffic. */
  action: TlsRoute_RouteAction | undefined;
}

/**
 * RouteMatch defines the predicate used to match requests to a given action.
 * Multiple match types are "AND"ed for evaluation.
 * If no routeMatch field is specified, this rule will unconditionally match
 * traffic.
 */
export interface TlsRoute_RouteMatch {
  /**
   * Optional. SNI (server name indicator) to match against.
   * SNI will be matched against all wildcard domains, i.e. `www.example.com`
   * will be first matched against `www.example.com`, then `*.example.com`,
   * then `*.com.`
   * Partial wildcards are not supported, and values like *w.example.com are
   * invalid.
   * At least one of sni_host and alpn is required.
   * Up to 5 sni hosts across all matches can be set.
   */
  sniHost: string[];
  /**
   * Optional. ALPN (Application-Layer Protocol Negotiation) to match against.
   * Examples: "http/1.1", "h2".
   * At least one of sni_host and alpn is required.
   * Up to 5 alpns across all matches can be set.
   */
  alpn: string[];
}

/** The specifications for routing traffic and applying associated policies. */
export interface TlsRoute_RouteAction {
  /**
   * Required. The destination services to which traffic should be forwarded.
   * At least one destination service is required.
   */
  destinations: TlsRoute_RouteDestination[];
}

/** Describe the destination for traffic to be routed to. */
export interface TlsRoute_RouteDestination {
  /** Required. The URL of a BackendService to route traffic to. */
  serviceName: string;
  /**
   * Optional. Specifies the proportion of requests forwareded to the backend
   * referenced by the service_name field. This is computed as:
   * - weight/Sum(weights in destinations)
   * Weights in all destinations does not need to sum up to 100.
   */
  weight: number;
}

/** Request used with the ListTlsRoutes method. */
export interface ListTlsRoutesRequest {
  /**
   * Required. The project and location from which the TlsRoutes should be
   * listed, specified in the format `projects/* /locations/global`.
   */
  parent: string;
  /** Maximum number of TlsRoutes to return per call. */
  pageSize: number;
  /**
   * The value returned by the last `ListTlsRoutesResponse`
   * Indicates that this is a continuation of a prior `ListTlsRoutes` call,
   * and that the system should return the next page of data.
   */
  pageToken: string;
}

/** Response returned by the ListTlsRoutes method. */
export interface ListTlsRoutesResponse {
  /** List of TlsRoute resources. */
  tlsRoutes: TlsRoute[];
  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   */
  nextPageToken: string;
}

/** Request used by the GetTlsRoute method. */
export interface GetTlsRouteRequest {
  /**
   * Required. A name of the TlsRoute to get. Must be in the format
   * `projects/* /locations/global/tlsRoutes/*`.
   */
  name: string;
}

/** Request used by the TlsRoute method. */
export interface CreateTlsRouteRequest {
  /**
   * Required. The parent resource of the TlsRoute. Must be in the
   * format `projects/* /locations/global`.
   */
  parent: string;
  /** Required. Short name of the TlsRoute resource to be created. */
  tlsRouteId: string;
  /** Required. TlsRoute resource to be created. */
  tlsRoute: TlsRoute | undefined;
}

/** Request used by the UpdateTlsRoute method. */
export interface UpdateTlsRouteRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * TlsRoute resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Updated TlsRoute resource. */
  tlsRoute: TlsRoute | undefined;
}

/** Request used by the DeleteTlsRoute method. */
export interface DeleteTlsRouteRequest {
  /**
   * Required. A name of the TlsRoute to delete. Must be in the format
   * `projects/* /locations/global/tlsRoutes/*`.
   */
  name: string;
}

function createBaseTlsRoute(): TlsRoute {
  return {
    name: "",
    selfLink: "",
    createTime: undefined,
    updateTime: undefined,
    description: "",
    rules: [],
    meshes: [],
    gateways: [],
  };
}

export const TlsRoute: MessageFns<TlsRoute> = {
  encode(message: TlsRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.selfLink !== "") {
      writer.uint32(66).string(message.selfLink);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    for (const v of message.rules) {
      TlsRoute_RouteRule.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.meshes) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.gateways) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlsRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlsRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.selfLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.rules.push(TlsRoute_RouteRule.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.meshes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.gateways.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlsRoute {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      selfLink: isSet(object.selfLink) ? globalThis.String(object.selfLink) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      rules: globalThis.Array.isArray(object?.rules)
        ? object.rules.map((e: any) => TlsRoute_RouteRule.fromJSON(e))
        : [],
      meshes: globalThis.Array.isArray(object?.meshes) ? object.meshes.map((e: any) => globalThis.String(e)) : [],
      gateways: globalThis.Array.isArray(object?.gateways) ? object.gateways.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: TlsRoute): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.selfLink !== "") {
      obj.selfLink = message.selfLink;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => TlsRoute_RouteRule.toJSON(e));
    }
    if (message.meshes?.length) {
      obj.meshes = message.meshes;
    }
    if (message.gateways?.length) {
      obj.gateways = message.gateways;
    }
    return obj;
  },

  create(base?: DeepPartial<TlsRoute>): TlsRoute {
    return TlsRoute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TlsRoute>): TlsRoute {
    const message = createBaseTlsRoute();
    message.name = object.name ?? "";
    message.selfLink = object.selfLink ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.rules = object.rules?.map((e) => TlsRoute_RouteRule.fromPartial(e)) || [];
    message.meshes = object.meshes?.map((e) => e) || [];
    message.gateways = object.gateways?.map((e) => e) || [];
    return message;
  },
};

function createBaseTlsRoute_RouteRule(): TlsRoute_RouteRule {
  return { matches: [], action: undefined };
}

export const TlsRoute_RouteRule: MessageFns<TlsRoute_RouteRule> = {
  encode(message: TlsRoute_RouteRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.matches) {
      TlsRoute_RouteMatch.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.action !== undefined) {
      TlsRoute_RouteAction.encode(message.action, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlsRoute_RouteRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlsRoute_RouteRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.matches.push(TlsRoute_RouteMatch.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.action = TlsRoute_RouteAction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlsRoute_RouteRule {
    return {
      matches: globalThis.Array.isArray(object?.matches)
        ? object.matches.map((e: any) => TlsRoute_RouteMatch.fromJSON(e))
        : [],
      action: isSet(object.action) ? TlsRoute_RouteAction.fromJSON(object.action) : undefined,
    };
  },

  toJSON(message: TlsRoute_RouteRule): unknown {
    const obj: any = {};
    if (message.matches?.length) {
      obj.matches = message.matches.map((e) => TlsRoute_RouteMatch.toJSON(e));
    }
    if (message.action !== undefined) {
      obj.action = TlsRoute_RouteAction.toJSON(message.action);
    }
    return obj;
  },

  create(base?: DeepPartial<TlsRoute_RouteRule>): TlsRoute_RouteRule {
    return TlsRoute_RouteRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TlsRoute_RouteRule>): TlsRoute_RouteRule {
    const message = createBaseTlsRoute_RouteRule();
    message.matches = object.matches?.map((e) => TlsRoute_RouteMatch.fromPartial(e)) || [];
    message.action = (object.action !== undefined && object.action !== null)
      ? TlsRoute_RouteAction.fromPartial(object.action)
      : undefined;
    return message;
  },
};

function createBaseTlsRoute_RouteMatch(): TlsRoute_RouteMatch {
  return { sniHost: [], alpn: [] };
}

export const TlsRoute_RouteMatch: MessageFns<TlsRoute_RouteMatch> = {
  encode(message: TlsRoute_RouteMatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sniHost) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.alpn) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlsRoute_RouteMatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlsRoute_RouteMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sniHost.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.alpn.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlsRoute_RouteMatch {
    return {
      sniHost: globalThis.Array.isArray(object?.sniHost) ? object.sniHost.map((e: any) => globalThis.String(e)) : [],
      alpn: globalThis.Array.isArray(object?.alpn) ? object.alpn.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: TlsRoute_RouteMatch): unknown {
    const obj: any = {};
    if (message.sniHost?.length) {
      obj.sniHost = message.sniHost;
    }
    if (message.alpn?.length) {
      obj.alpn = message.alpn;
    }
    return obj;
  },

  create(base?: DeepPartial<TlsRoute_RouteMatch>): TlsRoute_RouteMatch {
    return TlsRoute_RouteMatch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TlsRoute_RouteMatch>): TlsRoute_RouteMatch {
    const message = createBaseTlsRoute_RouteMatch();
    message.sniHost = object.sniHost?.map((e) => e) || [];
    message.alpn = object.alpn?.map((e) => e) || [];
    return message;
  },
};

function createBaseTlsRoute_RouteAction(): TlsRoute_RouteAction {
  return { destinations: [] };
}

export const TlsRoute_RouteAction: MessageFns<TlsRoute_RouteAction> = {
  encode(message: TlsRoute_RouteAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.destinations) {
      TlsRoute_RouteDestination.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlsRoute_RouteAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlsRoute_RouteAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destinations.push(TlsRoute_RouteDestination.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlsRoute_RouteAction {
    return {
      destinations: globalThis.Array.isArray(object?.destinations)
        ? object.destinations.map((e: any) => TlsRoute_RouteDestination.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TlsRoute_RouteAction): unknown {
    const obj: any = {};
    if (message.destinations?.length) {
      obj.destinations = message.destinations.map((e) => TlsRoute_RouteDestination.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TlsRoute_RouteAction>): TlsRoute_RouteAction {
    return TlsRoute_RouteAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TlsRoute_RouteAction>): TlsRoute_RouteAction {
    const message = createBaseTlsRoute_RouteAction();
    message.destinations = object.destinations?.map((e) => TlsRoute_RouteDestination.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTlsRoute_RouteDestination(): TlsRoute_RouteDestination {
  return { serviceName: "", weight: 0 };
}

export const TlsRoute_RouteDestination: MessageFns<TlsRoute_RouteDestination> = {
  encode(message: TlsRoute_RouteDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.weight !== 0) {
      writer.uint32(16).int32(message.weight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlsRoute_RouteDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlsRoute_RouteDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.weight = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlsRoute_RouteDestination {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
    };
  },

  toJSON(message: TlsRoute_RouteDestination): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    return obj;
  },

  create(base?: DeepPartial<TlsRoute_RouteDestination>): TlsRoute_RouteDestination {
    return TlsRoute_RouteDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TlsRoute_RouteDestination>): TlsRoute_RouteDestination {
    const message = createBaseTlsRoute_RouteDestination();
    message.serviceName = object.serviceName ?? "";
    message.weight = object.weight ?? 0;
    return message;
  },
};

function createBaseListTlsRoutesRequest(): ListTlsRoutesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListTlsRoutesRequest: MessageFns<ListTlsRoutesRequest> = {
  encode(message: ListTlsRoutesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTlsRoutesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTlsRoutesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTlsRoutesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListTlsRoutesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTlsRoutesRequest>): ListTlsRoutesRequest {
    return ListTlsRoutesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTlsRoutesRequest>): ListTlsRoutesRequest {
    const message = createBaseListTlsRoutesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListTlsRoutesResponse(): ListTlsRoutesResponse {
  return { tlsRoutes: [], nextPageToken: "" };
}

export const ListTlsRoutesResponse: MessageFns<ListTlsRoutesResponse> = {
  encode(message: ListTlsRoutesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tlsRoutes) {
      TlsRoute.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTlsRoutesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTlsRoutesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tlsRoutes.push(TlsRoute.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTlsRoutesResponse {
    return {
      tlsRoutes: globalThis.Array.isArray(object?.tlsRoutes)
        ? object.tlsRoutes.map((e: any) => TlsRoute.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTlsRoutesResponse): unknown {
    const obj: any = {};
    if (message.tlsRoutes?.length) {
      obj.tlsRoutes = message.tlsRoutes.map((e) => TlsRoute.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTlsRoutesResponse>): ListTlsRoutesResponse {
    return ListTlsRoutesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTlsRoutesResponse>): ListTlsRoutesResponse {
    const message = createBaseListTlsRoutesResponse();
    message.tlsRoutes = object.tlsRoutes?.map((e) => TlsRoute.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetTlsRouteRequest(): GetTlsRouteRequest {
  return { name: "" };
}

export const GetTlsRouteRequest: MessageFns<GetTlsRouteRequest> = {
  encode(message: GetTlsRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTlsRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTlsRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTlsRouteRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTlsRouteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTlsRouteRequest>): GetTlsRouteRequest {
    return GetTlsRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTlsRouteRequest>): GetTlsRouteRequest {
    const message = createBaseGetTlsRouteRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateTlsRouteRequest(): CreateTlsRouteRequest {
  return { parent: "", tlsRouteId: "", tlsRoute: undefined };
}

export const CreateTlsRouteRequest: MessageFns<CreateTlsRouteRequest> = {
  encode(message: CreateTlsRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tlsRouteId !== "") {
      writer.uint32(18).string(message.tlsRouteId);
    }
    if (message.tlsRoute !== undefined) {
      TlsRoute.encode(message.tlsRoute, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTlsRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTlsRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tlsRouteId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tlsRoute = TlsRoute.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTlsRouteRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tlsRouteId: isSet(object.tlsRouteId) ? globalThis.String(object.tlsRouteId) : "",
      tlsRoute: isSet(object.tlsRoute) ? TlsRoute.fromJSON(object.tlsRoute) : undefined,
    };
  },

  toJSON(message: CreateTlsRouteRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tlsRouteId !== "") {
      obj.tlsRouteId = message.tlsRouteId;
    }
    if (message.tlsRoute !== undefined) {
      obj.tlsRoute = TlsRoute.toJSON(message.tlsRoute);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTlsRouteRequest>): CreateTlsRouteRequest {
    return CreateTlsRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTlsRouteRequest>): CreateTlsRouteRequest {
    const message = createBaseCreateTlsRouteRequest();
    message.parent = object.parent ?? "";
    message.tlsRouteId = object.tlsRouteId ?? "";
    message.tlsRoute = (object.tlsRoute !== undefined && object.tlsRoute !== null)
      ? TlsRoute.fromPartial(object.tlsRoute)
      : undefined;
    return message;
  },
};

function createBaseUpdateTlsRouteRequest(): UpdateTlsRouteRequest {
  return { updateMask: undefined, tlsRoute: undefined };
}

export const UpdateTlsRouteRequest: MessageFns<UpdateTlsRouteRequest> = {
  encode(message: UpdateTlsRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.tlsRoute !== undefined) {
      TlsRoute.encode(message.tlsRoute, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTlsRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTlsRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tlsRoute = TlsRoute.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTlsRouteRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      tlsRoute: isSet(object.tlsRoute) ? TlsRoute.fromJSON(object.tlsRoute) : undefined,
    };
  },

  toJSON(message: UpdateTlsRouteRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.tlsRoute !== undefined) {
      obj.tlsRoute = TlsRoute.toJSON(message.tlsRoute);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTlsRouteRequest>): UpdateTlsRouteRequest {
    return UpdateTlsRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTlsRouteRequest>): UpdateTlsRouteRequest {
    const message = createBaseUpdateTlsRouteRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.tlsRoute = (object.tlsRoute !== undefined && object.tlsRoute !== null)
      ? TlsRoute.fromPartial(object.tlsRoute)
      : undefined;
    return message;
  },
};

function createBaseDeleteTlsRouteRequest(): DeleteTlsRouteRequest {
  return { name: "" };
}

export const DeleteTlsRouteRequest: MessageFns<DeleteTlsRouteRequest> = {
  encode(message: DeleteTlsRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTlsRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTlsRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTlsRouteRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTlsRouteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTlsRouteRequest>): DeleteTlsRouteRequest {
    return DeleteTlsRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTlsRouteRequest>): DeleteTlsRouteRequest {
    const message = createBaseDeleteTlsRouteRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
