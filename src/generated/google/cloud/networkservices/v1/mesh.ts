// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkservices/v1/mesh.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.networkservices.v1";

/**
 * Mesh represents a logical configuration grouping for workload to workload
 * communication within a service mesh. Routes that point to mesh dictate how
 * requests are routed within this logical mesh boundary.
 */
export interface Mesh {
  /**
   * Required. Name of the Mesh resource. It matches pattern
   * `projects/* /locations/global/meshes/<mesh_name>`.
   */
  name: string;
  /** Output only. Server-defined URL of this resource */
  selfLink: string;
  /** Output only. The timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp when the resource was updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. Set of label tags associated with the Mesh resource. */
  labels: { [key: string]: string };
  /**
   * Optional. A free-text description of the resource. Max length 1024
   * characters.
   */
  description: string;
  /**
   * Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy
   * to listen on the specified port of localhost (127.0.0.1) address. The
   * SIDECAR proxy will expect all traffic to be redirected to this port
   * regardless of its actual ip:port destination. If unset, a port '15001' is
   * used as the interception port. This is applicable only for sidecar proxy
   * deployments.
   */
  interceptionPort: number;
}

export interface Mesh_LabelsEntry {
  key: string;
  value: string;
}

/** Request used with the ListMeshes method. */
export interface ListMeshesRequest {
  /**
   * Required. The project and location from which the Meshes should be
   * listed, specified in the format `projects/* /locations/global`.
   */
  parent: string;
  /** Maximum number of Meshes to return per call. */
  pageSize: number;
  /**
   * The value returned by the last `ListMeshesResponse`
   * Indicates that this is a continuation of a prior `ListMeshes` call,
   * and that the system should return the next page of data.
   */
  pageToken: string;
}

/** Response returned by the ListMeshes method. */
export interface ListMeshesResponse {
  /** List of Mesh resources. */
  meshes: Mesh[];
  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   */
  nextPageToken: string;
}

/** Request used by the GetMesh method. */
export interface GetMeshRequest {
  /**
   * Required. A name of the Mesh to get. Must be in the format
   * `projects/* /locations/global/meshes/*`.
   */
  name: string;
}

/** Request used by the CreateMesh method. */
export interface CreateMeshRequest {
  /**
   * Required. The parent resource of the Mesh. Must be in the
   * format `projects/* /locations/global`.
   */
  parent: string;
  /** Required. Short name of the Mesh resource to be created. */
  meshId: string;
  /** Required. Mesh resource to be created. */
  mesh: Mesh | undefined;
}

/** Request used by the UpdateMesh method. */
export interface UpdateMeshRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * Mesh resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Updated Mesh resource. */
  mesh: Mesh | undefined;
}

/** Request used by the DeleteMesh method. */
export interface DeleteMeshRequest {
  /**
   * Required. A name of the Mesh to delete. Must be in the format
   * `projects/* /locations/global/meshes/*`.
   */
  name: string;
}

function createBaseMesh(): Mesh {
  return {
    name: "",
    selfLink: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    description: "",
    interceptionPort: 0,
  };
}

export const Mesh: MessageFns<Mesh> = {
  encode(message: Mesh, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.selfLink !== "") {
      writer.uint32(74).string(message.selfLink);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Mesh_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.interceptionPort !== 0) {
      writer.uint32(64).int32(message.interceptionPort);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Mesh {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMesh();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.selfLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Mesh_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.interceptionPort = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Mesh {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      selfLink: isSet(object.selfLink) ? globalThis.String(object.selfLink) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      interceptionPort: isSet(object.interceptionPort) ? globalThis.Number(object.interceptionPort) : 0,
    };
  },

  toJSON(message: Mesh): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.selfLink !== "") {
      obj.selfLink = message.selfLink;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.interceptionPort !== 0) {
      obj.interceptionPort = Math.round(message.interceptionPort);
    }
    return obj;
  },

  create(base?: DeepPartial<Mesh>): Mesh {
    return Mesh.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Mesh>): Mesh {
    const message = createBaseMesh();
    message.name = object.name ?? "";
    message.selfLink = object.selfLink ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.interceptionPort = object.interceptionPort ?? 0;
    return message;
  },
};

function createBaseMesh_LabelsEntry(): Mesh_LabelsEntry {
  return { key: "", value: "" };
}

export const Mesh_LabelsEntry: MessageFns<Mesh_LabelsEntry> = {
  encode(message: Mesh_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Mesh_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMesh_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Mesh_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Mesh_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Mesh_LabelsEntry>): Mesh_LabelsEntry {
    return Mesh_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Mesh_LabelsEntry>): Mesh_LabelsEntry {
    const message = createBaseMesh_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListMeshesRequest(): ListMeshesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListMeshesRequest: MessageFns<ListMeshesRequest> = {
  encode(message: ListMeshesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMeshesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMeshesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMeshesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListMeshesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMeshesRequest>): ListMeshesRequest {
    return ListMeshesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMeshesRequest>): ListMeshesRequest {
    const message = createBaseListMeshesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListMeshesResponse(): ListMeshesResponse {
  return { meshes: [], nextPageToken: "" };
}

export const ListMeshesResponse: MessageFns<ListMeshesResponse> = {
  encode(message: ListMeshesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.meshes) {
      Mesh.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMeshesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMeshesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.meshes.push(Mesh.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMeshesResponse {
    return {
      meshes: globalThis.Array.isArray(object?.meshes) ? object.meshes.map((e: any) => Mesh.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListMeshesResponse): unknown {
    const obj: any = {};
    if (message.meshes?.length) {
      obj.meshes = message.meshes.map((e) => Mesh.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMeshesResponse>): ListMeshesResponse {
    return ListMeshesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMeshesResponse>): ListMeshesResponse {
    const message = createBaseListMeshesResponse();
    message.meshes = object.meshes?.map((e) => Mesh.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetMeshRequest(): GetMeshRequest {
  return { name: "" };
}

export const GetMeshRequest: MessageFns<GetMeshRequest> = {
  encode(message: GetMeshRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMeshRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeshRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMeshRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMeshRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMeshRequest>): GetMeshRequest {
    return GetMeshRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMeshRequest>): GetMeshRequest {
    const message = createBaseGetMeshRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateMeshRequest(): CreateMeshRequest {
  return { parent: "", meshId: "", mesh: undefined };
}

export const CreateMeshRequest: MessageFns<CreateMeshRequest> = {
  encode(message: CreateMeshRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.meshId !== "") {
      writer.uint32(18).string(message.meshId);
    }
    if (message.mesh !== undefined) {
      Mesh.encode(message.mesh, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMeshRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMeshRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.meshId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mesh = Mesh.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMeshRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      meshId: isSet(object.meshId) ? globalThis.String(object.meshId) : "",
      mesh: isSet(object.mesh) ? Mesh.fromJSON(object.mesh) : undefined,
    };
  },

  toJSON(message: CreateMeshRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.meshId !== "") {
      obj.meshId = message.meshId;
    }
    if (message.mesh !== undefined) {
      obj.mesh = Mesh.toJSON(message.mesh);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMeshRequest>): CreateMeshRequest {
    return CreateMeshRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMeshRequest>): CreateMeshRequest {
    const message = createBaseCreateMeshRequest();
    message.parent = object.parent ?? "";
    message.meshId = object.meshId ?? "";
    message.mesh = (object.mesh !== undefined && object.mesh !== null) ? Mesh.fromPartial(object.mesh) : undefined;
    return message;
  },
};

function createBaseUpdateMeshRequest(): UpdateMeshRequest {
  return { updateMask: undefined, mesh: undefined };
}

export const UpdateMeshRequest: MessageFns<UpdateMeshRequest> = {
  encode(message: UpdateMeshRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.mesh !== undefined) {
      Mesh.encode(message.mesh, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMeshRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMeshRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mesh = Mesh.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMeshRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      mesh: isSet(object.mesh) ? Mesh.fromJSON(object.mesh) : undefined,
    };
  },

  toJSON(message: UpdateMeshRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.mesh !== undefined) {
      obj.mesh = Mesh.toJSON(message.mesh);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateMeshRequest>): UpdateMeshRequest {
    return UpdateMeshRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMeshRequest>): UpdateMeshRequest {
    const message = createBaseUpdateMeshRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.mesh = (object.mesh !== undefined && object.mesh !== null) ? Mesh.fromPartial(object.mesh) : undefined;
    return message;
  },
};

function createBaseDeleteMeshRequest(): DeleteMeshRequest {
  return { name: "" };
}

export const DeleteMeshRequest: MessageFns<DeleteMeshRequest> = {
  encode(message: DeleteMeshRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMeshRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMeshRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMeshRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteMeshRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMeshRequest>): DeleteMeshRequest {
    return DeleteMeshRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMeshRequest>): DeleteMeshRequest {
    const message = createBaseDeleteMeshRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
