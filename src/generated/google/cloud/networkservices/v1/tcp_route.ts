// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkservices/v1/tcp_route.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.networkservices.v1";

/**
 * TcpRoute is the resource defining how TCP traffic should be routed by a
 * Mesh/Gateway resource.
 */
export interface TcpRoute {
  /**
   * Required. Name of the TcpRoute resource. It matches pattern
   * `projects/* /locations/global/tcpRoutes/tcp_route_name>`.
   */
  name: string;
  /** Output only. Server-defined URL of this resource */
  selfLink: string;
  /** Output only. The timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp when the resource was updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. A free-text description of the resource. Max length 1024
   * characters.
   */
  description: string;
  /**
   * Required. Rules that define how traffic is routed and handled. At least one
   * RouteRule must be supplied. If there are multiple rules then the action
   * taken will be the first rule to match.
   */
  rules: TcpRoute_RouteRule[];
  /**
   * Optional. Meshes defines a list of meshes this TcpRoute is attached to, as
   * one of the routing rules to route the requests served by the mesh.
   *
   * Each mesh reference should match the pattern:
   * `projects/* /locations/global/meshes/<mesh_name>`
   *
   * The attached Mesh should be of a type SIDECAR
   */
  meshes: string[];
  /**
   * Optional. Gateways defines a list of gateways this TcpRoute is attached to,
   * as one of the routing rules to route the requests served by the gateway.
   *
   * Each gateway reference should match the pattern:
   * `projects/* /locations/global/gateways/<gateway_name>`
   */
  gateways: string[];
  /** Optional. Set of label tags associated with the TcpRoute resource. */
  labels: { [key: string]: string };
}

/**
 * Specifies how to match traffic and how to route traffic when traffic is
 * matched.
 */
export interface TcpRoute_RouteRule {
  /**
   * Optional. RouteMatch defines the predicate used to match requests to a
   * given action. Multiple match types are "OR"ed for evaluation. If no
   * routeMatch field is specified, this rule will unconditionally match
   * traffic.
   */
  matches: TcpRoute_RouteMatch[];
  /** Required. The detailed rule defining how to route matched traffic. */
  action: TcpRoute_RouteAction | undefined;
}

/**
 * RouteMatch defines the predicate used to match requests to a given action.
 * Multiple match types are "OR"ed for evaluation.
 * If no routeMatch field is specified, this rule will unconditionally match
 * traffic.
 */
export interface TcpRoute_RouteMatch {
  /**
   * Required. Must be specified in the CIDR range format. A CIDR range
   * consists of an IP Address and a prefix length to construct the subnet
   * mask. By default, the prefix length is 32 (i.e. matches a single IP
   * address). Only IPV4 addresses are supported.
   * Examples:
   * "10.0.0.1" - matches against this exact IP address.
   * "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet
   * and 255.255.255.0 mask.
   * "0.0.0.0/0" - matches against any IP address'.
   */
  address: string;
  /** Required. Specifies the destination port to match against. */
  port: string;
}

/** The specifications for routing traffic and applying associated policies. */
export interface TcpRoute_RouteAction {
  /**
   * Optional. The destination services to which traffic should be forwarded.
   * At least one destination service is required. Only one of route
   * destination or original destination can be set.
   */
  destinations: TcpRoute_RouteDestination[];
  /**
   * Optional. If true, Router will use the destination IP and port of the
   * original connection as the destination of the request. Default is false.
   * Only one of route destinations or original destination can be set.
   */
  originalDestination: boolean;
}

/** Describe the destination for traffic to be routed to. */
export interface TcpRoute_RouteDestination {
  /** Required. The URL of a BackendService to route traffic to. */
  serviceName: string;
  /**
   * Optional. Specifies the proportion of requests forwarded to the backend
   * referenced by the serviceName field. This is computed as:
   * - weight/Sum(weights in this destination list).
   * For non-zero values, there may be some epsilon from the exact proportion
   * defined here depending on the precision an implementation supports.
   *
   * If only one serviceName is specified and it has a weight greater than 0,
   * 100% of the traffic is forwarded to that backend.
   *
   * If weights are specified for any one service name, they need to be
   * specified for all of them.
   *
   * If weights are unspecified for all services, then, traffic is distributed
   * in equal proportions to all of them.
   */
  weight: number;
}

export interface TcpRoute_LabelsEntry {
  key: string;
  value: string;
}

/** Request used with the ListTcpRoutes method. */
export interface ListTcpRoutesRequest {
  /**
   * Required. The project and location from which the TcpRoutes should be
   * listed, specified in the format `projects/* /locations/global`.
   */
  parent: string;
  /** Maximum number of TcpRoutes to return per call. */
  pageSize: number;
  /**
   * The value returned by the last `ListTcpRoutesResponse`
   * Indicates that this is a continuation of a prior `ListTcpRoutes` call,
   * and that the system should return the next page of data.
   */
  pageToken: string;
}

/** Response returned by the ListTcpRoutes method. */
export interface ListTcpRoutesResponse {
  /** List of TcpRoute resources. */
  tcpRoutes: TcpRoute[];
  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   */
  nextPageToken: string;
}

/** Request used by the GetTcpRoute method. */
export interface GetTcpRouteRequest {
  /**
   * Required. A name of the TcpRoute to get. Must be in the format
   * `projects/* /locations/global/tcpRoutes/*`.
   */
  name: string;
}

/** Request used by the TcpRoute method. */
export interface CreateTcpRouteRequest {
  /**
   * Required. The parent resource of the TcpRoute. Must be in the
   * format `projects/* /locations/global`.
   */
  parent: string;
  /** Required. Short name of the TcpRoute resource to be created. */
  tcpRouteId: string;
  /** Required. TcpRoute resource to be created. */
  tcpRoute: TcpRoute | undefined;
}

/** Request used by the UpdateTcpRoute method. */
export interface UpdateTcpRouteRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * TcpRoute resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Updated TcpRoute resource. */
  tcpRoute: TcpRoute | undefined;
}

/** Request used by the DeleteTcpRoute method. */
export interface DeleteTcpRouteRequest {
  /**
   * Required. A name of the TcpRoute to delete. Must be in the format
   * `projects/* /locations/global/tcpRoutes/*`.
   */
  name: string;
}

function createBaseTcpRoute(): TcpRoute {
  return {
    name: "",
    selfLink: "",
    createTime: undefined,
    updateTime: undefined,
    description: "",
    rules: [],
    meshes: [],
    gateways: [],
    labels: {},
  };
}

export const TcpRoute: MessageFns<TcpRoute> = {
  encode(message: TcpRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.selfLink !== "") {
      writer.uint32(90).string(message.selfLink);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    for (const v of message.rules) {
      TcpRoute_RouteRule.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.meshes) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.gateways) {
      writer.uint32(74).string(v!);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      TcpRoute_LabelsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.selfLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.rules.push(TcpRoute_RouteRule.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.meshes.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.gateways.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          const entry10 = TcpRoute_LabelsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.labels[entry10.key] = entry10.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpRoute {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      selfLink: isSet(object.selfLink) ? globalThis.String(object.selfLink) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      rules: globalThis.Array.isArray(object?.rules)
        ? object.rules.map((e: any) => TcpRoute_RouteRule.fromJSON(e))
        : [],
      meshes: globalThis.Array.isArray(object?.meshes) ? object.meshes.map((e: any) => globalThis.String(e)) : [],
      gateways: globalThis.Array.isArray(object?.gateways) ? object.gateways.map((e: any) => globalThis.String(e)) : [],
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: TcpRoute): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.selfLink !== "") {
      obj.selfLink = message.selfLink;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => TcpRoute_RouteRule.toJSON(e));
    }
    if (message.meshes?.length) {
      obj.meshes = message.meshes;
    }
    if (message.gateways?.length) {
      obj.gateways = message.gateways;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<TcpRoute>): TcpRoute {
    return TcpRoute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TcpRoute>): TcpRoute {
    const message = createBaseTcpRoute();
    message.name = object.name ?? "";
    message.selfLink = object.selfLink ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.rules = object.rules?.map((e) => TcpRoute_RouteRule.fromPartial(e)) || [];
    message.meshes = object.meshes?.map((e) => e) || [];
    message.gateways = object.gateways?.map((e) => e) || [];
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseTcpRoute_RouteRule(): TcpRoute_RouteRule {
  return { matches: [], action: undefined };
}

export const TcpRoute_RouteRule: MessageFns<TcpRoute_RouteRule> = {
  encode(message: TcpRoute_RouteRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.matches) {
      TcpRoute_RouteMatch.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.action !== undefined) {
      TcpRoute_RouteAction.encode(message.action, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpRoute_RouteRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpRoute_RouteRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.matches.push(TcpRoute_RouteMatch.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.action = TcpRoute_RouteAction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpRoute_RouteRule {
    return {
      matches: globalThis.Array.isArray(object?.matches)
        ? object.matches.map((e: any) => TcpRoute_RouteMatch.fromJSON(e))
        : [],
      action: isSet(object.action) ? TcpRoute_RouteAction.fromJSON(object.action) : undefined,
    };
  },

  toJSON(message: TcpRoute_RouteRule): unknown {
    const obj: any = {};
    if (message.matches?.length) {
      obj.matches = message.matches.map((e) => TcpRoute_RouteMatch.toJSON(e));
    }
    if (message.action !== undefined) {
      obj.action = TcpRoute_RouteAction.toJSON(message.action);
    }
    return obj;
  },

  create(base?: DeepPartial<TcpRoute_RouteRule>): TcpRoute_RouteRule {
    return TcpRoute_RouteRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TcpRoute_RouteRule>): TcpRoute_RouteRule {
    const message = createBaseTcpRoute_RouteRule();
    message.matches = object.matches?.map((e) => TcpRoute_RouteMatch.fromPartial(e)) || [];
    message.action = (object.action !== undefined && object.action !== null)
      ? TcpRoute_RouteAction.fromPartial(object.action)
      : undefined;
    return message;
  },
};

function createBaseTcpRoute_RouteMatch(): TcpRoute_RouteMatch {
  return { address: "", port: "" };
}

export const TcpRoute_RouteMatch: MessageFns<TcpRoute_RouteMatch> = {
  encode(message: TcpRoute_RouteMatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.port !== "") {
      writer.uint32(18).string(message.port);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpRoute_RouteMatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpRoute_RouteMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.port = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpRoute_RouteMatch {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      port: isSet(object.port) ? globalThis.String(object.port) : "",
    };
  },

  toJSON(message: TcpRoute_RouteMatch): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.port !== "") {
      obj.port = message.port;
    }
    return obj;
  },

  create(base?: DeepPartial<TcpRoute_RouteMatch>): TcpRoute_RouteMatch {
    return TcpRoute_RouteMatch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TcpRoute_RouteMatch>): TcpRoute_RouteMatch {
    const message = createBaseTcpRoute_RouteMatch();
    message.address = object.address ?? "";
    message.port = object.port ?? "";
    return message;
  },
};

function createBaseTcpRoute_RouteAction(): TcpRoute_RouteAction {
  return { destinations: [], originalDestination: false };
}

export const TcpRoute_RouteAction: MessageFns<TcpRoute_RouteAction> = {
  encode(message: TcpRoute_RouteAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.destinations) {
      TcpRoute_RouteDestination.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.originalDestination !== false) {
      writer.uint32(24).bool(message.originalDestination);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpRoute_RouteAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpRoute_RouteAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destinations.push(TcpRoute_RouteDestination.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.originalDestination = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpRoute_RouteAction {
    return {
      destinations: globalThis.Array.isArray(object?.destinations)
        ? object.destinations.map((e: any) => TcpRoute_RouteDestination.fromJSON(e))
        : [],
      originalDestination: isSet(object.originalDestination) ? globalThis.Boolean(object.originalDestination) : false,
    };
  },

  toJSON(message: TcpRoute_RouteAction): unknown {
    const obj: any = {};
    if (message.destinations?.length) {
      obj.destinations = message.destinations.map((e) => TcpRoute_RouteDestination.toJSON(e));
    }
    if (message.originalDestination !== false) {
      obj.originalDestination = message.originalDestination;
    }
    return obj;
  },

  create(base?: DeepPartial<TcpRoute_RouteAction>): TcpRoute_RouteAction {
    return TcpRoute_RouteAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TcpRoute_RouteAction>): TcpRoute_RouteAction {
    const message = createBaseTcpRoute_RouteAction();
    message.destinations = object.destinations?.map((e) => TcpRoute_RouteDestination.fromPartial(e)) || [];
    message.originalDestination = object.originalDestination ?? false;
    return message;
  },
};

function createBaseTcpRoute_RouteDestination(): TcpRoute_RouteDestination {
  return { serviceName: "", weight: 0 };
}

export const TcpRoute_RouteDestination: MessageFns<TcpRoute_RouteDestination> = {
  encode(message: TcpRoute_RouteDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceName !== "") {
      writer.uint32(10).string(message.serviceName);
    }
    if (message.weight !== 0) {
      writer.uint32(16).int32(message.weight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpRoute_RouteDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpRoute_RouteDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.weight = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpRoute_RouteDestination {
    return {
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : 0,
    };
  },

  toJSON(message: TcpRoute_RouteDestination): unknown {
    const obj: any = {};
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    return obj;
  },

  create(base?: DeepPartial<TcpRoute_RouteDestination>): TcpRoute_RouteDestination {
    return TcpRoute_RouteDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TcpRoute_RouteDestination>): TcpRoute_RouteDestination {
    const message = createBaseTcpRoute_RouteDestination();
    message.serviceName = object.serviceName ?? "";
    message.weight = object.weight ?? 0;
    return message;
  },
};

function createBaseTcpRoute_LabelsEntry(): TcpRoute_LabelsEntry {
  return { key: "", value: "" };
}

export const TcpRoute_LabelsEntry: MessageFns<TcpRoute_LabelsEntry> = {
  encode(message: TcpRoute_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpRoute_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpRoute_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpRoute_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: TcpRoute_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<TcpRoute_LabelsEntry>): TcpRoute_LabelsEntry {
    return TcpRoute_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TcpRoute_LabelsEntry>): TcpRoute_LabelsEntry {
    const message = createBaseTcpRoute_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListTcpRoutesRequest(): ListTcpRoutesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListTcpRoutesRequest: MessageFns<ListTcpRoutesRequest> = {
  encode(message: ListTcpRoutesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTcpRoutesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTcpRoutesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTcpRoutesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListTcpRoutesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTcpRoutesRequest>): ListTcpRoutesRequest {
    return ListTcpRoutesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTcpRoutesRequest>): ListTcpRoutesRequest {
    const message = createBaseListTcpRoutesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListTcpRoutesResponse(): ListTcpRoutesResponse {
  return { tcpRoutes: [], nextPageToken: "" };
}

export const ListTcpRoutesResponse: MessageFns<ListTcpRoutesResponse> = {
  encode(message: ListTcpRoutesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tcpRoutes) {
      TcpRoute.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTcpRoutesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTcpRoutesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tcpRoutes.push(TcpRoute.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTcpRoutesResponse {
    return {
      tcpRoutes: globalThis.Array.isArray(object?.tcpRoutes)
        ? object.tcpRoutes.map((e: any) => TcpRoute.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTcpRoutesResponse): unknown {
    const obj: any = {};
    if (message.tcpRoutes?.length) {
      obj.tcpRoutes = message.tcpRoutes.map((e) => TcpRoute.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTcpRoutesResponse>): ListTcpRoutesResponse {
    return ListTcpRoutesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTcpRoutesResponse>): ListTcpRoutesResponse {
    const message = createBaseListTcpRoutesResponse();
    message.tcpRoutes = object.tcpRoutes?.map((e) => TcpRoute.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetTcpRouteRequest(): GetTcpRouteRequest {
  return { name: "" };
}

export const GetTcpRouteRequest: MessageFns<GetTcpRouteRequest> = {
  encode(message: GetTcpRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTcpRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTcpRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTcpRouteRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTcpRouteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTcpRouteRequest>): GetTcpRouteRequest {
    return GetTcpRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTcpRouteRequest>): GetTcpRouteRequest {
    const message = createBaseGetTcpRouteRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateTcpRouteRequest(): CreateTcpRouteRequest {
  return { parent: "", tcpRouteId: "", tcpRoute: undefined };
}

export const CreateTcpRouteRequest: MessageFns<CreateTcpRouteRequest> = {
  encode(message: CreateTcpRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tcpRouteId !== "") {
      writer.uint32(18).string(message.tcpRouteId);
    }
    if (message.tcpRoute !== undefined) {
      TcpRoute.encode(message.tcpRoute, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTcpRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTcpRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tcpRouteId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tcpRoute = TcpRoute.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTcpRouteRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tcpRouteId: isSet(object.tcpRouteId) ? globalThis.String(object.tcpRouteId) : "",
      tcpRoute: isSet(object.tcpRoute) ? TcpRoute.fromJSON(object.tcpRoute) : undefined,
    };
  },

  toJSON(message: CreateTcpRouteRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tcpRouteId !== "") {
      obj.tcpRouteId = message.tcpRouteId;
    }
    if (message.tcpRoute !== undefined) {
      obj.tcpRoute = TcpRoute.toJSON(message.tcpRoute);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTcpRouteRequest>): CreateTcpRouteRequest {
    return CreateTcpRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTcpRouteRequest>): CreateTcpRouteRequest {
    const message = createBaseCreateTcpRouteRequest();
    message.parent = object.parent ?? "";
    message.tcpRouteId = object.tcpRouteId ?? "";
    message.tcpRoute = (object.tcpRoute !== undefined && object.tcpRoute !== null)
      ? TcpRoute.fromPartial(object.tcpRoute)
      : undefined;
    return message;
  },
};

function createBaseUpdateTcpRouteRequest(): UpdateTcpRouteRequest {
  return { updateMask: undefined, tcpRoute: undefined };
}

export const UpdateTcpRouteRequest: MessageFns<UpdateTcpRouteRequest> = {
  encode(message: UpdateTcpRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.tcpRoute !== undefined) {
      TcpRoute.encode(message.tcpRoute, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTcpRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTcpRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tcpRoute = TcpRoute.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTcpRouteRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      tcpRoute: isSet(object.tcpRoute) ? TcpRoute.fromJSON(object.tcpRoute) : undefined,
    };
  },

  toJSON(message: UpdateTcpRouteRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.tcpRoute !== undefined) {
      obj.tcpRoute = TcpRoute.toJSON(message.tcpRoute);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTcpRouteRequest>): UpdateTcpRouteRequest {
    return UpdateTcpRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTcpRouteRequest>): UpdateTcpRouteRequest {
    const message = createBaseUpdateTcpRouteRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.tcpRoute = (object.tcpRoute !== undefined && object.tcpRoute !== null)
      ? TcpRoute.fromPartial(object.tcpRoute)
      : undefined;
    return message;
  },
};

function createBaseDeleteTcpRouteRequest(): DeleteTcpRouteRequest {
  return { name: "" };
}

export const DeleteTcpRouteRequest: MessageFns<DeleteTcpRouteRequest> = {
  encode(message: DeleteTcpRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTcpRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTcpRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTcpRouteRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTcpRouteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTcpRouteRequest>): DeleteTcpRouteRequest {
    return DeleteTcpRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTcpRouteRequest>): DeleteTcpRouteRequest {
    const message = createBaseDeleteTcpRouteRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
