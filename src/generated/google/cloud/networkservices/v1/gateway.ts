// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkservices/v1/gateway.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.networkservices.v1";

/**
 * Gateway represents the configuration for a proxy, typically a load balancer.
 * It captures the ip:port over which the services are exposed by the proxy,
 * along with any policy configurations. Routes have reference to to Gateways to
 * dictate how requests should be routed by this Gateway.
 */
export interface Gateway {
  /**
   * Required. Name of the Gateway resource. It matches pattern
   * `projects/* /locations/* /gateways/<gateway_name>`.
   */
  name: string;
  /** Output only. Server-defined URL of this resource */
  selfLink: string;
  /** Output only. The timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The timestamp when the resource was updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. Set of label tags associated with the Gateway resource. */
  labels: { [key: string]: string };
  /**
   * Optional. A free-text description of the resource. Max length 1024
   * characters.
   */
  description: string;
  /**
   * Immutable. The type of the customer managed gateway.
   * This field is required. If unspecified, an error is returned.
   */
  type: Gateway_Type;
  /**
   * Required. One or more ports that the Gateway must receive traffic on. The
   * proxy binds to the ports specified. Gateway listen on 0.0.0.0 on the ports
   * specified below.
   */
  ports: number[];
  /**
   * Required. Immutable. Scope determines how configuration across multiple
   * Gateway instances are merged. The configuration for multiple Gateway
   * instances with the same scope will be merged as presented as a single
   * coniguration to the proxy/load balancer.
   *
   * Max length 64 characters.
   * Scope should start with a letter and can only have letters, numbers,
   * hyphens.
   */
  scope: string;
  /**
   * Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how
   * TLS traffic is terminated. If empty, TLS termination is disabled.
   */
  serverTlsPolicy: string;
}

/**
 * The type of the customer-managed gateway.
 * Possible values are:
 * * OPEN_MESH
 * * SECURE_WEB_GATEWAY
 */
export enum Gateway_Type {
  /** TYPE_UNSPECIFIED - The type of the customer managed gateway is unspecified. */
  TYPE_UNSPECIFIED = 0,
  /**
   * OPEN_MESH - The type of the customer managed gateway is TrafficDirector Open
   * Mesh.
   */
  OPEN_MESH = 1,
  /** SECURE_WEB_GATEWAY - The type of the customer managed gateway is SecureWebGateway (SWG). */
  SECURE_WEB_GATEWAY = 2,
  UNRECOGNIZED = -1,
}

export function gateway_TypeFromJSON(object: any): Gateway_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Gateway_Type.TYPE_UNSPECIFIED;
    case 1:
    case "OPEN_MESH":
      return Gateway_Type.OPEN_MESH;
    case 2:
    case "SECURE_WEB_GATEWAY":
      return Gateway_Type.SECURE_WEB_GATEWAY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Gateway_Type.UNRECOGNIZED;
  }
}

export function gateway_TypeToJSON(object: Gateway_Type): string {
  switch (object) {
    case Gateway_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Gateway_Type.OPEN_MESH:
      return "OPEN_MESH";
    case Gateway_Type.SECURE_WEB_GATEWAY:
      return "SECURE_WEB_GATEWAY";
    case Gateway_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Gateway_LabelsEntry {
  key: string;
  value: string;
}

/** Request used with the ListGateways method. */
export interface ListGatewaysRequest {
  /**
   * Required. The project and location from which the Gateways should be
   * listed, specified in the format `projects/* /locations/*`.
   */
  parent: string;
  /** Maximum number of Gateways to return per call. */
  pageSize: number;
  /**
   * The value returned by the last `ListGatewaysResponse`
   * Indicates that this is a continuation of a prior `ListGateways` call,
   * and that the system should return the next page of data.
   */
  pageToken: string;
}

/** Response returned by the ListGateways method. */
export interface ListGatewaysResponse {
  /** List of Gateway resources. */
  gateways: Gateway[];
  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   */
  nextPageToken: string;
}

/** Request used by the GetGateway method. */
export interface GetGatewayRequest {
  /**
   * Required. A name of the Gateway to get. Must be in the format
   * `projects/* /locations/* /gateways/*`.
   */
  name: string;
}

/** Request used by the CreateGateway method. */
export interface CreateGatewayRequest {
  /**
   * Required. The parent resource of the Gateway. Must be in the
   * format `projects/* /locations/*`.
   */
  parent: string;
  /** Required. Short name of the Gateway resource to be created. */
  gatewayId: string;
  /** Required. Gateway resource to be created. */
  gateway: Gateway | undefined;
}

/** Request used by the UpdateGateway method. */
export interface UpdateGatewayRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * Gateway resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Updated Gateway resource. */
  gateway: Gateway | undefined;
}

/** Request used by the DeleteGateway method. */
export interface DeleteGatewayRequest {
  /**
   * Required. A name of the Gateway to delete. Must be in the format
   * `projects/* /locations/* /gateways/*`.
   */
  name: string;
}

function createBaseGateway(): Gateway {
  return {
    name: "",
    selfLink: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    description: "",
    type: 0,
    ports: [],
    scope: "",
    serverTlsPolicy: "",
  };
}

export const Gateway: MessageFns<Gateway> = {
  encode(message: Gateway, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.selfLink !== "") {
      writer.uint32(106).string(message.selfLink);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Gateway_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    writer.uint32(90).fork();
    for (const v of message.ports) {
      writer.int32(v);
    }
    writer.join();
    if (message.scope !== "") {
      writer.uint32(66).string(message.scope);
    }
    if (message.serverTlsPolicy !== "") {
      writer.uint32(74).string(message.serverTlsPolicy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gateway {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGateway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.selfLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Gateway_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 11:
          if (tag === 88) {
            message.ports.push(reader.int32());

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ports.push(reader.int32());
            }

            continue;
          }

          break;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scope = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.serverTlsPolicy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gateway {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      selfLink: isSet(object.selfLink) ? globalThis.String(object.selfLink) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      type: isSet(object.type) ? gateway_TypeFromJSON(object.type) : 0,
      ports: globalThis.Array.isArray(object?.ports) ? object.ports.map((e: any) => globalThis.Number(e)) : [],
      scope: isSet(object.scope) ? globalThis.String(object.scope) : "",
      serverTlsPolicy: isSet(object.serverTlsPolicy) ? globalThis.String(object.serverTlsPolicy) : "",
    };
  },

  toJSON(message: Gateway): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.selfLink !== "") {
      obj.selfLink = message.selfLink;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.type !== 0) {
      obj.type = gateway_TypeToJSON(message.type);
    }
    if (message.ports?.length) {
      obj.ports = message.ports.map((e) => Math.round(e));
    }
    if (message.scope !== "") {
      obj.scope = message.scope;
    }
    if (message.serverTlsPolicy !== "") {
      obj.serverTlsPolicy = message.serverTlsPolicy;
    }
    return obj;
  },

  create(base?: DeepPartial<Gateway>): Gateway {
    return Gateway.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Gateway>): Gateway {
    const message = createBaseGateway();
    message.name = object.name ?? "";
    message.selfLink = object.selfLink ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.type = object.type ?? 0;
    message.ports = object.ports?.map((e) => e) || [];
    message.scope = object.scope ?? "";
    message.serverTlsPolicy = object.serverTlsPolicy ?? "";
    return message;
  },
};

function createBaseGateway_LabelsEntry(): Gateway_LabelsEntry {
  return { key: "", value: "" };
}

export const Gateway_LabelsEntry: MessageFns<Gateway_LabelsEntry> = {
  encode(message: Gateway_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gateway_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGateway_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gateway_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Gateway_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Gateway_LabelsEntry>): Gateway_LabelsEntry {
    return Gateway_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Gateway_LabelsEntry>): Gateway_LabelsEntry {
    const message = createBaseGateway_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListGatewaysRequest(): ListGatewaysRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListGatewaysRequest: MessageFns<ListGatewaysRequest> = {
  encode(message: ListGatewaysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGatewaysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGatewaysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGatewaysRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListGatewaysRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGatewaysRequest>): ListGatewaysRequest {
    return ListGatewaysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGatewaysRequest>): ListGatewaysRequest {
    const message = createBaseListGatewaysRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListGatewaysResponse(): ListGatewaysResponse {
  return { gateways: [], nextPageToken: "" };
}

export const ListGatewaysResponse: MessageFns<ListGatewaysResponse> = {
  encode(message: ListGatewaysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gateways) {
      Gateway.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGatewaysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGatewaysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gateways.push(Gateway.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGatewaysResponse {
    return {
      gateways: globalThis.Array.isArray(object?.gateways) ? object.gateways.map((e: any) => Gateway.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListGatewaysResponse): unknown {
    const obj: any = {};
    if (message.gateways?.length) {
      obj.gateways = message.gateways.map((e) => Gateway.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGatewaysResponse>): ListGatewaysResponse {
    return ListGatewaysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGatewaysResponse>): ListGatewaysResponse {
    const message = createBaseListGatewaysResponse();
    message.gateways = object.gateways?.map((e) => Gateway.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetGatewayRequest(): GetGatewayRequest {
  return { name: "" };
}

export const GetGatewayRequest: MessageFns<GetGatewayRequest> = {
  encode(message: GetGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGatewayRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetGatewayRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGatewayRequest>): GetGatewayRequest {
    return GetGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGatewayRequest>): GetGatewayRequest {
    const message = createBaseGetGatewayRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateGatewayRequest(): CreateGatewayRequest {
  return { parent: "", gatewayId: "", gateway: undefined };
}

export const CreateGatewayRequest: MessageFns<CreateGatewayRequest> = {
  encode(message: CreateGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.gatewayId !== "") {
      writer.uint32(18).string(message.gatewayId);
    }
    if (message.gateway !== undefined) {
      Gateway.encode(message.gateway, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gatewayId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gateway = Gateway.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGatewayRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      gatewayId: isSet(object.gatewayId) ? globalThis.String(object.gatewayId) : "",
      gateway: isSet(object.gateway) ? Gateway.fromJSON(object.gateway) : undefined,
    };
  },

  toJSON(message: CreateGatewayRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.gatewayId !== "") {
      obj.gatewayId = message.gatewayId;
    }
    if (message.gateway !== undefined) {
      obj.gateway = Gateway.toJSON(message.gateway);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateGatewayRequest>): CreateGatewayRequest {
    return CreateGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateGatewayRequest>): CreateGatewayRequest {
    const message = createBaseCreateGatewayRequest();
    message.parent = object.parent ?? "";
    message.gatewayId = object.gatewayId ?? "";
    message.gateway = (object.gateway !== undefined && object.gateway !== null)
      ? Gateway.fromPartial(object.gateway)
      : undefined;
    return message;
  },
};

function createBaseUpdateGatewayRequest(): UpdateGatewayRequest {
  return { updateMask: undefined, gateway: undefined };
}

export const UpdateGatewayRequest: MessageFns<UpdateGatewayRequest> = {
  encode(message: UpdateGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.gateway !== undefined) {
      Gateway.encode(message.gateway, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gateway = Gateway.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGatewayRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      gateway: isSet(object.gateway) ? Gateway.fromJSON(object.gateway) : undefined,
    };
  },

  toJSON(message: UpdateGatewayRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.gateway !== undefined) {
      obj.gateway = Gateway.toJSON(message.gateway);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGatewayRequest>): UpdateGatewayRequest {
    return UpdateGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGatewayRequest>): UpdateGatewayRequest {
    const message = createBaseUpdateGatewayRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.gateway = (object.gateway !== undefined && object.gateway !== null)
      ? Gateway.fromPartial(object.gateway)
      : undefined;
    return message;
  },
};

function createBaseDeleteGatewayRequest(): DeleteGatewayRequest {
  return { name: "" };
}

export const DeleteGatewayRequest: MessageFns<DeleteGatewayRequest> = {
  encode(message: DeleteGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGatewayRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteGatewayRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGatewayRequest>): DeleteGatewayRequest {
    return DeleteGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGatewayRequest>): DeleteGatewayRequest {
    const message = createBaseDeleteGatewayRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
