// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/connectors/v1/connector_version.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { AuthConfigTemplate } from "./authconfig.js";
import { ConfigVariableTemplate, LaunchStage, launchStageFromJSON, launchStageToJSON, RoleGrant } from "./common.js";
import { SslConfigTemplate } from "./ssl_config.js";

export const protobufPackage = "google.cloud.connectors.v1";

/** Enum to control which fields should be included in the response. */
export enum ConnectorVersionView {
  /** CONNECTOR_VERSION_VIEW_UNSPECIFIED - CONNECTOR_VERSION_VIEW_UNSPECIFIED. */
  CONNECTOR_VERSION_VIEW_UNSPECIFIED = 0,
  /** CONNECTOR_VERSION_VIEW_BASIC - Do not include role grant configs. */
  CONNECTOR_VERSION_VIEW_BASIC = 1,
  /** CONNECTOR_VERSION_VIEW_FULL - Include role grant configs. */
  CONNECTOR_VERSION_VIEW_FULL = 2,
  UNRECOGNIZED = -1,
}

export function connectorVersionViewFromJSON(object: any): ConnectorVersionView {
  switch (object) {
    case 0:
    case "CONNECTOR_VERSION_VIEW_UNSPECIFIED":
      return ConnectorVersionView.CONNECTOR_VERSION_VIEW_UNSPECIFIED;
    case 1:
    case "CONNECTOR_VERSION_VIEW_BASIC":
      return ConnectorVersionView.CONNECTOR_VERSION_VIEW_BASIC;
    case 2:
    case "CONNECTOR_VERSION_VIEW_FULL":
      return ConnectorVersionView.CONNECTOR_VERSION_VIEW_FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConnectorVersionView.UNRECOGNIZED;
  }
}

export function connectorVersionViewToJSON(object: ConnectorVersionView): string {
  switch (object) {
    case ConnectorVersionView.CONNECTOR_VERSION_VIEW_UNSPECIFIED:
      return "CONNECTOR_VERSION_VIEW_UNSPECIFIED";
    case ConnectorVersionView.CONNECTOR_VERSION_VIEW_BASIC:
      return "CONNECTOR_VERSION_VIEW_BASIC";
    case ConnectorVersionView.CONNECTOR_VERSION_VIEW_FULL:
      return "CONNECTOR_VERSION_VIEW_FULL";
    case ConnectorVersionView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ConnectorVersion indicates a specific version of a connector. */
export interface ConnectorVersion {
  /**
   * Output only. Resource name of the Version.
   * Format:
   * projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version}
   * Only global location is supported for Connector resource.
   */
  name: string;
  /** Output only. Created time. */
  createTime:
    | Date
    | undefined;
  /** Output only. Updated time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. Resource labels to represent user-provided metadata.
   * Refer to cloud documentation on labels for more details.
   * https://cloud.google.com/compute/docs/labeling-resources
   */
  labels: { [key: string]: string };
  /** Output only. Flag to mark the version indicating the launch stage. */
  launchStage: LaunchStage;
  /** Output only. ReleaseVersion of the connector, for example: "1.0.1-alpha". */
  releaseVersion: string;
  /** Output only. List of auth configs supported by the Connector Version. */
  authConfigTemplates: AuthConfigTemplate[];
  /** Output only. List of config variables needed to create a connection. */
  configVariableTemplates: ConfigVariableTemplate[];
  /**
   * Output only. Information about the runtime features supported by the
   * Connector.
   */
  supportedRuntimeFeatures:
    | SupportedRuntimeFeatures
    | undefined;
  /** Output only. Display name. */
  displayName: string;
  /** Output only. Configuration for Egress Control. */
  egressControlConfig:
    | EgressControlConfig
    | undefined;
  /** Output only. Role grant configurations for this connector version. */
  roleGrants: RoleGrant[];
  /**
   * Output only. Role grant configuration for this config variable. It will be
   * DEPRECATED soon.
   */
  roleGrant:
    | RoleGrant
    | undefined;
  /** Output only. Ssl configuration supported by the Connector. */
  sslConfigTemplate: SslConfigTemplate | undefined;
}

export interface ConnectorVersion_LabelsEntry {
  key: string;
  value: string;
}

/** Request message for Connectors.GetConnectorVersion. */
export interface GetConnectorVersionRequest {
  /**
   * Required. Resource name of the form:
   * `projects/* /locations/* /providers/* /connectors/* /versions/*`
   * Only global location is supported for ConnectorVersion resource.
   */
  name: string;
  /**
   * Specifies which fields of the ConnectorVersion are returned in the
   * response. Defaults to `CUSTOMER` view.
   */
  view: ConnectorVersionView;
}

/** Request message for Connectors.ListConnectorVersions. */
export interface ListConnectorVersionsRequest {
  /**
   * Required. Parent resource of the connectors, of the form:
   * `projects/* /locations/* /providers/* /connectors/*`
   * Only global location is supported for ConnectorVersion resource.
   */
  parent: string;
  /** Page size. */
  pageSize: number;
  /** Page token. */
  pageToken: string;
  /**
   * Specifies which fields of the ConnectorVersion are returned in the
   * response. Defaults to `BASIC` view.
   */
  view: ConnectorVersionView;
}

/** Response message for Connectors.ListConnectorVersions. */
export interface ListConnectorVersionsResponse {
  /** A list of connector versions. */
  connectorVersions: ConnectorVersion[];
  /** Next page token. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/**
 * Supported runtime features of a connector version. This is passed to the
 * management layer to add a new connector version by the connector developer.
 * Details about how this proto is passed to the management layer is covered in
 * this doc - go/runtime-manifest.
 */
export interface SupportedRuntimeFeatures {
  /** Specifies if the connector supports entity apis like 'createEntity'. */
  entityApis: boolean;
  /** Specifies if the connector supports action apis like 'executeAction'. */
  actionApis: boolean;
  /** Specifies if the connector supports 'ExecuteSqlQuery' operation. */
  sqlQuery: boolean;
}

/**
 * Egress control config for connector runtime. These configurations define the
 * rules to identify which outbound domains/hosts needs to be whitelisted. It
 * may be a static information for a particular connector version or it is
 * derived from the configurations provided by the customer in Connection
 * resource.
 */
export interface EgressControlConfig {
  /**
   * Static Comma separated backends which are common for all Connection
   * resources. Supported formats for each backend are host:port or just
   * host (host can be ip address or domain name).
   */
  backends?:
    | string
    | undefined;
  /**
   * Extractions Rules to extract the backends from customer provided
   * configuration.
   */
  extractionRules?: ExtractionRules | undefined;
}

/**
 * Extraction Rules to identity the backends from customer provided
 * configuration in Connection resource.
 */
export interface ExtractionRules {
  /** Collection of Extraction Rule. */
  extractionRule: ExtractionRule[];
}

/** Extraction Rule. */
export interface ExtractionRule {
  /** Source on which the rule is applied. */
  source:
    | ExtractionRule_Source
    | undefined;
  /**
   * Regex used to extract backend details from source. If empty, whole source
   * value will be used.
   */
  extractionRegex: string;
}

/** Supported Source types for extraction. */
export enum ExtractionRule_SourceType {
  /** SOURCE_TYPE_UNSPECIFIED - Default SOURCE. */
  SOURCE_TYPE_UNSPECIFIED = 0,
  /** CONFIG_VARIABLE - Config Variable source type. */
  CONFIG_VARIABLE = 1,
  UNRECOGNIZED = -1,
}

export function extractionRule_SourceTypeFromJSON(object: any): ExtractionRule_SourceType {
  switch (object) {
    case 0:
    case "SOURCE_TYPE_UNSPECIFIED":
      return ExtractionRule_SourceType.SOURCE_TYPE_UNSPECIFIED;
    case 1:
    case "CONFIG_VARIABLE":
      return ExtractionRule_SourceType.CONFIG_VARIABLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExtractionRule_SourceType.UNRECOGNIZED;
  }
}

export function extractionRule_SourceTypeToJSON(object: ExtractionRule_SourceType): string {
  switch (object) {
    case ExtractionRule_SourceType.SOURCE_TYPE_UNSPECIFIED:
      return "SOURCE_TYPE_UNSPECIFIED";
    case ExtractionRule_SourceType.CONFIG_VARIABLE:
      return "CONFIG_VARIABLE";
    case ExtractionRule_SourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Source to extract the backend from. */
export interface ExtractionRule_Source {
  /** Type of the source. */
  sourceType: ExtractionRule_SourceType;
  /** Field identifier. For example config vaiable name. */
  fieldId: string;
}

function createBaseConnectorVersion(): ConnectorVersion {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    launchStage: 0,
    releaseVersion: "",
    authConfigTemplates: [],
    configVariableTemplates: [],
    supportedRuntimeFeatures: undefined,
    displayName: "",
    egressControlConfig: undefined,
    roleGrants: [],
    roleGrant: undefined,
    sslConfigTemplate: undefined,
  };
}

export const ConnectorVersion: MessageFns<ConnectorVersion> = {
  encode(message: ConnectorVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ConnectorVersion_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.launchStage !== 0) {
      writer.uint32(48).int32(message.launchStage);
    }
    if (message.releaseVersion !== "") {
      writer.uint32(58).string(message.releaseVersion);
    }
    for (const v of message.authConfigTemplates) {
      AuthConfigTemplate.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.configVariableTemplates) {
      ConfigVariableTemplate.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.supportedRuntimeFeatures !== undefined) {
      SupportedRuntimeFeatures.encode(message.supportedRuntimeFeatures, writer.uint32(82).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(90).string(message.displayName);
    }
    if (message.egressControlConfig !== undefined) {
      EgressControlConfig.encode(message.egressControlConfig, writer.uint32(98).fork()).join();
    }
    for (const v of message.roleGrants) {
      RoleGrant.encode(v!, writer.uint32(114).fork()).join();
    }
    if (message.roleGrant !== undefined) {
      RoleGrant.encode(message.roleGrant, writer.uint32(122).fork()).join();
    }
    if (message.sslConfigTemplate !== undefined) {
      SslConfigTemplate.encode(message.sslConfigTemplate, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectorVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectorVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = ConnectorVersion_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.launchStage = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.releaseVersion = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.authConfigTemplates.push(AuthConfigTemplate.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.configVariableTemplates.push(ConfigVariableTemplate.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.supportedRuntimeFeatures = SupportedRuntimeFeatures.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.egressControlConfig = EgressControlConfig.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.roleGrants.push(RoleGrant.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.roleGrant = RoleGrant.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.sslConfigTemplate = SslConfigTemplate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectorVersion {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      launchStage: isSet(object.launchStage) ? launchStageFromJSON(object.launchStage) : 0,
      releaseVersion: isSet(object.releaseVersion) ? globalThis.String(object.releaseVersion) : "",
      authConfigTemplates: globalThis.Array.isArray(object?.authConfigTemplates)
        ? object.authConfigTemplates.map((e: any) => AuthConfigTemplate.fromJSON(e))
        : [],
      configVariableTemplates: globalThis.Array.isArray(object?.configVariableTemplates)
        ? object.configVariableTemplates.map((e: any) => ConfigVariableTemplate.fromJSON(e))
        : [],
      supportedRuntimeFeatures: isSet(object.supportedRuntimeFeatures)
        ? SupportedRuntimeFeatures.fromJSON(object.supportedRuntimeFeatures)
        : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      egressControlConfig: isSet(object.egressControlConfig)
        ? EgressControlConfig.fromJSON(object.egressControlConfig)
        : undefined,
      roleGrants: globalThis.Array.isArray(object?.roleGrants)
        ? object.roleGrants.map((e: any) => RoleGrant.fromJSON(e))
        : [],
      roleGrant: isSet(object.roleGrant) ? RoleGrant.fromJSON(object.roleGrant) : undefined,
      sslConfigTemplate: isSet(object.sslConfigTemplate)
        ? SslConfigTemplate.fromJSON(object.sslConfigTemplate)
        : undefined,
    };
  },

  toJSON(message: ConnectorVersion): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.launchStage !== 0) {
      obj.launchStage = launchStageToJSON(message.launchStage);
    }
    if (message.releaseVersion !== "") {
      obj.releaseVersion = message.releaseVersion;
    }
    if (message.authConfigTemplates?.length) {
      obj.authConfigTemplates = message.authConfigTemplates.map((e) => AuthConfigTemplate.toJSON(e));
    }
    if (message.configVariableTemplates?.length) {
      obj.configVariableTemplates = message.configVariableTemplates.map((e) => ConfigVariableTemplate.toJSON(e));
    }
    if (message.supportedRuntimeFeatures !== undefined) {
      obj.supportedRuntimeFeatures = SupportedRuntimeFeatures.toJSON(message.supportedRuntimeFeatures);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.egressControlConfig !== undefined) {
      obj.egressControlConfig = EgressControlConfig.toJSON(message.egressControlConfig);
    }
    if (message.roleGrants?.length) {
      obj.roleGrants = message.roleGrants.map((e) => RoleGrant.toJSON(e));
    }
    if (message.roleGrant !== undefined) {
      obj.roleGrant = RoleGrant.toJSON(message.roleGrant);
    }
    if (message.sslConfigTemplate !== undefined) {
      obj.sslConfigTemplate = SslConfigTemplate.toJSON(message.sslConfigTemplate);
    }
    return obj;
  },

  create(base?: DeepPartial<ConnectorVersion>): ConnectorVersion {
    return ConnectorVersion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConnectorVersion>): ConnectorVersion {
    const message = createBaseConnectorVersion();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.launchStage = object.launchStage ?? 0;
    message.releaseVersion = object.releaseVersion ?? "";
    message.authConfigTemplates = object.authConfigTemplates?.map((e) => AuthConfigTemplate.fromPartial(e)) || [];
    message.configVariableTemplates =
      object.configVariableTemplates?.map((e) => ConfigVariableTemplate.fromPartial(e)) || [];
    message.supportedRuntimeFeatures =
      (object.supportedRuntimeFeatures !== undefined && object.supportedRuntimeFeatures !== null)
        ? SupportedRuntimeFeatures.fromPartial(object.supportedRuntimeFeatures)
        : undefined;
    message.displayName = object.displayName ?? "";
    message.egressControlConfig = (object.egressControlConfig !== undefined && object.egressControlConfig !== null)
      ? EgressControlConfig.fromPartial(object.egressControlConfig)
      : undefined;
    message.roleGrants = object.roleGrants?.map((e) => RoleGrant.fromPartial(e)) || [];
    message.roleGrant = (object.roleGrant !== undefined && object.roleGrant !== null)
      ? RoleGrant.fromPartial(object.roleGrant)
      : undefined;
    message.sslConfigTemplate = (object.sslConfigTemplate !== undefined && object.sslConfigTemplate !== null)
      ? SslConfigTemplate.fromPartial(object.sslConfigTemplate)
      : undefined;
    return message;
  },
};

function createBaseConnectorVersion_LabelsEntry(): ConnectorVersion_LabelsEntry {
  return { key: "", value: "" };
}

export const ConnectorVersion_LabelsEntry: MessageFns<ConnectorVersion_LabelsEntry> = {
  encode(message: ConnectorVersion_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectorVersion_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectorVersion_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectorVersion_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ConnectorVersion_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ConnectorVersion_LabelsEntry>): ConnectorVersion_LabelsEntry {
    return ConnectorVersion_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConnectorVersion_LabelsEntry>): ConnectorVersion_LabelsEntry {
    const message = createBaseConnectorVersion_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetConnectorVersionRequest(): GetConnectorVersionRequest {
  return { name: "", view: 0 };
}

export const GetConnectorVersionRequest: MessageFns<GetConnectorVersionRequest> = {
  encode(message: GetConnectorVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConnectorVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConnectorVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConnectorVersionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? connectorVersionViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetConnectorVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = connectorVersionViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetConnectorVersionRequest>): GetConnectorVersionRequest {
    return GetConnectorVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConnectorVersionRequest>): GetConnectorVersionRequest {
    const message = createBaseGetConnectorVersionRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListConnectorVersionsRequest(): ListConnectorVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", view: 0 };
}

export const ListConnectorVersionsRequest: MessageFns<ListConnectorVersionsRequest> = {
  encode(message: ListConnectorVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.view !== 0) {
      writer.uint32(32).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectorVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectorVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectorVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      view: isSet(object.view) ? connectorVersionViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListConnectorVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.view !== 0) {
      obj.view = connectorVersionViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectorVersionsRequest>): ListConnectorVersionsRequest {
    return ListConnectorVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectorVersionsRequest>): ListConnectorVersionsRequest {
    const message = createBaseListConnectorVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListConnectorVersionsResponse(): ListConnectorVersionsResponse {
  return { connectorVersions: [], nextPageToken: "", unreachable: [] };
}

export const ListConnectorVersionsResponse: MessageFns<ListConnectorVersionsResponse> = {
  encode(message: ListConnectorVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.connectorVersions) {
      ConnectorVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectorVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectorVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connectorVersions.push(ConnectorVersion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectorVersionsResponse {
    return {
      connectorVersions: globalThis.Array.isArray(object?.connectorVersions)
        ? object.connectorVersions.map((e: any) => ConnectorVersion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListConnectorVersionsResponse): unknown {
    const obj: any = {};
    if (message.connectorVersions?.length) {
      obj.connectorVersions = message.connectorVersions.map((e) => ConnectorVersion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectorVersionsResponse>): ListConnectorVersionsResponse {
    return ListConnectorVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectorVersionsResponse>): ListConnectorVersionsResponse {
    const message = createBaseListConnectorVersionsResponse();
    message.connectorVersions = object.connectorVersions?.map((e) => ConnectorVersion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseSupportedRuntimeFeatures(): SupportedRuntimeFeatures {
  return { entityApis: false, actionApis: false, sqlQuery: false };
}

export const SupportedRuntimeFeatures: MessageFns<SupportedRuntimeFeatures> = {
  encode(message: SupportedRuntimeFeatures, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityApis !== false) {
      writer.uint32(8).bool(message.entityApis);
    }
    if (message.actionApis !== false) {
      writer.uint32(16).bool(message.actionApis);
    }
    if (message.sqlQuery !== false) {
      writer.uint32(24).bool(message.sqlQuery);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SupportedRuntimeFeatures {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSupportedRuntimeFeatures();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.entityApis = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.actionApis = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sqlQuery = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SupportedRuntimeFeatures {
    return {
      entityApis: isSet(object.entityApis) ? globalThis.Boolean(object.entityApis) : false,
      actionApis: isSet(object.actionApis) ? globalThis.Boolean(object.actionApis) : false,
      sqlQuery: isSet(object.sqlQuery) ? globalThis.Boolean(object.sqlQuery) : false,
    };
  },

  toJSON(message: SupportedRuntimeFeatures): unknown {
    const obj: any = {};
    if (message.entityApis !== false) {
      obj.entityApis = message.entityApis;
    }
    if (message.actionApis !== false) {
      obj.actionApis = message.actionApis;
    }
    if (message.sqlQuery !== false) {
      obj.sqlQuery = message.sqlQuery;
    }
    return obj;
  },

  create(base?: DeepPartial<SupportedRuntimeFeatures>): SupportedRuntimeFeatures {
    return SupportedRuntimeFeatures.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SupportedRuntimeFeatures>): SupportedRuntimeFeatures {
    const message = createBaseSupportedRuntimeFeatures();
    message.entityApis = object.entityApis ?? false;
    message.actionApis = object.actionApis ?? false;
    message.sqlQuery = object.sqlQuery ?? false;
    return message;
  },
};

function createBaseEgressControlConfig(): EgressControlConfig {
  return { backends: undefined, extractionRules: undefined };
}

export const EgressControlConfig: MessageFns<EgressControlConfig> = {
  encode(message: EgressControlConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backends !== undefined) {
      writer.uint32(10).string(message.backends);
    }
    if (message.extractionRules !== undefined) {
      ExtractionRules.encode(message.extractionRules, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EgressControlConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEgressControlConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backends = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.extractionRules = ExtractionRules.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EgressControlConfig {
    return {
      backends: isSet(object.backends) ? globalThis.String(object.backends) : undefined,
      extractionRules: isSet(object.extractionRules) ? ExtractionRules.fromJSON(object.extractionRules) : undefined,
    };
  },

  toJSON(message: EgressControlConfig): unknown {
    const obj: any = {};
    if (message.backends !== undefined) {
      obj.backends = message.backends;
    }
    if (message.extractionRules !== undefined) {
      obj.extractionRules = ExtractionRules.toJSON(message.extractionRules);
    }
    return obj;
  },

  create(base?: DeepPartial<EgressControlConfig>): EgressControlConfig {
    return EgressControlConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EgressControlConfig>): EgressControlConfig {
    const message = createBaseEgressControlConfig();
    message.backends = object.backends ?? undefined;
    message.extractionRules = (object.extractionRules !== undefined && object.extractionRules !== null)
      ? ExtractionRules.fromPartial(object.extractionRules)
      : undefined;
    return message;
  },
};

function createBaseExtractionRules(): ExtractionRules {
  return { extractionRule: [] };
}

export const ExtractionRules: MessageFns<ExtractionRules> = {
  encode(message: ExtractionRules, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.extractionRule) {
      ExtractionRule.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtractionRules {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtractionRules();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.extractionRule.push(ExtractionRule.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtractionRules {
    return {
      extractionRule: globalThis.Array.isArray(object?.extractionRule)
        ? object.extractionRule.map((e: any) => ExtractionRule.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ExtractionRules): unknown {
    const obj: any = {};
    if (message.extractionRule?.length) {
      obj.extractionRule = message.extractionRule.map((e) => ExtractionRule.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ExtractionRules>): ExtractionRules {
    return ExtractionRules.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtractionRules>): ExtractionRules {
    const message = createBaseExtractionRules();
    message.extractionRule = object.extractionRule?.map((e) => ExtractionRule.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExtractionRule(): ExtractionRule {
  return { source: undefined, extractionRegex: "" };
}

export const ExtractionRule: MessageFns<ExtractionRule> = {
  encode(message: ExtractionRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== undefined) {
      ExtractionRule_Source.encode(message.source, writer.uint32(10).fork()).join();
    }
    if (message.extractionRegex !== "") {
      writer.uint32(18).string(message.extractionRegex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtractionRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtractionRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = ExtractionRule_Source.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.extractionRegex = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtractionRule {
    return {
      source: isSet(object.source) ? ExtractionRule_Source.fromJSON(object.source) : undefined,
      extractionRegex: isSet(object.extractionRegex) ? globalThis.String(object.extractionRegex) : "",
    };
  },

  toJSON(message: ExtractionRule): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = ExtractionRule_Source.toJSON(message.source);
    }
    if (message.extractionRegex !== "") {
      obj.extractionRegex = message.extractionRegex;
    }
    return obj;
  },

  create(base?: DeepPartial<ExtractionRule>): ExtractionRule {
    return ExtractionRule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtractionRule>): ExtractionRule {
    const message = createBaseExtractionRule();
    message.source = (object.source !== undefined && object.source !== null)
      ? ExtractionRule_Source.fromPartial(object.source)
      : undefined;
    message.extractionRegex = object.extractionRegex ?? "";
    return message;
  },
};

function createBaseExtractionRule_Source(): ExtractionRule_Source {
  return { sourceType: 0, fieldId: "" };
}

export const ExtractionRule_Source: MessageFns<ExtractionRule_Source> = {
  encode(message: ExtractionRule_Source, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceType !== 0) {
      writer.uint32(8).int32(message.sourceType);
    }
    if (message.fieldId !== "") {
      writer.uint32(18).string(message.fieldId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtractionRule_Source {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtractionRule_Source();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sourceType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtractionRule_Source {
    return {
      sourceType: isSet(object.sourceType) ? extractionRule_SourceTypeFromJSON(object.sourceType) : 0,
      fieldId: isSet(object.fieldId) ? globalThis.String(object.fieldId) : "",
    };
  },

  toJSON(message: ExtractionRule_Source): unknown {
    const obj: any = {};
    if (message.sourceType !== 0) {
      obj.sourceType = extractionRule_SourceTypeToJSON(message.sourceType);
    }
    if (message.fieldId !== "") {
      obj.fieldId = message.fieldId;
    }
    return obj;
  },

  create(base?: DeepPartial<ExtractionRule_Source>): ExtractionRule_Source {
    return ExtractionRule_Source.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtractionRule_Source>): ExtractionRule_Source {
    const message = createBaseExtractionRule_Source();
    message.sourceType = object.sourceType ?? 0;
    message.fieldId = object.fieldId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
