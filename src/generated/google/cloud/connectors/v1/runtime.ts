// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/connectors/v1/runtime.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.connectors.v1";

/** Request message for Connectors.GetRuntimeConfig. */
export interface GetRuntimeConfigRequest {
  /**
   * Required. Resource name of the form:
   * `projects/* /locations/* /runtimeConfig`
   */
  name: string;
}

/**
 * RuntimeConfig is the singleton resource of each location.
 * It includes generic resource configs consumed by control plane and runtime
 * plane like: pub/sub topic/subscription resource name, Cloud Storage location
 * storing schema etc.
 */
export interface RuntimeConfig {
  /** Output only. location_id of the runtime location. E.g. "us-west1". */
  locationId: string;
  /**
   * Output only. Pub/Sub topic for connd to send message.
   * E.g. projects/{project-id}/topics/{topic-id}
   */
  conndTopic: string;
  /**
   * Output only. Pub/Sub subscription for connd to receive message.
   * E.g. projects/{project-id}/subscriptions/{topic-id}
   */
  conndSubscription: string;
  /**
   * Output only. Pub/Sub topic for control plne to send message.
   * communication.
   * E.g. projects/{project-id}/topics/{topic-id}
   */
  controlPlaneTopic: string;
  /**
   * Output only. Pub/Sub subscription for control plane to receive message.
   * E.g. projects/{project-id}/subscriptions/{topic-id}
   */
  controlPlaneSubscription: string;
  /** Output only. The endpoint of the connectors runtime ingress. */
  runtimeEndpoint: string;
  /** Output only. The state of the location. */
  state: RuntimeConfig_State;
  /**
   * Output only. The Cloud Storage bucket that stores connector's schema
   * reports.
   */
  schemaGcsBucket: string;
  /** Output only. The name of the Service Directory service name. */
  serviceDirectory: string;
  /**
   * Output only. Name of the runtimeConfig resource.
   * Format: projects/{project}/locations/{location}/runtimeConfig
   */
  name: string;
}

/** State of the location. */
export enum RuntimeConfig_State {
  /** STATE_UNSPECIFIED - STATE_UNSPECIFIED. */
  STATE_UNSPECIFIED = 0,
  /**
   * INACTIVE - INACTIVE.
   *
   * @deprecated
   */
  INACTIVE = 1,
  /**
   * ACTIVATING - ACTIVATING.
   *
   * @deprecated
   */
  ACTIVATING = 2,
  /** ACTIVE - ACTIVE. */
  ACTIVE = 3,
  /** CREATING - CREATING. */
  CREATING = 4,
  /** DELETING - DELETING. */
  DELETING = 5,
  /** UPDATING - UPDATING. */
  UPDATING = 6,
  UNRECOGNIZED = -1,
}

export function runtimeConfig_StateFromJSON(object: any): RuntimeConfig_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return RuntimeConfig_State.STATE_UNSPECIFIED;
    case 1:
    case "INACTIVE":
      return RuntimeConfig_State.INACTIVE;
    case 2:
    case "ACTIVATING":
      return RuntimeConfig_State.ACTIVATING;
    case 3:
    case "ACTIVE":
      return RuntimeConfig_State.ACTIVE;
    case 4:
    case "CREATING":
      return RuntimeConfig_State.CREATING;
    case 5:
    case "DELETING":
      return RuntimeConfig_State.DELETING;
    case 6:
    case "UPDATING":
      return RuntimeConfig_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RuntimeConfig_State.UNRECOGNIZED;
  }
}

export function runtimeConfig_StateToJSON(object: RuntimeConfig_State): string {
  switch (object) {
    case RuntimeConfig_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case RuntimeConfig_State.INACTIVE:
      return "INACTIVE";
    case RuntimeConfig_State.ACTIVATING:
      return "ACTIVATING";
    case RuntimeConfig_State.ACTIVE:
      return "ACTIVE";
    case RuntimeConfig_State.CREATING:
      return "CREATING";
    case RuntimeConfig_State.DELETING:
      return "DELETING";
    case RuntimeConfig_State.UPDATING:
      return "UPDATING";
    case RuntimeConfig_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseGetRuntimeConfigRequest(): GetRuntimeConfigRequest {
  return { name: "" };
}

export const GetRuntimeConfigRequest: MessageFns<GetRuntimeConfigRequest> = {
  encode(message: GetRuntimeConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRuntimeConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRuntimeConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRuntimeConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRuntimeConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRuntimeConfigRequest>): GetRuntimeConfigRequest {
    return GetRuntimeConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRuntimeConfigRequest>): GetRuntimeConfigRequest {
    const message = createBaseGetRuntimeConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseRuntimeConfig(): RuntimeConfig {
  return {
    locationId: "",
    conndTopic: "",
    conndSubscription: "",
    controlPlaneTopic: "",
    controlPlaneSubscription: "",
    runtimeEndpoint: "",
    state: 0,
    schemaGcsBucket: "",
    serviceDirectory: "",
    name: "",
  };
}

export const RuntimeConfig: MessageFns<RuntimeConfig> = {
  encode(message: RuntimeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locationId !== "") {
      writer.uint32(10).string(message.locationId);
    }
    if (message.conndTopic !== "") {
      writer.uint32(18).string(message.conndTopic);
    }
    if (message.conndSubscription !== "") {
      writer.uint32(26).string(message.conndSubscription);
    }
    if (message.controlPlaneTopic !== "") {
      writer.uint32(34).string(message.controlPlaneTopic);
    }
    if (message.controlPlaneSubscription !== "") {
      writer.uint32(42).string(message.controlPlaneSubscription);
    }
    if (message.runtimeEndpoint !== "") {
      writer.uint32(50).string(message.runtimeEndpoint);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.schemaGcsBucket !== "") {
      writer.uint32(66).string(message.schemaGcsBucket);
    }
    if (message.serviceDirectory !== "") {
      writer.uint32(74).string(message.serviceDirectory);
    }
    if (message.name !== "") {
      writer.uint32(90).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.locationId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conndTopic = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.conndSubscription = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.controlPlaneTopic = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.controlPlaneSubscription = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.runtimeEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.schemaGcsBucket = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.serviceDirectory = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeConfig {
    return {
      locationId: isSet(object.locationId) ? globalThis.String(object.locationId) : "",
      conndTopic: isSet(object.conndTopic) ? globalThis.String(object.conndTopic) : "",
      conndSubscription: isSet(object.conndSubscription) ? globalThis.String(object.conndSubscription) : "",
      controlPlaneTopic: isSet(object.controlPlaneTopic) ? globalThis.String(object.controlPlaneTopic) : "",
      controlPlaneSubscription: isSet(object.controlPlaneSubscription)
        ? globalThis.String(object.controlPlaneSubscription)
        : "",
      runtimeEndpoint: isSet(object.runtimeEndpoint) ? globalThis.String(object.runtimeEndpoint) : "",
      state: isSet(object.state) ? runtimeConfig_StateFromJSON(object.state) : 0,
      schemaGcsBucket: isSet(object.schemaGcsBucket) ? globalThis.String(object.schemaGcsBucket) : "",
      serviceDirectory: isSet(object.serviceDirectory) ? globalThis.String(object.serviceDirectory) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: RuntimeConfig): unknown {
    const obj: any = {};
    if (message.locationId !== "") {
      obj.locationId = message.locationId;
    }
    if (message.conndTopic !== "") {
      obj.conndTopic = message.conndTopic;
    }
    if (message.conndSubscription !== "") {
      obj.conndSubscription = message.conndSubscription;
    }
    if (message.controlPlaneTopic !== "") {
      obj.controlPlaneTopic = message.controlPlaneTopic;
    }
    if (message.controlPlaneSubscription !== "") {
      obj.controlPlaneSubscription = message.controlPlaneSubscription;
    }
    if (message.runtimeEndpoint !== "") {
      obj.runtimeEndpoint = message.runtimeEndpoint;
    }
    if (message.state !== 0) {
      obj.state = runtimeConfig_StateToJSON(message.state);
    }
    if (message.schemaGcsBucket !== "") {
      obj.schemaGcsBucket = message.schemaGcsBucket;
    }
    if (message.serviceDirectory !== "") {
      obj.serviceDirectory = message.serviceDirectory;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeConfig>): RuntimeConfig {
    return RuntimeConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeConfig>): RuntimeConfig {
    const message = createBaseRuntimeConfig();
    message.locationId = object.locationId ?? "";
    message.conndTopic = object.conndTopic ?? "";
    message.conndSubscription = object.conndSubscription ?? "";
    message.controlPlaneTopic = object.controlPlaneTopic ?? "";
    message.controlPlaneSubscription = object.controlPlaneSubscription ?? "";
    message.runtimeEndpoint = object.runtimeEndpoint ?? "";
    message.state = object.state ?? 0;
    message.schemaGcsBucket = object.schemaGcsBucket ?? "";
    message.serviceDirectory = object.serviceDirectory ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
