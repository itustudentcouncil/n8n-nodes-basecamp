// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkebackup/v1/gkebackup.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Backup } from "./backup.js";
import { BackupPlan } from "./backup_plan.js";
import { Restore } from "./restore.js";
import { RestorePlan } from "./restore_plan.js";
import { VolumeBackup, VolumeRestore } from "./volume.js";

export const protobufPackage = "google.cloud.gkebackup.v1";

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

/** Request message for CreateBackupPlan. */
export interface CreateBackupPlanRequest {
  /**
   * Required. The location within which to create the BackupPlan.
   * Format: `projects/* /locations/*`
   */
  parent: string;
  /** Required. The BackupPlan resource object to create. */
  backupPlan:
    | BackupPlan
    | undefined;
  /**
   * Required. The client-provided short name for the BackupPlan resource.
   * This name must:
   *
   * - be between 1 and 63 characters long (inclusive)
   * - consist of only lower-case ASCII letters, numbers, and dashes
   * - start with a lower-case letter
   * - end with a lower-case letter or number
   * - be unique within the set of BackupPlans in this location
   */
  backupPlanId: string;
}

/** Request message for ListBackupPlans. */
export interface ListBackupPlansRequest {
  /**
   * Required. The location that contains the BackupPlans to list.
   * Format: `projects/* /locations/*`
   */
  parent: string;
  /**
   * Optional. The target number of results to return in a single response.
   * If not specified, a default value will be chosen by the service.
   * Note that the response may include a partial list and a caller should
   * only rely on the response's
   * [next_page_token][google.cloud.gkebackup.v1.ListBackupPlansResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * Optional. The value of
   * [next_page_token][google.cloud.gkebackup.v1.ListBackupPlansResponse.next_page_token]
   * received from a previous `ListBackupPlans` call.
   * Provide this to retrieve the subsequent page in a multi-page list of
   * results. When paginating, all other parameters provided to
   * `ListBackupPlans` must match the call that provided the page token.
   */
  pageToken: string;
  /** Optional. Field match expression used to filter the results. */
  filter: string;
  /** Optional. Field by which to sort the results. */
  orderBy: string;
}

/** Response message for ListBackupPlans. */
export interface ListBackupPlansResponse {
  /** The list of BackupPlans matching the given criteria. */
  backupPlans: BackupPlan[];
  /**
   * A token which may be sent as
   * [page_token][google.cloud.gkebackup.v1.ListBackupPlansRequest.page_token]
   * in a subsequent `ListBackupPlans` call to retrieve the next page of
   * results. If this field is omitted or empty, then there are no more results
   * to return.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for GetBackupPlan. */
export interface GetBackupPlanRequest {
  /**
   * Required. Fully qualified BackupPlan name.
   * Format: `projects/* /locations/* /backupPlans/*`
   */
  name: string;
}

/** Request message for UpdateBackupPlan. */
export interface UpdateBackupPlanRequest {
  /**
   * Required. A new version of the BackupPlan resource that contains updated
   * fields. This may be sparsely populated if an `update_mask` is provided.
   */
  backupPlan:
    | BackupPlan
    | undefined;
  /**
   * Optional. This is used to specify the fields to be overwritten in the
   * BackupPlan targeted for update. The values for each of these
   * updated fields will be taken from the `backup_plan` provided
   * with this request. Field names are relative to the root of the resource
   * (e.g., `description`, `backup_config.include_volume_data`, etc.)
   * If no `update_mask` is provided, all fields in `backup_plan` will be
   * written to the target BackupPlan resource.
   * Note that OUTPUT_ONLY and IMMUTABLE fields in `backup_plan` are ignored
   * and are not used to update the target BackupPlan.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteBackupPlan. */
export interface DeleteBackupPlanRequest {
  /**
   * Required. Fully qualified BackupPlan name.
   * Format: `projects/* /locations/* /backupPlans/*`
   */
  name: string;
  /**
   * Optional. If provided, this value must match the current value of the
   * target BackupPlan's [etag][google.cloud.gkebackup.v1.BackupPlan.etag] field
   * or the request is rejected.
   */
  etag: string;
}

/** Request message for CreateBackup. */
export interface CreateBackupRequest {
  /**
   * Required. The BackupPlan within which to create the Backup.
   * Format: `projects/* /locations/* /backupPlans/*`
   */
  parent: string;
  /** Optional. The Backup resource to create. */
  backup:
    | Backup
    | undefined;
  /**
   * Optional. The client-provided short name for the Backup resource.
   * This name must:
   *
   * - be between 1 and 63 characters long (inclusive)
   * - consist of only lower-case ASCII letters, numbers, and dashes
   * - start with a lower-case letter
   * - end with a lower-case letter or number
   * - be unique within the set of Backups in this BackupPlan
   */
  backupId: string;
}

/** Request message for ListBackups. */
export interface ListBackupsRequest {
  /**
   * Required. The BackupPlan that contains the Backups to list.
   * Format: `projects/* /locations/* /backupPlans/*`
   */
  parent: string;
  /**
   * Optional. The target number of results to return in a single response.
   * If not specified, a default value will be chosen by the service.
   * Note that the response may include a partial list and a caller should
   * only rely on the response's
   * [next_page_token][google.cloud.gkebackup.v1.ListBackupsResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * Optional. The value of
   * [next_page_token][google.cloud.gkebackup.v1.ListBackupsResponse.next_page_token]
   * received from a previous `ListBackups` call.
   * Provide this to retrieve the subsequent page in a multi-page list of
   * results. When paginating, all other parameters provided to
   * `ListBackups` must match the call that provided the page token.
   */
  pageToken: string;
  /** Optional. Field match expression used to filter the results. */
  filter: string;
  /** Optional. Field by which to sort the results. */
  orderBy: string;
}

/** Response message for ListBackups. */
export interface ListBackupsResponse {
  /** The list of Backups matching the given criteria. */
  backups: Backup[];
  /**
   * A token which may be sent as
   * [page_token][google.cloud.gkebackup.v1.ListBackupsRequest.page_token] in a
   * subsequent `ListBackups` call to retrieve the next page of results. If this
   * field is omitted or empty, then there are no more results to return.
   */
  nextPageToken: string;
}

/** Request message for GetBackup. */
export interface GetBackupRequest {
  /**
   * Required. Full name of the Backup resource.
   * Format: `projects/* /locations/* /backupPlans/* /backups/*`
   */
  name: string;
}

/** Request message for UpdateBackup. */
export interface UpdateBackupRequest {
  /**
   * Required. A new version of the Backup resource that contains updated
   * fields. This may be sparsely populated if an `update_mask` is provided.
   */
  backup:
    | Backup
    | undefined;
  /**
   * Optional. This is used to specify the fields to be overwritten in the
   * Backup targeted for update. The values for each of these
   * updated fields will be taken from the `backup_plan` provided
   * with this request. Field names are relative to the root of the resource.
   * If no `update_mask` is provided, all fields in `backup` will be
   * written to the target Backup resource.
   * Note that OUTPUT_ONLY and IMMUTABLE fields in `backup` are ignored
   * and are not used to update the target Backup.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteBackup. */
export interface DeleteBackupRequest {
  /**
   * Required. Name of the Backup resource.
   * Format: `projects/* /locations/* /backupPlans/* /backups/*`
   */
  name: string;
  /**
   * Optional. If provided, this value must match the current value of the
   * target Backup's [etag][google.cloud.gkebackup.v1.Backup.etag] field or the
   * request is rejected.
   */
  etag: string;
  /**
   * Optional. If set to true, any VolumeBackups below this Backup will also be
   * deleted. Otherwise, the request will only succeed if the Backup has no
   * VolumeBackups.
   */
  force: boolean;
}

/** Request message for ListVolumeBackups. */
export interface ListVolumeBackupsRequest {
  /**
   * Required. The Backup that contains the VolumeBackups to list.
   * Format: `projects/* /locations/* /backupPlans/* /backups/*`
   */
  parent: string;
  /**
   * Optional. The target number of results to return in a single response.
   * If not specified, a default value will be chosen by the service.
   * Note that the response may include a partial list and a caller should
   * only rely on the response's
   * [next_page_token][google.cloud.gkebackup.v1.ListVolumeBackupsResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * Optional. The value of
   * [next_page_token][google.cloud.gkebackup.v1.ListVolumeBackupsResponse.next_page_token]
   * received from a previous `ListVolumeBackups` call.
   * Provide this to retrieve the subsequent page in a multi-page list of
   * results. When paginating, all other parameters provided to
   * `ListVolumeBackups` must match the call that provided the page token.
   */
  pageToken: string;
  /** Optional. Field match expression used to filter the results. */
  filter: string;
  /** Optional. Field by which to sort the results. */
  orderBy: string;
}

/** Response message for ListVolumeBackups. */
export interface ListVolumeBackupsResponse {
  /** The list of VolumeBackups matching the given criteria. */
  volumeBackups: VolumeBackup[];
  /**
   * A token which may be sent as
   * [page_token][google.cloud.gkebackup.v1.ListVolumeBackupsRequest.page_token]
   * in a subsequent `ListVolumeBackups` call to retrieve the next page of
   * results. If this field is omitted or empty, then there are no more results
   * to return.
   */
  nextPageToken: string;
}

/** Request message for GetVolumeBackup. */
export interface GetVolumeBackupRequest {
  /**
   * Required. Full name of the VolumeBackup resource.
   * Format: `projects/* /locations/* /backupPlans/* /backups/* /volumeBackups/*`
   */
  name: string;
}

/** Request message for CreateRestorePlan. */
export interface CreateRestorePlanRequest {
  /**
   * Required. The location within which to create the RestorePlan.
   * Format: `projects/* /locations/*`
   */
  parent: string;
  /** Required. The RestorePlan resource object to create. */
  restorePlan:
    | RestorePlan
    | undefined;
  /**
   * Required. The client-provided short name for the RestorePlan resource.
   * This name must:
   *
   * - be between 1 and 63 characters long (inclusive)
   * - consist of only lower-case ASCII letters, numbers, and dashes
   * - start with a lower-case letter
   * - end with a lower-case letter or number
   * - be unique within the set of RestorePlans in this location
   */
  restorePlanId: string;
}

/** Request message for ListRestorePlans. */
export interface ListRestorePlansRequest {
  /**
   * Required. The location that contains the RestorePlans to list.
   * Format: `projects/* /locations/*`
   */
  parent: string;
  /**
   * Optional. The target number of results to return in a single response.
   * If not specified, a default value will be chosen by the service.
   * Note that the response may include a partial list and a caller should
   * only rely on the response's
   * [next_page_token][google.cloud.gkebackup.v1.ListRestorePlansResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * Optional. The value of
   * [next_page_token][google.cloud.gkebackup.v1.ListRestorePlansResponse.next_page_token]
   * received from a previous `ListRestorePlans` call.
   * Provide this to retrieve the subsequent page in a multi-page list of
   * results. When paginating, all other parameters provided to
   * `ListRestorePlans` must match the call that provided the page token.
   */
  pageToken: string;
  /** Optional. Field match expression used to filter the results. */
  filter: string;
  /** Optional. Field by which to sort the results. */
  orderBy: string;
}

/** Response message for ListRestorePlans. */
export interface ListRestorePlansResponse {
  /** The list of RestorePlans matching the given criteria. */
  restorePlans: RestorePlan[];
  /**
   * A token which may be sent as
   * [page_token][google.cloud.gkebackup.v1.ListRestorePlansRequest.page_token]
   * in a subsequent `ListRestorePlans` call to retrieve the next page of
   * results. If this field is omitted or empty, then there are no more results
   * to return.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for GetRestorePlan. */
export interface GetRestorePlanRequest {
  /**
   * Required. Fully qualified RestorePlan name.
   * Format: `projects/* /locations/* /restorePlans/*`
   */
  name: string;
}

/** Request message for UpdateRestorePlan. */
export interface UpdateRestorePlanRequest {
  /**
   * Required. A new version of the RestorePlan resource that contains updated
   * fields. This may be sparsely populated if an `update_mask` is provided.
   */
  restorePlan:
    | RestorePlan
    | undefined;
  /**
   * Optional. This is used to specify the fields to be overwritten in the
   * RestorePlan targeted for update. The values for each of these
   * updated fields will be taken from the `restore_plan` provided
   * with this request. Field names are relative to the root of the resource.
   * If no `update_mask` is provided, all fields in `restore_plan` will be
   * written to the target RestorePlan resource.
   * Note that OUTPUT_ONLY and IMMUTABLE fields in `restore_plan` are ignored
   * and are not used to update the target RestorePlan.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteRestorePlan. */
export interface DeleteRestorePlanRequest {
  /**
   * Required. Fully qualified RestorePlan name.
   * Format: `projects/* /locations/* /restorePlans/*`
   */
  name: string;
  /**
   * Optional. If provided, this value must match the current value of the
   * target RestorePlan's [etag][google.cloud.gkebackup.v1.RestorePlan.etag]
   * field or the request is rejected.
   */
  etag: string;
  /**
   * Optional. If set to true, any Restores below this RestorePlan will also be
   * deleted. Otherwise, the request will only succeed if the RestorePlan has no
   * Restores.
   */
  force: boolean;
}

/** Request message for CreateRestore. */
export interface CreateRestoreRequest {
  /**
   * Required. The RestorePlan within which to create the Restore.
   * Format: `projects/* /locations/* /restorePlans/*`
   */
  parent: string;
  /** Required. The restore resource to create. */
  restore:
    | Restore
    | undefined;
  /**
   * Required. The client-provided short name for the Restore resource.
   * This name must:
   *
   * - be between 1 and 63 characters long (inclusive)
   * - consist of only lower-case ASCII letters, numbers, and dashes
   * - start with a lower-case letter
   * - end with a lower-case letter or number
   * - be unique within the set of Restores in this RestorePlan.
   */
  restoreId: string;
}

/** Request message for ListRestores. */
export interface ListRestoresRequest {
  /**
   * Required. The RestorePlan that contains the Restores to list.
   * Format: `projects/* /locations/* /restorePlans/*`
   */
  parent: string;
  /**
   * Optional. The target number of results to return in a single response.
   * If not specified, a default value will be chosen by the service.
   * Note that the response may include a partial list and a caller should
   * only rely on the response's
   * [next_page_token][google.cloud.gkebackup.v1.ListRestoresResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * Optional. The value of
   * [next_page_token][google.cloud.gkebackup.v1.ListRestoresResponse.next_page_token]
   * received from a previous `ListRestores` call.
   * Provide this to retrieve the subsequent page in a multi-page list of
   * results. When paginating, all other parameters provided to `ListRestores`
   * must match the call that provided the page token.
   */
  pageToken: string;
  /** Optional. Field match expression used to filter the results. */
  filter: string;
  /** Optional. Field by which to sort the results. */
  orderBy: string;
}

/** Response message for ListRestores. */
export interface ListRestoresResponse {
  /** The list of Restores matching the given criteria. */
  restores: Restore[];
  /**
   * A token which may be sent as
   * [page_token][google.cloud.gkebackup.v1.ListRestoresRequest.page_token] in a
   * subsequent `ListRestores` call to retrieve the next page of results. If
   * this field is omitted or empty, then there are no more results to return.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for GetRestore. */
export interface GetRestoreRequest {
  /**
   * Required. Name of the restore resource.
   * Format: `projects/* /locations/* /restorePlans/* /restores/*`
   */
  name: string;
}

/** Request message for UpdateRestore. */
export interface UpdateRestoreRequest {
  /**
   * Required. A new version of the Restore resource that contains updated
   * fields. This may be sparsely populated if an `update_mask` is provided.
   */
  restore:
    | Restore
    | undefined;
  /**
   * Optional. This is used to specify the fields to be overwritten in the
   * Restore targeted for update. The values for each of these
   * updated fields will be taken from the `restore` provided
   * with this request. Field names are relative to the root of the resource.
   * If no `update_mask` is provided, all fields in `restore` will be
   * written to the target Restore resource.
   * Note that OUTPUT_ONLY and IMMUTABLE fields in `restore` are ignored
   * and are not used to update the target Restore.
   */
  updateMask: string[] | undefined;
}

/** Request message for DeleteRestore. */
export interface DeleteRestoreRequest {
  /**
   * Required. Full name of the Restore
   * Format: `projects/* /locations/* /restorePlans/* /restores/*`
   */
  name: string;
  /**
   * Optional. If provided, this value must match the current value of the
   * target Restore's [etag][google.cloud.gkebackup.v1.Restore.etag] field or
   * the request is rejected.
   */
  etag: string;
  /**
   * Optional. If set to true, any VolumeRestores below this restore will also
   * be deleted. Otherwise, the request will only succeed if the restore has no
   * VolumeRestores.
   */
  force: boolean;
}

/** Request message for ListVolumeRestores. */
export interface ListVolumeRestoresRequest {
  /**
   * Required. The Restore that contains the VolumeRestores to list.
   * Format: `projects/* /locations/* /restorePlans/* /restores/*`
   */
  parent: string;
  /**
   * Optional. The target number of results to return in a single response.
   * If not specified, a default value will be chosen by the service.
   * Note that the response may include a partial list and a caller should
   * only rely on the response's
   * [next_page_token][google.cloud.gkebackup.v1.ListVolumeRestoresResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * Optional. The value of
   * [next_page_token][google.cloud.gkebackup.v1.ListVolumeRestoresResponse.next_page_token]
   * received from a previous `ListVolumeRestores` call.
   * Provide this to retrieve the subsequent page in a multi-page list of
   * results. When paginating, all other parameters provided to
   * `ListVolumeRestores` must match the call that provided the page token.
   */
  pageToken: string;
  /** Optional. Field match expression used to filter the results. */
  filter: string;
  /** Optional. Field by which to sort the results. */
  orderBy: string;
}

/** Response message for ListVolumeRestores. */
export interface ListVolumeRestoresResponse {
  /** The list of VolumeRestores matching the given criteria. */
  volumeRestores: VolumeRestore[];
  /**
   * A token which may be sent as
   * [page_token][google.cloud.gkebackup.v1.ListVolumeRestoresRequest.page_token]
   * in a subsequent `ListVolumeRestores` call to retrieve the next page of
   * results. If this field is omitted or empty, then there are no more results
   * to return.
   */
  nextPageToken: string;
}

/** Request message for GetVolumeRestore. */
export interface GetVolumeRestoreRequest {
  /**
   * Required. Full name of the VolumeRestore resource.
   * Format: `projects/* /locations/* /restorePlans/* /restores/* /volumeRestores/*`
   */
  name: string;
}

/** Request message for GetBackupIndexDownloadUrl. */
export interface GetBackupIndexDownloadUrlRequest {
  /**
   * Required. Full name of Backup resource.
   * Format:
   * projects/{project}/locations/{location}/backupPlans/{backup_plan}/backups/{backup}
   */
  backup: string;
}

/** Response message for GetBackupIndexDownloadUrl. */
export interface GetBackupIndexDownloadUrlResponse {
  signedUrl: string;
}

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

function createBaseCreateBackupPlanRequest(): CreateBackupPlanRequest {
  return { parent: "", backupPlan: undefined, backupPlanId: "" };
}

export const CreateBackupPlanRequest: MessageFns<CreateBackupPlanRequest> = {
  encode(message: CreateBackupPlanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.backupPlan !== undefined) {
      BackupPlan.encode(message.backupPlan, writer.uint32(18).fork()).join();
    }
    if (message.backupPlanId !== "") {
      writer.uint32(26).string(message.backupPlanId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBackupPlanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBackupPlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.backupPlan = BackupPlan.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.backupPlanId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBackupPlanRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      backupPlan: isSet(object.backupPlan) ? BackupPlan.fromJSON(object.backupPlan) : undefined,
      backupPlanId: isSet(object.backupPlanId) ? globalThis.String(object.backupPlanId) : "",
    };
  },

  toJSON(message: CreateBackupPlanRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.backupPlan !== undefined) {
      obj.backupPlan = BackupPlan.toJSON(message.backupPlan);
    }
    if (message.backupPlanId !== "") {
      obj.backupPlanId = message.backupPlanId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBackupPlanRequest>): CreateBackupPlanRequest {
    return CreateBackupPlanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBackupPlanRequest>): CreateBackupPlanRequest {
    const message = createBaseCreateBackupPlanRequest();
    message.parent = object.parent ?? "";
    message.backupPlan = (object.backupPlan !== undefined && object.backupPlan !== null)
      ? BackupPlan.fromPartial(object.backupPlan)
      : undefined;
    message.backupPlanId = object.backupPlanId ?? "";
    return message;
  },
};

function createBaseListBackupPlansRequest(): ListBackupPlansRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListBackupPlansRequest: MessageFns<ListBackupPlansRequest> = {
  encode(message: ListBackupPlansRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBackupPlansRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBackupPlansRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBackupPlansRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListBackupPlansRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBackupPlansRequest>): ListBackupPlansRequest {
    return ListBackupPlansRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBackupPlansRequest>): ListBackupPlansRequest {
    const message = createBaseListBackupPlansRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListBackupPlansResponse(): ListBackupPlansResponse {
  return { backupPlans: [], nextPageToken: "", unreachable: [] };
}

export const ListBackupPlansResponse: MessageFns<ListBackupPlansResponse> = {
  encode(message: ListBackupPlansResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.backupPlans) {
      BackupPlan.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBackupPlansResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBackupPlansResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backupPlans.push(BackupPlan.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBackupPlansResponse {
    return {
      backupPlans: globalThis.Array.isArray(object?.backupPlans)
        ? object.backupPlans.map((e: any) => BackupPlan.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListBackupPlansResponse): unknown {
    const obj: any = {};
    if (message.backupPlans?.length) {
      obj.backupPlans = message.backupPlans.map((e) => BackupPlan.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBackupPlansResponse>): ListBackupPlansResponse {
    return ListBackupPlansResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBackupPlansResponse>): ListBackupPlansResponse {
    const message = createBaseListBackupPlansResponse();
    message.backupPlans = object.backupPlans?.map((e) => BackupPlan.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetBackupPlanRequest(): GetBackupPlanRequest {
  return { name: "" };
}

export const GetBackupPlanRequest: MessageFns<GetBackupPlanRequest> = {
  encode(message: GetBackupPlanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBackupPlanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBackupPlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBackupPlanRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBackupPlanRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBackupPlanRequest>): GetBackupPlanRequest {
    return GetBackupPlanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBackupPlanRequest>): GetBackupPlanRequest {
    const message = createBaseGetBackupPlanRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateBackupPlanRequest(): UpdateBackupPlanRequest {
  return { backupPlan: undefined, updateMask: undefined };
}

export const UpdateBackupPlanRequest: MessageFns<UpdateBackupPlanRequest> = {
  encode(message: UpdateBackupPlanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backupPlan !== undefined) {
      BackupPlan.encode(message.backupPlan, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBackupPlanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBackupPlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backupPlan = BackupPlan.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBackupPlanRequest {
    return {
      backupPlan: isSet(object.backupPlan) ? BackupPlan.fromJSON(object.backupPlan) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateBackupPlanRequest): unknown {
    const obj: any = {};
    if (message.backupPlan !== undefined) {
      obj.backupPlan = BackupPlan.toJSON(message.backupPlan);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBackupPlanRequest>): UpdateBackupPlanRequest {
    return UpdateBackupPlanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBackupPlanRequest>): UpdateBackupPlanRequest {
    const message = createBaseUpdateBackupPlanRequest();
    message.backupPlan = (object.backupPlan !== undefined && object.backupPlan !== null)
      ? BackupPlan.fromPartial(object.backupPlan)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteBackupPlanRequest(): DeleteBackupPlanRequest {
  return { name: "", etag: "" };
}

export const DeleteBackupPlanRequest: MessageFns<DeleteBackupPlanRequest> = {
  encode(message: DeleteBackupPlanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBackupPlanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBackupPlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBackupPlanRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteBackupPlanRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteBackupPlanRequest>): DeleteBackupPlanRequest {
    return DeleteBackupPlanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteBackupPlanRequest>): DeleteBackupPlanRequest {
    const message = createBaseDeleteBackupPlanRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseCreateBackupRequest(): CreateBackupRequest {
  return { parent: "", backup: undefined, backupId: "" };
}

export const CreateBackupRequest: MessageFns<CreateBackupRequest> = {
  encode(message: CreateBackupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.backup !== undefined) {
      Backup.encode(message.backup, writer.uint32(18).fork()).join();
    }
    if (message.backupId !== "") {
      writer.uint32(26).string(message.backupId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBackupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBackupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.backup = Backup.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.backupId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBackupRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      backup: isSet(object.backup) ? Backup.fromJSON(object.backup) : undefined,
      backupId: isSet(object.backupId) ? globalThis.String(object.backupId) : "",
    };
  },

  toJSON(message: CreateBackupRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.backup !== undefined) {
      obj.backup = Backup.toJSON(message.backup);
    }
    if (message.backupId !== "") {
      obj.backupId = message.backupId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBackupRequest>): CreateBackupRequest {
    return CreateBackupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBackupRequest>): CreateBackupRequest {
    const message = createBaseCreateBackupRequest();
    message.parent = object.parent ?? "";
    message.backup = (object.backup !== undefined && object.backup !== null)
      ? Backup.fromPartial(object.backup)
      : undefined;
    message.backupId = object.backupId ?? "";
    return message;
  },
};

function createBaseListBackupsRequest(): ListBackupsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListBackupsRequest: MessageFns<ListBackupsRequest> = {
  encode(message: ListBackupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBackupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBackupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBackupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListBackupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBackupsRequest>): ListBackupsRequest {
    return ListBackupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBackupsRequest>): ListBackupsRequest {
    const message = createBaseListBackupsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListBackupsResponse(): ListBackupsResponse {
  return { backups: [], nextPageToken: "" };
}

export const ListBackupsResponse: MessageFns<ListBackupsResponse> = {
  encode(message: ListBackupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.backups) {
      Backup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBackupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBackupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backups.push(Backup.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBackupsResponse {
    return {
      backups: globalThis.Array.isArray(object?.backups) ? object.backups.map((e: any) => Backup.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListBackupsResponse): unknown {
    const obj: any = {};
    if (message.backups?.length) {
      obj.backups = message.backups.map((e) => Backup.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBackupsResponse>): ListBackupsResponse {
    return ListBackupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBackupsResponse>): ListBackupsResponse {
    const message = createBaseListBackupsResponse();
    message.backups = object.backups?.map((e) => Backup.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetBackupRequest(): GetBackupRequest {
  return { name: "" };
}

export const GetBackupRequest: MessageFns<GetBackupRequest> = {
  encode(message: GetBackupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBackupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBackupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBackupRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBackupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBackupRequest>): GetBackupRequest {
    return GetBackupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBackupRequest>): GetBackupRequest {
    const message = createBaseGetBackupRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateBackupRequest(): UpdateBackupRequest {
  return { backup: undefined, updateMask: undefined };
}

export const UpdateBackupRequest: MessageFns<UpdateBackupRequest> = {
  encode(message: UpdateBackupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backup !== undefined) {
      Backup.encode(message.backup, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBackupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBackupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backup = Backup.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBackupRequest {
    return {
      backup: isSet(object.backup) ? Backup.fromJSON(object.backup) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateBackupRequest): unknown {
    const obj: any = {};
    if (message.backup !== undefined) {
      obj.backup = Backup.toJSON(message.backup);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBackupRequest>): UpdateBackupRequest {
    return UpdateBackupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBackupRequest>): UpdateBackupRequest {
    const message = createBaseUpdateBackupRequest();
    message.backup = (object.backup !== undefined && object.backup !== null)
      ? Backup.fromPartial(object.backup)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteBackupRequest(): DeleteBackupRequest {
  return { name: "", etag: "", force: false };
}

export const DeleteBackupRequest: MessageFns<DeleteBackupRequest> = {
  encode(message: DeleteBackupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBackupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBackupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBackupRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteBackupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteBackupRequest>): DeleteBackupRequest {
    return DeleteBackupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteBackupRequest>): DeleteBackupRequest {
    const message = createBaseDeleteBackupRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListVolumeBackupsRequest(): ListVolumeBackupsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListVolumeBackupsRequest: MessageFns<ListVolumeBackupsRequest> = {
  encode(message: ListVolumeBackupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVolumeBackupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVolumeBackupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVolumeBackupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListVolumeBackupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVolumeBackupsRequest>): ListVolumeBackupsRequest {
    return ListVolumeBackupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVolumeBackupsRequest>): ListVolumeBackupsRequest {
    const message = createBaseListVolumeBackupsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListVolumeBackupsResponse(): ListVolumeBackupsResponse {
  return { volumeBackups: [], nextPageToken: "" };
}

export const ListVolumeBackupsResponse: MessageFns<ListVolumeBackupsResponse> = {
  encode(message: ListVolumeBackupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.volumeBackups) {
      VolumeBackup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVolumeBackupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVolumeBackupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.volumeBackups.push(VolumeBackup.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVolumeBackupsResponse {
    return {
      volumeBackups: globalThis.Array.isArray(object?.volumeBackups)
        ? object.volumeBackups.map((e: any) => VolumeBackup.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListVolumeBackupsResponse): unknown {
    const obj: any = {};
    if (message.volumeBackups?.length) {
      obj.volumeBackups = message.volumeBackups.map((e) => VolumeBackup.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVolumeBackupsResponse>): ListVolumeBackupsResponse {
    return ListVolumeBackupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVolumeBackupsResponse>): ListVolumeBackupsResponse {
    const message = createBaseListVolumeBackupsResponse();
    message.volumeBackups = object.volumeBackups?.map((e) => VolumeBackup.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetVolumeBackupRequest(): GetVolumeBackupRequest {
  return { name: "" };
}

export const GetVolumeBackupRequest: MessageFns<GetVolumeBackupRequest> = {
  encode(message: GetVolumeBackupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVolumeBackupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVolumeBackupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVolumeBackupRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVolumeBackupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVolumeBackupRequest>): GetVolumeBackupRequest {
    return GetVolumeBackupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVolumeBackupRequest>): GetVolumeBackupRequest {
    const message = createBaseGetVolumeBackupRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateRestorePlanRequest(): CreateRestorePlanRequest {
  return { parent: "", restorePlan: undefined, restorePlanId: "" };
}

export const CreateRestorePlanRequest: MessageFns<CreateRestorePlanRequest> = {
  encode(message: CreateRestorePlanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.restorePlan !== undefined) {
      RestorePlan.encode(message.restorePlan, writer.uint32(18).fork()).join();
    }
    if (message.restorePlanId !== "") {
      writer.uint32(26).string(message.restorePlanId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRestorePlanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRestorePlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.restorePlan = RestorePlan.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.restorePlanId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRestorePlanRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      restorePlan: isSet(object.restorePlan) ? RestorePlan.fromJSON(object.restorePlan) : undefined,
      restorePlanId: isSet(object.restorePlanId) ? globalThis.String(object.restorePlanId) : "",
    };
  },

  toJSON(message: CreateRestorePlanRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.restorePlan !== undefined) {
      obj.restorePlan = RestorePlan.toJSON(message.restorePlan);
    }
    if (message.restorePlanId !== "") {
      obj.restorePlanId = message.restorePlanId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRestorePlanRequest>): CreateRestorePlanRequest {
    return CreateRestorePlanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRestorePlanRequest>): CreateRestorePlanRequest {
    const message = createBaseCreateRestorePlanRequest();
    message.parent = object.parent ?? "";
    message.restorePlan = (object.restorePlan !== undefined && object.restorePlan !== null)
      ? RestorePlan.fromPartial(object.restorePlan)
      : undefined;
    message.restorePlanId = object.restorePlanId ?? "";
    return message;
  },
};

function createBaseListRestorePlansRequest(): ListRestorePlansRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListRestorePlansRequest: MessageFns<ListRestorePlansRequest> = {
  encode(message: ListRestorePlansRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRestorePlansRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRestorePlansRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRestorePlansRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListRestorePlansRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRestorePlansRequest>): ListRestorePlansRequest {
    return ListRestorePlansRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRestorePlansRequest>): ListRestorePlansRequest {
    const message = createBaseListRestorePlansRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListRestorePlansResponse(): ListRestorePlansResponse {
  return { restorePlans: [], nextPageToken: "", unreachable: [] };
}

export const ListRestorePlansResponse: MessageFns<ListRestorePlansResponse> = {
  encode(message: ListRestorePlansResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.restorePlans) {
      RestorePlan.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRestorePlansResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRestorePlansResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.restorePlans.push(RestorePlan.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRestorePlansResponse {
    return {
      restorePlans: globalThis.Array.isArray(object?.restorePlans)
        ? object.restorePlans.map((e: any) => RestorePlan.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListRestorePlansResponse): unknown {
    const obj: any = {};
    if (message.restorePlans?.length) {
      obj.restorePlans = message.restorePlans.map((e) => RestorePlan.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRestorePlansResponse>): ListRestorePlansResponse {
    return ListRestorePlansResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRestorePlansResponse>): ListRestorePlansResponse {
    const message = createBaseListRestorePlansResponse();
    message.restorePlans = object.restorePlans?.map((e) => RestorePlan.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetRestorePlanRequest(): GetRestorePlanRequest {
  return { name: "" };
}

export const GetRestorePlanRequest: MessageFns<GetRestorePlanRequest> = {
  encode(message: GetRestorePlanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRestorePlanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRestorePlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRestorePlanRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRestorePlanRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRestorePlanRequest>): GetRestorePlanRequest {
    return GetRestorePlanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRestorePlanRequest>): GetRestorePlanRequest {
    const message = createBaseGetRestorePlanRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateRestorePlanRequest(): UpdateRestorePlanRequest {
  return { restorePlan: undefined, updateMask: undefined };
}

export const UpdateRestorePlanRequest: MessageFns<UpdateRestorePlanRequest> = {
  encode(message: UpdateRestorePlanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.restorePlan !== undefined) {
      RestorePlan.encode(message.restorePlan, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRestorePlanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRestorePlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.restorePlan = RestorePlan.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRestorePlanRequest {
    return {
      restorePlan: isSet(object.restorePlan) ? RestorePlan.fromJSON(object.restorePlan) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateRestorePlanRequest): unknown {
    const obj: any = {};
    if (message.restorePlan !== undefined) {
      obj.restorePlan = RestorePlan.toJSON(message.restorePlan);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRestorePlanRequest>): UpdateRestorePlanRequest {
    return UpdateRestorePlanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRestorePlanRequest>): UpdateRestorePlanRequest {
    const message = createBaseUpdateRestorePlanRequest();
    message.restorePlan = (object.restorePlan !== undefined && object.restorePlan !== null)
      ? RestorePlan.fromPartial(object.restorePlan)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteRestorePlanRequest(): DeleteRestorePlanRequest {
  return { name: "", etag: "", force: false };
}

export const DeleteRestorePlanRequest: MessageFns<DeleteRestorePlanRequest> = {
  encode(message: DeleteRestorePlanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRestorePlanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRestorePlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRestorePlanRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteRestorePlanRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRestorePlanRequest>): DeleteRestorePlanRequest {
    return DeleteRestorePlanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRestorePlanRequest>): DeleteRestorePlanRequest {
    const message = createBaseDeleteRestorePlanRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseCreateRestoreRequest(): CreateRestoreRequest {
  return { parent: "", restore: undefined, restoreId: "" };
}

export const CreateRestoreRequest: MessageFns<CreateRestoreRequest> = {
  encode(message: CreateRestoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.restore !== undefined) {
      Restore.encode(message.restore, writer.uint32(18).fork()).join();
    }
    if (message.restoreId !== "") {
      writer.uint32(26).string(message.restoreId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRestoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRestoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.restore = Restore.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.restoreId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRestoreRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      restore: isSet(object.restore) ? Restore.fromJSON(object.restore) : undefined,
      restoreId: isSet(object.restoreId) ? globalThis.String(object.restoreId) : "",
    };
  },

  toJSON(message: CreateRestoreRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.restore !== undefined) {
      obj.restore = Restore.toJSON(message.restore);
    }
    if (message.restoreId !== "") {
      obj.restoreId = message.restoreId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRestoreRequest>): CreateRestoreRequest {
    return CreateRestoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRestoreRequest>): CreateRestoreRequest {
    const message = createBaseCreateRestoreRequest();
    message.parent = object.parent ?? "";
    message.restore = (object.restore !== undefined && object.restore !== null)
      ? Restore.fromPartial(object.restore)
      : undefined;
    message.restoreId = object.restoreId ?? "";
    return message;
  },
};

function createBaseListRestoresRequest(): ListRestoresRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListRestoresRequest: MessageFns<ListRestoresRequest> = {
  encode(message: ListRestoresRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRestoresRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRestoresRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRestoresRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListRestoresRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRestoresRequest>): ListRestoresRequest {
    return ListRestoresRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRestoresRequest>): ListRestoresRequest {
    const message = createBaseListRestoresRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListRestoresResponse(): ListRestoresResponse {
  return { restores: [], nextPageToken: "", unreachable: [] };
}

export const ListRestoresResponse: MessageFns<ListRestoresResponse> = {
  encode(message: ListRestoresResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.restores) {
      Restore.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRestoresResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRestoresResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.restores.push(Restore.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRestoresResponse {
    return {
      restores: globalThis.Array.isArray(object?.restores) ? object.restores.map((e: any) => Restore.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListRestoresResponse): unknown {
    const obj: any = {};
    if (message.restores?.length) {
      obj.restores = message.restores.map((e) => Restore.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRestoresResponse>): ListRestoresResponse {
    return ListRestoresResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRestoresResponse>): ListRestoresResponse {
    const message = createBaseListRestoresResponse();
    message.restores = object.restores?.map((e) => Restore.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetRestoreRequest(): GetRestoreRequest {
  return { name: "" };
}

export const GetRestoreRequest: MessageFns<GetRestoreRequest> = {
  encode(message: GetRestoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRestoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRestoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRestoreRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRestoreRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRestoreRequest>): GetRestoreRequest {
    return GetRestoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRestoreRequest>): GetRestoreRequest {
    const message = createBaseGetRestoreRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateRestoreRequest(): UpdateRestoreRequest {
  return { restore: undefined, updateMask: undefined };
}

export const UpdateRestoreRequest: MessageFns<UpdateRestoreRequest> = {
  encode(message: UpdateRestoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.restore !== undefined) {
      Restore.encode(message.restore, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRestoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRestoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.restore = Restore.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRestoreRequest {
    return {
      restore: isSet(object.restore) ? Restore.fromJSON(object.restore) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateRestoreRequest): unknown {
    const obj: any = {};
    if (message.restore !== undefined) {
      obj.restore = Restore.toJSON(message.restore);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRestoreRequest>): UpdateRestoreRequest {
    return UpdateRestoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRestoreRequest>): UpdateRestoreRequest {
    const message = createBaseUpdateRestoreRequest();
    message.restore = (object.restore !== undefined && object.restore !== null)
      ? Restore.fromPartial(object.restore)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteRestoreRequest(): DeleteRestoreRequest {
  return { name: "", etag: "", force: false };
}

export const DeleteRestoreRequest: MessageFns<DeleteRestoreRequest> = {
  encode(message: DeleteRestoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRestoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRestoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRestoreRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteRestoreRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRestoreRequest>): DeleteRestoreRequest {
    return DeleteRestoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRestoreRequest>): DeleteRestoreRequest {
    const message = createBaseDeleteRestoreRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseListVolumeRestoresRequest(): ListVolumeRestoresRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListVolumeRestoresRequest: MessageFns<ListVolumeRestoresRequest> = {
  encode(message: ListVolumeRestoresRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVolumeRestoresRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVolumeRestoresRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVolumeRestoresRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListVolumeRestoresRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVolumeRestoresRequest>): ListVolumeRestoresRequest {
    return ListVolumeRestoresRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVolumeRestoresRequest>): ListVolumeRestoresRequest {
    const message = createBaseListVolumeRestoresRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListVolumeRestoresResponse(): ListVolumeRestoresResponse {
  return { volumeRestores: [], nextPageToken: "" };
}

export const ListVolumeRestoresResponse: MessageFns<ListVolumeRestoresResponse> = {
  encode(message: ListVolumeRestoresResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.volumeRestores) {
      VolumeRestore.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVolumeRestoresResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVolumeRestoresResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.volumeRestores.push(VolumeRestore.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVolumeRestoresResponse {
    return {
      volumeRestores: globalThis.Array.isArray(object?.volumeRestores)
        ? object.volumeRestores.map((e: any) => VolumeRestore.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListVolumeRestoresResponse): unknown {
    const obj: any = {};
    if (message.volumeRestores?.length) {
      obj.volumeRestores = message.volumeRestores.map((e) => VolumeRestore.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVolumeRestoresResponse>): ListVolumeRestoresResponse {
    return ListVolumeRestoresResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVolumeRestoresResponse>): ListVolumeRestoresResponse {
    const message = createBaseListVolumeRestoresResponse();
    message.volumeRestores = object.volumeRestores?.map((e) => VolumeRestore.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetVolumeRestoreRequest(): GetVolumeRestoreRequest {
  return { name: "" };
}

export const GetVolumeRestoreRequest: MessageFns<GetVolumeRestoreRequest> = {
  encode(message: GetVolumeRestoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVolumeRestoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVolumeRestoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVolumeRestoreRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVolumeRestoreRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVolumeRestoreRequest>): GetVolumeRestoreRequest {
    return GetVolumeRestoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVolumeRestoreRequest>): GetVolumeRestoreRequest {
    const message = createBaseGetVolumeRestoreRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetBackupIndexDownloadUrlRequest(): GetBackupIndexDownloadUrlRequest {
  return { backup: "" };
}

export const GetBackupIndexDownloadUrlRequest: MessageFns<GetBackupIndexDownloadUrlRequest> = {
  encode(message: GetBackupIndexDownloadUrlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backup !== "") {
      writer.uint32(10).string(message.backup);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBackupIndexDownloadUrlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBackupIndexDownloadUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backup = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBackupIndexDownloadUrlRequest {
    return { backup: isSet(object.backup) ? globalThis.String(object.backup) : "" };
  },

  toJSON(message: GetBackupIndexDownloadUrlRequest): unknown {
    const obj: any = {};
    if (message.backup !== "") {
      obj.backup = message.backup;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBackupIndexDownloadUrlRequest>): GetBackupIndexDownloadUrlRequest {
    return GetBackupIndexDownloadUrlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBackupIndexDownloadUrlRequest>): GetBackupIndexDownloadUrlRequest {
    const message = createBaseGetBackupIndexDownloadUrlRequest();
    message.backup = object.backup ?? "";
    return message;
  },
};

function createBaseGetBackupIndexDownloadUrlResponse(): GetBackupIndexDownloadUrlResponse {
  return { signedUrl: "" };
}

export const GetBackupIndexDownloadUrlResponse: MessageFns<GetBackupIndexDownloadUrlResponse> = {
  encode(message: GetBackupIndexDownloadUrlResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signedUrl !== "") {
      writer.uint32(10).string(message.signedUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBackupIndexDownloadUrlResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBackupIndexDownloadUrlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signedUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBackupIndexDownloadUrlResponse {
    return { signedUrl: isSet(object.signedUrl) ? globalThis.String(object.signedUrl) : "" };
  },

  toJSON(message: GetBackupIndexDownloadUrlResponse): unknown {
    const obj: any = {};
    if (message.signedUrl !== "") {
      obj.signedUrl = message.signedUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBackupIndexDownloadUrlResponse>): GetBackupIndexDownloadUrlResponse {
    return GetBackupIndexDownloadUrlResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBackupIndexDownloadUrlResponse>): GetBackupIndexDownloadUrlResponse {
    const message = createBaseGetBackupIndexDownloadUrlResponse();
    message.signedUrl = object.signedUrl ?? "";
    return message;
  },
};

/**
 * BackupForGKE allows Kubernetes administrators to configure, execute, and
 * manage backup and restore operations for their GKE clusters.
 */
export type BackupForGKEDefinition = typeof BackupForGKEDefinition;
export const BackupForGKEDefinition = {
  name: "BackupForGKE",
  fullName: "google.cloud.gkebackup.v1.BackupForGKE",
  methods: {
    /** Creates a new BackupPlan in a given location. */
    createBackupPlan: {
      name: "CreateBackupPlan",
      requestType: CreateBackupPlanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              66,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              44,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              11,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists BackupPlans in a given location. */
    listBackupPlans: {
      name: "ListBackupPlans",
      requestType: ListBackupPlansRequest,
      requestStream: false,
      responseType: ListBackupPlansResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieve the details of a single BackupPlan. */
    getBackupPlan: {
      name: "GetBackupPlan",
      requestType: GetBackupPlanRequest,
      requestStream: false,
      responseType: BackupPlan,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Update a BackupPlan. */
    updateBackupPlan: {
      name: "UpdateBackupPlan",
      requestType: UpdateBackupPlanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              66,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              11,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              50,
              59,
              47,
              118,
              49,
              47,
              123,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing BackupPlan. */
    deleteBackupPlan: {
      name: "DeleteBackupPlan",
      requestType: DeleteBackupPlanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a Backup for the given BackupPlan. */
    createBackup: {
      name: "CreateBackup",
      requestType: CreateBackupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              6,
              66,
              97,
              99,
              107,
              117,
              112,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              97,
              99,
              107,
              117,
              112,
              44,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              6,
              98,
              97,
              99,
              107,
              117,
              112,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists the Backups for a given BackupPlan. */
    listBackups: {
      name: "ListBackups",
      requestType: ListBackupsRequest,
      requestStream: false,
      responseType: ListBackupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieve the details of a single Backup. */
    getBackup: {
      name: "GetBackup",
      requestType: GetBackupRequest,
      requestStream: false,
      responseType: Backup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Update a Backup. */
    updateBackup: {
      name: "UpdateBackup",
      requestType: UpdateBackupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              6,
              66,
              97,
              99,
              107,
              117,
              112,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([18, 98, 97, 99, 107, 117, 112, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              74,
              58,
              6,
              98,
              97,
              99,
              107,
              117,
              112,
              50,
              64,
              47,
              118,
              49,
              47,
              123,
              98,
              97,
              99,
              107,
              117,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing Backup. */
    deleteBackup: {
      name: "DeleteBackup",
      requestType: DeleteBackupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              42,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists the VolumeBackups for a given Backup. */
    listVolumeBackups: {
      name: "ListVolumeBackups",
      requestType: ListVolumeBackupsRequest,
      requestStream: false,
      responseType: ListVolumeBackupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              75,
              18,
              73,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              125,
              47,
              118,
              111,
              108,
              117,
              109,
              101,
              66,
              97,
              99,
              107,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieve the details of a single VolumeBackup. */
    getVolumeBackup: {
      name: "GetVolumeBackup",
      requestType: GetVolumeBackupRequest,
      requestStream: false,
      responseType: VolumeBackup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              75,
              18,
              73,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              47,
              118,
              111,
              108,
              117,
              109,
              101,
              66,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new RestorePlan in a given location. */
    createRestorePlan: {
      name: "CreateRestorePlan",
      requestType: CreateRestorePlanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              82,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              95,
              112,
              108,
              97,
              110,
              44,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              95,
              112,
              108,
              97,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              12,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              95,
              112,
              108,
              97,
              110,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists RestorePlans in a given location. */
    listRestorePlans: {
      name: "ListRestorePlans",
      requestType: ListRestorePlansRequest,
      requestStream: false,
      responseType: ListRestorePlansResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieve the details of a single RestorePlan. */
    getRestorePlan: {
      name: "GetRestorePlan",
      requestType: GetRestorePlanRequest,
      requestStream: false,
      responseType: RestorePlan,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Update a RestorePlan. */
    updateRestorePlan: {
      name: "UpdateRestorePlan",
      requestType: UpdateRestorePlanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              82,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              24,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              95,
              112,
              108,
              97,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              77,
              58,
              12,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              95,
              112,
              108,
              97,
              110,
              50,
              61,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              95,
              112,
              108,
              97,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing RestorePlan. */
    deleteRestorePlan: {
      name: "DeleteRestorePlan",
      requestType: DeleteRestorePlanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Restore for the given RestorePlan. */
    createRestore: {
      name: "CreateRestore",
      requestType: CreateRestoreRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              101,
              115,
              116,
              111,
              114,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              44,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              7,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists the Restores for a given RestorePlan. */
    listRestores: {
      name: "ListRestores",
      requestType: ListRestoresRequest,
      requestStream: false,
      responseType: ListRestoresResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the details of a single Restore. */
    getRestore: {
      name: "GetRestore",
      requestType: GetRestoreRequest,
      requestStream: false,
      responseType: Restore,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Update a Restore. */
    updateRestore: {
      name: "UpdateRestore",
      requestType: UpdateRestoreRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              82,
              101,
              115,
              116,
              111,
              114,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              19,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              7,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              50,
              67,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing Restore. */
    deleteRestore: {
      name: "DeleteRestore",
      requestType: DeleteRestoreRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists the VolumeRestores for a given Restore. */
    listVolumeRestores: {
      name: "ListVolumeRestores",
      requestType: ListVolumeRestoresRequest,
      requestStream: false,
      responseType: ListVolumeRestoresResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              78,
              18,
              76,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              118,
              111,
              108,
              117,
              109,
              101,
              82,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieve the details of a single VolumeRestore. */
    getVolumeRestore: {
      name: "GetVolumeRestore",
      requestType: GetVolumeRestoreRequest,
      requestStream: false,
      responseType: VolumeRestore,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              78,
              18,
              76,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              118,
              111,
              108,
              117,
              109,
              101,
              82,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Retrieve the link to the backupIndex. */
    getBackupIndexDownloadUrl: {
      name: "GetBackupIndexDownloadUrl",
      requestType: GetBackupIndexDownloadUrlRequest,
      requestStream: false,
      responseType: GetBackupIndexDownloadUrlResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 98, 97, 99, 107, 117, 112])],
          578365826: [
            Buffer.from([
              87,
              18,
              85,
              47,
              118,
              49,
              47,
              123,
              98,
              97,
              99,
              107,
              117,
              112,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              66,
              97,
              99,
              107,
              117,
              112,
              73,
              110,
              100,
              101,
              120,
              68,
              111,
              119,
              110,
              108,
              111,
              97,
              100,
              85,
              114,
              108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface BackupForGKEServiceImplementation<CallContextExt = {}> {
  /** Creates a new BackupPlan in a given location. */
  createBackupPlan(
    request: CreateBackupPlanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists BackupPlans in a given location. */
  listBackupPlans(
    request: ListBackupPlansRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBackupPlansResponse>>;
  /** Retrieve the details of a single BackupPlan. */
  getBackupPlan(request: GetBackupPlanRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BackupPlan>>;
  /** Update a BackupPlan. */
  updateBackupPlan(
    request: UpdateBackupPlanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes an existing BackupPlan. */
  deleteBackupPlan(
    request: DeleteBackupPlanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a Backup for the given BackupPlan. */
  createBackup(request: CreateBackupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists the Backups for a given BackupPlan. */
  listBackups(
    request: ListBackupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBackupsResponse>>;
  /** Retrieve the details of a single Backup. */
  getBackup(request: GetBackupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Backup>>;
  /** Update a Backup. */
  updateBackup(request: UpdateBackupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes an existing Backup. */
  deleteBackup(request: DeleteBackupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists the VolumeBackups for a given Backup. */
  listVolumeBackups(
    request: ListVolumeBackupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVolumeBackupsResponse>>;
  /** Retrieve the details of a single VolumeBackup. */
  getVolumeBackup(
    request: GetVolumeBackupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VolumeBackup>>;
  /** Creates a new RestorePlan in a given location. */
  createRestorePlan(
    request: CreateRestorePlanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists RestorePlans in a given location. */
  listRestorePlans(
    request: ListRestorePlansRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRestorePlansResponse>>;
  /** Retrieve the details of a single RestorePlan. */
  getRestorePlan(
    request: GetRestorePlanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RestorePlan>>;
  /** Update a RestorePlan. */
  updateRestorePlan(
    request: UpdateRestorePlanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes an existing RestorePlan. */
  deleteRestorePlan(
    request: DeleteRestorePlanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a new Restore for the given RestorePlan. */
  createRestore(request: CreateRestoreRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists the Restores for a given RestorePlan. */
  listRestores(
    request: ListRestoresRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRestoresResponse>>;
  /** Retrieves the details of a single Restore. */
  getRestore(request: GetRestoreRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Restore>>;
  /** Update a Restore. */
  updateRestore(request: UpdateRestoreRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes an existing Restore. */
  deleteRestore(request: DeleteRestoreRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists the VolumeRestores for a given Restore. */
  listVolumeRestores(
    request: ListVolumeRestoresRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVolumeRestoresResponse>>;
  /** Retrieve the details of a single VolumeRestore. */
  getVolumeRestore(
    request: GetVolumeRestoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VolumeRestore>>;
  /** Retrieve the link to the backupIndex. */
  getBackupIndexDownloadUrl(
    request: GetBackupIndexDownloadUrlRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetBackupIndexDownloadUrlResponse>>;
}

export interface BackupForGKEClient<CallOptionsExt = {}> {
  /** Creates a new BackupPlan in a given location. */
  createBackupPlan(
    request: DeepPartial<CreateBackupPlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists BackupPlans in a given location. */
  listBackupPlans(
    request: DeepPartial<ListBackupPlansRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBackupPlansResponse>;
  /** Retrieve the details of a single BackupPlan. */
  getBackupPlan(
    request: DeepPartial<GetBackupPlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BackupPlan>;
  /** Update a BackupPlan. */
  updateBackupPlan(
    request: DeepPartial<UpdateBackupPlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes an existing BackupPlan. */
  deleteBackupPlan(
    request: DeepPartial<DeleteBackupPlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a Backup for the given BackupPlan. */
  createBackup(request: DeepPartial<CreateBackupRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists the Backups for a given BackupPlan. */
  listBackups(
    request: DeepPartial<ListBackupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBackupsResponse>;
  /** Retrieve the details of a single Backup. */
  getBackup(request: DeepPartial<GetBackupRequest>, options?: CallOptions & CallOptionsExt): Promise<Backup>;
  /** Update a Backup. */
  updateBackup(request: DeepPartial<UpdateBackupRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes an existing Backup. */
  deleteBackup(request: DeepPartial<DeleteBackupRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists the VolumeBackups for a given Backup. */
  listVolumeBackups(
    request: DeepPartial<ListVolumeBackupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVolumeBackupsResponse>;
  /** Retrieve the details of a single VolumeBackup. */
  getVolumeBackup(
    request: DeepPartial<GetVolumeBackupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VolumeBackup>;
  /** Creates a new RestorePlan in a given location. */
  createRestorePlan(
    request: DeepPartial<CreateRestorePlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists RestorePlans in a given location. */
  listRestorePlans(
    request: DeepPartial<ListRestorePlansRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRestorePlansResponse>;
  /** Retrieve the details of a single RestorePlan. */
  getRestorePlan(
    request: DeepPartial<GetRestorePlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RestorePlan>;
  /** Update a RestorePlan. */
  updateRestorePlan(
    request: DeepPartial<UpdateRestorePlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes an existing RestorePlan. */
  deleteRestorePlan(
    request: DeepPartial<DeleteRestorePlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a new Restore for the given RestorePlan. */
  createRestore(request: DeepPartial<CreateRestoreRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists the Restores for a given RestorePlan. */
  listRestores(
    request: DeepPartial<ListRestoresRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRestoresResponse>;
  /** Retrieves the details of a single Restore. */
  getRestore(request: DeepPartial<GetRestoreRequest>, options?: CallOptions & CallOptionsExt): Promise<Restore>;
  /** Update a Restore. */
  updateRestore(request: DeepPartial<UpdateRestoreRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes an existing Restore. */
  deleteRestore(request: DeepPartial<DeleteRestoreRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists the VolumeRestores for a given Restore. */
  listVolumeRestores(
    request: DeepPartial<ListVolumeRestoresRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVolumeRestoresResponse>;
  /** Retrieve the details of a single VolumeRestore. */
  getVolumeRestore(
    request: DeepPartial<GetVolumeRestoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VolumeRestore>;
  /** Retrieve the link to the backupIndex. */
  getBackupIndexDownloadUrl(
    request: DeepPartial<GetBackupIndexDownloadUrlRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetBackupIndexDownloadUrlResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
