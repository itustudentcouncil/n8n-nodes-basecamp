// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkebackup/logging/v1/logged_backup_plan.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { EncryptionKey, NamespacedNames, Namespaces } from "./logged_common.js";

export const protobufPackage = "google.cloud.gkebackup.logging.v1";

/**
 * BackupPlan as stored in Platform log. It's used to log the details of
 * a createBackupPlan/updateBackupPlan request, so only fields that can be taken
 * from user input are included here.
 */
export interface LoggedBackupPlan {
  /** User specified descriptive string for this BackupPlan. */
  description: string;
  /** GCP resource name of the source cluster for this BackupPlan. */
  cluster: string;
  /** RetentionPolicy governs lifecycle of Backups created under this plan. */
  retentionPolicy:
    | LoggedBackupPlan_RetentionPolicy
    | undefined;
  /** A set of custom labels supplied by user. */
  labels: { [key: string]: string };
  /** Defines scheduled Backup creation under this BackupPlan. */
  backupSchedule:
    | LoggedBackupPlan_Schedule
    | undefined;
  /** A flag indicates whether the plan has been deactivated. */
  deactivated: boolean;
  /** Defines backup configuration of this BackupPlan. */
  backupConfig: LoggedBackupPlan_BackupConfig | undefined;
}

/**
 * RentionPolicy is an inner message type to define:
 * 1. When to automatically delete Backups created under this BackupPlan
 * 2. A plan level minimum Backup retain days which blocks deletion
 * 3. Lock to disallow any policy updates
 */
export interface LoggedBackupPlan_RetentionPolicy {
  /**
   * Number of days during which deletion of a Backup created under this
   * BackupPlan will be blocked.
   */
  backupDeleteLockDays: number;
  /**
   * Number of days after which the service will delete a Backup.
   * If specified, a Backup created under this BackupPlan will be
   * automatically deleted after its age reaches create_time +
   * backup_retain_days.
   */
  backupRetainDays: number;
  /**
   * A flag denotes that the retention policy of this BackupPlan is locked.
   * If set to True, no further update is allowed on this policy, including
   * the 'locked' field itself.
   * Default to False.
   */
  locked: boolean;
}

/** Schedule, an inner message type defines a cron schedule. */
export interface LoggedBackupPlan_Schedule {
  /** A cron style string schedule on which an operation will be executed. */
  cronSchedule: string;
  /** A flag to toggle scheduled operation. */
  paused: boolean;
}

/**
 * BackupConfig, an inner message type defines the configuration of creating
 * a backup from this BackupPlan
 */
export interface LoggedBackupPlan_BackupConfig {
  /** If set to true, backup whole cluster */
  allNamespaces?:
    | boolean
    | undefined;
  /** If set, backup the list of namespaces */
  selectedNamespaces?:
    | Namespaces
    | undefined;
  /** If set, backup the list of applications */
  selectedApplications?:
    | NamespacedNames
    | undefined;
  /** A boolean flag specifies whether volume data should be backed up */
  includeVolumeData: boolean;
  /** A boolean flag specifies whether secrets should be backed up */
  includeSecrets: boolean;
  /**
   * Custom encryption key. For preview, support GCP KMS only.
   * This only contains the key metadata, and no key material.
   */
  encryptionKey: EncryptionKey | undefined;
}

export interface LoggedBackupPlan_LabelsEntry {
  key: string;
  value: string;
}

function createBaseLoggedBackupPlan(): LoggedBackupPlan {
  return {
    description: "",
    cluster: "",
    retentionPolicy: undefined,
    labels: {},
    backupSchedule: undefined,
    deactivated: false,
    backupConfig: undefined,
  };
}

export const LoggedBackupPlan: MessageFns<LoggedBackupPlan> = {
  encode(message: LoggedBackupPlan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.cluster !== "") {
      writer.uint32(18).string(message.cluster);
    }
    if (message.retentionPolicy !== undefined) {
      LoggedBackupPlan_RetentionPolicy.encode(message.retentionPolicy, writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      LoggedBackupPlan_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.backupSchedule !== undefined) {
      LoggedBackupPlan_Schedule.encode(message.backupSchedule, writer.uint32(42).fork()).join();
    }
    if (message.deactivated !== false) {
      writer.uint32(48).bool(message.deactivated);
    }
    if (message.backupConfig !== undefined) {
      LoggedBackupPlan_BackupConfig.encode(message.backupConfig, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggedBackupPlan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggedBackupPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cluster = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.retentionPolicy = LoggedBackupPlan_RetentionPolicy.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = LoggedBackupPlan_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.backupSchedule = LoggedBackupPlan_Schedule.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.deactivated = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.backupConfig = LoggedBackupPlan_BackupConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggedBackupPlan {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      cluster: isSet(object.cluster) ? globalThis.String(object.cluster) : "",
      retentionPolicy: isSet(object.retentionPolicy)
        ? LoggedBackupPlan_RetentionPolicy.fromJSON(object.retentionPolicy)
        : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      backupSchedule: isSet(object.backupSchedule)
        ? LoggedBackupPlan_Schedule.fromJSON(object.backupSchedule)
        : undefined,
      deactivated: isSet(object.deactivated) ? globalThis.Boolean(object.deactivated) : false,
      backupConfig: isSet(object.backupConfig)
        ? LoggedBackupPlan_BackupConfig.fromJSON(object.backupConfig)
        : undefined,
    };
  },

  toJSON(message: LoggedBackupPlan): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.cluster !== "") {
      obj.cluster = message.cluster;
    }
    if (message.retentionPolicy !== undefined) {
      obj.retentionPolicy = LoggedBackupPlan_RetentionPolicy.toJSON(message.retentionPolicy);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.backupSchedule !== undefined) {
      obj.backupSchedule = LoggedBackupPlan_Schedule.toJSON(message.backupSchedule);
    }
    if (message.deactivated !== false) {
      obj.deactivated = message.deactivated;
    }
    if (message.backupConfig !== undefined) {
      obj.backupConfig = LoggedBackupPlan_BackupConfig.toJSON(message.backupConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<LoggedBackupPlan>): LoggedBackupPlan {
    return LoggedBackupPlan.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggedBackupPlan>): LoggedBackupPlan {
    const message = createBaseLoggedBackupPlan();
    message.description = object.description ?? "";
    message.cluster = object.cluster ?? "";
    message.retentionPolicy = (object.retentionPolicy !== undefined && object.retentionPolicy !== null)
      ? LoggedBackupPlan_RetentionPolicy.fromPartial(object.retentionPolicy)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.backupSchedule = (object.backupSchedule !== undefined && object.backupSchedule !== null)
      ? LoggedBackupPlan_Schedule.fromPartial(object.backupSchedule)
      : undefined;
    message.deactivated = object.deactivated ?? false;
    message.backupConfig = (object.backupConfig !== undefined && object.backupConfig !== null)
      ? LoggedBackupPlan_BackupConfig.fromPartial(object.backupConfig)
      : undefined;
    return message;
  },
};

function createBaseLoggedBackupPlan_RetentionPolicy(): LoggedBackupPlan_RetentionPolicy {
  return { backupDeleteLockDays: 0, backupRetainDays: 0, locked: false };
}

export const LoggedBackupPlan_RetentionPolicy: MessageFns<LoggedBackupPlan_RetentionPolicy> = {
  encode(message: LoggedBackupPlan_RetentionPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backupDeleteLockDays !== 0) {
      writer.uint32(8).int32(message.backupDeleteLockDays);
    }
    if (message.backupRetainDays !== 0) {
      writer.uint32(16).int32(message.backupRetainDays);
    }
    if (message.locked !== false) {
      writer.uint32(24).bool(message.locked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggedBackupPlan_RetentionPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggedBackupPlan_RetentionPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.backupDeleteLockDays = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.backupRetainDays = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.locked = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggedBackupPlan_RetentionPolicy {
    return {
      backupDeleteLockDays: isSet(object.backupDeleteLockDays) ? globalThis.Number(object.backupDeleteLockDays) : 0,
      backupRetainDays: isSet(object.backupRetainDays) ? globalThis.Number(object.backupRetainDays) : 0,
      locked: isSet(object.locked) ? globalThis.Boolean(object.locked) : false,
    };
  },

  toJSON(message: LoggedBackupPlan_RetentionPolicy): unknown {
    const obj: any = {};
    if (message.backupDeleteLockDays !== 0) {
      obj.backupDeleteLockDays = Math.round(message.backupDeleteLockDays);
    }
    if (message.backupRetainDays !== 0) {
      obj.backupRetainDays = Math.round(message.backupRetainDays);
    }
    if (message.locked !== false) {
      obj.locked = message.locked;
    }
    return obj;
  },

  create(base?: DeepPartial<LoggedBackupPlan_RetentionPolicy>): LoggedBackupPlan_RetentionPolicy {
    return LoggedBackupPlan_RetentionPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggedBackupPlan_RetentionPolicy>): LoggedBackupPlan_RetentionPolicy {
    const message = createBaseLoggedBackupPlan_RetentionPolicy();
    message.backupDeleteLockDays = object.backupDeleteLockDays ?? 0;
    message.backupRetainDays = object.backupRetainDays ?? 0;
    message.locked = object.locked ?? false;
    return message;
  },
};

function createBaseLoggedBackupPlan_Schedule(): LoggedBackupPlan_Schedule {
  return { cronSchedule: "", paused: false };
}

export const LoggedBackupPlan_Schedule: MessageFns<LoggedBackupPlan_Schedule> = {
  encode(message: LoggedBackupPlan_Schedule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cronSchedule !== "") {
      writer.uint32(10).string(message.cronSchedule);
    }
    if (message.paused !== false) {
      writer.uint32(16).bool(message.paused);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggedBackupPlan_Schedule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggedBackupPlan_Schedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cronSchedule = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.paused = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggedBackupPlan_Schedule {
    return {
      cronSchedule: isSet(object.cronSchedule) ? globalThis.String(object.cronSchedule) : "",
      paused: isSet(object.paused) ? globalThis.Boolean(object.paused) : false,
    };
  },

  toJSON(message: LoggedBackupPlan_Schedule): unknown {
    const obj: any = {};
    if (message.cronSchedule !== "") {
      obj.cronSchedule = message.cronSchedule;
    }
    if (message.paused !== false) {
      obj.paused = message.paused;
    }
    return obj;
  },

  create(base?: DeepPartial<LoggedBackupPlan_Schedule>): LoggedBackupPlan_Schedule {
    return LoggedBackupPlan_Schedule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggedBackupPlan_Schedule>): LoggedBackupPlan_Schedule {
    const message = createBaseLoggedBackupPlan_Schedule();
    message.cronSchedule = object.cronSchedule ?? "";
    message.paused = object.paused ?? false;
    return message;
  },
};

function createBaseLoggedBackupPlan_BackupConfig(): LoggedBackupPlan_BackupConfig {
  return {
    allNamespaces: undefined,
    selectedNamespaces: undefined,
    selectedApplications: undefined,
    includeVolumeData: false,
    includeSecrets: false,
    encryptionKey: undefined,
  };
}

export const LoggedBackupPlan_BackupConfig: MessageFns<LoggedBackupPlan_BackupConfig> = {
  encode(message: LoggedBackupPlan_BackupConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allNamespaces !== undefined) {
      writer.uint32(8).bool(message.allNamespaces);
    }
    if (message.selectedNamespaces !== undefined) {
      Namespaces.encode(message.selectedNamespaces, writer.uint32(18).fork()).join();
    }
    if (message.selectedApplications !== undefined) {
      NamespacedNames.encode(message.selectedApplications, writer.uint32(26).fork()).join();
    }
    if (message.includeVolumeData !== false) {
      writer.uint32(32).bool(message.includeVolumeData);
    }
    if (message.includeSecrets !== false) {
      writer.uint32(40).bool(message.includeSecrets);
    }
    if (message.encryptionKey !== undefined) {
      EncryptionKey.encode(message.encryptionKey, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggedBackupPlan_BackupConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggedBackupPlan_BackupConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.allNamespaces = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.selectedNamespaces = Namespaces.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.selectedApplications = NamespacedNames.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includeVolumeData = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includeSecrets = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.encryptionKey = EncryptionKey.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggedBackupPlan_BackupConfig {
    return {
      allNamespaces: isSet(object.allNamespaces) ? globalThis.Boolean(object.allNamespaces) : undefined,
      selectedNamespaces: isSet(object.selectedNamespaces) ? Namespaces.fromJSON(object.selectedNamespaces) : undefined,
      selectedApplications: isSet(object.selectedApplications)
        ? NamespacedNames.fromJSON(object.selectedApplications)
        : undefined,
      includeVolumeData: isSet(object.includeVolumeData) ? globalThis.Boolean(object.includeVolumeData) : false,
      includeSecrets: isSet(object.includeSecrets) ? globalThis.Boolean(object.includeSecrets) : false,
      encryptionKey: isSet(object.encryptionKey) ? EncryptionKey.fromJSON(object.encryptionKey) : undefined,
    };
  },

  toJSON(message: LoggedBackupPlan_BackupConfig): unknown {
    const obj: any = {};
    if (message.allNamespaces !== undefined) {
      obj.allNamespaces = message.allNamespaces;
    }
    if (message.selectedNamespaces !== undefined) {
      obj.selectedNamespaces = Namespaces.toJSON(message.selectedNamespaces);
    }
    if (message.selectedApplications !== undefined) {
      obj.selectedApplications = NamespacedNames.toJSON(message.selectedApplications);
    }
    if (message.includeVolumeData !== false) {
      obj.includeVolumeData = message.includeVolumeData;
    }
    if (message.includeSecrets !== false) {
      obj.includeSecrets = message.includeSecrets;
    }
    if (message.encryptionKey !== undefined) {
      obj.encryptionKey = EncryptionKey.toJSON(message.encryptionKey);
    }
    return obj;
  },

  create(base?: DeepPartial<LoggedBackupPlan_BackupConfig>): LoggedBackupPlan_BackupConfig {
    return LoggedBackupPlan_BackupConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggedBackupPlan_BackupConfig>): LoggedBackupPlan_BackupConfig {
    const message = createBaseLoggedBackupPlan_BackupConfig();
    message.allNamespaces = object.allNamespaces ?? undefined;
    message.selectedNamespaces = (object.selectedNamespaces !== undefined && object.selectedNamespaces !== null)
      ? Namespaces.fromPartial(object.selectedNamespaces)
      : undefined;
    message.selectedApplications = (object.selectedApplications !== undefined && object.selectedApplications !== null)
      ? NamespacedNames.fromPartial(object.selectedApplications)
      : undefined;
    message.includeVolumeData = object.includeVolumeData ?? false;
    message.includeSecrets = object.includeSecrets ?? false;
    message.encryptionKey = (object.encryptionKey !== undefined && object.encryptionKey !== null)
      ? EncryptionKey.fromPartial(object.encryptionKey)
      : undefined;
    return message;
  },
};

function createBaseLoggedBackupPlan_LabelsEntry(): LoggedBackupPlan_LabelsEntry {
  return { key: "", value: "" };
}

export const LoggedBackupPlan_LabelsEntry: MessageFns<LoggedBackupPlan_LabelsEntry> = {
  encode(message: LoggedBackupPlan_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggedBackupPlan_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggedBackupPlan_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggedBackupPlan_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LoggedBackupPlan_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<LoggedBackupPlan_LabelsEntry>): LoggedBackupPlan_LabelsEntry {
    return LoggedBackupPlan_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggedBackupPlan_LabelsEntry>): LoggedBackupPlan_LabelsEntry {
    const message = createBaseLoggedBackupPlan_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
