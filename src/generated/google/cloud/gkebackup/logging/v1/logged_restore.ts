// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkebackup/logging/v1/logged_restore.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.gkebackup.logging.v1";

/**
 * Restore as stored in Platform log. It's used to log the update details of a
 * updateRestore request, so only mutable and non-output_only fields are
 * included here..
 */
export interface LoggedRestore {
  /**
   * Full name of the Backup resource this Restore resource used to restore
   * from. Format: projects/* /locations/* /backupPlans/* /backups/*.
   */
  backup: string;
  /** GCP Labels. */
  labels: { [key: string]: string };
  /** User specified descriptive string for this Restore. */
  description: string;
  /** The current state of the Restore. */
  state: LoggedRestore_State;
  /** Human-readable description of why the Restore is in its current state. */
  stateReason: string;
}

/** Possible values for state of the Restore. */
export enum LoggedRestore_State {
  /** STATE_UNSPECIFIED - The Restore resource is in the process of being created. */
  STATE_UNSPECIFIED = 0,
  /**
   * CREATING - The Restore resource has been created and the associated RestoreJob
   * Kubernetes resource has been injected into target cluster.
   */
  CREATING = 1,
  /**
   * IN_PROGRESS - The gkebackup agent in the cluster has begun executing the restore
   * operation.
   */
  IN_PROGRESS = 2,
  /**
   * SUCCEEDED - The restore operation has completed successfully. Restored workloads may
   * not yet be operational.
   */
  SUCCEEDED = 3,
  /** FAILED - The restore operation has failed. */
  FAILED = 4,
  /** DELETING - This Restore resource is in the process of being deleted. */
  DELETING = 5,
  UNRECOGNIZED = -1,
}

export function loggedRestore_StateFromJSON(object: any): LoggedRestore_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return LoggedRestore_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return LoggedRestore_State.CREATING;
    case 2:
    case "IN_PROGRESS":
      return LoggedRestore_State.IN_PROGRESS;
    case 3:
    case "SUCCEEDED":
      return LoggedRestore_State.SUCCEEDED;
    case 4:
    case "FAILED":
      return LoggedRestore_State.FAILED;
    case 5:
    case "DELETING":
      return LoggedRestore_State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LoggedRestore_State.UNRECOGNIZED;
  }
}

export function loggedRestore_StateToJSON(object: LoggedRestore_State): string {
  switch (object) {
    case LoggedRestore_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case LoggedRestore_State.CREATING:
      return "CREATING";
    case LoggedRestore_State.IN_PROGRESS:
      return "IN_PROGRESS";
    case LoggedRestore_State.SUCCEEDED:
      return "SUCCEEDED";
    case LoggedRestore_State.FAILED:
      return "FAILED";
    case LoggedRestore_State.DELETING:
      return "DELETING";
    case LoggedRestore_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LoggedRestore_LabelsEntry {
  key: string;
  value: string;
}

function createBaseLoggedRestore(): LoggedRestore {
  return { backup: "", labels: {}, description: "", state: 0, stateReason: "" };
}

export const LoggedRestore: MessageFns<LoggedRestore> = {
  encode(message: LoggedRestore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backup !== "") {
      writer.uint32(10).string(message.backup);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      LoggedRestore_LabelsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.stateReason !== "") {
      writer.uint32(42).string(message.stateReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggedRestore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggedRestore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backup = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = LoggedRestore_LabelsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.labels[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.stateReason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggedRestore {
    return {
      backup: isSet(object.backup) ? globalThis.String(object.backup) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      state: isSet(object.state) ? loggedRestore_StateFromJSON(object.state) : 0,
      stateReason: isSet(object.stateReason) ? globalThis.String(object.stateReason) : "",
    };
  },

  toJSON(message: LoggedRestore): unknown {
    const obj: any = {};
    if (message.backup !== "") {
      obj.backup = message.backup;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.state !== 0) {
      obj.state = loggedRestore_StateToJSON(message.state);
    }
    if (message.stateReason !== "") {
      obj.stateReason = message.stateReason;
    }
    return obj;
  },

  create(base?: DeepPartial<LoggedRestore>): LoggedRestore {
    return LoggedRestore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggedRestore>): LoggedRestore {
    const message = createBaseLoggedRestore();
    message.backup = object.backup ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.state = object.state ?? 0;
    message.stateReason = object.stateReason ?? "";
    return message;
  },
};

function createBaseLoggedRestore_LabelsEntry(): LoggedRestore_LabelsEntry {
  return { key: "", value: "" };
}

export const LoggedRestore_LabelsEntry: MessageFns<LoggedRestore_LabelsEntry> = {
  encode(message: LoggedRestore_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoggedRestore_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoggedRestore_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoggedRestore_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: LoggedRestore_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<LoggedRestore_LabelsEntry>): LoggedRestore_LabelsEntry {
    return LoggedRestore_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoggedRestore_LabelsEntry>): LoggedRestore_LabelsEntry {
    const message = createBaseLoggedRestore_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
