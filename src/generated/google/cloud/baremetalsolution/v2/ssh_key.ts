// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/baremetalsolution/v2/ssh_key.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.baremetalsolution.v2";

/** An SSH key, used for authorizing with the interactive serial console feature. */
export interface SSHKey {
  /**
   * Output only. The name of this SSH key.
   * Currently, the only valid value for the location is "global".
   */
  name: string;
  /** The public SSH key. This must be in OpenSSH .authorized_keys format. */
  publicKey: string;
}

/** Message for listing the public SSH keys in a project. */
export interface ListSSHKeysRequest {
  /**
   * Required. The parent containing the SSH keys.
   * Currently, the only valid value for the location is "global".
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /** The next_page_token value returned from a previous List request, if any. */
  pageToken: string;
}

/** Message for response of ListSSHKeys. */
export interface ListSSHKeysResponse {
  /** The SSH keys registered in the project. */
  sshKeys: SSHKey[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Message for registering a public SSH key in a project. */
export interface CreateSSHKeyRequest {
  /** Required. The parent containing the SSH keys. */
  parent: string;
  /** Required. The SSH key to register. */
  sshKey:
    | SSHKey
    | undefined;
  /**
   * Required. The ID to use for the key, which will become the final component
   * of the key's resource name.
   *
   * This value must match the regex:
   *   [a-zA-Z0-9@.\-_]{1,64}
   */
  sshKeyId: string;
}

/** Message for deleting an SSH key from a project. */
export interface DeleteSSHKeyRequest {
  /**
   * Required. The name of the SSH key to delete.
   * Currently, the only valid value for the location is "global".
   */
  name: string;
}

function createBaseSSHKey(): SSHKey {
  return { name: "", publicKey: "" };
}

export const SSHKey: MessageFns<SSHKey> = {
  encode(message: SSHKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.publicKey !== "") {
      writer.uint32(18).string(message.publicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SSHKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSSHKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.publicKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SSHKey {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "",
    };
  },

  toJSON(message: SSHKey): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    return obj;
  },

  create(base?: DeepPartial<SSHKey>): SSHKey {
    return SSHKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SSHKey>): SSHKey {
    const message = createBaseSSHKey();
    message.name = object.name ?? "";
    message.publicKey = object.publicKey ?? "";
    return message;
  },
};

function createBaseListSSHKeysRequest(): ListSSHKeysRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListSSHKeysRequest: MessageFns<ListSSHKeysRequest> = {
  encode(message: ListSSHKeysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSSHKeysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSSHKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSSHKeysRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSSHKeysRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSSHKeysRequest>): ListSSHKeysRequest {
    return ListSSHKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSSHKeysRequest>): ListSSHKeysRequest {
    const message = createBaseListSSHKeysRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSSHKeysResponse(): ListSSHKeysResponse {
  return { sshKeys: [], nextPageToken: "" };
}

export const ListSSHKeysResponse: MessageFns<ListSSHKeysResponse> = {
  encode(message: ListSSHKeysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sshKeys) {
      SSHKey.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(722).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSSHKeysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSSHKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sshKeys.push(SSHKey.decode(reader, reader.uint32()));
          continue;
        case 90:
          if (tag !== 722) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSSHKeysResponse {
    return {
      sshKeys: globalThis.Array.isArray(object?.sshKeys) ? object.sshKeys.map((e: any) => SSHKey.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSSHKeysResponse): unknown {
    const obj: any = {};
    if (message.sshKeys?.length) {
      obj.sshKeys = message.sshKeys.map((e) => SSHKey.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSSHKeysResponse>): ListSSHKeysResponse {
    return ListSSHKeysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSSHKeysResponse>): ListSSHKeysResponse {
    const message = createBaseListSSHKeysResponse();
    message.sshKeys = object.sshKeys?.map((e) => SSHKey.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateSSHKeyRequest(): CreateSSHKeyRequest {
  return { parent: "", sshKey: undefined, sshKeyId: "" };
}

export const CreateSSHKeyRequest: MessageFns<CreateSSHKeyRequest> = {
  encode(message: CreateSSHKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.sshKey !== undefined) {
      SSHKey.encode(message.sshKey, writer.uint32(18).fork()).join();
    }
    if (message.sshKeyId !== "") {
      writer.uint32(26).string(message.sshKeyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSSHKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSSHKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sshKey = SSHKey.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sshKeyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSSHKeyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      sshKey: isSet(object.sshKey) ? SSHKey.fromJSON(object.sshKey) : undefined,
      sshKeyId: isSet(object.sshKeyId) ? globalThis.String(object.sshKeyId) : "",
    };
  },

  toJSON(message: CreateSSHKeyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.sshKey !== undefined) {
      obj.sshKey = SSHKey.toJSON(message.sshKey);
    }
    if (message.sshKeyId !== "") {
      obj.sshKeyId = message.sshKeyId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSSHKeyRequest>): CreateSSHKeyRequest {
    return CreateSSHKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSSHKeyRequest>): CreateSSHKeyRequest {
    const message = createBaseCreateSSHKeyRequest();
    message.parent = object.parent ?? "";
    message.sshKey = (object.sshKey !== undefined && object.sshKey !== null)
      ? SSHKey.fromPartial(object.sshKey)
      : undefined;
    message.sshKeyId = object.sshKeyId ?? "";
    return message;
  },
};

function createBaseDeleteSSHKeyRequest(): DeleteSSHKeyRequest {
  return { name: "" };
}

export const DeleteSSHKeyRequest: MessageFns<DeleteSSHKeyRequest> = {
  encode(message: DeleteSSHKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSSHKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSSHKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSSHKeyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSSHKeyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSSHKeyRequest>): DeleteSSHKeyRequest {
    return DeleteSSHKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSSHKeyRequest>): DeleteSSHKeyRequest {
    const message = createBaseDeleteSSHKeyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
