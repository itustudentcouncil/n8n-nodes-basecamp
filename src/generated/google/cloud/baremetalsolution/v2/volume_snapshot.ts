// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/baremetalsolution/v2/volume_snapshot.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.baremetalsolution.v2";

/** A snapshot of a volume. Only boot volumes can have snapshots. */
export interface VolumeSnapshot {
  /** The name of the snapshot. */
  name: string;
  /** Output only. An identifier for the snapshot, generated by the backend. */
  id: string;
  /** The description of the snapshot. */
  description: string;
  /** Output only. The creation time of the snapshot. */
  createTime:
    | Date
    | undefined;
  /** Output only. The name of the volume which this snapshot belongs to. */
  storageVolume: string;
  /**
   * Output only. The type of the snapshot which indicates whether it was
   * scheduled or manual/ad-hoc.
   */
  type: VolumeSnapshot_SnapshotType;
}

/** Represents the type of a snapshot. */
export enum VolumeSnapshot_SnapshotType {
  /** SNAPSHOT_TYPE_UNSPECIFIED - Type is not specified. */
  SNAPSHOT_TYPE_UNSPECIFIED = 0,
  /** AD_HOC - Snapshot was taken manually by user. */
  AD_HOC = 1,
  /** SCHEDULED - Snapshot was taken automatically as a part of a snapshot schedule. */
  SCHEDULED = 2,
  UNRECOGNIZED = -1,
}

export function volumeSnapshot_SnapshotTypeFromJSON(object: any): VolumeSnapshot_SnapshotType {
  switch (object) {
    case 0:
    case "SNAPSHOT_TYPE_UNSPECIFIED":
      return VolumeSnapshot_SnapshotType.SNAPSHOT_TYPE_UNSPECIFIED;
    case 1:
    case "AD_HOC":
      return VolumeSnapshot_SnapshotType.AD_HOC;
    case 2:
    case "SCHEDULED":
      return VolumeSnapshot_SnapshotType.SCHEDULED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VolumeSnapshot_SnapshotType.UNRECOGNIZED;
  }
}

export function volumeSnapshot_SnapshotTypeToJSON(object: VolumeSnapshot_SnapshotType): string {
  switch (object) {
    case VolumeSnapshot_SnapshotType.SNAPSHOT_TYPE_UNSPECIFIED:
      return "SNAPSHOT_TYPE_UNSPECIFIED";
    case VolumeSnapshot_SnapshotType.AD_HOC:
      return "AD_HOC";
    case VolumeSnapshot_SnapshotType.SCHEDULED:
      return "SCHEDULED";
    case VolumeSnapshot_SnapshotType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Message for requesting volume snapshot information. */
export interface GetVolumeSnapshotRequest {
  /** Required. The name of the snapshot. */
  name: string;
}

/** Message for requesting a list of volume snapshots. */
export interface ListVolumeSnapshotsRequest {
  /** Required. Parent value for ListVolumesRequest. */
  parent: string;
  /**
   * Requested page size. The server might return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results from the server. */
  pageToken: string;
}

/** Response message containing the list of volume snapshots. */
export interface ListVolumeSnapshotsResponse {
  /** The list of snapshots. */
  volumeSnapshots: VolumeSnapshot[];
  /** A token identifying a page of results from the server. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for deleting named Volume snapshot. */
export interface DeleteVolumeSnapshotRequest {
  /** Required. The name of the snapshot to delete. */
  name: string;
}

/** Message for creating a volume snapshot. */
export interface CreateVolumeSnapshotRequest {
  /** Required. The volume to snapshot. */
  parent: string;
  /** Required. The snapshot to create. */
  volumeSnapshot: VolumeSnapshot | undefined;
}

/** Message for restoring a volume snapshot. */
export interface RestoreVolumeSnapshotRequest {
  /**
   * Required. Name of the snapshot which will be used to restore its parent
   * volume.
   */
  volumeSnapshot: string;
}

function createBaseVolumeSnapshot(): VolumeSnapshot {
  return { name: "", id: "", description: "", createTime: undefined, storageVolume: "", type: 0 };
}

export const VolumeSnapshot: MessageFns<VolumeSnapshot> = {
  encode(message: VolumeSnapshot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(50).string(message.id);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.storageVolume !== "") {
      writer.uint32(42).string(message.storageVolume);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VolumeSnapshot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVolumeSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.storageVolume = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VolumeSnapshot {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      storageVolume: isSet(object.storageVolume) ? globalThis.String(object.storageVolume) : "",
      type: isSet(object.type) ? volumeSnapshot_SnapshotTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: VolumeSnapshot): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.storageVolume !== "") {
      obj.storageVolume = message.storageVolume;
    }
    if (message.type !== 0) {
      obj.type = volumeSnapshot_SnapshotTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<VolumeSnapshot>): VolumeSnapshot {
    return VolumeSnapshot.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VolumeSnapshot>): VolumeSnapshot {
    const message = createBaseVolumeSnapshot();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.storageVolume = object.storageVolume ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseGetVolumeSnapshotRequest(): GetVolumeSnapshotRequest {
  return { name: "" };
}

export const GetVolumeSnapshotRequest: MessageFns<GetVolumeSnapshotRequest> = {
  encode(message: GetVolumeSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVolumeSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVolumeSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVolumeSnapshotRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVolumeSnapshotRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVolumeSnapshotRequest>): GetVolumeSnapshotRequest {
    return GetVolumeSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVolumeSnapshotRequest>): GetVolumeSnapshotRequest {
    const message = createBaseGetVolumeSnapshotRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListVolumeSnapshotsRequest(): ListVolumeSnapshotsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListVolumeSnapshotsRequest: MessageFns<ListVolumeSnapshotsRequest> = {
  encode(message: ListVolumeSnapshotsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVolumeSnapshotsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVolumeSnapshotsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVolumeSnapshotsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListVolumeSnapshotsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVolumeSnapshotsRequest>): ListVolumeSnapshotsRequest {
    return ListVolumeSnapshotsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVolumeSnapshotsRequest>): ListVolumeSnapshotsRequest {
    const message = createBaseListVolumeSnapshotsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListVolumeSnapshotsResponse(): ListVolumeSnapshotsResponse {
  return { volumeSnapshots: [], nextPageToken: "", unreachable: [] };
}

export const ListVolumeSnapshotsResponse: MessageFns<ListVolumeSnapshotsResponse> = {
  encode(message: ListVolumeSnapshotsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.volumeSnapshots) {
      VolumeSnapshot.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVolumeSnapshotsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVolumeSnapshotsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.volumeSnapshots.push(VolumeSnapshot.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVolumeSnapshotsResponse {
    return {
      volumeSnapshots: globalThis.Array.isArray(object?.volumeSnapshots)
        ? object.volumeSnapshots.map((e: any) => VolumeSnapshot.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListVolumeSnapshotsResponse): unknown {
    const obj: any = {};
    if (message.volumeSnapshots?.length) {
      obj.volumeSnapshots = message.volumeSnapshots.map((e) => VolumeSnapshot.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVolumeSnapshotsResponse>): ListVolumeSnapshotsResponse {
    return ListVolumeSnapshotsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVolumeSnapshotsResponse>): ListVolumeSnapshotsResponse {
    const message = createBaseListVolumeSnapshotsResponse();
    message.volumeSnapshots = object.volumeSnapshots?.map((e) => VolumeSnapshot.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteVolumeSnapshotRequest(): DeleteVolumeSnapshotRequest {
  return { name: "" };
}

export const DeleteVolumeSnapshotRequest: MessageFns<DeleteVolumeSnapshotRequest> = {
  encode(message: DeleteVolumeSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteVolumeSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteVolumeSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteVolumeSnapshotRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteVolumeSnapshotRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteVolumeSnapshotRequest>): DeleteVolumeSnapshotRequest {
    return DeleteVolumeSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteVolumeSnapshotRequest>): DeleteVolumeSnapshotRequest {
    const message = createBaseDeleteVolumeSnapshotRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateVolumeSnapshotRequest(): CreateVolumeSnapshotRequest {
  return { parent: "", volumeSnapshot: undefined };
}

export const CreateVolumeSnapshotRequest: MessageFns<CreateVolumeSnapshotRequest> = {
  encode(message: CreateVolumeSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.volumeSnapshot !== undefined) {
      VolumeSnapshot.encode(message.volumeSnapshot, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVolumeSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVolumeSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.volumeSnapshot = VolumeSnapshot.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVolumeSnapshotRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      volumeSnapshot: isSet(object.volumeSnapshot) ? VolumeSnapshot.fromJSON(object.volumeSnapshot) : undefined,
    };
  },

  toJSON(message: CreateVolumeSnapshotRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.volumeSnapshot !== undefined) {
      obj.volumeSnapshot = VolumeSnapshot.toJSON(message.volumeSnapshot);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVolumeSnapshotRequest>): CreateVolumeSnapshotRequest {
    return CreateVolumeSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVolumeSnapshotRequest>): CreateVolumeSnapshotRequest {
    const message = createBaseCreateVolumeSnapshotRequest();
    message.parent = object.parent ?? "";
    message.volumeSnapshot = (object.volumeSnapshot !== undefined && object.volumeSnapshot !== null)
      ? VolumeSnapshot.fromPartial(object.volumeSnapshot)
      : undefined;
    return message;
  },
};

function createBaseRestoreVolumeSnapshotRequest(): RestoreVolumeSnapshotRequest {
  return { volumeSnapshot: "" };
}

export const RestoreVolumeSnapshotRequest: MessageFns<RestoreVolumeSnapshotRequest> = {
  encode(message: RestoreVolumeSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.volumeSnapshot !== "") {
      writer.uint32(10).string(message.volumeSnapshot);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreVolumeSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreVolumeSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.volumeSnapshot = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreVolumeSnapshotRequest {
    return { volumeSnapshot: isSet(object.volumeSnapshot) ? globalThis.String(object.volumeSnapshot) : "" };
  },

  toJSON(message: RestoreVolumeSnapshotRequest): unknown {
    const obj: any = {};
    if (message.volumeSnapshot !== "") {
      obj.volumeSnapshot = message.volumeSnapshot;
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreVolumeSnapshotRequest>): RestoreVolumeSnapshotRequest {
    return RestoreVolumeSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreVolumeSnapshotRequest>): RestoreVolumeSnapshotRequest {
    const message = createBaseRestoreVolumeSnapshotRequest();
    message.volumeSnapshot = object.volumeSnapshot ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
