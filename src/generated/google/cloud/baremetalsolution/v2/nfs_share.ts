// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/baremetalsolution/v2/nfs_share.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";

export const protobufPackage = "google.cloud.baremetalsolution.v2";

/** An NFS share. */
export interface NfsShare {
  /** Immutable. The name of the NFS share. */
  name: string;
  /**
   * Output only. An identifier for the NFS share, generated by the backend.
   * This field will be deprecated in the future, use `id` instead.
   */
  nfsShareId: string;
  /**
   * Output only. An identifier for the NFS share, generated by the backend.
   * This is the same value as nfs_share_id and will replace it in the future.
   */
  id: string;
  /** Output only. The state of the NFS share. */
  state: NfsShare_State;
  /**
   * Output only. The underlying volume of the share. Created automatically
   * during provisioning.
   */
  volume: string;
  /** List of allowed access points. */
  allowedClients: NfsShare_AllowedClient[];
  /** Labels as key value pairs. */
  labels: { [key: string]: string };
  /** The requested size, in GiB. */
  requestedSizeGib: Long;
  /** Immutable. The storage type of the underlying volume. */
  storageType: NfsShare_StorageType;
}

/** The possible states for this NFS share. */
export enum NfsShare_State {
  /** STATE_UNSPECIFIED - The share is in an unknown state. */
  STATE_UNSPECIFIED = 0,
  /** PROVISIONED - The share has been provisioned. */
  PROVISIONED = 1,
  /** CREATING - The NFS Share is being created. */
  CREATING = 2,
  /** UPDATING - The NFS Share is being updated. */
  UPDATING = 3,
  /** DELETING - The NFS Share has been requested to be deleted. */
  DELETING = 4,
  UNRECOGNIZED = -1,
}

export function nfsShare_StateFromJSON(object: any): NfsShare_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return NfsShare_State.STATE_UNSPECIFIED;
    case 1:
    case "PROVISIONED":
      return NfsShare_State.PROVISIONED;
    case 2:
    case "CREATING":
      return NfsShare_State.CREATING;
    case 3:
    case "UPDATING":
      return NfsShare_State.UPDATING;
    case 4:
    case "DELETING":
      return NfsShare_State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NfsShare_State.UNRECOGNIZED;
  }
}

export function nfsShare_StateToJSON(object: NfsShare_State): string {
  switch (object) {
    case NfsShare_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case NfsShare_State.PROVISIONED:
      return "PROVISIONED";
    case NfsShare_State.CREATING:
      return "CREATING";
    case NfsShare_State.UPDATING:
      return "UPDATING";
    case NfsShare_State.DELETING:
      return "DELETING";
    case NfsShare_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The possible mount permissions. */
export enum NfsShare_MountPermissions {
  /** MOUNT_PERMISSIONS_UNSPECIFIED - Permissions were not specified. */
  MOUNT_PERMISSIONS_UNSPECIFIED = 0,
  /** READ - NFS share can be mount with read-only permissions. */
  READ = 1,
  /** READ_WRITE - NFS share can be mount with read-write permissions. */
  READ_WRITE = 2,
  UNRECOGNIZED = -1,
}

export function nfsShare_MountPermissionsFromJSON(object: any): NfsShare_MountPermissions {
  switch (object) {
    case 0:
    case "MOUNT_PERMISSIONS_UNSPECIFIED":
      return NfsShare_MountPermissions.MOUNT_PERMISSIONS_UNSPECIFIED;
    case 1:
    case "READ":
      return NfsShare_MountPermissions.READ;
    case 2:
    case "READ_WRITE":
      return NfsShare_MountPermissions.READ_WRITE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NfsShare_MountPermissions.UNRECOGNIZED;
  }
}

export function nfsShare_MountPermissionsToJSON(object: NfsShare_MountPermissions): string {
  switch (object) {
    case NfsShare_MountPermissions.MOUNT_PERMISSIONS_UNSPECIFIED:
      return "MOUNT_PERMISSIONS_UNSPECIFIED";
    case NfsShare_MountPermissions.READ:
      return "READ";
    case NfsShare_MountPermissions.READ_WRITE:
      return "READ_WRITE";
    case NfsShare_MountPermissions.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The storage type for a volume. */
export enum NfsShare_StorageType {
  /** STORAGE_TYPE_UNSPECIFIED - The storage type for this volume is unknown. */
  STORAGE_TYPE_UNSPECIFIED = 0,
  /** SSD - The storage type for this volume is SSD. */
  SSD = 1,
  /** HDD - This storage type for this volume is HDD. */
  HDD = 2,
  UNRECOGNIZED = -1,
}

export function nfsShare_StorageTypeFromJSON(object: any): NfsShare_StorageType {
  switch (object) {
    case 0:
    case "STORAGE_TYPE_UNSPECIFIED":
      return NfsShare_StorageType.STORAGE_TYPE_UNSPECIFIED;
    case 1:
    case "SSD":
      return NfsShare_StorageType.SSD;
    case 2:
    case "HDD":
      return NfsShare_StorageType.HDD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NfsShare_StorageType.UNRECOGNIZED;
  }
}

export function nfsShare_StorageTypeToJSON(object: NfsShare_StorageType): string {
  switch (object) {
    case NfsShare_StorageType.STORAGE_TYPE_UNSPECIFIED:
      return "STORAGE_TYPE_UNSPECIFIED";
    case NfsShare_StorageType.SSD:
      return "SSD";
    case NfsShare_StorageType.HDD:
      return "HDD";
    case NfsShare_StorageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents an 'access point' for the share. */
export interface NfsShare_AllowedClient {
  /** The network the access point sits on. */
  network: string;
  /**
   * Output only. The IP address of the share on this network. Assigned
   * automatically during provisioning based on the network's services_cidr.
   */
  shareIp: string;
  /** The subnet of IP addresses permitted to access the share. */
  allowedClientsCidr: string;
  /** Mount permissions. */
  mountPermissions: NfsShare_MountPermissions;
  /** Allow dev flag.  Which controls whether to allow creation of devices. */
  allowDev: boolean;
  /** Allow the setuid flag. */
  allowSuid: boolean;
  /**
   * Disable root squashing, which is a feature of NFS.
   * Root squash is a special mapping of the remote superuser (root) identity
   * when using identity authentication.
   */
  noRootSquash: boolean;
  /**
   * Output only. The path to access NFS, in format shareIP:/InstanceID
   * InstanceID is the generated ID instead of customer provided name.
   * example like "10.0.0.0:/g123456789-nfs001"
   */
  nfsPath: string;
}

export interface NfsShare_LabelsEntry {
  key: string;
  value: string;
}

/** Message for requesting NFS share information. */
export interface GetNfsShareRequest {
  /** Required. Name of the resource. */
  name: string;
}

/** Message for requesting a list of NFS shares. */
export interface ListNfsSharesRequest {
  /** Required. Parent value for ListNfsSharesRequest. */
  parent: string;
  /**
   * Requested page size. The server might return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results from the server. */
  pageToken: string;
  /** List filter. */
  filter: string;
}

/** Response message containing the list of NFS shares. */
export interface ListNfsSharesResponse {
  /** The list of NFS shares. */
  nfsShares: NfsShare[];
  /** A token identifying a page of results from the server. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message requesting to updating an NFS share. */
export interface UpdateNfsShareRequest {
  /**
   * Required. The NFS share to update.
   *
   * The `name` field is used to identify the NFS share to update.
   * Format: projects/{project}/locations/{location}/nfsShares/{nfs_share}
   */
  nfsShare:
    | NfsShare
    | undefined;
  /**
   * The list of fields to update.
   * The only currently supported fields are:
   *   `labels`
   *   `allowed_clients`
   */
  updateMask: string[] | undefined;
}

/** Message requesting rename of a server. */
export interface RenameNfsShareRequest {
  /**
   * Required. The `name` field is used to identify the nfsshare.
   * Format: projects/{project}/locations/{location}/nfsshares/{nfsshare}
   */
  name: string;
  /** Required. The new `id` of the nfsshare. */
  newNfsshareId: string;
}

/** Message for creating an NFS share. */
export interface CreateNfsShareRequest {
  /** Required. The parent project and location. */
  parent: string;
  /** Required. The NfsShare to create. */
  nfsShare: NfsShare | undefined;
}

/** Message for deleting an NFS share. */
export interface DeleteNfsShareRequest {
  /** Required. The name of the NFS share to delete. */
  name: string;
}

function createBaseNfsShare(): NfsShare {
  return {
    name: "",
    nfsShareId: "",
    id: "",
    state: 0,
    volume: "",
    allowedClients: [],
    labels: {},
    requestedSizeGib: Long.ZERO,
    storageType: 0,
  };
}

export const NfsShare: MessageFns<NfsShare> = {
  encode(message: NfsShare, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.nfsShareId !== "") {
      writer.uint32(18).string(message.nfsShareId);
    }
    if (message.id !== "") {
      writer.uint32(66).string(message.id);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.volume !== "") {
      writer.uint32(34).string(message.volume);
    }
    for (const v of message.allowedClients) {
      NfsShare_AllowedClient.encode(v!, writer.uint32(42).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      NfsShare_LabelsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (!message.requestedSizeGib.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.requestedSizeGib.toString());
    }
    if (message.storageType !== 0) {
      writer.uint32(72).int32(message.storageType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NfsShare {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNfsShare();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nfsShareId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.volume = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.allowedClients.push(NfsShare_AllowedClient.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = NfsShare_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.requestedSizeGib = Long.fromString(reader.int64().toString());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.storageType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NfsShare {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      nfsShareId: isSet(object.nfsShareId) ? globalThis.String(object.nfsShareId) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      state: isSet(object.state) ? nfsShare_StateFromJSON(object.state) : 0,
      volume: isSet(object.volume) ? globalThis.String(object.volume) : "",
      allowedClients: globalThis.Array.isArray(object?.allowedClients)
        ? object.allowedClients.map((e: any) => NfsShare_AllowedClient.fromJSON(e))
        : [],
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      requestedSizeGib: isSet(object.requestedSizeGib) ? Long.fromValue(object.requestedSizeGib) : Long.ZERO,
      storageType: isSet(object.storageType) ? nfsShare_StorageTypeFromJSON(object.storageType) : 0,
    };
  },

  toJSON(message: NfsShare): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.nfsShareId !== "") {
      obj.nfsShareId = message.nfsShareId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.state !== 0) {
      obj.state = nfsShare_StateToJSON(message.state);
    }
    if (message.volume !== "") {
      obj.volume = message.volume;
    }
    if (message.allowedClients?.length) {
      obj.allowedClients = message.allowedClients.map((e) => NfsShare_AllowedClient.toJSON(e));
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (!message.requestedSizeGib.equals(Long.ZERO)) {
      obj.requestedSizeGib = (message.requestedSizeGib || Long.ZERO).toString();
    }
    if (message.storageType !== 0) {
      obj.storageType = nfsShare_StorageTypeToJSON(message.storageType);
    }
    return obj;
  },

  create(base?: DeepPartial<NfsShare>): NfsShare {
    return NfsShare.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NfsShare>): NfsShare {
    const message = createBaseNfsShare();
    message.name = object.name ?? "";
    message.nfsShareId = object.nfsShareId ?? "";
    message.id = object.id ?? "";
    message.state = object.state ?? 0;
    message.volume = object.volume ?? "";
    message.allowedClients = object.allowedClients?.map((e) => NfsShare_AllowedClient.fromPartial(e)) || [];
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.requestedSizeGib = (object.requestedSizeGib !== undefined && object.requestedSizeGib !== null)
      ? Long.fromValue(object.requestedSizeGib)
      : Long.ZERO;
    message.storageType = object.storageType ?? 0;
    return message;
  },
};

function createBaseNfsShare_AllowedClient(): NfsShare_AllowedClient {
  return {
    network: "",
    shareIp: "",
    allowedClientsCidr: "",
    mountPermissions: 0,
    allowDev: false,
    allowSuid: false,
    noRootSquash: false,
    nfsPath: "",
  };
}

export const NfsShare_AllowedClient: MessageFns<NfsShare_AllowedClient> = {
  encode(message: NfsShare_AllowedClient, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.network !== "") {
      writer.uint32(10).string(message.network);
    }
    if (message.shareIp !== "") {
      writer.uint32(18).string(message.shareIp);
    }
    if (message.allowedClientsCidr !== "") {
      writer.uint32(26).string(message.allowedClientsCidr);
    }
    if (message.mountPermissions !== 0) {
      writer.uint32(32).int32(message.mountPermissions);
    }
    if (message.allowDev !== false) {
      writer.uint32(40).bool(message.allowDev);
    }
    if (message.allowSuid !== false) {
      writer.uint32(48).bool(message.allowSuid);
    }
    if (message.noRootSquash !== false) {
      writer.uint32(56).bool(message.noRootSquash);
    }
    if (message.nfsPath !== "") {
      writer.uint32(66).string(message.nfsPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NfsShare_AllowedClient {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNfsShare_AllowedClient();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.network = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.shareIp = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.allowedClientsCidr = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.mountPermissions = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.allowDev = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.allowSuid = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.noRootSquash = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.nfsPath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NfsShare_AllowedClient {
    return {
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      shareIp: isSet(object.shareIp) ? globalThis.String(object.shareIp) : "",
      allowedClientsCidr: isSet(object.allowedClientsCidr) ? globalThis.String(object.allowedClientsCidr) : "",
      mountPermissions: isSet(object.mountPermissions) ? nfsShare_MountPermissionsFromJSON(object.mountPermissions) : 0,
      allowDev: isSet(object.allowDev) ? globalThis.Boolean(object.allowDev) : false,
      allowSuid: isSet(object.allowSuid) ? globalThis.Boolean(object.allowSuid) : false,
      noRootSquash: isSet(object.noRootSquash) ? globalThis.Boolean(object.noRootSquash) : false,
      nfsPath: isSet(object.nfsPath) ? globalThis.String(object.nfsPath) : "",
    };
  },

  toJSON(message: NfsShare_AllowedClient): unknown {
    const obj: any = {};
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.shareIp !== "") {
      obj.shareIp = message.shareIp;
    }
    if (message.allowedClientsCidr !== "") {
      obj.allowedClientsCidr = message.allowedClientsCidr;
    }
    if (message.mountPermissions !== 0) {
      obj.mountPermissions = nfsShare_MountPermissionsToJSON(message.mountPermissions);
    }
    if (message.allowDev !== false) {
      obj.allowDev = message.allowDev;
    }
    if (message.allowSuid !== false) {
      obj.allowSuid = message.allowSuid;
    }
    if (message.noRootSquash !== false) {
      obj.noRootSquash = message.noRootSquash;
    }
    if (message.nfsPath !== "") {
      obj.nfsPath = message.nfsPath;
    }
    return obj;
  },

  create(base?: DeepPartial<NfsShare_AllowedClient>): NfsShare_AllowedClient {
    return NfsShare_AllowedClient.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NfsShare_AllowedClient>): NfsShare_AllowedClient {
    const message = createBaseNfsShare_AllowedClient();
    message.network = object.network ?? "";
    message.shareIp = object.shareIp ?? "";
    message.allowedClientsCidr = object.allowedClientsCidr ?? "";
    message.mountPermissions = object.mountPermissions ?? 0;
    message.allowDev = object.allowDev ?? false;
    message.allowSuid = object.allowSuid ?? false;
    message.noRootSquash = object.noRootSquash ?? false;
    message.nfsPath = object.nfsPath ?? "";
    return message;
  },
};

function createBaseNfsShare_LabelsEntry(): NfsShare_LabelsEntry {
  return { key: "", value: "" };
}

export const NfsShare_LabelsEntry: MessageFns<NfsShare_LabelsEntry> = {
  encode(message: NfsShare_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NfsShare_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNfsShare_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NfsShare_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: NfsShare_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<NfsShare_LabelsEntry>): NfsShare_LabelsEntry {
    return NfsShare_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NfsShare_LabelsEntry>): NfsShare_LabelsEntry {
    const message = createBaseNfsShare_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetNfsShareRequest(): GetNfsShareRequest {
  return { name: "" };
}

export const GetNfsShareRequest: MessageFns<GetNfsShareRequest> = {
  encode(message: GetNfsShareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNfsShareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNfsShareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNfsShareRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNfsShareRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNfsShareRequest>): GetNfsShareRequest {
    return GetNfsShareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNfsShareRequest>): GetNfsShareRequest {
    const message = createBaseGetNfsShareRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListNfsSharesRequest(): ListNfsSharesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListNfsSharesRequest: MessageFns<ListNfsSharesRequest> = {
  encode(message: ListNfsSharesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNfsSharesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNfsSharesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNfsSharesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListNfsSharesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNfsSharesRequest>): ListNfsSharesRequest {
    return ListNfsSharesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNfsSharesRequest>): ListNfsSharesRequest {
    const message = createBaseListNfsSharesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListNfsSharesResponse(): ListNfsSharesResponse {
  return { nfsShares: [], nextPageToken: "", unreachable: [] };
}

export const ListNfsSharesResponse: MessageFns<ListNfsSharesResponse> = {
  encode(message: ListNfsSharesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nfsShares) {
      NfsShare.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNfsSharesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNfsSharesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nfsShares.push(NfsShare.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNfsSharesResponse {
    return {
      nfsShares: globalThis.Array.isArray(object?.nfsShares)
        ? object.nfsShares.map((e: any) => NfsShare.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListNfsSharesResponse): unknown {
    const obj: any = {};
    if (message.nfsShares?.length) {
      obj.nfsShares = message.nfsShares.map((e) => NfsShare.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNfsSharesResponse>): ListNfsSharesResponse {
    return ListNfsSharesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNfsSharesResponse>): ListNfsSharesResponse {
    const message = createBaseListNfsSharesResponse();
    message.nfsShares = object.nfsShares?.map((e) => NfsShare.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateNfsShareRequest(): UpdateNfsShareRequest {
  return { nfsShare: undefined, updateMask: undefined };
}

export const UpdateNfsShareRequest: MessageFns<UpdateNfsShareRequest> = {
  encode(message: UpdateNfsShareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nfsShare !== undefined) {
      NfsShare.encode(message.nfsShare, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNfsShareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNfsShareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nfsShare = NfsShare.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNfsShareRequest {
    return {
      nfsShare: isSet(object.nfsShare) ? NfsShare.fromJSON(object.nfsShare) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateNfsShareRequest): unknown {
    const obj: any = {};
    if (message.nfsShare !== undefined) {
      obj.nfsShare = NfsShare.toJSON(message.nfsShare);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateNfsShareRequest>): UpdateNfsShareRequest {
    return UpdateNfsShareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateNfsShareRequest>): UpdateNfsShareRequest {
    const message = createBaseUpdateNfsShareRequest();
    message.nfsShare = (object.nfsShare !== undefined && object.nfsShare !== null)
      ? NfsShare.fromPartial(object.nfsShare)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseRenameNfsShareRequest(): RenameNfsShareRequest {
  return { name: "", newNfsshareId: "" };
}

export const RenameNfsShareRequest: MessageFns<RenameNfsShareRequest> = {
  encode(message: RenameNfsShareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.newNfsshareId !== "") {
      writer.uint32(18).string(message.newNfsshareId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenameNfsShareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenameNfsShareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.newNfsshareId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenameNfsShareRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      newNfsshareId: isSet(object.newNfsshareId) ? globalThis.String(object.newNfsshareId) : "",
    };
  },

  toJSON(message: RenameNfsShareRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.newNfsshareId !== "") {
      obj.newNfsshareId = message.newNfsshareId;
    }
    return obj;
  },

  create(base?: DeepPartial<RenameNfsShareRequest>): RenameNfsShareRequest {
    return RenameNfsShareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RenameNfsShareRequest>): RenameNfsShareRequest {
    const message = createBaseRenameNfsShareRequest();
    message.name = object.name ?? "";
    message.newNfsshareId = object.newNfsshareId ?? "";
    return message;
  },
};

function createBaseCreateNfsShareRequest(): CreateNfsShareRequest {
  return { parent: "", nfsShare: undefined };
}

export const CreateNfsShareRequest: MessageFns<CreateNfsShareRequest> = {
  encode(message: CreateNfsShareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.nfsShare !== undefined) {
      NfsShare.encode(message.nfsShare, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNfsShareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNfsShareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nfsShare = NfsShare.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNfsShareRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      nfsShare: isSet(object.nfsShare) ? NfsShare.fromJSON(object.nfsShare) : undefined,
    };
  },

  toJSON(message: CreateNfsShareRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.nfsShare !== undefined) {
      obj.nfsShare = NfsShare.toJSON(message.nfsShare);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateNfsShareRequest>): CreateNfsShareRequest {
    return CreateNfsShareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateNfsShareRequest>): CreateNfsShareRequest {
    const message = createBaseCreateNfsShareRequest();
    message.parent = object.parent ?? "";
    message.nfsShare = (object.nfsShare !== undefined && object.nfsShare !== null)
      ? NfsShare.fromPartial(object.nfsShare)
      : undefined;
    return message;
  },
};

function createBaseDeleteNfsShareRequest(): DeleteNfsShareRequest {
  return { name: "" };
}

export const DeleteNfsShareRequest: MessageFns<DeleteNfsShareRequest> = {
  encode(message: DeleteNfsShareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNfsShareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNfsShareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNfsShareRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteNfsShareRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteNfsShareRequest>): DeleteNfsShareRequest {
    return DeleteNfsShareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteNfsShareRequest>): DeleteNfsShareRequest {
    const message = createBaseDeleteNfsShareRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
