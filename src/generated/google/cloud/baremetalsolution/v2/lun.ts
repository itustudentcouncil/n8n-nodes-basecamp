// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/baremetalsolution/v2/lun.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.baremetalsolution.v2";

/** A storage volume logical unit number (LUN). */
export interface Lun {
  /** Output only. The name of the LUN. */
  name: string;
  /** An identifier for the LUN, generated by the backend. */
  id: string;
  /** The state of this storage volume. */
  state: Lun_State;
  /** The size of this LUN, in gigabytes. */
  sizeGb: Long;
  /**
   * The LUN multiprotocol type ensures the characteristics of the LUN are
   * optimized for each operating system.
   */
  multiprotocolType: Lun_MultiprotocolType;
  /** Display the storage volume for this LUN. */
  storageVolume: string;
  /** Display if this LUN can be shared between multiple physical servers. */
  shareable: boolean;
  /** Display if this LUN is a boot LUN. */
  bootLun: boolean;
  /** The storage type for this LUN. */
  storageType: Lun_StorageType;
  /** The WWID for this LUN. */
  wwid: string;
  /**
   * Output only. Time after which LUN will be fully deleted.
   * It is filled only for LUNs in COOL_OFF state.
   */
  expireTime:
    | Date
    | undefined;
  /** Output only. Instances this Lun is attached to. */
  instances: string[];
}

/** The possible states for the LUN. */
export enum Lun_State {
  /** STATE_UNSPECIFIED - The LUN is in an unknown state. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The LUN is being created. */
  CREATING = 1,
  /** UPDATING - The LUN is being updated. */
  UPDATING = 2,
  /** READY - The LUN is ready for use. */
  READY = 3,
  /** DELETING - The LUN has been requested to be deleted. */
  DELETING = 4,
  /** COOL_OFF - The LUN is in cool off state. It will be deleted after `expire_time`. */
  COOL_OFF = 5,
  UNRECOGNIZED = -1,
}

export function lun_StateFromJSON(object: any): Lun_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Lun_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Lun_State.CREATING;
    case 2:
    case "UPDATING":
      return Lun_State.UPDATING;
    case 3:
    case "READY":
      return Lun_State.READY;
    case 4:
    case "DELETING":
      return Lun_State.DELETING;
    case 5:
    case "COOL_OFF":
      return Lun_State.COOL_OFF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Lun_State.UNRECOGNIZED;
  }
}

export function lun_StateToJSON(object: Lun_State): string {
  switch (object) {
    case Lun_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Lun_State.CREATING:
      return "CREATING";
    case Lun_State.UPDATING:
      return "UPDATING";
    case Lun_State.READY:
      return "READY";
    case Lun_State.DELETING:
      return "DELETING";
    case Lun_State.COOL_OFF:
      return "COOL_OFF";
    case Lun_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Display the operating systems present for the LUN multiprotocol type. */
export enum Lun_MultiprotocolType {
  /** MULTIPROTOCOL_TYPE_UNSPECIFIED - Server has no OS specified. */
  MULTIPROTOCOL_TYPE_UNSPECIFIED = 0,
  /** LINUX - Server with Linux OS. */
  LINUX = 1,
  UNRECOGNIZED = -1,
}

export function lun_MultiprotocolTypeFromJSON(object: any): Lun_MultiprotocolType {
  switch (object) {
    case 0:
    case "MULTIPROTOCOL_TYPE_UNSPECIFIED":
      return Lun_MultiprotocolType.MULTIPROTOCOL_TYPE_UNSPECIFIED;
    case 1:
    case "LINUX":
      return Lun_MultiprotocolType.LINUX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Lun_MultiprotocolType.UNRECOGNIZED;
  }
}

export function lun_MultiprotocolTypeToJSON(object: Lun_MultiprotocolType): string {
  switch (object) {
    case Lun_MultiprotocolType.MULTIPROTOCOL_TYPE_UNSPECIFIED:
      return "MULTIPROTOCOL_TYPE_UNSPECIFIED";
    case Lun_MultiprotocolType.LINUX:
      return "LINUX";
    case Lun_MultiprotocolType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The storage types for a LUN. */
export enum Lun_StorageType {
  /** STORAGE_TYPE_UNSPECIFIED - The storage type for this LUN is unknown. */
  STORAGE_TYPE_UNSPECIFIED = 0,
  /** SSD - This storage type for this LUN is SSD. */
  SSD = 1,
  /** HDD - This storage type for this LUN is HDD. */
  HDD = 2,
  UNRECOGNIZED = -1,
}

export function lun_StorageTypeFromJSON(object: any): Lun_StorageType {
  switch (object) {
    case 0:
    case "STORAGE_TYPE_UNSPECIFIED":
      return Lun_StorageType.STORAGE_TYPE_UNSPECIFIED;
    case 1:
    case "SSD":
      return Lun_StorageType.SSD;
    case 2:
    case "HDD":
      return Lun_StorageType.HDD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Lun_StorageType.UNRECOGNIZED;
  }
}

export function lun_StorageTypeToJSON(object: Lun_StorageType): string {
  switch (object) {
    case Lun_StorageType.STORAGE_TYPE_UNSPECIFIED:
      return "STORAGE_TYPE_UNSPECIFIED";
    case Lun_StorageType.SSD:
      return "SSD";
    case Lun_StorageType.HDD:
      return "HDD";
    case Lun_StorageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Message for requesting storage lun information. */
export interface GetLunRequest {
  /** Required. Name of the resource. */
  name: string;
}

/** Message for requesting a list of storage volume luns. */
export interface ListLunsRequest {
  /** Required. Parent value for ListLunsRequest. */
  parent: string;
  /**
   * Requested page size. The server might return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results from the server. */
  pageToken: string;
}

/** Response message containing the list of storage volume luns. */
export interface ListLunsResponse {
  /** The list of luns. */
  luns: Lun[];
  /** A token identifying a page of results from the server. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for skip lun cooloff and delete it. */
export interface EvictLunRequest {
  /** Required. The name of the lun. */
  name: string;
}

function createBaseLun(): Lun {
  return {
    name: "",
    id: "",
    state: 0,
    sizeGb: Long.ZERO,
    multiprotocolType: 0,
    storageVolume: "",
    shareable: false,
    bootLun: false,
    storageType: 0,
    wwid: "",
    expireTime: undefined,
    instances: [],
  };
}

export const Lun: MessageFns<Lun> = {
  encode(message: Lun, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(82).string(message.id);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (!message.sizeGb.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.sizeGb.toString());
    }
    if (message.multiprotocolType !== 0) {
      writer.uint32(32).int32(message.multiprotocolType);
    }
    if (message.storageVolume !== "") {
      writer.uint32(42).string(message.storageVolume);
    }
    if (message.shareable !== false) {
      writer.uint32(48).bool(message.shareable);
    }
    if (message.bootLun !== false) {
      writer.uint32(56).bool(message.bootLun);
    }
    if (message.storageType !== 0) {
      writer.uint32(64).int32(message.storageType);
    }
    if (message.wwid !== "") {
      writer.uint32(74).string(message.wwid);
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(90).fork()).join();
    }
    for (const v of message.instances) {
      writer.uint32(98).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lun {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLun();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sizeGb = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.multiprotocolType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.storageVolume = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.shareable = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.bootLun = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.storageType = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.wwid = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.instances.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lun {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      state: isSet(object.state) ? lun_StateFromJSON(object.state) : 0,
      sizeGb: isSet(object.sizeGb) ? Long.fromValue(object.sizeGb) : Long.ZERO,
      multiprotocolType: isSet(object.multiprotocolType) ? lun_MultiprotocolTypeFromJSON(object.multiprotocolType) : 0,
      storageVolume: isSet(object.storageVolume) ? globalThis.String(object.storageVolume) : "",
      shareable: isSet(object.shareable) ? globalThis.Boolean(object.shareable) : false,
      bootLun: isSet(object.bootLun) ? globalThis.Boolean(object.bootLun) : false,
      storageType: isSet(object.storageType) ? lun_StorageTypeFromJSON(object.storageType) : 0,
      wwid: isSet(object.wwid) ? globalThis.String(object.wwid) : "",
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      instances: globalThis.Array.isArray(object?.instances)
        ? object.instances.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Lun): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.state !== 0) {
      obj.state = lun_StateToJSON(message.state);
    }
    if (!message.sizeGb.equals(Long.ZERO)) {
      obj.sizeGb = (message.sizeGb || Long.ZERO).toString();
    }
    if (message.multiprotocolType !== 0) {
      obj.multiprotocolType = lun_MultiprotocolTypeToJSON(message.multiprotocolType);
    }
    if (message.storageVolume !== "") {
      obj.storageVolume = message.storageVolume;
    }
    if (message.shareable !== false) {
      obj.shareable = message.shareable;
    }
    if (message.bootLun !== false) {
      obj.bootLun = message.bootLun;
    }
    if (message.storageType !== 0) {
      obj.storageType = lun_StorageTypeToJSON(message.storageType);
    }
    if (message.wwid !== "") {
      obj.wwid = message.wwid;
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.instances?.length) {
      obj.instances = message.instances;
    }
    return obj;
  },

  create(base?: DeepPartial<Lun>): Lun {
    return Lun.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Lun>): Lun {
    const message = createBaseLun();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.state = object.state ?? 0;
    message.sizeGb = (object.sizeGb !== undefined && object.sizeGb !== null)
      ? Long.fromValue(object.sizeGb)
      : Long.ZERO;
    message.multiprotocolType = object.multiprotocolType ?? 0;
    message.storageVolume = object.storageVolume ?? "";
    message.shareable = object.shareable ?? false;
    message.bootLun = object.bootLun ?? false;
    message.storageType = object.storageType ?? 0;
    message.wwid = object.wwid ?? "";
    message.expireTime = object.expireTime ?? undefined;
    message.instances = object.instances?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetLunRequest(): GetLunRequest {
  return { name: "" };
}

export const GetLunRequest: MessageFns<GetLunRequest> = {
  encode(message: GetLunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLunRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetLunRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetLunRequest>): GetLunRequest {
    return GetLunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLunRequest>): GetLunRequest {
    const message = createBaseGetLunRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListLunsRequest(): ListLunsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListLunsRequest: MessageFns<ListLunsRequest> = {
  encode(message: ListLunsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLunsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLunsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLunsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListLunsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLunsRequest>): ListLunsRequest {
    return ListLunsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLunsRequest>): ListLunsRequest {
    const message = createBaseListLunsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListLunsResponse(): ListLunsResponse {
  return { luns: [], nextPageToken: "", unreachable: [] };
}

export const ListLunsResponse: MessageFns<ListLunsResponse> = {
  encode(message: ListLunsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.luns) {
      Lun.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLunsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLunsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.luns.push(Lun.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLunsResponse {
    return {
      luns: globalThis.Array.isArray(object?.luns) ? object.luns.map((e: any) => Lun.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListLunsResponse): unknown {
    const obj: any = {};
    if (message.luns?.length) {
      obj.luns = message.luns.map((e) => Lun.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLunsResponse>): ListLunsResponse {
    return ListLunsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLunsResponse>): ListLunsResponse {
    const message = createBaseListLunsResponse();
    message.luns = object.luns?.map((e) => Lun.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseEvictLunRequest(): EvictLunRequest {
  return { name: "" };
}

export const EvictLunRequest: MessageFns<EvictLunRequest> = {
  encode(message: EvictLunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvictLunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvictLunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvictLunRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: EvictLunRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<EvictLunRequest>): EvictLunRequest {
    return EvictLunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EvictLunRequest>): EvictLunRequest {
    const message = createBaseEvictLunRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
