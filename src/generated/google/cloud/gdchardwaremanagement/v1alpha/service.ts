// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gdchardwaremanagement/v1alpha/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ChangeLogEntry, Comment, Hardware, HardwareGroup, Order, Site, Sku, Zone } from "./resources.js";

export const protobufPackage = "google.cloud.gdchardwaremanagement.v1alpha";

/** A request to list orders. */
export interface ListOrdersRequest {
  /**
   * Required. The project and location to list orders in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160). */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** A list of orders. */
export interface ListOrdersResponse {
  /** The list of orders. */
  orders: Order[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** A request to get an order. */
export interface GetOrderRequest {
  /** Required. Name of the resource */
  name: string;
}

/** A request to create an order. */
export interface CreateOrderRequest {
  /**
   * Required. The project and location to create the order in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. ID used to uniquely identify the Order within its parent scope.
   * This field should contain at most 63 characters and must start with
   * lowercase characters.
   * Only lowercase characters, numbers and `-` are accepted.
   * The `-` character cannot be the first or the last one.
   * A system generated ID will be used if the field is not set.
   *
   * The order.name field in the request will be ignored.
   */
  orderId: string;
  /** Required. The order to create. */
  order:
    | Order
    | undefined;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to update an order. */
export interface UpdateOrderRequest {
  /**
   * Required. A mask to specify the fields in the Order to overwrite with this
   * update. The fields specified in the update_mask are relative to the order,
   * not the full request. A field will be overwritten if it is in the mask. If
   * you don't provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The order to update. */
  order:
    | Order
    | undefined;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to delete an order. */
export interface DeleteOrderRequest {
  /**
   * Required. The name of the order.
   * Format: `projects/{project}/locations/{location}/orders/{order}`
   */
  name: string;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
  /**
   * Optional. An option to delete any nested resources in the Order, such as a
   * HardwareGroup. If true, any nested resources for this Order will also be
   * deleted. Otherwise, the request will only succeed if the Order has no
   * nested resources.
   */
  force: boolean;
}

/** A request to submit an order. */
export interface SubmitOrderRequest {
  /**
   * Required. The name of the order.
   * Format: `projects/{project}/locations/{location}/orders/{order}`
   */
  name: string;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
  /**
   * Optional. Type of this request. If unset, the request type is assumed to be
   * `INFO_PENDING`.
   */
  type: SubmitOrderRequest_Type;
}

/** Valid types of submit order request. */
export enum SubmitOrderRequest_Type {
  /** TYPE_UNSPECIFIED - Request type is unspecified. This should not be used. */
  TYPE_UNSPECIFIED = 0,
  /**
   * INFO_PENDING - Use this request type to submit your order and initiate conversation with
   * Google. After this submission, you will not be able to modify the number
   * or SKU of your ordered hardware. Please note that this order will not be
   * ready for fulfillment yet until you provide more information, such as
   * zone network configuration, hardware physical and installation
   * information, etc.
   * If you are submitting an order for a SKU type of RACK, please use this
   * request type, as additional information will be required outside of the
   * API.
   */
  INFO_PENDING = 1,
  /**
   * INFO_COMPLETE - Use this request type if and when you are ready to submit your order for
   * fulfillment. In addition to the information required for `INFO_PENDING`,
   * the order must contain all required information, such as zone network
   * configuration, hardware physical and installation information, etc.
   * Further changes to any order information will no longer be allowed.
   */
  INFO_COMPLETE = 2,
  UNRECOGNIZED = -1,
}

export function submitOrderRequest_TypeFromJSON(object: any): SubmitOrderRequest_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return SubmitOrderRequest_Type.TYPE_UNSPECIFIED;
    case 1:
    case "INFO_PENDING":
      return SubmitOrderRequest_Type.INFO_PENDING;
    case 2:
    case "INFO_COMPLETE":
      return SubmitOrderRequest_Type.INFO_COMPLETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SubmitOrderRequest_Type.UNRECOGNIZED;
  }
}

export function submitOrderRequest_TypeToJSON(object: SubmitOrderRequest_Type): string {
  switch (object) {
    case SubmitOrderRequest_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case SubmitOrderRequest_Type.INFO_PENDING:
      return "INFO_PENDING";
    case SubmitOrderRequest_Type.INFO_COMPLETE:
      return "INFO_COMPLETE";
    case SubmitOrderRequest_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A request to list sites. */
export interface ListSitesRequest {
  /**
   * Required. The project and location to list sites in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160). */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** A list of sites. */
export interface ListSitesResponse {
  /** The list of sites. */
  sites: Site[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** A request to get a site. */
export interface GetSiteRequest {
  /**
   * Required. The name of the site.
   * Format: `projects/{project}/locations/{location}/sites/{site}`
   */
  name: string;
}

/** A request to create a site. */
export interface CreateSiteRequest {
  /**
   * Required. The project and location to create the site in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. ID used to uniquely identify the Site within its parent scope.
   * This field should contain at most 63 characters and must start with
   * lowercase characters.
   * Only lowercase characters, numbers and `-` are accepted.
   * The `-` character cannot be the first or the last one.
   * A system generated ID will be used if the field is not set.
   *
   * The site.name field in the request will be ignored.
   */
  siteId: string;
  /** Required. The site to create. */
  site:
    | Site
    | undefined;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to update a site. */
export interface UpdateSiteRequest {
  /**
   * Required. A mask to specify the fields in the Site to overwrite with this
   * update. The fields specified in the update_mask are relative to the site,
   * not the full request. A field will be overwritten if it is in the mask. If
   * you don't provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The site to update. */
  site:
    | Site
    | undefined;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to list hardware groups. */
export interface ListHardwareGroupsRequest {
  /**
   * Required. The order to list hardware groups in.
   * Format: `projects/{project}/locations/{location}/orders/{order}`
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160). */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** A list of hardware groups. */
export interface ListHardwareGroupsResponse {
  /** The list of hardware groups. */
  hardwareGroups: HardwareGroup[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** A request to get a hardware group. */
export interface GetHardwareGroupRequest {
  /**
   * Required. The name of the hardware group.
   * Format:
   * `projects/{project}/locations/{location}/orders/{order}/hardwareGroups/{hardware_group}`
   */
  name: string;
}

/** A request to create a hardware group. */
export interface CreateHardwareGroupRequest {
  /**
   * Required. The order to create the hardware group in.
   * Format: `projects/{project}/locations/{location}/orders/{order}`
   */
  parent: string;
  /**
   * Optional. ID used to uniquely identify the HardwareGroup within its parent
   * scope. This field should contain at most 63 characters and must start with
   * lowercase characters.
   * Only lowercase characters, numbers and `-` are accepted.
   * The `-` character cannot be the first or the last one.
   * A system generated ID will be used if the field is not set.
   *
   * The hardware_group.name field in the request will be ignored.
   */
  hardwareGroupId: string;
  /** Required. The hardware group to create. */
  hardwareGroup:
    | HardwareGroup
    | undefined;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to update a hardware group. */
export interface UpdateHardwareGroupRequest {
  /**
   * Required. A mask to specify the fields in the HardwareGroup to overwrite
   * with this update. The fields specified in the update_mask are relative to
   * the hardware group, not the full request. A field will be overwritten if it
   * is in the mask. If you don't provide a mask then all fields will be
   * overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The hardware group to update. */
  hardwareGroup:
    | HardwareGroup
    | undefined;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to delete a hardware group. */
export interface DeleteHardwareGroupRequest {
  /**
   * Required. The name of the hardware group.
   * Format:
   * `projects/{project}/locations/{location}/orders/{order}/hardwareGroups/{hardware_group}`
   */
  name: string;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to list hardware. */
export interface ListHardwareRequest {
  /**
   * Required. The project and location to list hardware in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160). */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** A list of hardware. */
export interface ListHardwareResponse {
  /** The list of hardware. */
  hardware: Hardware[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** A request to get hardware. */
export interface GetHardwareRequest {
  /**
   * Required. The name of the hardware.
   * Format: `projects/{project}/locations/{location}/hardware/{hardware}`
   */
  name: string;
}

/** A request to create hardware. */
export interface CreateHardwareRequest {
  /**
   * Required. The project and location to create hardware in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. ID used to uniquely identify the Hardware within its parent
   * scope. This field should contain at most 63 characters and must start with
   * lowercase characters.
   * Only lowercase characters, numbers and `-` are accepted.
   * The `-` character cannot be the first or the last one.
   * A system generated ID will be used if the field is not set.
   *
   * The hardware.name field in the request will be ignored.
   */
  hardwareId: string;
  /** Required. The resource to create. */
  hardware: Hardware | undefined;
}

/** A request to update hardware. */
export interface UpdateHardwareRequest {
  /**
   * Required. A mask to specify the fields in the Hardware to overwrite with
   * this update. The fields specified in the update_mask are relative to the
   * hardware, not the full request. A field will be overwritten if it is in the
   * mask. If you don't provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The hardware to update. */
  hardware:
    | Hardware
    | undefined;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to delete hardware. */
export interface DeleteHardwareRequest {
  /**
   * Required. The name of the hardware.
   * Format: `projects/{project}/locations/{location}/hardware/{hardware}`
   */
  name: string;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to list comments. */
export interface ListCommentsRequest {
  /**
   * Required. The order to list comments on.
   * Format: `projects/{project}/locations/{location}/orders/{order}`
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160). */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** A request to list comments. */
export interface ListCommentsResponse {
  /** The list of comments. */
  comments: Comment[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** A request to get a comment. */
export interface GetCommentRequest {
  /**
   * Required. The name of the comment.
   * Format:
   * `projects/{project}/locations/{location}/orders/{order}/comments/{comment}`
   */
  name: string;
}

/** A request to create a comment. */
export interface CreateCommentRequest {
  /**
   * Required. The order to create the comment on.
   * Format: `projects/{project}/locations/{location}/orders/{order}`
   */
  parent: string;
  /**
   * Optional. ID used to uniquely identify the Comment within its parent scope.
   * This field should contain at most 63 characters and must start with
   * lowercase characters.
   * Only lowercase characters, numbers and `-` are accepted.
   * The `-` character cannot be the first or the last one.
   * A system generated ID will be used if the field is not set.
   *
   * The comment.name field in the request will be ignored.
   */
  commentId: string;
  /** Required. The comment to create. */
  comment:
    | Comment
    | undefined;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to record an action on a comment. */
export interface RecordActionOnCommentRequest {
  /**
   * Required. The name of the comment.
   * Format:
   * `projects/{project}/locations/{location}/orders/{order}/comments/{comment}`
   */
  name: string;
  /** Required. The action type of the recorded action. */
  actionType: RecordActionOnCommentRequest_ActionType;
}

/** Valid action types of Comment. */
export enum RecordActionOnCommentRequest_ActionType {
  /** ACTION_TYPE_UNSPECIFIED - Action is unspecified. */
  ACTION_TYPE_UNSPECIFIED = 0,
  /** READ - Mark comment as read. */
  READ = 1,
  /** UNREAD - Mark comment as unread. */
  UNREAD = 2,
  UNRECOGNIZED = -1,
}

export function recordActionOnCommentRequest_ActionTypeFromJSON(object: any): RecordActionOnCommentRequest_ActionType {
  switch (object) {
    case 0:
    case "ACTION_TYPE_UNSPECIFIED":
      return RecordActionOnCommentRequest_ActionType.ACTION_TYPE_UNSPECIFIED;
    case 1:
    case "READ":
      return RecordActionOnCommentRequest_ActionType.READ;
    case 2:
    case "UNREAD":
      return RecordActionOnCommentRequest_ActionType.UNREAD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RecordActionOnCommentRequest_ActionType.UNRECOGNIZED;
  }
}

export function recordActionOnCommentRequest_ActionTypeToJSON(object: RecordActionOnCommentRequest_ActionType): string {
  switch (object) {
    case RecordActionOnCommentRequest_ActionType.ACTION_TYPE_UNSPECIFIED:
      return "ACTION_TYPE_UNSPECIFIED";
    case RecordActionOnCommentRequest_ActionType.READ:
      return "READ";
    case RecordActionOnCommentRequest_ActionType.UNREAD:
      return "UNREAD";
    case RecordActionOnCommentRequest_ActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A request to list change log entries. */
export interface ListChangeLogEntriesRequest {
  /**
   * Required. The order to list change log entries for.
   * Format: `projects/{project}/locations/{location}/orders/{order}`
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160). */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** A list of change log entries. */
export interface ListChangeLogEntriesResponse {
  /** The list of change log entries. */
  changeLogEntries: ChangeLogEntry[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** A request to get a change log entry. */
export interface GetChangeLogEntryRequest {
  /**
   * Required. The name of the change log entry.
   * Format:
   * `projects/{project}/locations/{location}/orders/{order}/changeLogEntries/{change_log_entry}`
   */
  name: string;
}

/** A request to list SKUs. */
export interface ListSkusRequest {
  /**
   * Required. The project and location to list SKUs in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160). */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** A list of SKUs. */
export interface ListSkusResponse {
  /** The list of SKUs. */
  skus: Sku[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** A request to get an SKU. */
export interface GetSkuRequest {
  /**
   * Required. The name of the SKU.
   * Format: `projects/{project}/locations/{location}/skus/{sku}`
   */
  name: string;
}

/** A request to list zones. */
export interface ListZonesRequest {
  /**
   * Required. The project and location to list zones in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160). */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** A list of zones. */
export interface ListZonesResponse {
  /** The list of zones. */
  zones: Zone[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** A request to get a zone. */
export interface GetZoneRequest {
  /**
   * Required. The name of the zone.
   * Format: `projects/{project}/locations/{location}/zones/{zone}`
   */
  name: string;
}

/** A request to create a zone. */
export interface CreateZoneRequest {
  /**
   * Required. The project and location to create the zone in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. ID used to uniquely identify the Zone within its parent scope.
   * This field should contain at most 63 characters and must start with
   * lowercase characters.
   * Only lowercase characters, numbers and `-` are accepted.
   * The `-` character cannot be the first or the last one.
   * A system generated ID will be used if the field is not set.
   *
   * The zone.name field in the request will be ignored.
   */
  zoneId: string;
  /** Required. The zone to create. */
  zone:
    | Zone
    | undefined;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to update a zone. */
export interface UpdateZoneRequest {
  /**
   * Required. A mask to specify the fields in the Zone to overwrite with this
   * update. The fields specified in the update_mask are relative to the zone,
   * not the full request. A field will be overwritten if it is in the mask. If
   * you don't provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The zone to update. */
  zone:
    | Zone
    | undefined;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to delete a zone. */
export interface DeleteZoneRequest {
  /**
   * Required. The name of the zone.
   * Format: `projects/{project}/locations/{location}/zones/{zone}`
   */
  name: string;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
}

/** A request to signal the state of a zone. */
export interface SignalZoneStateRequest {
  /**
   * Required. The name of the zone.
   * Format: `projects/{project}/locations/{location}/zones/{zone}`
   */
  name: string;
  /**
   * Optional. An optional unique identifier for this request. See
   * [AIP-155](https://google.aip.dev/155).
   */
  requestId: string;
  /** Required. The state signal to send for this zone. */
  stateSignal: SignalZoneStateRequest_StateSignal;
}

/** Valid state signals for a zone. */
export enum SignalZoneStateRequest_StateSignal {
  /** STATE_SIGNAL_UNSPECIFIED - State signal of the zone is unspecified. */
  STATE_SIGNAL_UNSPECIFIED = 0,
  /** FACTORY_TURNUP_CHECKS_PASSED - The Zone is ready for site turnup. */
  FACTORY_TURNUP_CHECKS_PASSED = 1,
  /**
   * READY_FOR_SITE_TURNUP - The Zone is ready for site turnup. Deprecated, but not deleted.
   *
   * @deprecated
   */
  READY_FOR_SITE_TURNUP = 1,
  /** FACTORY_TURNUP_CHECKS_FAILED - The Zone failed in factory turnup checks. */
  FACTORY_TURNUP_CHECKS_FAILED = 2,
  UNRECOGNIZED = -1,
}

export function signalZoneStateRequest_StateSignalFromJSON(object: any): SignalZoneStateRequest_StateSignal {
  switch (object) {
    case 0:
    case "STATE_SIGNAL_UNSPECIFIED":
      return SignalZoneStateRequest_StateSignal.STATE_SIGNAL_UNSPECIFIED;
    case 1:
    case "FACTORY_TURNUP_CHECKS_PASSED":
      return SignalZoneStateRequest_StateSignal.FACTORY_TURNUP_CHECKS_PASSED;
    case 1:
    case "READY_FOR_SITE_TURNUP":
      return SignalZoneStateRequest_StateSignal.READY_FOR_SITE_TURNUP;
    case 2:
    case "FACTORY_TURNUP_CHECKS_FAILED":
      return SignalZoneStateRequest_StateSignal.FACTORY_TURNUP_CHECKS_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SignalZoneStateRequest_StateSignal.UNRECOGNIZED;
  }
}

export function signalZoneStateRequest_StateSignalToJSON(object: SignalZoneStateRequest_StateSignal): string {
  switch (object) {
    case SignalZoneStateRequest_StateSignal.STATE_SIGNAL_UNSPECIFIED:
      return "STATE_SIGNAL_UNSPECIFIED";
    case SignalZoneStateRequest_StateSignal.FACTORY_TURNUP_CHECKS_PASSED:
      return "FACTORY_TURNUP_CHECKS_PASSED";
    case SignalZoneStateRequest_StateSignal.READY_FOR_SITE_TURNUP:
      return "READY_FOR_SITE_TURNUP";
    case SignalZoneStateRequest_StateSignal.FACTORY_TURNUP_CHECKS_FAILED:
      return "FACTORY_TURNUP_CHECKS_FAILED";
    case SignalZoneStateRequest_StateSignal.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the metadata of a long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. The verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseListOrdersRequest(): ListOrdersRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListOrdersRequest: MessageFns<ListOrdersRequest> = {
  encode(message: ListOrdersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrdersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrdersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListOrdersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOrdersRequest>): ListOrdersRequest {
    return ListOrdersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrdersRequest>): ListOrdersRequest {
    const message = createBaseListOrdersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListOrdersResponse(): ListOrdersResponse {
  return { orders: [], nextPageToken: "", unreachable: [] };
}

export const ListOrdersResponse: MessageFns<ListOrdersResponse> = {
  encode(message: ListOrdersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      Order.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrdersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orders.push(Order.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrdersResponse {
    return {
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => Order.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListOrdersResponse): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => Order.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOrdersResponse>): ListOrdersResponse {
    return ListOrdersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrdersResponse>): ListOrdersResponse {
    const message = createBaseListOrdersResponse();
    message.orders = object.orders?.map((e) => Order.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetOrderRequest(): GetOrderRequest {
  return { name: "" };
}

export const GetOrderRequest: MessageFns<GetOrderRequest> = {
  encode(message: GetOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetOrderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetOrderRequest>): GetOrderRequest {
    return GetOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrderRequest>): GetOrderRequest {
    const message = createBaseGetOrderRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateOrderRequest(): CreateOrderRequest {
  return { parent: "", orderId: "", order: undefined, requestId: "" };
}

export const CreateOrderRequest: MessageFns<CreateOrderRequest> = {
  encode(message: CreateOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.orderId !== "") {
      writer.uint32(18).string(message.orderId);
    }
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orderId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.order = Order.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      order: isSet(object.order) ? Order.fromJSON(object.order) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateOrderRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.order !== undefined) {
      obj.order = Order.toJSON(message.order);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateOrderRequest>): CreateOrderRequest {
    return CreateOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateOrderRequest>): CreateOrderRequest {
    const message = createBaseCreateOrderRequest();
    message.parent = object.parent ?? "";
    message.orderId = object.orderId ?? "";
    message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateOrderRequest(): UpdateOrderRequest {
  return { updateMask: undefined, order: undefined, requestId: "" };
}

export const UpdateOrderRequest: MessageFns<UpdateOrderRequest> = {
  encode(message: UpdateOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.order = Order.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      order: isSet(object.order) ? Order.fromJSON(object.order) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateOrderRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.order !== undefined) {
      obj.order = Order.toJSON(message.order);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateOrderRequest>): UpdateOrderRequest {
    return UpdateOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrderRequest>): UpdateOrderRequest {
    const message = createBaseUpdateOrderRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteOrderRequest(): DeleteOrderRequest {
  return { name: "", requestId: "", force: false };
}

export const DeleteOrderRequest: MessageFns<DeleteOrderRequest> = {
  encode(message: DeleteOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteOrderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteOrderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteOrderRequest>): DeleteOrderRequest {
    return DeleteOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteOrderRequest>): DeleteOrderRequest {
    const message = createBaseDeleteOrderRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseSubmitOrderRequest(): SubmitOrderRequest {
  return { name: "", requestId: "", type: 0 };
}

export const SubmitOrderRequest: MessageFns<SubmitOrderRequest> = {
  encode(message: SubmitOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitOrderRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      type: isSet(object.type) ? submitOrderRequest_TypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: SubmitOrderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.type !== 0) {
      obj.type = submitOrderRequest_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<SubmitOrderRequest>): SubmitOrderRequest {
    return SubmitOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubmitOrderRequest>): SubmitOrderRequest {
    const message = createBaseSubmitOrderRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseListSitesRequest(): ListSitesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListSitesRequest: MessageFns<ListSitesRequest> = {
  encode(message: ListSitesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSitesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSitesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSitesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListSitesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSitesRequest>): ListSitesRequest {
    return ListSitesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSitesRequest>): ListSitesRequest {
    const message = createBaseListSitesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListSitesResponse(): ListSitesResponse {
  return { sites: [], nextPageToken: "", unreachable: [] };
}

export const ListSitesResponse: MessageFns<ListSitesResponse> = {
  encode(message: ListSitesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sites) {
      Site.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSitesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSitesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sites.push(Site.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSitesResponse {
    return {
      sites: globalThis.Array.isArray(object?.sites) ? object.sites.map((e: any) => Site.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListSitesResponse): unknown {
    const obj: any = {};
    if (message.sites?.length) {
      obj.sites = message.sites.map((e) => Site.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSitesResponse>): ListSitesResponse {
    return ListSitesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSitesResponse>): ListSitesResponse {
    const message = createBaseListSitesResponse();
    message.sites = object.sites?.map((e) => Site.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetSiteRequest(): GetSiteRequest {
  return { name: "" };
}

export const GetSiteRequest: MessageFns<GetSiteRequest> = {
  encode(message: GetSiteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSiteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSiteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSiteRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSiteRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSiteRequest>): GetSiteRequest {
    return GetSiteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSiteRequest>): GetSiteRequest {
    const message = createBaseGetSiteRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateSiteRequest(): CreateSiteRequest {
  return { parent: "", siteId: "", site: undefined, requestId: "" };
}

export const CreateSiteRequest: MessageFns<CreateSiteRequest> = {
  encode(message: CreateSiteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.siteId !== "") {
      writer.uint32(18).string(message.siteId);
    }
    if (message.site !== undefined) {
      Site.encode(message.site, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSiteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSiteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.siteId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.site = Site.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSiteRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      siteId: isSet(object.siteId) ? globalThis.String(object.siteId) : "",
      site: isSet(object.site) ? Site.fromJSON(object.site) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateSiteRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.siteId !== "") {
      obj.siteId = message.siteId;
    }
    if (message.site !== undefined) {
      obj.site = Site.toJSON(message.site);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSiteRequest>): CreateSiteRequest {
    return CreateSiteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSiteRequest>): CreateSiteRequest {
    const message = createBaseCreateSiteRequest();
    message.parent = object.parent ?? "";
    message.siteId = object.siteId ?? "";
    message.site = (object.site !== undefined && object.site !== null) ? Site.fromPartial(object.site) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateSiteRequest(): UpdateSiteRequest {
  return { updateMask: undefined, site: undefined, requestId: "" };
}

export const UpdateSiteRequest: MessageFns<UpdateSiteRequest> = {
  encode(message: UpdateSiteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.site !== undefined) {
      Site.encode(message.site, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSiteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSiteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.site = Site.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSiteRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      site: isSet(object.site) ? Site.fromJSON(object.site) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateSiteRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.site !== undefined) {
      obj.site = Site.toJSON(message.site);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSiteRequest>): UpdateSiteRequest {
    return UpdateSiteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSiteRequest>): UpdateSiteRequest {
    const message = createBaseUpdateSiteRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.site = (object.site !== undefined && object.site !== null) ? Site.fromPartial(object.site) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListHardwareGroupsRequest(): ListHardwareGroupsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListHardwareGroupsRequest: MessageFns<ListHardwareGroupsRequest> = {
  encode(message: ListHardwareGroupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHardwareGroupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHardwareGroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHardwareGroupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListHardwareGroupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHardwareGroupsRequest>): ListHardwareGroupsRequest {
    return ListHardwareGroupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHardwareGroupsRequest>): ListHardwareGroupsRequest {
    const message = createBaseListHardwareGroupsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListHardwareGroupsResponse(): ListHardwareGroupsResponse {
  return { hardwareGroups: [], nextPageToken: "", unreachable: [] };
}

export const ListHardwareGroupsResponse: MessageFns<ListHardwareGroupsResponse> = {
  encode(message: ListHardwareGroupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hardwareGroups) {
      HardwareGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHardwareGroupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHardwareGroupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hardwareGroups.push(HardwareGroup.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHardwareGroupsResponse {
    return {
      hardwareGroups: globalThis.Array.isArray(object?.hardwareGroups)
        ? object.hardwareGroups.map((e: any) => HardwareGroup.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListHardwareGroupsResponse): unknown {
    const obj: any = {};
    if (message.hardwareGroups?.length) {
      obj.hardwareGroups = message.hardwareGroups.map((e) => HardwareGroup.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHardwareGroupsResponse>): ListHardwareGroupsResponse {
    return ListHardwareGroupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHardwareGroupsResponse>): ListHardwareGroupsResponse {
    const message = createBaseListHardwareGroupsResponse();
    message.hardwareGroups = object.hardwareGroups?.map((e) => HardwareGroup.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetHardwareGroupRequest(): GetHardwareGroupRequest {
  return { name: "" };
}

export const GetHardwareGroupRequest: MessageFns<GetHardwareGroupRequest> = {
  encode(message: GetHardwareGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHardwareGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHardwareGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHardwareGroupRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetHardwareGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetHardwareGroupRequest>): GetHardwareGroupRequest {
    return GetHardwareGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHardwareGroupRequest>): GetHardwareGroupRequest {
    const message = createBaseGetHardwareGroupRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateHardwareGroupRequest(): CreateHardwareGroupRequest {
  return { parent: "", hardwareGroupId: "", hardwareGroup: undefined, requestId: "" };
}

export const CreateHardwareGroupRequest: MessageFns<CreateHardwareGroupRequest> = {
  encode(message: CreateHardwareGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.hardwareGroupId !== "") {
      writer.uint32(18).string(message.hardwareGroupId);
    }
    if (message.hardwareGroup !== undefined) {
      HardwareGroup.encode(message.hardwareGroup, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateHardwareGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateHardwareGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hardwareGroupId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hardwareGroup = HardwareGroup.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateHardwareGroupRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      hardwareGroupId: isSet(object.hardwareGroupId) ? globalThis.String(object.hardwareGroupId) : "",
      hardwareGroup: isSet(object.hardwareGroup) ? HardwareGroup.fromJSON(object.hardwareGroup) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateHardwareGroupRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.hardwareGroupId !== "") {
      obj.hardwareGroupId = message.hardwareGroupId;
    }
    if (message.hardwareGroup !== undefined) {
      obj.hardwareGroup = HardwareGroup.toJSON(message.hardwareGroup);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateHardwareGroupRequest>): CreateHardwareGroupRequest {
    return CreateHardwareGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateHardwareGroupRequest>): CreateHardwareGroupRequest {
    const message = createBaseCreateHardwareGroupRequest();
    message.parent = object.parent ?? "";
    message.hardwareGroupId = object.hardwareGroupId ?? "";
    message.hardwareGroup = (object.hardwareGroup !== undefined && object.hardwareGroup !== null)
      ? HardwareGroup.fromPartial(object.hardwareGroup)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateHardwareGroupRequest(): UpdateHardwareGroupRequest {
  return { updateMask: undefined, hardwareGroup: undefined, requestId: "" };
}

export const UpdateHardwareGroupRequest: MessageFns<UpdateHardwareGroupRequest> = {
  encode(message: UpdateHardwareGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.hardwareGroup !== undefined) {
      HardwareGroup.encode(message.hardwareGroup, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateHardwareGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHardwareGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hardwareGroup = HardwareGroup.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHardwareGroupRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      hardwareGroup: isSet(object.hardwareGroup) ? HardwareGroup.fromJSON(object.hardwareGroup) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateHardwareGroupRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.hardwareGroup !== undefined) {
      obj.hardwareGroup = HardwareGroup.toJSON(message.hardwareGroup);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateHardwareGroupRequest>): UpdateHardwareGroupRequest {
    return UpdateHardwareGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHardwareGroupRequest>): UpdateHardwareGroupRequest {
    const message = createBaseUpdateHardwareGroupRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.hardwareGroup = (object.hardwareGroup !== undefined && object.hardwareGroup !== null)
      ? HardwareGroup.fromPartial(object.hardwareGroup)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteHardwareGroupRequest(): DeleteHardwareGroupRequest {
  return { name: "", requestId: "" };
}

export const DeleteHardwareGroupRequest: MessageFns<DeleteHardwareGroupRequest> = {
  encode(message: DeleteHardwareGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteHardwareGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteHardwareGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteHardwareGroupRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteHardwareGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteHardwareGroupRequest>): DeleteHardwareGroupRequest {
    return DeleteHardwareGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteHardwareGroupRequest>): DeleteHardwareGroupRequest {
    const message = createBaseDeleteHardwareGroupRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListHardwareRequest(): ListHardwareRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListHardwareRequest: MessageFns<ListHardwareRequest> = {
  encode(message: ListHardwareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHardwareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHardwareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHardwareRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListHardwareRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHardwareRequest>): ListHardwareRequest {
    return ListHardwareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHardwareRequest>): ListHardwareRequest {
    const message = createBaseListHardwareRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListHardwareResponse(): ListHardwareResponse {
  return { hardware: [], nextPageToken: "", unreachable: [] };
}

export const ListHardwareResponse: MessageFns<ListHardwareResponse> = {
  encode(message: ListHardwareResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hardware) {
      Hardware.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHardwareResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHardwareResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hardware.push(Hardware.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHardwareResponse {
    return {
      hardware: globalThis.Array.isArray(object?.hardware) ? object.hardware.map((e: any) => Hardware.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListHardwareResponse): unknown {
    const obj: any = {};
    if (message.hardware?.length) {
      obj.hardware = message.hardware.map((e) => Hardware.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHardwareResponse>): ListHardwareResponse {
    return ListHardwareResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHardwareResponse>): ListHardwareResponse {
    const message = createBaseListHardwareResponse();
    message.hardware = object.hardware?.map((e) => Hardware.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetHardwareRequest(): GetHardwareRequest {
  return { name: "" };
}

export const GetHardwareRequest: MessageFns<GetHardwareRequest> = {
  encode(message: GetHardwareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHardwareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHardwareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHardwareRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetHardwareRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetHardwareRequest>): GetHardwareRequest {
    return GetHardwareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHardwareRequest>): GetHardwareRequest {
    const message = createBaseGetHardwareRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateHardwareRequest(): CreateHardwareRequest {
  return { parent: "", hardwareId: "", hardware: undefined };
}

export const CreateHardwareRequest: MessageFns<CreateHardwareRequest> = {
  encode(message: CreateHardwareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.hardwareId !== "") {
      writer.uint32(18).string(message.hardwareId);
    }
    if (message.hardware !== undefined) {
      Hardware.encode(message.hardware, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateHardwareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateHardwareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hardwareId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hardware = Hardware.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateHardwareRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      hardwareId: isSet(object.hardwareId) ? globalThis.String(object.hardwareId) : "",
      hardware: isSet(object.hardware) ? Hardware.fromJSON(object.hardware) : undefined,
    };
  },

  toJSON(message: CreateHardwareRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.hardwareId !== "") {
      obj.hardwareId = message.hardwareId;
    }
    if (message.hardware !== undefined) {
      obj.hardware = Hardware.toJSON(message.hardware);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateHardwareRequest>): CreateHardwareRequest {
    return CreateHardwareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateHardwareRequest>): CreateHardwareRequest {
    const message = createBaseCreateHardwareRequest();
    message.parent = object.parent ?? "";
    message.hardwareId = object.hardwareId ?? "";
    message.hardware = (object.hardware !== undefined && object.hardware !== null)
      ? Hardware.fromPartial(object.hardware)
      : undefined;
    return message;
  },
};

function createBaseUpdateHardwareRequest(): UpdateHardwareRequest {
  return { updateMask: undefined, hardware: undefined, requestId: "" };
}

export const UpdateHardwareRequest: MessageFns<UpdateHardwareRequest> = {
  encode(message: UpdateHardwareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.hardware !== undefined) {
      Hardware.encode(message.hardware, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateHardwareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHardwareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hardware = Hardware.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHardwareRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      hardware: isSet(object.hardware) ? Hardware.fromJSON(object.hardware) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateHardwareRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.hardware !== undefined) {
      obj.hardware = Hardware.toJSON(message.hardware);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateHardwareRequest>): UpdateHardwareRequest {
    return UpdateHardwareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHardwareRequest>): UpdateHardwareRequest {
    const message = createBaseUpdateHardwareRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.hardware = (object.hardware !== undefined && object.hardware !== null)
      ? Hardware.fromPartial(object.hardware)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteHardwareRequest(): DeleteHardwareRequest {
  return { name: "", requestId: "" };
}

export const DeleteHardwareRequest: MessageFns<DeleteHardwareRequest> = {
  encode(message: DeleteHardwareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteHardwareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteHardwareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteHardwareRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteHardwareRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteHardwareRequest>): DeleteHardwareRequest {
    return DeleteHardwareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteHardwareRequest>): DeleteHardwareRequest {
    const message = createBaseDeleteHardwareRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListCommentsRequest(): ListCommentsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListCommentsRequest: MessageFns<ListCommentsRequest> = {
  encode(message: ListCommentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCommentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCommentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCommentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListCommentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCommentsRequest>): ListCommentsRequest {
    return ListCommentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCommentsRequest>): ListCommentsRequest {
    const message = createBaseListCommentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListCommentsResponse(): ListCommentsResponse {
  return { comments: [], nextPageToken: "", unreachable: [] };
}

export const ListCommentsResponse: MessageFns<ListCommentsResponse> = {
  encode(message: ListCommentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.comments) {
      Comment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCommentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCommentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.comments.push(Comment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCommentsResponse {
    return {
      comments: globalThis.Array.isArray(object?.comments) ? object.comments.map((e: any) => Comment.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListCommentsResponse): unknown {
    const obj: any = {};
    if (message.comments?.length) {
      obj.comments = message.comments.map((e) => Comment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCommentsResponse>): ListCommentsResponse {
    return ListCommentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCommentsResponse>): ListCommentsResponse {
    const message = createBaseListCommentsResponse();
    message.comments = object.comments?.map((e) => Comment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetCommentRequest(): GetCommentRequest {
  return { name: "" };
}

export const GetCommentRequest: MessageFns<GetCommentRequest> = {
  encode(message: GetCommentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCommentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCommentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCommentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCommentRequest>): GetCommentRequest {
    return GetCommentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCommentRequest>): GetCommentRequest {
    const message = createBaseGetCommentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateCommentRequest(): CreateCommentRequest {
  return { parent: "", commentId: "", comment: undefined, requestId: "" };
}

export const CreateCommentRequest: MessageFns<CreateCommentRequest> = {
  encode(message: CreateCommentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.commentId !== "") {
      writer.uint32(18).string(message.commentId);
    }
    if (message.comment !== undefined) {
      Comment.encode(message.comment, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCommentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.comment = Comment.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCommentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      commentId: isSet(object.commentId) ? globalThis.String(object.commentId) : "",
      comment: isSet(object.comment) ? Comment.fromJSON(object.comment) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateCommentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.commentId !== "") {
      obj.commentId = message.commentId;
    }
    if (message.comment !== undefined) {
      obj.comment = Comment.toJSON(message.comment);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCommentRequest>): CreateCommentRequest {
    return CreateCommentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCommentRequest>): CreateCommentRequest {
    const message = createBaseCreateCommentRequest();
    message.parent = object.parent ?? "";
    message.commentId = object.commentId ?? "";
    message.comment = (object.comment !== undefined && object.comment !== null)
      ? Comment.fromPartial(object.comment)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseRecordActionOnCommentRequest(): RecordActionOnCommentRequest {
  return { name: "", actionType: 0 };
}

export const RecordActionOnCommentRequest: MessageFns<RecordActionOnCommentRequest> = {
  encode(message: RecordActionOnCommentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.actionType !== 0) {
      writer.uint32(16).int32(message.actionType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordActionOnCommentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordActionOnCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.actionType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordActionOnCommentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      actionType: isSet(object.actionType) ? recordActionOnCommentRequest_ActionTypeFromJSON(object.actionType) : 0,
    };
  },

  toJSON(message: RecordActionOnCommentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.actionType !== 0) {
      obj.actionType = recordActionOnCommentRequest_ActionTypeToJSON(message.actionType);
    }
    return obj;
  },

  create(base?: DeepPartial<RecordActionOnCommentRequest>): RecordActionOnCommentRequest {
    return RecordActionOnCommentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecordActionOnCommentRequest>): RecordActionOnCommentRequest {
    const message = createBaseRecordActionOnCommentRequest();
    message.name = object.name ?? "";
    message.actionType = object.actionType ?? 0;
    return message;
  },
};

function createBaseListChangeLogEntriesRequest(): ListChangeLogEntriesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListChangeLogEntriesRequest: MessageFns<ListChangeLogEntriesRequest> = {
  encode(message: ListChangeLogEntriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChangeLogEntriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChangeLogEntriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChangeLogEntriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListChangeLogEntriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChangeLogEntriesRequest>): ListChangeLogEntriesRequest {
    return ListChangeLogEntriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChangeLogEntriesRequest>): ListChangeLogEntriesRequest {
    const message = createBaseListChangeLogEntriesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListChangeLogEntriesResponse(): ListChangeLogEntriesResponse {
  return { changeLogEntries: [], nextPageToken: "", unreachable: [] };
}

export const ListChangeLogEntriesResponse: MessageFns<ListChangeLogEntriesResponse> = {
  encode(message: ListChangeLogEntriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.changeLogEntries) {
      ChangeLogEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChangeLogEntriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChangeLogEntriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.changeLogEntries.push(ChangeLogEntry.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChangeLogEntriesResponse {
    return {
      changeLogEntries: globalThis.Array.isArray(object?.changeLogEntries)
        ? object.changeLogEntries.map((e: any) => ChangeLogEntry.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListChangeLogEntriesResponse): unknown {
    const obj: any = {};
    if (message.changeLogEntries?.length) {
      obj.changeLogEntries = message.changeLogEntries.map((e) => ChangeLogEntry.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListChangeLogEntriesResponse>): ListChangeLogEntriesResponse {
    return ListChangeLogEntriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChangeLogEntriesResponse>): ListChangeLogEntriesResponse {
    const message = createBaseListChangeLogEntriesResponse();
    message.changeLogEntries = object.changeLogEntries?.map((e) => ChangeLogEntry.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetChangeLogEntryRequest(): GetChangeLogEntryRequest {
  return { name: "" };
}

export const GetChangeLogEntryRequest: MessageFns<GetChangeLogEntryRequest> = {
  encode(message: GetChangeLogEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChangeLogEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChangeLogEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetChangeLogEntryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetChangeLogEntryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetChangeLogEntryRequest>): GetChangeLogEntryRequest {
    return GetChangeLogEntryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChangeLogEntryRequest>): GetChangeLogEntryRequest {
    const message = createBaseGetChangeLogEntryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSkusRequest(): ListSkusRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListSkusRequest: MessageFns<ListSkusRequest> = {
  encode(message: ListSkusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSkusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSkusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSkusRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListSkusRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSkusRequest>): ListSkusRequest {
    return ListSkusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSkusRequest>): ListSkusRequest {
    const message = createBaseListSkusRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListSkusResponse(): ListSkusResponse {
  return { skus: [], nextPageToken: "", unreachable: [] };
}

export const ListSkusResponse: MessageFns<ListSkusResponse> = {
  encode(message: ListSkusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.skus) {
      Sku.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSkusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSkusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.skus.push(Sku.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSkusResponse {
    return {
      skus: globalThis.Array.isArray(object?.skus) ? object.skus.map((e: any) => Sku.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListSkusResponse): unknown {
    const obj: any = {};
    if (message.skus?.length) {
      obj.skus = message.skus.map((e) => Sku.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSkusResponse>): ListSkusResponse {
    return ListSkusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSkusResponse>): ListSkusResponse {
    const message = createBaseListSkusResponse();
    message.skus = object.skus?.map((e) => Sku.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetSkuRequest(): GetSkuRequest {
  return { name: "" };
}

export const GetSkuRequest: MessageFns<GetSkuRequest> = {
  encode(message: GetSkuRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSkuRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSkuRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSkuRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSkuRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSkuRequest>): GetSkuRequest {
    return GetSkuRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSkuRequest>): GetSkuRequest {
    const message = createBaseGetSkuRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListZonesRequest(): ListZonesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListZonesRequest: MessageFns<ListZonesRequest> = {
  encode(message: ListZonesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListZonesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListZonesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListZonesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListZonesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListZonesRequest>): ListZonesRequest {
    return ListZonesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListZonesRequest>): ListZonesRequest {
    const message = createBaseListZonesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListZonesResponse(): ListZonesResponse {
  return { zones: [], nextPageToken: "", unreachable: [] };
}

export const ListZonesResponse: MessageFns<ListZonesResponse> = {
  encode(message: ListZonesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.zones) {
      Zone.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListZonesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListZonesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.zones.push(Zone.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListZonesResponse {
    return {
      zones: globalThis.Array.isArray(object?.zones) ? object.zones.map((e: any) => Zone.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListZonesResponse): unknown {
    const obj: any = {};
    if (message.zones?.length) {
      obj.zones = message.zones.map((e) => Zone.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListZonesResponse>): ListZonesResponse {
    return ListZonesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListZonesResponse>): ListZonesResponse {
    const message = createBaseListZonesResponse();
    message.zones = object.zones?.map((e) => Zone.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetZoneRequest(): GetZoneRequest {
  return { name: "" };
}

export const GetZoneRequest: MessageFns<GetZoneRequest> = {
  encode(message: GetZoneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetZoneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetZoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetZoneRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetZoneRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetZoneRequest>): GetZoneRequest {
    return GetZoneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetZoneRequest>): GetZoneRequest {
    const message = createBaseGetZoneRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateZoneRequest(): CreateZoneRequest {
  return { parent: "", zoneId: "", zone: undefined, requestId: "" };
}

export const CreateZoneRequest: MessageFns<CreateZoneRequest> = {
  encode(message: CreateZoneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.zoneId !== "") {
      writer.uint32(18).string(message.zoneId);
    }
    if (message.zone !== undefined) {
      Zone.encode(message.zone, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateZoneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateZoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.zoneId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.zone = Zone.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateZoneRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      zoneId: isSet(object.zoneId) ? globalThis.String(object.zoneId) : "",
      zone: isSet(object.zone) ? Zone.fromJSON(object.zone) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateZoneRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.zoneId !== "") {
      obj.zoneId = message.zoneId;
    }
    if (message.zone !== undefined) {
      obj.zone = Zone.toJSON(message.zone);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateZoneRequest>): CreateZoneRequest {
    return CreateZoneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateZoneRequest>): CreateZoneRequest {
    const message = createBaseCreateZoneRequest();
    message.parent = object.parent ?? "";
    message.zoneId = object.zoneId ?? "";
    message.zone = (object.zone !== undefined && object.zone !== null) ? Zone.fromPartial(object.zone) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateZoneRequest(): UpdateZoneRequest {
  return { updateMask: undefined, zone: undefined, requestId: "" };
}

export const UpdateZoneRequest: MessageFns<UpdateZoneRequest> = {
  encode(message: UpdateZoneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.zone !== undefined) {
      Zone.encode(message.zone, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateZoneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateZoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.zone = Zone.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateZoneRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      zone: isSet(object.zone) ? Zone.fromJSON(object.zone) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateZoneRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.zone !== undefined) {
      obj.zone = Zone.toJSON(message.zone);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateZoneRequest>): UpdateZoneRequest {
    return UpdateZoneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateZoneRequest>): UpdateZoneRequest {
    const message = createBaseUpdateZoneRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.zone = (object.zone !== undefined && object.zone !== null) ? Zone.fromPartial(object.zone) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteZoneRequest(): DeleteZoneRequest {
  return { name: "", requestId: "" };
}

export const DeleteZoneRequest: MessageFns<DeleteZoneRequest> = {
  encode(message: DeleteZoneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteZoneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteZoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteZoneRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteZoneRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteZoneRequest>): DeleteZoneRequest {
    return DeleteZoneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteZoneRequest>): DeleteZoneRequest {
    const message = createBaseDeleteZoneRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseSignalZoneStateRequest(): SignalZoneStateRequest {
  return { name: "", requestId: "", stateSignal: 0 };
}

export const SignalZoneStateRequest: MessageFns<SignalZoneStateRequest> = {
  encode(message: SignalZoneStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.stateSignal !== 0) {
      writer.uint32(24).int32(message.stateSignal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignalZoneStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignalZoneStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.stateSignal = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignalZoneStateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      stateSignal: isSet(object.stateSignal) ? signalZoneStateRequest_StateSignalFromJSON(object.stateSignal) : 0,
    };
  },

  toJSON(message: SignalZoneStateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.stateSignal !== 0) {
      obj.stateSignal = signalZoneStateRequest_StateSignalToJSON(message.stateSignal);
    }
    return obj;
  },

  create(base?: DeepPartial<SignalZoneStateRequest>): SignalZoneStateRequest {
    return SignalZoneStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignalZoneStateRequest>): SignalZoneStateRequest {
    const message = createBaseSignalZoneStateRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.stateSignal = object.stateSignal ?? 0;
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/** The GDC Hardware Management service. */
export type GDCHardwareManagementDefinition = typeof GDCHardwareManagementDefinition;
export const GDCHardwareManagementDefinition = {
  name: "GDCHardwareManagement",
  fullName: "google.cloud.gdchardwaremanagement.v1alpha.GDCHardwareManagement",
  methods: {
    /** Lists orders in a given project and location. */
    listOrders: {
      name: "ListOrders",
      requestType: ListOrdersRequest,
      requestStream: false,
      responseType: ListOrdersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of an order. */
    getOrder: {
      name: "GetOrder",
      requestType: GetOrderRequest,
      requestStream: false,
      responseType: Order,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new order in a given project and location. */
    createOrder: {
      name: "CreateOrder",
      requestType: CreateOrderRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              26,
              10,
              5,
              79,
              114,
              100,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              111,
              114,
              100,
              101,
              114,
              44,
              111,
              114,
              100,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              5,
              111,
              114,
              100,
              101,
              114,
              34,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of an order. */
    updateOrder: {
      name: "UpdateOrder",
      requestType: UpdateOrderRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              26,
              10,
              5,
              79,
              114,
              100,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 111, 114, 100, 101, 114, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              62,
              58,
              5,
              111,
              114,
              100,
              101,
              114,
              50,
              53,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              111,
              114,
              100,
              101,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an order. */
    deleteOrder: {
      name: "DeleteOrder",
      requestType: DeleteOrderRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Submits an order. */
    submitOrder: {
      name: "SubmitOrder",
      requestType: SubmitOrderRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              26,
              10,
              5,
              79,
              114,
              100,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              58,
              115,
              117,
              98,
              109,
              105,
              116,
            ]),
          ],
        },
      },
    },
    /** Lists sites in a given project and location. */
    listSites: {
      name: "ListSites",
      requestType: ListSitesRequest,
      requestStream: false,
      responseType: ListSitesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              105,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a site. */
    getSite: {
      name: "GetSite",
      requestType: GetSiteRequest,
      requestStream: false,
      responseType: Site,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new site in a given project and location. */
    createSite: {
      name: "CreateSite",
      requestType: CreateSiteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              25,
              10,
              4,
              83,
              105,
              116,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              19,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              105,
              116,
              101,
              44,
              115,
              105,
              116,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              58,
              4,
              115,
              105,
              116,
              101,
              34,
              46,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              105,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a site. */
    updateSite: {
      name: "UpdateSite",
      requestType: UpdateSiteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              25,
              10,
              4,
              83,
              105,
              116,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([16, 115, 105, 116, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              59,
              58,
              4,
              115,
              105,
              116,
              101,
              50,
              51,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              115,
              105,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              105,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists hardware groups in a given order. */
    listHardwareGroups: {
      name: "ListHardwareGroups",
      requestType: ListHardwareGroupsRequest,
      requestStream: false,
      responseType: ListHardwareGroupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a hardware group. */
    getHardwareGroup: {
      name: "GetHardwareGroup",
      requestType: GetHardwareGroupRequest,
      requestStream: false,
      responseType: HardwareGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new hardware group in a given order. */
    createHardwareGroup: {
      name: "CreateHardwareGroup",
      requestType: CreateHardwareGroupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              72,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              39,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              44,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              82,
              58,
              14,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              34,
              64,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a hardware group. */
    updateHardwareGroup: {
      name: "UpdateHardwareGroup",
      requestType: UpdateHardwareGroupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              72,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              26,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              97,
              58,
              14,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              50,
              79,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a hardware group. */
    deleteHardwareGroup: {
      name: "DeleteHardwareGroup",
      requestType: DeleteHardwareGroupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              66,
              42,
              64,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists hardware in a given project and location. */
    listHardware: {
      name: "ListHardware",
      requestType: ListHardwareRequest,
      requestStream: false,
      responseType: ListHardwareResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets hardware details. */
    getHardware: {
      name: "GetHardware",
      requestType: GetHardwareRequest,
      requestStream: false,
      responseType: Hardware,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates new hardware in a given project and location. */
    createHardware: {
      name: "CreateHardware",
      requestType: CreateHardwareRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              72,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              44,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              8,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              34,
              49,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
            ]),
          ],
        },
      },
    },
    /** Updates hardware parameters. */
    updateHardware: {
      name: "UpdateHardware",
      requestType: UpdateHardwareRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              72,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              8,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              50,
              58,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes hardware. */
    deleteHardware: {
      name: "DeleteHardware",
      requestType: DeleteHardwareRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              104,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists the comments on an order. */
    listComments: {
      name: "ListComments",
      requestType: ListCommentsRequest,
      requestStream: false,
      responseType: ListCommentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the content of a comment. */
    getComment: {
      name: "GetComment",
      requestType: GetCommentRequest,
      requestStream: false,
      responseType: Comment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new comment on an order. */
    createComment: {
      name: "CreateComment",
      requestType: CreateCommentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              67,
              111,
              109,
              109,
              101,
              110,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              109,
              109,
              101,
              110,
              116,
              44,
              99,
              111,
              109,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              69,
              58,
              7,
              99,
              111,
              109,
              109,
              101,
              110,
              116,
              34,
              58,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Record Action on a Comment. If the Action specified in the request is READ,
     * the viewed time in the comment is set to the time the request was received.
     * If the comment is already marked as read, subsequent calls will be ignored.
     * If the Action is UNREAD, the viewed time is cleared from the comment.
     */
    recordActionOnComment: {
      name: "RecordActionOnComment",
      requestType: RecordActionOnCommentRequest,
      requestStream: false,
      responseType: Comment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 110, 97, 109, 101, 44, 97, 99, 116, 105, 111, 110, 95, 116, 121, 112, 101])],
          578365826: [
            Buffer.from([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              99,
              111,
              114,
              100,
              65,
              99,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /** Lists the changes made to an order. */
    listChangeLogEntries: {
      name: "ListChangeLogEntries",
      requestType: ListChangeLogEntriesRequest,
      requestStream: false,
      responseType: ListChangeLogEntriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              97,
              110,
              103,
              101,
              76,
              111,
              103,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a change to an order. */
    getChangeLogEntry: {
      name: "GetChangeLogEntry",
      requestType: GetChangeLogEntryRequest,
      requestStream: false,
      responseType: ChangeLogEntry,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              110,
              103,
              101,
              76,
              111,
              103,
              69,
              110,
              116,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists SKUs for a given project and location. */
    listSkus: {
      name: "ListSkus",
      requestType: ListSkusRequest,
      requestStream: false,
      responseType: ListSkusResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              107,
              117,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of an SKU. */
    getSku: {
      name: "GetSku",
      requestType: GetSkuRequest,
      requestStream: false,
      responseType: Sku,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              107,
              117,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists zones in a given project and location. */
    listZones: {
      name: "ListZones",
      requestType: ListZonesRequest,
      requestStream: false,
      responseType: ListZonesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              122,
              111,
              110,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a zone. */
    getZone: {
      name: "GetZone",
      requestType: GetZoneRequest,
      requestStream: false,
      responseType: Zone,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new zone in a given project and location. */
    createZone: {
      name: "CreateZone",
      requestType: CreateZoneRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              25,
              10,
              4,
              90,
              111,
              110,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              19,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              122,
              111,
              110,
              101,
              44,
              122,
              111,
              110,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              54,
              58,
              4,
              122,
              111,
              110,
              101,
              34,
              46,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              122,
              111,
              110,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a zone. */
    updateZone: {
      name: "UpdateZone",
      requestType: UpdateZoneRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              25,
              10,
              4,
              90,
              111,
              110,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([16, 122, 111, 110, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              59,
              58,
              4,
              122,
              111,
              110,
              101,
              50,
              51,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              122,
              111,
              110,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a zone. */
    deleteZone: {
      name: "DeleteZone",
      requestType: DeleteZoneRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Signals the state of a zone. */
    signalZoneState: {
      name: "SignalZoneState",
      requestType: SignalZoneStateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              25,
              10,
              4,
              90,
              111,
              110,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 110, 97, 109, 101, 44, 115, 116, 97, 116, 101, 95, 115, 105, 103, 110, 97, 108])],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              105,
              103,
              110,
              97,
              108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface GDCHardwareManagementServiceImplementation<CallContextExt = {}> {
  /** Lists orders in a given project and location. */
  listOrders(
    request: ListOrdersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOrdersResponse>>;
  /** Gets details of an order. */
  getOrder(request: GetOrderRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Order>>;
  /** Creates a new order in a given project and location. */
  createOrder(request: CreateOrderRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of an order. */
  updateOrder(request: UpdateOrderRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes an order. */
  deleteOrder(request: DeleteOrderRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Submits an order. */
  submitOrder(request: SubmitOrderRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists sites in a given project and location. */
  listSites(request: ListSitesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListSitesResponse>>;
  /** Gets details of a site. */
  getSite(request: GetSiteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Site>>;
  /** Creates a new site in a given project and location. */
  createSite(request: CreateSiteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a site. */
  updateSite(request: UpdateSiteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists hardware groups in a given order. */
  listHardwareGroups(
    request: ListHardwareGroupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListHardwareGroupsResponse>>;
  /** Gets details of a hardware group. */
  getHardwareGroup(
    request: GetHardwareGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HardwareGroup>>;
  /** Creates a new hardware group in a given order. */
  createHardwareGroup(
    request: CreateHardwareGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a hardware group. */
  updateHardwareGroup(
    request: UpdateHardwareGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a hardware group. */
  deleteHardwareGroup(
    request: DeleteHardwareGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists hardware in a given project and location. */
  listHardware(
    request: ListHardwareRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListHardwareResponse>>;
  /** Gets hardware details. */
  getHardware(request: GetHardwareRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Hardware>>;
  /** Creates new hardware in a given project and location. */
  createHardware(
    request: CreateHardwareRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates hardware parameters. */
  updateHardware(
    request: UpdateHardwareRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes hardware. */
  deleteHardware(
    request: DeleteHardwareRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists the comments on an order. */
  listComments(
    request: ListCommentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCommentsResponse>>;
  /** Gets the content of a comment. */
  getComment(request: GetCommentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Comment>>;
  /** Creates a new comment on an order. */
  createComment(request: CreateCommentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Record Action on a Comment. If the Action specified in the request is READ,
   * the viewed time in the comment is set to the time the request was received.
   * If the comment is already marked as read, subsequent calls will be ignored.
   * If the Action is UNREAD, the viewed time is cleared from the comment.
   */
  recordActionOnComment(
    request: RecordActionOnCommentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Comment>>;
  /** Lists the changes made to an order. */
  listChangeLogEntries(
    request: ListChangeLogEntriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListChangeLogEntriesResponse>>;
  /** Gets details of a change to an order. */
  getChangeLogEntry(
    request: GetChangeLogEntryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ChangeLogEntry>>;
  /** Lists SKUs for a given project and location. */
  listSkus(request: ListSkusRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListSkusResponse>>;
  /** Gets details of an SKU. */
  getSku(request: GetSkuRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Sku>>;
  /** Lists zones in a given project and location. */
  listZones(request: ListZonesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListZonesResponse>>;
  /** Gets details of a zone. */
  getZone(request: GetZoneRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Zone>>;
  /** Creates a new zone in a given project and location. */
  createZone(request: CreateZoneRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a zone. */
  updateZone(request: UpdateZoneRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a zone. */
  deleteZone(request: DeleteZoneRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Signals the state of a zone. */
  signalZoneState(
    request: SignalZoneStateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface GDCHardwareManagementClient<CallOptionsExt = {}> {
  /** Lists orders in a given project and location. */
  listOrders(
    request: DeepPartial<ListOrdersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOrdersResponse>;
  /** Gets details of an order. */
  getOrder(request: DeepPartial<GetOrderRequest>, options?: CallOptions & CallOptionsExt): Promise<Order>;
  /** Creates a new order in a given project and location. */
  createOrder(request: DeepPartial<CreateOrderRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the parameters of an order. */
  updateOrder(request: DeepPartial<UpdateOrderRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes an order. */
  deleteOrder(request: DeepPartial<DeleteOrderRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Submits an order. */
  submitOrder(request: DeepPartial<SubmitOrderRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists sites in a given project and location. */
  listSites(request: DeepPartial<ListSitesRequest>, options?: CallOptions & CallOptionsExt): Promise<ListSitesResponse>;
  /** Gets details of a site. */
  getSite(request: DeepPartial<GetSiteRequest>, options?: CallOptions & CallOptionsExt): Promise<Site>;
  /** Creates a new site in a given project and location. */
  createSite(request: DeepPartial<CreateSiteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the parameters of a site. */
  updateSite(request: DeepPartial<UpdateSiteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists hardware groups in a given order. */
  listHardwareGroups(
    request: DeepPartial<ListHardwareGroupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListHardwareGroupsResponse>;
  /** Gets details of a hardware group. */
  getHardwareGroup(
    request: DeepPartial<GetHardwareGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HardwareGroup>;
  /** Creates a new hardware group in a given order. */
  createHardwareGroup(
    request: DeepPartial<CreateHardwareGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a hardware group. */
  updateHardwareGroup(
    request: DeepPartial<UpdateHardwareGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a hardware group. */
  deleteHardwareGroup(
    request: DeepPartial<DeleteHardwareGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists hardware in a given project and location. */
  listHardware(
    request: DeepPartial<ListHardwareRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListHardwareResponse>;
  /** Gets hardware details. */
  getHardware(request: DeepPartial<GetHardwareRequest>, options?: CallOptions & CallOptionsExt): Promise<Hardware>;
  /** Creates new hardware in a given project and location. */
  createHardware(
    request: DeepPartial<CreateHardwareRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates hardware parameters. */
  updateHardware(
    request: DeepPartial<UpdateHardwareRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes hardware. */
  deleteHardware(
    request: DeepPartial<DeleteHardwareRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists the comments on an order. */
  listComments(
    request: DeepPartial<ListCommentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCommentsResponse>;
  /** Gets the content of a comment. */
  getComment(request: DeepPartial<GetCommentRequest>, options?: CallOptions & CallOptionsExt): Promise<Comment>;
  /** Creates a new comment on an order. */
  createComment(request: DeepPartial<CreateCommentRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Record Action on a Comment. If the Action specified in the request is READ,
   * the viewed time in the comment is set to the time the request was received.
   * If the comment is already marked as read, subsequent calls will be ignored.
   * If the Action is UNREAD, the viewed time is cleared from the comment.
   */
  recordActionOnComment(
    request: DeepPartial<RecordActionOnCommentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Comment>;
  /** Lists the changes made to an order. */
  listChangeLogEntries(
    request: DeepPartial<ListChangeLogEntriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListChangeLogEntriesResponse>;
  /** Gets details of a change to an order. */
  getChangeLogEntry(
    request: DeepPartial<GetChangeLogEntryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ChangeLogEntry>;
  /** Lists SKUs for a given project and location. */
  listSkus(request: DeepPartial<ListSkusRequest>, options?: CallOptions & CallOptionsExt): Promise<ListSkusResponse>;
  /** Gets details of an SKU. */
  getSku(request: DeepPartial<GetSkuRequest>, options?: CallOptions & CallOptionsExt): Promise<Sku>;
  /** Lists zones in a given project and location. */
  listZones(request: DeepPartial<ListZonesRequest>, options?: CallOptions & CallOptionsExt): Promise<ListZonesResponse>;
  /** Gets details of a zone. */
  getZone(request: DeepPartial<GetZoneRequest>, options?: CallOptions & CallOptionsExt): Promise<Zone>;
  /** Creates a new zone in a given project and location. */
  createZone(request: DeepPartial<CreateZoneRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the parameters of a zone. */
  updateZone(request: DeepPartial<UpdateZoneRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a zone. */
  deleteZone(request: DeepPartial<DeleteZoneRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Signals the state of a zone. */
  signalZoneState(
    request: DeepPartial<SignalZoneStateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
