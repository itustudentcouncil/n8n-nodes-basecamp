// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/osconfig/agentendpoint/v1beta/agentendpoint.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { EffectiveGuestPolicy, LookupEffectiveGuestPolicyRequest } from "./guest_policies.js";
import {
  ApplyPatchesTaskOutput,
  ApplyPatchesTaskProgress,
  ExecStepTaskOutput,
  ExecStepTaskProgress,
  Task,
  TaskDirective,
  taskDirectiveFromJSON,
  taskDirectiveToJSON,
  TaskType,
  taskTypeFromJSON,
  taskTypeToJSON,
} from "./tasks.js";

export const protobufPackage = "google.cloud.osconfig.agentendpoint.v1beta";

/** A request message to receive task notifications. */
export interface ReceiveTaskNotificationRequest {
  /**
   * Required. This is the Compute Engine instance identity token described in
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   * where the audience is 'osconfig.googleapis.com' and the format is 'full'.
   */
  instanceIdToken: string;
  /** Required. The version of the agent making the request. */
  agentVersion: string;
}

/**
 * The streaming rpc message that notifies the agent when it has a task
 * that it needs to perform on the VM instance.
 */
export interface ReceiveTaskNotificationResponse {
}

/** A request message for signaling the start of a task execution. */
export interface StartNextTaskRequest {
  /**
   * Required. This is the Compute Engine instance identity token described in
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   * where the audience is 'osconfig.googleapis.com' and the format is 'full'.
   */
  instanceIdToken: string;
}

/** A response message that contains the details of the task to work on. */
export interface StartNextTaskResponse {
  /**
   * The details of the task that should be worked on.  Can be empty if there
   * is no new task to work on.
   */
  task: Task | undefined;
}

/** A request message for reporting the progress of current task. */
export interface ReportTaskProgressRequest {
  /**
   * Required. This is the Compute Engine instance identity token described in
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   * where the audience is 'osconfig.googleapis.com' and the format is 'full'.
   */
  instanceIdToken: string;
  /** Required. Unique identifier of the task this applies to. */
  taskId: string;
  /**
   * Required. The type of task to report progress on.
   *
   * Progress must include the appropriate message based on this enum as
   * specified below:
   * APPLY_PATCHES = ApplyPatchesTaskProgress
   * EXEC_STEP = Progress not supported for this type.
   * APPLY_CONFIG_TASK = ApplyConfigTaskProgress
   */
  taskType: TaskType;
  /** Details about the progress of the apply patches task. */
  applyPatchesTaskProgress?:
    | ApplyPatchesTaskProgress
    | undefined;
  /** Details about the progress of the exec step task. */
  execStepTaskProgress?: ExecStepTaskProgress | undefined;
}

/** The response message after the agent reported the current task progress. */
export interface ReportTaskProgressResponse {
  /** Instructs agent to continue or not. */
  taskDirective: TaskDirective;
}

/** A request message for signaling the completion of a task execution. */
export interface ReportTaskCompleteRequest {
  /**
   * Required. This is the Compute Engine instance identity token described in
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   * where the audience is 'osconfig.googleapis.com' and the format is 'full'.
   */
  instanceIdToken: string;
  /** Required. Unique identifier of the task this applies to. */
  taskId: string;
  /**
   * Required. The type of task to report completed.
   *
   * The output must include the appropriate message based on the following
   * enum values:
   * APPLY_PATCHES = ApplyPatchesTaskOutput
   * EXEC_STEP = ExecStepTaskOutput
   * APPLY_CONFIG_TASK = ApplyConfigTaskOutput
   */
  taskType: TaskType;
  /** Descriptive error message if the task execution ended in error. */
  errorMessage: string;
  /** Final output details of the apply patches task; */
  applyPatchesTaskOutput?:
    | ApplyPatchesTaskOutput
    | undefined;
  /** Final output details of the exec step task; */
  execStepTaskOutput?: ExecStepTaskOutput | undefined;
}

/** The response message after the agent signaled the current task complete. */
export interface ReportTaskCompleteResponse {
}

/** The request message for registering the agent. */
export interface RegisterAgentRequest {
  /**
   * Required. This is the Compute Engine instance identity token described in
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   * where the audience is 'osconfig.googleapis.com' and the format is 'full'.
   */
  instanceIdToken: string;
  /** Required. The version of the agent. */
  agentVersion: string;
  /**
   * Required. The capabilities supported by the agent. Supported values are:
   * PATCH_GA
   * GUEST_POLICY_BETA
   * CONFIG_V1
   */
  supportedCapabilities: string[];
  /**
   * The operating system long name.
   * For example 'Debian GNU/Linux 9' or 'Microsoft Window Server 2019
   * Datacenter'.
   */
  osLongName: string;
  /**
   * The operating system short name.
   * For example, 'windows' or 'debian'.
   */
  osShortName: string;
  /** The version of the operating system. */
  osVersion: string;
  /** The system architecture of the operating system. */
  osArchitecture: string;
}

/** The response message after the agent registered. */
export interface RegisterAgentResponse {
}

function createBaseReceiveTaskNotificationRequest(): ReceiveTaskNotificationRequest {
  return { instanceIdToken: "", agentVersion: "" };
}

export const ReceiveTaskNotificationRequest: MessageFns<ReceiveTaskNotificationRequest> = {
  encode(message: ReceiveTaskNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceIdToken !== "") {
      writer.uint32(10).string(message.instanceIdToken);
    }
    if (message.agentVersion !== "") {
      writer.uint32(18).string(message.agentVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReceiveTaskNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiveTaskNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instanceIdToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReceiveTaskNotificationRequest {
    return {
      instanceIdToken: isSet(object.instanceIdToken) ? globalThis.String(object.instanceIdToken) : "",
      agentVersion: isSet(object.agentVersion) ? globalThis.String(object.agentVersion) : "",
    };
  },

  toJSON(message: ReceiveTaskNotificationRequest): unknown {
    const obj: any = {};
    if (message.instanceIdToken !== "") {
      obj.instanceIdToken = message.instanceIdToken;
    }
    if (message.agentVersion !== "") {
      obj.agentVersion = message.agentVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<ReceiveTaskNotificationRequest>): ReceiveTaskNotificationRequest {
    return ReceiveTaskNotificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReceiveTaskNotificationRequest>): ReceiveTaskNotificationRequest {
    const message = createBaseReceiveTaskNotificationRequest();
    message.instanceIdToken = object.instanceIdToken ?? "";
    message.agentVersion = object.agentVersion ?? "";
    return message;
  },
};

function createBaseReceiveTaskNotificationResponse(): ReceiveTaskNotificationResponse {
  return {};
}

export const ReceiveTaskNotificationResponse: MessageFns<ReceiveTaskNotificationResponse> = {
  encode(_: ReceiveTaskNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReceiveTaskNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiveTaskNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReceiveTaskNotificationResponse {
    return {};
  },

  toJSON(_: ReceiveTaskNotificationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ReceiveTaskNotificationResponse>): ReceiveTaskNotificationResponse {
    return ReceiveTaskNotificationResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ReceiveTaskNotificationResponse>): ReceiveTaskNotificationResponse {
    const message = createBaseReceiveTaskNotificationResponse();
    return message;
  },
};

function createBaseStartNextTaskRequest(): StartNextTaskRequest {
  return { instanceIdToken: "" };
}

export const StartNextTaskRequest: MessageFns<StartNextTaskRequest> = {
  encode(message: StartNextTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceIdToken !== "") {
      writer.uint32(10).string(message.instanceIdToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartNextTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartNextTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instanceIdToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartNextTaskRequest {
    return { instanceIdToken: isSet(object.instanceIdToken) ? globalThis.String(object.instanceIdToken) : "" };
  },

  toJSON(message: StartNextTaskRequest): unknown {
    const obj: any = {};
    if (message.instanceIdToken !== "") {
      obj.instanceIdToken = message.instanceIdToken;
    }
    return obj;
  },

  create(base?: DeepPartial<StartNextTaskRequest>): StartNextTaskRequest {
    return StartNextTaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartNextTaskRequest>): StartNextTaskRequest {
    const message = createBaseStartNextTaskRequest();
    message.instanceIdToken = object.instanceIdToken ?? "";
    return message;
  },
};

function createBaseStartNextTaskResponse(): StartNextTaskResponse {
  return { task: undefined };
}

export const StartNextTaskResponse: MessageFns<StartNextTaskResponse> = {
  encode(message: StartNextTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      Task.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartNextTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartNextTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.task = Task.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartNextTaskResponse {
    return { task: isSet(object.task) ? Task.fromJSON(object.task) : undefined };
  },

  toJSON(message: StartNextTaskResponse): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = Task.toJSON(message.task);
    }
    return obj;
  },

  create(base?: DeepPartial<StartNextTaskResponse>): StartNextTaskResponse {
    return StartNextTaskResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartNextTaskResponse>): StartNextTaskResponse {
    const message = createBaseStartNextTaskResponse();
    message.task = (object.task !== undefined && object.task !== null) ? Task.fromPartial(object.task) : undefined;
    return message;
  },
};

function createBaseReportTaskProgressRequest(): ReportTaskProgressRequest {
  return {
    instanceIdToken: "",
    taskId: "",
    taskType: 0,
    applyPatchesTaskProgress: undefined,
    execStepTaskProgress: undefined,
  };
}

export const ReportTaskProgressRequest: MessageFns<ReportTaskProgressRequest> = {
  encode(message: ReportTaskProgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceIdToken !== "") {
      writer.uint32(10).string(message.instanceIdToken);
    }
    if (message.taskId !== "") {
      writer.uint32(18).string(message.taskId);
    }
    if (message.taskType !== 0) {
      writer.uint32(24).int32(message.taskType);
    }
    if (message.applyPatchesTaskProgress !== undefined) {
      ApplyPatchesTaskProgress.encode(message.applyPatchesTaskProgress, writer.uint32(34).fork()).join();
    }
    if (message.execStepTaskProgress !== undefined) {
      ExecStepTaskProgress.encode(message.execStepTaskProgress, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportTaskProgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportTaskProgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instanceIdToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.taskId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.taskType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.applyPatchesTaskProgress = ApplyPatchesTaskProgress.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.execStepTaskProgress = ExecStepTaskProgress.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportTaskProgressRequest {
    return {
      instanceIdToken: isSet(object.instanceIdToken) ? globalThis.String(object.instanceIdToken) : "",
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      taskType: isSet(object.taskType) ? taskTypeFromJSON(object.taskType) : 0,
      applyPatchesTaskProgress: isSet(object.applyPatchesTaskProgress)
        ? ApplyPatchesTaskProgress.fromJSON(object.applyPatchesTaskProgress)
        : undefined,
      execStepTaskProgress: isSet(object.execStepTaskProgress)
        ? ExecStepTaskProgress.fromJSON(object.execStepTaskProgress)
        : undefined,
    };
  },

  toJSON(message: ReportTaskProgressRequest): unknown {
    const obj: any = {};
    if (message.instanceIdToken !== "") {
      obj.instanceIdToken = message.instanceIdToken;
    }
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.taskType !== 0) {
      obj.taskType = taskTypeToJSON(message.taskType);
    }
    if (message.applyPatchesTaskProgress !== undefined) {
      obj.applyPatchesTaskProgress = ApplyPatchesTaskProgress.toJSON(message.applyPatchesTaskProgress);
    }
    if (message.execStepTaskProgress !== undefined) {
      obj.execStepTaskProgress = ExecStepTaskProgress.toJSON(message.execStepTaskProgress);
    }
    return obj;
  },

  create(base?: DeepPartial<ReportTaskProgressRequest>): ReportTaskProgressRequest {
    return ReportTaskProgressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportTaskProgressRequest>): ReportTaskProgressRequest {
    const message = createBaseReportTaskProgressRequest();
    message.instanceIdToken = object.instanceIdToken ?? "";
    message.taskId = object.taskId ?? "";
    message.taskType = object.taskType ?? 0;
    message.applyPatchesTaskProgress =
      (object.applyPatchesTaskProgress !== undefined && object.applyPatchesTaskProgress !== null)
        ? ApplyPatchesTaskProgress.fromPartial(object.applyPatchesTaskProgress)
        : undefined;
    message.execStepTaskProgress = (object.execStepTaskProgress !== undefined && object.execStepTaskProgress !== null)
      ? ExecStepTaskProgress.fromPartial(object.execStepTaskProgress)
      : undefined;
    return message;
  },
};

function createBaseReportTaskProgressResponse(): ReportTaskProgressResponse {
  return { taskDirective: 0 };
}

export const ReportTaskProgressResponse: MessageFns<ReportTaskProgressResponse> = {
  encode(message: ReportTaskProgressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskDirective !== 0) {
      writer.uint32(8).int32(message.taskDirective);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportTaskProgressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportTaskProgressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.taskDirective = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportTaskProgressResponse {
    return { taskDirective: isSet(object.taskDirective) ? taskDirectiveFromJSON(object.taskDirective) : 0 };
  },

  toJSON(message: ReportTaskProgressResponse): unknown {
    const obj: any = {};
    if (message.taskDirective !== 0) {
      obj.taskDirective = taskDirectiveToJSON(message.taskDirective);
    }
    return obj;
  },

  create(base?: DeepPartial<ReportTaskProgressResponse>): ReportTaskProgressResponse {
    return ReportTaskProgressResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportTaskProgressResponse>): ReportTaskProgressResponse {
    const message = createBaseReportTaskProgressResponse();
    message.taskDirective = object.taskDirective ?? 0;
    return message;
  },
};

function createBaseReportTaskCompleteRequest(): ReportTaskCompleteRequest {
  return {
    instanceIdToken: "",
    taskId: "",
    taskType: 0,
    errorMessage: "",
    applyPatchesTaskOutput: undefined,
    execStepTaskOutput: undefined,
  };
}

export const ReportTaskCompleteRequest: MessageFns<ReportTaskCompleteRequest> = {
  encode(message: ReportTaskCompleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceIdToken !== "") {
      writer.uint32(10).string(message.instanceIdToken);
    }
    if (message.taskId !== "") {
      writer.uint32(18).string(message.taskId);
    }
    if (message.taskType !== 0) {
      writer.uint32(24).int32(message.taskType);
    }
    if (message.errorMessage !== "") {
      writer.uint32(34).string(message.errorMessage);
    }
    if (message.applyPatchesTaskOutput !== undefined) {
      ApplyPatchesTaskOutput.encode(message.applyPatchesTaskOutput, writer.uint32(42).fork()).join();
    }
    if (message.execStepTaskOutput !== undefined) {
      ExecStepTaskOutput.encode(message.execStepTaskOutput, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportTaskCompleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportTaskCompleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instanceIdToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.taskId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.taskType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.applyPatchesTaskOutput = ApplyPatchesTaskOutput.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.execStepTaskOutput = ExecStepTaskOutput.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportTaskCompleteRequest {
    return {
      instanceIdToken: isSet(object.instanceIdToken) ? globalThis.String(object.instanceIdToken) : "",
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      taskType: isSet(object.taskType) ? taskTypeFromJSON(object.taskType) : 0,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      applyPatchesTaskOutput: isSet(object.applyPatchesTaskOutput)
        ? ApplyPatchesTaskOutput.fromJSON(object.applyPatchesTaskOutput)
        : undefined,
      execStepTaskOutput: isSet(object.execStepTaskOutput)
        ? ExecStepTaskOutput.fromJSON(object.execStepTaskOutput)
        : undefined,
    };
  },

  toJSON(message: ReportTaskCompleteRequest): unknown {
    const obj: any = {};
    if (message.instanceIdToken !== "") {
      obj.instanceIdToken = message.instanceIdToken;
    }
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.taskType !== 0) {
      obj.taskType = taskTypeToJSON(message.taskType);
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.applyPatchesTaskOutput !== undefined) {
      obj.applyPatchesTaskOutput = ApplyPatchesTaskOutput.toJSON(message.applyPatchesTaskOutput);
    }
    if (message.execStepTaskOutput !== undefined) {
      obj.execStepTaskOutput = ExecStepTaskOutput.toJSON(message.execStepTaskOutput);
    }
    return obj;
  },

  create(base?: DeepPartial<ReportTaskCompleteRequest>): ReportTaskCompleteRequest {
    return ReportTaskCompleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportTaskCompleteRequest>): ReportTaskCompleteRequest {
    const message = createBaseReportTaskCompleteRequest();
    message.instanceIdToken = object.instanceIdToken ?? "";
    message.taskId = object.taskId ?? "";
    message.taskType = object.taskType ?? 0;
    message.errorMessage = object.errorMessage ?? "";
    message.applyPatchesTaskOutput =
      (object.applyPatchesTaskOutput !== undefined && object.applyPatchesTaskOutput !== null)
        ? ApplyPatchesTaskOutput.fromPartial(object.applyPatchesTaskOutput)
        : undefined;
    message.execStepTaskOutput = (object.execStepTaskOutput !== undefined && object.execStepTaskOutput !== null)
      ? ExecStepTaskOutput.fromPartial(object.execStepTaskOutput)
      : undefined;
    return message;
  },
};

function createBaseReportTaskCompleteResponse(): ReportTaskCompleteResponse {
  return {};
}

export const ReportTaskCompleteResponse: MessageFns<ReportTaskCompleteResponse> = {
  encode(_: ReportTaskCompleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportTaskCompleteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportTaskCompleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReportTaskCompleteResponse {
    return {};
  },

  toJSON(_: ReportTaskCompleteResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ReportTaskCompleteResponse>): ReportTaskCompleteResponse {
    return ReportTaskCompleteResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ReportTaskCompleteResponse>): ReportTaskCompleteResponse {
    const message = createBaseReportTaskCompleteResponse();
    return message;
  },
};

function createBaseRegisterAgentRequest(): RegisterAgentRequest {
  return {
    instanceIdToken: "",
    agentVersion: "",
    supportedCapabilities: [],
    osLongName: "",
    osShortName: "",
    osVersion: "",
    osArchitecture: "",
  };
}

export const RegisterAgentRequest: MessageFns<RegisterAgentRequest> = {
  encode(message: RegisterAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceIdToken !== "") {
      writer.uint32(10).string(message.instanceIdToken);
    }
    if (message.agentVersion !== "") {
      writer.uint32(18).string(message.agentVersion);
    }
    for (const v of message.supportedCapabilities) {
      writer.uint32(26).string(v!);
    }
    if (message.osLongName !== "") {
      writer.uint32(34).string(message.osLongName);
    }
    if (message.osShortName !== "") {
      writer.uint32(42).string(message.osShortName);
    }
    if (message.osVersion !== "") {
      writer.uint32(50).string(message.osVersion);
    }
    if (message.osArchitecture !== "") {
      writer.uint32(58).string(message.osArchitecture);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instanceIdToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.supportedCapabilities.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.osLongName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.osShortName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.osVersion = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.osArchitecture = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterAgentRequest {
    return {
      instanceIdToken: isSet(object.instanceIdToken) ? globalThis.String(object.instanceIdToken) : "",
      agentVersion: isSet(object.agentVersion) ? globalThis.String(object.agentVersion) : "",
      supportedCapabilities: globalThis.Array.isArray(object?.supportedCapabilities)
        ? object.supportedCapabilities.map((e: any) => globalThis.String(e))
        : [],
      osLongName: isSet(object.osLongName) ? globalThis.String(object.osLongName) : "",
      osShortName: isSet(object.osShortName) ? globalThis.String(object.osShortName) : "",
      osVersion: isSet(object.osVersion) ? globalThis.String(object.osVersion) : "",
      osArchitecture: isSet(object.osArchitecture) ? globalThis.String(object.osArchitecture) : "",
    };
  },

  toJSON(message: RegisterAgentRequest): unknown {
    const obj: any = {};
    if (message.instanceIdToken !== "") {
      obj.instanceIdToken = message.instanceIdToken;
    }
    if (message.agentVersion !== "") {
      obj.agentVersion = message.agentVersion;
    }
    if (message.supportedCapabilities?.length) {
      obj.supportedCapabilities = message.supportedCapabilities;
    }
    if (message.osLongName !== "") {
      obj.osLongName = message.osLongName;
    }
    if (message.osShortName !== "") {
      obj.osShortName = message.osShortName;
    }
    if (message.osVersion !== "") {
      obj.osVersion = message.osVersion;
    }
    if (message.osArchitecture !== "") {
      obj.osArchitecture = message.osArchitecture;
    }
    return obj;
  },

  create(base?: DeepPartial<RegisterAgentRequest>): RegisterAgentRequest {
    return RegisterAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegisterAgentRequest>): RegisterAgentRequest {
    const message = createBaseRegisterAgentRequest();
    message.instanceIdToken = object.instanceIdToken ?? "";
    message.agentVersion = object.agentVersion ?? "";
    message.supportedCapabilities = object.supportedCapabilities?.map((e) => e) || [];
    message.osLongName = object.osLongName ?? "";
    message.osShortName = object.osShortName ?? "";
    message.osVersion = object.osVersion ?? "";
    message.osArchitecture = object.osArchitecture ?? "";
    return message;
  },
};

function createBaseRegisterAgentResponse(): RegisterAgentResponse {
  return {};
}

export const RegisterAgentResponse: MessageFns<RegisterAgentResponse> = {
  encode(_: RegisterAgentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterAgentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RegisterAgentResponse {
    return {};
  },

  toJSON(_: RegisterAgentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RegisterAgentResponse>): RegisterAgentResponse {
    return RegisterAgentResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RegisterAgentResponse>): RegisterAgentResponse {
    const message = createBaseRegisterAgentResponse();
    return message;
  },
};

/** OS Config agent endpoint API. */
export type AgentEndpointServiceDefinition = typeof AgentEndpointServiceDefinition;
export const AgentEndpointServiceDefinition = {
  name: "AgentEndpointService",
  fullName: "google.cloud.osconfig.agentendpoint.v1beta.AgentEndpointService",
  methods: {
    /** Stream established by client to receive Task notifications. */
    receiveTaskNotification: {
      name: "ReceiveTaskNotification",
      requestType: ReceiveTaskNotificationRequest,
      requestStream: false,
      responseType: ReceiveTaskNotificationResponse,
      responseStream: true,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              95,
              105,
              100,
              95,
              116,
              111,
              107,
              101,
              110,
              44,
              97,
              103,
              101,
              110,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /** Signals the start of a task execution and returns the task info. */
    startNextTask: {
      name: "StartNextTask",
      requestType: StartNextTaskRequest,
      requestStream: false,
      responseType: StartNextTaskResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 105, 110, 115, 116, 97, 110, 99, 101, 95, 105, 100, 95, 116, 111, 107, 101, 110])],
        },
      },
    },
    /** Signals an intermediary progress checkpoint in task execution. */
    reportTaskProgress: {
      name: "ReportTaskProgress",
      requestType: ReportTaskProgressRequest,
      requestStream: false,
      responseType: ReportTaskProgressResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              95,
              105,
              100,
              95,
              116,
              111,
              107,
              101,
              110,
              44,
              116,
              97,
              115,
              107,
              95,
              105,
              100,
              44,
              116,
              97,
              115,
              107,
              95,
              116,
              121,
              112,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Signals that the task execution is complete and optionally returns the next
     * task.
     */
    reportTaskComplete: {
      name: "ReportTaskComplete",
      requestType: ReportTaskCompleteRequest,
      requestStream: false,
      responseType: ReportTaskCompleteResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              49,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              95,
              105,
              100,
              95,
              116,
              111,
              107,
              101,
              110,
              44,
              116,
              97,
              115,
              107,
              95,
              105,
              100,
              44,
              116,
              97,
              115,
              107,
              95,
              116,
              121,
              112,
              101,
              44,
              101,
              114,
              114,
              111,
              114,
              95,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Lookup the effective guest policy that applies to a VM instance. This
     * lookup merges all policies that are assigned to the instance ancestry.
     */
    lookupEffectiveGuestPolicy: {
      name: "LookupEffectiveGuestPolicy",
      requestType: LookupEffectiveGuestPolicyRequest,
      requestStream: false,
      responseType: EffectiveGuestPolicy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              58,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              95,
              105,
              100,
              95,
              116,
              111,
              107,
              101,
              110,
              44,
              111,
              115,
              95,
              115,
              104,
              111,
              114,
              116,
              95,
              110,
              97,
              109,
              101,
              44,
              111,
              115,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              111,
              115,
              95,
              97,
              114,
              99,
              104,
              105,
              116,
              101,
              99,
              116,
              117,
              114,
              101,
            ]),
          ],
        },
      },
    },
    /** Registers the agent running on the VM. */
    registerAgent: {
      name: "RegisterAgent",
      requestType: RegisterAgentRequest,
      requestStream: false,
      responseType: RegisterAgentResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              54,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              95,
              105,
              100,
              95,
              116,
              111,
              107,
              101,
              110,
              44,
              97,
              103,
              101,
              110,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              101,
              100,
              95,
              99,
              97,
              112,
              97,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AgentEndpointServiceImplementation<CallContextExt = {}> {
  /** Stream established by client to receive Task notifications. */
  receiveTaskNotification(
    request: ReceiveTaskNotificationRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<ReceiveTaskNotificationResponse>>;
  /** Signals the start of a task execution and returns the task info. */
  startNextTask(
    request: StartNextTaskRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StartNextTaskResponse>>;
  /** Signals an intermediary progress checkpoint in task execution. */
  reportTaskProgress(
    request: ReportTaskProgressRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReportTaskProgressResponse>>;
  /**
   * Signals that the task execution is complete and optionally returns the next
   * task.
   */
  reportTaskComplete(
    request: ReportTaskCompleteRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReportTaskCompleteResponse>>;
  /**
   * Lookup the effective guest policy that applies to a VM instance. This
   * lookup merges all policies that are assigned to the instance ancestry.
   */
  lookupEffectiveGuestPolicy(
    request: LookupEffectiveGuestPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EffectiveGuestPolicy>>;
  /** Registers the agent running on the VM. */
  registerAgent(
    request: RegisterAgentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RegisterAgentResponse>>;
}

export interface AgentEndpointServiceClient<CallOptionsExt = {}> {
  /** Stream established by client to receive Task notifications. */
  receiveTaskNotification(
    request: DeepPartial<ReceiveTaskNotificationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<ReceiveTaskNotificationResponse>;
  /** Signals the start of a task execution and returns the task info. */
  startNextTask(
    request: DeepPartial<StartNextTaskRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StartNextTaskResponse>;
  /** Signals an intermediary progress checkpoint in task execution. */
  reportTaskProgress(
    request: DeepPartial<ReportTaskProgressRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReportTaskProgressResponse>;
  /**
   * Signals that the task execution is complete and optionally returns the next
   * task.
   */
  reportTaskComplete(
    request: DeepPartial<ReportTaskCompleteRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReportTaskCompleteResponse>;
  /**
   * Lookup the effective guest policy that applies to a VM instance. This
   * lookup merges all policies that are assigned to the instance ancestry.
   */
  lookupEffectiveGuestPolicy(
    request: DeepPartial<LookupEffectiveGuestPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EffectiveGuestPolicy>;
  /** Registers the agent running on the VM. */
  registerAgent(
    request: DeepPartial<RegisterAgentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RegisterAgentResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
