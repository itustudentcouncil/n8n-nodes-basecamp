// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/kms/inventory/v1/key_dashboard_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { CryptoKey } from "../../v1/resources.js";

export const protobufPackage = "google.cloud.kms.inventory.v1";

/**
 * Request message for
 * [KeyDashboardService.ListCryptoKeys][google.cloud.kms.inventory.v1.KeyDashboardService.ListCryptoKeys].
 */
export interface ListCryptoKeysRequest {
  /**
   * Required. The Google Cloud project for which to retrieve key metadata, in
   * the format `projects/*`
   */
  parent: string;
  /**
   * Optional. The maximum number of keys to return. The service may return
   * fewer than this value. If unspecified, at most 1000 keys will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. Pass this into a subsequent request in order to receive the next
   * page of results.
   */
  pageToken: string;
}

/**
 * Response message for
 * [KeyDashboardService.ListCryptoKeys][google.cloud.kms.inventory.v1.KeyDashboardService.ListCryptoKeys].
 */
export interface ListCryptoKeysResponse {
  /** The list of [CryptoKeys][google.cloud.kms.v1.CryptoKey]. */
  cryptoKeys: CryptoKey[];
  /**
   * The page token returned from the previous response if the next page is
   * desired.
   */
  nextPageToken: string;
}

function createBaseListCryptoKeysRequest(): ListCryptoKeysRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListCryptoKeysRequest: MessageFns<ListCryptoKeysRequest> = {
  encode(message: ListCryptoKeysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCryptoKeysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCryptoKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCryptoKeysRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListCryptoKeysRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCryptoKeysRequest>): ListCryptoKeysRequest {
    return ListCryptoKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCryptoKeysRequest>): ListCryptoKeysRequest {
    const message = createBaseListCryptoKeysRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListCryptoKeysResponse(): ListCryptoKeysResponse {
  return { cryptoKeys: [], nextPageToken: "" };
}

export const ListCryptoKeysResponse: MessageFns<ListCryptoKeysResponse> = {
  encode(message: ListCryptoKeysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cryptoKeys) {
      CryptoKey.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCryptoKeysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCryptoKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cryptoKeys.push(CryptoKey.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCryptoKeysResponse {
    return {
      cryptoKeys: globalThis.Array.isArray(object?.cryptoKeys)
        ? object.cryptoKeys.map((e: any) => CryptoKey.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCryptoKeysResponse): unknown {
    const obj: any = {};
    if (message.cryptoKeys?.length) {
      obj.cryptoKeys = message.cryptoKeys.map((e) => CryptoKey.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCryptoKeysResponse>): ListCryptoKeysResponse {
    return ListCryptoKeysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCryptoKeysResponse>): ListCryptoKeysResponse {
    const message = createBaseListCryptoKeysResponse();
    message.cryptoKeys = object.cryptoKeys?.map((e) => CryptoKey.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Provides a cross-region view of all Cloud KMS keys in a given Cloud project. */
export type KeyDashboardServiceDefinition = typeof KeyDashboardServiceDefinition;
export const KeyDashboardServiceDefinition = {
  name: "KeyDashboardService",
  fullName: "google.cloud.kms.inventory.v1.KeyDashboardService",
  methods: {
    /**
     * Returns cryptographic keys managed by Cloud KMS in a given Cloud project.
     * Note that this data is sourced from snapshots, meaning it may not
     * completely reflect the actual state of key metadata at call time.
     */
    listCryptoKeys: {
      name: "ListCryptoKeys",
      requestType: ListCryptoKeysRequest,
      requestStream: false,
      responseType: ListCryptoKeysResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              36,
              18,
              34,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              114,
              121,
              112,
              116,
              111,
              75,
              101,
              121,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface KeyDashboardServiceImplementation<CallContextExt = {}> {
  /**
   * Returns cryptographic keys managed by Cloud KMS in a given Cloud project.
   * Note that this data is sourced from snapshots, meaning it may not
   * completely reflect the actual state of key metadata at call time.
   */
  listCryptoKeys(
    request: ListCryptoKeysRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCryptoKeysResponse>>;
}

export interface KeyDashboardServiceClient<CallOptionsExt = {}> {
  /**
   * Returns cryptographic keys managed by Cloud KMS in a given Cloud project.
   * Note that this data is sourced from snapshots, meaning it may not
   * completely reflect the actual state of key metadata at call time.
   */
  listCryptoKeys(
    request: DeepPartial<ListCryptoKeysRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCryptoKeysResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
