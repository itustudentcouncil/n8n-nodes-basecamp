// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/kms/inventory/v1/key_tracking_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.kms.inventory.v1";

/**
 * Request message for
 * [KeyTrackingService.GetProtectedResourcesSummary][google.cloud.kms.inventory.v1.KeyTrackingService.GetProtectedResourcesSummary].
 */
export interface GetProtectedResourcesSummaryRequest {
  /**
   * Required. The resource name of the
   * [CryptoKey][google.cloud.kms.v1.CryptoKey].
   */
  name: string;
}

/**
 * Aggregate information about the resources protected by a Cloud KMS key in the
 * same Cloud organization as the key.
 */
export interface ProtectedResourcesSummary {
  /**
   * The full name of the ProtectedResourcesSummary resource.
   * Example:
   * projects/test-project/locations/us/keyRings/test-keyring/cryptoKeys/test-key/protectedResourcesSummary
   */
  name: string;
  /**
   * The total number of protected resources in the same Cloud organization as
   * the key.
   */
  resourceCount: Long;
  /**
   * The number of distinct Cloud projects in the same Cloud organization as the
   * key that have resources protected by the key.
   */
  projectCount: number;
  /** The number of resources protected by the key grouped by resource type. */
  resourceTypes: { [key: string]: Long };
  /** The number of resources protected by the key grouped by Cloud product. */
  cloudProducts: { [key: string]: Long };
  /** The number of resources protected by the key grouped by region. */
  locations: { [key: string]: Long };
}

export interface ProtectedResourcesSummary_ResourceTypesEntry {
  key: string;
  value: Long;
}

export interface ProtectedResourcesSummary_CloudProductsEntry {
  key: string;
  value: Long;
}

export interface ProtectedResourcesSummary_LocationsEntry {
  key: string;
  value: Long;
}

/**
 * Request message for
 * [KeyTrackingService.SearchProtectedResources][google.cloud.kms.inventory.v1.KeyTrackingService.SearchProtectedResources].
 */
export interface SearchProtectedResourcesRequest {
  /**
   * Required. Resource name of the organization.
   * Example: organizations/123
   */
  scope: string;
  /**
   * Required. The resource name of the
   * [CryptoKey][google.cloud.kms.v1.CryptoKey].
   */
  cryptoKey: string;
  /**
   * The maximum number of resources to return. The service may return fewer
   * than this value.
   * If unspecified, at most 500 resources will be returned.
   * The maximum value is 500; values above 500 will be coerced to 500.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [KeyTrackingService.SearchProtectedResources][google.cloud.kms.inventory.v1.KeyTrackingService.SearchProtectedResources]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [KeyTrackingService.SearchProtectedResources][google.cloud.kms.inventory.v1.KeyTrackingService.SearchProtectedResources]
   * must match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. A list of resource types that this request searches for. If
   * empty, it will search all the [trackable resource
   * types](https://cloud.google.com/kms/docs/view-key-usage#tracked-resource-types).
   *
   * Regular expressions are also supported. For example:
   *
   * * `compute.googleapis.com.*` snapshots resources whose type starts
   * with `compute.googleapis.com`.
   * * `.*Image` snapshots resources whose type ends with `Image`.
   * * `.*Image.*` snapshots resources whose type contains `Image`.
   *
   * See [RE2](https://github.com/google/re2/wiki/Syntax) for all supported
   * regular expression syntax. If the regular expression does not match any
   * supported resource type, an INVALID_ARGUMENT error will be returned.
   */
  resourceTypes: string[];
}

/**
 * Response message for
 * [KeyTrackingService.SearchProtectedResources][google.cloud.kms.inventory.v1.KeyTrackingService.SearchProtectedResources].
 */
export interface SearchProtectedResourcesResponse {
  /** Protected resources for this page. */
  protectedResources: ProtectedResource[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Metadata about a resource protected by a Cloud KMS key. */
export interface ProtectedResource {
  /**
   * The full resource name of the resource.
   * Example:
   * `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
   */
  name: string;
  /** Format: `projects/{PROJECT_NUMBER}`. */
  project: string;
  /** The ID of the project that owns the resource. */
  projectId: string;
  /**
   * The Cloud product that owns the resource.
   * Example: `compute`
   */
  cloudProduct: string;
  /** Example: `compute.googleapis.com/Disk` */
  resourceType: string;
  /**
   * Location can be `global`, regional like `us-east1`, or zonal like
   * `us-west1-b`.
   */
  location: string;
  /** A key-value pair of the resource's labels (v1) to their values. */
  labels: { [key: string]: string };
  /**
   * The name of the Cloud KMS
   * [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions?hl=en)
   * used to protect this resource via CMEK. This field is empty if the
   * Google Cloud product owning the resource does not provide key version data
   * to Asset Inventory. If there are multiple key versions protecting the
   * resource, then this is same value as the first element of
   * crypto_key_versions.
   */
  cryptoKeyVersion: string;
  /**
   * The names of the Cloud KMS
   * [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions?hl=en)
   * used to protect this resource via CMEK. This field is empty if the
   * Google Cloud product owning the resource does not provide key versions data
   * to Asset Inventory. The first element of this field is stored in
   * crypto_key_version.
   */
  cryptoKeyVersions: string[];
  /**
   * Output only. The time at which this resource was created. The granularity
   * is in seconds. Timestamp.nanos will always be 0.
   */
  createTime: Date | undefined;
}

export interface ProtectedResource_LabelsEntry {
  key: string;
  value: string;
}

function createBaseGetProtectedResourcesSummaryRequest(): GetProtectedResourcesSummaryRequest {
  return { name: "" };
}

export const GetProtectedResourcesSummaryRequest: MessageFns<GetProtectedResourcesSummaryRequest> = {
  encode(message: GetProtectedResourcesSummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProtectedResourcesSummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProtectedResourcesSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProtectedResourcesSummaryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProtectedResourcesSummaryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProtectedResourcesSummaryRequest>): GetProtectedResourcesSummaryRequest {
    return GetProtectedResourcesSummaryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProtectedResourcesSummaryRequest>): GetProtectedResourcesSummaryRequest {
    const message = createBaseGetProtectedResourcesSummaryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseProtectedResourcesSummary(): ProtectedResourcesSummary {
  return { name: "", resourceCount: Long.ZERO, projectCount: 0, resourceTypes: {}, cloudProducts: {}, locations: {} };
}

export const ProtectedResourcesSummary: MessageFns<ProtectedResourcesSummary> = {
  encode(message: ProtectedResourcesSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    if (!message.resourceCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.resourceCount.toString());
    }
    if (message.projectCount !== 0) {
      writer.uint32(16).int32(message.projectCount);
    }
    Object.entries(message.resourceTypes).forEach(([key, value]) => {
      ProtectedResourcesSummary_ResourceTypesEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    Object.entries(message.cloudProducts).forEach(([key, value]) => {
      ProtectedResourcesSummary_CloudProductsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    Object.entries(message.locations).forEach(([key, value]) => {
      ProtectedResourcesSummary_LocationsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtectedResourcesSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtectedResourcesSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        case 1:
          if (tag !== 8) {
            break;
          }

          message.resourceCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.projectCount = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = ProtectedResourcesSummary_ResourceTypesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.resourceTypes[entry3.key] = entry3.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = ProtectedResourcesSummary_CloudProductsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.cloudProducts[entry6.key] = entry6.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = ProtectedResourcesSummary_LocationsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.locations[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtectedResourcesSummary {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      resourceCount: isSet(object.resourceCount) ? Long.fromValue(object.resourceCount) : Long.ZERO,
      projectCount: isSet(object.projectCount) ? globalThis.Number(object.projectCount) : 0,
      resourceTypes: isObject(object.resourceTypes)
        ? Object.entries(object.resourceTypes).reduce<{ [key: string]: Long }>((acc, [key, value]) => {
          acc[key] = Long.fromValue(value as Long | string);
          return acc;
        }, {})
        : {},
      cloudProducts: isObject(object.cloudProducts)
        ? Object.entries(object.cloudProducts).reduce<{ [key: string]: Long }>((acc, [key, value]) => {
          acc[key] = Long.fromValue(value as Long | string);
          return acc;
        }, {})
        : {},
      locations: isObject(object.locations)
        ? Object.entries(object.locations).reduce<{ [key: string]: Long }>((acc, [key, value]) => {
          acc[key] = Long.fromValue(value as Long | string);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ProtectedResourcesSummary): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.resourceCount.equals(Long.ZERO)) {
      obj.resourceCount = (message.resourceCount || Long.ZERO).toString();
    }
    if (message.projectCount !== 0) {
      obj.projectCount = Math.round(message.projectCount);
    }
    if (message.resourceTypes) {
      const entries = Object.entries(message.resourceTypes);
      if (entries.length > 0) {
        obj.resourceTypes = {};
        entries.forEach(([k, v]) => {
          obj.resourceTypes[k] = v.toString();
        });
      }
    }
    if (message.cloudProducts) {
      const entries = Object.entries(message.cloudProducts);
      if (entries.length > 0) {
        obj.cloudProducts = {};
        entries.forEach(([k, v]) => {
          obj.cloudProducts[k] = v.toString();
        });
      }
    }
    if (message.locations) {
      const entries = Object.entries(message.locations);
      if (entries.length > 0) {
        obj.locations = {};
        entries.forEach(([k, v]) => {
          obj.locations[k] = v.toString();
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ProtectedResourcesSummary>): ProtectedResourcesSummary {
    return ProtectedResourcesSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProtectedResourcesSummary>): ProtectedResourcesSummary {
    const message = createBaseProtectedResourcesSummary();
    message.name = object.name ?? "";
    message.resourceCount = (object.resourceCount !== undefined && object.resourceCount !== null)
      ? Long.fromValue(object.resourceCount)
      : Long.ZERO;
    message.projectCount = object.projectCount ?? 0;
    message.resourceTypes = Object.entries(object.resourceTypes ?? {}).reduce<{ [key: string]: Long }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Long.fromValue(value);
        }
        return acc;
      },
      {},
    );
    message.cloudProducts = Object.entries(object.cloudProducts ?? {}).reduce<{ [key: string]: Long }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Long.fromValue(value);
        }
        return acc;
      },
      {},
    );
    message.locations = Object.entries(object.locations ?? {}).reduce<{ [key: string]: Long }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Long.fromValue(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseProtectedResourcesSummary_ResourceTypesEntry(): ProtectedResourcesSummary_ResourceTypesEntry {
  return { key: "", value: Long.ZERO };
}

export const ProtectedResourcesSummary_ResourceTypesEntry: MessageFns<ProtectedResourcesSummary_ResourceTypesEntry> = {
  encode(
    message: ProtectedResourcesSummary_ResourceTypesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (!message.value.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.value.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtectedResourcesSummary_ResourceTypesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtectedResourcesSummary_ResourceTypesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtectedResourcesSummary_ResourceTypesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Long.fromValue(object.value) : Long.ZERO,
    };
  },

  toJSON(message: ProtectedResourcesSummary_ResourceTypesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (!message.value.equals(Long.ZERO)) {
      obj.value = (message.value || Long.ZERO).toString();
    }
    return obj;
  },

  create(
    base?: DeepPartial<ProtectedResourcesSummary_ResourceTypesEntry>,
  ): ProtectedResourcesSummary_ResourceTypesEntry {
    return ProtectedResourcesSummary_ResourceTypesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ProtectedResourcesSummary_ResourceTypesEntry>,
  ): ProtectedResourcesSummary_ResourceTypesEntry {
    const message = createBaseProtectedResourcesSummary_ResourceTypesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Long.fromValue(object.value) : Long.ZERO;
    return message;
  },
};

function createBaseProtectedResourcesSummary_CloudProductsEntry(): ProtectedResourcesSummary_CloudProductsEntry {
  return { key: "", value: Long.ZERO };
}

export const ProtectedResourcesSummary_CloudProductsEntry: MessageFns<ProtectedResourcesSummary_CloudProductsEntry> = {
  encode(
    message: ProtectedResourcesSummary_CloudProductsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (!message.value.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.value.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtectedResourcesSummary_CloudProductsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtectedResourcesSummary_CloudProductsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtectedResourcesSummary_CloudProductsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Long.fromValue(object.value) : Long.ZERO,
    };
  },

  toJSON(message: ProtectedResourcesSummary_CloudProductsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (!message.value.equals(Long.ZERO)) {
      obj.value = (message.value || Long.ZERO).toString();
    }
    return obj;
  },

  create(
    base?: DeepPartial<ProtectedResourcesSummary_CloudProductsEntry>,
  ): ProtectedResourcesSummary_CloudProductsEntry {
    return ProtectedResourcesSummary_CloudProductsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ProtectedResourcesSummary_CloudProductsEntry>,
  ): ProtectedResourcesSummary_CloudProductsEntry {
    const message = createBaseProtectedResourcesSummary_CloudProductsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Long.fromValue(object.value) : Long.ZERO;
    return message;
  },
};

function createBaseProtectedResourcesSummary_LocationsEntry(): ProtectedResourcesSummary_LocationsEntry {
  return { key: "", value: Long.ZERO };
}

export const ProtectedResourcesSummary_LocationsEntry: MessageFns<ProtectedResourcesSummary_LocationsEntry> = {
  encode(message: ProtectedResourcesSummary_LocationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (!message.value.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.value.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtectedResourcesSummary_LocationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtectedResourcesSummary_LocationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtectedResourcesSummary_LocationsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Long.fromValue(object.value) : Long.ZERO,
    };
  },

  toJSON(message: ProtectedResourcesSummary_LocationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (!message.value.equals(Long.ZERO)) {
      obj.value = (message.value || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<ProtectedResourcesSummary_LocationsEntry>): ProtectedResourcesSummary_LocationsEntry {
    return ProtectedResourcesSummary_LocationsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProtectedResourcesSummary_LocationsEntry>): ProtectedResourcesSummary_LocationsEntry {
    const message = createBaseProtectedResourcesSummary_LocationsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Long.fromValue(object.value) : Long.ZERO;
    return message;
  },
};

function createBaseSearchProtectedResourcesRequest(): SearchProtectedResourcesRequest {
  return { scope: "", cryptoKey: "", pageSize: 0, pageToken: "", resourceTypes: [] };
}

export const SearchProtectedResourcesRequest: MessageFns<SearchProtectedResourcesRequest> = {
  encode(message: SearchProtectedResourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scope !== "") {
      writer.uint32(18).string(message.scope);
    }
    if (message.cryptoKey !== "") {
      writer.uint32(10).string(message.cryptoKey);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    for (const v of message.resourceTypes) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchProtectedResourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchProtectedResourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scope = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cryptoKey = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.resourceTypes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchProtectedResourcesRequest {
    return {
      scope: isSet(object.scope) ? globalThis.String(object.scope) : "",
      cryptoKey: isSet(object.cryptoKey) ? globalThis.String(object.cryptoKey) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      resourceTypes: globalThis.Array.isArray(object?.resourceTypes)
        ? object.resourceTypes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SearchProtectedResourcesRequest): unknown {
    const obj: any = {};
    if (message.scope !== "") {
      obj.scope = message.scope;
    }
    if (message.cryptoKey !== "") {
      obj.cryptoKey = message.cryptoKey;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.resourceTypes?.length) {
      obj.resourceTypes = message.resourceTypes;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchProtectedResourcesRequest>): SearchProtectedResourcesRequest {
    return SearchProtectedResourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchProtectedResourcesRequest>): SearchProtectedResourcesRequest {
    const message = createBaseSearchProtectedResourcesRequest();
    message.scope = object.scope ?? "";
    message.cryptoKey = object.cryptoKey ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.resourceTypes = object.resourceTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseSearchProtectedResourcesResponse(): SearchProtectedResourcesResponse {
  return { protectedResources: [], nextPageToken: "" };
}

export const SearchProtectedResourcesResponse: MessageFns<SearchProtectedResourcesResponse> = {
  encode(message: SearchProtectedResourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.protectedResources) {
      ProtectedResource.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchProtectedResourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchProtectedResourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.protectedResources.push(ProtectedResource.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchProtectedResourcesResponse {
    return {
      protectedResources: globalThis.Array.isArray(object?.protectedResources)
        ? object.protectedResources.map((e: any) => ProtectedResource.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchProtectedResourcesResponse): unknown {
    const obj: any = {};
    if (message.protectedResources?.length) {
      obj.protectedResources = message.protectedResources.map((e) => ProtectedResource.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchProtectedResourcesResponse>): SearchProtectedResourcesResponse {
    return SearchProtectedResourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchProtectedResourcesResponse>): SearchProtectedResourcesResponse {
    const message = createBaseSearchProtectedResourcesResponse();
    message.protectedResources = object.protectedResources?.map((e) => ProtectedResource.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseProtectedResource(): ProtectedResource {
  return {
    name: "",
    project: "",
    projectId: "",
    cloudProduct: "",
    resourceType: "",
    location: "",
    labels: {},
    cryptoKeyVersion: "",
    cryptoKeyVersions: [],
    createTime: undefined,
  };
}

export const ProtectedResource: MessageFns<ProtectedResource> = {
  encode(message: ProtectedResource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.projectId !== "") {
      writer.uint32(74).string(message.projectId);
    }
    if (message.cloudProduct !== "") {
      writer.uint32(66).string(message.cloudProduct);
    }
    if (message.resourceType !== "") {
      writer.uint32(26).string(message.resourceType);
    }
    if (message.location !== "") {
      writer.uint32(34).string(message.location);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ProtectedResource_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.cryptoKeyVersion !== "") {
      writer.uint32(50).string(message.cryptoKeyVersion);
    }
    for (const v of message.cryptoKeyVersions) {
      writer.uint32(82).string(v!);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtectedResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtectedResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.cloudProduct = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.location = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = ProtectedResource_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.cryptoKeyVersion = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.cryptoKeyVersions.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtectedResource {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      cloudProduct: isSet(object.cloudProduct) ? globalThis.String(object.cloudProduct) : "",
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      cryptoKeyVersion: isSet(object.cryptoKeyVersion) ? globalThis.String(object.cryptoKeyVersion) : "",
      cryptoKeyVersions: globalThis.Array.isArray(object?.cryptoKeyVersions)
        ? object.cryptoKeyVersions.map((e: any) => globalThis.String(e))
        : [],
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: ProtectedResource): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.cloudProduct !== "") {
      obj.cloudProduct = message.cloudProduct;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.cryptoKeyVersion !== "") {
      obj.cryptoKeyVersion = message.cryptoKeyVersion;
    }
    if (message.cryptoKeyVersions?.length) {
      obj.cryptoKeyVersions = message.cryptoKeyVersions;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ProtectedResource>): ProtectedResource {
    return ProtectedResource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProtectedResource>): ProtectedResource {
    const message = createBaseProtectedResource();
    message.name = object.name ?? "";
    message.project = object.project ?? "";
    message.projectId = object.projectId ?? "";
    message.cloudProduct = object.cloudProduct ?? "";
    message.resourceType = object.resourceType ?? "";
    message.location = object.location ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.cryptoKeyVersion = object.cryptoKeyVersion ?? "";
    message.cryptoKeyVersions = object.cryptoKeyVersions?.map((e) => e) || [];
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseProtectedResource_LabelsEntry(): ProtectedResource_LabelsEntry {
  return { key: "", value: "" };
}

export const ProtectedResource_LabelsEntry: MessageFns<ProtectedResource_LabelsEntry> = {
  encode(message: ProtectedResource_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtectedResource_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtectedResource_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtectedResource_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ProtectedResource_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ProtectedResource_LabelsEntry>): ProtectedResource_LabelsEntry {
    return ProtectedResource_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProtectedResource_LabelsEntry>): ProtectedResource_LabelsEntry {
    const message = createBaseProtectedResource_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/**
 * Returns information about the resources in an org that are protected by a
 * given Cloud KMS key via CMEK.
 */
export type KeyTrackingServiceDefinition = typeof KeyTrackingServiceDefinition;
export const KeyTrackingServiceDefinition = {
  name: "KeyTrackingService",
  fullName: "google.cloud.kms.inventory.v1.KeyTrackingService",
  methods: {
    /**
     * Returns aggregate information about the resources protected by the given
     * Cloud KMS [CryptoKey][google.cloud.kms.v1.CryptoKey]. Only resources within
     * the same Cloud organization as the key will be returned. The project that
     * holds the key must be part of an organization in order for this call to
     * succeed.
     */
    getProtectedResourcesSummary: {
      name: "GetProtectedResourcesSummary",
      requestType: GetProtectedResourcesSummaryRequest,
      requestStream: false,
      responseType: ProtectedResourcesSummary,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              86,
              18,
              84,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              101,
              121,
              82,
              105,
              110,
              103,
              115,
              47,
              42,
              47,
              99,
              114,
              121,
              112,
              116,
              111,
              75,
              101,
              121,
              115,
              47,
              42,
              42,
              125,
              47,
              112,
              114,
              111,
              116,
              101,
              99,
              116,
              101,
              100,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              83,
              117,
              109,
              109,
              97,
              114,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns metadata about the resources protected by the given Cloud KMS
     * [CryptoKey][google.cloud.kms.v1.CryptoKey] in the given Cloud organization.
     */
    searchProtectedResources: {
      name: "SearchProtectedResources",
      requestType: SearchProtectedResourcesRequest,
      requestStream: false,
      responseType: SearchProtectedResourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 115, 99, 111, 112, 101, 44, 32, 99, 114, 121, 112, 116, 111, 95, 107, 101, 121])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              115,
              99,
              111,
              112,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              116,
              101,
              99,
              116,
              101,
              100,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface KeyTrackingServiceImplementation<CallContextExt = {}> {
  /**
   * Returns aggregate information about the resources protected by the given
   * Cloud KMS [CryptoKey][google.cloud.kms.v1.CryptoKey]. Only resources within
   * the same Cloud organization as the key will be returned. The project that
   * holds the key must be part of an organization in order for this call to
   * succeed.
   */
  getProtectedResourcesSummary(
    request: GetProtectedResourcesSummaryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ProtectedResourcesSummary>>;
  /**
   * Returns metadata about the resources protected by the given Cloud KMS
   * [CryptoKey][google.cloud.kms.v1.CryptoKey] in the given Cloud organization.
   */
  searchProtectedResources(
    request: SearchProtectedResourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchProtectedResourcesResponse>>;
}

export interface KeyTrackingServiceClient<CallOptionsExt = {}> {
  /**
   * Returns aggregate information about the resources protected by the given
   * Cloud KMS [CryptoKey][google.cloud.kms.v1.CryptoKey]. Only resources within
   * the same Cloud organization as the key will be returned. The project that
   * holds the key must be part of an organization in order for this call to
   * succeed.
   */
  getProtectedResourcesSummary(
    request: DeepPartial<GetProtectedResourcesSummaryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ProtectedResourcesSummary>;
  /**
   * Returns metadata about the resources protected by the given Cloud KMS
   * [CryptoKey][google.cloud.kms.v1.CryptoKey] in the given Cloud organization.
   */
  searchProtectedResources(
    request: DeepPartial<SearchProtectedResourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchProtectedResourcesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
