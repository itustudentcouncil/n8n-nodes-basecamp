// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/kms/v1/autokey.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";

export const protobufPackage = "google.cloud.kms.v1";

/**
 * Request message for
 * [Autokey.CreateKeyHandle][google.cloud.kms.v1.Autokey.CreateKeyHandle].
 */
export interface CreateKeyHandleRequest {
  /**
   * Required. Name of the resource project and location to create the
   * [KeyHandle][google.cloud.kms.v1.KeyHandle] in, e.g.
   * `projects/{PROJECT_ID}/locations/{LOCATION}`.
   */
  parent: string;
  /**
   * Optional. Id of the [KeyHandle][google.cloud.kms.v1.KeyHandle]. Must be
   * unique to the resource project and location. If not provided by the caller,
   * a new UUID is used.
   */
  keyHandleId: string;
  /** Required. [KeyHandle][google.cloud.kms.v1.KeyHandle] to create. */
  keyHandle: KeyHandle | undefined;
}

/** Request message for [GetKeyHandle][google.cloud.kms.v1.Autokey.GetKeyHandle]. */
export interface GetKeyHandleRequest {
  /**
   * Required. Name of the [KeyHandle][google.cloud.kms.v1.KeyHandle] resource,
   * e.g.
   * `projects/{PROJECT_ID}/locations/{LOCATION}/keyHandles/{KEY_HANDLE_ID}`.
   */
  name: string;
}

/**
 * Resource-oriented representation of a request to Cloud KMS Autokey and the
 * resulting provisioning of a [CryptoKey][google.cloud.kms.v1.CryptoKey].
 */
export interface KeyHandle {
  /**
   * Identifier. Name of the [KeyHandle][google.cloud.kms.v1.KeyHandle]
   * resource, e.g.
   * `projects/{PROJECT_ID}/locations/{LOCATION}/keyHandles/{KEY_HANDLE_ID}`.
   */
  name: string;
  /**
   * Output only. Name of a [CryptoKey][google.cloud.kms.v1.CryptoKey] that has
   * been provisioned for Customer Managed Encryption Key (CMEK) use in the
   * [KeyHandle][google.cloud.kms.v1.KeyHandle] project and location for the
   * requested resource type. The [CryptoKey][google.cloud.kms.v1.CryptoKey]
   * project will reflect the value configured in the
   * [AutokeyConfig][google.cloud.kms.v1.AutokeyConfig] on the resource
   * project's ancestor folder at the time of the
   * [KeyHandle][google.cloud.kms.v1.KeyHandle] creation. If more than one
   * ancestor folder has a configured
   * [AutokeyConfig][google.cloud.kms.v1.AutokeyConfig], the nearest of these
   * configurations is used.
   */
  kmsKey: string;
  /**
   * Required. Indicates the resource type that the resulting
   * [CryptoKey][google.cloud.kms.v1.CryptoKey] is meant to protect, e.g.
   * `{SERVICE}.googleapis.com/{TYPE}`. See documentation for supported resource
   * types.
   */
  resourceTypeSelector: string;
}

/**
 * Metadata message for
 * [CreateKeyHandle][google.cloud.kms.v1.Autokey.CreateKeyHandle] long-running
 * operation response.
 */
export interface CreateKeyHandleMetadata {
}

/**
 * Request message for
 * [Autokey.ListKeyHandles][google.cloud.kms.v1.Autokey.ListKeyHandles].
 */
export interface ListKeyHandlesRequest {
  /**
   * Required. Name of the resource project and location from which to list
   * [KeyHandles][google.cloud.kms.v1.KeyHandle], e.g.
   * `projects/{PROJECT_ID}/locations/{LOCATION}`.
   */
  parent: string;
  /**
   * Optional. Optional limit on the number of
   * [KeyHandles][google.cloud.kms.v1.KeyHandle] to include in the response. The
   * service may return fewer than this value. Further
   * [KeyHandles][google.cloud.kms.v1.KeyHandle] can subsequently be obtained by
   * including the
   * [ListKeyHandlesResponse.next_page_token][google.cloud.kms.v1.ListKeyHandlesResponse.next_page_token]
   * in a subsequent request.  If unspecified, at most
   * 100 [KeyHandles][google.cloud.kms.v1.KeyHandle] will be returned.
   */
  pageSize: number;
  /**
   * Optional. Optional pagination token, returned earlier via
   * [ListKeyHandlesResponse.next_page_token][google.cloud.kms.v1.ListKeyHandlesResponse.next_page_token].
   */
  pageToken: string;
  /**
   * Optional. Filter to apply when listing
   * [KeyHandles][google.cloud.kms.v1.KeyHandle], e.g.
   * `resource_type_selector="{SERVICE}.googleapis.com/{TYPE}"`.
   */
  filter: string;
}

/**
 * Response message for
 * [Autokey.ListKeyHandles][google.cloud.kms.v1.Autokey.ListKeyHandles].
 */
export interface ListKeyHandlesResponse {
  /** Resulting [KeyHandles][google.cloud.kms.v1.KeyHandle]. */
  keyHandles: KeyHandle[];
  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListKeyHandlesRequest.page_token][google.cloud.kms.v1.ListKeyHandlesRequest.page_token]
   * to retrieve the next page of results.
   */
  nextPageToken: string;
}

function createBaseCreateKeyHandleRequest(): CreateKeyHandleRequest {
  return { parent: "", keyHandleId: "", keyHandle: undefined };
}

export const CreateKeyHandleRequest: MessageFns<CreateKeyHandleRequest> = {
  encode(message: CreateKeyHandleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.keyHandleId !== "") {
      writer.uint32(18).string(message.keyHandleId);
    }
    if (message.keyHandle !== undefined) {
      KeyHandle.encode(message.keyHandle, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateKeyHandleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateKeyHandleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyHandleId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyHandle = KeyHandle.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateKeyHandleRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      keyHandleId: isSet(object.keyHandleId) ? globalThis.String(object.keyHandleId) : "",
      keyHandle: isSet(object.keyHandle) ? KeyHandle.fromJSON(object.keyHandle) : undefined,
    };
  },

  toJSON(message: CreateKeyHandleRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.keyHandleId !== "") {
      obj.keyHandleId = message.keyHandleId;
    }
    if (message.keyHandle !== undefined) {
      obj.keyHandle = KeyHandle.toJSON(message.keyHandle);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateKeyHandleRequest>): CreateKeyHandleRequest {
    return CreateKeyHandleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateKeyHandleRequest>): CreateKeyHandleRequest {
    const message = createBaseCreateKeyHandleRequest();
    message.parent = object.parent ?? "";
    message.keyHandleId = object.keyHandleId ?? "";
    message.keyHandle = (object.keyHandle !== undefined && object.keyHandle !== null)
      ? KeyHandle.fromPartial(object.keyHandle)
      : undefined;
    return message;
  },
};

function createBaseGetKeyHandleRequest(): GetKeyHandleRequest {
  return { name: "" };
}

export const GetKeyHandleRequest: MessageFns<GetKeyHandleRequest> = {
  encode(message: GetKeyHandleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetKeyHandleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetKeyHandleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetKeyHandleRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetKeyHandleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetKeyHandleRequest>): GetKeyHandleRequest {
    return GetKeyHandleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetKeyHandleRequest>): GetKeyHandleRequest {
    const message = createBaseGetKeyHandleRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseKeyHandle(): KeyHandle {
  return { name: "", kmsKey: "", resourceTypeSelector: "" };
}

export const KeyHandle: MessageFns<KeyHandle> = {
  encode(message: KeyHandle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.kmsKey !== "") {
      writer.uint32(26).string(message.kmsKey);
    }
    if (message.resourceTypeSelector !== "") {
      writer.uint32(34).string(message.resourceTypeSelector);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyHandle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyHandle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.kmsKey = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.resourceTypeSelector = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyHandle {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      kmsKey: isSet(object.kmsKey) ? globalThis.String(object.kmsKey) : "",
      resourceTypeSelector: isSet(object.resourceTypeSelector) ? globalThis.String(object.resourceTypeSelector) : "",
    };
  },

  toJSON(message: KeyHandle): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.kmsKey !== "") {
      obj.kmsKey = message.kmsKey;
    }
    if (message.resourceTypeSelector !== "") {
      obj.resourceTypeSelector = message.resourceTypeSelector;
    }
    return obj;
  },

  create(base?: DeepPartial<KeyHandle>): KeyHandle {
    return KeyHandle.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KeyHandle>): KeyHandle {
    const message = createBaseKeyHandle();
    message.name = object.name ?? "";
    message.kmsKey = object.kmsKey ?? "";
    message.resourceTypeSelector = object.resourceTypeSelector ?? "";
    return message;
  },
};

function createBaseCreateKeyHandleMetadata(): CreateKeyHandleMetadata {
  return {};
}

export const CreateKeyHandleMetadata: MessageFns<CreateKeyHandleMetadata> = {
  encode(_: CreateKeyHandleMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateKeyHandleMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateKeyHandleMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateKeyHandleMetadata {
    return {};
  },

  toJSON(_: CreateKeyHandleMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CreateKeyHandleMetadata>): CreateKeyHandleMetadata {
    return CreateKeyHandleMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CreateKeyHandleMetadata>): CreateKeyHandleMetadata {
    const message = createBaseCreateKeyHandleMetadata();
    return message;
  },
};

function createBaseListKeyHandlesRequest(): ListKeyHandlesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListKeyHandlesRequest: MessageFns<ListKeyHandlesRequest> = {
  encode(message: ListKeyHandlesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKeyHandlesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKeyHandlesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKeyHandlesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListKeyHandlesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListKeyHandlesRequest>): ListKeyHandlesRequest {
    return ListKeyHandlesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListKeyHandlesRequest>): ListKeyHandlesRequest {
    const message = createBaseListKeyHandlesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListKeyHandlesResponse(): ListKeyHandlesResponse {
  return { keyHandles: [], nextPageToken: "" };
}

export const ListKeyHandlesResponse: MessageFns<ListKeyHandlesResponse> = {
  encode(message: ListKeyHandlesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keyHandles) {
      KeyHandle.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKeyHandlesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKeyHandlesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyHandles.push(KeyHandle.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKeyHandlesResponse {
    return {
      keyHandles: globalThis.Array.isArray(object?.keyHandles)
        ? object.keyHandles.map((e: any) => KeyHandle.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListKeyHandlesResponse): unknown {
    const obj: any = {};
    if (message.keyHandles?.length) {
      obj.keyHandles = message.keyHandles.map((e) => KeyHandle.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListKeyHandlesResponse>): ListKeyHandlesResponse {
    return ListKeyHandlesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListKeyHandlesResponse>): ListKeyHandlesResponse {
    const message = createBaseListKeyHandlesResponse();
    message.keyHandles = object.keyHandles?.map((e) => KeyHandle.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Provides interfaces for using [Cloud KMS
 * Autokey](https://cloud.google.com/kms/help/autokey) to provision new
 * [CryptoKeys][google.cloud.kms.v1.CryptoKey], ready for Customer Managed
 * Encryption Key (CMEK) use, on-demand. To support certain client tooling, this
 * feature is modeled around a [KeyHandle][google.cloud.kms.v1.KeyHandle]
 * resource: creating a [KeyHandle][google.cloud.kms.v1.KeyHandle] in a resource
 * project and given location triggers Cloud KMS Autokey to provision a
 * [CryptoKey][google.cloud.kms.v1.CryptoKey] in the configured key project and
 * the same location.
 *
 * Prior to use in a given resource project,
 * [UpdateAutokeyConfig][google.cloud.kms.v1.AutokeyAdmin.UpdateAutokeyConfig]
 * should have been called on an ancestor folder, setting the key project where
 * Cloud KMS Autokey should create new
 * [CryptoKeys][google.cloud.kms.v1.CryptoKey]. See documentation for additional
 * prerequisites. To check what key project, if any, is currently configured on
 * a resource project's ancestor folder, see
 * [ShowEffectiveAutokeyConfig][google.cloud.kms.v1.AutokeyAdmin.ShowEffectiveAutokeyConfig].
 */
export type AutokeyDefinition = typeof AutokeyDefinition;
export const AutokeyDefinition = {
  name: "Autokey",
  fullName: "google.cloud.kms.v1.Autokey",
  methods: {
    /**
     * Creates a new [KeyHandle][google.cloud.kms.v1.KeyHandle], triggering the
     * provisioning of a new [CryptoKey][google.cloud.kms.v1.CryptoKey] for CMEK
     * use with the given resource type in the configured key project and the same
     * location. [GetOperation][Operations.GetOperation] should be used to resolve
     * the resulting long-running operation and get the resulting
     * [KeyHandle][google.cloud.kms.v1.KeyHandle] and
     * [CryptoKey][google.cloud.kms.v1.CryptoKey].
     */
    createKeyHandle: {
      name: "CreateKeyHandle",
      requestType: CreateKeyHandleRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              36,
              10,
              9,
              75,
              101,
              121,
              72,
              97,
              110,
              100,
              108,
              101,
              18,
              23,
              67,
              114,
              101,
              97,
              116,
              101,
              75,
              101,
              121,
              72,
              97,
              110,
              100,
              108,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              31,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              107,
              101,
              121,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              44,
              107,
              101,
              121,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              10,
              107,
              101,
              121,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              107,
              101,
              121,
              72,
              97,
              110,
              100,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns the [KeyHandle][google.cloud.kms.v1.KeyHandle]. */
    getKeyHandle: {
      name: "GetKeyHandle",
      requestType: GetKeyHandleRequest,
      requestStream: false,
      responseType: KeyHandle,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              107,
              101,
              121,
              72,
              97,
              110,
              100,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists [KeyHandles][google.cloud.kms.v1.KeyHandle]. */
    listKeyHandles: {
      name: "ListKeyHandles",
      requestType: ListKeyHandlesRequest,
      requestStream: false,
      responseType: ListKeyHandlesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              107,
              101,
              121,
              72,
              97,
              110,
              100,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AutokeyServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a new [KeyHandle][google.cloud.kms.v1.KeyHandle], triggering the
   * provisioning of a new [CryptoKey][google.cloud.kms.v1.CryptoKey] for CMEK
   * use with the given resource type in the configured key project and the same
   * location. [GetOperation][Operations.GetOperation] should be used to resolve
   * the resulting long-running operation and get the resulting
   * [KeyHandle][google.cloud.kms.v1.KeyHandle] and
   * [CryptoKey][google.cloud.kms.v1.CryptoKey].
   */
  createKeyHandle(
    request: CreateKeyHandleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Returns the [KeyHandle][google.cloud.kms.v1.KeyHandle]. */
  getKeyHandle(request: GetKeyHandleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<KeyHandle>>;
  /** Lists [KeyHandles][google.cloud.kms.v1.KeyHandle]. */
  listKeyHandles(
    request: ListKeyHandlesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListKeyHandlesResponse>>;
}

export interface AutokeyClient<CallOptionsExt = {}> {
  /**
   * Creates a new [KeyHandle][google.cloud.kms.v1.KeyHandle], triggering the
   * provisioning of a new [CryptoKey][google.cloud.kms.v1.CryptoKey] for CMEK
   * use with the given resource type in the configured key project and the same
   * location. [GetOperation][Operations.GetOperation] should be used to resolve
   * the resulting long-running operation and get the resulting
   * [KeyHandle][google.cloud.kms.v1.KeyHandle] and
   * [CryptoKey][google.cloud.kms.v1.CryptoKey].
   */
  createKeyHandle(
    request: DeepPartial<CreateKeyHandleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Returns the [KeyHandle][google.cloud.kms.v1.KeyHandle]. */
  getKeyHandle(request: DeepPartial<GetKeyHandleRequest>, options?: CallOptions & CallOptionsExt): Promise<KeyHandle>;
  /** Lists [KeyHandles][google.cloud.kms.v1.KeyHandle]. */
  listKeyHandles(
    request: DeepPartial<ListKeyHandlesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListKeyHandlesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
