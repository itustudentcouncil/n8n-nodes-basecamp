// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/backupdr/v1/backupvault_ba.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.backupdr.v1";

/**
 * BackupApplianceBackupProperties represents BackupDR backup appliance's
 * properties.
 */
export interface BackupApplianceBackupProperties {
  /**
   * Output only. The numeric generation ID of the backup (monotonically
   * increasing).
   */
  generationId?:
    | number
    | undefined;
  /**
   * Output only. The time when this backup object was finalized (if none,
   * backup is not finalized).
   */
  finalizeTime?:
    | Date
    | undefined;
  /** Optional. The earliest timestamp of data available in this Backup. */
  recoveryRangeStartTime?:
    | Date
    | undefined;
  /** Optional. The latest timestamp of data available in this Backup. */
  recoveryRangeEndTime?: Date | undefined;
}

function createBaseBackupApplianceBackupProperties(): BackupApplianceBackupProperties {
  return {
    generationId: undefined,
    finalizeTime: undefined,
    recoveryRangeStartTime: undefined,
    recoveryRangeEndTime: undefined,
  };
}

export const BackupApplianceBackupProperties: MessageFns<BackupApplianceBackupProperties> = {
  encode(message: BackupApplianceBackupProperties, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.generationId !== undefined) {
      writer.uint32(8).int32(message.generationId);
    }
    if (message.finalizeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finalizeTime), writer.uint32(18).fork()).join();
    }
    if (message.recoveryRangeStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.recoveryRangeStartTime), writer.uint32(26).fork()).join();
    }
    if (message.recoveryRangeEndTime !== undefined) {
      Timestamp.encode(toTimestamp(message.recoveryRangeEndTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupApplianceBackupProperties {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupApplianceBackupProperties();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.generationId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.finalizeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.recoveryRangeStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.recoveryRangeEndTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupApplianceBackupProperties {
    return {
      generationId: isSet(object.generationId) ? globalThis.Number(object.generationId) : undefined,
      finalizeTime: isSet(object.finalizeTime) ? fromJsonTimestamp(object.finalizeTime) : undefined,
      recoveryRangeStartTime: isSet(object.recoveryRangeStartTime)
        ? fromJsonTimestamp(object.recoveryRangeStartTime)
        : undefined,
      recoveryRangeEndTime: isSet(object.recoveryRangeEndTime)
        ? fromJsonTimestamp(object.recoveryRangeEndTime)
        : undefined,
    };
  },

  toJSON(message: BackupApplianceBackupProperties): unknown {
    const obj: any = {};
    if (message.generationId !== undefined) {
      obj.generationId = Math.round(message.generationId);
    }
    if (message.finalizeTime !== undefined) {
      obj.finalizeTime = message.finalizeTime.toISOString();
    }
    if (message.recoveryRangeStartTime !== undefined) {
      obj.recoveryRangeStartTime = message.recoveryRangeStartTime.toISOString();
    }
    if (message.recoveryRangeEndTime !== undefined) {
      obj.recoveryRangeEndTime = message.recoveryRangeEndTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<BackupApplianceBackupProperties>): BackupApplianceBackupProperties {
    return BackupApplianceBackupProperties.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackupApplianceBackupProperties>): BackupApplianceBackupProperties {
    const message = createBaseBackupApplianceBackupProperties();
    message.generationId = object.generationId ?? undefined;
    message.finalizeTime = object.finalizeTime ?? undefined;
    message.recoveryRangeStartTime = object.recoveryRangeStartTime ?? undefined;
    message.recoveryRangeEndTime = object.recoveryRangeEndTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
