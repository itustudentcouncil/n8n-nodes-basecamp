// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/backupdr/v1/backupdr.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { TestIamPermissionsRequest, TestIamPermissionsResponse } from "../../../iam/v1/iam_policy.js";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { BoolValue } from "../../../protobuf/wrappers.js";
import {
  BackupPlan,
  CreateBackupPlanRequest,
  DeleteBackupPlanRequest,
  GetBackupPlanRequest,
  ListBackupPlansRequest,
  ListBackupPlansResponse,
} from "./backupplan.js";
import {
  BackupPlanAssociation,
  CreateBackupPlanAssociationRequest,
  DeleteBackupPlanAssociationRequest,
  GetBackupPlanAssociationRequest,
  ListBackupPlanAssociationsRequest,
  ListBackupPlanAssociationsResponse,
  TriggerBackupRequest,
} from "./backupplanassociation.js";
import {
  AbandonBackupRequest,
  Backup,
  BackupVault,
  CreateBackupVaultRequest,
  DataSource,
  DeleteBackupRequest,
  DeleteBackupVaultRequest,
  FetchAccessTokenRequest,
  FetchAccessTokenResponse,
  FetchUsableBackupVaultsRequest,
  FetchUsableBackupVaultsResponse,
  FinalizeBackupRequest,
  GetBackupRequest,
  GetBackupVaultRequest,
  GetDataSourceRequest,
  InitiateBackupRequest,
  InitiateBackupResponse,
  ListBackupsRequest,
  ListBackupsResponse,
  ListBackupVaultsRequest,
  ListBackupVaultsResponse,
  ListDataSourcesRequest,
  ListDataSourcesResponse,
  RemoveDataSourceRequest,
  RestoreBackupRequest,
  SetInternalStatusRequest,
  UpdateBackupRequest,
  UpdateBackupVaultRequest,
  UpdateDataSourceRequest,
} from "./backupvault.js";

export const protobufPackage = "google.cloud.backupdr.v1";

/** Network configuration for ManagementServer instance. */
export interface NetworkConfig {
  /**
   * Optional. The resource name of the Google Compute Engine VPC network to
   * which the ManagementServer instance is connected.
   */
  network: string;
  /**
   * Optional. The network connect mode of the ManagementServer instance. For
   * this version, only PRIVATE_SERVICE_ACCESS is supported.
   */
  peeringMode: NetworkConfig_PeeringMode;
}

/** VPC peering modes supported by Cloud BackupDR. */
export enum NetworkConfig_PeeringMode {
  /** PEERING_MODE_UNSPECIFIED - Peering mode not set. */
  PEERING_MODE_UNSPECIFIED = 0,
  /**
   * PRIVATE_SERVICE_ACCESS - Connect using Private Service Access to the Management Server. Private
   * services access provides an IP address range for multiple Google Cloud
   * services, including Cloud BackupDR.
   */
  PRIVATE_SERVICE_ACCESS = 1,
  UNRECOGNIZED = -1,
}

export function networkConfig_PeeringModeFromJSON(object: any): NetworkConfig_PeeringMode {
  switch (object) {
    case 0:
    case "PEERING_MODE_UNSPECIFIED":
      return NetworkConfig_PeeringMode.PEERING_MODE_UNSPECIFIED;
    case 1:
    case "PRIVATE_SERVICE_ACCESS":
      return NetworkConfig_PeeringMode.PRIVATE_SERVICE_ACCESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkConfig_PeeringMode.UNRECOGNIZED;
  }
}

export function networkConfig_PeeringModeToJSON(object: NetworkConfig_PeeringMode): string {
  switch (object) {
    case NetworkConfig_PeeringMode.PEERING_MODE_UNSPECIFIED:
      return "PEERING_MODE_UNSPECIFIED";
    case NetworkConfig_PeeringMode.PRIVATE_SERVICE_ACCESS:
      return "PRIVATE_SERVICE_ACCESS";
    case NetworkConfig_PeeringMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ManagementURI for the Management Server resource. */
export interface ManagementURI {
  /** Output only. The ManagementServer AGM/RD WebUI URL. */
  webUi: string;
  /** Output only. The ManagementServer AGM/RD API URL. */
  api: string;
}

/** ManagementURI depending on the Workforce Identity i.e. either 1p or 3p. */
export interface WorkforceIdentityBasedManagementURI {
  /** Output only. First party Management URI for Google Identities. */
  firstPartyManagementUri: string;
  /** Output only. Third party Management URI for External Identity Providers. */
  thirdPartyManagementUri: string;
}

/** OAuth Client ID depending on the Workforce Identity i.e. either 1p or 3p, */
export interface WorkforceIdentityBasedOAuth2ClientID {
  /** Output only. First party OAuth Client ID for Google Identities. */
  firstPartyOauth2ClientId: string;
  /** Output only. Third party OAuth Client ID for External Identity Providers. */
  thirdPartyOauth2ClientId: string;
}

/** ManagementServer describes a single BackupDR ManagementServer instance. */
export interface ManagementServer {
  /** Output only. Identifier. The resource name. */
  name: string;
  /**
   * Optional. The description of the ManagementServer instance (2048 characters
   * or less).
   */
  description: string;
  /**
   * Optional. Resource labels to represent user provided metadata.
   * Labels currently defined:
   * 1. migrate_from_go=<false|true>
   *    If set to true, the MS is created in migration ready mode.
   */
  labels: { [key: string]: string };
  /** Output only. The time when the instance was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the instance was updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. The type of the ManagementServer resource. */
  type: ManagementServer_InstanceType;
  /**
   * Output only. The hostname or ip address of the exposed AGM endpoints, used
   * by clients to connect to AGM/RD graphical user interface and APIs.
   */
  managementUri:
    | ManagementURI
    | undefined;
  /**
   * Output only. The hostnames of the exposed AGM endpoints for both types of
   * user i.e. 1p and 3p, used to connect AGM/RM UI.
   */
  workforceIdentityBasedManagementUri:
    | WorkforceIdentityBasedManagementURI
    | undefined;
  /** Output only. The ManagementServer state. */
  state: ManagementServer_InstanceState;
  /**
   * Required. VPC networks to which the ManagementServer instance is connected.
   * For this version, only a single network is supported.
   */
  networks: NetworkConfig[];
  /**
   * Optional. Server specified ETag for the ManagementServer resource to
   * prevent simultaneous updates from overwiting each other.
   */
  etag: string;
  /**
   * Output only. The OAuth 2.0 client id is required to make API calls to the
   * BackupDR instance API of this ManagementServer. This is the value that
   * should be provided in the 'aud' field of the OIDC ID Token (see openid
   * specification
   * https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
   */
  oauth2ClientId: string;
  /** Output only. The OAuth client IDs for both types of user i.e. 1p and 3p. */
  workforceIdentityBasedOauth2ClientId:
    | WorkforceIdentityBasedOAuth2ClientID
    | undefined;
  /**
   * Output only. The hostname or ip address of the exposed AGM endpoints, used
   * by BAs to connect to BA proxy.
   */
  baProxyUri: string[];
  /** Output only. Reserved for future use. */
  satisfiesPzs:
    | boolean
    | undefined;
  /** Output only. Reserved for future use. */
  satisfiesPzi: boolean;
}

/** Type of backup service resource. */
export enum ManagementServer_InstanceType {
  /** INSTANCE_TYPE_UNSPECIFIED - Instance type is not mentioned. */
  INSTANCE_TYPE_UNSPECIFIED = 0,
  /** BACKUP_RESTORE - Instance for backup and restore management (i.e., AGM). */
  BACKUP_RESTORE = 1,
  UNRECOGNIZED = -1,
}

export function managementServer_InstanceTypeFromJSON(object: any): ManagementServer_InstanceType {
  switch (object) {
    case 0:
    case "INSTANCE_TYPE_UNSPECIFIED":
      return ManagementServer_InstanceType.INSTANCE_TYPE_UNSPECIFIED;
    case 1:
    case "BACKUP_RESTORE":
      return ManagementServer_InstanceType.BACKUP_RESTORE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ManagementServer_InstanceType.UNRECOGNIZED;
  }
}

export function managementServer_InstanceTypeToJSON(object: ManagementServer_InstanceType): string {
  switch (object) {
    case ManagementServer_InstanceType.INSTANCE_TYPE_UNSPECIFIED:
      return "INSTANCE_TYPE_UNSPECIFIED";
    case ManagementServer_InstanceType.BACKUP_RESTORE:
      return "BACKUP_RESTORE";
    case ManagementServer_InstanceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** State of Management server instance. */
export enum ManagementServer_InstanceState {
  /** INSTANCE_STATE_UNSPECIFIED - State not set. */
  INSTANCE_STATE_UNSPECIFIED = 0,
  /** CREATING - The instance is being created. */
  CREATING = 1,
  /** READY - The instance has been created and is fully usable. */
  READY = 2,
  /**
   * UPDATING - The instance configuration is being updated. Certain kinds of updates
   * may cause the instance to become unusable while the update is in
   * progress.
   */
  UPDATING = 3,
  /** DELETING - The instance is being deleted. */
  DELETING = 4,
  /** REPAIRING - The instance is being repaired and may be unstable. */
  REPAIRING = 5,
  /** MAINTENANCE - Maintenance is being performed on this instance. */
  MAINTENANCE = 6,
  /**
   * ERROR - The instance is experiencing an issue and might be unusable. You can get
   * further details from the statusMessage field of Instance resource.
   */
  ERROR = 7,
  UNRECOGNIZED = -1,
}

export function managementServer_InstanceStateFromJSON(object: any): ManagementServer_InstanceState {
  switch (object) {
    case 0:
    case "INSTANCE_STATE_UNSPECIFIED":
      return ManagementServer_InstanceState.INSTANCE_STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return ManagementServer_InstanceState.CREATING;
    case 2:
    case "READY":
      return ManagementServer_InstanceState.READY;
    case 3:
    case "UPDATING":
      return ManagementServer_InstanceState.UPDATING;
    case 4:
    case "DELETING":
      return ManagementServer_InstanceState.DELETING;
    case 5:
    case "REPAIRING":
      return ManagementServer_InstanceState.REPAIRING;
    case 6:
    case "MAINTENANCE":
      return ManagementServer_InstanceState.MAINTENANCE;
    case 7:
    case "ERROR":
      return ManagementServer_InstanceState.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ManagementServer_InstanceState.UNRECOGNIZED;
  }
}

export function managementServer_InstanceStateToJSON(object: ManagementServer_InstanceState): string {
  switch (object) {
    case ManagementServer_InstanceState.INSTANCE_STATE_UNSPECIFIED:
      return "INSTANCE_STATE_UNSPECIFIED";
    case ManagementServer_InstanceState.CREATING:
      return "CREATING";
    case ManagementServer_InstanceState.READY:
      return "READY";
    case ManagementServer_InstanceState.UPDATING:
      return "UPDATING";
    case ManagementServer_InstanceState.DELETING:
      return "DELETING";
    case ManagementServer_InstanceState.REPAIRING:
      return "REPAIRING";
    case ManagementServer_InstanceState.MAINTENANCE:
      return "MAINTENANCE";
    case ManagementServer_InstanceState.ERROR:
      return "ERROR";
    case ManagementServer_InstanceState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ManagementServer_LabelsEntry {
  key: string;
  value: string;
}

/** Request message for listing management servers. */
export interface ListManagementServersRequest {
  /**
   * Required. The project and location for which to retrieve management servers
   * information, in the format 'projects/{project_id}/locations/{location}'. In
   * Cloud BackupDR, locations map to Google Cloud regions, for example
   * **us-central1**. To retrieve management servers for all locations, use "-"
   * for the
   * '{location}' value.
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter?:
    | string
    | undefined;
  /** Optional. Hint for how to order the results. */
  orderBy?: string | undefined;
}

/** Response message for listing management servers. */
export interface ListManagementServersResponse {
  /**
   * The list of ManagementServer instances in the project for the specified
   * location.
   *
   * If the '{location}' value in the request is "-", the response contains a
   * list of instances from all locations. In case any location is unreachable,
   * the response will only return management servers in reachable locations and
   * the 'unreachable' field will be populated with a list of unreachable
   * locations.
   */
  managementServers: ManagementServer[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request message for getting a management server instance. */
export interface GetManagementServerRequest {
  /**
   * Required. Name of the management server resource name, in the format
   * 'projects/{project_id}/locations/{location}/managementServers/{resource_name}'
   */
  name: string;
}

/** Request message for creating a management server instance. */
export interface CreateManagementServerRequest {
  /**
   * Required. The management server project and location in the format
   * 'projects/{project_id}/locations/{location}'. In Cloud Backup and DR
   * locations map to Google Cloud regions, for example **us-central1**.
   */
  parent: string;
  /**
   * Required. The name of the management server to create. The name must be
   * unique for the specified project and location.
   */
  managementServerId: string;
  /**
   * Required. A [management server
   * resource][google.cloud.backupdr.v1.ManagementServer]
   */
  managementServer:
    | ManagementServer
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request message for deleting a management server instance. */
export interface DeleteManagementServerRequest {
  /** Required. Name of the resource */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * 'Code.CANCELLED'.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
  /**
   * Output only. AdditionalInfo contains additional Info related to backup plan
   * association resource.
   */
  additionalInfo: { [key: string]: string };
}

export interface OperationMetadata_AdditionalInfoEntry {
  key: string;
  value: string;
}

function createBaseNetworkConfig(): NetworkConfig {
  return { network: "", peeringMode: 0 };
}

export const NetworkConfig: MessageFns<NetworkConfig> = {
  encode(message: NetworkConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.network !== "") {
      writer.uint32(10).string(message.network);
    }
    if (message.peeringMode !== 0) {
      writer.uint32(16).int32(message.peeringMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NetworkConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.network = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.peeringMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkConfig {
    return {
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      peeringMode: isSet(object.peeringMode) ? networkConfig_PeeringModeFromJSON(object.peeringMode) : 0,
    };
  },

  toJSON(message: NetworkConfig): unknown {
    const obj: any = {};
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.peeringMode !== 0) {
      obj.peeringMode = networkConfig_PeeringModeToJSON(message.peeringMode);
    }
    return obj;
  },

  create(base?: DeepPartial<NetworkConfig>): NetworkConfig {
    return NetworkConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NetworkConfig>): NetworkConfig {
    const message = createBaseNetworkConfig();
    message.network = object.network ?? "";
    message.peeringMode = object.peeringMode ?? 0;
    return message;
  },
};

function createBaseManagementURI(): ManagementURI {
  return { webUi: "", api: "" };
}

export const ManagementURI: MessageFns<ManagementURI> = {
  encode(message: ManagementURI, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.webUi !== "") {
      writer.uint32(10).string(message.webUi);
    }
    if (message.api !== "") {
      writer.uint32(18).string(message.api);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagementURI {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagementURI();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.webUi = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.api = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagementURI {
    return {
      webUi: isSet(object.webUi) ? globalThis.String(object.webUi) : "",
      api: isSet(object.api) ? globalThis.String(object.api) : "",
    };
  },

  toJSON(message: ManagementURI): unknown {
    const obj: any = {};
    if (message.webUi !== "") {
      obj.webUi = message.webUi;
    }
    if (message.api !== "") {
      obj.api = message.api;
    }
    return obj;
  },

  create(base?: DeepPartial<ManagementURI>): ManagementURI {
    return ManagementURI.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ManagementURI>): ManagementURI {
    const message = createBaseManagementURI();
    message.webUi = object.webUi ?? "";
    message.api = object.api ?? "";
    return message;
  },
};

function createBaseWorkforceIdentityBasedManagementURI(): WorkforceIdentityBasedManagementURI {
  return { firstPartyManagementUri: "", thirdPartyManagementUri: "" };
}

export const WorkforceIdentityBasedManagementURI: MessageFns<WorkforceIdentityBasedManagementURI> = {
  encode(message: WorkforceIdentityBasedManagementURI, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firstPartyManagementUri !== "") {
      writer.uint32(10).string(message.firstPartyManagementUri);
    }
    if (message.thirdPartyManagementUri !== "") {
      writer.uint32(18).string(message.thirdPartyManagementUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkforceIdentityBasedManagementURI {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkforceIdentityBasedManagementURI();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firstPartyManagementUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.thirdPartyManagementUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkforceIdentityBasedManagementURI {
    return {
      firstPartyManagementUri: isSet(object.firstPartyManagementUri)
        ? globalThis.String(object.firstPartyManagementUri)
        : "",
      thirdPartyManagementUri: isSet(object.thirdPartyManagementUri)
        ? globalThis.String(object.thirdPartyManagementUri)
        : "",
    };
  },

  toJSON(message: WorkforceIdentityBasedManagementURI): unknown {
    const obj: any = {};
    if (message.firstPartyManagementUri !== "") {
      obj.firstPartyManagementUri = message.firstPartyManagementUri;
    }
    if (message.thirdPartyManagementUri !== "") {
      obj.thirdPartyManagementUri = message.thirdPartyManagementUri;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkforceIdentityBasedManagementURI>): WorkforceIdentityBasedManagementURI {
    return WorkforceIdentityBasedManagementURI.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkforceIdentityBasedManagementURI>): WorkforceIdentityBasedManagementURI {
    const message = createBaseWorkforceIdentityBasedManagementURI();
    message.firstPartyManagementUri = object.firstPartyManagementUri ?? "";
    message.thirdPartyManagementUri = object.thirdPartyManagementUri ?? "";
    return message;
  },
};

function createBaseWorkforceIdentityBasedOAuth2ClientID(): WorkforceIdentityBasedOAuth2ClientID {
  return { firstPartyOauth2ClientId: "", thirdPartyOauth2ClientId: "" };
}

export const WorkforceIdentityBasedOAuth2ClientID: MessageFns<WorkforceIdentityBasedOAuth2ClientID> = {
  encode(message: WorkforceIdentityBasedOAuth2ClientID, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firstPartyOauth2ClientId !== "") {
      writer.uint32(10).string(message.firstPartyOauth2ClientId);
    }
    if (message.thirdPartyOauth2ClientId !== "") {
      writer.uint32(18).string(message.thirdPartyOauth2ClientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkforceIdentityBasedOAuth2ClientID {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkforceIdentityBasedOAuth2ClientID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firstPartyOauth2ClientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.thirdPartyOauth2ClientId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkforceIdentityBasedOAuth2ClientID {
    return {
      firstPartyOauth2ClientId: isSet(object.firstPartyOauth2ClientId)
        ? globalThis.String(object.firstPartyOauth2ClientId)
        : "",
      thirdPartyOauth2ClientId: isSet(object.thirdPartyOauth2ClientId)
        ? globalThis.String(object.thirdPartyOauth2ClientId)
        : "",
    };
  },

  toJSON(message: WorkforceIdentityBasedOAuth2ClientID): unknown {
    const obj: any = {};
    if (message.firstPartyOauth2ClientId !== "") {
      obj.firstPartyOauth2ClientId = message.firstPartyOauth2ClientId;
    }
    if (message.thirdPartyOauth2ClientId !== "") {
      obj.thirdPartyOauth2ClientId = message.thirdPartyOauth2ClientId;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkforceIdentityBasedOAuth2ClientID>): WorkforceIdentityBasedOAuth2ClientID {
    return WorkforceIdentityBasedOAuth2ClientID.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkforceIdentityBasedOAuth2ClientID>): WorkforceIdentityBasedOAuth2ClientID {
    const message = createBaseWorkforceIdentityBasedOAuth2ClientID();
    message.firstPartyOauth2ClientId = object.firstPartyOauth2ClientId ?? "";
    message.thirdPartyOauth2ClientId = object.thirdPartyOauth2ClientId ?? "";
    return message;
  },
};

function createBaseManagementServer(): ManagementServer {
  return {
    name: "",
    description: "",
    labels: {},
    createTime: undefined,
    updateTime: undefined,
    type: 0,
    managementUri: undefined,
    workforceIdentityBasedManagementUri: undefined,
    state: 0,
    networks: [],
    etag: "",
    oauth2ClientId: "",
    workforceIdentityBasedOauth2ClientId: undefined,
    baProxyUri: [],
    satisfiesPzs: undefined,
    satisfiesPzi: false,
  };
}

export const ManagementServer: MessageFns<ManagementServer> = {
  encode(message: ManagementServer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(74).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ManagementServer_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(112).int32(message.type);
    }
    if (message.managementUri !== undefined) {
      ManagementURI.encode(message.managementUri, writer.uint32(90).fork()).join();
    }
    if (message.workforceIdentityBasedManagementUri !== undefined) {
      WorkforceIdentityBasedManagementURI.encode(message.workforceIdentityBasedManagementUri, writer.uint32(130).fork())
        .join();
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    for (const v of message.networks) {
      NetworkConfig.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(106).string(message.etag);
    }
    if (message.oauth2ClientId !== "") {
      writer.uint32(122).string(message.oauth2ClientId);
    }
    if (message.workforceIdentityBasedOauth2ClientId !== undefined) {
      WorkforceIdentityBasedOAuth2ClientID.encode(
        message.workforceIdentityBasedOauth2ClientId,
        writer.uint32(138).fork(),
      ).join();
    }
    for (const v of message.baProxyUri) {
      writer.uint32(146).string(v!);
    }
    if (message.satisfiesPzs !== undefined) {
      BoolValue.encode({ value: message.satisfiesPzs! }, writer.uint32(154).fork()).join();
    }
    if (message.satisfiesPzi !== false) {
      writer.uint32(160).bool(message.satisfiesPzi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagementServer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagementServer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = ManagementServer_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.managementUri = ManagementURI.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.workforceIdentityBasedManagementUri = WorkforceIdentityBasedManagementURI.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.networks.push(NetworkConfig.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.oauth2ClientId = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.workforceIdentityBasedOauth2ClientId = WorkforceIdentityBasedOAuth2ClientID.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.baProxyUri.push(reader.string());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.satisfiesPzs = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.satisfiesPzi = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagementServer {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      type: isSet(object.type) ? managementServer_InstanceTypeFromJSON(object.type) : 0,
      managementUri: isSet(object.managementUri) ? ManagementURI.fromJSON(object.managementUri) : undefined,
      workforceIdentityBasedManagementUri: isSet(object.workforceIdentityBasedManagementUri)
        ? WorkforceIdentityBasedManagementURI.fromJSON(object.workforceIdentityBasedManagementUri)
        : undefined,
      state: isSet(object.state) ? managementServer_InstanceStateFromJSON(object.state) : 0,
      networks: globalThis.Array.isArray(object?.networks)
        ? object.networks.map((e: any) => NetworkConfig.fromJSON(e))
        : [],
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      oauth2ClientId: isSet(object.oauth2ClientId) ? globalThis.String(object.oauth2ClientId) : "",
      workforceIdentityBasedOauth2ClientId: isSet(object.workforceIdentityBasedOauth2ClientId)
        ? WorkforceIdentityBasedOAuth2ClientID.fromJSON(object.workforceIdentityBasedOauth2ClientId)
        : undefined,
      baProxyUri: globalThis.Array.isArray(object?.baProxyUri)
        ? object.baProxyUri.map((e: any) => globalThis.String(e))
        : [],
      satisfiesPzs: isSet(object.satisfiesPzs) ? Boolean(object.satisfiesPzs) : undefined,
      satisfiesPzi: isSet(object.satisfiesPzi) ? globalThis.Boolean(object.satisfiesPzi) : false,
    };
  },

  toJSON(message: ManagementServer): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.type !== 0) {
      obj.type = managementServer_InstanceTypeToJSON(message.type);
    }
    if (message.managementUri !== undefined) {
      obj.managementUri = ManagementURI.toJSON(message.managementUri);
    }
    if (message.workforceIdentityBasedManagementUri !== undefined) {
      obj.workforceIdentityBasedManagementUri = WorkforceIdentityBasedManagementURI.toJSON(
        message.workforceIdentityBasedManagementUri,
      );
    }
    if (message.state !== 0) {
      obj.state = managementServer_InstanceStateToJSON(message.state);
    }
    if (message.networks?.length) {
      obj.networks = message.networks.map((e) => NetworkConfig.toJSON(e));
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.oauth2ClientId !== "") {
      obj.oauth2ClientId = message.oauth2ClientId;
    }
    if (message.workforceIdentityBasedOauth2ClientId !== undefined) {
      obj.workforceIdentityBasedOauth2ClientId = WorkforceIdentityBasedOAuth2ClientID.toJSON(
        message.workforceIdentityBasedOauth2ClientId,
      );
    }
    if (message.baProxyUri?.length) {
      obj.baProxyUri = message.baProxyUri;
    }
    if (message.satisfiesPzs !== undefined) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.satisfiesPzi !== false) {
      obj.satisfiesPzi = message.satisfiesPzi;
    }
    return obj;
  },

  create(base?: DeepPartial<ManagementServer>): ManagementServer {
    return ManagementServer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ManagementServer>): ManagementServer {
    const message = createBaseManagementServer();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.type = object.type ?? 0;
    message.managementUri = (object.managementUri !== undefined && object.managementUri !== null)
      ? ManagementURI.fromPartial(object.managementUri)
      : undefined;
    message.workforceIdentityBasedManagementUri =
      (object.workforceIdentityBasedManagementUri !== undefined && object.workforceIdentityBasedManagementUri !== null)
        ? WorkforceIdentityBasedManagementURI.fromPartial(object.workforceIdentityBasedManagementUri)
        : undefined;
    message.state = object.state ?? 0;
    message.networks = object.networks?.map((e) => NetworkConfig.fromPartial(e)) || [];
    message.etag = object.etag ?? "";
    message.oauth2ClientId = object.oauth2ClientId ?? "";
    message.workforceIdentityBasedOauth2ClientId =
      (object.workforceIdentityBasedOauth2ClientId !== undefined &&
          object.workforceIdentityBasedOauth2ClientId !== null)
        ? WorkforceIdentityBasedOAuth2ClientID.fromPartial(object.workforceIdentityBasedOauth2ClientId)
        : undefined;
    message.baProxyUri = object.baProxyUri?.map((e) => e) || [];
    message.satisfiesPzs = object.satisfiesPzs ?? undefined;
    message.satisfiesPzi = object.satisfiesPzi ?? false;
    return message;
  },
};

function createBaseManagementServer_LabelsEntry(): ManagementServer_LabelsEntry {
  return { key: "", value: "" };
}

export const ManagementServer_LabelsEntry: MessageFns<ManagementServer_LabelsEntry> = {
  encode(message: ManagementServer_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManagementServer_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManagementServer_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManagementServer_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ManagementServer_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ManagementServer_LabelsEntry>): ManagementServer_LabelsEntry {
    return ManagementServer_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ManagementServer_LabelsEntry>): ManagementServer_LabelsEntry {
    const message = createBaseManagementServer_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListManagementServersRequest(): ListManagementServersRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: undefined, orderBy: undefined };
}

export const ListManagementServersRequest: MessageFns<ListManagementServersRequest> = {
  encode(message: ListManagementServersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== undefined) {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== undefined) {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListManagementServersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListManagementServersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListManagementServersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : undefined,
    };
  },

  toJSON(message: ListManagementServersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    if (message.orderBy !== undefined) {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListManagementServersRequest>): ListManagementServersRequest {
    return ListManagementServersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListManagementServersRequest>): ListManagementServersRequest {
    const message = createBaseListManagementServersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? undefined;
    message.orderBy = object.orderBy ?? undefined;
    return message;
  },
};

function createBaseListManagementServersResponse(): ListManagementServersResponse {
  return { managementServers: [], nextPageToken: "", unreachable: [] };
}

export const ListManagementServersResponse: MessageFns<ListManagementServersResponse> = {
  encode(message: ListManagementServersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.managementServers) {
      ManagementServer.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListManagementServersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListManagementServersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.managementServers.push(ManagementServer.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListManagementServersResponse {
    return {
      managementServers: globalThis.Array.isArray(object?.managementServers)
        ? object.managementServers.map((e: any) => ManagementServer.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListManagementServersResponse): unknown {
    const obj: any = {};
    if (message.managementServers?.length) {
      obj.managementServers = message.managementServers.map((e) => ManagementServer.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListManagementServersResponse>): ListManagementServersResponse {
    return ListManagementServersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListManagementServersResponse>): ListManagementServersResponse {
    const message = createBaseListManagementServersResponse();
    message.managementServers = object.managementServers?.map((e) => ManagementServer.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetManagementServerRequest(): GetManagementServerRequest {
  return { name: "" };
}

export const GetManagementServerRequest: MessageFns<GetManagementServerRequest> = {
  encode(message: GetManagementServerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetManagementServerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetManagementServerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetManagementServerRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetManagementServerRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetManagementServerRequest>): GetManagementServerRequest {
    return GetManagementServerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetManagementServerRequest>): GetManagementServerRequest {
    const message = createBaseGetManagementServerRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateManagementServerRequest(): CreateManagementServerRequest {
  return { parent: "", managementServerId: "", managementServer: undefined, requestId: "" };
}

export const CreateManagementServerRequest: MessageFns<CreateManagementServerRequest> = {
  encode(message: CreateManagementServerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.managementServerId !== "") {
      writer.uint32(18).string(message.managementServerId);
    }
    if (message.managementServer !== undefined) {
      ManagementServer.encode(message.managementServer, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateManagementServerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateManagementServerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.managementServerId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.managementServer = ManagementServer.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateManagementServerRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      managementServerId: isSet(object.managementServerId) ? globalThis.String(object.managementServerId) : "",
      managementServer: isSet(object.managementServer) ? ManagementServer.fromJSON(object.managementServer) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateManagementServerRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.managementServerId !== "") {
      obj.managementServerId = message.managementServerId;
    }
    if (message.managementServer !== undefined) {
      obj.managementServer = ManagementServer.toJSON(message.managementServer);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateManagementServerRequest>): CreateManagementServerRequest {
    return CreateManagementServerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateManagementServerRequest>): CreateManagementServerRequest {
    const message = createBaseCreateManagementServerRequest();
    message.parent = object.parent ?? "";
    message.managementServerId = object.managementServerId ?? "";
    message.managementServer = (object.managementServer !== undefined && object.managementServer !== null)
      ? ManagementServer.fromPartial(object.managementServer)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteManagementServerRequest(): DeleteManagementServerRequest {
  return { name: "", requestId: "" };
}

export const DeleteManagementServerRequest: MessageFns<DeleteManagementServerRequest> = {
  encode(message: DeleteManagementServerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteManagementServerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteManagementServerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteManagementServerRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteManagementServerRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteManagementServerRequest>): DeleteManagementServerRequest {
    return DeleteManagementServerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteManagementServerRequest>): DeleteManagementServerRequest {
    const message = createBaseDeleteManagementServerRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
    additionalInfo: {},
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    Object.entries(message.additionalInfo).forEach(([key, value]) => {
      OperationMetadata_AdditionalInfoEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = OperationMetadata_AdditionalInfoEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.additionalInfo[entry8.key] = entry8.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
      additionalInfo: isObject(object.additionalInfo)
        ? Object.entries(object.additionalInfo).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    if (message.additionalInfo) {
      const entries = Object.entries(message.additionalInfo);
      if (entries.length > 0) {
        obj.additionalInfo = {};
        entries.forEach(([k, v]) => {
          obj.additionalInfo[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    message.additionalInfo = Object.entries(object.additionalInfo ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseOperationMetadata_AdditionalInfoEntry(): OperationMetadata_AdditionalInfoEntry {
  return { key: "", value: "" };
}

export const OperationMetadata_AdditionalInfoEntry: MessageFns<OperationMetadata_AdditionalInfoEntry> = {
  encode(message: OperationMetadata_AdditionalInfoEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata_AdditionalInfoEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata_AdditionalInfoEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata_AdditionalInfoEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: OperationMetadata_AdditionalInfoEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata_AdditionalInfoEntry>): OperationMetadata_AdditionalInfoEntry {
    return OperationMetadata_AdditionalInfoEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata_AdditionalInfoEntry>): OperationMetadata_AdditionalInfoEntry {
    const message = createBaseOperationMetadata_AdditionalInfoEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/** The BackupDR Service */
export type BackupDRDefinition = typeof BackupDRDefinition;
export const BackupDRDefinition = {
  name: "BackupDR",
  fullName: "google.cloud.backupdr.v1.BackupDR",
  methods: {
    /** Lists ManagementServers in a given project and location. */
    listManagementServers: {
      name: "ListManagementServers",
      requestType: ListManagementServersRequest,
      requestStream: false,
      responseType: ListManagementServersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              83,
              101,
              114,
              118,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single ManagementServer. */
    getManagementServer: {
      name: "GetManagementServer",
      requestType: GetManagementServerRequest,
      requestStream: false,
      responseType: ManagementServer,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              83,
              101,
              114,
              118,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new ManagementServer in a given project and location. */
    createManagementServer: {
      name: "CreateManagementServer",
      requestType: CreateManagementServerRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              37,
              10,
              16,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              83,
              101,
              114,
              118,
              101,
              114,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              45,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              44,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              17,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              83,
              101,
              114,
              118,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single ManagementServer. */
    deleteManagementServer: {
      name: "DeleteManagementServer",
      requestType: DeleteManagementServerRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              42,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              83,
              101,
              114,
              118,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new BackupVault in a given project and location. */
    createBackupVault: {
      name: "CreateBackupVault",
      requestType: CreateBackupVaultRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              66,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              118,
              97,
              117,
              108,
              116,
              44,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              118,
              97,
              117,
              108,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              12,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              118,
              97,
              117,
              108,
              116,
              34,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists BackupVaults in a given project and location. */
    listBackupVaults: {
      name: "ListBackupVaults",
      requestType: ListBackupVaultsRequest,
      requestStream: false,
      responseType: ListBackupVaultsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * FetchUsableBackupVaults lists usable BackupVaults in a given project and
     * location. Usable BackupVault are the ones that user has
     * backupdr.backupVaults.get permission.
     */
    fetchUsableBackupVaults: {
      name: "FetchUsableBackupVaults",
      requestType: FetchUsableBackupVaultsRequest,
      requestStream: false,
      responseType: FetchUsableBackupVaultsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              58,
              102,
              101,
              116,
              99,
              104,
              85,
              115,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets details of a BackupVault. */
    getBackupVault: {
      name: "GetBackupVault",
      requestType: GetBackupVaultRequest,
      requestStream: false,
      responseType: BackupVault,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the settings of a BackupVault. */
    updateBackupVault: {
      name: "UpdateBackupVault",
      requestType: UpdateBackupVaultRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              32,
              10,
              11,
              66,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              24,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              118,
              97,
              117,
              108,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              77,
              58,
              12,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              118,
              97,
              117,
              108,
              116,
              50,
              61,
              47,
              118,
              49,
              47,
              123,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              118,
              97,
              117,
              108,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a BackupVault. */
    deleteBackupVault: {
      name: "DeleteBackupVault",
      requestType: DeleteBackupVaultRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the caller's permissions on a BackupVault resource.
     *
     * A caller is not required to have Google IAM permission to make this
     * request.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists DataSources in a given project and location. */
    listDataSources: {
      name: "ListDataSources",
      requestType: ListDataSourcesRequest,
      requestStream: false,
      responseType: ListDataSourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a DataSource. */
    getDataSource: {
      name: "GetDataSource",
      requestType: GetDataSourceRequest,
      requestStream: false,
      responseType: DataSource,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the settings of a DataSource. */
    updateDataSource: {
      name: "UpdateDataSource",
      requestType: UpdateDataSourceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              68,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              100,
              97,
              116,
              97,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              89,
              58,
              11,
              100,
              97,
              116,
              97,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              50,
              74,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a DataSource. This is a custom method instead of a standard delete
     * method because external clients will not delete DataSources except for
     * BackupDR backup appliances.
     */
    removeDataSource: {
      name: "RemoveDataSource",
      requestType: RemoveDataSourceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              109,
              111,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /** Sets the internal status of a DataSource. */
    setInternalStatus: {
      name: "SetInternalStatus",
      requestType: SetInternalStatusRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              46,
              10,
              25,
              83,
              101,
              116,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              83,
              116,
              97,
              116,
              117,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([11, 100, 97, 116, 97, 95, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              92,
              58,
              1,
              42,
              34,
              87,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              83,
              116,
              97,
              116,
              117,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Internal only.
     * Initiates a backup.
     */
    initiateBackup: {
      name: "InitiateBackup",
      requestType: InitiateBackupRequest,
      requestStream: false,
      responseType: InitiateBackupResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 100, 97, 116, 97, 95, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              89,
              58,
              1,
              42,
              34,
              84,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              105,
              110,
              105,
              116,
              105,
              97,
              116,
              101,
              66,
              97,
              99,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /**
     * Internal only.
     * Abandons a backup.
     */
    abandonBackup: {
      name: "AbandonBackup",
      requestType: AbandonBackupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([11, 100, 97, 116, 97, 95, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              88,
              58,
              1,
              42,
              34,
              83,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              97,
              98,
              97,
              110,
              100,
              111,
              110,
              66,
              97,
              99,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /**
     * Internal only.
     * Finalize a backup that was started by a call to InitiateBackup.
     */
    finalizeBackup: {
      name: "FinalizeBackup",
      requestType: FinalizeBackupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              6,
              66,
              97,
              99,
              107,
              117,
              112,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([11, 100, 97, 116, 97, 95, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              89,
              58,
              1,
              42,
              34,
              84,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              102,
              105,
              110,
              97,
              108,
              105,
              122,
              101,
              66,
              97,
              99,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /**
     * Internal only.
     * Fetch access token for a given data source.
     */
    fetchAccessToken: {
      name: "FetchAccessToken",
      requestType: FetchAccessTokenRequest,
      requestStream: false,
      responseType: FetchAccessTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              84,
              58,
              1,
              42,
              34,
              79,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              65,
              99,
              99,
              101,
              115,
              115,
              84,
              111,
              107,
              101,
              110,
            ]),
          ],
        },
      },
    },
    /** Lists Backups in a given project and location. */
    listBackups: {
      name: "ListBackups",
      requestType: ListBackupsRequest,
      requestStream: false,
      responseType: ListBackupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              74,
              18,
              72,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a Backup. */
    getBackup: {
      name: "GetBackup",
      requestType: GetBackupRequest,
      requestStream: false,
      responseType: Backup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              74,
              18,
              72,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the settings of a Backup. */
    updateBackup: {
      name: "UpdateBackup",
      requestType: UpdateBackupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              6,
              66,
              97,
              99,
              107,
              117,
              112,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([18, 98, 97, 99, 107, 117, 112, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              89,
              58,
              6,
              98,
              97,
              99,
              107,
              117,
              112,
              50,
              79,
              47,
              118,
              49,
              47,
              123,
              98,
              97,
              99,
              107,
              117,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a Backup. */
    deleteBackup: {
      name: "DeleteBackup",
      requestType: DeleteBackupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              6,
              66,
              97,
              99,
              107,
              117,
              112,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              74,
              42,
              72,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Restore from a Backup */
    restoreBackup: {
      name: "RestoreBackup",
      requestType: RestoreBackupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              82,
              101,
              115,
              116,
              111,
              114,
              101,
              66,
              97,
              99,
              107,
              117,
              112,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              85,
              58,
              1,
              42,
              34,
              80,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              86,
              97,
              117,
              108,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
            ]),
          ],
        },
      },
    },
    /** Create a BackupPlan */
    createBackupPlan: {
      name: "CreateBackupPlan",
      requestType: CreateBackupPlanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              66,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              44,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              11,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single BackupPlan. */
    getBackupPlan: {
      name: "GetBackupPlan",
      requestType: GetBackupPlanRequest,
      requestStream: false,
      responseType: BackupPlan,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists BackupPlans in a given project and location. */
    listBackupPlans: {
      name: "ListBackupPlans",
      requestType: ListBackupPlansRequest,
      requestStream: false,
      responseType: ListBackupPlansResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single BackupPlan. */
    deleteBackupPlan: {
      name: "DeleteBackupPlan",
      requestType: DeleteBackupPlanRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Create a BackupPlanAssociation */
    createBackupPlanAssociation: {
      name: "CreateBackupPlanAssociation",
      requestType: CreateBackupPlanAssociationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              66,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              65,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              57,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              95,
              97,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              105,
              111,
              110,
              44,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              95,
              97,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              85,
              58,
              23,
              98,
              97,
              99,
              107,
              117,
              112,
              95,
              112,
              108,
              97,
              110,
              95,
              97,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              65,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single BackupPlanAssociation. */
    getBackupPlanAssociation: {
      name: "GetBackupPlanAssociation",
      requestType: GetBackupPlanAssociationRequest,
      requestStream: false,
      responseType: BackupPlanAssociation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              65,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists BackupPlanAssociations in a given project and location. */
    listBackupPlanAssociations: {
      name: "ListBackupPlanAssociations",
      requestType: ListBackupPlanAssociationsRequest,
      requestStream: false,
      responseType: ListBackupPlanAssociationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              65,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a single BackupPlanAssociation. */
    deleteBackupPlanAssociation: {
      name: "DeleteBackupPlanAssociation",
      requestType: DeleteBackupPlanAssociationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              42,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              65,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Triggers a new Backup. */
    triggerBackup: {
      name: "TriggerBackup",
      requestType: TriggerBackupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              66,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              65,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              105,
              111,
              110,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([12, 110, 97, 109, 101, 44, 114, 117, 108, 101, 95, 105, 100])],
          578365826: [
            Buffer.from([
              77,
              58,
              1,
              42,
              34,
              72,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              80,
              108,
              97,
              110,
              65,
              115,
              115,
              111,
              99,
              105,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              66,
              97,
              99,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface BackupDRServiceImplementation<CallContextExt = {}> {
  /** Lists ManagementServers in a given project and location. */
  listManagementServers(
    request: ListManagementServersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListManagementServersResponse>>;
  /** Gets details of a single ManagementServer. */
  getManagementServer(
    request: GetManagementServerRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ManagementServer>>;
  /** Creates a new ManagementServer in a given project and location. */
  createManagementServer(
    request: CreateManagementServerRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single ManagementServer. */
  deleteManagementServer(
    request: DeleteManagementServerRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a new BackupVault in a given project and location. */
  createBackupVault(
    request: CreateBackupVaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists BackupVaults in a given project and location. */
  listBackupVaults(
    request: ListBackupVaultsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBackupVaultsResponse>>;
  /**
   * FetchUsableBackupVaults lists usable BackupVaults in a given project and
   * location. Usable BackupVault are the ones that user has
   * backupdr.backupVaults.get permission.
   */
  fetchUsableBackupVaults(
    request: FetchUsableBackupVaultsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchUsableBackupVaultsResponse>>;
  /** Gets details of a BackupVault. */
  getBackupVault(
    request: GetBackupVaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BackupVault>>;
  /** Updates the settings of a BackupVault. */
  updateBackupVault(
    request: UpdateBackupVaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a BackupVault. */
  deleteBackupVault(
    request: DeleteBackupVaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Returns the caller's permissions on a BackupVault resource.
   *
   * A caller is not required to have Google IAM permission to make this
   * request.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
  /** Lists DataSources in a given project and location. */
  listDataSources(
    request: ListDataSourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataSourcesResponse>>;
  /** Gets details of a DataSource. */
  getDataSource(request: GetDataSourceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DataSource>>;
  /** Updates the settings of a DataSource. */
  updateDataSource(
    request: UpdateDataSourceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a DataSource. This is a custom method instead of a standard delete
   * method because external clients will not delete DataSources except for
   * BackupDR backup appliances.
   */
  removeDataSource(
    request: RemoveDataSourceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Sets the internal status of a DataSource. */
  setInternalStatus(
    request: SetInternalStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Internal only.
   * Initiates a backup.
   */
  initiateBackup(
    request: InitiateBackupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<InitiateBackupResponse>>;
  /**
   * Internal only.
   * Abandons a backup.
   */
  abandonBackup(request: AbandonBackupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Internal only.
   * Finalize a backup that was started by a call to InitiateBackup.
   */
  finalizeBackup(
    request: FinalizeBackupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Internal only.
   * Fetch access token for a given data source.
   */
  fetchAccessToken(
    request: FetchAccessTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchAccessTokenResponse>>;
  /** Lists Backups in a given project and location. */
  listBackups(
    request: ListBackupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBackupsResponse>>;
  /** Gets details of a Backup. */
  getBackup(request: GetBackupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Backup>>;
  /** Updates the settings of a Backup. */
  updateBackup(request: UpdateBackupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a Backup. */
  deleteBackup(request: DeleteBackupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Restore from a Backup */
  restoreBackup(request: RestoreBackupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Create a BackupPlan */
  createBackupPlan(
    request: CreateBackupPlanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets details of a single BackupPlan. */
  getBackupPlan(request: GetBackupPlanRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BackupPlan>>;
  /** Lists BackupPlans in a given project and location. */
  listBackupPlans(
    request: ListBackupPlansRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBackupPlansResponse>>;
  /** Deletes a single BackupPlan. */
  deleteBackupPlan(
    request: DeleteBackupPlanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Create a BackupPlanAssociation */
  createBackupPlanAssociation(
    request: CreateBackupPlanAssociationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets details of a single BackupPlanAssociation. */
  getBackupPlanAssociation(
    request: GetBackupPlanAssociationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BackupPlanAssociation>>;
  /** Lists BackupPlanAssociations in a given project and location. */
  listBackupPlanAssociations(
    request: ListBackupPlanAssociationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBackupPlanAssociationsResponse>>;
  /** Deletes a single BackupPlanAssociation. */
  deleteBackupPlanAssociation(
    request: DeleteBackupPlanAssociationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Triggers a new Backup. */
  triggerBackup(request: TriggerBackupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface BackupDRClient<CallOptionsExt = {}> {
  /** Lists ManagementServers in a given project and location. */
  listManagementServers(
    request: DeepPartial<ListManagementServersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListManagementServersResponse>;
  /** Gets details of a single ManagementServer. */
  getManagementServer(
    request: DeepPartial<GetManagementServerRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ManagementServer>;
  /** Creates a new ManagementServer in a given project and location. */
  createManagementServer(
    request: DeepPartial<CreateManagementServerRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single ManagementServer. */
  deleteManagementServer(
    request: DeepPartial<DeleteManagementServerRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a new BackupVault in a given project and location. */
  createBackupVault(
    request: DeepPartial<CreateBackupVaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists BackupVaults in a given project and location. */
  listBackupVaults(
    request: DeepPartial<ListBackupVaultsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBackupVaultsResponse>;
  /**
   * FetchUsableBackupVaults lists usable BackupVaults in a given project and
   * location. Usable BackupVault are the ones that user has
   * backupdr.backupVaults.get permission.
   */
  fetchUsableBackupVaults(
    request: DeepPartial<FetchUsableBackupVaultsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchUsableBackupVaultsResponse>;
  /** Gets details of a BackupVault. */
  getBackupVault(
    request: DeepPartial<GetBackupVaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BackupVault>;
  /** Updates the settings of a BackupVault. */
  updateBackupVault(
    request: DeepPartial<UpdateBackupVaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a BackupVault. */
  deleteBackupVault(
    request: DeepPartial<DeleteBackupVaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Returns the caller's permissions on a BackupVault resource.
   *
   * A caller is not required to have Google IAM permission to make this
   * request.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
  /** Lists DataSources in a given project and location. */
  listDataSources(
    request: DeepPartial<ListDataSourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataSourcesResponse>;
  /** Gets details of a DataSource. */
  getDataSource(
    request: DeepPartial<GetDataSourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataSource>;
  /** Updates the settings of a DataSource. */
  updateDataSource(
    request: DeepPartial<UpdateDataSourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a DataSource. This is a custom method instead of a standard delete
   * method because external clients will not delete DataSources except for
   * BackupDR backup appliances.
   */
  removeDataSource(
    request: DeepPartial<RemoveDataSourceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Sets the internal status of a DataSource. */
  setInternalStatus(
    request: DeepPartial<SetInternalStatusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Internal only.
   * Initiates a backup.
   */
  initiateBackup(
    request: DeepPartial<InitiateBackupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<InitiateBackupResponse>;
  /**
   * Internal only.
   * Abandons a backup.
   */
  abandonBackup(request: DeepPartial<AbandonBackupRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Internal only.
   * Finalize a backup that was started by a call to InitiateBackup.
   */
  finalizeBackup(
    request: DeepPartial<FinalizeBackupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Internal only.
   * Fetch access token for a given data source.
   */
  fetchAccessToken(
    request: DeepPartial<FetchAccessTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchAccessTokenResponse>;
  /** Lists Backups in a given project and location. */
  listBackups(
    request: DeepPartial<ListBackupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBackupsResponse>;
  /** Gets details of a Backup. */
  getBackup(request: DeepPartial<GetBackupRequest>, options?: CallOptions & CallOptionsExt): Promise<Backup>;
  /** Updates the settings of a Backup. */
  updateBackup(request: DeepPartial<UpdateBackupRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a Backup. */
  deleteBackup(request: DeepPartial<DeleteBackupRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Restore from a Backup */
  restoreBackup(request: DeepPartial<RestoreBackupRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Create a BackupPlan */
  createBackupPlan(
    request: DeepPartial<CreateBackupPlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets details of a single BackupPlan. */
  getBackupPlan(
    request: DeepPartial<GetBackupPlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BackupPlan>;
  /** Lists BackupPlans in a given project and location. */
  listBackupPlans(
    request: DeepPartial<ListBackupPlansRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBackupPlansResponse>;
  /** Deletes a single BackupPlan. */
  deleteBackupPlan(
    request: DeepPartial<DeleteBackupPlanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Create a BackupPlanAssociation */
  createBackupPlanAssociation(
    request: DeepPartial<CreateBackupPlanAssociationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets details of a single BackupPlanAssociation. */
  getBackupPlanAssociation(
    request: DeepPartial<GetBackupPlanAssociationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BackupPlanAssociation>;
  /** Lists BackupPlanAssociations in a given project and location. */
  listBackupPlanAssociations(
    request: DeepPartial<ListBackupPlanAssociationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBackupPlanAssociationsResponse>;
  /** Deletes a single BackupPlanAssociation. */
  deleteBackupPlanAssociation(
    request: DeepPartial<DeleteBackupPlanAssociationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Triggers a new Backup. */
  triggerBackup(request: DeepPartial<TriggerBackupRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
