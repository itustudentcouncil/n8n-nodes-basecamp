// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/backupdr/logging/v1/bdr_log.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.backupdr.logging.v1";

/**
 * Log entry for Backup and Restore Job for resources using BackupPlan based
 * protection.
 */
export interface BDRBackupRestoreJobLog {
  /** The job_id field displays the identifier of the job being logged. */
  jobId?:
    | string
    | undefined;
  /** The category field displays the category of the job. */
  jobCategory?:
    | string
    | undefined;
  /** The status field displays the status of the job. */
  jobStatus?:
    | string
    | undefined;
  /** Full resource name of the protected resource. */
  sourceResourceName?:
    | string
    | undefined;
  /** The source resource ID. */
  sourceResourceId?:
    | string
    | undefined;
  /**
   * Full resource name of the restore resource. Only populated in
   * restore jobs.
   */
  restoreResourceName?:
    | string
    | undefined;
  /**
   * Full resource name of the backup created in backup jobs and used in restore
   * jobs.
   */
  backupName?:
    | string
    | undefined;
  /** The resource_type field displays the type of the protected resource. */
  resourceType?:
    | string
    | undefined;
  /** Start time of the job. */
  startTime?:
    | Date
    | undefined;
  /** End time of the job. */
  endTime?:
    | Date
    | undefined;
  /**
   * Full resource name for Backup Plan of the job. Only populated for Scheduled
   * Backup and Adhoc Backup.
   */
  backupPlanName?:
    | string
    | undefined;
  /**
   * Name of the backup rule. Only populated for Scheduled Backup and Adhoc
   * Backup.
   */
  backupRule?:
    | string
    | undefined;
  /** Full resource name backup vault name */
  backupVaultName?:
    | string
    | undefined;
  /** The amount of incremental backup data copied. */
  incrementalBackupSizeGib?:
    | number
    | undefined;
  /** The error code. Only populated in error scenarios. */
  errorCode?:
    | number
    | undefined;
  /**
   * The name of the error type eg. PERMISSION_DENIED. Only populated in error
   * scenarios.
   */
  errorType?:
    | string
    | undefined;
  /** The user readable error message. Only populated in error scenarios. */
  errorMessage?: string | undefined;
}

function createBaseBDRBackupRestoreJobLog(): BDRBackupRestoreJobLog {
  return {
    jobId: undefined,
    jobCategory: undefined,
    jobStatus: undefined,
    sourceResourceName: undefined,
    sourceResourceId: undefined,
    restoreResourceName: undefined,
    backupName: undefined,
    resourceType: undefined,
    startTime: undefined,
    endTime: undefined,
    backupPlanName: undefined,
    backupRule: undefined,
    backupVaultName: undefined,
    incrementalBackupSizeGib: undefined,
    errorCode: undefined,
    errorType: undefined,
    errorMessage: undefined,
  };
}

export const BDRBackupRestoreJobLog: MessageFns<BDRBackupRestoreJobLog> = {
  encode(message: BDRBackupRestoreJobLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== undefined) {
      writer.uint32(10).string(message.jobId);
    }
    if (message.jobCategory !== undefined) {
      writer.uint32(18).string(message.jobCategory);
    }
    if (message.jobStatus !== undefined) {
      writer.uint32(26).string(message.jobStatus);
    }
    if (message.sourceResourceName !== undefined) {
      writer.uint32(34).string(message.sourceResourceName);
    }
    if (message.sourceResourceId !== undefined) {
      writer.uint32(42).string(message.sourceResourceId);
    }
    if (message.restoreResourceName !== undefined) {
      writer.uint32(50).string(message.restoreResourceName);
    }
    if (message.backupName !== undefined) {
      writer.uint32(58).string(message.backupName);
    }
    if (message.resourceType !== undefined) {
      writer.uint32(66).string(message.resourceType);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(74).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(82).fork()).join();
    }
    if (message.backupPlanName !== undefined) {
      writer.uint32(90).string(message.backupPlanName);
    }
    if (message.backupRule !== undefined) {
      writer.uint32(98).string(message.backupRule);
    }
    if (message.backupVaultName !== undefined) {
      writer.uint32(106).string(message.backupVaultName);
    }
    if (message.incrementalBackupSizeGib !== undefined) {
      writer.uint32(113).double(message.incrementalBackupSizeGib);
    }
    if (message.errorCode !== undefined) {
      writer.uint32(120).int32(message.errorCode);
    }
    if (message.errorType !== undefined) {
      writer.uint32(130).string(message.errorType);
    }
    if (message.errorMessage !== undefined) {
      writer.uint32(138).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BDRBackupRestoreJobLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBDRBackupRestoreJobLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jobCategory = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobStatus = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sourceResourceName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sourceResourceId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.restoreResourceName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.backupName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.backupPlanName = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.backupRule = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.backupVaultName = reader.string();
          continue;
        case 14:
          if (tag !== 113) {
            break;
          }

          message.incrementalBackupSizeGib = reader.double();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.errorCode = reader.int32();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.errorType = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BDRBackupRestoreJobLog {
    return {
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : undefined,
      jobCategory: isSet(object.jobCategory) ? globalThis.String(object.jobCategory) : undefined,
      jobStatus: isSet(object.jobStatus) ? globalThis.String(object.jobStatus) : undefined,
      sourceResourceName: isSet(object.sourceResourceName) ? globalThis.String(object.sourceResourceName) : undefined,
      sourceResourceId: isSet(object.sourceResourceId) ? globalThis.String(object.sourceResourceId) : undefined,
      restoreResourceName: isSet(object.restoreResourceName)
        ? globalThis.String(object.restoreResourceName)
        : undefined,
      backupName: isSet(object.backupName) ? globalThis.String(object.backupName) : undefined,
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      backupPlanName: isSet(object.backupPlanName) ? globalThis.String(object.backupPlanName) : undefined,
      backupRule: isSet(object.backupRule) ? globalThis.String(object.backupRule) : undefined,
      backupVaultName: isSet(object.backupVaultName) ? globalThis.String(object.backupVaultName) : undefined,
      incrementalBackupSizeGib: isSet(object.incrementalBackupSizeGib)
        ? globalThis.Number(object.incrementalBackupSizeGib)
        : undefined,
      errorCode: isSet(object.errorCode) ? globalThis.Number(object.errorCode) : undefined,
      errorType: isSet(object.errorType) ? globalThis.String(object.errorType) : undefined,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : undefined,
    };
  },

  toJSON(message: BDRBackupRestoreJobLog): unknown {
    const obj: any = {};
    if (message.jobId !== undefined) {
      obj.jobId = message.jobId;
    }
    if (message.jobCategory !== undefined) {
      obj.jobCategory = message.jobCategory;
    }
    if (message.jobStatus !== undefined) {
      obj.jobStatus = message.jobStatus;
    }
    if (message.sourceResourceName !== undefined) {
      obj.sourceResourceName = message.sourceResourceName;
    }
    if (message.sourceResourceId !== undefined) {
      obj.sourceResourceId = message.sourceResourceId;
    }
    if (message.restoreResourceName !== undefined) {
      obj.restoreResourceName = message.restoreResourceName;
    }
    if (message.backupName !== undefined) {
      obj.backupName = message.backupName;
    }
    if (message.resourceType !== undefined) {
      obj.resourceType = message.resourceType;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.backupPlanName !== undefined) {
      obj.backupPlanName = message.backupPlanName;
    }
    if (message.backupRule !== undefined) {
      obj.backupRule = message.backupRule;
    }
    if (message.backupVaultName !== undefined) {
      obj.backupVaultName = message.backupVaultName;
    }
    if (message.incrementalBackupSizeGib !== undefined) {
      obj.incrementalBackupSizeGib = message.incrementalBackupSizeGib;
    }
    if (message.errorCode !== undefined) {
      obj.errorCode = Math.round(message.errorCode);
    }
    if (message.errorType !== undefined) {
      obj.errorType = message.errorType;
    }
    if (message.errorMessage !== undefined) {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<BDRBackupRestoreJobLog>): BDRBackupRestoreJobLog {
    return BDRBackupRestoreJobLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BDRBackupRestoreJobLog>): BDRBackupRestoreJobLog {
    const message = createBaseBDRBackupRestoreJobLog();
    message.jobId = object.jobId ?? undefined;
    message.jobCategory = object.jobCategory ?? undefined;
    message.jobStatus = object.jobStatus ?? undefined;
    message.sourceResourceName = object.sourceResourceName ?? undefined;
    message.sourceResourceId = object.sourceResourceId ?? undefined;
    message.restoreResourceName = object.restoreResourceName ?? undefined;
    message.backupName = object.backupName ?? undefined;
    message.resourceType = object.resourceType ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.backupPlanName = object.backupPlanName ?? undefined;
    message.backupRule = object.backupRule ?? undefined;
    message.backupVaultName = object.backupVaultName ?? undefined;
    message.incrementalBackupSizeGib = object.incrementalBackupSizeGib ?? undefined;
    message.errorCode = object.errorCode ?? undefined;
    message.errorType = object.errorType ?? undefined;
    message.errorMessage = object.errorMessage ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
