// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/documentai/v1/document_processor_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { Document } from "./document.js";
import { BatchDocumentsInputConfig, DocumentOutputConfig, GcsDocument, OcrConfig, RawDocument } from "./document_io.js";
import { DocumentSchema } from "./document_schema.js";
import { Evaluation } from "./evaluation.js";
import { CommonOperationMetadata } from "./operation_metadata.js";
import { Processor, ProcessorVersion } from "./processor.js";
import { ProcessorType } from "./processor_type.js";

export const protobufPackage = "google.cloud.documentai.v1";

/** Options for Process API */
export interface ProcessOptions {
  /** Which pages to process (1-indexed). */
  individualPageSelector?:
    | ProcessOptions_IndividualPageSelector
    | undefined;
  /**
   * Only process certain pages from the start. Process all if the document
   * has fewer pages.
   */
  fromStart?:
    | number
    | undefined;
  /** Only process certain pages from the end, same as above. */
  fromEnd?:
    | number
    | undefined;
  /**
   * Only applicable to `OCR_PROCESSOR` and `FORM_PARSER_PROCESSOR`.
   * Returns error if set on other processor types.
   */
  ocrConfig:
    | OcrConfig
    | undefined;
  /**
   * Optional. Only applicable to `LAYOUT_PARSER_PROCESSOR`.
   * Returns error if set on other processor types.
   */
  layoutConfig:
    | ProcessOptions_LayoutConfig
    | undefined;
  /**
   * Optional. Override the schema of the
   * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion]. Will
   * return an Invalid Argument error if this field is set when the underlying
   * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion] doesn't
   * support schema override.
   */
  schemaOverride: DocumentSchema | undefined;
}

/** Serving config for layout parser processor. */
export interface ProcessOptions_LayoutConfig {
  /** Optional. Config for chunking in layout parser processor. */
  chunkingConfig: ProcessOptions_LayoutConfig_ChunkingConfig | undefined;
}

/** Serving config for chunking. */
export interface ProcessOptions_LayoutConfig_ChunkingConfig {
  /**
   * Optional. The chunk sizes to use when splitting documents, in order of
   * level.
   */
  chunkSize: number;
  /** Optional. Whether or not to include ancestor headings when splitting. */
  includeAncestorHeadings: boolean;
}

/** A list of individual page numbers. */
export interface ProcessOptions_IndividualPageSelector {
  /** Optional. Indices of the pages (starting from 1). */
  pages: number[];
}

/**
 * Request message for the
 * [ProcessDocument][google.cloud.documentai.v1.DocumentProcessorService.ProcessDocument]
 * method.
 */
export interface ProcessRequest {
  /** An inline document proto. */
  inlineDocument?:
    | Document
    | undefined;
  /** A raw document content (bytes). */
  rawDocument?:
    | RawDocument
    | undefined;
  /** A raw document on Google Cloud Storage. */
  gcsDocument?:
    | GcsDocument
    | undefined;
  /**
   * Required. The resource name of the
   * [Processor][google.cloud.documentai.v1.Processor] or
   * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion]
   * to use for processing. If a
   * [Processor][google.cloud.documentai.v1.Processor] is specified, the server
   * will use its [default
   * version][google.cloud.documentai.v1.Processor.default_processor_version].
   * Format: `projects/{project}/locations/{location}/processors/{processor}`,
   * or
   * `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
   */
  name: string;
  /**
   * Whether human review should be skipped for this request. Default to
   * `false`.
   */
  skipHumanReview: boolean;
  /**
   * Specifies which fields to include in the
   * [ProcessResponse.document][google.cloud.documentai.v1.ProcessResponse.document]
   * output. Only supports top-level document and pages field, so it must be in
   * the form of `{document_field_name}` or `pages.{page_field_name}`.
   */
  fieldMask:
    | string[]
    | undefined;
  /** Inference-time options for the process API */
  processOptions:
    | ProcessOptions
    | undefined;
  /**
   * Optional. The labels with user-defined metadata for the request.
   *
   * Label keys and values can be no longer than 63 characters
   * (Unicode codepoints) and can only contain lowercase letters, numeric
   * characters, underscores, and dashes. International characters are allowed.
   * Label values are optional. Label keys must start with a letter.
   */
  labels: { [key: string]: string };
  /** Optional. Option to remove images from the document. */
  imagelessMode: boolean;
}

export interface ProcessRequest_LabelsEntry {
  key: string;
  value: string;
}

/** The status of human review on a processed document. */
export interface HumanReviewStatus {
  /** The state of human review on the processing request. */
  state: HumanReviewStatus_State;
  /** A message providing more details about the human review state. */
  stateMessage: string;
  /**
   * The name of the operation triggered by the processed document. This field
   * is populated only when the
   * [state][google.cloud.documentai.v1.HumanReviewStatus.state] is
   * `HUMAN_REVIEW_IN_PROGRESS`. It has the same response type and metadata as
   * the long-running operation returned by
   * [ReviewDocument][google.cloud.documentai.v1.DocumentProcessorService.ReviewDocument].
   */
  humanReviewOperation: string;
}

/** The final state of human review on a processed document. */
export enum HumanReviewStatus_State {
  /** STATE_UNSPECIFIED - Human review state is unspecified. Most likely due to an internal error. */
  STATE_UNSPECIFIED = 0,
  /**
   * SKIPPED - Human review is skipped for the document. This can happen because human
   * review isn't enabled on the processor or the processing request has
   * been set to skip this document.
   */
  SKIPPED = 1,
  /** VALIDATION_PASSED - Human review validation is triggered and passed, so no review is needed. */
  VALIDATION_PASSED = 2,
  /** IN_PROGRESS - Human review validation is triggered and the document is under review. */
  IN_PROGRESS = 3,
  /**
   * ERROR - Some error happened during triggering human review, see the
   * [state_message][google.cloud.documentai.v1.HumanReviewStatus.state_message]
   * for details.
   */
  ERROR = 4,
  UNRECOGNIZED = -1,
}

export function humanReviewStatus_StateFromJSON(object: any): HumanReviewStatus_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return HumanReviewStatus_State.STATE_UNSPECIFIED;
    case 1:
    case "SKIPPED":
      return HumanReviewStatus_State.SKIPPED;
    case 2:
    case "VALIDATION_PASSED":
      return HumanReviewStatus_State.VALIDATION_PASSED;
    case 3:
    case "IN_PROGRESS":
      return HumanReviewStatus_State.IN_PROGRESS;
    case 4:
    case "ERROR":
      return HumanReviewStatus_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HumanReviewStatus_State.UNRECOGNIZED;
  }
}

export function humanReviewStatus_StateToJSON(object: HumanReviewStatus_State): string {
  switch (object) {
    case HumanReviewStatus_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case HumanReviewStatus_State.SKIPPED:
      return "SKIPPED";
    case HumanReviewStatus_State.VALIDATION_PASSED:
      return "VALIDATION_PASSED";
    case HumanReviewStatus_State.IN_PROGRESS:
      return "IN_PROGRESS";
    case HumanReviewStatus_State.ERROR:
      return "ERROR";
    case HumanReviewStatus_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Response message for the
 * [ProcessDocument][google.cloud.documentai.v1.DocumentProcessorService.ProcessDocument]
 * method.
 */
export interface ProcessResponse {
  /**
   * The document payload, will populate fields based on the processor's
   * behavior.
   */
  document:
    | Document
    | undefined;
  /** The status of human review on the processed document. */
  humanReviewStatus: HumanReviewStatus | undefined;
}

/**
 * Request message for
 * [BatchProcessDocuments][google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments].
 */
export interface BatchProcessRequest {
  /**
   * Required. The resource name of
   * [Processor][google.cloud.documentai.v1.Processor] or
   * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion].
   * Format: `projects/{project}/locations/{location}/processors/{processor}`,
   * or
   * `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
   */
  name: string;
  /**
   * The input documents for the
   * [BatchProcessDocuments][google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments]
   * method.
   */
  inputDocuments:
    | BatchDocumentsInputConfig
    | undefined;
  /**
   * The output configuration for the
   * [BatchProcessDocuments][google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments]
   * method.
   */
  documentOutputConfig:
    | DocumentOutputConfig
    | undefined;
  /**
   * Whether human review should be skipped for this request. Default to
   * `false`.
   */
  skipHumanReview: boolean;
  /** Inference-time options for the process API */
  processOptions:
    | ProcessOptions
    | undefined;
  /**
   * Optional. The labels with user-defined metadata for the request.
   *
   * Label keys and values can be no longer than 63 characters
   * (Unicode codepoints) and can only contain lowercase letters, numeric
   * characters, underscores, and dashes. International characters are allowed.
   * Label values are optional. Label keys must start with a letter.
   */
  labels: { [key: string]: string };
}

export interface BatchProcessRequest_LabelsEntry {
  key: string;
  value: string;
}

/**
 * Response message for
 * [BatchProcessDocuments][google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments].
 */
export interface BatchProcessResponse {
}

/**
 * The long-running operation metadata for
 * [BatchProcessDocuments][google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments].
 */
export interface BatchProcessMetadata {
  /** The state of the current batch processing. */
  state: BatchProcessMetadata_State;
  /**
   * A message providing more details about the current state of processing.
   * For example, the error message if the operation is failed.
   */
  stateMessage: string;
  /** The creation time of the operation. */
  createTime:
    | Date
    | undefined;
  /** The last update time of the operation. */
  updateTime:
    | Date
    | undefined;
  /** The list of response details of each document. */
  individualProcessStatuses: BatchProcessMetadata_IndividualProcessStatus[];
}

/** Possible states of the batch processing operation. */
export enum BatchProcessMetadata_State {
  /** STATE_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  STATE_UNSPECIFIED = 0,
  /** WAITING - Request operation is waiting for scheduling. */
  WAITING = 1,
  /** RUNNING - Request is being processed. */
  RUNNING = 2,
  /** SUCCEEDED - The batch processing completed successfully. */
  SUCCEEDED = 3,
  /** CANCELLING - The batch processing was being cancelled. */
  CANCELLING = 4,
  /** CANCELLED - The batch processing was cancelled. */
  CANCELLED = 5,
  /** FAILED - The batch processing has failed. */
  FAILED = 6,
  UNRECOGNIZED = -1,
}

export function batchProcessMetadata_StateFromJSON(object: any): BatchProcessMetadata_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return BatchProcessMetadata_State.STATE_UNSPECIFIED;
    case 1:
    case "WAITING":
      return BatchProcessMetadata_State.WAITING;
    case 2:
    case "RUNNING":
      return BatchProcessMetadata_State.RUNNING;
    case 3:
    case "SUCCEEDED":
      return BatchProcessMetadata_State.SUCCEEDED;
    case 4:
    case "CANCELLING":
      return BatchProcessMetadata_State.CANCELLING;
    case 5:
    case "CANCELLED":
      return BatchProcessMetadata_State.CANCELLED;
    case 6:
    case "FAILED":
      return BatchProcessMetadata_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BatchProcessMetadata_State.UNRECOGNIZED;
  }
}

export function batchProcessMetadata_StateToJSON(object: BatchProcessMetadata_State): string {
  switch (object) {
    case BatchProcessMetadata_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case BatchProcessMetadata_State.WAITING:
      return "WAITING";
    case BatchProcessMetadata_State.RUNNING:
      return "RUNNING";
    case BatchProcessMetadata_State.SUCCEEDED:
      return "SUCCEEDED";
    case BatchProcessMetadata_State.CANCELLING:
      return "CANCELLING";
    case BatchProcessMetadata_State.CANCELLED:
      return "CANCELLED";
    case BatchProcessMetadata_State.FAILED:
      return "FAILED";
    case BatchProcessMetadata_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The status of a each individual document in the batch process. */
export interface BatchProcessMetadata_IndividualProcessStatus {
  /**
   * The source of the document, same as the
   * [input_gcs_source][google.cloud.documentai.v1.BatchProcessMetadata.IndividualProcessStatus.input_gcs_source]
   * field in the request when the batch process started.
   */
  inputGcsSource: string;
  /** The status processing the document. */
  status:
    | Status
    | undefined;
  /**
   * The Cloud Storage output destination (in the request as
   * [DocumentOutputConfig.GcsOutputConfig.gcs_uri][google.cloud.documentai.v1.DocumentOutputConfig.GcsOutputConfig.gcs_uri])
   * of the processed document if it was successful, otherwise empty.
   */
  outputGcsDestination: string;
  /** The status of human review on the processed document. */
  humanReviewStatus: HumanReviewStatus | undefined;
}

/**
 * Request message for the
 * [FetchProcessorTypes][google.cloud.documentai.v1.DocumentProcessorService.FetchProcessorTypes]
 * method. Some processor types may require the project be added to an
 * allowlist.
 */
export interface FetchProcessorTypesRequest {
  /**
   * Required. The location of processor types to list.
   * Format: `projects/{project}/locations/{location}`.
   */
  parent: string;
}

/**
 * Response message for the
 * [FetchProcessorTypes][google.cloud.documentai.v1.DocumentProcessorService.FetchProcessorTypes]
 * method.
 */
export interface FetchProcessorTypesResponse {
  /** The list of processor types. */
  processorTypes: ProcessorType[];
}

/**
 * Request message for the
 * [ListProcessorTypes][google.cloud.documentai.v1.DocumentProcessorService.ListProcessorTypes]
 * method. Some processor types may require the project be added to an
 * allowlist.
 */
export interface ListProcessorTypesRequest {
  /**
   * Required. The location of processor types to list.
   * Format: `projects/{project}/locations/{location}`.
   */
  parent: string;
  /**
   * The maximum number of processor types to return.
   * If unspecified, at most `100` processor types will be returned.
   * The maximum value is `500`. Values above `500` will be coerced to `500`.
   */
  pageSize: number;
  /** Used to retrieve the next page of results, empty if at the end of the list. */
  pageToken: string;
}

/**
 * Response message for the
 * [ListProcessorTypes][google.cloud.documentai.v1.DocumentProcessorService.ListProcessorTypes]
 * method.
 */
export interface ListProcessorTypesResponse {
  /** The processor types. */
  processorTypes: ProcessorType[];
  /** Points to the next page, otherwise empty. */
  nextPageToken: string;
}

/** Request message for list all processors belongs to a project. */
export interface ListProcessorsRequest {
  /**
   * Required. The parent (project and location) which owns this collection of
   * Processors. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * The maximum number of processors to return.
   * If unspecified, at most `50` processors will be returned.
   * The maximum value is `100`. Values above `100` will be coerced to `100`.
   */
  pageSize: number;
  /**
   * We will return the processors sorted by creation time. The page token
   * will point to the next processor.
   */
  pageToken: string;
}

/**
 * Response message for the
 * [ListProcessors][google.cloud.documentai.v1.DocumentProcessorService.ListProcessors]
 * method.
 */
export interface ListProcessorsResponse {
  /** The list of processors. */
  processors: Processor[];
  /** Points to the next processor, otherwise empty. */
  nextPageToken: string;
}

/**
 * Request message for the
 * [GetProcessorType][google.cloud.documentai.v1.DocumentProcessorService.GetProcessorType]
 * method.
 */
export interface GetProcessorTypeRequest {
  /** Required. The processor type resource name. */
  name: string;
}

/**
 * Request message for the
 * [GetProcessor][google.cloud.documentai.v1.DocumentProcessorService.GetProcessor]
 * method.
 */
export interface GetProcessorRequest {
  /** Required. The processor resource name. */
  name: string;
}

/**
 * Request message for the
 * [GetProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.GetProcessorVersion]
 * method.
 */
export interface GetProcessorVersionRequest {
  /** Required. The processor resource name. */
  name: string;
}

/** Request message for list all processor versions belongs to a processor. */
export interface ListProcessorVersionsRequest {
  /**
   * Required. The parent (project, location and processor) to list all
   * versions. Format:
   * `projects/{project}/locations/{location}/processors/{processor}`
   */
  parent: string;
  /**
   * The maximum number of processor versions to return.
   * If unspecified, at most `10` processor versions will be returned.
   * The maximum value is `20`. Values above `20` will be coerced to `20`.
   */
  pageSize: number;
  /**
   * We will return the processor versions sorted by creation time. The page
   * token will point to the next processor version.
   */
  pageToken: string;
}

/**
 * Response message for the
 * [ListProcessorVersions][google.cloud.documentai.v1.DocumentProcessorService.ListProcessorVersions]
 * method.
 */
export interface ListProcessorVersionsResponse {
  /** The list of processors. */
  processorVersions: ProcessorVersion[];
  /** Points to the next processor, otherwise empty. */
  nextPageToken: string;
}

/**
 * Request message for the
 * [DeleteProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.DeleteProcessorVersion]
 * method.
 */
export interface DeleteProcessorVersionRequest {
  /** Required. The processor version resource name to be deleted. */
  name: string;
}

/**
 * The long-running operation metadata for the
 * [DeleteProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.DeleteProcessorVersion]
 * method.
 */
export interface DeleteProcessorVersionMetadata {
  /** The basic metadata of the long-running operation. */
  commonMetadata: CommonOperationMetadata | undefined;
}

/**
 * Request message for the
 * [DeployProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.DeployProcessorVersion]
 * method.
 */
export interface DeployProcessorVersionRequest {
  /** Required. The processor version resource name to be deployed. */
  name: string;
}

/**
 * Response message for the
 * [DeployProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.DeployProcessorVersion]
 * method.
 */
export interface DeployProcessorVersionResponse {
}

/**
 * The long-running operation metadata for the
 * [DeployProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.DeployProcessorVersion]
 * method.
 */
export interface DeployProcessorVersionMetadata {
  /** The basic metadata of the long-running operation. */
  commonMetadata: CommonOperationMetadata | undefined;
}

/**
 * Request message for the
 * [UndeployProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.UndeployProcessorVersion]
 * method.
 */
export interface UndeployProcessorVersionRequest {
  /** Required. The processor version resource name to be undeployed. */
  name: string;
}

/**
 * Response message for the
 * [UndeployProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.UndeployProcessorVersion]
 * method.
 */
export interface UndeployProcessorVersionResponse {
}

/**
 * The long-running operation metadata for the
 * [UndeployProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.UndeployProcessorVersion]
 * method.
 */
export interface UndeployProcessorVersionMetadata {
  /** The basic metadata of the long-running operation. */
  commonMetadata: CommonOperationMetadata | undefined;
}

/**
 * Request message for the
 * [CreateProcessor][google.cloud.documentai.v1.DocumentProcessorService.CreateProcessor]
 * method. Notice this request is sent to a regionalized backend service. If the
 * [ProcessorType][google.cloud.documentai.v1.ProcessorType] isn't available in
 * that region, the creation fails.
 */
export interface CreateProcessorRequest {
  /**
   * Required. The parent (project and location) under which to create the
   * processor. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Required. The processor to be created, requires
   * [Processor.type][google.cloud.documentai.v1.Processor.type] and
   * [Processor.display_name][google.cloud.documentai.v1.Processor.display_name]
   * to be set. Also, the
   * [Processor.kms_key_name][google.cloud.documentai.v1.Processor.kms_key_name]
   * field must be set if the processor is under CMEK.
   */
  processor: Processor | undefined;
}

/**
 * Request message for the
 * [DeleteProcessor][google.cloud.documentai.v1.DocumentProcessorService.DeleteProcessor]
 * method.
 */
export interface DeleteProcessorRequest {
  /** Required. The processor resource name to be deleted. */
  name: string;
}

/**
 * The long-running operation metadata for the
 * [DeleteProcessor][google.cloud.documentai.v1.DocumentProcessorService.DeleteProcessor]
 * method.
 */
export interface DeleteProcessorMetadata {
  /** The basic metadata of the long-running operation. */
  commonMetadata: CommonOperationMetadata | undefined;
}

/**
 * Request message for the
 * [EnableProcessor][google.cloud.documentai.v1.DocumentProcessorService.EnableProcessor]
 * method.
 */
export interface EnableProcessorRequest {
  /** Required. The processor resource name to be enabled. */
  name: string;
}

/**
 * Response message for the
 * [EnableProcessor][google.cloud.documentai.v1.DocumentProcessorService.EnableProcessor]
 * method. Intentionally empty proto for adding fields in future.
 */
export interface EnableProcessorResponse {
}

/**
 * The long-running operation metadata for the
 * [EnableProcessor][google.cloud.documentai.v1.DocumentProcessorService.EnableProcessor]
 * method.
 */
export interface EnableProcessorMetadata {
  /** The basic metadata of the long-running operation. */
  commonMetadata: CommonOperationMetadata | undefined;
}

/**
 * Request message for the
 * [DisableProcessor][google.cloud.documentai.v1.DocumentProcessorService.DisableProcessor]
 * method.
 */
export interface DisableProcessorRequest {
  /** Required. The processor resource name to be disabled. */
  name: string;
}

/**
 * Response message for the
 * [DisableProcessor][google.cloud.documentai.v1.DocumentProcessorService.DisableProcessor]
 * method. Intentionally empty proto for adding fields in future.
 */
export interface DisableProcessorResponse {
}

/**
 * The long-running operation metadata for the
 * [DisableProcessor][google.cloud.documentai.v1.DocumentProcessorService.DisableProcessor]
 * method.
 */
export interface DisableProcessorMetadata {
  /** The basic metadata of the long-running operation. */
  commonMetadata: CommonOperationMetadata | undefined;
}

/**
 * Request message for the
 * [SetDefaultProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.SetDefaultProcessorVersion]
 * method.
 */
export interface SetDefaultProcessorVersionRequest {
  /**
   * Required. The resource name of the
   * [Processor][google.cloud.documentai.v1.Processor] to change default
   * version.
   */
  processor: string;
  /**
   * Required. The resource name of child
   * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion] to use as
   * default. Format:
   * `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{version}`
   */
  defaultProcessorVersion: string;
}

/**
 * Response message for the
 * [SetDefaultProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.SetDefaultProcessorVersion]
 * method.
 */
export interface SetDefaultProcessorVersionResponse {
}

/**
 * The long-running operation metadata for the
 * [SetDefaultProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.SetDefaultProcessorVersion]
 * method.
 */
export interface SetDefaultProcessorVersionMetadata {
  /** The basic metadata of the long-running operation. */
  commonMetadata: CommonOperationMetadata | undefined;
}

/**
 * Request message for the
 * [TrainProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.TrainProcessorVersion]
 * method.
 */
export interface TrainProcessorVersionRequest {
  /** Options to control Custom Document Extraction (CDE) Processor. */
  customDocumentExtractionOptions?:
    | TrainProcessorVersionRequest_CustomDocumentExtractionOptions
    | undefined;
  /** Options to control foundation model tuning of a processor. */
  foundationModelTuningOptions?:
    | TrainProcessorVersionRequest_FoundationModelTuningOptions
    | undefined;
  /**
   * Required. The parent (project, location and processor) to create the new
   * version for. Format:
   * `projects/{project}/locations/{location}/processors/{processor}`.
   */
  parent: string;
  /** Required. The processor version to be created. */
  processorVersion:
    | ProcessorVersion
    | undefined;
  /** Optional. The schema the processor version will be trained with. */
  documentSchema:
    | DocumentSchema
    | undefined;
  /**
   * Optional. The input data used to train the
   * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion].
   */
  inputData:
    | TrainProcessorVersionRequest_InputData
    | undefined;
  /**
   * Optional. The processor version to use as a base for training. This
   * processor version must be a child of `parent`. Format:
   * `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`.
   */
  baseProcessorVersion: string;
}

/**
 * The input data used to train a new
 * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion].
 */
export interface TrainProcessorVersionRequest_InputData {
  /** The documents used for training the new version. */
  trainingDocuments:
    | BatchDocumentsInputConfig
    | undefined;
  /** The documents used for testing the trained version. */
  testDocuments: BatchDocumentsInputConfig | undefined;
}

/**
 * Options to control the training of the Custom Document Extraction (CDE)
 * Processor.
 */
export interface TrainProcessorVersionRequest_CustomDocumentExtractionOptions {
  /** Training method to use for CDE training. */
  trainingMethod: TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod;
}

/**
 * Training Method for CDE. `TRAINING_METHOD_UNSPECIFIED` will fall back to
 * `MODEL_BASED`.
 */
export enum TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod {
  TRAINING_METHOD_UNSPECIFIED = 0,
  MODEL_BASED = 1,
  TEMPLATE_BASED = 2,
  UNRECOGNIZED = -1,
}

export function trainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethodFromJSON(
  object: any,
): TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod {
  switch (object) {
    case 0:
    case "TRAINING_METHOD_UNSPECIFIED":
      return TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod.TRAINING_METHOD_UNSPECIFIED;
    case 1:
    case "MODEL_BASED":
      return TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod.MODEL_BASED;
    case 2:
    case "TEMPLATE_BASED":
      return TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod.TEMPLATE_BASED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod.UNRECOGNIZED;
  }
}

export function trainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethodToJSON(
  object: TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod,
): string {
  switch (object) {
    case TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod.TRAINING_METHOD_UNSPECIFIED:
      return "TRAINING_METHOD_UNSPECIFIED";
    case TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod.MODEL_BASED:
      return "MODEL_BASED";
    case TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod.TEMPLATE_BASED:
      return "TEMPLATE_BASED";
    case TrainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Options to control foundation model tuning of the processor. */
export interface TrainProcessorVersionRequest_FoundationModelTuningOptions {
  /**
   * Optional. The number of steps to run for model tuning. Valid values are
   * between 1 and 400. If not provided, recommended steps will be used.
   */
  trainSteps: number;
  /**
   * Optional. The multiplier to apply to the recommended learning rate. Valid
   * values are between 0.1 and 10. If not provided, recommended learning rate
   * will be used.
   */
  learningRateMultiplier: number;
}

/**
 * The response for
 * [TrainProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.TrainProcessorVersion].
 */
export interface TrainProcessorVersionResponse {
  /** The resource name of the processor version produced by training. */
  processorVersion: string;
}

/** The metadata that represents a processor version being created. */
export interface TrainProcessorVersionMetadata {
  /** The basic metadata of the long-running operation. */
  commonMetadata:
    | CommonOperationMetadata
    | undefined;
  /** The training dataset validation information. */
  trainingDatasetValidation:
    | TrainProcessorVersionMetadata_DatasetValidation
    | undefined;
  /** The test dataset validation information. */
  testDatasetValidation: TrainProcessorVersionMetadata_DatasetValidation | undefined;
}

/**
 * The dataset validation information.
 * This includes any and all errors with documents and the dataset.
 */
export interface TrainProcessorVersionMetadata_DatasetValidation {
  /** The total number of document errors. */
  documentErrorCount: number;
  /** The total number of dataset errors. */
  datasetErrorCount: number;
  /**
   * Error information pertaining to specific documents. A maximum of 10
   * document errors will be returned.
   * Any document with errors will not be used throughout training.
   */
  documentErrors: Status[];
  /**
   * Error information for the dataset as a whole. A maximum of 10 dataset
   * errors will be returned.
   * A single dataset error is terminal for training.
   */
  datasetErrors: Status[];
}

/**
 * Request message for the
 * [ReviewDocument][google.cloud.documentai.v1.DocumentProcessorService.ReviewDocument]
 * method.
 */
export interface ReviewDocumentRequest {
  /** An inline document proto. */
  inlineDocument?:
    | Document
    | undefined;
  /**
   * Required. The resource name of the
   * [HumanReviewConfig][google.cloud.documentai.v1.HumanReviewConfig] that the
   * document will be reviewed with.
   */
  humanReviewConfig: string;
  /** Whether the validation should be performed on the ad-hoc review request. */
  enableSchemaValidation: boolean;
  /** The priority of the human review task. */
  priority: ReviewDocumentRequest_Priority;
  /** The document schema of the human review task. */
  documentSchema: DocumentSchema | undefined;
}

/** The priority level of the human review task. */
export enum ReviewDocumentRequest_Priority {
  /** DEFAULT - The default priority level. */
  DEFAULT = 0,
  /**
   * URGENT - The urgent priority level. The labeling manager should allocate labeler
   * resource to the urgent task queue to respect this priority level.
   */
  URGENT = 1,
  UNRECOGNIZED = -1,
}

export function reviewDocumentRequest_PriorityFromJSON(object: any): ReviewDocumentRequest_Priority {
  switch (object) {
    case 0:
    case "DEFAULT":
      return ReviewDocumentRequest_Priority.DEFAULT;
    case 1:
    case "URGENT":
      return ReviewDocumentRequest_Priority.URGENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReviewDocumentRequest_Priority.UNRECOGNIZED;
  }
}

export function reviewDocumentRequest_PriorityToJSON(object: ReviewDocumentRequest_Priority): string {
  switch (object) {
    case ReviewDocumentRequest_Priority.DEFAULT:
      return "DEFAULT";
    case ReviewDocumentRequest_Priority.URGENT:
      return "URGENT";
    case ReviewDocumentRequest_Priority.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Response message for the
 * [ReviewDocument][google.cloud.documentai.v1.DocumentProcessorService.ReviewDocument]
 * method.
 */
export interface ReviewDocumentResponse {
  /**
   * The Cloud Storage uri for the human reviewed document if the review is
   * succeeded.
   */
  gcsDestination: string;
  /** The state of the review operation. */
  state: ReviewDocumentResponse_State;
  /** The reason why the review is rejected by reviewer. */
  rejectionReason: string;
}

/** Possible states of the review operation. */
export enum ReviewDocumentResponse_State {
  /** STATE_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  STATE_UNSPECIFIED = 0,
  /** REJECTED - The review operation is rejected by the reviewer. */
  REJECTED = 1,
  /** SUCCEEDED - The review operation is succeeded. */
  SUCCEEDED = 2,
  UNRECOGNIZED = -1,
}

export function reviewDocumentResponse_StateFromJSON(object: any): ReviewDocumentResponse_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ReviewDocumentResponse_State.STATE_UNSPECIFIED;
    case 1:
    case "REJECTED":
      return ReviewDocumentResponse_State.REJECTED;
    case 2:
    case "SUCCEEDED":
      return ReviewDocumentResponse_State.SUCCEEDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReviewDocumentResponse_State.UNRECOGNIZED;
  }
}

export function reviewDocumentResponse_StateToJSON(object: ReviewDocumentResponse_State): string {
  switch (object) {
    case ReviewDocumentResponse_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ReviewDocumentResponse_State.REJECTED:
      return "REJECTED";
    case ReviewDocumentResponse_State.SUCCEEDED:
      return "SUCCEEDED";
    case ReviewDocumentResponse_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The long-running operation metadata for the
 * [ReviewDocument][google.cloud.documentai.v1.DocumentProcessorService.ReviewDocument]
 * method.
 */
export interface ReviewDocumentOperationMetadata {
  /** The basic metadata of the long-running operation. */
  commonMetadata:
    | CommonOperationMetadata
    | undefined;
  /** The Crowd Compute question ID. */
  questionId: string;
}

/**
 * Evaluates the given
 * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion] against the
 * supplied documents.
 */
export interface EvaluateProcessorVersionRequest {
  /**
   * Required. The resource name of the
   * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion] to
   * evaluate.
   * `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
   */
  processorVersion: string;
  /**
   * Optional. The documents used in the evaluation. If unspecified, use the
   * processor's dataset as evaluation input.
   */
  evaluationDocuments: BatchDocumentsInputConfig | undefined;
}

/**
 * Metadata of the
 * [EvaluateProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.EvaluateProcessorVersion]
 * method.
 */
export interface EvaluateProcessorVersionMetadata {
  /** The basic metadata of the long-running operation. */
  commonMetadata: CommonOperationMetadata | undefined;
}

/**
 * Response of the
 * [EvaluateProcessorVersion][google.cloud.documentai.v1.DocumentProcessorService.EvaluateProcessorVersion]
 * method.
 */
export interface EvaluateProcessorVersionResponse {
  /** The resource name of the created evaluation. */
  evaluation: string;
}

/** Retrieves a specific Evaluation. */
export interface GetEvaluationRequest {
  /**
   * Required. The resource name of the
   * [Evaluation][google.cloud.documentai.v1.Evaluation] to get.
   * `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}/evaluations/{evaluation}`
   */
  name: string;
}

/**
 * Retrieves a list of evaluations for a given
 * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion].
 */
export interface ListEvaluationsRequest {
  /**
   * Required. The resource name of the
   * [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion] to list
   * evaluations for.
   * `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
   */
  parent: string;
  /**
   * The standard list page size.
   * If unspecified, at most `5` evaluations are returned.
   * The maximum value is `100`. Values above `100` are coerced to `100`.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListEvaluations` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
}

/** The response from `ListEvaluations`. */
export interface ListEvaluationsResponse {
  /** The evaluations requested. */
  evaluations: Evaluation[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseProcessOptions(): ProcessOptions {
  return {
    individualPageSelector: undefined,
    fromStart: undefined,
    fromEnd: undefined,
    ocrConfig: undefined,
    layoutConfig: undefined,
    schemaOverride: undefined,
  };
}

export const ProcessOptions: MessageFns<ProcessOptions> = {
  encode(message: ProcessOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.individualPageSelector !== undefined) {
      ProcessOptions_IndividualPageSelector.encode(message.individualPageSelector, writer.uint32(42).fork()).join();
    }
    if (message.fromStart !== undefined) {
      writer.uint32(48).int32(message.fromStart);
    }
    if (message.fromEnd !== undefined) {
      writer.uint32(56).int32(message.fromEnd);
    }
    if (message.ocrConfig !== undefined) {
      OcrConfig.encode(message.ocrConfig, writer.uint32(10).fork()).join();
    }
    if (message.layoutConfig !== undefined) {
      ProcessOptions_LayoutConfig.encode(message.layoutConfig, writer.uint32(74).fork()).join();
    }
    if (message.schemaOverride !== undefined) {
      DocumentSchema.encode(message.schemaOverride, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.individualPageSelector = ProcessOptions_IndividualPageSelector.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.fromStart = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.fromEnd = reader.int32();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ocrConfig = OcrConfig.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.layoutConfig = ProcessOptions_LayoutConfig.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.schemaOverride = DocumentSchema.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessOptions {
    return {
      individualPageSelector: isSet(object.individualPageSelector)
        ? ProcessOptions_IndividualPageSelector.fromJSON(object.individualPageSelector)
        : undefined,
      fromStart: isSet(object.fromStart) ? globalThis.Number(object.fromStart) : undefined,
      fromEnd: isSet(object.fromEnd) ? globalThis.Number(object.fromEnd) : undefined,
      ocrConfig: isSet(object.ocrConfig) ? OcrConfig.fromJSON(object.ocrConfig) : undefined,
      layoutConfig: isSet(object.layoutConfig) ? ProcessOptions_LayoutConfig.fromJSON(object.layoutConfig) : undefined,
      schemaOverride: isSet(object.schemaOverride) ? DocumentSchema.fromJSON(object.schemaOverride) : undefined,
    };
  },

  toJSON(message: ProcessOptions): unknown {
    const obj: any = {};
    if (message.individualPageSelector !== undefined) {
      obj.individualPageSelector = ProcessOptions_IndividualPageSelector.toJSON(message.individualPageSelector);
    }
    if (message.fromStart !== undefined) {
      obj.fromStart = Math.round(message.fromStart);
    }
    if (message.fromEnd !== undefined) {
      obj.fromEnd = Math.round(message.fromEnd);
    }
    if (message.ocrConfig !== undefined) {
      obj.ocrConfig = OcrConfig.toJSON(message.ocrConfig);
    }
    if (message.layoutConfig !== undefined) {
      obj.layoutConfig = ProcessOptions_LayoutConfig.toJSON(message.layoutConfig);
    }
    if (message.schemaOverride !== undefined) {
      obj.schemaOverride = DocumentSchema.toJSON(message.schemaOverride);
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessOptions>): ProcessOptions {
    return ProcessOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessOptions>): ProcessOptions {
    const message = createBaseProcessOptions();
    message.individualPageSelector =
      (object.individualPageSelector !== undefined && object.individualPageSelector !== null)
        ? ProcessOptions_IndividualPageSelector.fromPartial(object.individualPageSelector)
        : undefined;
    message.fromStart = object.fromStart ?? undefined;
    message.fromEnd = object.fromEnd ?? undefined;
    message.ocrConfig = (object.ocrConfig !== undefined && object.ocrConfig !== null)
      ? OcrConfig.fromPartial(object.ocrConfig)
      : undefined;
    message.layoutConfig = (object.layoutConfig !== undefined && object.layoutConfig !== null)
      ? ProcessOptions_LayoutConfig.fromPartial(object.layoutConfig)
      : undefined;
    message.schemaOverride = (object.schemaOverride !== undefined && object.schemaOverride !== null)
      ? DocumentSchema.fromPartial(object.schemaOverride)
      : undefined;
    return message;
  },
};

function createBaseProcessOptions_LayoutConfig(): ProcessOptions_LayoutConfig {
  return { chunkingConfig: undefined };
}

export const ProcessOptions_LayoutConfig: MessageFns<ProcessOptions_LayoutConfig> = {
  encode(message: ProcessOptions_LayoutConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chunkingConfig !== undefined) {
      ProcessOptions_LayoutConfig_ChunkingConfig.encode(message.chunkingConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessOptions_LayoutConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessOptions_LayoutConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chunkingConfig = ProcessOptions_LayoutConfig_ChunkingConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessOptions_LayoutConfig {
    return {
      chunkingConfig: isSet(object.chunkingConfig)
        ? ProcessOptions_LayoutConfig_ChunkingConfig.fromJSON(object.chunkingConfig)
        : undefined,
    };
  },

  toJSON(message: ProcessOptions_LayoutConfig): unknown {
    const obj: any = {};
    if (message.chunkingConfig !== undefined) {
      obj.chunkingConfig = ProcessOptions_LayoutConfig_ChunkingConfig.toJSON(message.chunkingConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessOptions_LayoutConfig>): ProcessOptions_LayoutConfig {
    return ProcessOptions_LayoutConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessOptions_LayoutConfig>): ProcessOptions_LayoutConfig {
    const message = createBaseProcessOptions_LayoutConfig();
    message.chunkingConfig = (object.chunkingConfig !== undefined && object.chunkingConfig !== null)
      ? ProcessOptions_LayoutConfig_ChunkingConfig.fromPartial(object.chunkingConfig)
      : undefined;
    return message;
  },
};

function createBaseProcessOptions_LayoutConfig_ChunkingConfig(): ProcessOptions_LayoutConfig_ChunkingConfig {
  return { chunkSize: 0, includeAncestorHeadings: false };
}

export const ProcessOptions_LayoutConfig_ChunkingConfig: MessageFns<ProcessOptions_LayoutConfig_ChunkingConfig> = {
  encode(message: ProcessOptions_LayoutConfig_ChunkingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chunkSize !== 0) {
      writer.uint32(8).int32(message.chunkSize);
    }
    if (message.includeAncestorHeadings !== false) {
      writer.uint32(16).bool(message.includeAncestorHeadings);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessOptions_LayoutConfig_ChunkingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessOptions_LayoutConfig_ChunkingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.chunkSize = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.includeAncestorHeadings = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessOptions_LayoutConfig_ChunkingConfig {
    return {
      chunkSize: isSet(object.chunkSize) ? globalThis.Number(object.chunkSize) : 0,
      includeAncestorHeadings: isSet(object.includeAncestorHeadings)
        ? globalThis.Boolean(object.includeAncestorHeadings)
        : false,
    };
  },

  toJSON(message: ProcessOptions_LayoutConfig_ChunkingConfig): unknown {
    const obj: any = {};
    if (message.chunkSize !== 0) {
      obj.chunkSize = Math.round(message.chunkSize);
    }
    if (message.includeAncestorHeadings !== false) {
      obj.includeAncestorHeadings = message.includeAncestorHeadings;
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessOptions_LayoutConfig_ChunkingConfig>): ProcessOptions_LayoutConfig_ChunkingConfig {
    return ProcessOptions_LayoutConfig_ChunkingConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ProcessOptions_LayoutConfig_ChunkingConfig>,
  ): ProcessOptions_LayoutConfig_ChunkingConfig {
    const message = createBaseProcessOptions_LayoutConfig_ChunkingConfig();
    message.chunkSize = object.chunkSize ?? 0;
    message.includeAncestorHeadings = object.includeAncestorHeadings ?? false;
    return message;
  },
};

function createBaseProcessOptions_IndividualPageSelector(): ProcessOptions_IndividualPageSelector {
  return { pages: [] };
}

export const ProcessOptions_IndividualPageSelector: MessageFns<ProcessOptions_IndividualPageSelector> = {
  encode(message: ProcessOptions_IndividualPageSelector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.pages) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessOptions_IndividualPageSelector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessOptions_IndividualPageSelector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.pages.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.pages.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessOptions_IndividualPageSelector {
    return { pages: globalThis.Array.isArray(object?.pages) ? object.pages.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: ProcessOptions_IndividualPageSelector): unknown {
    const obj: any = {};
    if (message.pages?.length) {
      obj.pages = message.pages.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessOptions_IndividualPageSelector>): ProcessOptions_IndividualPageSelector {
    return ProcessOptions_IndividualPageSelector.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessOptions_IndividualPageSelector>): ProcessOptions_IndividualPageSelector {
    const message = createBaseProcessOptions_IndividualPageSelector();
    message.pages = object.pages?.map((e) => e) || [];
    return message;
  },
};

function createBaseProcessRequest(): ProcessRequest {
  return {
    inlineDocument: undefined,
    rawDocument: undefined,
    gcsDocument: undefined,
    name: "",
    skipHumanReview: false,
    fieldMask: undefined,
    processOptions: undefined,
    labels: {},
    imagelessMode: false,
  };
}

export const ProcessRequest: MessageFns<ProcessRequest> = {
  encode(message: ProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inlineDocument !== undefined) {
      Document.encode(message.inlineDocument, writer.uint32(34).fork()).join();
    }
    if (message.rawDocument !== undefined) {
      RawDocument.encode(message.rawDocument, writer.uint32(42).fork()).join();
    }
    if (message.gcsDocument !== undefined) {
      GcsDocument.encode(message.gcsDocument, writer.uint32(66).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.skipHumanReview !== false) {
      writer.uint32(24).bool(message.skipHumanReview);
    }
    if (message.fieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldMask), writer.uint32(50).fork()).join();
    }
    if (message.processOptions !== undefined) {
      ProcessOptions.encode(message.processOptions, writer.uint32(58).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ProcessRequest_LabelsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    if (message.imagelessMode !== false) {
      writer.uint32(88).bool(message.imagelessMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.inlineDocument = Document.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.rawDocument = RawDocument.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.gcsDocument = GcsDocument.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.skipHumanReview = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.fieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.processOptions = ProcessOptions.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          const entry10 = ProcessRequest_LabelsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.labels[entry10.key] = entry10.value;
          }
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.imagelessMode = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessRequest {
    return {
      inlineDocument: isSet(object.inlineDocument) ? Document.fromJSON(object.inlineDocument) : undefined,
      rawDocument: isSet(object.rawDocument) ? RawDocument.fromJSON(object.rawDocument) : undefined,
      gcsDocument: isSet(object.gcsDocument) ? GcsDocument.fromJSON(object.gcsDocument) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      skipHumanReview: isSet(object.skipHumanReview) ? globalThis.Boolean(object.skipHumanReview) : false,
      fieldMask: isSet(object.fieldMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldMask)) : undefined,
      processOptions: isSet(object.processOptions) ? ProcessOptions.fromJSON(object.processOptions) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      imagelessMode: isSet(object.imagelessMode) ? globalThis.Boolean(object.imagelessMode) : false,
    };
  },

  toJSON(message: ProcessRequest): unknown {
    const obj: any = {};
    if (message.inlineDocument !== undefined) {
      obj.inlineDocument = Document.toJSON(message.inlineDocument);
    }
    if (message.rawDocument !== undefined) {
      obj.rawDocument = RawDocument.toJSON(message.rawDocument);
    }
    if (message.gcsDocument !== undefined) {
      obj.gcsDocument = GcsDocument.toJSON(message.gcsDocument);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.skipHumanReview !== false) {
      obj.skipHumanReview = message.skipHumanReview;
    }
    if (message.fieldMask !== undefined) {
      obj.fieldMask = FieldMask.toJSON(FieldMask.wrap(message.fieldMask));
    }
    if (message.processOptions !== undefined) {
      obj.processOptions = ProcessOptions.toJSON(message.processOptions);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.imagelessMode !== false) {
      obj.imagelessMode = message.imagelessMode;
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessRequest>): ProcessRequest {
    return ProcessRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessRequest>): ProcessRequest {
    const message = createBaseProcessRequest();
    message.inlineDocument = (object.inlineDocument !== undefined && object.inlineDocument !== null)
      ? Document.fromPartial(object.inlineDocument)
      : undefined;
    message.rawDocument = (object.rawDocument !== undefined && object.rawDocument !== null)
      ? RawDocument.fromPartial(object.rawDocument)
      : undefined;
    message.gcsDocument = (object.gcsDocument !== undefined && object.gcsDocument !== null)
      ? GcsDocument.fromPartial(object.gcsDocument)
      : undefined;
    message.name = object.name ?? "";
    message.skipHumanReview = object.skipHumanReview ?? false;
    message.fieldMask = object.fieldMask ?? undefined;
    message.processOptions = (object.processOptions !== undefined && object.processOptions !== null)
      ? ProcessOptions.fromPartial(object.processOptions)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.imagelessMode = object.imagelessMode ?? false;
    return message;
  },
};

function createBaseProcessRequest_LabelsEntry(): ProcessRequest_LabelsEntry {
  return { key: "", value: "" };
}

export const ProcessRequest_LabelsEntry: MessageFns<ProcessRequest_LabelsEntry> = {
  encode(message: ProcessRequest_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessRequest_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessRequest_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessRequest_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ProcessRequest_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessRequest_LabelsEntry>): ProcessRequest_LabelsEntry {
    return ProcessRequest_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessRequest_LabelsEntry>): ProcessRequest_LabelsEntry {
    const message = createBaseProcessRequest_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseHumanReviewStatus(): HumanReviewStatus {
  return { state: 0, stateMessage: "", humanReviewOperation: "" };
}

export const HumanReviewStatus: MessageFns<HumanReviewStatus> = {
  encode(message: HumanReviewStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.stateMessage !== "") {
      writer.uint32(18).string(message.stateMessage);
    }
    if (message.humanReviewOperation !== "") {
      writer.uint32(26).string(message.humanReviewOperation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HumanReviewStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHumanReviewStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stateMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.humanReviewOperation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HumanReviewStatus {
    return {
      state: isSet(object.state) ? humanReviewStatus_StateFromJSON(object.state) : 0,
      stateMessage: isSet(object.stateMessage) ? globalThis.String(object.stateMessage) : "",
      humanReviewOperation: isSet(object.humanReviewOperation) ? globalThis.String(object.humanReviewOperation) : "",
    };
  },

  toJSON(message: HumanReviewStatus): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = humanReviewStatus_StateToJSON(message.state);
    }
    if (message.stateMessage !== "") {
      obj.stateMessage = message.stateMessage;
    }
    if (message.humanReviewOperation !== "") {
      obj.humanReviewOperation = message.humanReviewOperation;
    }
    return obj;
  },

  create(base?: DeepPartial<HumanReviewStatus>): HumanReviewStatus {
    return HumanReviewStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HumanReviewStatus>): HumanReviewStatus {
    const message = createBaseHumanReviewStatus();
    message.state = object.state ?? 0;
    message.stateMessage = object.stateMessage ?? "";
    message.humanReviewOperation = object.humanReviewOperation ?? "";
    return message;
  },
};

function createBaseProcessResponse(): ProcessResponse {
  return { document: undefined, humanReviewStatus: undefined };
}

export const ProcessResponse: MessageFns<ProcessResponse> = {
  encode(message: ProcessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.document !== undefined) {
      Document.encode(message.document, writer.uint32(10).fork()).join();
    }
    if (message.humanReviewStatus !== undefined) {
      HumanReviewStatus.encode(message.humanReviewStatus, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.document = Document.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.humanReviewStatus = HumanReviewStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessResponse {
    return {
      document: isSet(object.document) ? Document.fromJSON(object.document) : undefined,
      humanReviewStatus: isSet(object.humanReviewStatus)
        ? HumanReviewStatus.fromJSON(object.humanReviewStatus)
        : undefined,
    };
  },

  toJSON(message: ProcessResponse): unknown {
    const obj: any = {};
    if (message.document !== undefined) {
      obj.document = Document.toJSON(message.document);
    }
    if (message.humanReviewStatus !== undefined) {
      obj.humanReviewStatus = HumanReviewStatus.toJSON(message.humanReviewStatus);
    }
    return obj;
  },

  create(base?: DeepPartial<ProcessResponse>): ProcessResponse {
    return ProcessResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcessResponse>): ProcessResponse {
    const message = createBaseProcessResponse();
    message.document = (object.document !== undefined && object.document !== null)
      ? Document.fromPartial(object.document)
      : undefined;
    message.humanReviewStatus = (object.humanReviewStatus !== undefined && object.humanReviewStatus !== null)
      ? HumanReviewStatus.fromPartial(object.humanReviewStatus)
      : undefined;
    return message;
  },
};

function createBaseBatchProcessRequest(): BatchProcessRequest {
  return {
    name: "",
    inputDocuments: undefined,
    documentOutputConfig: undefined,
    skipHumanReview: false,
    processOptions: undefined,
    labels: {},
  };
}

export const BatchProcessRequest: MessageFns<BatchProcessRequest> = {
  encode(message: BatchProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.inputDocuments !== undefined) {
      BatchDocumentsInputConfig.encode(message.inputDocuments, writer.uint32(42).fork()).join();
    }
    if (message.documentOutputConfig !== undefined) {
      DocumentOutputConfig.encode(message.documentOutputConfig, writer.uint32(50).fork()).join();
    }
    if (message.skipHumanReview !== false) {
      writer.uint32(32).bool(message.skipHumanReview);
    }
    if (message.processOptions !== undefined) {
      ProcessOptions.encode(message.processOptions, writer.uint32(58).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      BatchProcessRequest_LabelsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.inputDocuments = BatchDocumentsInputConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.documentOutputConfig = DocumentOutputConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.skipHumanReview = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.processOptions = ProcessOptions.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = BatchProcessRequest_LabelsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.labels[entry9.key] = entry9.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchProcessRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      inputDocuments: isSet(object.inputDocuments)
        ? BatchDocumentsInputConfig.fromJSON(object.inputDocuments)
        : undefined,
      documentOutputConfig: isSet(object.documentOutputConfig)
        ? DocumentOutputConfig.fromJSON(object.documentOutputConfig)
        : undefined,
      skipHumanReview: isSet(object.skipHumanReview) ? globalThis.Boolean(object.skipHumanReview) : false,
      processOptions: isSet(object.processOptions) ? ProcessOptions.fromJSON(object.processOptions) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: BatchProcessRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.inputDocuments !== undefined) {
      obj.inputDocuments = BatchDocumentsInputConfig.toJSON(message.inputDocuments);
    }
    if (message.documentOutputConfig !== undefined) {
      obj.documentOutputConfig = DocumentOutputConfig.toJSON(message.documentOutputConfig);
    }
    if (message.skipHumanReview !== false) {
      obj.skipHumanReview = message.skipHumanReview;
    }
    if (message.processOptions !== undefined) {
      obj.processOptions = ProcessOptions.toJSON(message.processOptions);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<BatchProcessRequest>): BatchProcessRequest {
    return BatchProcessRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchProcessRequest>): BatchProcessRequest {
    const message = createBaseBatchProcessRequest();
    message.name = object.name ?? "";
    message.inputDocuments = (object.inputDocuments !== undefined && object.inputDocuments !== null)
      ? BatchDocumentsInputConfig.fromPartial(object.inputDocuments)
      : undefined;
    message.documentOutputConfig = (object.documentOutputConfig !== undefined && object.documentOutputConfig !== null)
      ? DocumentOutputConfig.fromPartial(object.documentOutputConfig)
      : undefined;
    message.skipHumanReview = object.skipHumanReview ?? false;
    message.processOptions = (object.processOptions !== undefined && object.processOptions !== null)
      ? ProcessOptions.fromPartial(object.processOptions)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseBatchProcessRequest_LabelsEntry(): BatchProcessRequest_LabelsEntry {
  return { key: "", value: "" };
}

export const BatchProcessRequest_LabelsEntry: MessageFns<BatchProcessRequest_LabelsEntry> = {
  encode(message: BatchProcessRequest_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchProcessRequest_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchProcessRequest_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchProcessRequest_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BatchProcessRequest_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchProcessRequest_LabelsEntry>): BatchProcessRequest_LabelsEntry {
    return BatchProcessRequest_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchProcessRequest_LabelsEntry>): BatchProcessRequest_LabelsEntry {
    const message = createBaseBatchProcessRequest_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseBatchProcessResponse(): BatchProcessResponse {
  return {};
}

export const BatchProcessResponse: MessageFns<BatchProcessResponse> = {
  encode(_: BatchProcessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchProcessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchProcessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BatchProcessResponse {
    return {};
  },

  toJSON(_: BatchProcessResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BatchProcessResponse>): BatchProcessResponse {
    return BatchProcessResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BatchProcessResponse>): BatchProcessResponse {
    const message = createBaseBatchProcessResponse();
    return message;
  },
};

function createBaseBatchProcessMetadata(): BatchProcessMetadata {
  return { state: 0, stateMessage: "", createTime: undefined, updateTime: undefined, individualProcessStatuses: [] };
}

export const BatchProcessMetadata: MessageFns<BatchProcessMetadata> = {
  encode(message: BatchProcessMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.stateMessage !== "") {
      writer.uint32(18).string(message.stateMessage);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    for (const v of message.individualProcessStatuses) {
      BatchProcessMetadata_IndividualProcessStatus.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchProcessMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchProcessMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stateMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.individualProcessStatuses.push(
            BatchProcessMetadata_IndividualProcessStatus.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchProcessMetadata {
    return {
      state: isSet(object.state) ? batchProcessMetadata_StateFromJSON(object.state) : 0,
      stateMessage: isSet(object.stateMessage) ? globalThis.String(object.stateMessage) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      individualProcessStatuses: globalThis.Array.isArray(object?.individualProcessStatuses)
        ? object.individualProcessStatuses.map((e: any) => BatchProcessMetadata_IndividualProcessStatus.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchProcessMetadata): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = batchProcessMetadata_StateToJSON(message.state);
    }
    if (message.stateMessage !== "") {
      obj.stateMessage = message.stateMessage;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.individualProcessStatuses?.length) {
      obj.individualProcessStatuses = message.individualProcessStatuses.map((e) =>
        BatchProcessMetadata_IndividualProcessStatus.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<BatchProcessMetadata>): BatchProcessMetadata {
    return BatchProcessMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchProcessMetadata>): BatchProcessMetadata {
    const message = createBaseBatchProcessMetadata();
    message.state = object.state ?? 0;
    message.stateMessage = object.stateMessage ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.individualProcessStatuses =
      object.individualProcessStatuses?.map((e) => BatchProcessMetadata_IndividualProcessStatus.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchProcessMetadata_IndividualProcessStatus(): BatchProcessMetadata_IndividualProcessStatus {
  return { inputGcsSource: "", status: undefined, outputGcsDestination: "", humanReviewStatus: undefined };
}

export const BatchProcessMetadata_IndividualProcessStatus: MessageFns<BatchProcessMetadata_IndividualProcessStatus> = {
  encode(
    message: BatchProcessMetadata_IndividualProcessStatus,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.inputGcsSource !== "") {
      writer.uint32(10).string(message.inputGcsSource);
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(18).fork()).join();
    }
    if (message.outputGcsDestination !== "") {
      writer.uint32(26).string(message.outputGcsDestination);
    }
    if (message.humanReviewStatus !== undefined) {
      HumanReviewStatus.encode(message.humanReviewStatus, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchProcessMetadata_IndividualProcessStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchProcessMetadata_IndividualProcessStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputGcsSource = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.outputGcsDestination = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.humanReviewStatus = HumanReviewStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchProcessMetadata_IndividualProcessStatus {
    return {
      inputGcsSource: isSet(object.inputGcsSource) ? globalThis.String(object.inputGcsSource) : "",
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      outputGcsDestination: isSet(object.outputGcsDestination) ? globalThis.String(object.outputGcsDestination) : "",
      humanReviewStatus: isSet(object.humanReviewStatus)
        ? HumanReviewStatus.fromJSON(object.humanReviewStatus)
        : undefined,
    };
  },

  toJSON(message: BatchProcessMetadata_IndividualProcessStatus): unknown {
    const obj: any = {};
    if (message.inputGcsSource !== "") {
      obj.inputGcsSource = message.inputGcsSource;
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.outputGcsDestination !== "") {
      obj.outputGcsDestination = message.outputGcsDestination;
    }
    if (message.humanReviewStatus !== undefined) {
      obj.humanReviewStatus = HumanReviewStatus.toJSON(message.humanReviewStatus);
    }
    return obj;
  },

  create(
    base?: DeepPartial<BatchProcessMetadata_IndividualProcessStatus>,
  ): BatchProcessMetadata_IndividualProcessStatus {
    return BatchProcessMetadata_IndividualProcessStatus.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BatchProcessMetadata_IndividualProcessStatus>,
  ): BatchProcessMetadata_IndividualProcessStatus {
    const message = createBaseBatchProcessMetadata_IndividualProcessStatus();
    message.inputGcsSource = object.inputGcsSource ?? "";
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.outputGcsDestination = object.outputGcsDestination ?? "";
    message.humanReviewStatus = (object.humanReviewStatus !== undefined && object.humanReviewStatus !== null)
      ? HumanReviewStatus.fromPartial(object.humanReviewStatus)
      : undefined;
    return message;
  },
};

function createBaseFetchProcessorTypesRequest(): FetchProcessorTypesRequest {
  return { parent: "" };
}

export const FetchProcessorTypesRequest: MessageFns<FetchProcessorTypesRequest> = {
  encode(message: FetchProcessorTypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchProcessorTypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchProcessorTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchProcessorTypesRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: FetchProcessorTypesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<FetchProcessorTypesRequest>): FetchProcessorTypesRequest {
    return FetchProcessorTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchProcessorTypesRequest>): FetchProcessorTypesRequest {
    const message = createBaseFetchProcessorTypesRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseFetchProcessorTypesResponse(): FetchProcessorTypesResponse {
  return { processorTypes: [] };
}

export const FetchProcessorTypesResponse: MessageFns<FetchProcessorTypesResponse> = {
  encode(message: FetchProcessorTypesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.processorTypes) {
      ProcessorType.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchProcessorTypesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchProcessorTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.processorTypes.push(ProcessorType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchProcessorTypesResponse {
    return {
      processorTypes: globalThis.Array.isArray(object?.processorTypes)
        ? object.processorTypes.map((e: any) => ProcessorType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FetchProcessorTypesResponse): unknown {
    const obj: any = {};
    if (message.processorTypes?.length) {
      obj.processorTypes = message.processorTypes.map((e) => ProcessorType.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FetchProcessorTypesResponse>): FetchProcessorTypesResponse {
    return FetchProcessorTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FetchProcessorTypesResponse>): FetchProcessorTypesResponse {
    const message = createBaseFetchProcessorTypesResponse();
    message.processorTypes = object.processorTypes?.map((e) => ProcessorType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProcessorTypesRequest(): ListProcessorTypesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListProcessorTypesRequest: MessageFns<ListProcessorTypesRequest> = {
  encode(message: ListProcessorTypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProcessorTypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProcessorTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProcessorTypesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListProcessorTypesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProcessorTypesRequest>): ListProcessorTypesRequest {
    return ListProcessorTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProcessorTypesRequest>): ListProcessorTypesRequest {
    const message = createBaseListProcessorTypesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListProcessorTypesResponse(): ListProcessorTypesResponse {
  return { processorTypes: [], nextPageToken: "" };
}

export const ListProcessorTypesResponse: MessageFns<ListProcessorTypesResponse> = {
  encode(message: ListProcessorTypesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.processorTypes) {
      ProcessorType.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProcessorTypesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProcessorTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.processorTypes.push(ProcessorType.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProcessorTypesResponse {
    return {
      processorTypes: globalThis.Array.isArray(object?.processorTypes)
        ? object.processorTypes.map((e: any) => ProcessorType.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListProcessorTypesResponse): unknown {
    const obj: any = {};
    if (message.processorTypes?.length) {
      obj.processorTypes = message.processorTypes.map((e) => ProcessorType.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProcessorTypesResponse>): ListProcessorTypesResponse {
    return ListProcessorTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProcessorTypesResponse>): ListProcessorTypesResponse {
    const message = createBaseListProcessorTypesResponse();
    message.processorTypes = object.processorTypes?.map((e) => ProcessorType.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListProcessorsRequest(): ListProcessorsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListProcessorsRequest: MessageFns<ListProcessorsRequest> = {
  encode(message: ListProcessorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProcessorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProcessorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProcessorsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListProcessorsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProcessorsRequest>): ListProcessorsRequest {
    return ListProcessorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProcessorsRequest>): ListProcessorsRequest {
    const message = createBaseListProcessorsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListProcessorsResponse(): ListProcessorsResponse {
  return { processors: [], nextPageToken: "" };
}

export const ListProcessorsResponse: MessageFns<ListProcessorsResponse> = {
  encode(message: ListProcessorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.processors) {
      Processor.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProcessorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProcessorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.processors.push(Processor.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProcessorsResponse {
    return {
      processors: globalThis.Array.isArray(object?.processors)
        ? object.processors.map((e: any) => Processor.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListProcessorsResponse): unknown {
    const obj: any = {};
    if (message.processors?.length) {
      obj.processors = message.processors.map((e) => Processor.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProcessorsResponse>): ListProcessorsResponse {
    return ListProcessorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProcessorsResponse>): ListProcessorsResponse {
    const message = createBaseListProcessorsResponse();
    message.processors = object.processors?.map((e) => Processor.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetProcessorTypeRequest(): GetProcessorTypeRequest {
  return { name: "" };
}

export const GetProcessorTypeRequest: MessageFns<GetProcessorTypeRequest> = {
  encode(message: GetProcessorTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProcessorTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProcessorTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProcessorTypeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProcessorTypeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProcessorTypeRequest>): GetProcessorTypeRequest {
    return GetProcessorTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProcessorTypeRequest>): GetProcessorTypeRequest {
    const message = createBaseGetProcessorTypeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetProcessorRequest(): GetProcessorRequest {
  return { name: "" };
}

export const GetProcessorRequest: MessageFns<GetProcessorRequest> = {
  encode(message: GetProcessorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProcessorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProcessorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProcessorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProcessorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProcessorRequest>): GetProcessorRequest {
    return GetProcessorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProcessorRequest>): GetProcessorRequest {
    const message = createBaseGetProcessorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetProcessorVersionRequest(): GetProcessorVersionRequest {
  return { name: "" };
}

export const GetProcessorVersionRequest: MessageFns<GetProcessorVersionRequest> = {
  encode(message: GetProcessorVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProcessorVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProcessorVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProcessorVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProcessorVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProcessorVersionRequest>): GetProcessorVersionRequest {
    return GetProcessorVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProcessorVersionRequest>): GetProcessorVersionRequest {
    const message = createBaseGetProcessorVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListProcessorVersionsRequest(): ListProcessorVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListProcessorVersionsRequest: MessageFns<ListProcessorVersionsRequest> = {
  encode(message: ListProcessorVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProcessorVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProcessorVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProcessorVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListProcessorVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProcessorVersionsRequest>): ListProcessorVersionsRequest {
    return ListProcessorVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProcessorVersionsRequest>): ListProcessorVersionsRequest {
    const message = createBaseListProcessorVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListProcessorVersionsResponse(): ListProcessorVersionsResponse {
  return { processorVersions: [], nextPageToken: "" };
}

export const ListProcessorVersionsResponse: MessageFns<ListProcessorVersionsResponse> = {
  encode(message: ListProcessorVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.processorVersions) {
      ProcessorVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProcessorVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProcessorVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.processorVersions.push(ProcessorVersion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProcessorVersionsResponse {
    return {
      processorVersions: globalThis.Array.isArray(object?.processorVersions)
        ? object.processorVersions.map((e: any) => ProcessorVersion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListProcessorVersionsResponse): unknown {
    const obj: any = {};
    if (message.processorVersions?.length) {
      obj.processorVersions = message.processorVersions.map((e) => ProcessorVersion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProcessorVersionsResponse>): ListProcessorVersionsResponse {
    return ListProcessorVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProcessorVersionsResponse>): ListProcessorVersionsResponse {
    const message = createBaseListProcessorVersionsResponse();
    message.processorVersions = object.processorVersions?.map((e) => ProcessorVersion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteProcessorVersionRequest(): DeleteProcessorVersionRequest {
  return { name: "" };
}

export const DeleteProcessorVersionRequest: MessageFns<DeleteProcessorVersionRequest> = {
  encode(message: DeleteProcessorVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProcessorVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProcessorVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProcessorVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteProcessorVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProcessorVersionRequest>): DeleteProcessorVersionRequest {
    return DeleteProcessorVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProcessorVersionRequest>): DeleteProcessorVersionRequest {
    const message = createBaseDeleteProcessorVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteProcessorVersionMetadata(): DeleteProcessorVersionMetadata {
  return { commonMetadata: undefined };
}

export const DeleteProcessorVersionMetadata: MessageFns<DeleteProcessorVersionMetadata> = {
  encode(message: DeleteProcessorVersionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProcessorVersionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProcessorVersionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProcessorVersionMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
    };
  },

  toJSON(message: DeleteProcessorVersionMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProcessorVersionMetadata>): DeleteProcessorVersionMetadata {
    return DeleteProcessorVersionMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProcessorVersionMetadata>): DeleteProcessorVersionMetadata {
    const message = createBaseDeleteProcessorVersionMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    return message;
  },
};

function createBaseDeployProcessorVersionRequest(): DeployProcessorVersionRequest {
  return { name: "" };
}

export const DeployProcessorVersionRequest: MessageFns<DeployProcessorVersionRequest> = {
  encode(message: DeployProcessorVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployProcessorVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployProcessorVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployProcessorVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeployProcessorVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeployProcessorVersionRequest>): DeployProcessorVersionRequest {
    return DeployProcessorVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployProcessorVersionRequest>): DeployProcessorVersionRequest {
    const message = createBaseDeployProcessorVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeployProcessorVersionResponse(): DeployProcessorVersionResponse {
  return {};
}

export const DeployProcessorVersionResponse: MessageFns<DeployProcessorVersionResponse> = {
  encode(_: DeployProcessorVersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployProcessorVersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployProcessorVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeployProcessorVersionResponse {
    return {};
  },

  toJSON(_: DeployProcessorVersionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeployProcessorVersionResponse>): DeployProcessorVersionResponse {
    return DeployProcessorVersionResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeployProcessorVersionResponse>): DeployProcessorVersionResponse {
    const message = createBaseDeployProcessorVersionResponse();
    return message;
  },
};

function createBaseDeployProcessorVersionMetadata(): DeployProcessorVersionMetadata {
  return { commonMetadata: undefined };
}

export const DeployProcessorVersionMetadata: MessageFns<DeployProcessorVersionMetadata> = {
  encode(message: DeployProcessorVersionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployProcessorVersionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployProcessorVersionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployProcessorVersionMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
    };
  },

  toJSON(message: DeployProcessorVersionMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<DeployProcessorVersionMetadata>): DeployProcessorVersionMetadata {
    return DeployProcessorVersionMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployProcessorVersionMetadata>): DeployProcessorVersionMetadata {
    const message = createBaseDeployProcessorVersionMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    return message;
  },
};

function createBaseUndeployProcessorVersionRequest(): UndeployProcessorVersionRequest {
  return { name: "" };
}

export const UndeployProcessorVersionRequest: MessageFns<UndeployProcessorVersionRequest> = {
  encode(message: UndeployProcessorVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployProcessorVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployProcessorVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployProcessorVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UndeployProcessorVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployProcessorVersionRequest>): UndeployProcessorVersionRequest {
    return UndeployProcessorVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployProcessorVersionRequest>): UndeployProcessorVersionRequest {
    const message = createBaseUndeployProcessorVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUndeployProcessorVersionResponse(): UndeployProcessorVersionResponse {
  return {};
}

export const UndeployProcessorVersionResponse: MessageFns<UndeployProcessorVersionResponse> = {
  encode(_: UndeployProcessorVersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployProcessorVersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployProcessorVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UndeployProcessorVersionResponse {
    return {};
  },

  toJSON(_: UndeployProcessorVersionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UndeployProcessorVersionResponse>): UndeployProcessorVersionResponse {
    return UndeployProcessorVersionResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UndeployProcessorVersionResponse>): UndeployProcessorVersionResponse {
    const message = createBaseUndeployProcessorVersionResponse();
    return message;
  },
};

function createBaseUndeployProcessorVersionMetadata(): UndeployProcessorVersionMetadata {
  return { commonMetadata: undefined };
}

export const UndeployProcessorVersionMetadata: MessageFns<UndeployProcessorVersionMetadata> = {
  encode(message: UndeployProcessorVersionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployProcessorVersionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployProcessorVersionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployProcessorVersionMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
    };
  },

  toJSON(message: UndeployProcessorVersionMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployProcessorVersionMetadata>): UndeployProcessorVersionMetadata {
    return UndeployProcessorVersionMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployProcessorVersionMetadata>): UndeployProcessorVersionMetadata {
    const message = createBaseUndeployProcessorVersionMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    return message;
  },
};

function createBaseCreateProcessorRequest(): CreateProcessorRequest {
  return { parent: "", processor: undefined };
}

export const CreateProcessorRequest: MessageFns<CreateProcessorRequest> = {
  encode(message: CreateProcessorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.processor !== undefined) {
      Processor.encode(message.processor, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProcessorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProcessorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.processor = Processor.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProcessorRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      processor: isSet(object.processor) ? Processor.fromJSON(object.processor) : undefined,
    };
  },

  toJSON(message: CreateProcessorRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.processor !== undefined) {
      obj.processor = Processor.toJSON(message.processor);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProcessorRequest>): CreateProcessorRequest {
    return CreateProcessorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProcessorRequest>): CreateProcessorRequest {
    const message = createBaseCreateProcessorRequest();
    message.parent = object.parent ?? "";
    message.processor = (object.processor !== undefined && object.processor !== null)
      ? Processor.fromPartial(object.processor)
      : undefined;
    return message;
  },
};

function createBaseDeleteProcessorRequest(): DeleteProcessorRequest {
  return { name: "" };
}

export const DeleteProcessorRequest: MessageFns<DeleteProcessorRequest> = {
  encode(message: DeleteProcessorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProcessorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProcessorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProcessorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteProcessorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProcessorRequest>): DeleteProcessorRequest {
    return DeleteProcessorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProcessorRequest>): DeleteProcessorRequest {
    const message = createBaseDeleteProcessorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteProcessorMetadata(): DeleteProcessorMetadata {
  return { commonMetadata: undefined };
}

export const DeleteProcessorMetadata: MessageFns<DeleteProcessorMetadata> = {
  encode(message: DeleteProcessorMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProcessorMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProcessorMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProcessorMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
    };
  },

  toJSON(message: DeleteProcessorMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProcessorMetadata>): DeleteProcessorMetadata {
    return DeleteProcessorMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProcessorMetadata>): DeleteProcessorMetadata {
    const message = createBaseDeleteProcessorMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    return message;
  },
};

function createBaseEnableProcessorRequest(): EnableProcessorRequest {
  return { name: "" };
}

export const EnableProcessorRequest: MessageFns<EnableProcessorRequest> = {
  encode(message: EnableProcessorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableProcessorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableProcessorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableProcessorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: EnableProcessorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<EnableProcessorRequest>): EnableProcessorRequest {
    return EnableProcessorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnableProcessorRequest>): EnableProcessorRequest {
    const message = createBaseEnableProcessorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseEnableProcessorResponse(): EnableProcessorResponse {
  return {};
}

export const EnableProcessorResponse: MessageFns<EnableProcessorResponse> = {
  encode(_: EnableProcessorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableProcessorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableProcessorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnableProcessorResponse {
    return {};
  },

  toJSON(_: EnableProcessorResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<EnableProcessorResponse>): EnableProcessorResponse {
    return EnableProcessorResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<EnableProcessorResponse>): EnableProcessorResponse {
    const message = createBaseEnableProcessorResponse();
    return message;
  },
};

function createBaseEnableProcessorMetadata(): EnableProcessorMetadata {
  return { commonMetadata: undefined };
}

export const EnableProcessorMetadata: MessageFns<EnableProcessorMetadata> = {
  encode(message: EnableProcessorMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableProcessorMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableProcessorMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableProcessorMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
    };
  },

  toJSON(message: EnableProcessorMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<EnableProcessorMetadata>): EnableProcessorMetadata {
    return EnableProcessorMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnableProcessorMetadata>): EnableProcessorMetadata {
    const message = createBaseEnableProcessorMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    return message;
  },
};

function createBaseDisableProcessorRequest(): DisableProcessorRequest {
  return { name: "" };
}

export const DisableProcessorRequest: MessageFns<DisableProcessorRequest> = {
  encode(message: DisableProcessorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableProcessorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableProcessorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableProcessorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DisableProcessorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DisableProcessorRequest>): DisableProcessorRequest {
    return DisableProcessorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisableProcessorRequest>): DisableProcessorRequest {
    const message = createBaseDisableProcessorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDisableProcessorResponse(): DisableProcessorResponse {
  return {};
}

export const DisableProcessorResponse: MessageFns<DisableProcessorResponse> = {
  encode(_: DisableProcessorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableProcessorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableProcessorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DisableProcessorResponse {
    return {};
  },

  toJSON(_: DisableProcessorResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DisableProcessorResponse>): DisableProcessorResponse {
    return DisableProcessorResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DisableProcessorResponse>): DisableProcessorResponse {
    const message = createBaseDisableProcessorResponse();
    return message;
  },
};

function createBaseDisableProcessorMetadata(): DisableProcessorMetadata {
  return { commonMetadata: undefined };
}

export const DisableProcessorMetadata: MessageFns<DisableProcessorMetadata> = {
  encode(message: DisableProcessorMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableProcessorMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableProcessorMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableProcessorMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
    };
  },

  toJSON(message: DisableProcessorMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<DisableProcessorMetadata>): DisableProcessorMetadata {
    return DisableProcessorMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisableProcessorMetadata>): DisableProcessorMetadata {
    const message = createBaseDisableProcessorMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    return message;
  },
};

function createBaseSetDefaultProcessorVersionRequest(): SetDefaultProcessorVersionRequest {
  return { processor: "", defaultProcessorVersion: "" };
}

export const SetDefaultProcessorVersionRequest: MessageFns<SetDefaultProcessorVersionRequest> = {
  encode(message: SetDefaultProcessorVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.processor !== "") {
      writer.uint32(10).string(message.processor);
    }
    if (message.defaultProcessorVersion !== "") {
      writer.uint32(18).string(message.defaultProcessorVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultProcessorVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultProcessorVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.processor = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.defaultProcessorVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultProcessorVersionRequest {
    return {
      processor: isSet(object.processor) ? globalThis.String(object.processor) : "",
      defaultProcessorVersion: isSet(object.defaultProcessorVersion)
        ? globalThis.String(object.defaultProcessorVersion)
        : "",
    };
  },

  toJSON(message: SetDefaultProcessorVersionRequest): unknown {
    const obj: any = {};
    if (message.processor !== "") {
      obj.processor = message.processor;
    }
    if (message.defaultProcessorVersion !== "") {
      obj.defaultProcessorVersion = message.defaultProcessorVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultProcessorVersionRequest>): SetDefaultProcessorVersionRequest {
    return SetDefaultProcessorVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultProcessorVersionRequest>): SetDefaultProcessorVersionRequest {
    const message = createBaseSetDefaultProcessorVersionRequest();
    message.processor = object.processor ?? "";
    message.defaultProcessorVersion = object.defaultProcessorVersion ?? "";
    return message;
  },
};

function createBaseSetDefaultProcessorVersionResponse(): SetDefaultProcessorVersionResponse {
  return {};
}

export const SetDefaultProcessorVersionResponse: MessageFns<SetDefaultProcessorVersionResponse> = {
  encode(_: SetDefaultProcessorVersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultProcessorVersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultProcessorVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetDefaultProcessorVersionResponse {
    return {};
  },

  toJSON(_: SetDefaultProcessorVersionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SetDefaultProcessorVersionResponse>): SetDefaultProcessorVersionResponse {
    return SetDefaultProcessorVersionResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SetDefaultProcessorVersionResponse>): SetDefaultProcessorVersionResponse {
    const message = createBaseSetDefaultProcessorVersionResponse();
    return message;
  },
};

function createBaseSetDefaultProcessorVersionMetadata(): SetDefaultProcessorVersionMetadata {
  return { commonMetadata: undefined };
}

export const SetDefaultProcessorVersionMetadata: MessageFns<SetDefaultProcessorVersionMetadata> = {
  encode(message: SetDefaultProcessorVersionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDefaultProcessorVersionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDefaultProcessorVersionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDefaultProcessorVersionMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
    };
  },

  toJSON(message: SetDefaultProcessorVersionMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<SetDefaultProcessorVersionMetadata>): SetDefaultProcessorVersionMetadata {
    return SetDefaultProcessorVersionMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetDefaultProcessorVersionMetadata>): SetDefaultProcessorVersionMetadata {
    const message = createBaseSetDefaultProcessorVersionMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    return message;
  },
};

function createBaseTrainProcessorVersionRequest(): TrainProcessorVersionRequest {
  return {
    customDocumentExtractionOptions: undefined,
    foundationModelTuningOptions: undefined,
    parent: "",
    processorVersion: undefined,
    documentSchema: undefined,
    inputData: undefined,
    baseProcessorVersion: "",
  };
}

export const TrainProcessorVersionRequest: MessageFns<TrainProcessorVersionRequest> = {
  encode(message: TrainProcessorVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customDocumentExtractionOptions !== undefined) {
      TrainProcessorVersionRequest_CustomDocumentExtractionOptions.encode(
        message.customDocumentExtractionOptions,
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.foundationModelTuningOptions !== undefined) {
      TrainProcessorVersionRequest_FoundationModelTuningOptions.encode(
        message.foundationModelTuningOptions,
        writer.uint32(98).fork(),
      ).join();
    }
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.processorVersion !== undefined) {
      ProcessorVersion.encode(message.processorVersion, writer.uint32(18).fork()).join();
    }
    if (message.documentSchema !== undefined) {
      DocumentSchema.encode(message.documentSchema, writer.uint32(82).fork()).join();
    }
    if (message.inputData !== undefined) {
      TrainProcessorVersionRequest_InputData.encode(message.inputData, writer.uint32(34).fork()).join();
    }
    if (message.baseProcessorVersion !== "") {
      writer.uint32(66).string(message.baseProcessorVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainProcessorVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainProcessorVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.customDocumentExtractionOptions = TrainProcessorVersionRequest_CustomDocumentExtractionOptions.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.foundationModelTuningOptions = TrainProcessorVersionRequest_FoundationModelTuningOptions.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.processorVersion = ProcessorVersion.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.documentSchema = DocumentSchema.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.inputData = TrainProcessorVersionRequest_InputData.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.baseProcessorVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainProcessorVersionRequest {
    return {
      customDocumentExtractionOptions: isSet(object.customDocumentExtractionOptions)
        ? TrainProcessorVersionRequest_CustomDocumentExtractionOptions.fromJSON(object.customDocumentExtractionOptions)
        : undefined,
      foundationModelTuningOptions: isSet(object.foundationModelTuningOptions)
        ? TrainProcessorVersionRequest_FoundationModelTuningOptions.fromJSON(object.foundationModelTuningOptions)
        : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      processorVersion: isSet(object.processorVersion) ? ProcessorVersion.fromJSON(object.processorVersion) : undefined,
      documentSchema: isSet(object.documentSchema) ? DocumentSchema.fromJSON(object.documentSchema) : undefined,
      inputData: isSet(object.inputData)
        ? TrainProcessorVersionRequest_InputData.fromJSON(object.inputData)
        : undefined,
      baseProcessorVersion: isSet(object.baseProcessorVersion) ? globalThis.String(object.baseProcessorVersion) : "",
    };
  },

  toJSON(message: TrainProcessorVersionRequest): unknown {
    const obj: any = {};
    if (message.customDocumentExtractionOptions !== undefined) {
      obj.customDocumentExtractionOptions = TrainProcessorVersionRequest_CustomDocumentExtractionOptions.toJSON(
        message.customDocumentExtractionOptions,
      );
    }
    if (message.foundationModelTuningOptions !== undefined) {
      obj.foundationModelTuningOptions = TrainProcessorVersionRequest_FoundationModelTuningOptions.toJSON(
        message.foundationModelTuningOptions,
      );
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.processorVersion !== undefined) {
      obj.processorVersion = ProcessorVersion.toJSON(message.processorVersion);
    }
    if (message.documentSchema !== undefined) {
      obj.documentSchema = DocumentSchema.toJSON(message.documentSchema);
    }
    if (message.inputData !== undefined) {
      obj.inputData = TrainProcessorVersionRequest_InputData.toJSON(message.inputData);
    }
    if (message.baseProcessorVersion !== "") {
      obj.baseProcessorVersion = message.baseProcessorVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<TrainProcessorVersionRequest>): TrainProcessorVersionRequest {
    return TrainProcessorVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainProcessorVersionRequest>): TrainProcessorVersionRequest {
    const message = createBaseTrainProcessorVersionRequest();
    message.customDocumentExtractionOptions =
      (object.customDocumentExtractionOptions !== undefined && object.customDocumentExtractionOptions !== null)
        ? TrainProcessorVersionRequest_CustomDocumentExtractionOptions.fromPartial(
          object.customDocumentExtractionOptions,
        )
        : undefined;
    message.foundationModelTuningOptions =
      (object.foundationModelTuningOptions !== undefined && object.foundationModelTuningOptions !== null)
        ? TrainProcessorVersionRequest_FoundationModelTuningOptions.fromPartial(object.foundationModelTuningOptions)
        : undefined;
    message.parent = object.parent ?? "";
    message.processorVersion = (object.processorVersion !== undefined && object.processorVersion !== null)
      ? ProcessorVersion.fromPartial(object.processorVersion)
      : undefined;
    message.documentSchema = (object.documentSchema !== undefined && object.documentSchema !== null)
      ? DocumentSchema.fromPartial(object.documentSchema)
      : undefined;
    message.inputData = (object.inputData !== undefined && object.inputData !== null)
      ? TrainProcessorVersionRequest_InputData.fromPartial(object.inputData)
      : undefined;
    message.baseProcessorVersion = object.baseProcessorVersion ?? "";
    return message;
  },
};

function createBaseTrainProcessorVersionRequest_InputData(): TrainProcessorVersionRequest_InputData {
  return { trainingDocuments: undefined, testDocuments: undefined };
}

export const TrainProcessorVersionRequest_InputData: MessageFns<TrainProcessorVersionRequest_InputData> = {
  encode(message: TrainProcessorVersionRequest_InputData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trainingDocuments !== undefined) {
      BatchDocumentsInputConfig.encode(message.trainingDocuments, writer.uint32(26).fork()).join();
    }
    if (message.testDocuments !== undefined) {
      BatchDocumentsInputConfig.encode(message.testDocuments, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainProcessorVersionRequest_InputData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainProcessorVersionRequest_InputData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.trainingDocuments = BatchDocumentsInputConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.testDocuments = BatchDocumentsInputConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainProcessorVersionRequest_InputData {
    return {
      trainingDocuments: isSet(object.trainingDocuments)
        ? BatchDocumentsInputConfig.fromJSON(object.trainingDocuments)
        : undefined,
      testDocuments: isSet(object.testDocuments) ? BatchDocumentsInputConfig.fromJSON(object.testDocuments) : undefined,
    };
  },

  toJSON(message: TrainProcessorVersionRequest_InputData): unknown {
    const obj: any = {};
    if (message.trainingDocuments !== undefined) {
      obj.trainingDocuments = BatchDocumentsInputConfig.toJSON(message.trainingDocuments);
    }
    if (message.testDocuments !== undefined) {
      obj.testDocuments = BatchDocumentsInputConfig.toJSON(message.testDocuments);
    }
    return obj;
  },

  create(base?: DeepPartial<TrainProcessorVersionRequest_InputData>): TrainProcessorVersionRequest_InputData {
    return TrainProcessorVersionRequest_InputData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainProcessorVersionRequest_InputData>): TrainProcessorVersionRequest_InputData {
    const message = createBaseTrainProcessorVersionRequest_InputData();
    message.trainingDocuments = (object.trainingDocuments !== undefined && object.trainingDocuments !== null)
      ? BatchDocumentsInputConfig.fromPartial(object.trainingDocuments)
      : undefined;
    message.testDocuments = (object.testDocuments !== undefined && object.testDocuments !== null)
      ? BatchDocumentsInputConfig.fromPartial(object.testDocuments)
      : undefined;
    return message;
  },
};

function createBaseTrainProcessorVersionRequest_CustomDocumentExtractionOptions(): TrainProcessorVersionRequest_CustomDocumentExtractionOptions {
  return { trainingMethod: 0 };
}

export const TrainProcessorVersionRequest_CustomDocumentExtractionOptions: MessageFns<
  TrainProcessorVersionRequest_CustomDocumentExtractionOptions
> = {
  encode(
    message: TrainProcessorVersionRequest_CustomDocumentExtractionOptions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.trainingMethod !== 0) {
      writer.uint32(24).int32(message.trainingMethod);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): TrainProcessorVersionRequest_CustomDocumentExtractionOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainProcessorVersionRequest_CustomDocumentExtractionOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.trainingMethod = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainProcessorVersionRequest_CustomDocumentExtractionOptions {
    return {
      trainingMethod: isSet(object.trainingMethod)
        ? trainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethodFromJSON(object.trainingMethod)
        : 0,
    };
  },

  toJSON(message: TrainProcessorVersionRequest_CustomDocumentExtractionOptions): unknown {
    const obj: any = {};
    if (message.trainingMethod !== 0) {
      obj.trainingMethod = trainProcessorVersionRequest_CustomDocumentExtractionOptions_TrainingMethodToJSON(
        message.trainingMethod,
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<TrainProcessorVersionRequest_CustomDocumentExtractionOptions>,
  ): TrainProcessorVersionRequest_CustomDocumentExtractionOptions {
    return TrainProcessorVersionRequest_CustomDocumentExtractionOptions.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<TrainProcessorVersionRequest_CustomDocumentExtractionOptions>,
  ): TrainProcessorVersionRequest_CustomDocumentExtractionOptions {
    const message = createBaseTrainProcessorVersionRequest_CustomDocumentExtractionOptions();
    message.trainingMethod = object.trainingMethod ?? 0;
    return message;
  },
};

function createBaseTrainProcessorVersionRequest_FoundationModelTuningOptions(): TrainProcessorVersionRequest_FoundationModelTuningOptions {
  return { trainSteps: 0, learningRateMultiplier: 0 };
}

export const TrainProcessorVersionRequest_FoundationModelTuningOptions: MessageFns<
  TrainProcessorVersionRequest_FoundationModelTuningOptions
> = {
  encode(
    message: TrainProcessorVersionRequest_FoundationModelTuningOptions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.trainSteps !== 0) {
      writer.uint32(16).int32(message.trainSteps);
    }
    if (message.learningRateMultiplier !== 0) {
      writer.uint32(29).float(message.learningRateMultiplier);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainProcessorVersionRequest_FoundationModelTuningOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainProcessorVersionRequest_FoundationModelTuningOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.trainSteps = reader.int32();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.learningRateMultiplier = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainProcessorVersionRequest_FoundationModelTuningOptions {
    return {
      trainSteps: isSet(object.trainSteps) ? globalThis.Number(object.trainSteps) : 0,
      learningRateMultiplier: isSet(object.learningRateMultiplier)
        ? globalThis.Number(object.learningRateMultiplier)
        : 0,
    };
  },

  toJSON(message: TrainProcessorVersionRequest_FoundationModelTuningOptions): unknown {
    const obj: any = {};
    if (message.trainSteps !== 0) {
      obj.trainSteps = Math.round(message.trainSteps);
    }
    if (message.learningRateMultiplier !== 0) {
      obj.learningRateMultiplier = message.learningRateMultiplier;
    }
    return obj;
  },

  create(
    base?: DeepPartial<TrainProcessorVersionRequest_FoundationModelTuningOptions>,
  ): TrainProcessorVersionRequest_FoundationModelTuningOptions {
    return TrainProcessorVersionRequest_FoundationModelTuningOptions.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<TrainProcessorVersionRequest_FoundationModelTuningOptions>,
  ): TrainProcessorVersionRequest_FoundationModelTuningOptions {
    const message = createBaseTrainProcessorVersionRequest_FoundationModelTuningOptions();
    message.trainSteps = object.trainSteps ?? 0;
    message.learningRateMultiplier = object.learningRateMultiplier ?? 0;
    return message;
  },
};

function createBaseTrainProcessorVersionResponse(): TrainProcessorVersionResponse {
  return { processorVersion: "" };
}

export const TrainProcessorVersionResponse: MessageFns<TrainProcessorVersionResponse> = {
  encode(message: TrainProcessorVersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.processorVersion !== "") {
      writer.uint32(10).string(message.processorVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainProcessorVersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainProcessorVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.processorVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainProcessorVersionResponse {
    return { processorVersion: isSet(object.processorVersion) ? globalThis.String(object.processorVersion) : "" };
  },

  toJSON(message: TrainProcessorVersionResponse): unknown {
    const obj: any = {};
    if (message.processorVersion !== "") {
      obj.processorVersion = message.processorVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<TrainProcessorVersionResponse>): TrainProcessorVersionResponse {
    return TrainProcessorVersionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainProcessorVersionResponse>): TrainProcessorVersionResponse {
    const message = createBaseTrainProcessorVersionResponse();
    message.processorVersion = object.processorVersion ?? "";
    return message;
  },
};

function createBaseTrainProcessorVersionMetadata(): TrainProcessorVersionMetadata {
  return { commonMetadata: undefined, trainingDatasetValidation: undefined, testDatasetValidation: undefined };
}

export const TrainProcessorVersionMetadata: MessageFns<TrainProcessorVersionMetadata> = {
  encode(message: TrainProcessorVersionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(10).fork()).join();
    }
    if (message.trainingDatasetValidation !== undefined) {
      TrainProcessorVersionMetadata_DatasetValidation.encode(
        message.trainingDatasetValidation,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.testDatasetValidation !== undefined) {
      TrainProcessorVersionMetadata_DatasetValidation.encode(message.testDatasetValidation, writer.uint32(26).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainProcessorVersionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainProcessorVersionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trainingDatasetValidation = TrainProcessorVersionMetadata_DatasetValidation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.testDatasetValidation = TrainProcessorVersionMetadata_DatasetValidation.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainProcessorVersionMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
      trainingDatasetValidation: isSet(object.trainingDatasetValidation)
        ? TrainProcessorVersionMetadata_DatasetValidation.fromJSON(object.trainingDatasetValidation)
        : undefined,
      testDatasetValidation: isSet(object.testDatasetValidation)
        ? TrainProcessorVersionMetadata_DatasetValidation.fromJSON(object.testDatasetValidation)
        : undefined,
    };
  },

  toJSON(message: TrainProcessorVersionMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    if (message.trainingDatasetValidation !== undefined) {
      obj.trainingDatasetValidation = TrainProcessorVersionMetadata_DatasetValidation.toJSON(
        message.trainingDatasetValidation,
      );
    }
    if (message.testDatasetValidation !== undefined) {
      obj.testDatasetValidation = TrainProcessorVersionMetadata_DatasetValidation.toJSON(message.testDatasetValidation);
    }
    return obj;
  },

  create(base?: DeepPartial<TrainProcessorVersionMetadata>): TrainProcessorVersionMetadata {
    return TrainProcessorVersionMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainProcessorVersionMetadata>): TrainProcessorVersionMetadata {
    const message = createBaseTrainProcessorVersionMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    message.trainingDatasetValidation =
      (object.trainingDatasetValidation !== undefined && object.trainingDatasetValidation !== null)
        ? TrainProcessorVersionMetadata_DatasetValidation.fromPartial(object.trainingDatasetValidation)
        : undefined;
    message.testDatasetValidation =
      (object.testDatasetValidation !== undefined && object.testDatasetValidation !== null)
        ? TrainProcessorVersionMetadata_DatasetValidation.fromPartial(object.testDatasetValidation)
        : undefined;
    return message;
  },
};

function createBaseTrainProcessorVersionMetadata_DatasetValidation(): TrainProcessorVersionMetadata_DatasetValidation {
  return { documentErrorCount: 0, datasetErrorCount: 0, documentErrors: [], datasetErrors: [] };
}

export const TrainProcessorVersionMetadata_DatasetValidation: MessageFns<
  TrainProcessorVersionMetadata_DatasetValidation
> = {
  encode(
    message: TrainProcessorVersionMetadata_DatasetValidation,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.documentErrorCount !== 0) {
      writer.uint32(24).int32(message.documentErrorCount);
    }
    if (message.datasetErrorCount !== 0) {
      writer.uint32(32).int32(message.datasetErrorCount);
    }
    for (const v of message.documentErrors) {
      Status.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.datasetErrors) {
      Status.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainProcessorVersionMetadata_DatasetValidation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainProcessorVersionMetadata_DatasetValidation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 24) {
            break;
          }

          message.documentErrorCount = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.datasetErrorCount = reader.int32();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.documentErrors.push(Status.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetErrors.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainProcessorVersionMetadata_DatasetValidation {
    return {
      documentErrorCount: isSet(object.documentErrorCount) ? globalThis.Number(object.documentErrorCount) : 0,
      datasetErrorCount: isSet(object.datasetErrorCount) ? globalThis.Number(object.datasetErrorCount) : 0,
      documentErrors: globalThis.Array.isArray(object?.documentErrors)
        ? object.documentErrors.map((e: any) => Status.fromJSON(e))
        : [],
      datasetErrors: globalThis.Array.isArray(object?.datasetErrors)
        ? object.datasetErrors.map((e: any) => Status.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TrainProcessorVersionMetadata_DatasetValidation): unknown {
    const obj: any = {};
    if (message.documentErrorCount !== 0) {
      obj.documentErrorCount = Math.round(message.documentErrorCount);
    }
    if (message.datasetErrorCount !== 0) {
      obj.datasetErrorCount = Math.round(message.datasetErrorCount);
    }
    if (message.documentErrors?.length) {
      obj.documentErrors = message.documentErrors.map((e) => Status.toJSON(e));
    }
    if (message.datasetErrors?.length) {
      obj.datasetErrors = message.datasetErrors.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(
    base?: DeepPartial<TrainProcessorVersionMetadata_DatasetValidation>,
  ): TrainProcessorVersionMetadata_DatasetValidation {
    return TrainProcessorVersionMetadata_DatasetValidation.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<TrainProcessorVersionMetadata_DatasetValidation>,
  ): TrainProcessorVersionMetadata_DatasetValidation {
    const message = createBaseTrainProcessorVersionMetadata_DatasetValidation();
    message.documentErrorCount = object.documentErrorCount ?? 0;
    message.datasetErrorCount = object.datasetErrorCount ?? 0;
    message.documentErrors = object.documentErrors?.map((e) => Status.fromPartial(e)) || [];
    message.datasetErrors = object.datasetErrors?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReviewDocumentRequest(): ReviewDocumentRequest {
  return {
    inlineDocument: undefined,
    humanReviewConfig: "",
    enableSchemaValidation: false,
    priority: 0,
    documentSchema: undefined,
  };
}

export const ReviewDocumentRequest: MessageFns<ReviewDocumentRequest> = {
  encode(message: ReviewDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inlineDocument !== undefined) {
      Document.encode(message.inlineDocument, writer.uint32(34).fork()).join();
    }
    if (message.humanReviewConfig !== "") {
      writer.uint32(10).string(message.humanReviewConfig);
    }
    if (message.enableSchemaValidation !== false) {
      writer.uint32(24).bool(message.enableSchemaValidation);
    }
    if (message.priority !== 0) {
      writer.uint32(40).int32(message.priority);
    }
    if (message.documentSchema !== undefined) {
      DocumentSchema.encode(message.documentSchema, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReviewDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReviewDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.inlineDocument = Document.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.humanReviewConfig = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.enableSchemaValidation = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.priority = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.documentSchema = DocumentSchema.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReviewDocumentRequest {
    return {
      inlineDocument: isSet(object.inlineDocument) ? Document.fromJSON(object.inlineDocument) : undefined,
      humanReviewConfig: isSet(object.humanReviewConfig) ? globalThis.String(object.humanReviewConfig) : "",
      enableSchemaValidation: isSet(object.enableSchemaValidation)
        ? globalThis.Boolean(object.enableSchemaValidation)
        : false,
      priority: isSet(object.priority) ? reviewDocumentRequest_PriorityFromJSON(object.priority) : 0,
      documentSchema: isSet(object.documentSchema) ? DocumentSchema.fromJSON(object.documentSchema) : undefined,
    };
  },

  toJSON(message: ReviewDocumentRequest): unknown {
    const obj: any = {};
    if (message.inlineDocument !== undefined) {
      obj.inlineDocument = Document.toJSON(message.inlineDocument);
    }
    if (message.humanReviewConfig !== "") {
      obj.humanReviewConfig = message.humanReviewConfig;
    }
    if (message.enableSchemaValidation !== false) {
      obj.enableSchemaValidation = message.enableSchemaValidation;
    }
    if (message.priority !== 0) {
      obj.priority = reviewDocumentRequest_PriorityToJSON(message.priority);
    }
    if (message.documentSchema !== undefined) {
      obj.documentSchema = DocumentSchema.toJSON(message.documentSchema);
    }
    return obj;
  },

  create(base?: DeepPartial<ReviewDocumentRequest>): ReviewDocumentRequest {
    return ReviewDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReviewDocumentRequest>): ReviewDocumentRequest {
    const message = createBaseReviewDocumentRequest();
    message.inlineDocument = (object.inlineDocument !== undefined && object.inlineDocument !== null)
      ? Document.fromPartial(object.inlineDocument)
      : undefined;
    message.humanReviewConfig = object.humanReviewConfig ?? "";
    message.enableSchemaValidation = object.enableSchemaValidation ?? false;
    message.priority = object.priority ?? 0;
    message.documentSchema = (object.documentSchema !== undefined && object.documentSchema !== null)
      ? DocumentSchema.fromPartial(object.documentSchema)
      : undefined;
    return message;
  },
};

function createBaseReviewDocumentResponse(): ReviewDocumentResponse {
  return { gcsDestination: "", state: 0, rejectionReason: "" };
}

export const ReviewDocumentResponse: MessageFns<ReviewDocumentResponse> = {
  encode(message: ReviewDocumentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsDestination !== "") {
      writer.uint32(10).string(message.gcsDestination);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.rejectionReason !== "") {
      writer.uint32(26).string(message.rejectionReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReviewDocumentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReviewDocumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsDestination = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rejectionReason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReviewDocumentResponse {
    return {
      gcsDestination: isSet(object.gcsDestination) ? globalThis.String(object.gcsDestination) : "",
      state: isSet(object.state) ? reviewDocumentResponse_StateFromJSON(object.state) : 0,
      rejectionReason: isSet(object.rejectionReason) ? globalThis.String(object.rejectionReason) : "",
    };
  },

  toJSON(message: ReviewDocumentResponse): unknown {
    const obj: any = {};
    if (message.gcsDestination !== "") {
      obj.gcsDestination = message.gcsDestination;
    }
    if (message.state !== 0) {
      obj.state = reviewDocumentResponse_StateToJSON(message.state);
    }
    if (message.rejectionReason !== "") {
      obj.rejectionReason = message.rejectionReason;
    }
    return obj;
  },

  create(base?: DeepPartial<ReviewDocumentResponse>): ReviewDocumentResponse {
    return ReviewDocumentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReviewDocumentResponse>): ReviewDocumentResponse {
    const message = createBaseReviewDocumentResponse();
    message.gcsDestination = object.gcsDestination ?? "";
    message.state = object.state ?? 0;
    message.rejectionReason = object.rejectionReason ?? "";
    return message;
  },
};

function createBaseReviewDocumentOperationMetadata(): ReviewDocumentOperationMetadata {
  return { commonMetadata: undefined, questionId: "" };
}

export const ReviewDocumentOperationMetadata: MessageFns<ReviewDocumentOperationMetadata> = {
  encode(message: ReviewDocumentOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(42).fork()).join();
    }
    if (message.questionId !== "") {
      writer.uint32(50).string(message.questionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReviewDocumentOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReviewDocumentOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.questionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReviewDocumentOperationMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
      questionId: isSet(object.questionId) ? globalThis.String(object.questionId) : "",
    };
  },

  toJSON(message: ReviewDocumentOperationMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    if (message.questionId !== "") {
      obj.questionId = message.questionId;
    }
    return obj;
  },

  create(base?: DeepPartial<ReviewDocumentOperationMetadata>): ReviewDocumentOperationMetadata {
    return ReviewDocumentOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReviewDocumentOperationMetadata>): ReviewDocumentOperationMetadata {
    const message = createBaseReviewDocumentOperationMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    message.questionId = object.questionId ?? "";
    return message;
  },
};

function createBaseEvaluateProcessorVersionRequest(): EvaluateProcessorVersionRequest {
  return { processorVersion: "", evaluationDocuments: undefined };
}

export const EvaluateProcessorVersionRequest: MessageFns<EvaluateProcessorVersionRequest> = {
  encode(message: EvaluateProcessorVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.processorVersion !== "") {
      writer.uint32(10).string(message.processorVersion);
    }
    if (message.evaluationDocuments !== undefined) {
      BatchDocumentsInputConfig.encode(message.evaluationDocuments, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateProcessorVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateProcessorVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.processorVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.evaluationDocuments = BatchDocumentsInputConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateProcessorVersionRequest {
    return {
      processorVersion: isSet(object.processorVersion) ? globalThis.String(object.processorVersion) : "",
      evaluationDocuments: isSet(object.evaluationDocuments)
        ? BatchDocumentsInputConfig.fromJSON(object.evaluationDocuments)
        : undefined,
    };
  },

  toJSON(message: EvaluateProcessorVersionRequest): unknown {
    const obj: any = {};
    if (message.processorVersion !== "") {
      obj.processorVersion = message.processorVersion;
    }
    if (message.evaluationDocuments !== undefined) {
      obj.evaluationDocuments = BatchDocumentsInputConfig.toJSON(message.evaluationDocuments);
    }
    return obj;
  },

  create(base?: DeepPartial<EvaluateProcessorVersionRequest>): EvaluateProcessorVersionRequest {
    return EvaluateProcessorVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EvaluateProcessorVersionRequest>): EvaluateProcessorVersionRequest {
    const message = createBaseEvaluateProcessorVersionRequest();
    message.processorVersion = object.processorVersion ?? "";
    message.evaluationDocuments = (object.evaluationDocuments !== undefined && object.evaluationDocuments !== null)
      ? BatchDocumentsInputConfig.fromPartial(object.evaluationDocuments)
      : undefined;
    return message;
  },
};

function createBaseEvaluateProcessorVersionMetadata(): EvaluateProcessorVersionMetadata {
  return { commonMetadata: undefined };
}

export const EvaluateProcessorVersionMetadata: MessageFns<EvaluateProcessorVersionMetadata> = {
  encode(message: EvaluateProcessorVersionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commonMetadata !== undefined) {
      CommonOperationMetadata.encode(message.commonMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateProcessorVersionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateProcessorVersionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.commonMetadata = CommonOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateProcessorVersionMetadata {
    return {
      commonMetadata: isSet(object.commonMetadata)
        ? CommonOperationMetadata.fromJSON(object.commonMetadata)
        : undefined,
    };
  },

  toJSON(message: EvaluateProcessorVersionMetadata): unknown {
    const obj: any = {};
    if (message.commonMetadata !== undefined) {
      obj.commonMetadata = CommonOperationMetadata.toJSON(message.commonMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<EvaluateProcessorVersionMetadata>): EvaluateProcessorVersionMetadata {
    return EvaluateProcessorVersionMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EvaluateProcessorVersionMetadata>): EvaluateProcessorVersionMetadata {
    const message = createBaseEvaluateProcessorVersionMetadata();
    message.commonMetadata = (object.commonMetadata !== undefined && object.commonMetadata !== null)
      ? CommonOperationMetadata.fromPartial(object.commonMetadata)
      : undefined;
    return message;
  },
};

function createBaseEvaluateProcessorVersionResponse(): EvaluateProcessorVersionResponse {
  return { evaluation: "" };
}

export const EvaluateProcessorVersionResponse: MessageFns<EvaluateProcessorVersionResponse> = {
  encode(message: EvaluateProcessorVersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.evaluation !== "") {
      writer.uint32(18).string(message.evaluation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateProcessorVersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateProcessorVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.evaluation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateProcessorVersionResponse {
    return { evaluation: isSet(object.evaluation) ? globalThis.String(object.evaluation) : "" };
  },

  toJSON(message: EvaluateProcessorVersionResponse): unknown {
    const obj: any = {};
    if (message.evaluation !== "") {
      obj.evaluation = message.evaluation;
    }
    return obj;
  },

  create(base?: DeepPartial<EvaluateProcessorVersionResponse>): EvaluateProcessorVersionResponse {
    return EvaluateProcessorVersionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EvaluateProcessorVersionResponse>): EvaluateProcessorVersionResponse {
    const message = createBaseEvaluateProcessorVersionResponse();
    message.evaluation = object.evaluation ?? "";
    return message;
  },
};

function createBaseGetEvaluationRequest(): GetEvaluationRequest {
  return { name: "" };
}

export const GetEvaluationRequest: MessageFns<GetEvaluationRequest> = {
  encode(message: GetEvaluationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEvaluationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEvaluationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEvaluationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEvaluationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEvaluationRequest>): GetEvaluationRequest {
    return GetEvaluationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEvaluationRequest>): GetEvaluationRequest {
    const message = createBaseGetEvaluationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListEvaluationsRequest(): ListEvaluationsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEvaluationsRequest: MessageFns<ListEvaluationsRequest> = {
  encode(message: ListEvaluationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEvaluationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEvaluationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEvaluationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEvaluationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEvaluationsRequest>): ListEvaluationsRequest {
    return ListEvaluationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEvaluationsRequest>): ListEvaluationsRequest {
    const message = createBaseListEvaluationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEvaluationsResponse(): ListEvaluationsResponse {
  return { evaluations: [], nextPageToken: "" };
}

export const ListEvaluationsResponse: MessageFns<ListEvaluationsResponse> = {
  encode(message: ListEvaluationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.evaluations) {
      Evaluation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEvaluationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEvaluationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.evaluations.push(Evaluation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEvaluationsResponse {
    return {
      evaluations: globalThis.Array.isArray(object?.evaluations)
        ? object.evaluations.map((e: any) => Evaluation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEvaluationsResponse): unknown {
    const obj: any = {};
    if (message.evaluations?.length) {
      obj.evaluations = message.evaluations.map((e) => Evaluation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEvaluationsResponse>): ListEvaluationsResponse {
    return ListEvaluationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEvaluationsResponse>): ListEvaluationsResponse {
    const message = createBaseListEvaluationsResponse();
    message.evaluations = object.evaluations?.map((e) => Evaluation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Service to call Document AI to process documents according to the
 * processor's definition. Processors are built using state-of-the-art Google
 * AI such as natural language, computer vision, and translation to extract
 * structured information from unstructured or semi-structured documents.
 */
export type DocumentProcessorServiceDefinition = typeof DocumentProcessorServiceDefinition;
export const DocumentProcessorServiceDefinition = {
  name: "DocumentProcessorService",
  fullName: "google.cloud.documentai.v1.DocumentProcessorService",
  methods: {
    /** Processes a single document. */
    processDocument: {
      name: "ProcessDocument",
      requestType: ProcessRequest,
      requestStream: false,
      responseType: ProcessResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              140,
              1,
              58,
              1,
              42,
              90,
              79,
              58,
              1,
              42,
              34,
              74,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              125,
              58,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * LRO endpoint to batch process many documents. The output is written
     * to Cloud Storage as JSON in the [Document] format.
     */
    batchProcessDocuments: {
      name: "BatchProcessDocuments",
      requestType: BatchProcessRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              44,
              10,
              20,
              66,
              97,
              116,
              99,
              104,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              20,
              66,
              97,
              116,
              99,
              104,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              150,
              1,
              58,
              1,
              42,
              90,
              84,
              58,
              1,
              42,
              34,
              79,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              98,
              97,
              116,
              99,
              104,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              125,
              58,
              98,
              97,
              116,
              99,
              104,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Fetches processor types. Note that we don't use
     * [ListProcessorTypes][google.cloud.documentai.v1.DocumentProcessorService.ListProcessorTypes]
     * here, because it isn't paginated.
     */
    fetchProcessorTypes: {
      name: "FetchProcessorTypes",
      requestType: FetchProcessorTypesRequest,
      requestStream: false,
      responseType: FetchProcessorTypesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              102,
              101,
              116,
              99,
              104,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              84,
              121,
              112,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists the processor types that exist. */
    listProcessorTypes: {
      name: "ListProcessorTypes",
      requestType: ListProcessorTypesRequest,
      requestStream: false,
      responseType: ListProcessorTypesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              84,
              121,
              112,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a processor type detail. */
    getProcessorType: {
      name: "GetProcessorType",
      requestType: GetProcessorTypeRequest,
      requestStream: false,
      responseType: ProcessorType,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all processors which belong to this project. */
    listProcessors: {
      name: "ListProcessors",
      requestType: ListProcessorsRequest,
      requestStream: false,
      responseType: ListProcessorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a processor detail. */
    getProcessor: {
      name: "GetProcessor",
      requestType: GetProcessorRequest,
      requestStream: false,
      responseType: Processor,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Trains a new processor version.
     * Operation metadata is returned as
     * [TrainProcessorVersionMetadata][google.cloud.documentai.v1.TrainProcessorVersionMetadata].
     */
    trainProcessorVersion: {
      name: "TrainProcessorVersion",
      requestType: TrainProcessorVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              62,
              10,
              29,
              84,
              114,
              97,
              105,
              110,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              29,
              84,
              114,
              97,
              105,
              110,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              24,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              77,
              58,
              1,
              42,
              34,
              72,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              58,
              116,
              114,
              97,
              105,
              110,
            ]),
          ],
        },
      },
    },
    /** Gets a processor version detail. */
    getProcessorVersion: {
      name: "GetProcessorVersion",
      requestType: GetProcessorVersionRequest,
      requestStream: false,
      responseType: ProcessorVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all versions of a processor. */
    listProcessorVersions: {
      name: "ListProcessorVersions",
      requestType: ListProcessorVersionsRequest,
      requestStream: false,
      responseType: ListProcessorVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the processor version, all artifacts under the processor version
     * will be deleted.
     */
    deleteProcessorVersion: {
      name: "DeleteProcessorVersion",
      requestType: DeleteProcessorVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              55,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              30,
              68,
              101,
              108,
              101,
              116,
              101,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              42,
              66,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deploys the processor version. */
    deployProcessorVersion: {
      name: "DeployProcessorVersion",
      requestType: DeployProcessorVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              64,
              10,
              30,
              68,
              101,
              112,
              108,
              111,
              121,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              30,
              68,
              101,
              112,
              108,
              111,
              121,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              78,
              58,
              1,
              42,
              34,
              73,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              112,
              108,
              111,
              121,
            ]),
          ],
        },
      },
    },
    /** Undeploys the processor version. */
    undeployProcessorVersion: {
      name: "UndeployProcessorVersion",
      requestType: UndeployProcessorVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              68,
              10,
              32,
              85,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              32,
              85,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              80,
              58,
              1,
              42,
              34,
              75,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a processor from the
     * [ProcessorType][google.cloud.documentai.v1.ProcessorType] provided. The
     * processor will be at `ENABLED` state by default after its creation. Note
     * that this method requires the `documentai.processors.create` permission on
     * the project, which is highly privileged. A user or service account with
     * this permission can create new processors that can interact with any gcs
     * bucket in your project.
     */
    createProcessor: {
      name: "CreateProcessor",
      requestType: CreateProcessorRequest,
      requestStream: false,
      responseType: Processor,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 112, 97, 114, 101, 110, 116, 44, 112, 114, 111, 99, 101, 115, 115, 111, 114])],
          578365826: [
            Buffer.from([
              59,
              58,
              9,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the processor, unloads all deployed model artifacts if it was
     * enabled and then deletes all artifacts associated with this processor.
     */
    deleteProcessor: {
      name: "DeleteProcessor",
      requestType: DeleteProcessorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              48,
              42,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Enables a processor */
    enableProcessor: {
      name: "EnableProcessor",
      requestType: EnableProcessorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              50,
              10,
              23,
              69,
              110,
              97,
              98,
              108,
              101,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              23,
              69,
              110,
              97,
              98,
              108,
              101,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              125,
              58,
              101,
              110,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /** Disables a processor */
    disableProcessor: {
      name: "DisableProcessor",
      requestType: DisableProcessorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              52,
              10,
              24,
              68,
              105,
              115,
              97,
              98,
              108,
              101,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              24,
              68,
              105,
              115,
              97,
              98,
              108,
              101,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              125,
              58,
              100,
              105,
              115,
              97,
              98,
              108,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Set the default (active) version of a
     * [Processor][google.cloud.documentai.v1.Processor] that will be used in
     * [ProcessDocument][google.cloud.documentai.v1.DocumentProcessorService.ProcessDocument]
     * and
     * [BatchProcessDocuments][google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments].
     */
    setDefaultProcessorVersion: {
      name: "SetDefaultProcessorVersion",
      requestType: SetDefaultProcessorVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              72,
              10,
              34,
              83,
              101,
              116,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              34,
              83,
              101,
              116,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              1,
              42,
              34,
              78,
              47,
              118,
              49,
              47,
              123,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Send a document for Human Review. The input document should be processed by
     * the specified processor.
     */
    reviewDocument: {
      name: "ReviewDocument",
      requestType: ReviewDocumentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              57,
              10,
              22,
              82,
              101,
              118,
              105,
              101,
              119,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              31,
              82,
              101,
              118,
              105,
              101,
              119,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              19,
              104,
              117,
              109,
              97,
              110,
              95,
              114,
              101,
              118,
              105,
              101,
              119,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              99,
              58,
              1,
              42,
              34,
              94,
              47,
              118,
              49,
              47,
              123,
              104,
              117,
              109,
              97,
              110,
              95,
              114,
              101,
              118,
              105,
              101,
              119,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              47,
              104,
              117,
              109,
              97,
              110,
              82,
              101,
              118,
              105,
              101,
              119,
              67,
              111,
              110,
              102,
              105,
              103,
              125,
              58,
              114,
              101,
              118,
              105,
              101,
              119,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Evaluates a ProcessorVersion against annotated documents, producing an
     * Evaluation.
     */
    evaluateProcessorVersion: {
      name: "EvaluateProcessorVersion",
      requestType: EvaluateProcessorVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              68,
              10,
              32,
              69,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              32,
              69,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 118, 101, 114, 115, 105, 111, 110])],
          578365826: [
            Buffer.from([
              109,
              58,
              1,
              42,
              34,
              104,
              47,
              118,
              49,
              47,
              123,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /** Retrieves a specific evaluation. */
    getEvaluation: {
      name: "GetEvaluation",
      requestType: GetEvaluationRequest,
      requestStream: false,
      responseType: Evaluation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              82,
              18,
              80,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Retrieves a set of evaluations for a given processor version. */
    listEvaluations: {
      name: "ListEvaluations",
      requestType: ListEvaluationsRequest,
      requestStream: false,
      responseType: ListEvaluationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              82,
              18,
              80,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              47,
              42,
              47,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DocumentProcessorServiceImplementation<CallContextExt = {}> {
  /** Processes a single document. */
  processDocument(
    request: ProcessRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ProcessResponse>>;
  /**
   * LRO endpoint to batch process many documents. The output is written
   * to Cloud Storage as JSON in the [Document] format.
   */
  batchProcessDocuments(
    request: BatchProcessRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Fetches processor types. Note that we don't use
   * [ListProcessorTypes][google.cloud.documentai.v1.DocumentProcessorService.ListProcessorTypes]
   * here, because it isn't paginated.
   */
  fetchProcessorTypes(
    request: FetchProcessorTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FetchProcessorTypesResponse>>;
  /** Lists the processor types that exist. */
  listProcessorTypes(
    request: ListProcessorTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProcessorTypesResponse>>;
  /** Gets a processor type detail. */
  getProcessorType(
    request: GetProcessorTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ProcessorType>>;
  /** Lists all processors which belong to this project. */
  listProcessors(
    request: ListProcessorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProcessorsResponse>>;
  /** Gets a processor detail. */
  getProcessor(request: GetProcessorRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Processor>>;
  /**
   * Trains a new processor version.
   * Operation metadata is returned as
   * [TrainProcessorVersionMetadata][google.cloud.documentai.v1.TrainProcessorVersionMetadata].
   */
  trainProcessorVersion(
    request: TrainProcessorVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a processor version detail. */
  getProcessorVersion(
    request: GetProcessorVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ProcessorVersion>>;
  /** Lists all versions of a processor. */
  listProcessorVersions(
    request: ListProcessorVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProcessorVersionsResponse>>;
  /**
   * Deletes the processor version, all artifacts under the processor version
   * will be deleted.
   */
  deleteProcessorVersion(
    request: DeleteProcessorVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deploys the processor version. */
  deployProcessorVersion(
    request: DeployProcessorVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Undeploys the processor version. */
  undeployProcessorVersion(
    request: UndeployProcessorVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Creates a processor from the
   * [ProcessorType][google.cloud.documentai.v1.ProcessorType] provided. The
   * processor will be at `ENABLED` state by default after its creation. Note
   * that this method requires the `documentai.processors.create` permission on
   * the project, which is highly privileged. A user or service account with
   * this permission can create new processors that can interact with any gcs
   * bucket in your project.
   */
  createProcessor(
    request: CreateProcessorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Processor>>;
  /**
   * Deletes the processor, unloads all deployed model artifacts if it was
   * enabled and then deletes all artifacts associated with this processor.
   */
  deleteProcessor(
    request: DeleteProcessorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Enables a processor */
  enableProcessor(
    request: EnableProcessorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Disables a processor */
  disableProcessor(
    request: DisableProcessorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Set the default (active) version of a
   * [Processor][google.cloud.documentai.v1.Processor] that will be used in
   * [ProcessDocument][google.cloud.documentai.v1.DocumentProcessorService.ProcessDocument]
   * and
   * [BatchProcessDocuments][google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments].
   */
  setDefaultProcessorVersion(
    request: SetDefaultProcessorVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Send a document for Human Review. The input document should be processed by
   * the specified processor.
   */
  reviewDocument(
    request: ReviewDocumentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Evaluates a ProcessorVersion against annotated documents, producing an
   * Evaluation.
   */
  evaluateProcessorVersion(
    request: EvaluateProcessorVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Retrieves a specific evaluation. */
  getEvaluation(request: GetEvaluationRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Evaluation>>;
  /** Retrieves a set of evaluations for a given processor version. */
  listEvaluations(
    request: ListEvaluationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEvaluationsResponse>>;
}

export interface DocumentProcessorServiceClient<CallOptionsExt = {}> {
  /** Processes a single document. */
  processDocument(
    request: DeepPartial<ProcessRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ProcessResponse>;
  /**
   * LRO endpoint to batch process many documents. The output is written
   * to Cloud Storage as JSON in the [Document] format.
   */
  batchProcessDocuments(
    request: DeepPartial<BatchProcessRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Fetches processor types. Note that we don't use
   * [ListProcessorTypes][google.cloud.documentai.v1.DocumentProcessorService.ListProcessorTypes]
   * here, because it isn't paginated.
   */
  fetchProcessorTypes(
    request: DeepPartial<FetchProcessorTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FetchProcessorTypesResponse>;
  /** Lists the processor types that exist. */
  listProcessorTypes(
    request: DeepPartial<ListProcessorTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProcessorTypesResponse>;
  /** Gets a processor type detail. */
  getProcessorType(
    request: DeepPartial<GetProcessorTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ProcessorType>;
  /** Lists all processors which belong to this project. */
  listProcessors(
    request: DeepPartial<ListProcessorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProcessorsResponse>;
  /** Gets a processor detail. */
  getProcessor(request: DeepPartial<GetProcessorRequest>, options?: CallOptions & CallOptionsExt): Promise<Processor>;
  /**
   * Trains a new processor version.
   * Operation metadata is returned as
   * [TrainProcessorVersionMetadata][google.cloud.documentai.v1.TrainProcessorVersionMetadata].
   */
  trainProcessorVersion(
    request: DeepPartial<TrainProcessorVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a processor version detail. */
  getProcessorVersion(
    request: DeepPartial<GetProcessorVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ProcessorVersion>;
  /** Lists all versions of a processor. */
  listProcessorVersions(
    request: DeepPartial<ListProcessorVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProcessorVersionsResponse>;
  /**
   * Deletes the processor version, all artifacts under the processor version
   * will be deleted.
   */
  deleteProcessorVersion(
    request: DeepPartial<DeleteProcessorVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deploys the processor version. */
  deployProcessorVersion(
    request: DeepPartial<DeployProcessorVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Undeploys the processor version. */
  undeployProcessorVersion(
    request: DeepPartial<UndeployProcessorVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Creates a processor from the
   * [ProcessorType][google.cloud.documentai.v1.ProcessorType] provided. The
   * processor will be at `ENABLED` state by default after its creation. Note
   * that this method requires the `documentai.processors.create` permission on
   * the project, which is highly privileged. A user or service account with
   * this permission can create new processors that can interact with any gcs
   * bucket in your project.
   */
  createProcessor(
    request: DeepPartial<CreateProcessorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Processor>;
  /**
   * Deletes the processor, unloads all deployed model artifacts if it was
   * enabled and then deletes all artifacts associated with this processor.
   */
  deleteProcessor(
    request: DeepPartial<DeleteProcessorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Enables a processor */
  enableProcessor(
    request: DeepPartial<EnableProcessorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Disables a processor */
  disableProcessor(
    request: DeepPartial<DisableProcessorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Set the default (active) version of a
   * [Processor][google.cloud.documentai.v1.Processor] that will be used in
   * [ProcessDocument][google.cloud.documentai.v1.DocumentProcessorService.ProcessDocument]
   * and
   * [BatchProcessDocuments][google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments].
   */
  setDefaultProcessorVersion(
    request: DeepPartial<SetDefaultProcessorVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Send a document for Human Review. The input document should be processed by
   * the specified processor.
   */
  reviewDocument(
    request: DeepPartial<ReviewDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Evaluates a ProcessorVersion against annotated documents, producing an
   * Evaluation.
   */
  evaluateProcessorVersion(
    request: DeepPartial<EvaluateProcessorVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Retrieves a specific evaluation. */
  getEvaluation(
    request: DeepPartial<GetEvaluationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Evaluation>;
  /** Retrieves a set of evaluations for a given processor version. */
  listEvaluations(
    request: DeepPartial<ListEvaluationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEvaluationsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
