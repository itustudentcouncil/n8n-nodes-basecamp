// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkeconnect/gateway/v1/control.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "google.cloud.gkeconnect.gateway.v1";

/** A request for connection information for a particular membership. */
export interface GenerateCredentialsRequest {
  /** Required. The Fleet membership resource. */
  name: string;
  /**
   * Optional. Whether to force the use of Connect Agent-based transport.
   *
   * This will return a configuration that uses Connect Agent as the underlying
   * transport mechanism for cluster types that would otherwise have used a
   * different transport. Requires that Connect Agent be installed on the
   * cluster. Setting this field to false is equivalent to not setting it.
   */
  forceUseAgent: boolean;
  /**
   * Optional. The Connect Gateway version to be used in the resulting
   * configuration.
   *
   * Leave this field blank to let the server choose the version (recommended).
   */
  version: string;
  /**
   * Optional. The namespace to use in the kubeconfig context.
   *
   * If this field is specified, the server will set the `namespace` field in
   * kubeconfig context. If not specified, the `namespace` field is omitted.
   */
  kubernetesNamespace: string;
  /** Optional. The operating system where the kubeconfig will be used. */
  operatingSystem: GenerateCredentialsRequest_OperatingSystem;
}

/** Operating systems requiring specialized kubeconfigs. */
export enum GenerateCredentialsRequest_OperatingSystem {
  /**
   * OPERATING_SYSTEM_UNSPECIFIED - Generates a kubeconfig that works for all operating systems not defined
   * below.
   */
  OPERATING_SYSTEM_UNSPECIFIED = 0,
  /**
   * OPERATING_SYSTEM_WINDOWS - Generates a kubeconfig that is specifically designed to work with
   * Windows.
   */
  OPERATING_SYSTEM_WINDOWS = 1,
  UNRECOGNIZED = -1,
}

export function generateCredentialsRequest_OperatingSystemFromJSON(
  object: any,
): GenerateCredentialsRequest_OperatingSystem {
  switch (object) {
    case 0:
    case "OPERATING_SYSTEM_UNSPECIFIED":
      return GenerateCredentialsRequest_OperatingSystem.OPERATING_SYSTEM_UNSPECIFIED;
    case 1:
    case "OPERATING_SYSTEM_WINDOWS":
      return GenerateCredentialsRequest_OperatingSystem.OPERATING_SYSTEM_WINDOWS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GenerateCredentialsRequest_OperatingSystem.UNRECOGNIZED;
  }
}

export function generateCredentialsRequest_OperatingSystemToJSON(
  object: GenerateCredentialsRequest_OperatingSystem,
): string {
  switch (object) {
    case GenerateCredentialsRequest_OperatingSystem.OPERATING_SYSTEM_UNSPECIFIED:
      return "OPERATING_SYSTEM_UNSPECIFIED";
    case GenerateCredentialsRequest_OperatingSystem.OPERATING_SYSTEM_WINDOWS:
      return "OPERATING_SYSTEM_WINDOWS";
    case GenerateCredentialsRequest_OperatingSystem.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Connection information for a particular membership. */
export interface GenerateCredentialsResponse {
  /** A full YAML kubeconfig in serialized format. */
  kubeconfig: Buffer;
  /**
   * The generated URI of the cluster as accessed through the Connect Gateway
   * API.
   */
  endpoint: string;
}

function createBaseGenerateCredentialsRequest(): GenerateCredentialsRequest {
  return { name: "", forceUseAgent: false, version: "", kubernetesNamespace: "", operatingSystem: 0 };
}

export const GenerateCredentialsRequest: MessageFns<GenerateCredentialsRequest> = {
  encode(message: GenerateCredentialsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.forceUseAgent !== false) {
      writer.uint32(16).bool(message.forceUseAgent);
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.kubernetesNamespace !== "") {
      writer.uint32(34).string(message.kubernetesNamespace);
    }
    if (message.operatingSystem !== 0) {
      writer.uint32(40).int32(message.operatingSystem);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateCredentialsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateCredentialsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.forceUseAgent = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.kubernetesNamespace = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.operatingSystem = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateCredentialsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      forceUseAgent: isSet(object.forceUseAgent) ? globalThis.Boolean(object.forceUseAgent) : false,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      kubernetesNamespace: isSet(object.kubernetesNamespace) ? globalThis.String(object.kubernetesNamespace) : "",
      operatingSystem: isSet(object.operatingSystem)
        ? generateCredentialsRequest_OperatingSystemFromJSON(object.operatingSystem)
        : 0,
    };
  },

  toJSON(message: GenerateCredentialsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.forceUseAgent !== false) {
      obj.forceUseAgent = message.forceUseAgent;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.kubernetesNamespace !== "") {
      obj.kubernetesNamespace = message.kubernetesNamespace;
    }
    if (message.operatingSystem !== 0) {
      obj.operatingSystem = generateCredentialsRequest_OperatingSystemToJSON(message.operatingSystem);
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateCredentialsRequest>): GenerateCredentialsRequest {
    return GenerateCredentialsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateCredentialsRequest>): GenerateCredentialsRequest {
    const message = createBaseGenerateCredentialsRequest();
    message.name = object.name ?? "";
    message.forceUseAgent = object.forceUseAgent ?? false;
    message.version = object.version ?? "";
    message.kubernetesNamespace = object.kubernetesNamespace ?? "";
    message.operatingSystem = object.operatingSystem ?? 0;
    return message;
  },
};

function createBaseGenerateCredentialsResponse(): GenerateCredentialsResponse {
  return { kubeconfig: Buffer.alloc(0), endpoint: "" };
}

export const GenerateCredentialsResponse: MessageFns<GenerateCredentialsResponse> = {
  encode(message: GenerateCredentialsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kubeconfig.length !== 0) {
      writer.uint32(10).bytes(message.kubeconfig);
    }
    if (message.endpoint !== "") {
      writer.uint32(18).string(message.endpoint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateCredentialsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateCredentialsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kubeconfig = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endpoint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateCredentialsResponse {
    return {
      kubeconfig: isSet(object.kubeconfig) ? Buffer.from(bytesFromBase64(object.kubeconfig)) : Buffer.alloc(0),
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
    };
  },

  toJSON(message: GenerateCredentialsResponse): unknown {
    const obj: any = {};
    if (message.kubeconfig.length !== 0) {
      obj.kubeconfig = base64FromBytes(message.kubeconfig);
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateCredentialsResponse>): GenerateCredentialsResponse {
    return GenerateCredentialsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateCredentialsResponse>): GenerateCredentialsResponse {
    const message = createBaseGenerateCredentialsResponse();
    message.kubeconfig = object.kubeconfig ?? Buffer.alloc(0);
    message.endpoint = object.endpoint ?? "";
    return message;
  },
};

/** GatewayControl is the control plane API for Connect Gateway. */
export type GatewayControlDefinition = typeof GatewayControlDefinition;
export const GatewayControlDefinition = {
  name: "GatewayControl",
  fullName: "google.cloud.gkeconnect.gateway.v1.GatewayControl",
  methods: {
    /**
     * GenerateCredentials provides connection information that allows a user to
     * access the specified membership using Connect Gateway.
     */
    generateCredentials: {
      name: "GenerateCredentials",
      requestType: GenerateCredentialsRequest,
      requestStream: false,
      responseType: GenerateCredentialsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              67,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface GatewayControlServiceImplementation<CallContextExt = {}> {
  /**
   * GenerateCredentials provides connection information that allows a user to
   * access the specified membership using Connect Gateway.
   */
  generateCredentials(
    request: GenerateCredentialsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateCredentialsResponse>>;
}

export interface GatewayControlClient<CallOptionsExt = {}> {
  /**
   * GenerateCredentials provides connection information that allows a user to
   * access the specified membership using Connect Gateway.
   */
  generateCredentials(
    request: DeepPartial<GenerateCredentialsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateCredentialsResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
