// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/billing/v1/cloud_billing.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { FieldMask } from "../../../protobuf/field_mask.js";

export const protobufPackage = "google.cloud.billing.v1";

/**
 * A billing account in the
 * [Google Cloud Console](https://console.cloud.google.com/). You can assign a
 * billing account to one or more projects.
 */
export interface BillingAccount {
  /**
   * Output only. The resource name of the billing account. The resource name
   * has the form `billingAccounts/{billing_account_id}`. For example,
   * `billingAccounts/012345-567890-ABCDEF` would be the resource name for
   * billing account `012345-567890-ABCDEF`.
   */
  name: string;
  /**
   * Output only. True if the billing account is open, and will therefore be
   * charged for any usage on associated projects. False if the billing account
   * is closed, and therefore projects associated with it are unable to use paid
   * services.
   */
  open: boolean;
  /**
   * The display name given to the billing account, such as `My Billing
   * Account`. This name is displayed in the Google Cloud Console.
   */
  displayName: string;
  /**
   * If this account is a
   * [subaccount](https://cloud.google.com/billing/docs/concepts), then this
   * will be the resource name of the parent billing account that it is being
   * resold through.
   * Otherwise this will be empty.
   */
  masterBillingAccount: string;
  /**
   * Output only. The billing account's parent resource identifier.
   * Use the `MoveBillingAccount` method to update the account's parent resource
   * if it is a organization.
   * Format:
   *   - `organizations/{organization_id}`, for example,
   *     `organizations/12345678`
   *   - `billingAccounts/{billing_account_id}`, for example,
   *     `billingAccounts/012345-567890-ABCDEF`
   */
  parent: string;
}

/**
 * Encapsulation of billing information for a Google Cloud Console project. A
 * project has at most one associated billing account at a time (but a billing
 * account can be assigned to multiple projects).
 */
export interface ProjectBillingInfo {
  /**
   * Output only. The resource name for the `ProjectBillingInfo`; has the form
   * `projects/{project_id}/billingInfo`. For example, the resource name for the
   * billing information for project `tokyo-rain-123` would be
   * `projects/tokyo-rain-123/billingInfo`.
   */
  name: string;
  /**
   * Output only. The ID of the project that this `ProjectBillingInfo`
   * represents, such as `tokyo-rain-123`. This is a convenience field so that
   * you don't need to parse the `name` field to obtain a project ID.
   */
  projectId: string;
  /**
   * The resource name of the billing account associated with the project, if
   * any. For example, `billingAccounts/012345-567890-ABCDEF`.
   */
  billingAccountName: string;
  /**
   * Output only. True if the project is associated with an open billing
   * account, to which usage on the project is charged. False if the project is
   * associated with a closed billing account, or no billing account at all, and
   * therefore cannot use paid services.
   */
  billingEnabled: boolean;
}

/** Request message for `GetBillingAccount`. */
export interface GetBillingAccountRequest {
  /**
   * Required. The resource name of the billing account to retrieve. For
   * example, `billingAccounts/012345-567890-ABCDEF`.
   */
  name: string;
}

/** Request message for `ListBillingAccounts`. */
export interface ListBillingAccountsRequest {
  /**
   * Requested page size. The maximum page size is 100; this is also the
   * default.
   */
  pageSize: number;
  /**
   * A token identifying a page of results to return. This should be a
   * `next_page_token` value returned from a previous `ListBillingAccounts`
   * call. If unspecified, the first page of results is returned.
   */
  pageToken: string;
  /**
   * Options for how to filter the returned billing accounts.
   * This only supports filtering for
   * [subaccounts](https://cloud.google.com/billing/docs/concepts) under a
   * single provided parent billing account.
   * (for example,
   * `master_billing_account=billingAccounts/012345-678901-ABCDEF`).
   * Boolean algebra and other fields are not currently supported.
   */
  filter: string;
  /**
   * Optional. The parent resource to list billing accounts from.
   * Format:
   *   - `organizations/{organization_id}`, for example,
   *     `organizations/12345678`
   *   - `billingAccounts/{billing_account_id}`, for example,
   *     `billingAccounts/012345-567890-ABCDEF`
   */
  parent: string;
}

/** Response message for `ListBillingAccounts`. */
export interface ListBillingAccountsResponse {
  /** A list of billing accounts. */
  billingAccounts: BillingAccount[];
  /**
   * A token to retrieve the next page of results. To retrieve the next page,
   * call `ListBillingAccounts` again with the `page_token` field set to this
   * value. This field is empty if there are no more results to retrieve.
   */
  nextPageToken: string;
}

/** Request message for `CreateBillingAccount`. */
export interface CreateBillingAccountRequest {
  /**
   * Required. The billing account resource to create.
   * Currently CreateBillingAccount only supports subaccount creation, so
   * any created billing accounts must be under a provided parent billing
   * account.
   */
  billingAccount:
    | BillingAccount
    | undefined;
  /**
   * Optional. The parent to create a billing account from.
   * Format:
   *   - `billingAccounts/{billing_account_id}`, for example,
   *      `billingAccounts/012345-567890-ABCDEF`
   */
  parent: string;
}

/** Request message for `UpdateBillingAccount`. */
export interface UpdateBillingAccountRequest {
  /** Required. The name of the billing account resource to be updated. */
  name: string;
  /**
   * Required. The billing account resource to replace the resource on the
   * server.
   */
  account:
    | BillingAccount
    | undefined;
  /**
   * The update mask applied to the resource.
   * Only "display_name" is currently supported.
   */
  updateMask: string[] | undefined;
}

/** Request message for `ListProjectBillingInfo`. */
export interface ListProjectBillingInfoRequest {
  /**
   * Required. The resource name of the billing account associated with the
   * projects that you want to list. For example,
   * `billingAccounts/012345-567890-ABCDEF`.
   */
  name: string;
  /**
   * Requested page size. The maximum page size is 100; this is also the
   * default.
   */
  pageSize: number;
  /**
   * A token identifying a page of results to be returned. This should be a
   * `next_page_token` value returned from a previous `ListProjectBillingInfo`
   * call. If unspecified, the first page of results is returned.
   */
  pageToken: string;
}

/** Request message for `ListProjectBillingInfoResponse`. */
export interface ListProjectBillingInfoResponse {
  /**
   * A list of `ProjectBillingInfo` resources representing the projects
   * associated with the billing account.
   */
  projectBillingInfo: ProjectBillingInfo[];
  /**
   * A token to retrieve the next page of results. To retrieve the next page,
   * call `ListProjectBillingInfo` again with the `page_token` field set to this
   * value. This field is empty if there are no more results to retrieve.
   */
  nextPageToken: string;
}

/** Request message for `GetProjectBillingInfo`. */
export interface GetProjectBillingInfoRequest {
  /**
   * Required. The resource name of the project for which billing information is
   * retrieved. For example, `projects/tokyo-rain-123`.
   */
  name: string;
}

/** Request message for `UpdateProjectBillingInfo`. */
export interface UpdateProjectBillingInfoRequest {
  /**
   * Required. The resource name of the project associated with the billing
   * information that you want to update. For example,
   * `projects/tokyo-rain-123`.
   */
  name: string;
  /**
   * The new billing information for the project. Output-only fields are
   * ignored; thus, you can leave empty all fields except
   * `billing_account_name`.
   */
  projectBillingInfo: ProjectBillingInfo | undefined;
}

/** Request message for `MoveBillingAccount` RPC. */
export interface MoveBillingAccountRequest {
  /**
   * Required. The resource name of the billing account to move.
   * Must be of the form `billingAccounts/{billing_account_id}`.
   * The specified billing account cannot be a subaccount, since a subaccount
   * always belongs to the same organization as its parent account.
   */
  name: string;
  /**
   * Required. The resource name of the Organization to move
   * the billing account under.
   * Must be of the form `organizations/{organization_id}`.
   */
  destinationParent: string;
}

function createBaseBillingAccount(): BillingAccount {
  return { name: "", open: false, displayName: "", masterBillingAccount: "", parent: "" };
}

export const BillingAccount: MessageFns<BillingAccount> = {
  encode(message: BillingAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.open !== false) {
      writer.uint32(16).bool(message.open);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.masterBillingAccount !== "") {
      writer.uint32(34).string(message.masterBillingAccount);
    }
    if (message.parent !== "") {
      writer.uint32(50).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BillingAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBillingAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.open = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.masterBillingAccount = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BillingAccount {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      open: isSet(object.open) ? globalThis.Boolean(object.open) : false,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      masterBillingAccount: isSet(object.masterBillingAccount) ? globalThis.String(object.masterBillingAccount) : "",
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: BillingAccount): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.open !== false) {
      obj.open = message.open;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.masterBillingAccount !== "") {
      obj.masterBillingAccount = message.masterBillingAccount;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<BillingAccount>): BillingAccount {
    return BillingAccount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BillingAccount>): BillingAccount {
    const message = createBaseBillingAccount();
    message.name = object.name ?? "";
    message.open = object.open ?? false;
    message.displayName = object.displayName ?? "";
    message.masterBillingAccount = object.masterBillingAccount ?? "";
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseProjectBillingInfo(): ProjectBillingInfo {
  return { name: "", projectId: "", billingAccountName: "", billingEnabled: false };
}

export const ProjectBillingInfo: MessageFns<ProjectBillingInfo> = {
  encode(message: ProjectBillingInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.billingAccountName !== "") {
      writer.uint32(26).string(message.billingAccountName);
    }
    if (message.billingEnabled !== false) {
      writer.uint32(32).bool(message.billingEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProjectBillingInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProjectBillingInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.billingAccountName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.billingEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProjectBillingInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      billingAccountName: isSet(object.billingAccountName) ? globalThis.String(object.billingAccountName) : "",
      billingEnabled: isSet(object.billingEnabled) ? globalThis.Boolean(object.billingEnabled) : false,
    };
  },

  toJSON(message: ProjectBillingInfo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.billingAccountName !== "") {
      obj.billingAccountName = message.billingAccountName;
    }
    if (message.billingEnabled !== false) {
      obj.billingEnabled = message.billingEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<ProjectBillingInfo>): ProjectBillingInfo {
    return ProjectBillingInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProjectBillingInfo>): ProjectBillingInfo {
    const message = createBaseProjectBillingInfo();
    message.name = object.name ?? "";
    message.projectId = object.projectId ?? "";
    message.billingAccountName = object.billingAccountName ?? "";
    message.billingEnabled = object.billingEnabled ?? false;
    return message;
  },
};

function createBaseGetBillingAccountRequest(): GetBillingAccountRequest {
  return { name: "" };
}

export const GetBillingAccountRequest: MessageFns<GetBillingAccountRequest> = {
  encode(message: GetBillingAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBillingAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBillingAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBillingAccountRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBillingAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBillingAccountRequest>): GetBillingAccountRequest {
    return GetBillingAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBillingAccountRequest>): GetBillingAccountRequest {
    const message = createBaseGetBillingAccountRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListBillingAccountsRequest(): ListBillingAccountsRequest {
  return { pageSize: 0, pageToken: "", filter: "", parent: "" };
}

export const ListBillingAccountsRequest: MessageFns<ListBillingAccountsRequest> = {
  encode(message: ListBillingAccountsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.parent !== "") {
      writer.uint32(34).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBillingAccountsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBillingAccountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBillingAccountsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: ListBillingAccountsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBillingAccountsRequest>): ListBillingAccountsRequest {
    return ListBillingAccountsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBillingAccountsRequest>): ListBillingAccountsRequest {
    const message = createBaseListBillingAccountsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseListBillingAccountsResponse(): ListBillingAccountsResponse {
  return { billingAccounts: [], nextPageToken: "" };
}

export const ListBillingAccountsResponse: MessageFns<ListBillingAccountsResponse> = {
  encode(message: ListBillingAccountsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.billingAccounts) {
      BillingAccount.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBillingAccountsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBillingAccountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.billingAccounts.push(BillingAccount.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBillingAccountsResponse {
    return {
      billingAccounts: globalThis.Array.isArray(object?.billingAccounts)
        ? object.billingAccounts.map((e: any) => BillingAccount.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListBillingAccountsResponse): unknown {
    const obj: any = {};
    if (message.billingAccounts?.length) {
      obj.billingAccounts = message.billingAccounts.map((e) => BillingAccount.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBillingAccountsResponse>): ListBillingAccountsResponse {
    return ListBillingAccountsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBillingAccountsResponse>): ListBillingAccountsResponse {
    const message = createBaseListBillingAccountsResponse();
    message.billingAccounts = object.billingAccounts?.map((e) => BillingAccount.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateBillingAccountRequest(): CreateBillingAccountRequest {
  return { billingAccount: undefined, parent: "" };
}

export const CreateBillingAccountRequest: MessageFns<CreateBillingAccountRequest> = {
  encode(message: CreateBillingAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.billingAccount !== undefined) {
      BillingAccount.encode(message.billingAccount, writer.uint32(10).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBillingAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBillingAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.billingAccount = BillingAccount.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBillingAccountRequest {
    return {
      billingAccount: isSet(object.billingAccount) ? BillingAccount.fromJSON(object.billingAccount) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
    };
  },

  toJSON(message: CreateBillingAccountRequest): unknown {
    const obj: any = {};
    if (message.billingAccount !== undefined) {
      obj.billingAccount = BillingAccount.toJSON(message.billingAccount);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBillingAccountRequest>): CreateBillingAccountRequest {
    return CreateBillingAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBillingAccountRequest>): CreateBillingAccountRequest {
    const message = createBaseCreateBillingAccountRequest();
    message.billingAccount = (object.billingAccount !== undefined && object.billingAccount !== null)
      ? BillingAccount.fromPartial(object.billingAccount)
      : undefined;
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseUpdateBillingAccountRequest(): UpdateBillingAccountRequest {
  return { name: "", account: undefined, updateMask: undefined };
}

export const UpdateBillingAccountRequest: MessageFns<UpdateBillingAccountRequest> = {
  encode(message: UpdateBillingAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.account !== undefined) {
      BillingAccount.encode(message.account, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBillingAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBillingAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.account = BillingAccount.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBillingAccountRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      account: isSet(object.account) ? BillingAccount.fromJSON(object.account) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateBillingAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.account !== undefined) {
      obj.account = BillingAccount.toJSON(message.account);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBillingAccountRequest>): UpdateBillingAccountRequest {
    return UpdateBillingAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBillingAccountRequest>): UpdateBillingAccountRequest {
    const message = createBaseUpdateBillingAccountRequest();
    message.name = object.name ?? "";
    message.account = (object.account !== undefined && object.account !== null)
      ? BillingAccount.fromPartial(object.account)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListProjectBillingInfoRequest(): ListProjectBillingInfoRequest {
  return { name: "", pageSize: 0, pageToken: "" };
}

export const ListProjectBillingInfoRequest: MessageFns<ListProjectBillingInfoRequest> = {
  encode(message: ListProjectBillingInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProjectBillingInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectBillingInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectBillingInfoRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListProjectBillingInfoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProjectBillingInfoRequest>): ListProjectBillingInfoRequest {
    return ListProjectBillingInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectBillingInfoRequest>): ListProjectBillingInfoRequest {
    const message = createBaseListProjectBillingInfoRequest();
    message.name = object.name ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListProjectBillingInfoResponse(): ListProjectBillingInfoResponse {
  return { projectBillingInfo: [], nextPageToken: "" };
}

export const ListProjectBillingInfoResponse: MessageFns<ListProjectBillingInfoResponse> = {
  encode(message: ListProjectBillingInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.projectBillingInfo) {
      ProjectBillingInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProjectBillingInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectBillingInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectBillingInfo.push(ProjectBillingInfo.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProjectBillingInfoResponse {
    return {
      projectBillingInfo: globalThis.Array.isArray(object?.projectBillingInfo)
        ? object.projectBillingInfo.map((e: any) => ProjectBillingInfo.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListProjectBillingInfoResponse): unknown {
    const obj: any = {};
    if (message.projectBillingInfo?.length) {
      obj.projectBillingInfo = message.projectBillingInfo.map((e) => ProjectBillingInfo.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProjectBillingInfoResponse>): ListProjectBillingInfoResponse {
    return ListProjectBillingInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectBillingInfoResponse>): ListProjectBillingInfoResponse {
    const message = createBaseListProjectBillingInfoResponse();
    message.projectBillingInfo = object.projectBillingInfo?.map((e) => ProjectBillingInfo.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetProjectBillingInfoRequest(): GetProjectBillingInfoRequest {
  return { name: "" };
}

export const GetProjectBillingInfoRequest: MessageFns<GetProjectBillingInfoRequest> = {
  encode(message: GetProjectBillingInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProjectBillingInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectBillingInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProjectBillingInfoRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetProjectBillingInfoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProjectBillingInfoRequest>): GetProjectBillingInfoRequest {
    return GetProjectBillingInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProjectBillingInfoRequest>): GetProjectBillingInfoRequest {
    const message = createBaseGetProjectBillingInfoRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateProjectBillingInfoRequest(): UpdateProjectBillingInfoRequest {
  return { name: "", projectBillingInfo: undefined };
}

export const UpdateProjectBillingInfoRequest: MessageFns<UpdateProjectBillingInfoRequest> = {
  encode(message: UpdateProjectBillingInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.projectBillingInfo !== undefined) {
      ProjectBillingInfo.encode(message.projectBillingInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProjectBillingInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectBillingInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectBillingInfo = ProjectBillingInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectBillingInfoRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      projectBillingInfo: isSet(object.projectBillingInfo)
        ? ProjectBillingInfo.fromJSON(object.projectBillingInfo)
        : undefined,
    };
  },

  toJSON(message: UpdateProjectBillingInfoRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projectBillingInfo !== undefined) {
      obj.projectBillingInfo = ProjectBillingInfo.toJSON(message.projectBillingInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateProjectBillingInfoRequest>): UpdateProjectBillingInfoRequest {
    return UpdateProjectBillingInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectBillingInfoRequest>): UpdateProjectBillingInfoRequest {
    const message = createBaseUpdateProjectBillingInfoRequest();
    message.name = object.name ?? "";
    message.projectBillingInfo = (object.projectBillingInfo !== undefined && object.projectBillingInfo !== null)
      ? ProjectBillingInfo.fromPartial(object.projectBillingInfo)
      : undefined;
    return message;
  },
};

function createBaseMoveBillingAccountRequest(): MoveBillingAccountRequest {
  return { name: "", destinationParent: "" };
}

export const MoveBillingAccountRequest: MessageFns<MoveBillingAccountRequest> = {
  encode(message: MoveBillingAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.destinationParent !== "") {
      writer.uint32(18).string(message.destinationParent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoveBillingAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoveBillingAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationParent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoveBillingAccountRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      destinationParent: isSet(object.destinationParent) ? globalThis.String(object.destinationParent) : "",
    };
  },

  toJSON(message: MoveBillingAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.destinationParent !== "") {
      obj.destinationParent = message.destinationParent;
    }
    return obj;
  },

  create(base?: DeepPartial<MoveBillingAccountRequest>): MoveBillingAccountRequest {
    return MoveBillingAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MoveBillingAccountRequest>): MoveBillingAccountRequest {
    const message = createBaseMoveBillingAccountRequest();
    message.name = object.name ?? "";
    message.destinationParent = object.destinationParent ?? "";
    return message;
  },
};

/**
 * Retrieves the Google Cloud Console billing accounts and associates them with
 * projects.
 */
export type CloudBillingDefinition = typeof CloudBillingDefinition;
export const CloudBillingDefinition = {
  name: "CloudBilling",
  fullName: "google.cloud.billing.v1.CloudBilling",
  methods: {
    /**
     * Gets information about a billing account. The current authenticated user
     * must be a [viewer of the billing
     * account](https://cloud.google.com/billing/docs/how-to/billing-access).
     */
    getBillingAccount: {
      name: "GetBillingAccount",
      requestType: GetBillingAccountRequest,
      requestStream: false,
      responseType: BillingAccount,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              30,
              18,
              28,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the billing accounts that the current authenticated user has
     * permission to
     * [view](https://cloud.google.com/billing/docs/how-to/billing-access).
     */
    listBillingAccounts: {
      name: "ListBillingAccounts",
      requestType: ListBillingAccountsRequest,
      requestStream: false,
      responseType: ListBillingAccountsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([0]), Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              115,
              90,
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              90,
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              117,
              98,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              18,
              19,
              47,
              118,
              49,
              47,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a billing account's fields.
     * Currently the only field that can be edited is `display_name`.
     * The current authenticated user must have the `billing.accounts.update`
     * IAM permission, which is typically given to the
     * [administrator](https://cloud.google.com/billing/docs/how-to/billing-access)
     * of the billing account.
     */
    updateBillingAccount: {
      name: "UpdateBillingAccount",
      requestType: UpdateBillingAccountRequest,
      requestStream: false,
      responseType: BillingAccount,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 110, 97, 109, 101, 44, 97, 99, 99, 111, 117, 110, 116])],
          578365826: [
            Buffer.from([
              39,
              58,
              7,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              50,
              28,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * This method creates [billing
     * subaccounts](https://cloud.google.com/billing/docs/concepts#subaccounts).
     *
     * Google Cloud resellers should use the
     * Channel Services APIs,
     * [accounts.customers.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers/create)
     * and
     * [accounts.customers.entitlements.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers.entitlements/create).
     *
     * When creating a subaccount, the current authenticated user must have the
     * `billing.accounts.update` IAM permission on the parent account, which is
     * typically given to billing account
     * [administrators](https://cloud.google.com/billing/docs/how-to/billing-access).
     * This method will return an error if the parent account has not been
     * provisioned for subaccounts.
     */
    createBillingAccount: {
      name: "CreateBillingAccount",
      requestType: CreateBillingAccountRequest,
      requestStream: false,
      responseType: BillingAccount,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([15, 98, 105, 108, 108, 105, 110, 103, 95, 97, 99, 99, 111, 117, 110, 116]),
            Buffer.from([
              22,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              95,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              44,
              112,
              97,
              114,
              101,
              110,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              166,
              1,
              58,
              15,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              95,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              90,
              63,
              58,
              15,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              95,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              90,
              61,
              58,
              15,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              95,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              42,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              117,
              98,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              19,
              47,
              118,
              49,
              47,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the projects associated with a billing account. The current
     * authenticated user must have the `billing.resourceAssociations.list` IAM
     * permission, which is often given to billing account
     * [viewers](https://cloud.google.com/billing/docs/how-to/billing-access).
     */
    listProjectBillingInfo: {
      name: "ListProjectBillingInfo",
      requestType: ListProjectBillingInfoRequest,
      requestStream: false,
      responseType: ListProjectBillingInfoResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the billing information for a project. The current authenticated user
     * must have the `resourcemanager.projects.get` permission for the project,
     * which can be granted by assigning the [Project
     * Viewer](https://cloud.google.com/iam/docs/understanding-roles#predefined_roles)
     * role.
     */
    getProjectBillingInfo: {
      name: "GetProjectBillingInfo",
      requestType: GetProjectBillingInfoRequest,
      requestStream: false,
      responseType: ProjectBillingInfo,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              35,
              18,
              33,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              73,
              110,
              102,
              111,
            ]),
          ],
        },
      },
    },
    /**
     * Sets or updates the billing account associated with a project. You specify
     * the new billing account by setting the `billing_account_name` in the
     * `ProjectBillingInfo` resource to the resource name of a billing account.
     * Associating a project with an open billing account enables billing on the
     * project and allows charges for resource usage. If the project already had a
     * billing account, this method changes the billing account used for resource
     * usage charges.
     *
     * *Note:* Incurred charges that have not yet been reported in the transaction
     * history of the Google Cloud Console might be billed to the new billing
     * account, even if the charge occurred before the new billing account was
     * assigned to the project.
     *
     * The current authenticated user must have ownership privileges for both
     * the
     * [project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo
     * ) and the [billing
     * account](https://cloud.google.com/billing/docs/how-to/billing-access).
     *
     * You can disable billing on the project by setting the
     * `billing_account_name` field to empty. This action disassociates the
     * current billing account from the project. Any billable activity of your
     * in-use services will stop, and your application could stop functioning as
     * expected. Any unbilled charges to date will be billed to the previously
     * associated account. The current authenticated user must be either an owner
     * of the project or an owner of the billing account for the project.
     *
     * Note that associating a project with a *closed* billing account will have
     * much the same effect as disabling billing on the project: any paid
     * resources used by the project will be shut down. Thus, unless you wish to
     * disable billing, you should always call this method with the name of an
     * *open* billing account.
     */
    updateProjectBillingInfo: {
      name: "UpdateProjectBillingInfo",
      requestType: UpdateProjectBillingInfoRequest,
      requestStream: false,
      responseType: ProjectBillingInfo,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              110,
              97,
              109,
              101,
              44,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              95,
              105,
              110,
              102,
              111,
            ]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              20,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              95,
              105,
              110,
              102,
              111,
              26,
              33,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              73,
              110,
              102,
              111,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a billing account.
     * The caller must have the `billing.accounts.getIamPolicy` permission on the
     * account, which is often given to billing account
     * [viewers](https://cloud.google.com/billing/docs/how-to/billing-access).
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              47,
              18,
              45,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the access control policy for a billing account. Replaces any existing
     * policy.
     * The caller must have the `billing.accounts.setIamPolicy` permission on the
     * account, which is often given to billing account
     * [administrators](https://cloud.google.com/billing/docs/how-to/billing-access).
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 114, 101, 115, 111, 117, 114, 99, 101, 44, 112, 111, 108, 105, 99, 121])],
          578365826: [
            Buffer.from([
              50,
              58,
              1,
              42,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Tests the access control policy for a billing account. This method takes
     * the resource and a set of permissions as input and returns the subset of
     * the input permissions that the caller is allowed for that resource.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Changes which parent organization a billing account belongs to. */
    moveBillingAccount: {
      name: "MoveBillingAccount",
      requestType: MoveBillingAccountRequest,
      requestStream: false,
      responseType: BillingAccount,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              112,
              58,
              1,
              42,
              90,
              72,
              18,
              70,
              47,
              118,
              49,
              47,
              123,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              95,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              109,
              111,
              118,
              101,
              34,
              33,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              109,
              111,
              118,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CloudBillingServiceImplementation<CallContextExt = {}> {
  /**
   * Gets information about a billing account. The current authenticated user
   * must be a [viewer of the billing
   * account](https://cloud.google.com/billing/docs/how-to/billing-access).
   */
  getBillingAccount(
    request: GetBillingAccountRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BillingAccount>>;
  /**
   * Lists the billing accounts that the current authenticated user has
   * permission to
   * [view](https://cloud.google.com/billing/docs/how-to/billing-access).
   */
  listBillingAccounts(
    request: ListBillingAccountsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBillingAccountsResponse>>;
  /**
   * Updates a billing account's fields.
   * Currently the only field that can be edited is `display_name`.
   * The current authenticated user must have the `billing.accounts.update`
   * IAM permission, which is typically given to the
   * [administrator](https://cloud.google.com/billing/docs/how-to/billing-access)
   * of the billing account.
   */
  updateBillingAccount(
    request: UpdateBillingAccountRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BillingAccount>>;
  /**
   * This method creates [billing
   * subaccounts](https://cloud.google.com/billing/docs/concepts#subaccounts).
   *
   * Google Cloud resellers should use the
   * Channel Services APIs,
   * [accounts.customers.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers/create)
   * and
   * [accounts.customers.entitlements.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers.entitlements/create).
   *
   * When creating a subaccount, the current authenticated user must have the
   * `billing.accounts.update` IAM permission on the parent account, which is
   * typically given to billing account
   * [administrators](https://cloud.google.com/billing/docs/how-to/billing-access).
   * This method will return an error if the parent account has not been
   * provisioned for subaccounts.
   */
  createBillingAccount(
    request: CreateBillingAccountRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BillingAccount>>;
  /**
   * Lists the projects associated with a billing account. The current
   * authenticated user must have the `billing.resourceAssociations.list` IAM
   * permission, which is often given to billing account
   * [viewers](https://cloud.google.com/billing/docs/how-to/billing-access).
   */
  listProjectBillingInfo(
    request: ListProjectBillingInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectBillingInfoResponse>>;
  /**
   * Gets the billing information for a project. The current authenticated user
   * must have the `resourcemanager.projects.get` permission for the project,
   * which can be granted by assigning the [Project
   * Viewer](https://cloud.google.com/iam/docs/understanding-roles#predefined_roles)
   * role.
   */
  getProjectBillingInfo(
    request: GetProjectBillingInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ProjectBillingInfo>>;
  /**
   * Sets or updates the billing account associated with a project. You specify
   * the new billing account by setting the `billing_account_name` in the
   * `ProjectBillingInfo` resource to the resource name of a billing account.
   * Associating a project with an open billing account enables billing on the
   * project and allows charges for resource usage. If the project already had a
   * billing account, this method changes the billing account used for resource
   * usage charges.
   *
   * *Note:* Incurred charges that have not yet been reported in the transaction
   * history of the Google Cloud Console might be billed to the new billing
   * account, even if the charge occurred before the new billing account was
   * assigned to the project.
   *
   * The current authenticated user must have ownership privileges for both
   * the
   * [project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo
   * ) and the [billing
   * account](https://cloud.google.com/billing/docs/how-to/billing-access).
   *
   * You can disable billing on the project by setting the
   * `billing_account_name` field to empty. This action disassociates the
   * current billing account from the project. Any billable activity of your
   * in-use services will stop, and your application could stop functioning as
   * expected. Any unbilled charges to date will be billed to the previously
   * associated account. The current authenticated user must be either an owner
   * of the project or an owner of the billing account for the project.
   *
   * Note that associating a project with a *closed* billing account will have
   * much the same effect as disabling billing on the project: any paid
   * resources used by the project will be shut down. Thus, unless you wish to
   * disable billing, you should always call this method with the name of an
   * *open* billing account.
   */
  updateProjectBillingInfo(
    request: UpdateProjectBillingInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ProjectBillingInfo>>;
  /**
   * Gets the access control policy for a billing account.
   * The caller must have the `billing.accounts.getIamPolicy` permission on the
   * account, which is often given to billing account
   * [viewers](https://cloud.google.com/billing/docs/how-to/billing-access).
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Sets the access control policy for a billing account. Replaces any existing
   * policy.
   * The caller must have the `billing.accounts.setIamPolicy` permission on the
   * account, which is often given to billing account
   * [administrators](https://cloud.google.com/billing/docs/how-to/billing-access).
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Tests the access control policy for a billing account. This method takes
   * the resource and a set of permissions as input and returns the subset of
   * the input permissions that the caller is allowed for that resource.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
  /** Changes which parent organization a billing account belongs to. */
  moveBillingAccount(
    request: MoveBillingAccountRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BillingAccount>>;
}

export interface CloudBillingClient<CallOptionsExt = {}> {
  /**
   * Gets information about a billing account. The current authenticated user
   * must be a [viewer of the billing
   * account](https://cloud.google.com/billing/docs/how-to/billing-access).
   */
  getBillingAccount(
    request: DeepPartial<GetBillingAccountRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BillingAccount>;
  /**
   * Lists the billing accounts that the current authenticated user has
   * permission to
   * [view](https://cloud.google.com/billing/docs/how-to/billing-access).
   */
  listBillingAccounts(
    request: DeepPartial<ListBillingAccountsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBillingAccountsResponse>;
  /**
   * Updates a billing account's fields.
   * Currently the only field that can be edited is `display_name`.
   * The current authenticated user must have the `billing.accounts.update`
   * IAM permission, which is typically given to the
   * [administrator](https://cloud.google.com/billing/docs/how-to/billing-access)
   * of the billing account.
   */
  updateBillingAccount(
    request: DeepPartial<UpdateBillingAccountRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BillingAccount>;
  /**
   * This method creates [billing
   * subaccounts](https://cloud.google.com/billing/docs/concepts#subaccounts).
   *
   * Google Cloud resellers should use the
   * Channel Services APIs,
   * [accounts.customers.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers/create)
   * and
   * [accounts.customers.entitlements.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers.entitlements/create).
   *
   * When creating a subaccount, the current authenticated user must have the
   * `billing.accounts.update` IAM permission on the parent account, which is
   * typically given to billing account
   * [administrators](https://cloud.google.com/billing/docs/how-to/billing-access).
   * This method will return an error if the parent account has not been
   * provisioned for subaccounts.
   */
  createBillingAccount(
    request: DeepPartial<CreateBillingAccountRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BillingAccount>;
  /**
   * Lists the projects associated with a billing account. The current
   * authenticated user must have the `billing.resourceAssociations.list` IAM
   * permission, which is often given to billing account
   * [viewers](https://cloud.google.com/billing/docs/how-to/billing-access).
   */
  listProjectBillingInfo(
    request: DeepPartial<ListProjectBillingInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectBillingInfoResponse>;
  /**
   * Gets the billing information for a project. The current authenticated user
   * must have the `resourcemanager.projects.get` permission for the project,
   * which can be granted by assigning the [Project
   * Viewer](https://cloud.google.com/iam/docs/understanding-roles#predefined_roles)
   * role.
   */
  getProjectBillingInfo(
    request: DeepPartial<GetProjectBillingInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ProjectBillingInfo>;
  /**
   * Sets or updates the billing account associated with a project. You specify
   * the new billing account by setting the `billing_account_name` in the
   * `ProjectBillingInfo` resource to the resource name of a billing account.
   * Associating a project with an open billing account enables billing on the
   * project and allows charges for resource usage. If the project already had a
   * billing account, this method changes the billing account used for resource
   * usage charges.
   *
   * *Note:* Incurred charges that have not yet been reported in the transaction
   * history of the Google Cloud Console might be billed to the new billing
   * account, even if the charge occurred before the new billing account was
   * assigned to the project.
   *
   * The current authenticated user must have ownership privileges for both
   * the
   * [project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo
   * ) and the [billing
   * account](https://cloud.google.com/billing/docs/how-to/billing-access).
   *
   * You can disable billing on the project by setting the
   * `billing_account_name` field to empty. This action disassociates the
   * current billing account from the project. Any billable activity of your
   * in-use services will stop, and your application could stop functioning as
   * expected. Any unbilled charges to date will be billed to the previously
   * associated account. The current authenticated user must be either an owner
   * of the project or an owner of the billing account for the project.
   *
   * Note that associating a project with a *closed* billing account will have
   * much the same effect as disabling billing on the project: any paid
   * resources used by the project will be shut down. Thus, unless you wish to
   * disable billing, you should always call this method with the name of an
   * *open* billing account.
   */
  updateProjectBillingInfo(
    request: DeepPartial<UpdateProjectBillingInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ProjectBillingInfo>;
  /**
   * Gets the access control policy for a billing account.
   * The caller must have the `billing.accounts.getIamPolicy` permission on the
   * account, which is often given to billing account
   * [viewers](https://cloud.google.com/billing/docs/how-to/billing-access).
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Sets the access control policy for a billing account. Replaces any existing
   * policy.
   * The caller must have the `billing.accounts.setIamPolicy` permission on the
   * account, which is often given to billing account
   * [administrators](https://cloud.google.com/billing/docs/how-to/billing-access).
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Tests the access control policy for a billing account. This method takes
   * the resource and a set of permissions as input and returns the subset of
   * the input permissions that the caller is allowed for that resource.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
  /** Changes which parent organization a billing account belongs to. */
  moveBillingAccount(
    request: DeepPartial<MoveBillingAccountRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BillingAccount>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
