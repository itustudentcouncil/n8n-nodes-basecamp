// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/visionai/v1alpha1/lva_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Analysis } from "./lva_resources.js";

export const protobufPackage = "google.cloud.visionai.v1alpha1";

/** Message for requesting list of Analyses */
export interface ListAnalysesRequest {
  /** Required. Parent value for ListAnalysesRequest */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results */
  filter: string;
  /** Hint for how to order the results */
  orderBy: string;
}

/** Message for response to listing Analyses */
export interface ListAnalysesResponse {
  /** The list of Analysis */
  analyses: Analysis[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting an Analysis. */
export interface GetAnalysisRequest {
  /** Required. Name of the resource. */
  name: string;
}

/** Message for creating an Analysis. */
export interface CreateAnalysisRequest {
  /** Required. Value for parent. */
  parent: string;
  /** Required. Id of the requesting object. */
  analysisId: string;
  /** Required. The resource being created. */
  analysis:
    | Analysis
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for updating an Analysis. */
export interface UpdateAnalysisRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Analysis resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated. */
  analysis:
    | Analysis
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for deleting an Analysis. */
export interface DeleteAnalysisRequest {
  /** Required. Name of the resource. */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

function createBaseListAnalysesRequest(): ListAnalysesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListAnalysesRequest: MessageFns<ListAnalysesRequest> = {
  encode(message: ListAnalysesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnalysesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnalysesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnalysesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListAnalysesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnalysesRequest>): ListAnalysesRequest {
    return ListAnalysesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnalysesRequest>): ListAnalysesRequest {
    const message = createBaseListAnalysesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListAnalysesResponse(): ListAnalysesResponse {
  return { analyses: [], nextPageToken: "", unreachable: [] };
}

export const ListAnalysesResponse: MessageFns<ListAnalysesResponse> = {
  encode(message: ListAnalysesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.analyses) {
      Analysis.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnalysesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnalysesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.analyses.push(Analysis.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnalysesResponse {
    return {
      analyses: globalThis.Array.isArray(object?.analyses) ? object.analyses.map((e: any) => Analysis.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListAnalysesResponse): unknown {
    const obj: any = {};
    if (message.analyses?.length) {
      obj.analyses = message.analyses.map((e) => Analysis.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnalysesResponse>): ListAnalysesResponse {
    return ListAnalysesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnalysesResponse>): ListAnalysesResponse {
    const message = createBaseListAnalysesResponse();
    message.analyses = object.analyses?.map((e) => Analysis.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetAnalysisRequest(): GetAnalysisRequest {
  return { name: "" };
}

export const GetAnalysisRequest: MessageFns<GetAnalysisRequest> = {
  encode(message: GetAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAnalysisRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAnalysisRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAnalysisRequest>): GetAnalysisRequest {
    return GetAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAnalysisRequest>): GetAnalysisRequest {
    const message = createBaseGetAnalysisRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateAnalysisRequest(): CreateAnalysisRequest {
  return { parent: "", analysisId: "", analysis: undefined, requestId: "" };
}

export const CreateAnalysisRequest: MessageFns<CreateAnalysisRequest> = {
  encode(message: CreateAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.analysisId !== "") {
      writer.uint32(18).string(message.analysisId);
    }
    if (message.analysis !== undefined) {
      Analysis.encode(message.analysis, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.analysisId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.analysis = Analysis.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAnalysisRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      analysisId: isSet(object.analysisId) ? globalThis.String(object.analysisId) : "",
      analysis: isSet(object.analysis) ? Analysis.fromJSON(object.analysis) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateAnalysisRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.analysisId !== "") {
      obj.analysisId = message.analysisId;
    }
    if (message.analysis !== undefined) {
      obj.analysis = Analysis.toJSON(message.analysis);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAnalysisRequest>): CreateAnalysisRequest {
    return CreateAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAnalysisRequest>): CreateAnalysisRequest {
    const message = createBaseCreateAnalysisRequest();
    message.parent = object.parent ?? "";
    message.analysisId = object.analysisId ?? "";
    message.analysis = (object.analysis !== undefined && object.analysis !== null)
      ? Analysis.fromPartial(object.analysis)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateAnalysisRequest(): UpdateAnalysisRequest {
  return { updateMask: undefined, analysis: undefined, requestId: "" };
}

export const UpdateAnalysisRequest: MessageFns<UpdateAnalysisRequest> = {
  encode(message: UpdateAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.analysis !== undefined) {
      Analysis.encode(message.analysis, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.analysis = Analysis.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAnalysisRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      analysis: isSet(object.analysis) ? Analysis.fromJSON(object.analysis) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateAnalysisRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.analysis !== undefined) {
      obj.analysis = Analysis.toJSON(message.analysis);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAnalysisRequest>): UpdateAnalysisRequest {
    return UpdateAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAnalysisRequest>): UpdateAnalysisRequest {
    const message = createBaseUpdateAnalysisRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.analysis = (object.analysis !== undefined && object.analysis !== null)
      ? Analysis.fromPartial(object.analysis)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteAnalysisRequest(): DeleteAnalysisRequest {
  return { name: "", requestId: "" };
}

export const DeleteAnalysisRequest: MessageFns<DeleteAnalysisRequest> = {
  encode(message: DeleteAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAnalysisRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteAnalysisRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAnalysisRequest>): DeleteAnalysisRequest {
    return DeleteAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAnalysisRequest>): DeleteAnalysisRequest {
    const message = createBaseDeleteAnalysisRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

/**
 * Service describing handlers for resources. The service enables clients to run
 * Live Video Analytics (LVA) on the streaming inputs.
 */
export type LiveVideoAnalyticsDefinition = typeof LiveVideoAnalyticsDefinition;
export const LiveVideoAnalyticsDefinition = {
  name: "LiveVideoAnalytics",
  fullName: "google.cloud.visionai.v1alpha1.LiveVideoAnalytics",
  methods: {
    /** Lists Analyses in a given project and location. */
    listAnalyses: {
      name: "ListAnalyses",
      requestType: ListAnalysesRequest,
      requestStream: false,
      responseType: ListAnalysesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Analysis. */
    getAnalysis: {
      name: "GetAnalysis",
      requestType: GetAnalysisRequest,
      requestStream: false,
      responseType: Analysis,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Analysis in a given project and location. */
    createAnalysis: {
      name: "CreateAnalysis",
      requestType: CreateAnalysisRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              65,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              44,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              73,
              58,
              8,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single Analysis. */
    updateAnalysis: {
      name: "UpdateAnalysis",
      requestType: UpdateAnalysisRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              29,
              10,
              8,
              65,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              82,
              58,
              8,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              50,
              70,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Analysis. */
    deleteAnalysis: {
      name: "DeleteAnalysis",
      requestType: DeleteAnalysisRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              42,
              61,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface LiveVideoAnalyticsServiceImplementation<CallContextExt = {}> {
  /** Lists Analyses in a given project and location. */
  listAnalyses(
    request: ListAnalysesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAnalysesResponse>>;
  /** Gets details of a single Analysis. */
  getAnalysis(request: GetAnalysisRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Analysis>>;
  /** Creates a new Analysis in a given project and location. */
  createAnalysis(
    request: CreateAnalysisRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single Analysis. */
  updateAnalysis(
    request: UpdateAnalysisRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single Analysis. */
  deleteAnalysis(
    request: DeleteAnalysisRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface LiveVideoAnalyticsClient<CallOptionsExt = {}> {
  /** Lists Analyses in a given project and location. */
  listAnalyses(
    request: DeepPartial<ListAnalysesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAnalysesResponse>;
  /** Gets details of a single Analysis. */
  getAnalysis(request: DeepPartial<GetAnalysisRequest>, options?: CallOptions & CallOptionsExt): Promise<Analysis>;
  /** Creates a new Analysis in a given project and location. */
  createAnalysis(
    request: DeepPartial<CreateAnalysisRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single Analysis. */
  updateAnalysis(
    request: DeepPartial<UpdateAnalysisRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single Analysis. */
  deleteAnalysis(
    request: DeepPartial<DeleteAnalysisRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
