// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/confidentialcomputing/v1alpha1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.confidentialcomputing.v1alpha1";

/** A Challenge from the server used to guarantee freshness of attestations */
export interface Challenge {
  /**
   * Output only. The resource name for this Challenge in the format
   * `projects/* /locations/* /challenges/*`
   */
  name: string;
  /** Output only. The time at which this Challenge was created */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The time at which this Challenge will no longer be usable. It
   * is also the expiration time for any tokens generated from this Challenge.
   */
  expireTime:
    | Date
    | undefined;
  /** Output only. Indicates if this challenge has been used to generate a token. */
  used: boolean;
  /**
   * Output only. Random data which should be used when calling TPM2_Quote.
   * --
   */
  nonce: Buffer;
}

/** Message for creating a Challenge */
export interface CreateChallengeRequest {
  /**
   * Required. The resource name of the location where the Challenge will be
   * used, in the format `projects/* /locations/*`.
   */
  parent: string;
  /**
   * Required. The Challenge to be created. Currently this field can be empty as
   * all the Challenge fields are set by the server.
   */
  challenge: Challenge | undefined;
}

/**
 * A request for an OIDC token, providing all the necessary information needed
 * for this service to verify the plaform state of the requestor.
 */
export interface VerifyAttestationRequest {
  /**
   * Required. The name of the Challenge whose nonce was used to generate the
   * attestation, in the format `projects/* /locations/* /challenges/*`. The
   * provided Challenge will be consumed, and cannot be used again.
   */
  challenge: string;
  /**
   * Optional. Credentials used to populate the "emails" claim in the
   * claims_token.
   */
  gcpCredentials:
    | GcpCredentials
    | undefined;
  /**
   * Required. The TPM-specific data provided by the attesting platform, used to
   * populate any of the claims regarding platform state.
   */
  tpmAttestation: TpmAttestation | undefined;
}

/**
 * A response once an attestation has been successfully verified, containing a
 * signed OIDC token.
 */
export interface VerifyAttestationResponse {
  /**
   * Output only. The OIDC token issued by this service. It contains specific
   * platform claims based on the contents of the provided attestation.
   * --
   */
  claimsToken: Buffer;
}

/**
 * Credentials issued by GCP which are linked to the platform attestation. These
 * will be verified server-side as part of attestaion verification.
 */
export interface GcpCredentials {
  /**
   * A list of service account OpenID Connect ID tokens identifying which
   * service account identities should be included in the claims_token. These
   * can be generated by calling `serviceAccounts.generateIdToken`. The
   * Challenge.name must be used as the `audience` parameter, and the
   * `includeEmail` parameter must be `true`.
   * --
   */
  idTokens: Buffer[];
}

/**
 * TPM2 data containing everything necessary to validate any platform state
 * measured into the TPM.
 */
export interface TpmAttestation {
  /** TPM2 PCR Quotes generated by calling TPM2_Quote on each PCR bank. */
  quotes: TpmAttestation_Quote[];
  /**
   * The binary TCG Event Log containing events measured into the TPM by the
   * platform firmware and operating system. Formatted as described in the
   * "TCG PC Client Platform Firmware Profile Specification".
   */
  tcgEventLog: Buffer;
  /**
   * An Event Log containing additional events measured into the TPM that are
   * not already present in the tcg_event_log. Formatted as described in the
   * "Canonical Event Log Format" TCG Specification.
   */
  canonicalEventLog: Buffer;
  /**
   * DER-encoded X.509 certificate of the Attestation Key (otherwise known as
   * an AK or a TPM restricted signing key) used to generate the quotes.
   */
  akCert: Buffer;
  /**
   * List of DER-encoded X.509 certificates which, together with the ak_cert,
   * chain back to a trusted Root Certificate.
   */
  certChain: Buffer[];
}

/**
 * Information about Platform Control Registers (PCRs) including a signature
 * over their values, which can be used for remote validation.
 */
export interface TpmAttestation_Quote {
  /** The hash algorithm of the PCR bank being quoted, encoded as a TPM_ALG_ID */
  hashAlgo: number;
  /** Raw binary values of each PCRs being quoted. */
  pcrValues: { [key: number]: Buffer };
  /** TPM2 quote, encoded as a TPMS_ATTEST */
  rawQuote: Buffer;
  /** TPM2 signature, encoded as a TPMT_SIGNATURE */
  rawSignature: Buffer;
}

export interface TpmAttestation_Quote_PcrValuesEntry {
  key: number;
  value: Buffer;
}

function createBaseChallenge(): Challenge {
  return { name: "", createTime: undefined, expireTime: undefined, used: false, nonce: Buffer.alloc(0) };
}

export const Challenge: MessageFns<Challenge> = {
  encode(message: Challenge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(26).fork()).join();
    }
    if (message.used !== false) {
      writer.uint32(32).bool(message.used);
    }
    if (message.nonce.length !== 0) {
      writer.uint32(42).bytes(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Challenge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChallenge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.used = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nonce = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Challenge {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
      used: isSet(object.used) ? globalThis.Boolean(object.used) : false,
      nonce: isSet(object.nonce) ? Buffer.from(bytesFromBase64(object.nonce)) : Buffer.alloc(0),
    };
  },

  toJSON(message: Challenge): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    if (message.used !== false) {
      obj.used = message.used;
    }
    if (message.nonce.length !== 0) {
      obj.nonce = base64FromBytes(message.nonce);
    }
    return obj;
  },

  create(base?: DeepPartial<Challenge>): Challenge {
    return Challenge.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Challenge>): Challenge {
    const message = createBaseChallenge();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    message.used = object.used ?? false;
    message.nonce = object.nonce ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseCreateChallengeRequest(): CreateChallengeRequest {
  return { parent: "", challenge: undefined };
}

export const CreateChallengeRequest: MessageFns<CreateChallengeRequest> = {
  encode(message: CreateChallengeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.challenge !== undefined) {
      Challenge.encode(message.challenge, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateChallengeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChallengeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.challenge = Challenge.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChallengeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      challenge: isSet(object.challenge) ? Challenge.fromJSON(object.challenge) : undefined,
    };
  },

  toJSON(message: CreateChallengeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.challenge !== undefined) {
      obj.challenge = Challenge.toJSON(message.challenge);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateChallengeRequest>): CreateChallengeRequest {
    return CreateChallengeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateChallengeRequest>): CreateChallengeRequest {
    const message = createBaseCreateChallengeRequest();
    message.parent = object.parent ?? "";
    message.challenge = (object.challenge !== undefined && object.challenge !== null)
      ? Challenge.fromPartial(object.challenge)
      : undefined;
    return message;
  },
};

function createBaseVerifyAttestationRequest(): VerifyAttestationRequest {
  return { challenge: "", gcpCredentials: undefined, tpmAttestation: undefined };
}

export const VerifyAttestationRequest: MessageFns<VerifyAttestationRequest> = {
  encode(message: VerifyAttestationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.challenge !== "") {
      writer.uint32(10).string(message.challenge);
    }
    if (message.gcpCredentials !== undefined) {
      GcpCredentials.encode(message.gcpCredentials, writer.uint32(18).fork()).join();
    }
    if (message.tpmAttestation !== undefined) {
      TpmAttestation.encode(message.tpmAttestation, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyAttestationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyAttestationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.challenge = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcpCredentials = GcpCredentials.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tpmAttestation = TpmAttestation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyAttestationRequest {
    return {
      challenge: isSet(object.challenge) ? globalThis.String(object.challenge) : "",
      gcpCredentials: isSet(object.gcpCredentials) ? GcpCredentials.fromJSON(object.gcpCredentials) : undefined,
      tpmAttestation: isSet(object.tpmAttestation) ? TpmAttestation.fromJSON(object.tpmAttestation) : undefined,
    };
  },

  toJSON(message: VerifyAttestationRequest): unknown {
    const obj: any = {};
    if (message.challenge !== "") {
      obj.challenge = message.challenge;
    }
    if (message.gcpCredentials !== undefined) {
      obj.gcpCredentials = GcpCredentials.toJSON(message.gcpCredentials);
    }
    if (message.tpmAttestation !== undefined) {
      obj.tpmAttestation = TpmAttestation.toJSON(message.tpmAttestation);
    }
    return obj;
  },

  create(base?: DeepPartial<VerifyAttestationRequest>): VerifyAttestationRequest {
    return VerifyAttestationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifyAttestationRequest>): VerifyAttestationRequest {
    const message = createBaseVerifyAttestationRequest();
    message.challenge = object.challenge ?? "";
    message.gcpCredentials = (object.gcpCredentials !== undefined && object.gcpCredentials !== null)
      ? GcpCredentials.fromPartial(object.gcpCredentials)
      : undefined;
    message.tpmAttestation = (object.tpmAttestation !== undefined && object.tpmAttestation !== null)
      ? TpmAttestation.fromPartial(object.tpmAttestation)
      : undefined;
    return message;
  },
};

function createBaseVerifyAttestationResponse(): VerifyAttestationResponse {
  return { claimsToken: Buffer.alloc(0) };
}

export const VerifyAttestationResponse: MessageFns<VerifyAttestationResponse> = {
  encode(message: VerifyAttestationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.claimsToken.length !== 0) {
      writer.uint32(10).bytes(message.claimsToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyAttestationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyAttestationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.claimsToken = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyAttestationResponse {
    return {
      claimsToken: isSet(object.claimsToken) ? Buffer.from(bytesFromBase64(object.claimsToken)) : Buffer.alloc(0),
    };
  },

  toJSON(message: VerifyAttestationResponse): unknown {
    const obj: any = {};
    if (message.claimsToken.length !== 0) {
      obj.claimsToken = base64FromBytes(message.claimsToken);
    }
    return obj;
  },

  create(base?: DeepPartial<VerifyAttestationResponse>): VerifyAttestationResponse {
    return VerifyAttestationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifyAttestationResponse>): VerifyAttestationResponse {
    const message = createBaseVerifyAttestationResponse();
    message.claimsToken = object.claimsToken ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseGcpCredentials(): GcpCredentials {
  return { idTokens: [] };
}

export const GcpCredentials: MessageFns<GcpCredentials> = {
  encode(message: GcpCredentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.idTokens) {
      writer.uint32(10).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcpCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcpCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idTokens.push(Buffer.from(reader.bytes()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcpCredentials {
    return {
      idTokens: globalThis.Array.isArray(object?.idTokens)
        ? object.idTokens.map((e: any) => Buffer.from(bytesFromBase64(e)))
        : [],
    };
  },

  toJSON(message: GcpCredentials): unknown {
    const obj: any = {};
    if (message.idTokens?.length) {
      obj.idTokens = message.idTokens.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GcpCredentials>): GcpCredentials {
    return GcpCredentials.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcpCredentials>): GcpCredentials {
    const message = createBaseGcpCredentials();
    message.idTokens = object.idTokens?.map((e) => e) || [];
    return message;
  },
};

function createBaseTpmAttestation(): TpmAttestation {
  return {
    quotes: [],
    tcgEventLog: Buffer.alloc(0),
    canonicalEventLog: Buffer.alloc(0),
    akCert: Buffer.alloc(0),
    certChain: [],
  };
}

export const TpmAttestation: MessageFns<TpmAttestation> = {
  encode(message: TpmAttestation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.quotes) {
      TpmAttestation_Quote.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.tcgEventLog.length !== 0) {
      writer.uint32(18).bytes(message.tcgEventLog);
    }
    if (message.canonicalEventLog.length !== 0) {
      writer.uint32(26).bytes(message.canonicalEventLog);
    }
    if (message.akCert.length !== 0) {
      writer.uint32(34).bytes(message.akCert);
    }
    for (const v of message.certChain) {
      writer.uint32(42).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TpmAttestation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTpmAttestation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.quotes.push(TpmAttestation_Quote.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tcgEventLog = Buffer.from(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.canonicalEventLog = Buffer.from(reader.bytes());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.akCert = Buffer.from(reader.bytes());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.certChain.push(Buffer.from(reader.bytes()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TpmAttestation {
    return {
      quotes: globalThis.Array.isArray(object?.quotes)
        ? object.quotes.map((e: any) => TpmAttestation_Quote.fromJSON(e))
        : [],
      tcgEventLog: isSet(object.tcgEventLog) ? Buffer.from(bytesFromBase64(object.tcgEventLog)) : Buffer.alloc(0),
      canonicalEventLog: isSet(object.canonicalEventLog)
        ? Buffer.from(bytesFromBase64(object.canonicalEventLog))
        : Buffer.alloc(0),
      akCert: isSet(object.akCert) ? Buffer.from(bytesFromBase64(object.akCert)) : Buffer.alloc(0),
      certChain: globalThis.Array.isArray(object?.certChain)
        ? object.certChain.map((e: any) => Buffer.from(bytesFromBase64(e)))
        : [],
    };
  },

  toJSON(message: TpmAttestation): unknown {
    const obj: any = {};
    if (message.quotes?.length) {
      obj.quotes = message.quotes.map((e) => TpmAttestation_Quote.toJSON(e));
    }
    if (message.tcgEventLog.length !== 0) {
      obj.tcgEventLog = base64FromBytes(message.tcgEventLog);
    }
    if (message.canonicalEventLog.length !== 0) {
      obj.canonicalEventLog = base64FromBytes(message.canonicalEventLog);
    }
    if (message.akCert.length !== 0) {
      obj.akCert = base64FromBytes(message.akCert);
    }
    if (message.certChain?.length) {
      obj.certChain = message.certChain.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TpmAttestation>): TpmAttestation {
    return TpmAttestation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TpmAttestation>): TpmAttestation {
    const message = createBaseTpmAttestation();
    message.quotes = object.quotes?.map((e) => TpmAttestation_Quote.fromPartial(e)) || [];
    message.tcgEventLog = object.tcgEventLog ?? Buffer.alloc(0);
    message.canonicalEventLog = object.canonicalEventLog ?? Buffer.alloc(0);
    message.akCert = object.akCert ?? Buffer.alloc(0);
    message.certChain = object.certChain?.map((e) => e) || [];
    return message;
  },
};

function createBaseTpmAttestation_Quote(): TpmAttestation_Quote {
  return { hashAlgo: 0, pcrValues: {}, rawQuote: Buffer.alloc(0), rawSignature: Buffer.alloc(0) };
}

export const TpmAttestation_Quote: MessageFns<TpmAttestation_Quote> = {
  encode(message: TpmAttestation_Quote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hashAlgo !== 0) {
      writer.uint32(8).int32(message.hashAlgo);
    }
    Object.entries(message.pcrValues).forEach(([key, value]) => {
      TpmAttestation_Quote_PcrValuesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.rawQuote.length !== 0) {
      writer.uint32(26).bytes(message.rawQuote);
    }
    if (message.rawSignature.length !== 0) {
      writer.uint32(34).bytes(message.rawSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TpmAttestation_Quote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTpmAttestation_Quote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.hashAlgo = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = TpmAttestation_Quote_PcrValuesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.pcrValues[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rawQuote = Buffer.from(reader.bytes());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.rawSignature = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TpmAttestation_Quote {
    return {
      hashAlgo: isSet(object.hashAlgo) ? globalThis.Number(object.hashAlgo) : 0,
      pcrValues: isObject(object.pcrValues)
        ? Object.entries(object.pcrValues).reduce<{ [key: number]: Buffer }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Buffer.from(bytesFromBase64(value as string));
          return acc;
        }, {})
        : {},
      rawQuote: isSet(object.rawQuote) ? Buffer.from(bytesFromBase64(object.rawQuote)) : Buffer.alloc(0),
      rawSignature: isSet(object.rawSignature) ? Buffer.from(bytesFromBase64(object.rawSignature)) : Buffer.alloc(0),
    };
  },

  toJSON(message: TpmAttestation_Quote): unknown {
    const obj: any = {};
    if (message.hashAlgo !== 0) {
      obj.hashAlgo = Math.round(message.hashAlgo);
    }
    if (message.pcrValues) {
      const entries = Object.entries(message.pcrValues);
      if (entries.length > 0) {
        obj.pcrValues = {};
        entries.forEach(([k, v]) => {
          obj.pcrValues[k] = base64FromBytes(v);
        });
      }
    }
    if (message.rawQuote.length !== 0) {
      obj.rawQuote = base64FromBytes(message.rawQuote);
    }
    if (message.rawSignature.length !== 0) {
      obj.rawSignature = base64FromBytes(message.rawSignature);
    }
    return obj;
  },

  create(base?: DeepPartial<TpmAttestation_Quote>): TpmAttestation_Quote {
    return TpmAttestation_Quote.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TpmAttestation_Quote>): TpmAttestation_Quote {
    const message = createBaseTpmAttestation_Quote();
    message.hashAlgo = object.hashAlgo ?? 0;
    message.pcrValues = Object.entries(object.pcrValues ?? {}).reduce<{ [key: number]: Buffer }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = value;
        }
        return acc;
      },
      {},
    );
    message.rawQuote = object.rawQuote ?? Buffer.alloc(0);
    message.rawSignature = object.rawSignature ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseTpmAttestation_Quote_PcrValuesEntry(): TpmAttestation_Quote_PcrValuesEntry {
  return { key: 0, value: Buffer.alloc(0) };
}

export const TpmAttestation_Quote_PcrValuesEntry: MessageFns<TpmAttestation_Quote_PcrValuesEntry> = {
  encode(message: TpmAttestation_Quote_PcrValuesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TpmAttestation_Quote_PcrValuesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTpmAttestation_Quote_PcrValuesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TpmAttestation_Quote_PcrValuesEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Buffer.from(bytesFromBase64(object.value)) : Buffer.alloc(0),
    };
  },

  toJSON(message: TpmAttestation_Quote_PcrValuesEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<TpmAttestation_Quote_PcrValuesEntry>): TpmAttestation_Quote_PcrValuesEntry {
    return TpmAttestation_Quote_PcrValuesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TpmAttestation_Quote_PcrValuesEntry>): TpmAttestation_Quote_PcrValuesEntry {
    const message = createBaseTpmAttestation_Quote_PcrValuesEntry();
    message.key = object.key ?? 0;
    message.value = object.value ?? Buffer.alloc(0);
    return message;
  },
};

/** Service describing handlers for resources */
export type ConfidentialComputingDefinition = typeof ConfidentialComputingDefinition;
export const ConfidentialComputingDefinition = {
  name: "ConfidentialComputing",
  fullName: "google.cloud.confidentialcomputing.v1alpha1.ConfidentialComputing",
  methods: {
    /** Creates a new Challenge in a given project and location. */
    createChallenge: {
      name: "CreateChallenge",
      requestType: CreateChallengeRequest,
      requestStream: false,
      responseType: Challenge,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 112, 97, 114, 101, 110, 116, 44, 99, 104, 97, 108, 108, 101, 110, 103, 101])],
          578365826: [
            Buffer.from([
              65,
              58,
              9,
              99,
              104,
              97,
              108,
              108,
              101,
              110,
              103,
              101,
              34,
              52,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              104,
              97,
              108,
              108,
              101,
              110,
              103,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Verifies the provided attestation info, returning a signed OIDC token. */
    verifyAttestation: {
      name: "VerifyAttestation",
      requestType: VerifyAttestationRequest,
      requestStream: false,
      responseType: VerifyAttestationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              80,
              58,
              1,
              42,
              34,
              75,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              99,
              104,
              97,
              108,
              108,
              101,
              110,
              103,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              104,
              97,
              108,
              108,
              101,
              110,
              103,
              101,
              115,
              47,
              42,
              125,
              58,
              118,
              101,
              114,
              105,
              102,
              121,
              65,
              116,
              116,
              101,
              115,
              116,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ConfidentialComputingServiceImplementation<CallContextExt = {}> {
  /** Creates a new Challenge in a given project and location. */
  createChallenge(
    request: CreateChallengeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Challenge>>;
  /** Verifies the provided attestation info, returning a signed OIDC token. */
  verifyAttestation(
    request: VerifyAttestationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VerifyAttestationResponse>>;
}

export interface ConfidentialComputingClient<CallOptionsExt = {}> {
  /** Creates a new Challenge in a given project and location. */
  createChallenge(
    request: DeepPartial<CreateChallengeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Challenge>;
  /** Verifies the provided attestation info, returning a signed OIDC token. */
  verifyAttestation(
    request: DeepPartial<VerifyAttestationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VerifyAttestationResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
