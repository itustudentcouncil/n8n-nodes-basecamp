// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkconnectivity/v1alpha1/hub.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.networkconnectivity.v1alpha1";

/**
 * The State enum represents the lifecycle of a Network Connectivity Center
 * resource.
 */
export enum State {
  /** STATE_UNSPECIFIED - No state information available */
  STATE_UNSPECIFIED = 0,
  /** CREATING - The resource's create operation is in progress */
  CREATING = 1,
  /** ACTIVE - The resource is active */
  ACTIVE = 2,
  /** DELETING - The resource's Delete operation is in progress */
  DELETING = 3,
  UNRECOGNIZED = -1,
}

export function stateFromJSON(object: any): State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return State.CREATING;
    case 2:
    case "ACTIVE":
      return State.ACTIVE;
    case 3:
    case "DELETING":
      return State.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return State.UNRECOGNIZED;
  }
}

export function stateToJSON(object: State): string {
  switch (object) {
    case State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case State.CREATING:
      return "CREATING";
    case State.ACTIVE:
      return "ACTIVE";
    case State.DELETING:
      return "DELETING";
    case State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Network Connectivity Center is a hub-and-spoke abstraction for
 * network connectivity management in Google Cloud. It reduces
 * operational complexity through a simple, centralized connectivity management
 * model. Following is the resource message of a hub.
 */
export interface Hub {
  /** Immutable. The name of a Hub resource. */
  name: string;
  /** Time when the Hub was created. */
  createTime:
    | Date
    | undefined;
  /** Time when the Hub was updated. */
  updateTime:
    | Date
    | undefined;
  /** User-defined labels. */
  labels: { [key: string]: string };
  /** Short description of the hub resource. */
  description: string;
  /** Output only. A list of the URIs of all attached spokes */
  spokes: string[];
  /**
   * Output only. Google-generated UUID for this resource. This is unique across all Hub
   * resources. If a Hub resource is deleted and another with the same name is
   * created, it gets a different unique_id.
   */
  uniqueId: string;
  /** Output only. The current lifecycle state of this Hub. */
  state: State;
}

export interface Hub_LabelsEntry {
  key: string;
  value: string;
}

/**
 * A Spoke is an  abstraction of a network attachment being attached
 * to a Hub. A Spoke can be underlying a VPN tunnel, a
 * VLAN (interconnect) attachment, a Router appliance, etc.
 */
export interface Spoke {
  /** Immutable. The name of a Spoke resource. */
  name: string;
  /** The time when the Spoke was created. */
  createTime:
    | Date
    | undefined;
  /** The time when the Spoke was updated. */
  updateTime:
    | Date
    | undefined;
  /** User-defined labels. */
  labels: { [key: string]: string };
  /** Short description of the spoke resource */
  description: string;
  /** The resource URL of the hub resource that the spoke is attached to */
  hub: string;
  /** The URIs of linked VPN tunnel resources */
  linkedVpnTunnels: string[];
  /** The URIs of linked interconnect attachment resources */
  linkedInterconnectAttachments: string[];
  /** The URIs of linked Router appliance resources */
  linkedRouterApplianceInstances: RouterApplianceInstance[];
  /**
   * Output only. Google-generated UUID for this resource. This is unique across all Spoke
   * resources. If a Spoke resource is deleted and another with the same name is
   * created, it gets a different unique_id.
   */
  uniqueId: string;
  /** Output only. The current lifecycle state of this Hub. */
  state: State;
}

export interface Spoke_LabelsEntry {
  key: string;
  value: string;
}

/** Request for [HubService.ListHubs][google.cloud.networkconnectivity.v1alpha1.HubService.ListHubs] method. */
export interface ListHubsRequest {
  /** Required. The parent resource's name. */
  parent: string;
  /** The maximum number of results per page that should be returned. */
  pageSize: number;
  /** The page token. */
  pageToken: string;
  /** A filter expression that filters the results listed in the response. */
  filter: string;
  /** Sort the results by a certain order. */
  orderBy: string;
}

/** Response for [HubService.ListHubs][google.cloud.networkconnectivity.v1alpha1.HubService.ListHubs] method. */
export interface ListHubsResponse {
  /** Hubs to be returned. */
  hubs: Hub[];
  /**
   * The next pagination token in the List response. It should be used as
   * page_token for the following request. An empty value means no more result.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Request for [HubService.GetHub][google.cloud.networkconnectivity.v1alpha1.HubService.GetHub] method. */
export interface GetHubRequest {
  /** Required. Name of the Hub resource to get. */
  name: string;
}

/** Request for [HubService.CreateHub][google.cloud.networkconnectivity.v1alpha1.HubService.CreateHub] method. */
export interface CreateHubRequest {
  /** Required. The parent resource's name of the Hub. */
  parent: string;
  /** Optional. Unique id for the Hub to create. */
  hubId: string;
  /** Required. Initial values for a new Hub. */
  hub:
    | Hub
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for [HubService.UpdateHub][google.cloud.networkconnectivity.v1alpha1.HubService.UpdateHub] method. */
export interface UpdateHubRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * Hub resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The state that the Hub should be in after the update. */
  hub:
    | Hub
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** The request for [HubService.DeleteHub][google.cloud.networkconnectivity.v1alpha1.HubService.DeleteHub]. */
export interface DeleteHubRequest {
  /** Required. The name of the Hub to delete. */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** The request for [HubService.ListSpokes][google.cloud.networkconnectivity.v1alpha1.HubService.ListSpokes]. */
export interface ListSpokesRequest {
  /** Required. The parent's resource name. */
  parent: string;
  /** The maximum number of results per page that should be returned. */
  pageSize: number;
  /** The page token. */
  pageToken: string;
  /** A filter expression that filters the results listed in the response. */
  filter: string;
  /** Sort the results by a certain order. */
  orderBy: string;
}

/** The response for [HubService.ListSpokes][google.cloud.networkconnectivity.v1alpha1.HubService.ListSpokes]. */
export interface ListSpokesResponse {
  /** Spokes to be returned. */
  spokes: Spoke[];
  /**
   * The next pagination token in the List response. It should be used as
   * page_token for the following request. An empty value means no more result.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** The request for [HubService.GetSpoke][google.cloud.networkconnectivity.v1alpha1.HubService.GetSpoke]. */
export interface GetSpokeRequest {
  /** Required. The name of Spoke resource. */
  name: string;
}

/** The request for [HubService.CreateSpoke][google.cloud.networkconnectivity.v1alpha1.HubService.CreateSpoke]. */
export interface CreateSpokeRequest {
  /** Required. The parent's resource name of the Spoke. */
  parent: string;
  /** Optional. Unique id for the Spoke to create. */
  spokeId: string;
  /** Required. Initial values for a new Hub. */
  spoke:
    | Spoke
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request for [HubService.UpdateSpoke][google.cloud.networkconnectivity.v1alpha1.HubService.UpdateSpoke] method. */
export interface UpdateSpokeRequest {
  /**
   * Optional. Field mask is used to specify the fields to be overwritten in the
   * Spoke resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The state that the Spoke should be in after the update. */
  spoke:
    | Spoke
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** The request for [HubService.DeleteSpoke][google.cloud.networkconnectivity.v1alpha1.HubService.DeleteSpoke]. */
export interface DeleteSpokeRequest {
  /** Required. The name of the Spoke to delete. */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * RouterAppliance represents a Router appliance which is specified by a VM URI
 * and a NIC address.
 */
export interface RouterApplianceInstance {
  /** The URI of the virtual machine resource */
  virtualMachine: string;
  /** The IP address of the network interface to use for peering. */
  ipAddress: string;
  /** @deprecated */
  networkInterface: string;
}

function createBaseHub(): Hub {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    description: "",
    spokes: [],
    uniqueId: "",
    state: 0,
  };
}

export const Hub: MessageFns<Hub> = {
  encode(message: Hub, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Hub_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    for (const v of message.spokes) {
      writer.uint32(50).string(v!);
    }
    if (message.uniqueId !== "") {
      writer.uint32(66).string(message.uniqueId);
    }
    if (message.state !== 0) {
      writer.uint32(72).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Hub {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHub();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Hub_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.spokes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.uniqueId = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Hub {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      spokes: globalThis.Array.isArray(object?.spokes) ? object.spokes.map((e: any) => globalThis.String(e)) : [],
      uniqueId: isSet(object.uniqueId) ? globalThis.String(object.uniqueId) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Hub): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.spokes?.length) {
      obj.spokes = message.spokes;
    }
    if (message.uniqueId !== "") {
      obj.uniqueId = message.uniqueId;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Hub>): Hub {
    return Hub.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Hub>): Hub {
    const message = createBaseHub();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.spokes = object.spokes?.map((e) => e) || [];
    message.uniqueId = object.uniqueId ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseHub_LabelsEntry(): Hub_LabelsEntry {
  return { key: "", value: "" };
}

export const Hub_LabelsEntry: MessageFns<Hub_LabelsEntry> = {
  encode(message: Hub_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Hub_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHub_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Hub_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Hub_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Hub_LabelsEntry>): Hub_LabelsEntry {
    return Hub_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Hub_LabelsEntry>): Hub_LabelsEntry {
    const message = createBaseHub_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSpoke(): Spoke {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    description: "",
    hub: "",
    linkedVpnTunnels: [],
    linkedInterconnectAttachments: [],
    linkedRouterApplianceInstances: [],
    uniqueId: "",
    state: 0,
  };
}

export const Spoke: MessageFns<Spoke> = {
  encode(message: Spoke, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Spoke_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.hub !== "") {
      writer.uint32(50).string(message.hub);
    }
    for (const v of message.linkedVpnTunnels) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.linkedInterconnectAttachments) {
      writer.uint32(106).string(v!);
    }
    for (const v of message.linkedRouterApplianceInstances) {
      RouterApplianceInstance.encode(v!, writer.uint32(114).fork()).join();
    }
    if (message.uniqueId !== "") {
      writer.uint32(90).string(message.uniqueId);
    }
    if (message.state !== 0) {
      writer.uint32(120).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Spoke {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpoke();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Spoke_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.hub = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.linkedVpnTunnels.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.linkedInterconnectAttachments.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.linkedRouterApplianceInstances.push(RouterApplianceInstance.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.uniqueId = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Spoke {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      hub: isSet(object.hub) ? globalThis.String(object.hub) : "",
      linkedVpnTunnels: globalThis.Array.isArray(object?.linkedVpnTunnels)
        ? object.linkedVpnTunnels.map((e: any) => globalThis.String(e))
        : [],
      linkedInterconnectAttachments: globalThis.Array.isArray(object?.linkedInterconnectAttachments)
        ? object.linkedInterconnectAttachments.map((e: any) => globalThis.String(e))
        : [],
      linkedRouterApplianceInstances: globalThis.Array.isArray(object?.linkedRouterApplianceInstances)
        ? object.linkedRouterApplianceInstances.map((e: any) => RouterApplianceInstance.fromJSON(e))
        : [],
      uniqueId: isSet(object.uniqueId) ? globalThis.String(object.uniqueId) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Spoke): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.hub !== "") {
      obj.hub = message.hub;
    }
    if (message.linkedVpnTunnels?.length) {
      obj.linkedVpnTunnels = message.linkedVpnTunnels;
    }
    if (message.linkedInterconnectAttachments?.length) {
      obj.linkedInterconnectAttachments = message.linkedInterconnectAttachments;
    }
    if (message.linkedRouterApplianceInstances?.length) {
      obj.linkedRouterApplianceInstances = message.linkedRouterApplianceInstances.map((e) =>
        RouterApplianceInstance.toJSON(e)
      );
    }
    if (message.uniqueId !== "") {
      obj.uniqueId = message.uniqueId;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Spoke>): Spoke {
    return Spoke.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Spoke>): Spoke {
    const message = createBaseSpoke();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    message.hub = object.hub ?? "";
    message.linkedVpnTunnels = object.linkedVpnTunnels?.map((e) => e) || [];
    message.linkedInterconnectAttachments = object.linkedInterconnectAttachments?.map((e) => e) || [];
    message.linkedRouterApplianceInstances =
      object.linkedRouterApplianceInstances?.map((e) => RouterApplianceInstance.fromPartial(e)) || [];
    message.uniqueId = object.uniqueId ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseSpoke_LabelsEntry(): Spoke_LabelsEntry {
  return { key: "", value: "" };
}

export const Spoke_LabelsEntry: MessageFns<Spoke_LabelsEntry> = {
  encode(message: Spoke_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Spoke_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpoke_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Spoke_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Spoke_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Spoke_LabelsEntry>): Spoke_LabelsEntry {
    return Spoke_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Spoke_LabelsEntry>): Spoke_LabelsEntry {
    const message = createBaseSpoke_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListHubsRequest(): ListHubsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListHubsRequest: MessageFns<ListHubsRequest> = {
  encode(message: ListHubsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHubsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHubsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHubsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListHubsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHubsRequest>): ListHubsRequest {
    return ListHubsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHubsRequest>): ListHubsRequest {
    const message = createBaseListHubsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListHubsResponse(): ListHubsResponse {
  return { hubs: [], nextPageToken: "", unreachable: [] };
}

export const ListHubsResponse: MessageFns<ListHubsResponse> = {
  encode(message: ListHubsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hubs) {
      Hub.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHubsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHubsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hubs.push(Hub.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHubsResponse {
    return {
      hubs: globalThis.Array.isArray(object?.hubs) ? object.hubs.map((e: any) => Hub.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListHubsResponse): unknown {
    const obj: any = {};
    if (message.hubs?.length) {
      obj.hubs = message.hubs.map((e) => Hub.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHubsResponse>): ListHubsResponse {
    return ListHubsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHubsResponse>): ListHubsResponse {
    const message = createBaseListHubsResponse();
    message.hubs = object.hubs?.map((e) => Hub.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetHubRequest(): GetHubRequest {
  return { name: "" };
}

export const GetHubRequest: MessageFns<GetHubRequest> = {
  encode(message: GetHubRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHubRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHubRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHubRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetHubRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetHubRequest>): GetHubRequest {
    return GetHubRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHubRequest>): GetHubRequest {
    const message = createBaseGetHubRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateHubRequest(): CreateHubRequest {
  return { parent: "", hubId: "", hub: undefined, requestId: "" };
}

export const CreateHubRequest: MessageFns<CreateHubRequest> = {
  encode(message: CreateHubRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.hubId !== "") {
      writer.uint32(18).string(message.hubId);
    }
    if (message.hub !== undefined) {
      Hub.encode(message.hub, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateHubRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateHubRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hubId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hub = Hub.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateHubRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      hubId: isSet(object.hubId) ? globalThis.String(object.hubId) : "",
      hub: isSet(object.hub) ? Hub.fromJSON(object.hub) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateHubRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.hubId !== "") {
      obj.hubId = message.hubId;
    }
    if (message.hub !== undefined) {
      obj.hub = Hub.toJSON(message.hub);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateHubRequest>): CreateHubRequest {
    return CreateHubRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateHubRequest>): CreateHubRequest {
    const message = createBaseCreateHubRequest();
    message.parent = object.parent ?? "";
    message.hubId = object.hubId ?? "";
    message.hub = (object.hub !== undefined && object.hub !== null) ? Hub.fromPartial(object.hub) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateHubRequest(): UpdateHubRequest {
  return { updateMask: undefined, hub: undefined, requestId: "" };
}

export const UpdateHubRequest: MessageFns<UpdateHubRequest> = {
  encode(message: UpdateHubRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.hub !== undefined) {
      Hub.encode(message.hub, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateHubRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHubRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hub = Hub.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateHubRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      hub: isSet(object.hub) ? Hub.fromJSON(object.hub) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateHubRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.hub !== undefined) {
      obj.hub = Hub.toJSON(message.hub);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateHubRequest>): UpdateHubRequest {
    return UpdateHubRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHubRequest>): UpdateHubRequest {
    const message = createBaseUpdateHubRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.hub = (object.hub !== undefined && object.hub !== null) ? Hub.fromPartial(object.hub) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteHubRequest(): DeleteHubRequest {
  return { name: "", requestId: "" };
}

export const DeleteHubRequest: MessageFns<DeleteHubRequest> = {
  encode(message: DeleteHubRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteHubRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteHubRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteHubRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteHubRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteHubRequest>): DeleteHubRequest {
    return DeleteHubRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteHubRequest>): DeleteHubRequest {
    const message = createBaseDeleteHubRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseListSpokesRequest(): ListSpokesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListSpokesRequest: MessageFns<ListSpokesRequest> = {
  encode(message: ListSpokesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpokesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpokesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpokesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListSpokesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSpokesRequest>): ListSpokesRequest {
    return ListSpokesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSpokesRequest>): ListSpokesRequest {
    const message = createBaseListSpokesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListSpokesResponse(): ListSpokesResponse {
  return { spokes: [], nextPageToken: "", unreachable: [] };
}

export const ListSpokesResponse: MessageFns<ListSpokesResponse> = {
  encode(message: ListSpokesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.spokes) {
      Spoke.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpokesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpokesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spokes.push(Spoke.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpokesResponse {
    return {
      spokes: globalThis.Array.isArray(object?.spokes) ? object.spokes.map((e: any) => Spoke.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListSpokesResponse): unknown {
    const obj: any = {};
    if (message.spokes?.length) {
      obj.spokes = message.spokes.map((e) => Spoke.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSpokesResponse>): ListSpokesResponse {
    return ListSpokesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSpokesResponse>): ListSpokesResponse {
    const message = createBaseListSpokesResponse();
    message.spokes = object.spokes?.map((e) => Spoke.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetSpokeRequest(): GetSpokeRequest {
  return { name: "" };
}

export const GetSpokeRequest: MessageFns<GetSpokeRequest> = {
  encode(message: GetSpokeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpokeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpokeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpokeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSpokeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSpokeRequest>): GetSpokeRequest {
    return GetSpokeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSpokeRequest>): GetSpokeRequest {
    const message = createBaseGetSpokeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateSpokeRequest(): CreateSpokeRequest {
  return { parent: "", spokeId: "", spoke: undefined, requestId: "" };
}

export const CreateSpokeRequest: MessageFns<CreateSpokeRequest> = {
  encode(message: CreateSpokeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.spokeId !== "") {
      writer.uint32(18).string(message.spokeId);
    }
    if (message.spoke !== undefined) {
      Spoke.encode(message.spoke, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSpokeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSpokeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spokeId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.spoke = Spoke.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSpokeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      spokeId: isSet(object.spokeId) ? globalThis.String(object.spokeId) : "",
      spoke: isSet(object.spoke) ? Spoke.fromJSON(object.spoke) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateSpokeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.spokeId !== "") {
      obj.spokeId = message.spokeId;
    }
    if (message.spoke !== undefined) {
      obj.spoke = Spoke.toJSON(message.spoke);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSpokeRequest>): CreateSpokeRequest {
    return CreateSpokeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSpokeRequest>): CreateSpokeRequest {
    const message = createBaseCreateSpokeRequest();
    message.parent = object.parent ?? "";
    message.spokeId = object.spokeId ?? "";
    message.spoke = (object.spoke !== undefined && object.spoke !== null) ? Spoke.fromPartial(object.spoke) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateSpokeRequest(): UpdateSpokeRequest {
  return { updateMask: undefined, spoke: undefined, requestId: "" };
}

export const UpdateSpokeRequest: MessageFns<UpdateSpokeRequest> = {
  encode(message: UpdateSpokeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.spoke !== undefined) {
      Spoke.encode(message.spoke, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSpokeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSpokeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.spoke = Spoke.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSpokeRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      spoke: isSet(object.spoke) ? Spoke.fromJSON(object.spoke) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateSpokeRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.spoke !== undefined) {
      obj.spoke = Spoke.toJSON(message.spoke);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSpokeRequest>): UpdateSpokeRequest {
    return UpdateSpokeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSpokeRequest>): UpdateSpokeRequest {
    const message = createBaseUpdateSpokeRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.spoke = (object.spoke !== undefined && object.spoke !== null) ? Spoke.fromPartial(object.spoke) : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteSpokeRequest(): DeleteSpokeRequest {
  return { name: "", requestId: "" };
}

export const DeleteSpokeRequest: MessageFns<DeleteSpokeRequest> = {
  encode(message: DeleteSpokeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSpokeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSpokeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSpokeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteSpokeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSpokeRequest>): DeleteSpokeRequest {
    return DeleteSpokeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSpokeRequest>): DeleteSpokeRequest {
    const message = createBaseDeleteSpokeRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseRouterApplianceInstance(): RouterApplianceInstance {
  return { virtualMachine: "", ipAddress: "", networkInterface: "" };
}

export const RouterApplianceInstance: MessageFns<RouterApplianceInstance> = {
  encode(message: RouterApplianceInstance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.virtualMachine !== "") {
      writer.uint32(10).string(message.virtualMachine);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    if (message.networkInterface !== "") {
      writer.uint32(18).string(message.networkInterface);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouterApplianceInstance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouterApplianceInstance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.virtualMachine = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.networkInterface = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouterApplianceInstance {
    return {
      virtualMachine: isSet(object.virtualMachine) ? globalThis.String(object.virtualMachine) : "",
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : "",
      networkInterface: isSet(object.networkInterface) ? globalThis.String(object.networkInterface) : "",
    };
  },

  toJSON(message: RouterApplianceInstance): unknown {
    const obj: any = {};
    if (message.virtualMachine !== "") {
      obj.virtualMachine = message.virtualMachine;
    }
    if (message.ipAddress !== "") {
      obj.ipAddress = message.ipAddress;
    }
    if (message.networkInterface !== "") {
      obj.networkInterface = message.networkInterface;
    }
    return obj;
  },

  create(base?: DeepPartial<RouterApplianceInstance>): RouterApplianceInstance {
    return RouterApplianceInstance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RouterApplianceInstance>): RouterApplianceInstance {
    const message = createBaseRouterApplianceInstance();
    message.virtualMachine = object.virtualMachine ?? "";
    message.ipAddress = object.ipAddress ?? "";
    message.networkInterface = object.networkInterface ?? "";
    return message;
  },
};

/**
 * Network Connectivity Center is a hub-and-spoke abstraction for
 * network connectivity management in Google Cloud. It reduces
 * operational complexity through a simple, centralized connectivity management
 * model.
 */
export type HubServiceDefinition = typeof HubServiceDefinition;
export const HubServiceDefinition = {
  name: "HubService",
  fullName: "google.cloud.networkconnectivity.v1alpha1.HubService",
  methods: {
    /** Lists Hubs in a given project and location. */
    listHubs: {
      name: "ListHubs",
      requestType: ListHubsRequest,
      requestStream: false,
      responseType: ListHubsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              125,
              47,
              104,
              117,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Hub. */
    getHub: {
      name: "GetHub",
      requestType: GetHubRequest,
      requestStream: false,
      responseType: Hub,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Hub in a given project and location. */
    createHub: {
      name: "CreateHub",
      requestType: CreateHubRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              24,
              10,
              3,
              72,
              117,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 104, 117, 98, 44, 104, 117, 98, 95, 105, 100])],
          578365826: [
            Buffer.from([
              58,
              58,
              3,
              104,
              117,
              98,
              34,
              51,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              125,
              47,
              104,
              117,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single Hub. */
    updateHub: {
      name: "UpdateHub",
      requestType: UpdateHubRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              24,
              10,
              3,
              72,
              117,
              98,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([15, 104, 117, 98, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              62,
              58,
              3,
              104,
              117,
              98,
              50,
              55,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              104,
              117,
              98,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Hub. */
    deleteHub: {
      name: "DeleteHub",
      requestType: DeleteHubRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              104,
              117,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Spokes in a given project and location. */
    listSpokes: {
      name: "ListSpokes",
      requestType: ListSpokesRequest,
      requestStream: false,
      responseType: ListSpokesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              111,
              107,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Spoke. */
    getSpoke: {
      name: "GetSpoke",
      requestType: GetSpokeRequest,
      requestStream: false,
      responseType: Spoke,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              111,
              107,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Spoke in a given project and location. */
    createSpoke: {
      name: "CreateSpoke",
      requestType: CreateSpokeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              26,
              10,
              5,
              83,
              112,
              111,
              107,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              112,
              111,
              107,
              101,
              44,
              115,
              112,
              111,
              107,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              57,
              58,
              5,
              115,
              112,
              111,
              107,
              101,
              34,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              111,
              107,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single Spoke. */
    updateSpoke: {
      name: "UpdateSpoke",
      requestType: UpdateSpokeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              26,
              10,
              5,
              83,
              112,
              111,
              107,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 115, 112, 111, 107, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              63,
              58,
              5,
              115,
              112,
              111,
              107,
              101,
              50,
              54,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              115,
              112,
              111,
              107,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              111,
              107,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Spoke. */
    deleteSpoke: {
      name: "DeleteSpoke",
      requestType: DeleteSpokeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              97,
              108,
              112,
              104,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              111,
              107,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface HubServiceImplementation<CallContextExt = {}> {
  /** Lists Hubs in a given project and location. */
  listHubs(request: ListHubsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListHubsResponse>>;
  /** Gets details of a single Hub. */
  getHub(request: GetHubRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Hub>>;
  /** Creates a new Hub in a given project and location. */
  createHub(request: CreateHubRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single Hub. */
  updateHub(request: UpdateHubRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a single Hub. */
  deleteHub(request: DeleteHubRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists Spokes in a given project and location. */
  listSpokes(
    request: ListSpokesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSpokesResponse>>;
  /** Gets details of a single Spoke. */
  getSpoke(request: GetSpokeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Spoke>>;
  /** Creates a new Spoke in a given project and location. */
  createSpoke(request: CreateSpokeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single Spoke. */
  updateSpoke(request: UpdateSpokeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a single Spoke. */
  deleteSpoke(request: DeleteSpokeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface HubServiceClient<CallOptionsExt = {}> {
  /** Lists Hubs in a given project and location. */
  listHubs(request: DeepPartial<ListHubsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListHubsResponse>;
  /** Gets details of a single Hub. */
  getHub(request: DeepPartial<GetHubRequest>, options?: CallOptions & CallOptionsExt): Promise<Hub>;
  /** Creates a new Hub in a given project and location. */
  createHub(request: DeepPartial<CreateHubRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the parameters of a single Hub. */
  updateHub(request: DeepPartial<UpdateHubRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a single Hub. */
  deleteHub(request: DeepPartial<DeleteHubRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists Spokes in a given project and location. */
  listSpokes(
    request: DeepPartial<ListSpokesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSpokesResponse>;
  /** Gets details of a single Spoke. */
  getSpoke(request: DeepPartial<GetSpokeRequest>, options?: CallOptions & CallOptionsExt): Promise<Spoke>;
  /** Creates a new Spoke in a given project and location. */
  createSpoke(request: DeepPartial<CreateSpokeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates the parameters of a single Spoke. */
  updateSpoke(request: DeepPartial<UpdateSpokeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a single Spoke. */
  deleteSpoke(request: DeepPartial<DeleteSpokeRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
