// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/recommender/v1beta1/recommender_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Insight, InsightType } from "./insight.js";
import { InsightTypeConfig } from "./insight_type_config.js";
import { Recommendation, RecommenderType } from "./recommendation.js";
import { RecommenderConfig } from "./recommender_config.js";

export const protobufPackage = "google.cloud.recommender.v1beta1";

/** Request for the `ListInsights` method. */
export interface ListInsightsRequest {
  /**
   * Required. The container resource on which to execute the request.
   * Acceptable formats:
   *
   * * `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
   *
   * * `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
   *
   * * `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
   *
   * * `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
   *
   * * `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]`
   *
   * LOCATION here refers to GCP Locations:
   * https://cloud.google.com/about/locations/
   * INSIGHT_TYPE_ID refers to supported insight types:
   * https://cloud.google.com/recommender/docs/insights/insight-types.
   */
  parent: string;
  /**
   * Optional. The maximum number of results to return from this request.
   * Non-positive values are ignored. If not specified, the server will
   * determine the number of results to return.
   */
  pageSize: number;
  /**
   * Optional. If present, retrieves the next batch of results from the
   * preceding call to this method. `page_token` must be the value of
   * `next_page_token` from the previous response. The values of other method
   * parameters must be identical to those in the previous call.
   */
  pageToken: string;
  /**
   * Optional. Filter expression to restrict the insights returned. Supported
   * filter fields:
   *
   * * `stateInfo.state`
   *
   * * `insightSubtype`
   *
   * * `severity`
   *
   * Examples:
   *
   * * `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED`
   *
   * * `insightSubtype = PERMISSIONS_USAGE`
   *
   * * `severity = CRITICAL OR severity = HIGH`
   *
   * * `stateInfo.state = ACTIVE AND (severity = CRITICAL OR severity = HIGH)`
   *
   * (These expressions are based on the filter language described at
   * https://google.aip.dev/160)
   */
  filter: string;
}

/** Response to the `ListInsights` method. */
export interface ListInsightsResponse {
  /** The set of insights for the `parent` resource. */
  insights: Insight[];
  /**
   * A token that can be used to request the next page of results. This field is
   * empty if there are no additional results.
   */
  nextPageToken: string;
}

/** Request to the `GetInsight` method. */
export interface GetInsightRequest {
  /** Required. Name of the insight. */
  name: string;
}

/** Request for the `MarkInsightAccepted` method. */
export interface MarkInsightAcceptedRequest {
  /** Required. Name of the insight. */
  name: string;
  /**
   * Optional. State properties user wish to include with this state.  Full
   * replace of the current state_metadata.
   */
  stateMetadata: { [key: string]: string };
  /** Required. Fingerprint of the Insight. Provides optimistic locking. */
  etag: string;
}

export interface MarkInsightAcceptedRequest_StateMetadataEntry {
  key: string;
  value: string;
}

/** Request for the `ListRecommendations` method. */
export interface ListRecommendationsRequest {
  /**
   * Required. The container resource on which to execute the request.
   * Acceptable formats:
   *
   * * `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
   *
   * * `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
   *
   * * `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
   *
   * * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
   *
   * * `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]`
   *
   * LOCATION here refers to GCP Locations:
   * https://cloud.google.com/about/locations/
   * RECOMMENDER_ID refers to supported recommenders:
   * https://cloud.google.com/recommender/docs/recommenders.
   */
  parent: string;
  /**
   * Optional. The maximum number of results to return from this request.
   * Non-positive values are ignored. If not specified, the server will
   * determine the number of results to return.
   */
  pageSize: number;
  /**
   * Optional. If present, retrieves the next batch of results from the
   * preceding call to this method. `page_token` must be the value of
   * `next_page_token` from the previous response. The values of other method
   * parameters must be identical to those in the previous call.
   */
  pageToken: string;
  /**
   * Filter expression to restrict the recommendations returned. Supported
   * filter fields:
   *
   * * `state_info.state`
   *
   * * `recommenderSubtype`
   *
   * * `priority`
   *
   * Examples:
   *
   * * `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED`
   *
   * * `recommenderSubtype = REMOVE_ROLE OR recommenderSubtype = REPLACE_ROLE`
   *
   * * `priority = P1 OR priority = P2`
   *
   * * `stateInfo.state = ACTIVE AND (priority = P1 OR priority = P2)`
   *
   * (These expressions are based on the filter language described at
   * https://google.aip.dev/160)
   */
  filter: string;
}

/** Response to the `ListRecommendations` method. */
export interface ListRecommendationsResponse {
  /** The set of recommendations for the `parent` resource. */
  recommendations: Recommendation[];
  /**
   * A token that can be used to request the next page of results. This field is
   * empty if there are no additional results.
   */
  nextPageToken: string;
}

/** Request to the `GetRecommendation` method. */
export interface GetRecommendationRequest {
  /** Required. Name of the recommendation. */
  name: string;
}

/** Request for the `MarkRecommendationClaimed` Method. */
export interface MarkRecommendationClaimedRequest {
  /** Required. Name of the recommendation. */
  name: string;
  /**
   * State properties to include with this state. Overwrites any existing
   * `state_metadata`.
   * Keys must match the regex `/^[a-z0-9][a-z0-9_.-]{0,62}$/`.
   * Values must match the regex `/^[a-zA-Z0-9_./-]{0,255}$/`.
   */
  stateMetadata: { [key: string]: string };
  /** Required. Fingerprint of the Recommendation. Provides optimistic locking. */
  etag: string;
}

export interface MarkRecommendationClaimedRequest_StateMetadataEntry {
  key: string;
  value: string;
}

/** Request for the `MarkRecommendationSucceeded` Method. */
export interface MarkRecommendationSucceededRequest {
  /** Required. Name of the recommendation. */
  name: string;
  /**
   * State properties to include with this state. Overwrites any existing
   * `state_metadata`.
   * Keys must match the regex `/^[a-z0-9][a-z0-9_.-]{0,62}$/`.
   * Values must match the regex `/^[a-zA-Z0-9_./-]{0,255}$/`.
   */
  stateMetadata: { [key: string]: string };
  /** Required. Fingerprint of the Recommendation. Provides optimistic locking. */
  etag: string;
}

export interface MarkRecommendationSucceededRequest_StateMetadataEntry {
  key: string;
  value: string;
}

/** Request for the `MarkRecommendationFailed` Method. */
export interface MarkRecommendationFailedRequest {
  /** Required. Name of the recommendation. */
  name: string;
  /**
   * State properties to include with this state. Overwrites any existing
   * `state_metadata`.
   * Keys must match the regex `/^[a-z0-9][a-z0-9_.-]{0,62}$/`.
   * Values must match the regex `/^[a-zA-Z0-9_./-]{0,255}$/`.
   */
  stateMetadata: { [key: string]: string };
  /** Required. Fingerprint of the Recommendation. Provides optimistic locking. */
  etag: string;
}

export interface MarkRecommendationFailedRequest_StateMetadataEntry {
  key: string;
  value: string;
}

/** Request for the GetRecommenderConfig` method. */
export interface GetRecommenderConfigRequest {
  /**
   * Required. Name of the Recommendation Config to get.
   *
   * Acceptable formats:
   *
   * * `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
   *
   * * `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
   *
   * * `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config`
   */
  name: string;
}

/** Request for the `UpdateRecommenderConfig` method. */
export interface UpdateRecommenderConfigRequest {
  /** Required. The RecommenderConfig to update. */
  recommenderConfig:
    | RecommenderConfig
    | undefined;
  /** The list of fields to be updated. */
  updateMask:
    | string[]
    | undefined;
  /**
   * If true, validate the request and preview the change, but do not actually
   * update it.
   */
  validateOnly: boolean;
}

/** Request for the GetInsightTypeConfig` method. */
export interface GetInsightTypeConfigRequest {
  /**
   * Required. Name of the InsightTypeConfig to get.
   *
   * Acceptable formats:
   *
   * * `projects/[PROJECT_NUMBER]/locations/global/recommenders/[INSIGHT_TYPE_ID]/config`
   *
   * * `projects/[PROJECT_ID]/locations/global/recommenders/[INSIGHT_TYPE_ID]/config`
   *
   * * `organizations/[ORGANIZATION_ID]/locations/global/recommenders/[INSIGHT_TYPE_ID]/config`
   */
  name: string;
}

/** Request for the `UpdateInsightTypeConfig` method. */
export interface UpdateInsightTypeConfigRequest {
  /** Required. The InsightTypeConfig to update. */
  insightTypeConfig:
    | InsightTypeConfig
    | undefined;
  /** The list of fields to be updated. */
  updateMask:
    | string[]
    | undefined;
  /**
   * If true, validate the request and preview the change, but do not actually
   * update it.
   */
  validateOnly: boolean;
}

/** Request for the `ListRecommender` method. */
export interface ListRecommendersRequest {
  /**
   * The number of RecommenderTypes to return per page. The service may return
   * fewer than this value.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListRecommenders` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
}

/** Response for the `ListRecommender` method. */
export interface ListRecommendersResponse {
  /** The set of recommenders available */
  recommenders: RecommenderType[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request for the `ListInsightTypes` method. */
export interface ListInsightTypesRequest {
  /**
   * The number of InsightTypes to return per page. The service may return
   * fewer than this value.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListRecommenders` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
}

/** Response for the `ListInsightTypes` method. */
export interface ListInsightTypesResponse {
  /** The set of recommenders available */
  insightTypes: InsightType[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseListInsightsRequest(): ListInsightsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListInsightsRequest: MessageFns<ListInsightsRequest> = {
  encode(message: ListInsightsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInsightsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInsightsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInsightsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListInsightsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInsightsRequest>): ListInsightsRequest {
    return ListInsightsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInsightsRequest>): ListInsightsRequest {
    const message = createBaseListInsightsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListInsightsResponse(): ListInsightsResponse {
  return { insights: [], nextPageToken: "" };
}

export const ListInsightsResponse: MessageFns<ListInsightsResponse> = {
  encode(message: ListInsightsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.insights) {
      Insight.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInsightsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInsightsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.insights.push(Insight.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInsightsResponse {
    return {
      insights: globalThis.Array.isArray(object?.insights) ? object.insights.map((e: any) => Insight.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListInsightsResponse): unknown {
    const obj: any = {};
    if (message.insights?.length) {
      obj.insights = message.insights.map((e) => Insight.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInsightsResponse>): ListInsightsResponse {
    return ListInsightsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInsightsResponse>): ListInsightsResponse {
    const message = createBaseListInsightsResponse();
    message.insights = object.insights?.map((e) => Insight.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetInsightRequest(): GetInsightRequest {
  return { name: "" };
}

export const GetInsightRequest: MessageFns<GetInsightRequest> = {
  encode(message: GetInsightRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInsightRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInsightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInsightRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInsightRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInsightRequest>): GetInsightRequest {
    return GetInsightRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInsightRequest>): GetInsightRequest {
    const message = createBaseGetInsightRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseMarkInsightAcceptedRequest(): MarkInsightAcceptedRequest {
  return { name: "", stateMetadata: {}, etag: "" };
}

export const MarkInsightAcceptedRequest: MessageFns<MarkInsightAcceptedRequest> = {
  encode(message: MarkInsightAcceptedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.stateMetadata).forEach(([key, value]) => {
      MarkInsightAcceptedRequest_StateMetadataEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkInsightAcceptedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkInsightAcceptedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = MarkInsightAcceptedRequest_StateMetadataEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.stateMetadata[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkInsightAcceptedRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      stateMetadata: isObject(object.stateMetadata)
        ? Object.entries(object.stateMetadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: MarkInsightAcceptedRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stateMetadata) {
      const entries = Object.entries(message.stateMetadata);
      if (entries.length > 0) {
        obj.stateMetadata = {};
        entries.forEach(([k, v]) => {
          obj.stateMetadata[k] = v;
        });
      }
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<MarkInsightAcceptedRequest>): MarkInsightAcceptedRequest {
    return MarkInsightAcceptedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MarkInsightAcceptedRequest>): MarkInsightAcceptedRequest {
    const message = createBaseMarkInsightAcceptedRequest();
    message.name = object.name ?? "";
    message.stateMetadata = Object.entries(object.stateMetadata ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseMarkInsightAcceptedRequest_StateMetadataEntry(): MarkInsightAcceptedRequest_StateMetadataEntry {
  return { key: "", value: "" };
}

export const MarkInsightAcceptedRequest_StateMetadataEntry: MessageFns<MarkInsightAcceptedRequest_StateMetadataEntry> =
  {
    encode(
      message: MarkInsightAcceptedRequest_StateMetadataEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): MarkInsightAcceptedRequest_StateMetadataEntry {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMarkInsightAcceptedRequest_StateMetadataEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.value = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): MarkInsightAcceptedRequest_StateMetadataEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value) ? globalThis.String(object.value) : "",
      };
    },

    toJSON(message: MarkInsightAcceptedRequest_StateMetadataEntry): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== "") {
        obj.value = message.value;
      }
      return obj;
    },

    create(
      base?: DeepPartial<MarkInsightAcceptedRequest_StateMetadataEntry>,
    ): MarkInsightAcceptedRequest_StateMetadataEntry {
      return MarkInsightAcceptedRequest_StateMetadataEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<MarkInsightAcceptedRequest_StateMetadataEntry>,
    ): MarkInsightAcceptedRequest_StateMetadataEntry {
      const message = createBaseMarkInsightAcceptedRequest_StateMetadataEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    },
  };

function createBaseListRecommendationsRequest(): ListRecommendationsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListRecommendationsRequest: MessageFns<ListRecommendationsRequest> = {
  encode(message: ListRecommendationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRecommendationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRecommendationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRecommendationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListRecommendationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRecommendationsRequest>): ListRecommendationsRequest {
    return ListRecommendationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRecommendationsRequest>): ListRecommendationsRequest {
    const message = createBaseListRecommendationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListRecommendationsResponse(): ListRecommendationsResponse {
  return { recommendations: [], nextPageToken: "" };
}

export const ListRecommendationsResponse: MessageFns<ListRecommendationsResponse> = {
  encode(message: ListRecommendationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.recommendations) {
      Recommendation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRecommendationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRecommendationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.recommendations.push(Recommendation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRecommendationsResponse {
    return {
      recommendations: globalThis.Array.isArray(object?.recommendations)
        ? object.recommendations.map((e: any) => Recommendation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRecommendationsResponse): unknown {
    const obj: any = {};
    if (message.recommendations?.length) {
      obj.recommendations = message.recommendations.map((e) => Recommendation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRecommendationsResponse>): ListRecommendationsResponse {
    return ListRecommendationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRecommendationsResponse>): ListRecommendationsResponse {
    const message = createBaseListRecommendationsResponse();
    message.recommendations = object.recommendations?.map((e) => Recommendation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetRecommendationRequest(): GetRecommendationRequest {
  return { name: "" };
}

export const GetRecommendationRequest: MessageFns<GetRecommendationRequest> = {
  encode(message: GetRecommendationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRecommendationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRecommendationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRecommendationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRecommendationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRecommendationRequest>): GetRecommendationRequest {
    return GetRecommendationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRecommendationRequest>): GetRecommendationRequest {
    const message = createBaseGetRecommendationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseMarkRecommendationClaimedRequest(): MarkRecommendationClaimedRequest {
  return { name: "", stateMetadata: {}, etag: "" };
}

export const MarkRecommendationClaimedRequest: MessageFns<MarkRecommendationClaimedRequest> = {
  encode(message: MarkRecommendationClaimedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.stateMetadata).forEach(([key, value]) => {
      MarkRecommendationClaimedRequest_StateMetadataEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkRecommendationClaimedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkRecommendationClaimedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = MarkRecommendationClaimedRequest_StateMetadataEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.stateMetadata[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkRecommendationClaimedRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      stateMetadata: isObject(object.stateMetadata)
        ? Object.entries(object.stateMetadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: MarkRecommendationClaimedRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stateMetadata) {
      const entries = Object.entries(message.stateMetadata);
      if (entries.length > 0) {
        obj.stateMetadata = {};
        entries.forEach(([k, v]) => {
          obj.stateMetadata[k] = v;
        });
      }
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<MarkRecommendationClaimedRequest>): MarkRecommendationClaimedRequest {
    return MarkRecommendationClaimedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MarkRecommendationClaimedRequest>): MarkRecommendationClaimedRequest {
    const message = createBaseMarkRecommendationClaimedRequest();
    message.name = object.name ?? "";
    message.stateMetadata = Object.entries(object.stateMetadata ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseMarkRecommendationClaimedRequest_StateMetadataEntry(): MarkRecommendationClaimedRequest_StateMetadataEntry {
  return { key: "", value: "" };
}

export const MarkRecommendationClaimedRequest_StateMetadataEntry: MessageFns<
  MarkRecommendationClaimedRequest_StateMetadataEntry
> = {
  encode(
    message: MarkRecommendationClaimedRequest_StateMetadataEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkRecommendationClaimedRequest_StateMetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkRecommendationClaimedRequest_StateMetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkRecommendationClaimedRequest_StateMetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MarkRecommendationClaimedRequest_StateMetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<MarkRecommendationClaimedRequest_StateMetadataEntry>,
  ): MarkRecommendationClaimedRequest_StateMetadataEntry {
    return MarkRecommendationClaimedRequest_StateMetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MarkRecommendationClaimedRequest_StateMetadataEntry>,
  ): MarkRecommendationClaimedRequest_StateMetadataEntry {
    const message = createBaseMarkRecommendationClaimedRequest_StateMetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMarkRecommendationSucceededRequest(): MarkRecommendationSucceededRequest {
  return { name: "", stateMetadata: {}, etag: "" };
}

export const MarkRecommendationSucceededRequest: MessageFns<MarkRecommendationSucceededRequest> = {
  encode(message: MarkRecommendationSucceededRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.stateMetadata).forEach(([key, value]) => {
      MarkRecommendationSucceededRequest_StateMetadataEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkRecommendationSucceededRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkRecommendationSucceededRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = MarkRecommendationSucceededRequest_StateMetadataEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.stateMetadata[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkRecommendationSucceededRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      stateMetadata: isObject(object.stateMetadata)
        ? Object.entries(object.stateMetadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: MarkRecommendationSucceededRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stateMetadata) {
      const entries = Object.entries(message.stateMetadata);
      if (entries.length > 0) {
        obj.stateMetadata = {};
        entries.forEach(([k, v]) => {
          obj.stateMetadata[k] = v;
        });
      }
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<MarkRecommendationSucceededRequest>): MarkRecommendationSucceededRequest {
    return MarkRecommendationSucceededRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MarkRecommendationSucceededRequest>): MarkRecommendationSucceededRequest {
    const message = createBaseMarkRecommendationSucceededRequest();
    message.name = object.name ?? "";
    message.stateMetadata = Object.entries(object.stateMetadata ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseMarkRecommendationSucceededRequest_StateMetadataEntry(): MarkRecommendationSucceededRequest_StateMetadataEntry {
  return { key: "", value: "" };
}

export const MarkRecommendationSucceededRequest_StateMetadataEntry: MessageFns<
  MarkRecommendationSucceededRequest_StateMetadataEntry
> = {
  encode(
    message: MarkRecommendationSucceededRequest_StateMetadataEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkRecommendationSucceededRequest_StateMetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkRecommendationSucceededRequest_StateMetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkRecommendationSucceededRequest_StateMetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MarkRecommendationSucceededRequest_StateMetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<MarkRecommendationSucceededRequest_StateMetadataEntry>,
  ): MarkRecommendationSucceededRequest_StateMetadataEntry {
    return MarkRecommendationSucceededRequest_StateMetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MarkRecommendationSucceededRequest_StateMetadataEntry>,
  ): MarkRecommendationSucceededRequest_StateMetadataEntry {
    const message = createBaseMarkRecommendationSucceededRequest_StateMetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMarkRecommendationFailedRequest(): MarkRecommendationFailedRequest {
  return { name: "", stateMetadata: {}, etag: "" };
}

export const MarkRecommendationFailedRequest: MessageFns<MarkRecommendationFailedRequest> = {
  encode(message: MarkRecommendationFailedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.stateMetadata).forEach(([key, value]) => {
      MarkRecommendationFailedRequest_StateMetadataEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    if (message.etag !== "") {
      writer.uint32(26).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkRecommendationFailedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkRecommendationFailedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = MarkRecommendationFailedRequest_StateMetadataEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.stateMetadata[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkRecommendationFailedRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      stateMetadata: isObject(object.stateMetadata)
        ? Object.entries(object.stateMetadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: MarkRecommendationFailedRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.stateMetadata) {
      const entries = Object.entries(message.stateMetadata);
      if (entries.length > 0) {
        obj.stateMetadata = {};
        entries.forEach(([k, v]) => {
          obj.stateMetadata[k] = v;
        });
      }
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<MarkRecommendationFailedRequest>): MarkRecommendationFailedRequest {
    return MarkRecommendationFailedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MarkRecommendationFailedRequest>): MarkRecommendationFailedRequest {
    const message = createBaseMarkRecommendationFailedRequest();
    message.name = object.name ?? "";
    message.stateMetadata = Object.entries(object.stateMetadata ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseMarkRecommendationFailedRequest_StateMetadataEntry(): MarkRecommendationFailedRequest_StateMetadataEntry {
  return { key: "", value: "" };
}

export const MarkRecommendationFailedRequest_StateMetadataEntry: MessageFns<
  MarkRecommendationFailedRequest_StateMetadataEntry
> = {
  encode(
    message: MarkRecommendationFailedRequest_StateMetadataEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkRecommendationFailedRequest_StateMetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkRecommendationFailedRequest_StateMetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkRecommendationFailedRequest_StateMetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MarkRecommendationFailedRequest_StateMetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<MarkRecommendationFailedRequest_StateMetadataEntry>,
  ): MarkRecommendationFailedRequest_StateMetadataEntry {
    return MarkRecommendationFailedRequest_StateMetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MarkRecommendationFailedRequest_StateMetadataEntry>,
  ): MarkRecommendationFailedRequest_StateMetadataEntry {
    const message = createBaseMarkRecommendationFailedRequest_StateMetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetRecommenderConfigRequest(): GetRecommenderConfigRequest {
  return { name: "" };
}

export const GetRecommenderConfigRequest: MessageFns<GetRecommenderConfigRequest> = {
  encode(message: GetRecommenderConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRecommenderConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRecommenderConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRecommenderConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRecommenderConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRecommenderConfigRequest>): GetRecommenderConfigRequest {
    return GetRecommenderConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRecommenderConfigRequest>): GetRecommenderConfigRequest {
    const message = createBaseGetRecommenderConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateRecommenderConfigRequest(): UpdateRecommenderConfigRequest {
  return { recommenderConfig: undefined, updateMask: undefined, validateOnly: false };
}

export const UpdateRecommenderConfigRequest: MessageFns<UpdateRecommenderConfigRequest> = {
  encode(message: UpdateRecommenderConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recommenderConfig !== undefined) {
      RecommenderConfig.encode(message.recommenderConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRecommenderConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRecommenderConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.recommenderConfig = RecommenderConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRecommenderConfigRequest {
    return {
      recommenderConfig: isSet(object.recommenderConfig)
        ? RecommenderConfig.fromJSON(object.recommenderConfig)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateRecommenderConfigRequest): unknown {
    const obj: any = {};
    if (message.recommenderConfig !== undefined) {
      obj.recommenderConfig = RecommenderConfig.toJSON(message.recommenderConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRecommenderConfigRequest>): UpdateRecommenderConfigRequest {
    return UpdateRecommenderConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRecommenderConfigRequest>): UpdateRecommenderConfigRequest {
    const message = createBaseUpdateRecommenderConfigRequest();
    message.recommenderConfig = (object.recommenderConfig !== undefined && object.recommenderConfig !== null)
      ? RecommenderConfig.fromPartial(object.recommenderConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseGetInsightTypeConfigRequest(): GetInsightTypeConfigRequest {
  return { name: "" };
}

export const GetInsightTypeConfigRequest: MessageFns<GetInsightTypeConfigRequest> = {
  encode(message: GetInsightTypeConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInsightTypeConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInsightTypeConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInsightTypeConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInsightTypeConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInsightTypeConfigRequest>): GetInsightTypeConfigRequest {
    return GetInsightTypeConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInsightTypeConfigRequest>): GetInsightTypeConfigRequest {
    const message = createBaseGetInsightTypeConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateInsightTypeConfigRequest(): UpdateInsightTypeConfigRequest {
  return { insightTypeConfig: undefined, updateMask: undefined, validateOnly: false };
}

export const UpdateInsightTypeConfigRequest: MessageFns<UpdateInsightTypeConfigRequest> = {
  encode(message: UpdateInsightTypeConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.insightTypeConfig !== undefined) {
      InsightTypeConfig.encode(message.insightTypeConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateInsightTypeConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateInsightTypeConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.insightTypeConfig = InsightTypeConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateInsightTypeConfigRequest {
    return {
      insightTypeConfig: isSet(object.insightTypeConfig)
        ? InsightTypeConfig.fromJSON(object.insightTypeConfig)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateInsightTypeConfigRequest): unknown {
    const obj: any = {};
    if (message.insightTypeConfig !== undefined) {
      obj.insightTypeConfig = InsightTypeConfig.toJSON(message.insightTypeConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateInsightTypeConfigRequest>): UpdateInsightTypeConfigRequest {
    return UpdateInsightTypeConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateInsightTypeConfigRequest>): UpdateInsightTypeConfigRequest {
    const message = createBaseUpdateInsightTypeConfigRequest();
    message.insightTypeConfig = (object.insightTypeConfig !== undefined && object.insightTypeConfig !== null)
      ? InsightTypeConfig.fromPartial(object.insightTypeConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseListRecommendersRequest(): ListRecommendersRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListRecommendersRequest: MessageFns<ListRecommendersRequest> = {
  encode(message: ListRecommendersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRecommendersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRecommendersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRecommendersRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListRecommendersRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRecommendersRequest>): ListRecommendersRequest {
    return ListRecommendersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRecommendersRequest>): ListRecommendersRequest {
    const message = createBaseListRecommendersRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListRecommendersResponse(): ListRecommendersResponse {
  return { recommenders: [], nextPageToken: "" };
}

export const ListRecommendersResponse: MessageFns<ListRecommendersResponse> = {
  encode(message: ListRecommendersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.recommenders) {
      RecommenderType.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRecommendersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRecommendersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.recommenders.push(RecommenderType.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRecommendersResponse {
    return {
      recommenders: globalThis.Array.isArray(object?.recommenders)
        ? object.recommenders.map((e: any) => RecommenderType.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRecommendersResponse): unknown {
    const obj: any = {};
    if (message.recommenders?.length) {
      obj.recommenders = message.recommenders.map((e) => RecommenderType.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRecommendersResponse>): ListRecommendersResponse {
    return ListRecommendersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRecommendersResponse>): ListRecommendersResponse {
    const message = createBaseListRecommendersResponse();
    message.recommenders = object.recommenders?.map((e) => RecommenderType.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListInsightTypesRequest(): ListInsightTypesRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListInsightTypesRequest: MessageFns<ListInsightTypesRequest> = {
  encode(message: ListInsightTypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInsightTypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInsightTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInsightTypesRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListInsightTypesRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInsightTypesRequest>): ListInsightTypesRequest {
    return ListInsightTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInsightTypesRequest>): ListInsightTypesRequest {
    const message = createBaseListInsightTypesRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListInsightTypesResponse(): ListInsightTypesResponse {
  return { insightTypes: [], nextPageToken: "" };
}

export const ListInsightTypesResponse: MessageFns<ListInsightTypesResponse> = {
  encode(message: ListInsightTypesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.insightTypes) {
      InsightType.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInsightTypesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInsightTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.insightTypes.push(InsightType.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInsightTypesResponse {
    return {
      insightTypes: globalThis.Array.isArray(object?.insightTypes)
        ? object.insightTypes.map((e: any) => InsightType.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListInsightTypesResponse): unknown {
    const obj: any = {};
    if (message.insightTypes?.length) {
      obj.insightTypes = message.insightTypes.map((e) => InsightType.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInsightTypesResponse>): ListInsightTypesResponse {
    return ListInsightTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInsightTypesResponse>): ListInsightTypesResponse {
    const message = createBaseListInsightTypesResponse();
    message.insightTypes = object.insightTypes?.map((e) => InsightType.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * Provides insights and recommendations for cloud customers for various
 * categories like performance optimization, cost savings, reliability, feature
 * discovery, etc. Insights and recommendations are generated automatically
 * based on analysis of user resources, configuration and monitoring metrics.
 */
export type RecommenderDefinition = typeof RecommenderDefinition;
export const RecommenderDefinition = {
  name: "Recommender",
  fullName: "google.cloud.recommender.v1beta1.Recommender",
  methods: {
    /**
     * Lists insights for the specified Cloud Resource. Requires the
     * recommender.*.list IAM permission for the specified insight type.
     */
    listInsights: {
      name: "ListInsights",
      requestType: ListInsightsRequest,
      requestStream: false,
      responseType: ListInsightsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              153,
              2,
              90,
              73,
              18,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              90,
              65,
              18,
              63,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              90,
              71,
              18,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              18,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the requested insight. Requires the recommender.*.get IAM permission
     * for the specified insight type.
     */
    getInsight: {
      name: "GetInsight",
      requestType: GetInsightRequest,
      requestStream: false,
      responseType: Insight,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              153,
              2,
              90,
              73,
              18,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              47,
              42,
              125,
              90,
              65,
              18,
              63,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              47,
              42,
              125,
              90,
              71,
              18,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              47,
              42,
              125,
              18,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Marks the Insight State as Accepted. Users can use this method to
     * indicate to the Recommender API that they have applied some action based
     * on the insight. This stops the insight content from being updated.
     *
     * MarkInsightAccepted can be applied to insights in ACTIVE state. Requires
     * the recommender.*.update IAM permission for the specified insight.
     */
    markInsightAccepted: {
      name: "MarkInsightAccepted",
      requestType: MarkInsightAcceptedRequest,
      requestStream: false,
      responseType: Insight,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              110,
              97,
              109,
              101,
              44,
              115,
              116,
              97,
              116,
              101,
              95,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              44,
              101,
              116,
              97,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              217,
              2,
              58,
              1,
              42,
              90,
              89,
              58,
              1,
              42,
              34,
              84,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              65,
              99,
              99,
              101,
              112,
              116,
              101,
              100,
              90,
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              65,
              99,
              99,
              101,
              112,
              116,
              101,
              100,
              90,
              87,
              58,
              1,
              42,
              34,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              65,
              99,
              99,
              101,
              112,
              116,
              101,
              100,
              34,
              77,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              65,
              99,
              99,
              101,
              112,
              116,
              101,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Lists recommendations for the specified Cloud Resource. Requires the
     * recommender.*.list IAM permission for the specified recommender.
     */
    listRecommendations: {
      name: "ListRecommendations",
      requestType: ListRecommendationsRequest,
      requestStream: false,
      responseType: ListRecommendationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              181,
              2,
              90,
              80,
              18,
              78,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              90,
              72,
              18,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              90,
              78,
              18,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the requested recommendation. Requires the recommender.*.get
     * IAM permission for the specified recommender.
     */
    getRecommendation: {
      name: "GetRecommendation",
      requestType: GetRecommendationRequest,
      requestStream: false,
      responseType: Recommendation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              181,
              2,
              90,
              80,
              18,
              78,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              72,
              18,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              90,
              78,
              18,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              18,
              71,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Marks the Recommendation State as Claimed. Users can use this method to
     * indicate to the Recommender API that they are starting to apply the
     * recommendation themselves. This stops the recommendation content from being
     * updated. Associated insights are frozen and placed in the ACCEPTED state.
     *
     * MarkRecommendationClaimed can be applied to recommendations in CLAIMED or
     * ACTIVE state.
     *
     * Requires the recommender.*.update IAM permission for the specified
     * recommender.
     */
    markRecommendationClaimed: {
      name: "MarkRecommendationClaimed",
      requestType: MarkRecommendationClaimedRequest,
      requestStream: false,
      responseType: Recommendation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              110,
              97,
              109,
              101,
              44,
              115,
              116,
              97,
              116,
              101,
              95,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              44,
              101,
              116,
              97,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              241,
              2,
              58,
              1,
              42,
              90,
              95,
              58,
              1,
              42,
              34,
              90,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              90,
              87,
              58,
              1,
              42,
              34,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              90,
              93,
              58,
              1,
              42,
              34,
              88,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              34,
              83,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Marks the Recommendation State as Succeeded. Users can use this method to
     * indicate to the Recommender API that they have applied the recommendation
     * themselves, and the operation was successful. This stops the recommendation
     * content from being updated. Associated insights are frozen and placed in
     * the ACCEPTED state.
     *
     * MarkRecommendationSucceeded can be applied to recommendations in ACTIVE,
     * CLAIMED, SUCCEEDED, or FAILED state.
     *
     * Requires the recommender.*.update IAM permission for the specified
     * recommender.
     */
    markRecommendationSucceeded: {
      name: "MarkRecommendationSucceeded",
      requestType: MarkRecommendationSucceededRequest,
      requestStream: false,
      responseType: Recommendation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              110,
              97,
              109,
              101,
              44,
              115,
              116,
              97,
              116,
              101,
              95,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              44,
              101,
              116,
              97,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              249,
              2,
              58,
              1,
              42,
              90,
              97,
              58,
              1,
              42,
              34,
              92,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              83,
              117,
              99,
              99,
              101,
              101,
              100,
              101,
              100,
              90,
              89,
              58,
              1,
              42,
              34,
              84,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              83,
              117,
              99,
              99,
              101,
              101,
              100,
              101,
              100,
              90,
              95,
              58,
              1,
              42,
              34,
              90,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              83,
              117,
              99,
              99,
              101,
              101,
              100,
              101,
              100,
              34,
              85,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              83,
              117,
              99,
              99,
              101,
              101,
              100,
              101,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Marks the Recommendation State as Failed. Users can use this method to
     * indicate to the Recommender API that they have applied the recommendation
     * themselves, and the operation failed. This stops the recommendation content
     * from being updated. Associated insights are frozen and placed in the
     * ACCEPTED state.
     *
     * MarkRecommendationFailed can be applied to recommendations in ACTIVE,
     * CLAIMED, SUCCEEDED, or FAILED state.
     *
     * Requires the recommender.*.update IAM permission for the specified
     * recommender.
     */
    markRecommendationFailed: {
      name: "MarkRecommendationFailed",
      requestType: MarkRecommendationFailedRequest,
      requestStream: false,
      responseType: Recommendation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              110,
              97,
              109,
              101,
              44,
              115,
              116,
              97,
              116,
              101,
              95,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              44,
              101,
              116,
              97,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              237,
              2,
              58,
              1,
              42,
              90,
              94,
              58,
              1,
              42,
              34,
              89,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              70,
              97,
              105,
              108,
              101,
              100,
              90,
              86,
              58,
              1,
              42,
              34,
              81,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              70,
              97,
              105,
              108,
              101,
              100,
              90,
              92,
              58,
              1,
              42,
              34,
              87,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              70,
              97,
              105,
              108,
              101,
              100,
              34,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              109,
              97,
              114,
              107,
              70,
              97,
              105,
              108,
              101,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the requested Recommender Config. There is only one instance of the
     * config for each Recommender.
     */
    getRecommenderConfig: {
      name: "GetRecommenderConfig",
      requestType: GetRecommenderConfigRequest,
      requestStream: false,
      responseType: RecommenderConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              131,
              1,
              90,
              67,
              18,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              125,
              18,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a Recommender Config. This will create a new revision of the
     * config.
     */
    updateRecommenderConfig: {
      name: "UpdateRecommenderConfig",
      requestType: UpdateRecommenderConfigRequest,
      requestStream: false,
      responseType: RecommenderConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              30,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              209,
              1,
              58,
              18,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              106,
              58,
              18,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              84,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              125,
              50,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the requested InsightTypeConfig. There is only one instance of the
     * config for each InsightType.
     */
    getInsightTypeConfig: {
      name: "GetInsightTypeConfig",
      requestType: GetInsightTypeConfigRequest,
      requestStream: false,
      responseType: InsightTypeConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              131,
              1,
              90,
              67,
              18,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              125,
              18,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an InsightTypeConfig change. This will create a new revision of the
     * config.
     */
    updateInsightTypeConfig: {
      name: "UpdateInsightTypeConfig",
      requestType: UpdateInsightTypeConfigRequest,
      requestStream: false,
      responseType: InsightTypeConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              31,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              95,
              116,
              121,
              112,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              213,
              1,
              58,
              19,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              95,
              116,
              121,
              112,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              90,
              108,
              58,
              19,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              95,
              116,
              121,
              112,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              85,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              95,
              116,
              121,
              112,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              125,
              50,
              80,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              95,
              116,
              121,
              112,
              101,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              102,
              105,
              103,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all available Recommenders.
     * No IAM permissions are required.
     */
    listRecommenders: {
      name: "ListRecommenders",
      requestType: ListRecommendersRequest,
      requestStream: false,
      responseType: ListRecommendersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              23,
              18,
              21,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists available InsightTypes.
     * No IAM permissions are required.
     */
    listInsightTypes: {
      name: "ListInsightTypes",
      requestType: ListInsightTypesRequest,
      requestStream: false,
      responseType: ListInsightTypesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              23,
              18,
              21,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              84,
              121,
              112,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface RecommenderServiceImplementation<CallContextExt = {}> {
  /**
   * Lists insights for the specified Cloud Resource. Requires the
   * recommender.*.list IAM permission for the specified insight type.
   */
  listInsights(
    request: ListInsightsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInsightsResponse>>;
  /**
   * Gets the requested insight. Requires the recommender.*.get IAM permission
   * for the specified insight type.
   */
  getInsight(request: GetInsightRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Insight>>;
  /**
   * Marks the Insight State as Accepted. Users can use this method to
   * indicate to the Recommender API that they have applied some action based
   * on the insight. This stops the insight content from being updated.
   *
   * MarkInsightAccepted can be applied to insights in ACTIVE state. Requires
   * the recommender.*.update IAM permission for the specified insight.
   */
  markInsightAccepted(
    request: MarkInsightAcceptedRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Insight>>;
  /**
   * Lists recommendations for the specified Cloud Resource. Requires the
   * recommender.*.list IAM permission for the specified recommender.
   */
  listRecommendations(
    request: ListRecommendationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRecommendationsResponse>>;
  /**
   * Gets the requested recommendation. Requires the recommender.*.get
   * IAM permission for the specified recommender.
   */
  getRecommendation(
    request: GetRecommendationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Recommendation>>;
  /**
   * Marks the Recommendation State as Claimed. Users can use this method to
   * indicate to the Recommender API that they are starting to apply the
   * recommendation themselves. This stops the recommendation content from being
   * updated. Associated insights are frozen and placed in the ACCEPTED state.
   *
   * MarkRecommendationClaimed can be applied to recommendations in CLAIMED or
   * ACTIVE state.
   *
   * Requires the recommender.*.update IAM permission for the specified
   * recommender.
   */
  markRecommendationClaimed(
    request: MarkRecommendationClaimedRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Recommendation>>;
  /**
   * Marks the Recommendation State as Succeeded. Users can use this method to
   * indicate to the Recommender API that they have applied the recommendation
   * themselves, and the operation was successful. This stops the recommendation
   * content from being updated. Associated insights are frozen and placed in
   * the ACCEPTED state.
   *
   * MarkRecommendationSucceeded can be applied to recommendations in ACTIVE,
   * CLAIMED, SUCCEEDED, or FAILED state.
   *
   * Requires the recommender.*.update IAM permission for the specified
   * recommender.
   */
  markRecommendationSucceeded(
    request: MarkRecommendationSucceededRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Recommendation>>;
  /**
   * Marks the Recommendation State as Failed. Users can use this method to
   * indicate to the Recommender API that they have applied the recommendation
   * themselves, and the operation failed. This stops the recommendation content
   * from being updated. Associated insights are frozen and placed in the
   * ACCEPTED state.
   *
   * MarkRecommendationFailed can be applied to recommendations in ACTIVE,
   * CLAIMED, SUCCEEDED, or FAILED state.
   *
   * Requires the recommender.*.update IAM permission for the specified
   * recommender.
   */
  markRecommendationFailed(
    request: MarkRecommendationFailedRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Recommendation>>;
  /**
   * Gets the requested Recommender Config. There is only one instance of the
   * config for each Recommender.
   */
  getRecommenderConfig(
    request: GetRecommenderConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RecommenderConfig>>;
  /**
   * Updates a Recommender Config. This will create a new revision of the
   * config.
   */
  updateRecommenderConfig(
    request: UpdateRecommenderConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RecommenderConfig>>;
  /**
   * Gets the requested InsightTypeConfig. There is only one instance of the
   * config for each InsightType.
   */
  getInsightTypeConfig(
    request: GetInsightTypeConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<InsightTypeConfig>>;
  /**
   * Updates an InsightTypeConfig change. This will create a new revision of the
   * config.
   */
  updateInsightTypeConfig(
    request: UpdateInsightTypeConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<InsightTypeConfig>>;
  /**
   * Lists all available Recommenders.
   * No IAM permissions are required.
   */
  listRecommenders(
    request: ListRecommendersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListRecommendersResponse>>;
  /**
   * Lists available InsightTypes.
   * No IAM permissions are required.
   */
  listInsightTypes(
    request: ListInsightTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInsightTypesResponse>>;
}

export interface RecommenderClient<CallOptionsExt = {}> {
  /**
   * Lists insights for the specified Cloud Resource. Requires the
   * recommender.*.list IAM permission for the specified insight type.
   */
  listInsights(
    request: DeepPartial<ListInsightsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInsightsResponse>;
  /**
   * Gets the requested insight. Requires the recommender.*.get IAM permission
   * for the specified insight type.
   */
  getInsight(request: DeepPartial<GetInsightRequest>, options?: CallOptions & CallOptionsExt): Promise<Insight>;
  /**
   * Marks the Insight State as Accepted. Users can use this method to
   * indicate to the Recommender API that they have applied some action based
   * on the insight. This stops the insight content from being updated.
   *
   * MarkInsightAccepted can be applied to insights in ACTIVE state. Requires
   * the recommender.*.update IAM permission for the specified insight.
   */
  markInsightAccepted(
    request: DeepPartial<MarkInsightAcceptedRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Insight>;
  /**
   * Lists recommendations for the specified Cloud Resource. Requires the
   * recommender.*.list IAM permission for the specified recommender.
   */
  listRecommendations(
    request: DeepPartial<ListRecommendationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRecommendationsResponse>;
  /**
   * Gets the requested recommendation. Requires the recommender.*.get
   * IAM permission for the specified recommender.
   */
  getRecommendation(
    request: DeepPartial<GetRecommendationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Recommendation>;
  /**
   * Marks the Recommendation State as Claimed. Users can use this method to
   * indicate to the Recommender API that they are starting to apply the
   * recommendation themselves. This stops the recommendation content from being
   * updated. Associated insights are frozen and placed in the ACCEPTED state.
   *
   * MarkRecommendationClaimed can be applied to recommendations in CLAIMED or
   * ACTIVE state.
   *
   * Requires the recommender.*.update IAM permission for the specified
   * recommender.
   */
  markRecommendationClaimed(
    request: DeepPartial<MarkRecommendationClaimedRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Recommendation>;
  /**
   * Marks the Recommendation State as Succeeded. Users can use this method to
   * indicate to the Recommender API that they have applied the recommendation
   * themselves, and the operation was successful. This stops the recommendation
   * content from being updated. Associated insights are frozen and placed in
   * the ACCEPTED state.
   *
   * MarkRecommendationSucceeded can be applied to recommendations in ACTIVE,
   * CLAIMED, SUCCEEDED, or FAILED state.
   *
   * Requires the recommender.*.update IAM permission for the specified
   * recommender.
   */
  markRecommendationSucceeded(
    request: DeepPartial<MarkRecommendationSucceededRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Recommendation>;
  /**
   * Marks the Recommendation State as Failed. Users can use this method to
   * indicate to the Recommender API that they have applied the recommendation
   * themselves, and the operation failed. This stops the recommendation content
   * from being updated. Associated insights are frozen and placed in the
   * ACCEPTED state.
   *
   * MarkRecommendationFailed can be applied to recommendations in ACTIVE,
   * CLAIMED, SUCCEEDED, or FAILED state.
   *
   * Requires the recommender.*.update IAM permission for the specified
   * recommender.
   */
  markRecommendationFailed(
    request: DeepPartial<MarkRecommendationFailedRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Recommendation>;
  /**
   * Gets the requested Recommender Config. There is only one instance of the
   * config for each Recommender.
   */
  getRecommenderConfig(
    request: DeepPartial<GetRecommenderConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RecommenderConfig>;
  /**
   * Updates a Recommender Config. This will create a new revision of the
   * config.
   */
  updateRecommenderConfig(
    request: DeepPartial<UpdateRecommenderConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RecommenderConfig>;
  /**
   * Gets the requested InsightTypeConfig. There is only one instance of the
   * config for each InsightType.
   */
  getInsightTypeConfig(
    request: DeepPartial<GetInsightTypeConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<InsightTypeConfig>;
  /**
   * Updates an InsightTypeConfig change. This will create a new revision of the
   * config.
   */
  updateInsightTypeConfig(
    request: DeepPartial<UpdateInsightTypeConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<InsightTypeConfig>;
  /**
   * Lists all available Recommenders.
   * No IAM permissions are required.
   */
  listRecommenders(
    request: DeepPartial<ListRecommendersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListRecommendersResponse>;
  /**
   * Lists available InsightTypes.
   * No IAM permissions are required.
   */
  listInsightTypes(
    request: DeepPartial<ListInsightTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInsightTypesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
