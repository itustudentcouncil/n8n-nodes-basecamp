// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/recommender/logging/v1/action_log.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  InsightStateInfo_State,
  insightStateInfo_StateFromJSON,
  insightStateInfo_StateToJSON,
} from "../../v1/insight.js";
import {
  RecommendationStateInfo_State,
  recommendationStateInfo_StateFromJSON,
  recommendationStateInfo_StateToJSON,
} from "../../v1/recommendation.js";

export const protobufPackage = "google.cloud.recommender.logging.v1";

/** Log content of an action on a recommendation. This includes Mark* actions. */
export interface ActionLog {
  /** Required. User that executed this action. Eg, foo@gmail.com */
  actor: string;
  /** Required. State change that was made by the actor. Eg, SUCCEEDED. */
  state: RecommendationStateInfo_State;
  /** Optional. Metadata that was included with the action that was taken. */
  stateMetadata: { [key: string]: string };
  /**
   * Required. Name of the recommendation which was acted on. Eg, :
   * 'projects/123/locations/global/recommenders/roleReco/recommendations/r1'
   */
  recommendationName: string;
}

export interface ActionLog_StateMetadataEntry {
  key: string;
  value: string;
}

/** Log content of an action on an insight. This includes Mark* actions. */
export interface InsightActionLog {
  /** Required. User that executed this action. Eg, foo@gmail.com */
  actor: string;
  /** Required. State change that was made by the actor. Eg, ACCEPTED. */
  state: InsightStateInfo_State;
  /** Optional. Metadata that was included with the action that was taken. */
  stateMetadata: { [key: string]: string };
  /**
   * Required. Name of the insight which was acted on. Eg, :
   * 'projects/123/locations/global/insightTypes/roleInsight/insights/i1'
   */
  insight: string;
}

export interface InsightActionLog_StateMetadataEntry {
  key: string;
  value: string;
}

function createBaseActionLog(): ActionLog {
  return { actor: "", state: 0, stateMetadata: {}, recommendationName: "" };
}

export const ActionLog: MessageFns<ActionLog> = {
  encode(message: ActionLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actor !== "") {
      writer.uint32(10).string(message.actor);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    Object.entries(message.stateMetadata).forEach(([key, value]) => {
      ActionLog_StateMetadataEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.recommendationName !== "") {
      writer.uint32(34).string(message.recommendationName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actor = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = ActionLog_StateMetadataEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.stateMetadata[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.recommendationName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionLog {
    return {
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
      state: isSet(object.state) ? recommendationStateInfo_StateFromJSON(object.state) : 0,
      stateMetadata: isObject(object.stateMetadata)
        ? Object.entries(object.stateMetadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      recommendationName: isSet(object.recommendationName) ? globalThis.String(object.recommendationName) : "",
    };
  },

  toJSON(message: ActionLog): unknown {
    const obj: any = {};
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    if (message.state !== 0) {
      obj.state = recommendationStateInfo_StateToJSON(message.state);
    }
    if (message.stateMetadata) {
      const entries = Object.entries(message.stateMetadata);
      if (entries.length > 0) {
        obj.stateMetadata = {};
        entries.forEach(([k, v]) => {
          obj.stateMetadata[k] = v;
        });
      }
    }
    if (message.recommendationName !== "") {
      obj.recommendationName = message.recommendationName;
    }
    return obj;
  },

  create(base?: DeepPartial<ActionLog>): ActionLog {
    return ActionLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActionLog>): ActionLog {
    const message = createBaseActionLog();
    message.actor = object.actor ?? "";
    message.state = object.state ?? 0;
    message.stateMetadata = Object.entries(object.stateMetadata ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.recommendationName = object.recommendationName ?? "";
    return message;
  },
};

function createBaseActionLog_StateMetadataEntry(): ActionLog_StateMetadataEntry {
  return { key: "", value: "" };
}

export const ActionLog_StateMetadataEntry: MessageFns<ActionLog_StateMetadataEntry> = {
  encode(message: ActionLog_StateMetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionLog_StateMetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionLog_StateMetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionLog_StateMetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ActionLog_StateMetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ActionLog_StateMetadataEntry>): ActionLog_StateMetadataEntry {
    return ActionLog_StateMetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActionLog_StateMetadataEntry>): ActionLog_StateMetadataEntry {
    const message = createBaseActionLog_StateMetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInsightActionLog(): InsightActionLog {
  return { actor: "", state: 0, stateMetadata: {}, insight: "" };
}

export const InsightActionLog: MessageFns<InsightActionLog> = {
  encode(message: InsightActionLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actor !== "") {
      writer.uint32(10).string(message.actor);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    Object.entries(message.stateMetadata).forEach(([key, value]) => {
      InsightActionLog_StateMetadataEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.insight !== "") {
      writer.uint32(34).string(message.insight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsightActionLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsightActionLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actor = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = InsightActionLog_StateMetadataEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.stateMetadata[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.insight = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsightActionLog {
    return {
      actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
      state: isSet(object.state) ? insightStateInfo_StateFromJSON(object.state) : 0,
      stateMetadata: isObject(object.stateMetadata)
        ? Object.entries(object.stateMetadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      insight: isSet(object.insight) ? globalThis.String(object.insight) : "",
    };
  },

  toJSON(message: InsightActionLog): unknown {
    const obj: any = {};
    if (message.actor !== "") {
      obj.actor = message.actor;
    }
    if (message.state !== 0) {
      obj.state = insightStateInfo_StateToJSON(message.state);
    }
    if (message.stateMetadata) {
      const entries = Object.entries(message.stateMetadata);
      if (entries.length > 0) {
        obj.stateMetadata = {};
        entries.forEach(([k, v]) => {
          obj.stateMetadata[k] = v;
        });
      }
    }
    if (message.insight !== "") {
      obj.insight = message.insight;
    }
    return obj;
  },

  create(base?: DeepPartial<InsightActionLog>): InsightActionLog {
    return InsightActionLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsightActionLog>): InsightActionLog {
    const message = createBaseInsightActionLog();
    message.actor = object.actor ?? "";
    message.state = object.state ?? 0;
    message.stateMetadata = Object.entries(object.stateMetadata ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.insight = object.insight ?? "";
    return message;
  },
};

function createBaseInsightActionLog_StateMetadataEntry(): InsightActionLog_StateMetadataEntry {
  return { key: "", value: "" };
}

export const InsightActionLog_StateMetadataEntry: MessageFns<InsightActionLog_StateMetadataEntry> = {
  encode(message: InsightActionLog_StateMetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InsightActionLog_StateMetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsightActionLog_StateMetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsightActionLog_StateMetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: InsightActionLog_StateMetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<InsightActionLog_StateMetadataEntry>): InsightActionLog_StateMetadataEntry {
    return InsightActionLog_StateMetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InsightActionLog_StateMetadataEntry>): InsightActionLog_StateMetadataEntry {
    const message = createBaseInsightActionLog_StateMetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
