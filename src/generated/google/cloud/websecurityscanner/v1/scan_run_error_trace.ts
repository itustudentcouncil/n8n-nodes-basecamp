// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/websecurityscanner/v1/scan_run_error_trace.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ScanConfigError } from "./scan_config_error.js";

export const protobufPackage = "google.cloud.websecurityscanner.v1";

/**
 * Output only.
 * Defines an error trace message for a ScanRun.
 */
export interface ScanRunErrorTrace {
  /** Output only. Indicates the error reason code. */
  code: ScanRunErrorTrace_Code;
  /**
   * Output only. If the scan encounters SCAN_CONFIG_ISSUE error, this field has the error
   * message encountered during scan configuration validation that is performed
   * before each scan run.
   */
  scanConfigError:
    | ScanConfigError
    | undefined;
  /**
   * Output only. If the scan encounters TOO_MANY_HTTP_ERRORS, this field indicates the most
   * common HTTP error code, if such is available. For example, if this code is
   * 404, the scan has encountered too many NOT_FOUND responses.
   */
  mostCommonHttpErrorCode: number;
}

/**
 * Output only.
 * Defines an error reason code.
 * Next id: 8
 */
export enum ScanRunErrorTrace_Code {
  /** CODE_UNSPECIFIED - Default value is never used. */
  CODE_UNSPECIFIED = 0,
  /** INTERNAL_ERROR - Indicates that the scan run failed due to an internal server error. */
  INTERNAL_ERROR = 1,
  /**
   * SCAN_CONFIG_ISSUE - Indicates a scan configuration error, usually due to outdated ScanConfig
   * settings, such as starting_urls or the DNS configuration.
   */
  SCAN_CONFIG_ISSUE = 2,
  /**
   * AUTHENTICATION_CONFIG_ISSUE - Indicates an authentication error, usually due to outdated ScanConfig
   * authentication settings.
   */
  AUTHENTICATION_CONFIG_ISSUE = 3,
  /** TIMED_OUT_WHILE_SCANNING - Indicates a scan operation timeout, usually caused by a very large site. */
  TIMED_OUT_WHILE_SCANNING = 4,
  /**
   * TOO_MANY_REDIRECTS - Indicates that a scan encountered excessive redirects, either to
   * authentication or some other page outside of the scan scope.
   */
  TOO_MANY_REDIRECTS = 5,
  /**
   * TOO_MANY_HTTP_ERRORS - Indicates that a scan encountered numerous errors from the web site
   * pages. When available, most_common_http_error_code field indicates the
   * most common HTTP error code encountered during the scan.
   */
  TOO_MANY_HTTP_ERRORS = 6,
  UNRECOGNIZED = -1,
}

export function scanRunErrorTrace_CodeFromJSON(object: any): ScanRunErrorTrace_Code {
  switch (object) {
    case 0:
    case "CODE_UNSPECIFIED":
      return ScanRunErrorTrace_Code.CODE_UNSPECIFIED;
    case 1:
    case "INTERNAL_ERROR":
      return ScanRunErrorTrace_Code.INTERNAL_ERROR;
    case 2:
    case "SCAN_CONFIG_ISSUE":
      return ScanRunErrorTrace_Code.SCAN_CONFIG_ISSUE;
    case 3:
    case "AUTHENTICATION_CONFIG_ISSUE":
      return ScanRunErrorTrace_Code.AUTHENTICATION_CONFIG_ISSUE;
    case 4:
    case "TIMED_OUT_WHILE_SCANNING":
      return ScanRunErrorTrace_Code.TIMED_OUT_WHILE_SCANNING;
    case 5:
    case "TOO_MANY_REDIRECTS":
      return ScanRunErrorTrace_Code.TOO_MANY_REDIRECTS;
    case 6:
    case "TOO_MANY_HTTP_ERRORS":
      return ScanRunErrorTrace_Code.TOO_MANY_HTTP_ERRORS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ScanRunErrorTrace_Code.UNRECOGNIZED;
  }
}

export function scanRunErrorTrace_CodeToJSON(object: ScanRunErrorTrace_Code): string {
  switch (object) {
    case ScanRunErrorTrace_Code.CODE_UNSPECIFIED:
      return "CODE_UNSPECIFIED";
    case ScanRunErrorTrace_Code.INTERNAL_ERROR:
      return "INTERNAL_ERROR";
    case ScanRunErrorTrace_Code.SCAN_CONFIG_ISSUE:
      return "SCAN_CONFIG_ISSUE";
    case ScanRunErrorTrace_Code.AUTHENTICATION_CONFIG_ISSUE:
      return "AUTHENTICATION_CONFIG_ISSUE";
    case ScanRunErrorTrace_Code.TIMED_OUT_WHILE_SCANNING:
      return "TIMED_OUT_WHILE_SCANNING";
    case ScanRunErrorTrace_Code.TOO_MANY_REDIRECTS:
      return "TOO_MANY_REDIRECTS";
    case ScanRunErrorTrace_Code.TOO_MANY_HTTP_ERRORS:
      return "TOO_MANY_HTTP_ERRORS";
    case ScanRunErrorTrace_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseScanRunErrorTrace(): ScanRunErrorTrace {
  return { code: 0, scanConfigError: undefined, mostCommonHttpErrorCode: 0 };
}

export const ScanRunErrorTrace: MessageFns<ScanRunErrorTrace> = {
  encode(message: ScanRunErrorTrace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.scanConfigError !== undefined) {
      ScanConfigError.encode(message.scanConfigError, writer.uint32(18).fork()).join();
    }
    if (message.mostCommonHttpErrorCode !== 0) {
      writer.uint32(24).int32(message.mostCommonHttpErrorCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScanRunErrorTrace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScanRunErrorTrace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scanConfigError = ScanConfigError.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.mostCommonHttpErrorCode = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScanRunErrorTrace {
    return {
      code: isSet(object.code) ? scanRunErrorTrace_CodeFromJSON(object.code) : 0,
      scanConfigError: isSet(object.scanConfigError) ? ScanConfigError.fromJSON(object.scanConfigError) : undefined,
      mostCommonHttpErrorCode: isSet(object.mostCommonHttpErrorCode)
        ? globalThis.Number(object.mostCommonHttpErrorCode)
        : 0,
    };
  },

  toJSON(message: ScanRunErrorTrace): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = scanRunErrorTrace_CodeToJSON(message.code);
    }
    if (message.scanConfigError !== undefined) {
      obj.scanConfigError = ScanConfigError.toJSON(message.scanConfigError);
    }
    if (message.mostCommonHttpErrorCode !== 0) {
      obj.mostCommonHttpErrorCode = Math.round(message.mostCommonHttpErrorCode);
    }
    return obj;
  },

  create(base?: DeepPartial<ScanRunErrorTrace>): ScanRunErrorTrace {
    return ScanRunErrorTrace.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScanRunErrorTrace>): ScanRunErrorTrace {
    const message = createBaseScanRunErrorTrace();
    message.code = object.code ?? 0;
    message.scanConfigError = (object.scanConfigError !== undefined && object.scanConfigError !== null)
      ? ScanConfigError.fromPartial(object.scanConfigError)
      : undefined;
    message.mostCommonHttpErrorCode = object.mostCommonHttpErrorCode ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
