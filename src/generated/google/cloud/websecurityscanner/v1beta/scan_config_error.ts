// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/websecurityscanner/v1beta/scan_config_error.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.websecurityscanner.v1beta";

/**
 * Defines a custom error message used by CreateScanConfig and UpdateScanConfig
 * APIs when scan configuration validation fails. It is also reported as part of
 * a ScanRunErrorTrace message if scan validation fails due to a scan
 * configuration error.
 */
export interface ScanConfigError {
  /** Indicates the reason code for a configuration failure. */
  code: ScanConfigError_Code;
  /**
   * Indicates the full name of the ScanConfig field that triggers this error,
   * for example "scan_config.max_qps". This field is provided for
   * troubleshooting purposes only and its actual value can change in the
   * future.
   */
  fieldName: string;
}

/**
 * Output only.
 * Defines an error reason code.
 * Next id: 44
 */
export enum ScanConfigError_Code {
  /** CODE_UNSPECIFIED - There is no error. */
  CODE_UNSPECIFIED = 0,
  /** OK - There is no error. */
  OK = 0,
  /**
   * INTERNAL_ERROR - Indicates an internal server error.
   * Please DO NOT USE THIS ERROR CODE unless the root cause is truly unknown.
   */
  INTERNAL_ERROR = 1,
  /**
   * APPENGINE_API_BACKEND_ERROR - One of the seed URLs is an App Engine URL but we cannot validate the scan
   * settings due to an App Engine API backend error.
   */
  APPENGINE_API_BACKEND_ERROR = 2,
  /**
   * APPENGINE_API_NOT_ACCESSIBLE - One of the seed URLs is an App Engine URL but we cannot access the
   * App Engine API to validate scan settings.
   */
  APPENGINE_API_NOT_ACCESSIBLE = 3,
  /**
   * APPENGINE_DEFAULT_HOST_MISSING - One of the seed URLs is an App Engine URL but the Default Host of the
   * App Engine is not set.
   */
  APPENGINE_DEFAULT_HOST_MISSING = 4,
  /** CANNOT_USE_GOOGLE_COM_ACCOUNT - Google corporate accounts can not be used for scanning. */
  CANNOT_USE_GOOGLE_COM_ACCOUNT = 6,
  /** CANNOT_USE_OWNER_ACCOUNT - The account of the scan creator can not be used for scanning. */
  CANNOT_USE_OWNER_ACCOUNT = 7,
  /**
   * COMPUTE_API_BACKEND_ERROR - This scan targets Compute Engine, but we cannot validate scan settings
   * due to a Compute Engine API backend error.
   */
  COMPUTE_API_BACKEND_ERROR = 8,
  /**
   * COMPUTE_API_NOT_ACCESSIBLE - This scan targets Compute Engine, but we cannot access the Compute Engine
   * API to validate the scan settings.
   */
  COMPUTE_API_NOT_ACCESSIBLE = 9,
  /** CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT - The Custom Login URL does not belong to the current project. */
  CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT = 10,
  /** CUSTOM_LOGIN_URL_MALFORMED - The Custom Login URL is malformed (can not be parsed). */
  CUSTOM_LOGIN_URL_MALFORMED = 11,
  /** CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS - The Custom Login URL is mapped to a non-routable IP address in DNS. */
  CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS = 12,
  /**
   * CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS - The Custom Login URL is mapped to an IP address which is not reserved for
   * the current project.
   */
  CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS = 13,
  /** CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS - The Custom Login URL has a non-routable IP address. */
  CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS = 14,
  /**
   * CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS - The Custom Login URL has an IP address which is not reserved for the
   * current project.
   */
  CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS = 15,
  /** DUPLICATE_SCAN_NAME - Another scan with the same name (case-sensitive) already exists. */
  DUPLICATE_SCAN_NAME = 16,
  /** INVALID_FIELD_VALUE - A field is set to an invalid value. */
  INVALID_FIELD_VALUE = 18,
  /** FAILED_TO_AUTHENTICATE_TO_TARGET - There was an error trying to authenticate to the scan target. */
  FAILED_TO_AUTHENTICATE_TO_TARGET = 19,
  /** FINDING_TYPE_UNSPECIFIED - Finding type value is not specified in the list findings request. */
  FINDING_TYPE_UNSPECIFIED = 20,
  /**
   * FORBIDDEN_TO_SCAN_COMPUTE - Scan targets Compute Engine, yet current project was not whitelisted for
   * Google Compute Engine Scanning Alpha access.
   */
  FORBIDDEN_TO_SCAN_COMPUTE = 21,
  /** FORBIDDEN_UPDATE_TO_MANAGED_SCAN - User tries to update managed scan */
  FORBIDDEN_UPDATE_TO_MANAGED_SCAN = 43,
  /**
   * MALFORMED_FILTER - The supplied filter is malformed. For example, it can not be parsed, does
   * not have a filter type in expression, or the same filter type appears
   * more than once.
   */
  MALFORMED_FILTER = 22,
  /** MALFORMED_RESOURCE_NAME - The supplied resource name is malformed (can not be parsed). */
  MALFORMED_RESOURCE_NAME = 23,
  /** PROJECT_INACTIVE - The current project is not in an active state. */
  PROJECT_INACTIVE = 24,
  /** REQUIRED_FIELD - A required field is not set. */
  REQUIRED_FIELD = 25,
  /**
   * RESOURCE_NAME_INCONSISTENT - Project id, scanconfig id, scanrun id, or finding id are not consistent
   * with each other in resource name.
   */
  RESOURCE_NAME_INCONSISTENT = 26,
  /** SCAN_ALREADY_RUNNING - The scan being requested to start is already running. */
  SCAN_ALREADY_RUNNING = 27,
  /** SCAN_NOT_RUNNING - The scan that was requested to be stopped is not running. */
  SCAN_NOT_RUNNING = 28,
  /** SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT - One of the seed URLs does not belong to the current project. */
  SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT = 29,
  /** SEED_URL_MALFORMED - One of the seed URLs is malformed (can not be parsed). */
  SEED_URL_MALFORMED = 30,
  /** SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS - One of the seed URLs is mapped to a non-routable IP address in DNS. */
  SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS = 31,
  /**
   * SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS - One of the seed URLs is mapped to an IP address which is not reserved
   * for the current project.
   */
  SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS = 32,
  /** SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS - One of the seed URLs has on-routable IP address. */
  SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS = 33,
  /**
   * SEED_URL_HAS_UNRESERVED_IP_ADDRESS - One of the seed URLs has an IP address that is not reserved
   * for the current project.
   */
  SEED_URL_HAS_UNRESERVED_IP_ADDRESS = 35,
  /**
   * SERVICE_ACCOUNT_NOT_CONFIGURED - The Cloud Security Scanner service account is not configured under the
   * project.
   */
  SERVICE_ACCOUNT_NOT_CONFIGURED = 36,
  /** TOO_MANY_SCANS - A project has reached the maximum number of scans. */
  TOO_MANY_SCANS = 37,
  /** UNABLE_TO_RESOLVE_PROJECT_INFO - Resolving the details of the current project fails. */
  UNABLE_TO_RESOLVE_PROJECT_INFO = 38,
  /** UNSUPPORTED_BLACKLIST_PATTERN_FORMAT - One or more blacklist patterns were in the wrong format. */
  UNSUPPORTED_BLACKLIST_PATTERN_FORMAT = 39,
  /** UNSUPPORTED_FILTER - The supplied filter is not supported. */
  UNSUPPORTED_FILTER = 40,
  /**
   * UNSUPPORTED_FINDING_TYPE - The supplied finding type is not supported. For example, we do not
   * provide findings of the given finding type.
   */
  UNSUPPORTED_FINDING_TYPE = 41,
  /** UNSUPPORTED_URL_SCHEME - The URL scheme of one or more of the supplied URLs is not supported. */
  UNSUPPORTED_URL_SCHEME = 42,
  UNRECOGNIZED = -1,
}

export function scanConfigError_CodeFromJSON(object: any): ScanConfigError_Code {
  switch (object) {
    case 0:
    case "CODE_UNSPECIFIED":
      return ScanConfigError_Code.CODE_UNSPECIFIED;
    case 0:
    case "OK":
      return ScanConfigError_Code.OK;
    case 1:
    case "INTERNAL_ERROR":
      return ScanConfigError_Code.INTERNAL_ERROR;
    case 2:
    case "APPENGINE_API_BACKEND_ERROR":
      return ScanConfigError_Code.APPENGINE_API_BACKEND_ERROR;
    case 3:
    case "APPENGINE_API_NOT_ACCESSIBLE":
      return ScanConfigError_Code.APPENGINE_API_NOT_ACCESSIBLE;
    case 4:
    case "APPENGINE_DEFAULT_HOST_MISSING":
      return ScanConfigError_Code.APPENGINE_DEFAULT_HOST_MISSING;
    case 6:
    case "CANNOT_USE_GOOGLE_COM_ACCOUNT":
      return ScanConfigError_Code.CANNOT_USE_GOOGLE_COM_ACCOUNT;
    case 7:
    case "CANNOT_USE_OWNER_ACCOUNT":
      return ScanConfigError_Code.CANNOT_USE_OWNER_ACCOUNT;
    case 8:
    case "COMPUTE_API_BACKEND_ERROR":
      return ScanConfigError_Code.COMPUTE_API_BACKEND_ERROR;
    case 9:
    case "COMPUTE_API_NOT_ACCESSIBLE":
      return ScanConfigError_Code.COMPUTE_API_NOT_ACCESSIBLE;
    case 10:
    case "CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT":
      return ScanConfigError_Code.CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT;
    case 11:
    case "CUSTOM_LOGIN_URL_MALFORMED":
      return ScanConfigError_Code.CUSTOM_LOGIN_URL_MALFORMED;
    case 12:
    case "CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS":
      return ScanConfigError_Code.CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS;
    case 13:
    case "CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS":
      return ScanConfigError_Code.CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS;
    case 14:
    case "CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS":
      return ScanConfigError_Code.CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS;
    case 15:
    case "CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS":
      return ScanConfigError_Code.CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS;
    case 16:
    case "DUPLICATE_SCAN_NAME":
      return ScanConfigError_Code.DUPLICATE_SCAN_NAME;
    case 18:
    case "INVALID_FIELD_VALUE":
      return ScanConfigError_Code.INVALID_FIELD_VALUE;
    case 19:
    case "FAILED_TO_AUTHENTICATE_TO_TARGET":
      return ScanConfigError_Code.FAILED_TO_AUTHENTICATE_TO_TARGET;
    case 20:
    case "FINDING_TYPE_UNSPECIFIED":
      return ScanConfigError_Code.FINDING_TYPE_UNSPECIFIED;
    case 21:
    case "FORBIDDEN_TO_SCAN_COMPUTE":
      return ScanConfigError_Code.FORBIDDEN_TO_SCAN_COMPUTE;
    case 43:
    case "FORBIDDEN_UPDATE_TO_MANAGED_SCAN":
      return ScanConfigError_Code.FORBIDDEN_UPDATE_TO_MANAGED_SCAN;
    case 22:
    case "MALFORMED_FILTER":
      return ScanConfigError_Code.MALFORMED_FILTER;
    case 23:
    case "MALFORMED_RESOURCE_NAME":
      return ScanConfigError_Code.MALFORMED_RESOURCE_NAME;
    case 24:
    case "PROJECT_INACTIVE":
      return ScanConfigError_Code.PROJECT_INACTIVE;
    case 25:
    case "REQUIRED_FIELD":
      return ScanConfigError_Code.REQUIRED_FIELD;
    case 26:
    case "RESOURCE_NAME_INCONSISTENT":
      return ScanConfigError_Code.RESOURCE_NAME_INCONSISTENT;
    case 27:
    case "SCAN_ALREADY_RUNNING":
      return ScanConfigError_Code.SCAN_ALREADY_RUNNING;
    case 28:
    case "SCAN_NOT_RUNNING":
      return ScanConfigError_Code.SCAN_NOT_RUNNING;
    case 29:
    case "SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT":
      return ScanConfigError_Code.SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT;
    case 30:
    case "SEED_URL_MALFORMED":
      return ScanConfigError_Code.SEED_URL_MALFORMED;
    case 31:
    case "SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS":
      return ScanConfigError_Code.SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS;
    case 32:
    case "SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS":
      return ScanConfigError_Code.SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS;
    case 33:
    case "SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS":
      return ScanConfigError_Code.SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS;
    case 35:
    case "SEED_URL_HAS_UNRESERVED_IP_ADDRESS":
      return ScanConfigError_Code.SEED_URL_HAS_UNRESERVED_IP_ADDRESS;
    case 36:
    case "SERVICE_ACCOUNT_NOT_CONFIGURED":
      return ScanConfigError_Code.SERVICE_ACCOUNT_NOT_CONFIGURED;
    case 37:
    case "TOO_MANY_SCANS":
      return ScanConfigError_Code.TOO_MANY_SCANS;
    case 38:
    case "UNABLE_TO_RESOLVE_PROJECT_INFO":
      return ScanConfigError_Code.UNABLE_TO_RESOLVE_PROJECT_INFO;
    case 39:
    case "UNSUPPORTED_BLACKLIST_PATTERN_FORMAT":
      return ScanConfigError_Code.UNSUPPORTED_BLACKLIST_PATTERN_FORMAT;
    case 40:
    case "UNSUPPORTED_FILTER":
      return ScanConfigError_Code.UNSUPPORTED_FILTER;
    case 41:
    case "UNSUPPORTED_FINDING_TYPE":
      return ScanConfigError_Code.UNSUPPORTED_FINDING_TYPE;
    case 42:
    case "UNSUPPORTED_URL_SCHEME":
      return ScanConfigError_Code.UNSUPPORTED_URL_SCHEME;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ScanConfigError_Code.UNRECOGNIZED;
  }
}

export function scanConfigError_CodeToJSON(object: ScanConfigError_Code): string {
  switch (object) {
    case ScanConfigError_Code.CODE_UNSPECIFIED:
      return "CODE_UNSPECIFIED";
    case ScanConfigError_Code.OK:
      return "OK";
    case ScanConfigError_Code.INTERNAL_ERROR:
      return "INTERNAL_ERROR";
    case ScanConfigError_Code.APPENGINE_API_BACKEND_ERROR:
      return "APPENGINE_API_BACKEND_ERROR";
    case ScanConfigError_Code.APPENGINE_API_NOT_ACCESSIBLE:
      return "APPENGINE_API_NOT_ACCESSIBLE";
    case ScanConfigError_Code.APPENGINE_DEFAULT_HOST_MISSING:
      return "APPENGINE_DEFAULT_HOST_MISSING";
    case ScanConfigError_Code.CANNOT_USE_GOOGLE_COM_ACCOUNT:
      return "CANNOT_USE_GOOGLE_COM_ACCOUNT";
    case ScanConfigError_Code.CANNOT_USE_OWNER_ACCOUNT:
      return "CANNOT_USE_OWNER_ACCOUNT";
    case ScanConfigError_Code.COMPUTE_API_BACKEND_ERROR:
      return "COMPUTE_API_BACKEND_ERROR";
    case ScanConfigError_Code.COMPUTE_API_NOT_ACCESSIBLE:
      return "COMPUTE_API_NOT_ACCESSIBLE";
    case ScanConfigError_Code.CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT:
      return "CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT";
    case ScanConfigError_Code.CUSTOM_LOGIN_URL_MALFORMED:
      return "CUSTOM_LOGIN_URL_MALFORMED";
    case ScanConfigError_Code.CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS:
      return "CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS";
    case ScanConfigError_Code.CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS:
      return "CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS";
    case ScanConfigError_Code.CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS:
      return "CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS";
    case ScanConfigError_Code.CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS:
      return "CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS";
    case ScanConfigError_Code.DUPLICATE_SCAN_NAME:
      return "DUPLICATE_SCAN_NAME";
    case ScanConfigError_Code.INVALID_FIELD_VALUE:
      return "INVALID_FIELD_VALUE";
    case ScanConfigError_Code.FAILED_TO_AUTHENTICATE_TO_TARGET:
      return "FAILED_TO_AUTHENTICATE_TO_TARGET";
    case ScanConfigError_Code.FINDING_TYPE_UNSPECIFIED:
      return "FINDING_TYPE_UNSPECIFIED";
    case ScanConfigError_Code.FORBIDDEN_TO_SCAN_COMPUTE:
      return "FORBIDDEN_TO_SCAN_COMPUTE";
    case ScanConfigError_Code.FORBIDDEN_UPDATE_TO_MANAGED_SCAN:
      return "FORBIDDEN_UPDATE_TO_MANAGED_SCAN";
    case ScanConfigError_Code.MALFORMED_FILTER:
      return "MALFORMED_FILTER";
    case ScanConfigError_Code.MALFORMED_RESOURCE_NAME:
      return "MALFORMED_RESOURCE_NAME";
    case ScanConfigError_Code.PROJECT_INACTIVE:
      return "PROJECT_INACTIVE";
    case ScanConfigError_Code.REQUIRED_FIELD:
      return "REQUIRED_FIELD";
    case ScanConfigError_Code.RESOURCE_NAME_INCONSISTENT:
      return "RESOURCE_NAME_INCONSISTENT";
    case ScanConfigError_Code.SCAN_ALREADY_RUNNING:
      return "SCAN_ALREADY_RUNNING";
    case ScanConfigError_Code.SCAN_NOT_RUNNING:
      return "SCAN_NOT_RUNNING";
    case ScanConfigError_Code.SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT:
      return "SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT";
    case ScanConfigError_Code.SEED_URL_MALFORMED:
      return "SEED_URL_MALFORMED";
    case ScanConfigError_Code.SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS:
      return "SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS";
    case ScanConfigError_Code.SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS:
      return "SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS";
    case ScanConfigError_Code.SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS:
      return "SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS";
    case ScanConfigError_Code.SEED_URL_HAS_UNRESERVED_IP_ADDRESS:
      return "SEED_URL_HAS_UNRESERVED_IP_ADDRESS";
    case ScanConfigError_Code.SERVICE_ACCOUNT_NOT_CONFIGURED:
      return "SERVICE_ACCOUNT_NOT_CONFIGURED";
    case ScanConfigError_Code.TOO_MANY_SCANS:
      return "TOO_MANY_SCANS";
    case ScanConfigError_Code.UNABLE_TO_RESOLVE_PROJECT_INFO:
      return "UNABLE_TO_RESOLVE_PROJECT_INFO";
    case ScanConfigError_Code.UNSUPPORTED_BLACKLIST_PATTERN_FORMAT:
      return "UNSUPPORTED_BLACKLIST_PATTERN_FORMAT";
    case ScanConfigError_Code.UNSUPPORTED_FILTER:
      return "UNSUPPORTED_FILTER";
    case ScanConfigError_Code.UNSUPPORTED_FINDING_TYPE:
      return "UNSUPPORTED_FINDING_TYPE";
    case ScanConfigError_Code.UNSUPPORTED_URL_SCHEME:
      return "UNSUPPORTED_URL_SCHEME";
    case ScanConfigError_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseScanConfigError(): ScanConfigError {
  return { code: 0, fieldName: "" };
}

export const ScanConfigError: MessageFns<ScanConfigError> = {
  encode(message: ScanConfigError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.fieldName !== "") {
      writer.uint32(18).string(message.fieldName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScanConfigError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScanConfigError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScanConfigError {
    return {
      code: isSet(object.code) ? scanConfigError_CodeFromJSON(object.code) : 0,
      fieldName: isSet(object.fieldName) ? globalThis.String(object.fieldName) : "",
    };
  },

  toJSON(message: ScanConfigError): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = scanConfigError_CodeToJSON(message.code);
    }
    if (message.fieldName !== "") {
      obj.fieldName = message.fieldName;
    }
    return obj;
  },

  create(base?: DeepPartial<ScanConfigError>): ScanConfigError {
    return ScanConfigError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScanConfigError>): ScanConfigError {
    const message = createBaseScanConfigError();
    message.code = object.code ?? 0;
    message.fieldName = object.fieldName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
