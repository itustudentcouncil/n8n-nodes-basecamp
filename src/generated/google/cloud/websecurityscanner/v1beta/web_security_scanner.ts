// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/websecurityscanner/v1beta/web_security_scanner.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { CrawledUrl } from "./crawled_url.js";
import { Finding } from "./finding.js";
import { FindingTypeStats } from "./finding_type_stats.js";
import { ScanConfig } from "./scan_config.js";
import { ScanRun } from "./scan_run.js";

export const protobufPackage = "google.cloud.websecurityscanner.v1beta";

/** Request for the `CreateScanConfig` method. */
export interface CreateScanConfigRequest {
  /**
   * Required. The parent resource name where the scan is created, which should be a
   * project resource name in the format 'projects/{projectId}'.
   */
  parent: string;
  /** Required. The ScanConfig to be created. */
  scanConfig: ScanConfig | undefined;
}

/** Request for the `DeleteScanConfig` method. */
export interface DeleteScanConfigRequest {
  /**
   * Required. The resource name of the ScanConfig to be deleted. The name follows the
   * format of 'projects/{projectId}/scanConfigs/{scanConfigId}'.
   */
  name: string;
}

/** Request for the `GetScanConfig` method. */
export interface GetScanConfigRequest {
  /**
   * Required. The resource name of the ScanConfig to be returned. The name follows the
   * format of 'projects/{projectId}/scanConfigs/{scanConfigId}'.
   */
  name: string;
}

/** Request for the `ListScanConfigs` method. */
export interface ListScanConfigsRequest {
  /**
   * Required. The parent resource name, which should be a project resource name in the
   * format 'projects/{projectId}'.
   */
  parent: string;
  /**
   * A token identifying a page of results to be returned. This should be a
   * `next_page_token` value returned from a previous List request.
   * If unspecified, the first page of results is returned.
   */
  pageToken: string;
  /**
   * The maximum number of ScanConfigs to return, can be limited by server.
   * If not specified or not positive, the implementation will select a
   * reasonable value.
   */
  pageSize: number;
}

/** Request for the `UpdateScanConfigRequest` method. */
export interface UpdateScanConfigRequest {
  /**
   * Required. The ScanConfig to be updated. The name field must be set to identify the
   * resource to be updated. The values of fields not covered by the mask
   * will be ignored.
   */
  scanConfig:
    | ScanConfig
    | undefined;
  /**
   * Required. The update mask applies to the resource. For the `FieldMask` definition,
   * see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   */
  updateMask: string[] | undefined;
}

/** Response for the `ListScanConfigs` method. */
export interface ListScanConfigsResponse {
  /** The list of ScanConfigs returned. */
  scanConfigs: ScanConfig[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/** Request for the `StartScanRun` method. */
export interface StartScanRunRequest {
  /**
   * Required. The resource name of the ScanConfig to be used. The name follows the
   * format of 'projects/{projectId}/scanConfigs/{scanConfigId}'.
   */
  name: string;
}

/** Request for the `GetScanRun` method. */
export interface GetScanRunRequest {
  /**
   * Required. The resource name of the ScanRun to be returned. The name follows the
   * format of
   * 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'.
   */
  name: string;
}

/** Request for the `ListScanRuns` method. */
export interface ListScanRunsRequest {
  /**
   * Required. The parent resource name, which should be a scan resource name in the
   * format 'projects/{projectId}/scanConfigs/{scanConfigId}'.
   */
  parent: string;
  /**
   * A token identifying a page of results to be returned. This should be a
   * `next_page_token` value returned from a previous List request.
   * If unspecified, the first page of results is returned.
   */
  pageToken: string;
  /**
   * The maximum number of ScanRuns to return, can be limited by server.
   * If not specified or not positive, the implementation will select a
   * reasonable value.
   */
  pageSize: number;
}

/** Response for the `ListScanRuns` method. */
export interface ListScanRunsResponse {
  /** The list of ScanRuns returned. */
  scanRuns: ScanRun[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/** Request for the `StopScanRun` method. */
export interface StopScanRunRequest {
  /**
   * Required. The resource name of the ScanRun to be stopped. The name follows the
   * format of
   * 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'.
   */
  name: string;
}

/** Request for the `ListCrawledUrls` method. */
export interface ListCrawledUrlsRequest {
  /**
   * Required. The parent resource name, which should be a scan run resource name in the
   * format
   * 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'.
   */
  parent: string;
  /**
   * A token identifying a page of results to be returned. This should be a
   * `next_page_token` value returned from a previous List request.
   * If unspecified, the first page of results is returned.
   */
  pageToken: string;
  /**
   * The maximum number of CrawledUrls to return, can be limited by server.
   * If not specified or not positive, the implementation will select a
   * reasonable value.
   */
  pageSize: number;
}

/** Response for the `ListCrawledUrls` method. */
export interface ListCrawledUrlsResponse {
  /** The list of CrawledUrls returned. */
  crawledUrls: CrawledUrl[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/** Request for the `GetFinding` method. */
export interface GetFindingRequest {
  /**
   * Required. The resource name of the Finding to be returned. The name follows the
   * format of
   * 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}/findings/{findingId}'.
   */
  name: string;
}

/** Request for the `ListFindings` method. */
export interface ListFindingsRequest {
  /**
   * Required. The parent resource name, which should be a scan run resource name in the
   * format
   * 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'.
   */
  parent: string;
  /**
   * Required. The filter expression. The expression must be in the format: <field>
   * <operator> <value>.
   * Supported field: 'finding_type'.
   * Supported operator: '='.
   */
  filter: string;
  /**
   * A token identifying a page of results to be returned. This should be a
   * `next_page_token` value returned from a previous List request.
   * If unspecified, the first page of results is returned.
   */
  pageToken: string;
  /**
   * The maximum number of Findings to return, can be limited by server.
   * If not specified or not positive, the implementation will select a
   * reasonable value.
   */
  pageSize: number;
}

/** Response for the `ListFindings` method. */
export interface ListFindingsResponse {
  /** The list of Findings returned. */
  findings: Finding[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/** Request for the `ListFindingTypeStats` method. */
export interface ListFindingTypeStatsRequest {
  /**
   * Required. The parent resource name, which should be a scan run resource name in the
   * format
   * 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'.
   */
  parent: string;
}

/** Response for the `ListFindingTypeStats` method. */
export interface ListFindingTypeStatsResponse {
  /** The list of FindingTypeStats returned. */
  findingTypeStats: FindingTypeStats[];
}

function createBaseCreateScanConfigRequest(): CreateScanConfigRequest {
  return { parent: "", scanConfig: undefined };
}

export const CreateScanConfigRequest: MessageFns<CreateScanConfigRequest> = {
  encode(message: CreateScanConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.scanConfig !== undefined) {
      ScanConfig.encode(message.scanConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateScanConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateScanConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scanConfig = ScanConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateScanConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      scanConfig: isSet(object.scanConfig) ? ScanConfig.fromJSON(object.scanConfig) : undefined,
    };
  },

  toJSON(message: CreateScanConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.scanConfig !== undefined) {
      obj.scanConfig = ScanConfig.toJSON(message.scanConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateScanConfigRequest>): CreateScanConfigRequest {
    return CreateScanConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateScanConfigRequest>): CreateScanConfigRequest {
    const message = createBaseCreateScanConfigRequest();
    message.parent = object.parent ?? "";
    message.scanConfig = (object.scanConfig !== undefined && object.scanConfig !== null)
      ? ScanConfig.fromPartial(object.scanConfig)
      : undefined;
    return message;
  },
};

function createBaseDeleteScanConfigRequest(): DeleteScanConfigRequest {
  return { name: "" };
}

export const DeleteScanConfigRequest: MessageFns<DeleteScanConfigRequest> = {
  encode(message: DeleteScanConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteScanConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteScanConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteScanConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteScanConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteScanConfigRequest>): DeleteScanConfigRequest {
    return DeleteScanConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteScanConfigRequest>): DeleteScanConfigRequest {
    const message = createBaseDeleteScanConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetScanConfigRequest(): GetScanConfigRequest {
  return { name: "" };
}

export const GetScanConfigRequest: MessageFns<GetScanConfigRequest> = {
  encode(message: GetScanConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScanConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScanConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScanConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetScanConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetScanConfigRequest>): GetScanConfigRequest {
    return GetScanConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetScanConfigRequest>): GetScanConfigRequest {
    const message = createBaseGetScanConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListScanConfigsRequest(): ListScanConfigsRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListScanConfigsRequest: MessageFns<ListScanConfigsRequest> = {
  encode(message: ListScanConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListScanConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListScanConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListScanConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListScanConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListScanConfigsRequest>): ListScanConfigsRequest {
    return ListScanConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListScanConfigsRequest>): ListScanConfigsRequest {
    const message = createBaseListScanConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseUpdateScanConfigRequest(): UpdateScanConfigRequest {
  return { scanConfig: undefined, updateMask: undefined };
}

export const UpdateScanConfigRequest: MessageFns<UpdateScanConfigRequest> = {
  encode(message: UpdateScanConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scanConfig !== undefined) {
      ScanConfig.encode(message.scanConfig, writer.uint32(18).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateScanConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateScanConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.scanConfig = ScanConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateScanConfigRequest {
    return {
      scanConfig: isSet(object.scanConfig) ? ScanConfig.fromJSON(object.scanConfig) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateScanConfigRequest): unknown {
    const obj: any = {};
    if (message.scanConfig !== undefined) {
      obj.scanConfig = ScanConfig.toJSON(message.scanConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateScanConfigRequest>): UpdateScanConfigRequest {
    return UpdateScanConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateScanConfigRequest>): UpdateScanConfigRequest {
    const message = createBaseUpdateScanConfigRequest();
    message.scanConfig = (object.scanConfig !== undefined && object.scanConfig !== null)
      ? ScanConfig.fromPartial(object.scanConfig)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListScanConfigsResponse(): ListScanConfigsResponse {
  return { scanConfigs: [], nextPageToken: "" };
}

export const ListScanConfigsResponse: MessageFns<ListScanConfigsResponse> = {
  encode(message: ListScanConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.scanConfigs) {
      ScanConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListScanConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListScanConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scanConfigs.push(ScanConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListScanConfigsResponse {
    return {
      scanConfigs: globalThis.Array.isArray(object?.scanConfigs)
        ? object.scanConfigs.map((e: any) => ScanConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListScanConfigsResponse): unknown {
    const obj: any = {};
    if (message.scanConfigs?.length) {
      obj.scanConfigs = message.scanConfigs.map((e) => ScanConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListScanConfigsResponse>): ListScanConfigsResponse {
    return ListScanConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListScanConfigsResponse>): ListScanConfigsResponse {
    const message = createBaseListScanConfigsResponse();
    message.scanConfigs = object.scanConfigs?.map((e) => ScanConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseStartScanRunRequest(): StartScanRunRequest {
  return { name: "" };
}

export const StartScanRunRequest: MessageFns<StartScanRunRequest> = {
  encode(message: StartScanRunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartScanRunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartScanRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartScanRunRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StartScanRunRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StartScanRunRequest>): StartScanRunRequest {
    return StartScanRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartScanRunRequest>): StartScanRunRequest {
    const message = createBaseStartScanRunRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetScanRunRequest(): GetScanRunRequest {
  return { name: "" };
}

export const GetScanRunRequest: MessageFns<GetScanRunRequest> = {
  encode(message: GetScanRunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScanRunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScanRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScanRunRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetScanRunRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetScanRunRequest>): GetScanRunRequest {
    return GetScanRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetScanRunRequest>): GetScanRunRequest {
    const message = createBaseGetScanRunRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListScanRunsRequest(): ListScanRunsRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListScanRunsRequest: MessageFns<ListScanRunsRequest> = {
  encode(message: ListScanRunsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListScanRunsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListScanRunsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListScanRunsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListScanRunsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListScanRunsRequest>): ListScanRunsRequest {
    return ListScanRunsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListScanRunsRequest>): ListScanRunsRequest {
    const message = createBaseListScanRunsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListScanRunsResponse(): ListScanRunsResponse {
  return { scanRuns: [], nextPageToken: "" };
}

export const ListScanRunsResponse: MessageFns<ListScanRunsResponse> = {
  encode(message: ListScanRunsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.scanRuns) {
      ScanRun.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListScanRunsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListScanRunsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scanRuns.push(ScanRun.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListScanRunsResponse {
    return {
      scanRuns: globalThis.Array.isArray(object?.scanRuns) ? object.scanRuns.map((e: any) => ScanRun.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListScanRunsResponse): unknown {
    const obj: any = {};
    if (message.scanRuns?.length) {
      obj.scanRuns = message.scanRuns.map((e) => ScanRun.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListScanRunsResponse>): ListScanRunsResponse {
    return ListScanRunsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListScanRunsResponse>): ListScanRunsResponse {
    const message = createBaseListScanRunsResponse();
    message.scanRuns = object.scanRuns?.map((e) => ScanRun.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseStopScanRunRequest(): StopScanRunRequest {
  return { name: "" };
}

export const StopScanRunRequest: MessageFns<StopScanRunRequest> = {
  encode(message: StopScanRunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopScanRunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopScanRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopScanRunRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StopScanRunRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StopScanRunRequest>): StopScanRunRequest {
    return StopScanRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopScanRunRequest>): StopScanRunRequest {
    const message = createBaseStopScanRunRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCrawledUrlsRequest(): ListCrawledUrlsRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListCrawledUrlsRequest: MessageFns<ListCrawledUrlsRequest> = {
  encode(message: ListCrawledUrlsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCrawledUrlsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCrawledUrlsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCrawledUrlsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListCrawledUrlsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListCrawledUrlsRequest>): ListCrawledUrlsRequest {
    return ListCrawledUrlsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCrawledUrlsRequest>): ListCrawledUrlsRequest {
    const message = createBaseListCrawledUrlsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListCrawledUrlsResponse(): ListCrawledUrlsResponse {
  return { crawledUrls: [], nextPageToken: "" };
}

export const ListCrawledUrlsResponse: MessageFns<ListCrawledUrlsResponse> = {
  encode(message: ListCrawledUrlsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.crawledUrls) {
      CrawledUrl.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCrawledUrlsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCrawledUrlsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.crawledUrls.push(CrawledUrl.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCrawledUrlsResponse {
    return {
      crawledUrls: globalThis.Array.isArray(object?.crawledUrls)
        ? object.crawledUrls.map((e: any) => CrawledUrl.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCrawledUrlsResponse): unknown {
    const obj: any = {};
    if (message.crawledUrls?.length) {
      obj.crawledUrls = message.crawledUrls.map((e) => CrawledUrl.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCrawledUrlsResponse>): ListCrawledUrlsResponse {
    return ListCrawledUrlsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCrawledUrlsResponse>): ListCrawledUrlsResponse {
    const message = createBaseListCrawledUrlsResponse();
    message.crawledUrls = object.crawledUrls?.map((e) => CrawledUrl.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetFindingRequest(): GetFindingRequest {
  return { name: "" };
}

export const GetFindingRequest: MessageFns<GetFindingRequest> = {
  encode(message: GetFindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFindingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFindingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFindingRequest>): GetFindingRequest {
    return GetFindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFindingRequest>): GetFindingRequest {
    const message = createBaseGetFindingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListFindingsRequest(): ListFindingsRequest {
  return { parent: "", filter: "", pageToken: "", pageSize: 0 };
}

export const ListFindingsRequest: MessageFns<ListFindingsRequest> = {
  encode(message: ListFindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListFindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListFindingsRequest>): ListFindingsRequest {
    return ListFindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFindingsRequest>): ListFindingsRequest {
    const message = createBaseListFindingsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListFindingsResponse(): ListFindingsResponse {
  return { findings: [], nextPageToken: "" };
}

export const ListFindingsResponse: MessageFns<ListFindingsResponse> = {
  encode(message: ListFindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.findings) {
      Finding.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.findings.push(Finding.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFindingsResponse {
    return {
      findings: globalThis.Array.isArray(object?.findings) ? object.findings.map((e: any) => Finding.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListFindingsResponse): unknown {
    const obj: any = {};
    if (message.findings?.length) {
      obj.findings = message.findings.map((e) => Finding.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFindingsResponse>): ListFindingsResponse {
    return ListFindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFindingsResponse>): ListFindingsResponse {
    const message = createBaseListFindingsResponse();
    message.findings = object.findings?.map((e) => Finding.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListFindingTypeStatsRequest(): ListFindingTypeStatsRequest {
  return { parent: "" };
}

export const ListFindingTypeStatsRequest: MessageFns<ListFindingTypeStatsRequest> = {
  encode(message: ListFindingTypeStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFindingTypeStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFindingTypeStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFindingTypeStatsRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: ListFindingTypeStatsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFindingTypeStatsRequest>): ListFindingTypeStatsRequest {
    return ListFindingTypeStatsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFindingTypeStatsRequest>): ListFindingTypeStatsRequest {
    const message = createBaseListFindingTypeStatsRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseListFindingTypeStatsResponse(): ListFindingTypeStatsResponse {
  return { findingTypeStats: [] };
}

export const ListFindingTypeStatsResponse: MessageFns<ListFindingTypeStatsResponse> = {
  encode(message: ListFindingTypeStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.findingTypeStats) {
      FindingTypeStats.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFindingTypeStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFindingTypeStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.findingTypeStats.push(FindingTypeStats.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFindingTypeStatsResponse {
    return {
      findingTypeStats: globalThis.Array.isArray(object?.findingTypeStats)
        ? object.findingTypeStats.map((e: any) => FindingTypeStats.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListFindingTypeStatsResponse): unknown {
    const obj: any = {};
    if (message.findingTypeStats?.length) {
      obj.findingTypeStats = message.findingTypeStats.map((e) => FindingTypeStats.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListFindingTypeStatsResponse>): ListFindingTypeStatsResponse {
    return ListFindingTypeStatsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFindingTypeStatsResponse>): ListFindingTypeStatsResponse {
    const message = createBaseListFindingTypeStatsResponse();
    message.findingTypeStats = object.findingTypeStats?.map((e) => FindingTypeStats.fromPartial(e)) || [];
    return message;
  },
};

/**
 * Cloud Web Security Scanner Service identifies security vulnerabilities in web
 * applications hosted on Google Cloud Platform. It crawls your application, and
 * attempts to exercise as many user inputs and event handlers as possible.
 */
export type WebSecurityScannerDefinition = typeof WebSecurityScannerDefinition;
export const WebSecurityScannerDefinition = {
  name: "WebSecurityScanner",
  fullName: "google.cloud.websecurityscanner.v1beta.WebSecurityScanner",
  methods: {
    /** Creates a new ScanConfig. */
    createScanConfig: {
      name: "CreateScanConfig",
      requestType: CreateScanConfigRequest,
      requestStream: false,
      responseType: ScanConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 115, 99, 97, 110, 95, 99, 111, 110, 102, 105, 103])],
          578365826: [
            Buffer.from([
              54,
              58,
              11,
              115,
              99,
              97,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              39,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an existing ScanConfig and its child resources. */
    deleteScanConfig: {
      name: "DeleteScanConfig",
      requestType: DeleteScanConfigRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              41,
              42,
              39,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a ScanConfig. */
    getScanConfig: {
      name: "GetScanConfig",
      requestType: GetScanConfigRequest,
      requestStream: false,
      responseType: ScanConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              41,
              18,
              39,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists ScanConfigs under a given project. */
    listScanConfigs: {
      name: "ListScanConfigs",
      requestType: ListScanConfigsRequest,
      requestStream: false,
      responseType: ListScanConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              41,
              18,
              39,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a ScanConfig. This method support partial update of a ScanConfig. */
    updateScanConfig: {
      name: "UpdateScanConfig",
      requestType: UpdateScanConfigRequest,
      requestStream: false,
      responseType: ScanConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              115,
              99,
              97,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              11,
              115,
              99,
              97,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              115,
              99,
              97,
              110,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Start a ScanRun according to the given ScanConfig. */
    startScanRun: {
      name: "StartScanRun",
      requestType: StartScanRunRequest,
      requestStream: false,
      responseType: ScanRun,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              58,
              1,
              42,
              34,
              45,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Gets a ScanRun. */
    getScanRun: {
      name: "GetScanRun",
      requestType: GetScanRunRequest,
      requestStream: false,
      responseType: ScanRun,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              82,
              117,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists ScanRuns under a given ScanConfig, in descending order of ScanRun
     * stop time.
     */
    listScanRuns: {
      name: "ListScanRuns",
      requestType: ListScanRunsRequest,
      requestStream: false,
      responseType: ListScanRunsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              47,
              115,
              99,
              97,
              110,
              82,
              117,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Stops a ScanRun. The stopped ScanRun is returned. */
    stopScanRun: {
      name: "StopScanRun",
      requestType: StopScanRunRequest,
      requestStream: false,
      responseType: ScanRun,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              82,
              117,
              110,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              111,
              112,
            ]),
          ],
        },
      },
    },
    /** List CrawledUrls under a given ScanRun. */
    listCrawledUrls: {
      name: "ListCrawledUrls",
      requestType: ListCrawledUrlsRequest,
      requestStream: false,
      responseType: ListCrawledUrlsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              66,
              18,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              82,
              117,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              114,
              97,
              119,
              108,
              101,
              100,
              85,
              114,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a Finding. */
    getFinding: {
      name: "GetFinding",
      requestType: GetFindingRequest,
      requestStream: false,
      responseType: Finding,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              82,
              117,
              110,
              115,
              47,
              42,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List Findings under a given ScanRun. */
    listFindings: {
      name: "ListFindings",
      requestType: ListFindingsRequest,
      requestStream: false,
      responseType: ListFindingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              82,
              117,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** List all FindingTypeStats under a given ScanRun. */
    listFindingTypeStats: {
      name: "ListFindingTypeStats",
      requestType: ListFindingTypeStatsRequest,
      requestStream: false,
      responseType: ListFindingTypeStatsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              71,
              18,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              115,
              99,
              97,
              110,
              82,
              117,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              105,
              110,
              100,
              105,
              110,
              103,
              84,
              121,
              112,
              101,
              83,
              116,
              97,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface WebSecurityScannerServiceImplementation<CallContextExt = {}> {
  /** Creates a new ScanConfig. */
  createScanConfig(
    request: CreateScanConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ScanConfig>>;
  /** Deletes an existing ScanConfig and its child resources. */
  deleteScanConfig(
    request: DeleteScanConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Gets a ScanConfig. */
  getScanConfig(request: GetScanConfigRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ScanConfig>>;
  /** Lists ScanConfigs under a given project. */
  listScanConfigs(
    request: ListScanConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListScanConfigsResponse>>;
  /** Updates a ScanConfig. This method support partial update of a ScanConfig. */
  updateScanConfig(
    request: UpdateScanConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ScanConfig>>;
  /** Start a ScanRun according to the given ScanConfig. */
  startScanRun(request: StartScanRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ScanRun>>;
  /** Gets a ScanRun. */
  getScanRun(request: GetScanRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ScanRun>>;
  /**
   * Lists ScanRuns under a given ScanConfig, in descending order of ScanRun
   * stop time.
   */
  listScanRuns(
    request: ListScanRunsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListScanRunsResponse>>;
  /** Stops a ScanRun. The stopped ScanRun is returned. */
  stopScanRun(request: StopScanRunRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ScanRun>>;
  /** List CrawledUrls under a given ScanRun. */
  listCrawledUrls(
    request: ListCrawledUrlsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCrawledUrlsResponse>>;
  /** Gets a Finding. */
  getFinding(request: GetFindingRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Finding>>;
  /** List Findings under a given ScanRun. */
  listFindings(
    request: ListFindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFindingsResponse>>;
  /** List all FindingTypeStats under a given ScanRun. */
  listFindingTypeStats(
    request: ListFindingTypeStatsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFindingTypeStatsResponse>>;
}

export interface WebSecurityScannerClient<CallOptionsExt = {}> {
  /** Creates a new ScanConfig. */
  createScanConfig(
    request: DeepPartial<CreateScanConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ScanConfig>;
  /** Deletes an existing ScanConfig and its child resources. */
  deleteScanConfig(
    request: DeepPartial<DeleteScanConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Gets a ScanConfig. */
  getScanConfig(
    request: DeepPartial<GetScanConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ScanConfig>;
  /** Lists ScanConfigs under a given project. */
  listScanConfigs(
    request: DeepPartial<ListScanConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListScanConfigsResponse>;
  /** Updates a ScanConfig. This method support partial update of a ScanConfig. */
  updateScanConfig(
    request: DeepPartial<UpdateScanConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ScanConfig>;
  /** Start a ScanRun according to the given ScanConfig. */
  startScanRun(request: DeepPartial<StartScanRunRequest>, options?: CallOptions & CallOptionsExt): Promise<ScanRun>;
  /** Gets a ScanRun. */
  getScanRun(request: DeepPartial<GetScanRunRequest>, options?: CallOptions & CallOptionsExt): Promise<ScanRun>;
  /**
   * Lists ScanRuns under a given ScanConfig, in descending order of ScanRun
   * stop time.
   */
  listScanRuns(
    request: DeepPartial<ListScanRunsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListScanRunsResponse>;
  /** Stops a ScanRun. The stopped ScanRun is returned. */
  stopScanRun(request: DeepPartial<StopScanRunRequest>, options?: CallOptions & CallOptionsExt): Promise<ScanRun>;
  /** List CrawledUrls under a given ScanRun. */
  listCrawledUrls(
    request: DeepPartial<ListCrawledUrlsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCrawledUrlsResponse>;
  /** Gets a Finding. */
  getFinding(request: DeepPartial<GetFindingRequest>, options?: CallOptions & CallOptionsExt): Promise<Finding>;
  /** List Findings under a given ScanRun. */
  listFindings(
    request: DeepPartial<ListFindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFindingsResponse>;
  /** List all FindingTypeStats under a given ScanRun. */
  listFindingTypeStats(
    request: DeepPartial<ListFindingTypeStatsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFindingTypeStatsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
