// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/beyondcorp/clientconnectorservices/v1/client_connector_services_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.beyondcorp.clientconnectorservices.v1";

/** Message describing ClientConnectorService object. */
export interface ClientConnectorService {
  /** Required. Name of resource. The name is ignored during creation. */
  name: string;
  /** Output only. [Output only] Create time stamp. */
  createTime:
    | Date
    | undefined;
  /** Output only. [Output only] Update time stamp. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. User-provided name.
   * The display name should follow certain format.
   * * Must be 6 to 30 characters in length.
   * * Can only contain lowercase letters, numbers, and hyphens.
   * * Must start with a letter.
   */
  displayName: string;
  /** Required. The details of the ingress settings. */
  ingress:
    | ClientConnectorService_Ingress
    | undefined;
  /** Required. The details of the egress settings. */
  egress:
    | ClientConnectorService_Egress
    | undefined;
  /** Output only. The operational state of the ClientConnectorService. */
  state: ClientConnectorService_State;
}

/** Represents the different states of a ClientConnectorService. */
export enum ClientConnectorService_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - ClientConnectorService is being created. */
  CREATING = 1,
  /** UPDATING - ClientConnectorService is being updated. */
  UPDATING = 2,
  /** DELETING - ClientConnectorService is being deleted. */
  DELETING = 3,
  /** RUNNING - ClientConnectorService is running. */
  RUNNING = 4,
  /**
   * DOWN - ClientConnectorService is down and may be restored in the future.
   * This happens when CCFE sends ProjectState = OFF.
   */
  DOWN = 5,
  /**
   * ERROR - ClientConnectorService encountered an error and is in an indeterministic
   * state.
   */
  ERROR = 6,
  UNRECOGNIZED = -1,
}

export function clientConnectorService_StateFromJSON(object: any): ClientConnectorService_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ClientConnectorService_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return ClientConnectorService_State.CREATING;
    case 2:
    case "UPDATING":
      return ClientConnectorService_State.UPDATING;
    case 3:
    case "DELETING":
      return ClientConnectorService_State.DELETING;
    case 4:
    case "RUNNING":
      return ClientConnectorService_State.RUNNING;
    case 5:
    case "DOWN":
      return ClientConnectorService_State.DOWN;
    case 6:
    case "ERROR":
      return ClientConnectorService_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientConnectorService_State.UNRECOGNIZED;
  }
}

export function clientConnectorService_StateToJSON(object: ClientConnectorService_State): string {
  switch (object) {
    case ClientConnectorService_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ClientConnectorService_State.CREATING:
      return "CREATING";
    case ClientConnectorService_State.UPDATING:
      return "UPDATING";
    case ClientConnectorService_State.DELETING:
      return "DELETING";
    case ClientConnectorService_State.RUNNING:
      return "RUNNING";
    case ClientConnectorService_State.DOWN:
      return "DOWN";
    case ClientConnectorService_State.ERROR:
      return "ERROR";
    case ClientConnectorService_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Settings of how to connect to the ClientGateway.
 * One of the following options should be set.
 */
export interface ClientConnectorService_Ingress {
  /** The basic ingress config for ClientGateways. */
  config?: ClientConnectorService_Ingress_Config | undefined;
}

/** The basic ingress config for ClientGateways. */
export interface ClientConnectorService_Ingress_Config {
  /**
   * Required. Immutable. The transport protocol used between the client and
   * the server.
   */
  transportProtocol: ClientConnectorService_Ingress_Config_TransportProtocol;
  /** Required. The settings used to configure basic ClientGateways. */
  destinationRoutes: ClientConnectorService_Ingress_Config_DestinationRoute[];
}

/** The protocol used to connect to the server. */
export enum ClientConnectorService_Ingress_Config_TransportProtocol {
  /** TRANSPORT_PROTOCOL_UNSPECIFIED - Default value. This value is unused. */
  TRANSPORT_PROTOCOL_UNSPECIFIED = 0,
  /** TCP - TCP protocol. */
  TCP = 1,
  UNRECOGNIZED = -1,
}

export function clientConnectorService_Ingress_Config_TransportProtocolFromJSON(
  object: any,
): ClientConnectorService_Ingress_Config_TransportProtocol {
  switch (object) {
    case 0:
    case "TRANSPORT_PROTOCOL_UNSPECIFIED":
      return ClientConnectorService_Ingress_Config_TransportProtocol.TRANSPORT_PROTOCOL_UNSPECIFIED;
    case 1:
    case "TCP":
      return ClientConnectorService_Ingress_Config_TransportProtocol.TCP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientConnectorService_Ingress_Config_TransportProtocol.UNRECOGNIZED;
  }
}

export function clientConnectorService_Ingress_Config_TransportProtocolToJSON(
  object: ClientConnectorService_Ingress_Config_TransportProtocol,
): string {
  switch (object) {
    case ClientConnectorService_Ingress_Config_TransportProtocol.TRANSPORT_PROTOCOL_UNSPECIFIED:
      return "TRANSPORT_PROTOCOL_UNSPECIFIED";
    case ClientConnectorService_Ingress_Config_TransportProtocol.TCP:
      return "TCP";
    case ClientConnectorService_Ingress_Config_TransportProtocol.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The setting used to configure ClientGateways.
 * It is adding routes to the client's routing table
 * after the connection is established.
 */
export interface ClientConnectorService_Ingress_Config_DestinationRoute {
  /**
   * Required. The network address of the subnet
   * for which the packet is routed to the ClientGateway.
   */
  address: string;
  /**
   * Required. The network mask of the subnet
   * for which the packet is routed to the ClientGateway.
   */
  netmask: string;
}

/** The details of the egress info. One of the following options should be set. */
export interface ClientConnectorService_Egress {
  /** A VPC from the consumer project. */
  peeredVpc?: ClientConnectorService_Egress_PeeredVpc | undefined;
}

/** The peered VPC owned by the consumer project. */
export interface ClientConnectorService_Egress_PeeredVpc {
  /** Required. The name of the peered VPC owned by the consumer project. */
  networkVpc: string;
}

/** Message for requesting list of ClientConnectorServices. */
export interface ListClientConnectorServicesRequest {
  /** Required. Parent value for ListClientConnectorServicesRequest. */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** Optional. A token identifying a page of results the server should return. */
  pageToken: string;
  /** Optional. Filtering results. */
  filter: string;
  /** Optional. Hint for how to order the results. */
  orderBy: string;
}

/** Message for response to listing ClientConnectorServices. */
export interface ListClientConnectorServicesResponse {
  /** The list of ClientConnectorService. */
  clientConnectorServices: ClientConnectorService[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a ClientConnectorService. */
export interface GetClientConnectorServiceRequest {
  /** Required. Name of the resource. */
  name: string;
}

/** Message for creating a ClientConnectorService. */
export interface CreateClientConnectorServiceRequest {
  /** Required. Value for parent. */
  parent: string;
  /**
   * Optional. User-settable client connector service resource ID.
   *  * Must start with a letter.
   *  * Must contain between 4-63 characters from `/[a-z][0-9]-/`.
   *  * Must end with a number or a letter.
   *
   * A random system generated name will be assigned
   * if not specified by the user.
   */
  clientConnectorServiceId: string;
  /** Required. The resource being created. */
  clientConnectorService:
    | ClientConnectorService
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/** Message for updating a ClientConnectorService */
export interface UpdateClientConnectorServiceRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * ClientConnectorService resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   *
   * Mutable fields: display_name.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated. */
  clientConnectorService:
    | ClientConnectorService
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
  /** Optional. If set as true, will create the resource if it is not found. */
  allowMissing: boolean;
}

/** Message for deleting a ClientConnectorService. */
export interface DeleteClientConnectorServiceRequest {
  /** Required. Name of the resource. */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/** Represents the metadata of the long-running operation. */
export interface ClientConnectorServiceOperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseClientConnectorService(): ClientConnectorService {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    displayName: "",
    ingress: undefined,
    egress: undefined,
    state: 0,
  };
}

export const ClientConnectorService: MessageFns<ClientConnectorService> = {
  encode(message: ClientConnectorService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.ingress !== undefined) {
      ClientConnectorService_Ingress.encode(message.ingress, writer.uint32(50).fork()).join();
    }
    if (message.egress !== undefined) {
      ClientConnectorService_Egress.encode(message.egress, writer.uint32(58).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.ingress = ClientConnectorService_Ingress.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.egress = ClientConnectorService_Egress.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      ingress: isSet(object.ingress) ? ClientConnectorService_Ingress.fromJSON(object.ingress) : undefined,
      egress: isSet(object.egress) ? ClientConnectorService_Egress.fromJSON(object.egress) : undefined,
      state: isSet(object.state) ? clientConnectorService_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: ClientConnectorService): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.ingress !== undefined) {
      obj.ingress = ClientConnectorService_Ingress.toJSON(message.ingress);
    }
    if (message.egress !== undefined) {
      obj.egress = ClientConnectorService_Egress.toJSON(message.egress);
    }
    if (message.state !== 0) {
      obj.state = clientConnectorService_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<ClientConnectorService>): ClientConnectorService {
    return ClientConnectorService.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientConnectorService>): ClientConnectorService {
    const message = createBaseClientConnectorService();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.displayName = object.displayName ?? "";
    message.ingress = (object.ingress !== undefined && object.ingress !== null)
      ? ClientConnectorService_Ingress.fromPartial(object.ingress)
      : undefined;
    message.egress = (object.egress !== undefined && object.egress !== null)
      ? ClientConnectorService_Egress.fromPartial(object.egress)
      : undefined;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseClientConnectorService_Ingress(): ClientConnectorService_Ingress {
  return { config: undefined };
}

export const ClientConnectorService_Ingress: MessageFns<ClientConnectorService_Ingress> = {
  encode(message: ClientConnectorService_Ingress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      ClientConnectorService_Ingress_Config.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService_Ingress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService_Ingress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.config = ClientConnectorService_Ingress_Config.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService_Ingress {
    return { config: isSet(object.config) ? ClientConnectorService_Ingress_Config.fromJSON(object.config) : undefined };
  },

  toJSON(message: ClientConnectorService_Ingress): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = ClientConnectorService_Ingress_Config.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<ClientConnectorService_Ingress>): ClientConnectorService_Ingress {
    return ClientConnectorService_Ingress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientConnectorService_Ingress>): ClientConnectorService_Ingress {
    const message = createBaseClientConnectorService_Ingress();
    message.config = (object.config !== undefined && object.config !== null)
      ? ClientConnectorService_Ingress_Config.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseClientConnectorService_Ingress_Config(): ClientConnectorService_Ingress_Config {
  return { transportProtocol: 0, destinationRoutes: [] };
}

export const ClientConnectorService_Ingress_Config: MessageFns<ClientConnectorService_Ingress_Config> = {
  encode(message: ClientConnectorService_Ingress_Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transportProtocol !== 0) {
      writer.uint32(8).int32(message.transportProtocol);
    }
    for (const v of message.destinationRoutes) {
      ClientConnectorService_Ingress_Config_DestinationRoute.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService_Ingress_Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService_Ingress_Config();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.transportProtocol = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationRoutes.push(
            ClientConnectorService_Ingress_Config_DestinationRoute.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService_Ingress_Config {
    return {
      transportProtocol: isSet(object.transportProtocol)
        ? clientConnectorService_Ingress_Config_TransportProtocolFromJSON(object.transportProtocol)
        : 0,
      destinationRoutes: globalThis.Array.isArray(object?.destinationRoutes)
        ? object.destinationRoutes.map((e: any) => ClientConnectorService_Ingress_Config_DestinationRoute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ClientConnectorService_Ingress_Config): unknown {
    const obj: any = {};
    if (message.transportProtocol !== 0) {
      obj.transportProtocol = clientConnectorService_Ingress_Config_TransportProtocolToJSON(message.transportProtocol);
    }
    if (message.destinationRoutes?.length) {
      obj.destinationRoutes = message.destinationRoutes.map((e) =>
        ClientConnectorService_Ingress_Config_DestinationRoute.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ClientConnectorService_Ingress_Config>): ClientConnectorService_Ingress_Config {
    return ClientConnectorService_Ingress_Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientConnectorService_Ingress_Config>): ClientConnectorService_Ingress_Config {
    const message = createBaseClientConnectorService_Ingress_Config();
    message.transportProtocol = object.transportProtocol ?? 0;
    message.destinationRoutes =
      object.destinationRoutes?.map((e) => ClientConnectorService_Ingress_Config_DestinationRoute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseClientConnectorService_Ingress_Config_DestinationRoute(): ClientConnectorService_Ingress_Config_DestinationRoute {
  return { address: "", netmask: "" };
}

export const ClientConnectorService_Ingress_Config_DestinationRoute: MessageFns<
  ClientConnectorService_Ingress_Config_DestinationRoute
> = {
  encode(
    message: ClientConnectorService_Ingress_Config_DestinationRoute,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.netmask !== "") {
      writer.uint32(18).string(message.netmask);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService_Ingress_Config_DestinationRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService_Ingress_Config_DestinationRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.netmask = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService_Ingress_Config_DestinationRoute {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      netmask: isSet(object.netmask) ? globalThis.String(object.netmask) : "",
    };
  },

  toJSON(message: ClientConnectorService_Ingress_Config_DestinationRoute): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.netmask !== "") {
      obj.netmask = message.netmask;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ClientConnectorService_Ingress_Config_DestinationRoute>,
  ): ClientConnectorService_Ingress_Config_DestinationRoute {
    return ClientConnectorService_Ingress_Config_DestinationRoute.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ClientConnectorService_Ingress_Config_DestinationRoute>,
  ): ClientConnectorService_Ingress_Config_DestinationRoute {
    const message = createBaseClientConnectorService_Ingress_Config_DestinationRoute();
    message.address = object.address ?? "";
    message.netmask = object.netmask ?? "";
    return message;
  },
};

function createBaseClientConnectorService_Egress(): ClientConnectorService_Egress {
  return { peeredVpc: undefined };
}

export const ClientConnectorService_Egress: MessageFns<ClientConnectorService_Egress> = {
  encode(message: ClientConnectorService_Egress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.peeredVpc !== undefined) {
      ClientConnectorService_Egress_PeeredVpc.encode(message.peeredVpc, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService_Egress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService_Egress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peeredVpc = ClientConnectorService_Egress_PeeredVpc.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService_Egress {
    return {
      peeredVpc: isSet(object.peeredVpc)
        ? ClientConnectorService_Egress_PeeredVpc.fromJSON(object.peeredVpc)
        : undefined,
    };
  },

  toJSON(message: ClientConnectorService_Egress): unknown {
    const obj: any = {};
    if (message.peeredVpc !== undefined) {
      obj.peeredVpc = ClientConnectorService_Egress_PeeredVpc.toJSON(message.peeredVpc);
    }
    return obj;
  },

  create(base?: DeepPartial<ClientConnectorService_Egress>): ClientConnectorService_Egress {
    return ClientConnectorService_Egress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientConnectorService_Egress>): ClientConnectorService_Egress {
    const message = createBaseClientConnectorService_Egress();
    message.peeredVpc = (object.peeredVpc !== undefined && object.peeredVpc !== null)
      ? ClientConnectorService_Egress_PeeredVpc.fromPartial(object.peeredVpc)
      : undefined;
    return message;
  },
};

function createBaseClientConnectorService_Egress_PeeredVpc(): ClientConnectorService_Egress_PeeredVpc {
  return { networkVpc: "" };
}

export const ClientConnectorService_Egress_PeeredVpc: MessageFns<ClientConnectorService_Egress_PeeredVpc> = {
  encode(message: ClientConnectorService_Egress_PeeredVpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.networkVpc !== "") {
      writer.uint32(10).string(message.networkVpc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorService_Egress_PeeredVpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorService_Egress_PeeredVpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.networkVpc = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorService_Egress_PeeredVpc {
    return { networkVpc: isSet(object.networkVpc) ? globalThis.String(object.networkVpc) : "" };
  },

  toJSON(message: ClientConnectorService_Egress_PeeredVpc): unknown {
    const obj: any = {};
    if (message.networkVpc !== "") {
      obj.networkVpc = message.networkVpc;
    }
    return obj;
  },

  create(base?: DeepPartial<ClientConnectorService_Egress_PeeredVpc>): ClientConnectorService_Egress_PeeredVpc {
    return ClientConnectorService_Egress_PeeredVpc.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientConnectorService_Egress_PeeredVpc>): ClientConnectorService_Egress_PeeredVpc {
    const message = createBaseClientConnectorService_Egress_PeeredVpc();
    message.networkVpc = object.networkVpc ?? "";
    return message;
  },
};

function createBaseListClientConnectorServicesRequest(): ListClientConnectorServicesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListClientConnectorServicesRequest: MessageFns<ListClientConnectorServicesRequest> = {
  encode(message: ListClientConnectorServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListClientConnectorServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClientConnectorServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClientConnectorServicesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListClientConnectorServicesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListClientConnectorServicesRequest>): ListClientConnectorServicesRequest {
    return ListClientConnectorServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListClientConnectorServicesRequest>): ListClientConnectorServicesRequest {
    const message = createBaseListClientConnectorServicesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListClientConnectorServicesResponse(): ListClientConnectorServicesResponse {
  return { clientConnectorServices: [], nextPageToken: "", unreachable: [] };
}

export const ListClientConnectorServicesResponse: MessageFns<ListClientConnectorServicesResponse> = {
  encode(message: ListClientConnectorServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clientConnectorServices) {
      ClientConnectorService.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListClientConnectorServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListClientConnectorServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientConnectorServices.push(ClientConnectorService.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListClientConnectorServicesResponse {
    return {
      clientConnectorServices: globalThis.Array.isArray(object?.clientConnectorServices)
        ? object.clientConnectorServices.map((e: any) => ClientConnectorService.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListClientConnectorServicesResponse): unknown {
    const obj: any = {};
    if (message.clientConnectorServices?.length) {
      obj.clientConnectorServices = message.clientConnectorServices.map((e) => ClientConnectorService.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListClientConnectorServicesResponse>): ListClientConnectorServicesResponse {
    return ListClientConnectorServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListClientConnectorServicesResponse>): ListClientConnectorServicesResponse {
    const message = createBaseListClientConnectorServicesResponse();
    message.clientConnectorServices =
      object.clientConnectorServices?.map((e) => ClientConnectorService.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetClientConnectorServiceRequest(): GetClientConnectorServiceRequest {
  return { name: "" };
}

export const GetClientConnectorServiceRequest: MessageFns<GetClientConnectorServiceRequest> = {
  encode(message: GetClientConnectorServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetClientConnectorServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClientConnectorServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClientConnectorServiceRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetClientConnectorServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetClientConnectorServiceRequest>): GetClientConnectorServiceRequest {
    return GetClientConnectorServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetClientConnectorServiceRequest>): GetClientConnectorServiceRequest {
    const message = createBaseGetClientConnectorServiceRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateClientConnectorServiceRequest(): CreateClientConnectorServiceRequest {
  return {
    parent: "",
    clientConnectorServiceId: "",
    clientConnectorService: undefined,
    requestId: "",
    validateOnly: false,
  };
}

export const CreateClientConnectorServiceRequest: MessageFns<CreateClientConnectorServiceRequest> = {
  encode(message: CreateClientConnectorServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.clientConnectorServiceId !== "") {
      writer.uint32(18).string(message.clientConnectorServiceId);
    }
    if (message.clientConnectorService !== undefined) {
      ClientConnectorService.encode(message.clientConnectorService, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClientConnectorServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClientConnectorServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientConnectorServiceId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientConnectorService = ClientConnectorService.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClientConnectorServiceRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      clientConnectorServiceId: isSet(object.clientConnectorServiceId)
        ? globalThis.String(object.clientConnectorServiceId)
        : "",
      clientConnectorService: isSet(object.clientConnectorService)
        ? ClientConnectorService.fromJSON(object.clientConnectorService)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateClientConnectorServiceRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.clientConnectorServiceId !== "") {
      obj.clientConnectorServiceId = message.clientConnectorServiceId;
    }
    if (message.clientConnectorService !== undefined) {
      obj.clientConnectorService = ClientConnectorService.toJSON(message.clientConnectorService);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClientConnectorServiceRequest>): CreateClientConnectorServiceRequest {
    return CreateClientConnectorServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClientConnectorServiceRequest>): CreateClientConnectorServiceRequest {
    const message = createBaseCreateClientConnectorServiceRequest();
    message.parent = object.parent ?? "";
    message.clientConnectorServiceId = object.clientConnectorServiceId ?? "";
    message.clientConnectorService =
      (object.clientConnectorService !== undefined && object.clientConnectorService !== null)
        ? ClientConnectorService.fromPartial(object.clientConnectorService)
        : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateClientConnectorServiceRequest(): UpdateClientConnectorServiceRequest {
  return {
    updateMask: undefined,
    clientConnectorService: undefined,
    requestId: "",
    validateOnly: false,
    allowMissing: false,
  };
}

export const UpdateClientConnectorServiceRequest: MessageFns<UpdateClientConnectorServiceRequest> = {
  encode(message: UpdateClientConnectorServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.clientConnectorService !== undefined) {
      ClientConnectorService.encode(message.clientConnectorService, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    if (message.allowMissing !== false) {
      writer.uint32(40).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateClientConnectorServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateClientConnectorServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientConnectorService = ClientConnectorService.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateClientConnectorServiceRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      clientConnectorService: isSet(object.clientConnectorService)
        ? ClientConnectorService.fromJSON(object.clientConnectorService)
        : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateClientConnectorServiceRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.clientConnectorService !== undefined) {
      obj.clientConnectorService = ClientConnectorService.toJSON(message.clientConnectorService);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateClientConnectorServiceRequest>): UpdateClientConnectorServiceRequest {
    return UpdateClientConnectorServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateClientConnectorServiceRequest>): UpdateClientConnectorServiceRequest {
    const message = createBaseUpdateClientConnectorServiceRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.clientConnectorService =
      (object.clientConnectorService !== undefined && object.clientConnectorService !== null)
        ? ClientConnectorService.fromPartial(object.clientConnectorService)
        : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteClientConnectorServiceRequest(): DeleteClientConnectorServiceRequest {
  return { name: "", requestId: "", validateOnly: false };
}

export const DeleteClientConnectorServiceRequest: MessageFns<DeleteClientConnectorServiceRequest> = {
  encode(message: DeleteClientConnectorServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteClientConnectorServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteClientConnectorServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteClientConnectorServiceRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: DeleteClientConnectorServiceRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteClientConnectorServiceRequest>): DeleteClientConnectorServiceRequest {
    return DeleteClientConnectorServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteClientConnectorServiceRequest>): DeleteClientConnectorServiceRequest {
    const message = createBaseDeleteClientConnectorServiceRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseClientConnectorServiceOperationMetadata(): ClientConnectorServiceOperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const ClientConnectorServiceOperationMetadata: MessageFns<ClientConnectorServiceOperationMetadata> = {
  encode(message: ClientConnectorServiceOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConnectorServiceOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConnectorServiceOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConnectorServiceOperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: ClientConnectorServiceOperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<ClientConnectorServiceOperationMetadata>): ClientConnectorServiceOperationMetadata {
    return ClientConnectorServiceOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientConnectorServiceOperationMetadata>): ClientConnectorServiceOperationMetadata {
    const message = createBaseClientConnectorServiceOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * API Overview:
 *
 * The `beyondcorp.googleapis.com` service implements the Google Cloud
 * BeyondCorp API.
 *
 * Data Model:
 *
 * The ClientConnectorServicesService exposes the following resources:
 *
 * * Client Connector Services, named as follows:
 *   `projects/{project_id}/locations/{location_id}/client_connector_services/{client_connector_service_id}`.
 */
export type ClientConnectorServicesServiceDefinition = typeof ClientConnectorServicesServiceDefinition;
export const ClientConnectorServicesServiceDefinition = {
  name: "ClientConnectorServicesService",
  fullName: "google.cloud.beyondcorp.clientconnectorservices.v1.ClientConnectorServicesService",
  methods: {
    /** Lists ClientConnectorServices in a given project and location. */
    listClientConnectorServices: {
      name: "ListClientConnectorServices",
      requestType: ListClientConnectorServicesRequest,
      requestStream: false,
      responseType: ListClientConnectorServicesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              105,
              101,
              110,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single ClientConnectorService. */
    getClientConnectorService: {
      name: "GetClientConnectorService",
      requestType: GetClientConnectorServiceRequest,
      requestStream: false,
      responseType: ClientConnectorService,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              105,
              101,
              110,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new ClientConnectorService in a given project and location. */
    createClientConnectorService: {
      name: "CreateClientConnectorService",
      requestType: CreateClientConnectorServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              65,
              10,
              22,
              67,
              108,
              105,
              101,
              110,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              18,
              39,
              67,
              108,
              105,
              101,
              110,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              59,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              44,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              58,
              24,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              105,
              101,
              110,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single ClientConnectorService. */
    updateClientConnectorService: {
      name: "UpdateClientConnectorService",
      requestType: UpdateClientConnectorServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              65,
              10,
              22,
              67,
              108,
              105,
              101,
              110,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              18,
              39,
              67,
              108,
              105,
              101,
              110,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              36,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              112,
              58,
              24,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              50,
              84,
              47,
              118,
              49,
              47,
              123,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              95,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              105,
              101,
              110,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single ClientConnectorService. */
    deleteClientConnectorService: {
      name: "DeleteClientConnectorService",
      requestType: DeleteClientConnectorServiceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              64,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              39,
              67,
              108,
              105,
              101,
              110,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              105,
              101,
              110,
              116,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              111,
              114,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ClientConnectorServicesServiceImplementation<CallContextExt = {}> {
  /** Lists ClientConnectorServices in a given project and location. */
  listClientConnectorServices(
    request: ListClientConnectorServicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListClientConnectorServicesResponse>>;
  /** Gets details of a single ClientConnectorService. */
  getClientConnectorService(
    request: GetClientConnectorServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ClientConnectorService>>;
  /** Creates a new ClientConnectorService in a given project and location. */
  createClientConnectorService(
    request: CreateClientConnectorServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single ClientConnectorService. */
  updateClientConnectorService(
    request: UpdateClientConnectorServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single ClientConnectorService. */
  deleteClientConnectorService(
    request: DeleteClientConnectorServiceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ClientConnectorServicesServiceClient<CallOptionsExt = {}> {
  /** Lists ClientConnectorServices in a given project and location. */
  listClientConnectorServices(
    request: DeepPartial<ListClientConnectorServicesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListClientConnectorServicesResponse>;
  /** Gets details of a single ClientConnectorService. */
  getClientConnectorService(
    request: DeepPartial<GetClientConnectorServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ClientConnectorService>;
  /** Creates a new ClientConnectorService in a given project and location. */
  createClientConnectorService(
    request: DeepPartial<CreateClientConnectorServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single ClientConnectorService. */
  updateClientConnectorService(
    request: DeepPartial<UpdateClientConnectorServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single ClientConnectorService. */
  deleteClientConnectorService(
    request: DeepPartial<DeleteClientConnectorServiceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
