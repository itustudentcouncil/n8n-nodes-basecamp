// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/beyondcorp/appconnections/v1/app_connections_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../longrunning/operations.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.beyondcorp.appconnections.v1";

/** Request message for BeyondCorp.ListAppConnections. */
export interface ListAppConnectionsRequest {
  /**
   * Required. The resource name of the AppConnection location using the form:
   * `projects/{project_id}/locations/{location_id}`
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return.
   * If not specified, a default value of 50 will be used by the service.
   * Regardless of the page_size value, the response may include a partial list
   * and a caller should only rely on response's
   * [next_page_token][BeyondCorp.ListAppConnectionsResponse.next_page_token] to
   * determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * Optional. The next_page_token value returned from a previous
   * ListAppConnectionsRequest, if any.
   */
  pageToken: string;
  /** Optional. A filter specifying constraints of a list operation. */
  filter: string;
  /**
   * Optional. Specifies the ordering of results. See
   * [Sorting
   * order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
   * for more information.
   */
  orderBy: string;
}

/** Response message for BeyondCorp.ListAppConnections. */
export interface ListAppConnectionsResponse {
  /** A list of BeyondCorp AppConnections in the project. */
  appConnections: AppConnection[];
  /**
   * A token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** A list of locations that could not be reached. */
  unreachable: string[];
}

/** Request message for BeyondCorp.GetAppConnection. */
export interface GetAppConnectionRequest {
  /**
   * Required. BeyondCorp AppConnection name using the form:
   * `projects/{project_id}/locations/{location_id}/appConnections/{app_connection_id}`
   */
  name: string;
}

/** Request message for BeyondCorp.CreateAppConnection. */
export interface CreateAppConnectionRequest {
  /**
   * Required. The resource project name of the AppConnection location using the
   * form: `projects/{project_id}/locations/{location_id}`
   */
  parent: string;
  /**
   * Optional. User-settable AppConnection resource ID.
   *  * Must start with a letter.
   *  * Must contain between 4-63 characters from `/[a-z][0-9]-/`.
   *  * Must end with a number or a letter.
   */
  appConnectionId: string;
  /** Required. A BeyondCorp AppConnection resource. */
  appConnection:
    | AppConnection
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/** Request message for BeyondCorp.UpdateAppConnection. */
export interface UpdateAppConnectionRequest {
  /**
   * Required. Mask of fields to update. At least one path must be supplied in
   * this field. The elements of the repeated paths field may only include these
   * fields from [BeyondCorp.AppConnection]:
   * * `labels`
   * * `display_name`
   * * `application_endpoint`
   * * `connectors`
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. AppConnection message with updated fields. Only supported fields
   * specified in update_mask are updated.
   */
  appConnection:
    | AppConnection
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
  /** Optional. If set as true, will create the resource if it is not found. */
  allowMissing: boolean;
}

/** Request message for BeyondCorp.DeleteAppConnection. */
export interface DeleteAppConnectionRequest {
  /**
   * Required. BeyondCorp Connector name using the form:
   * `projects/{project_id}/locations/{location_id}/appConnections/{app_connection_id}`
   */
  name: string;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set, validates request by executing a dry-run which would not
   * alter the resource in any way.
   */
  validateOnly: boolean;
}

/** Request message for BeyondCorp.ResolveAppConnections. */
export interface ResolveAppConnectionsRequest {
  /**
   * Required. The resource name of the AppConnection location using the form:
   * `projects/{project_id}/locations/{location_id}`
   */
  parent: string;
  /**
   * Required. BeyondCorp Connector name of the connector associated with those
   * AppConnections using the form:
   * `projects/{project_id}/locations/{location_id}/appConnectors/{app_connector_id}`
   */
  appConnectorId: string;
  /**
   * Optional. The maximum number of items to return.
   * If not specified, a default value of 50 will be used by the service.
   * Regardless of the page_size value, the response may include a partial list
   * and a caller should only rely on response's
   * [next_page_token][BeyondCorp.ResolveAppConnectionsResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   */
  pageSize: number;
  /**
   * Optional. The next_page_token value returned from a previous
   * ResolveAppConnectionsResponse, if any.
   */
  pageToken: string;
}

/** Response message for BeyondCorp.ResolveAppConnections. */
export interface ResolveAppConnectionsResponse {
  /** A list of BeyondCorp AppConnections with details in the project. */
  appConnectionDetails: ResolveAppConnectionsResponse_AppConnectionDetails[];
  /**
   * A token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** A list of locations that could not be reached. */
  unreachable: string[];
}

/** Details of the AppConnection. */
export interface ResolveAppConnectionsResponse_AppConnectionDetails {
  /** A BeyondCorp AppConnection in the project. */
  appConnection:
    | AppConnection
    | undefined;
  /**
   * If type=GCP_REGIONAL_MIG, contains most recent VM instances, like
   * `https://www.googleapis.com/compute/v1/projects/{project_id}/zones/{zone_id}/instances/{instance_id}`.
   */
  recentMigVms: string[];
}

/**
 * A BeyondCorp AppConnection resource represents a BeyondCorp protected
 * AppConnection to a remote application. It creates all the necessary GCP
 * components needed for creating a BeyondCorp protected AppConnection. Multiple
 * connectors can be authorised for a single AppConnection.
 */
export interface AppConnection {
  /**
   * Required. Unique resource name of the AppConnection.
   * The name is ignored when creating a AppConnection.
   */
  name: string;
  /** Output only. Timestamp when the resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when the resource was last modified. */
  updateTime:
    | Date
    | undefined;
  /** Optional. Resource labels to represent user provided metadata. */
  labels: { [key: string]: string };
  /**
   * Optional. An arbitrary user-provided name for the AppConnection. Cannot
   * exceed 64 characters.
   */
  displayName: string;
  /**
   * Output only. A unique identifier for the instance generated by the
   * system.
   */
  uid: string;
  /** Required. The type of network connectivity used by the AppConnection. */
  type: AppConnection_Type;
  /**
   * Required. Address of the remote application endpoint for the BeyondCorp
   * AppConnection.
   */
  applicationEndpoint:
    | AppConnection_ApplicationEndpoint
    | undefined;
  /**
   * Optional. List of [google.cloud.beyondcorp.v1main.Connector.name] that are
   * authorised to be associated with this AppConnection.
   */
  connectors: string[];
  /** Output only. The current state of the AppConnection. */
  state: AppConnection_State;
  /** Optional. Gateway used by the AppConnection. */
  gateway: AppConnection_Gateway | undefined;
}

/**
 * Enum containing list of all possible network connectivity options
 * supported by BeyondCorp AppConnection.
 */
export enum AppConnection_Type {
  /** TYPE_UNSPECIFIED - Default value. This value is unused. */
  TYPE_UNSPECIFIED = 0,
  /**
   * TCP_PROXY - TCP Proxy based BeyondCorp AppConnection. API will default to this if
   * unset.
   */
  TCP_PROXY = 1,
  UNRECOGNIZED = -1,
}

export function appConnection_TypeFromJSON(object: any): AppConnection_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return AppConnection_Type.TYPE_UNSPECIFIED;
    case 1:
    case "TCP_PROXY":
      return AppConnection_Type.TCP_PROXY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppConnection_Type.UNRECOGNIZED;
  }
}

export function appConnection_TypeToJSON(object: AppConnection_Type): string {
  switch (object) {
    case AppConnection_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case AppConnection_Type.TCP_PROXY:
      return "TCP_PROXY";
    case AppConnection_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the different states of a AppConnection. */
export enum AppConnection_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - AppConnection is being created. */
  CREATING = 1,
  /** CREATED - AppConnection has been created. */
  CREATED = 2,
  /** UPDATING - AppConnection's configuration is being updated. */
  UPDATING = 3,
  /** DELETING - AppConnection is being deleted. */
  DELETING = 4,
  /**
   * DOWN - AppConnection is down and may be restored in the future.
   * This happens when CCFE sends ProjectState = OFF.
   */
  DOWN = 5,
  UNRECOGNIZED = -1,
}

export function appConnection_StateFromJSON(object: any): AppConnection_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return AppConnection_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return AppConnection_State.CREATING;
    case 2:
    case "CREATED":
      return AppConnection_State.CREATED;
    case 3:
    case "UPDATING":
      return AppConnection_State.UPDATING;
    case 4:
    case "DELETING":
      return AppConnection_State.DELETING;
    case 5:
    case "DOWN":
      return AppConnection_State.DOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppConnection_State.UNRECOGNIZED;
  }
}

export function appConnection_StateToJSON(object: AppConnection_State): string {
  switch (object) {
    case AppConnection_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case AppConnection_State.CREATING:
      return "CREATING";
    case AppConnection_State.CREATED:
      return "CREATED";
    case AppConnection_State.UPDATING:
      return "UPDATING";
    case AppConnection_State.DELETING:
      return "DELETING";
    case AppConnection_State.DOWN:
      return "DOWN";
    case AppConnection_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ApplicationEndpoint represents a remote application endpoint. */
export interface AppConnection_ApplicationEndpoint {
  /** Required. Hostname or IP address of the remote application endpoint. */
  host: string;
  /** Required. Port of the remote application endpoint. */
  port: number;
}

/**
 * Gateway represents a user facing component that serves as an entrance to
 * enable connectivity.
 */
export interface AppConnection_Gateway {
  /** Required. The type of hosting used by the gateway. */
  type: AppConnection_Gateway_Type;
  /** Output only. Server-defined URI for this resource. */
  uri: string;
  /**
   * Output only. Ingress port reserved on the gateways for this
   * AppConnection, if not specified or zero, the default port is 19443.
   */
  ingressPort: number;
  /**
   * Required. AppGateway name in following format:
   * `projects/{project_id}/locations/{location_id}/appgateways/{gateway_id}`
   */
  appGateway: string;
}

/** Enum listing possible gateway hosting options. */
export enum AppConnection_Gateway_Type {
  /** TYPE_UNSPECIFIED - Default value. This value is unused. */
  TYPE_UNSPECIFIED = 0,
  /** GCP_REGIONAL_MIG - Gateway hosted in a GCP regional managed instance group. */
  GCP_REGIONAL_MIG = 1,
  UNRECOGNIZED = -1,
}

export function appConnection_Gateway_TypeFromJSON(object: any): AppConnection_Gateway_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return AppConnection_Gateway_Type.TYPE_UNSPECIFIED;
    case 1:
    case "GCP_REGIONAL_MIG":
      return AppConnection_Gateway_Type.GCP_REGIONAL_MIG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppConnection_Gateway_Type.UNRECOGNIZED;
  }
}

export function appConnection_Gateway_TypeToJSON(object: AppConnection_Gateway_Type): string {
  switch (object) {
    case AppConnection_Gateway_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case AppConnection_Gateway_Type.GCP_REGIONAL_MIG:
      return "GCP_REGIONAL_MIG";
    case AppConnection_Gateway_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AppConnection_LabelsEntry {
  key: string;
  value: string;
}

/** Represents the metadata of the long-running operation. */
export interface AppConnectionOperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseListAppConnectionsRequest(): ListAppConnectionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListAppConnectionsRequest: MessageFns<ListAppConnectionsRequest> = {
  encode(message: ListAppConnectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAppConnectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppConnectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppConnectionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListAppConnectionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAppConnectionsRequest>): ListAppConnectionsRequest {
    return ListAppConnectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppConnectionsRequest>): ListAppConnectionsRequest {
    const message = createBaseListAppConnectionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListAppConnectionsResponse(): ListAppConnectionsResponse {
  return { appConnections: [], nextPageToken: "", unreachable: [] };
}

export const ListAppConnectionsResponse: MessageFns<ListAppConnectionsResponse> = {
  encode(message: ListAppConnectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.appConnections) {
      AppConnection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAppConnectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppConnectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appConnections.push(AppConnection.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAppConnectionsResponse {
    return {
      appConnections: globalThis.Array.isArray(object?.appConnections)
        ? object.appConnections.map((e: any) => AppConnection.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListAppConnectionsResponse): unknown {
    const obj: any = {};
    if (message.appConnections?.length) {
      obj.appConnections = message.appConnections.map((e) => AppConnection.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAppConnectionsResponse>): ListAppConnectionsResponse {
    return ListAppConnectionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppConnectionsResponse>): ListAppConnectionsResponse {
    const message = createBaseListAppConnectionsResponse();
    message.appConnections = object.appConnections?.map((e) => AppConnection.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetAppConnectionRequest(): GetAppConnectionRequest {
  return { name: "" };
}

export const GetAppConnectionRequest: MessageFns<GetAppConnectionRequest> = {
  encode(message: GetAppConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAppConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAppConnectionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAppConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAppConnectionRequest>): GetAppConnectionRequest {
    return GetAppConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAppConnectionRequest>): GetAppConnectionRequest {
    const message = createBaseGetAppConnectionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateAppConnectionRequest(): CreateAppConnectionRequest {
  return { parent: "", appConnectionId: "", appConnection: undefined, requestId: "", validateOnly: false };
}

export const CreateAppConnectionRequest: MessageFns<CreateAppConnectionRequest> = {
  encode(message: CreateAppConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.appConnectionId !== "") {
      writer.uint32(18).string(message.appConnectionId);
    }
    if (message.appConnection !== undefined) {
      AppConnection.encode(message.appConnection, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(40).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAppConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAppConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appConnectionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.appConnection = AppConnection.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAppConnectionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      appConnectionId: isSet(object.appConnectionId) ? globalThis.String(object.appConnectionId) : "",
      appConnection: isSet(object.appConnection) ? AppConnection.fromJSON(object.appConnection) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateAppConnectionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.appConnectionId !== "") {
      obj.appConnectionId = message.appConnectionId;
    }
    if (message.appConnection !== undefined) {
      obj.appConnection = AppConnection.toJSON(message.appConnection);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAppConnectionRequest>): CreateAppConnectionRequest {
    return CreateAppConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAppConnectionRequest>): CreateAppConnectionRequest {
    const message = createBaseCreateAppConnectionRequest();
    message.parent = object.parent ?? "";
    message.appConnectionId = object.appConnectionId ?? "";
    message.appConnection = (object.appConnection !== undefined && object.appConnection !== null)
      ? AppConnection.fromPartial(object.appConnection)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateAppConnectionRequest(): UpdateAppConnectionRequest {
  return { updateMask: undefined, appConnection: undefined, requestId: "", validateOnly: false, allowMissing: false };
}

export const UpdateAppConnectionRequest: MessageFns<UpdateAppConnectionRequest> = {
  encode(message: UpdateAppConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.appConnection !== undefined) {
      AppConnection.encode(message.appConnection, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    if (message.allowMissing !== false) {
      writer.uint32(40).bool(message.allowMissing);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAppConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appConnection = AppConnection.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.allowMissing = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAppConnectionRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      appConnection: isSet(object.appConnection) ? AppConnection.fromJSON(object.appConnection) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
      allowMissing: isSet(object.allowMissing) ? globalThis.Boolean(object.allowMissing) : false,
    };
  },

  toJSON(message: UpdateAppConnectionRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.appConnection !== undefined) {
      obj.appConnection = AppConnection.toJSON(message.appConnection);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    if (message.allowMissing !== false) {
      obj.allowMissing = message.allowMissing;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAppConnectionRequest>): UpdateAppConnectionRequest {
    return UpdateAppConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAppConnectionRequest>): UpdateAppConnectionRequest {
    const message = createBaseUpdateAppConnectionRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.appConnection = (object.appConnection !== undefined && object.appConnection !== null)
      ? AppConnection.fromPartial(object.appConnection)
      : undefined;
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    message.allowMissing = object.allowMissing ?? false;
    return message;
  },
};

function createBaseDeleteAppConnectionRequest(): DeleteAppConnectionRequest {
  return { name: "", requestId: "", validateOnly: false };
}

export const DeleteAppConnectionRequest: MessageFns<DeleteAppConnectionRequest> = {
  encode(message: DeleteAppConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAppConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAppConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAppConnectionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: DeleteAppConnectionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAppConnectionRequest>): DeleteAppConnectionRequest {
    return DeleteAppConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAppConnectionRequest>): DeleteAppConnectionRequest {
    const message = createBaseDeleteAppConnectionRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseResolveAppConnectionsRequest(): ResolveAppConnectionsRequest {
  return { parent: "", appConnectorId: "", pageSize: 0, pageToken: "" };
}

export const ResolveAppConnectionsRequest: MessageFns<ResolveAppConnectionsRequest> = {
  encode(message: ResolveAppConnectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.appConnectorId !== "") {
      writer.uint32(18).string(message.appConnectorId);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveAppConnectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveAppConnectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appConnectorId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveAppConnectionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      appConnectorId: isSet(object.appConnectorId) ? globalThis.String(object.appConnectorId) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ResolveAppConnectionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.appConnectorId !== "") {
      obj.appConnectorId = message.appConnectorId;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ResolveAppConnectionsRequest>): ResolveAppConnectionsRequest {
    return ResolveAppConnectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResolveAppConnectionsRequest>): ResolveAppConnectionsRequest {
    const message = createBaseResolveAppConnectionsRequest();
    message.parent = object.parent ?? "";
    message.appConnectorId = object.appConnectorId ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseResolveAppConnectionsResponse(): ResolveAppConnectionsResponse {
  return { appConnectionDetails: [], nextPageToken: "", unreachable: [] };
}

export const ResolveAppConnectionsResponse: MessageFns<ResolveAppConnectionsResponse> = {
  encode(message: ResolveAppConnectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.appConnectionDetails) {
      ResolveAppConnectionsResponse_AppConnectionDetails.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveAppConnectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveAppConnectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appConnectionDetails.push(
            ResolveAppConnectionsResponse_AppConnectionDetails.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveAppConnectionsResponse {
    return {
      appConnectionDetails: globalThis.Array.isArray(object?.appConnectionDetails)
        ? object.appConnectionDetails.map((e: any) => ResolveAppConnectionsResponse_AppConnectionDetails.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ResolveAppConnectionsResponse): unknown {
    const obj: any = {};
    if (message.appConnectionDetails?.length) {
      obj.appConnectionDetails = message.appConnectionDetails.map((e) =>
        ResolveAppConnectionsResponse_AppConnectionDetails.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ResolveAppConnectionsResponse>): ResolveAppConnectionsResponse {
    return ResolveAppConnectionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResolveAppConnectionsResponse>): ResolveAppConnectionsResponse {
    const message = createBaseResolveAppConnectionsResponse();
    message.appConnectionDetails =
      object.appConnectionDetails?.map((e) => ResolveAppConnectionsResponse_AppConnectionDetails.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseResolveAppConnectionsResponse_AppConnectionDetails(): ResolveAppConnectionsResponse_AppConnectionDetails {
  return { appConnection: undefined, recentMigVms: [] };
}

export const ResolveAppConnectionsResponse_AppConnectionDetails: MessageFns<
  ResolveAppConnectionsResponse_AppConnectionDetails
> = {
  encode(
    message: ResolveAppConnectionsResponse_AppConnectionDetails,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.appConnection !== undefined) {
      AppConnection.encode(message.appConnection, writer.uint32(10).fork()).join();
    }
    for (const v of message.recentMigVms) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolveAppConnectionsResponse_AppConnectionDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolveAppConnectionsResponse_AppConnectionDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appConnection = AppConnection.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.recentMigVms.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolveAppConnectionsResponse_AppConnectionDetails {
    return {
      appConnection: isSet(object.appConnection) ? AppConnection.fromJSON(object.appConnection) : undefined,
      recentMigVms: globalThis.Array.isArray(object?.recentMigVms)
        ? object.recentMigVms.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ResolveAppConnectionsResponse_AppConnectionDetails): unknown {
    const obj: any = {};
    if (message.appConnection !== undefined) {
      obj.appConnection = AppConnection.toJSON(message.appConnection);
    }
    if (message.recentMigVms?.length) {
      obj.recentMigVms = message.recentMigVms;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ResolveAppConnectionsResponse_AppConnectionDetails>,
  ): ResolveAppConnectionsResponse_AppConnectionDetails {
    return ResolveAppConnectionsResponse_AppConnectionDetails.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResolveAppConnectionsResponse_AppConnectionDetails>,
  ): ResolveAppConnectionsResponse_AppConnectionDetails {
    const message = createBaseResolveAppConnectionsResponse_AppConnectionDetails();
    message.appConnection = (object.appConnection !== undefined && object.appConnection !== null)
      ? AppConnection.fromPartial(object.appConnection)
      : undefined;
    message.recentMigVms = object.recentMigVms?.map((e) => e) || [];
    return message;
  },
};

function createBaseAppConnection(): AppConnection {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    uid: "",
    type: 0,
    applicationEndpoint: undefined,
    connectors: [],
    state: 0,
    gateway: undefined,
  };
}

export const AppConnection: MessageFns<AppConnection> = {
  encode(message: AppConnection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      AppConnection_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.uid !== "") {
      writer.uint32(50).string(message.uid);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    if (message.applicationEndpoint !== undefined) {
      AppConnection_ApplicationEndpoint.encode(message.applicationEndpoint, writer.uint32(66).fork()).join();
    }
    for (const v of message.connectors) {
      writer.uint32(74).string(v!);
    }
    if (message.state !== 0) {
      writer.uint32(80).int32(message.state);
    }
    if (message.gateway !== undefined) {
      AppConnection_Gateway.encode(message.gateway, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = AppConnection_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.applicationEndpoint = AppConnection_ApplicationEndpoint.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.connectors.push(reader.string());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.gateway = AppConnection_Gateway.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnection {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      type: isSet(object.type) ? appConnection_TypeFromJSON(object.type) : 0,
      applicationEndpoint: isSet(object.applicationEndpoint)
        ? AppConnection_ApplicationEndpoint.fromJSON(object.applicationEndpoint)
        : undefined,
      connectors: globalThis.Array.isArray(object?.connectors)
        ? object.connectors.map((e: any) => globalThis.String(e))
        : [],
      state: isSet(object.state) ? appConnection_StateFromJSON(object.state) : 0,
      gateway: isSet(object.gateway) ? AppConnection_Gateway.fromJSON(object.gateway) : undefined,
    };
  },

  toJSON(message: AppConnection): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.type !== 0) {
      obj.type = appConnection_TypeToJSON(message.type);
    }
    if (message.applicationEndpoint !== undefined) {
      obj.applicationEndpoint = AppConnection_ApplicationEndpoint.toJSON(message.applicationEndpoint);
    }
    if (message.connectors?.length) {
      obj.connectors = message.connectors;
    }
    if (message.state !== 0) {
      obj.state = appConnection_StateToJSON(message.state);
    }
    if (message.gateway !== undefined) {
      obj.gateway = AppConnection_Gateway.toJSON(message.gateway);
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnection>): AppConnection {
    return AppConnection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppConnection>): AppConnection {
    const message = createBaseAppConnection();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.uid = object.uid ?? "";
    message.type = object.type ?? 0;
    message.applicationEndpoint = (object.applicationEndpoint !== undefined && object.applicationEndpoint !== null)
      ? AppConnection_ApplicationEndpoint.fromPartial(object.applicationEndpoint)
      : undefined;
    message.connectors = object.connectors?.map((e) => e) || [];
    message.state = object.state ?? 0;
    message.gateway = (object.gateway !== undefined && object.gateway !== null)
      ? AppConnection_Gateway.fromPartial(object.gateway)
      : undefined;
    return message;
  },
};

function createBaseAppConnection_ApplicationEndpoint(): AppConnection_ApplicationEndpoint {
  return { host: "", port: 0 };
}

export const AppConnection_ApplicationEndpoint: MessageFns<AppConnection_ApplicationEndpoint> = {
  encode(message: AppConnection_ApplicationEndpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.host !== "") {
      writer.uint32(10).string(message.host);
    }
    if (message.port !== 0) {
      writer.uint32(16).int32(message.port);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnection_ApplicationEndpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnection_ApplicationEndpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.host = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.port = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnection_ApplicationEndpoint {
    return {
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
    };
  },

  toJSON(message: AppConnection_ApplicationEndpoint): unknown {
    const obj: any = {};
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnection_ApplicationEndpoint>): AppConnection_ApplicationEndpoint {
    return AppConnection_ApplicationEndpoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppConnection_ApplicationEndpoint>): AppConnection_ApplicationEndpoint {
    const message = createBaseAppConnection_ApplicationEndpoint();
    message.host = object.host ?? "";
    message.port = object.port ?? 0;
    return message;
  },
};

function createBaseAppConnection_Gateway(): AppConnection_Gateway {
  return { type: 0, uri: "", ingressPort: 0, appGateway: "" };
}

export const AppConnection_Gateway: MessageFns<AppConnection_Gateway> = {
  encode(message: AppConnection_Gateway, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.uri !== "") {
      writer.uint32(26).string(message.uri);
    }
    if (message.ingressPort !== 0) {
      writer.uint32(32).int32(message.ingressPort);
    }
    if (message.appGateway !== "") {
      writer.uint32(42).string(message.appGateway);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnection_Gateway {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnection_Gateway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.ingressPort = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.appGateway = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnection_Gateway {
    return {
      type: isSet(object.type) ? appConnection_Gateway_TypeFromJSON(object.type) : 0,
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      ingressPort: isSet(object.ingressPort) ? globalThis.Number(object.ingressPort) : 0,
      appGateway: isSet(object.appGateway) ? globalThis.String(object.appGateway) : "",
    };
  },

  toJSON(message: AppConnection_Gateway): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = appConnection_Gateway_TypeToJSON(message.type);
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.ingressPort !== 0) {
      obj.ingressPort = Math.round(message.ingressPort);
    }
    if (message.appGateway !== "") {
      obj.appGateway = message.appGateway;
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnection_Gateway>): AppConnection_Gateway {
    return AppConnection_Gateway.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppConnection_Gateway>): AppConnection_Gateway {
    const message = createBaseAppConnection_Gateway();
    message.type = object.type ?? 0;
    message.uri = object.uri ?? "";
    message.ingressPort = object.ingressPort ?? 0;
    message.appGateway = object.appGateway ?? "";
    return message;
  },
};

function createBaseAppConnection_LabelsEntry(): AppConnection_LabelsEntry {
  return { key: "", value: "" };
}

export const AppConnection_LabelsEntry: MessageFns<AppConnection_LabelsEntry> = {
  encode(message: AppConnection_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnection_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnection_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnection_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AppConnection_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnection_LabelsEntry>): AppConnection_LabelsEntry {
    return AppConnection_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppConnection_LabelsEntry>): AppConnection_LabelsEntry {
    const message = createBaseAppConnection_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAppConnectionOperationMetadata(): AppConnectionOperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const AppConnectionOperationMetadata: MessageFns<AppConnectionOperationMetadata> = {
  encode(message: AppConnectionOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnectionOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnectionOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnectionOperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: AppConnectionOperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnectionOperationMetadata>): AppConnectionOperationMetadata {
    return AppConnectionOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppConnectionOperationMetadata>): AppConnectionOperationMetadata {
    const message = createBaseAppConnectionOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * API Overview:
 *
 * The `beyondcorp.googleapis.com` service implements the Google Cloud
 * BeyondCorp API.
 *
 * Data Model:
 *
 * The AppConnectionsService exposes the following resources:
 *
 * * AppConnections, named as follows:
 *   `projects/{project_id}/locations/{location_id}/appConnections/{app_connection_id}`.
 *
 * The AppConnectionsService service provides methods to manage
 * (create/read/update/delete) BeyondCorp AppConnections.
 */
export type AppConnectionsServiceDefinition = typeof AppConnectionsServiceDefinition;
export const AppConnectionsServiceDefinition = {
  name: "AppConnectionsService",
  fullName: "google.cloud.beyondcorp.appconnections.v1.AppConnectionsService",
  methods: {
    /** Lists AppConnections in a given project and location. */
    listAppConnections: {
      name: "ListAppConnections",
      requestType: ListAppConnectionsRequest,
      requestStream: false,
      responseType: ListAppConnectionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single AppConnection. */
    getAppConnection: {
      name: "GetAppConnection",
      requestType: GetAppConnectionRequest,
      requestStream: false,
      responseType: AppConnection,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new AppConnection in a given project and location. */
    createAppConnection: {
      name: "CreateAppConnection",
      requestType: CreateAppConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              13,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              18,
              30,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              39,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              44,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              14,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single AppConnection. */
    updateAppConnection: {
      name: "UpdateAppConnection",
      requestType: UpdateAppConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              13,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              18,
              30,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              26,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              14,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              50,
              65,
              47,
              118,
              49,
              47,
              123,
              97,
              112,
              112,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single AppConnection. */
    deleteAppConnection: {
      name: "DeleteAppConnection",
      requestType: DeleteAppConnectionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              55,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              30,
              65,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Resolves AppConnections details for a given AppConnector.
     * An internal method called by a connector to find AppConnections to connect
     * to.
     */
    resolveAppConnections: {
      name: "ResolveAppConnections",
      requestType: ResolveAppConnectionsRequest,
      requestStream: false,
      responseType: ResolveAppConnectionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              112,
              112,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              58,
              114,
              101,
              115,
              111,
              108,
              118,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AppConnectionsServiceImplementation<CallContextExt = {}> {
  /** Lists AppConnections in a given project and location. */
  listAppConnections(
    request: ListAppConnectionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAppConnectionsResponse>>;
  /** Gets details of a single AppConnection. */
  getAppConnection(
    request: GetAppConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AppConnection>>;
  /** Creates a new AppConnection in a given project and location. */
  createAppConnection(
    request: CreateAppConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates the parameters of a single AppConnection. */
  updateAppConnection(
    request: UpdateAppConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single AppConnection. */
  deleteAppConnection(
    request: DeleteAppConnectionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Resolves AppConnections details for a given AppConnector.
   * An internal method called by a connector to find AppConnections to connect
   * to.
   */
  resolveAppConnections(
    request: ResolveAppConnectionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResolveAppConnectionsResponse>>;
}

export interface AppConnectionsServiceClient<CallOptionsExt = {}> {
  /** Lists AppConnections in a given project and location. */
  listAppConnections(
    request: DeepPartial<ListAppConnectionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAppConnectionsResponse>;
  /** Gets details of a single AppConnection. */
  getAppConnection(
    request: DeepPartial<GetAppConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AppConnection>;
  /** Creates a new AppConnection in a given project and location. */
  createAppConnection(
    request: DeepPartial<CreateAppConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates the parameters of a single AppConnection. */
  updateAppConnection(
    request: DeepPartial<UpdateAppConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single AppConnection. */
  deleteAppConnection(
    request: DeepPartial<DeleteAppConnectionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Resolves AppConnections details for a given AppConnector.
   * An internal method called by a connector to find AppConnections to connect
   * to.
   */
  resolveAppConnections(
    request: DeepPartial<ResolveAppConnectionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResolveAppConnectionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
