// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/beyondcorp/appconnectors/v1/app_connector_instance_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../../protobuf/any.js";

export const protobufPackage = "google.cloud.beyondcorp.appconnectors.v1";

/** AppConnectorInstanceConfig defines the instance config of a AppConnector. */
export interface AppConnectorInstanceConfig {
  /**
   * Required. A monotonically increasing number generated and maintained
   * by the API provider. Every time a config changes in the backend, the
   * sequenceNumber should be bumped up to reflect the change.
   */
  sequenceNumber: Long;
  /** The SLM instance agent configuration. */
  instanceConfig:
    | Any
    | undefined;
  /**
   * NotificationConfig defines the notification mechanism that the remote
   * instance should subscribe to in order to receive notification.
   */
  notificationConfig:
    | NotificationConfig
    | undefined;
  /**
   * ImageConfig defines the GCR images to run for the remote agent's control
   * plane.
   */
  imageConfig: ImageConfig | undefined;
}

/** NotificationConfig defines the mechanisms to notify instance agent. */
export interface NotificationConfig {
  /** Cloud Pub/Sub Configuration to receive notifications. */
  pubsubNotification?: NotificationConfig_CloudPubSubNotificationConfig | undefined;
}

/** The configuration for Pub/Sub messaging for the AppConnector. */
export interface NotificationConfig_CloudPubSubNotificationConfig {
  /** The Pub/Sub subscription the AppConnector uses to receive notifications. */
  pubsubSubscription: string;
}

/** ImageConfig defines the control plane images to run. */
export interface ImageConfig {
  /**
   * The initial image the remote agent will attempt to run for the control
   * plane.
   */
  targetImage: string;
  /**
   * The stable image that the remote agent will fallback to if the target image
   * fails.
   */
  stableImage: string;
}

function createBaseAppConnectorInstanceConfig(): AppConnectorInstanceConfig {
  return {
    sequenceNumber: Long.ZERO,
    instanceConfig: undefined,
    notificationConfig: undefined,
    imageConfig: undefined,
  };
}

export const AppConnectorInstanceConfig: MessageFns<AppConnectorInstanceConfig> = {
  encode(message: AppConnectorInstanceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.sequenceNumber.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.sequenceNumber.toString());
    }
    if (message.instanceConfig !== undefined) {
      Any.encode(message.instanceConfig, writer.uint32(18).fork()).join();
    }
    if (message.notificationConfig !== undefined) {
      NotificationConfig.encode(message.notificationConfig, writer.uint32(26).fork()).join();
    }
    if (message.imageConfig !== undefined) {
      ImageConfig.encode(message.imageConfig, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppConnectorInstanceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppConnectorInstanceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sequenceNumber = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instanceConfig = Any.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notificationConfig = NotificationConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.imageConfig = ImageConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppConnectorInstanceConfig {
    return {
      sequenceNumber: isSet(object.sequenceNumber) ? Long.fromValue(object.sequenceNumber) : Long.ZERO,
      instanceConfig: isSet(object.instanceConfig) ? Any.fromJSON(object.instanceConfig) : undefined,
      notificationConfig: isSet(object.notificationConfig)
        ? NotificationConfig.fromJSON(object.notificationConfig)
        : undefined,
      imageConfig: isSet(object.imageConfig) ? ImageConfig.fromJSON(object.imageConfig) : undefined,
    };
  },

  toJSON(message: AppConnectorInstanceConfig): unknown {
    const obj: any = {};
    if (!message.sequenceNumber.equals(Long.ZERO)) {
      obj.sequenceNumber = (message.sequenceNumber || Long.ZERO).toString();
    }
    if (message.instanceConfig !== undefined) {
      obj.instanceConfig = Any.toJSON(message.instanceConfig);
    }
    if (message.notificationConfig !== undefined) {
      obj.notificationConfig = NotificationConfig.toJSON(message.notificationConfig);
    }
    if (message.imageConfig !== undefined) {
      obj.imageConfig = ImageConfig.toJSON(message.imageConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<AppConnectorInstanceConfig>): AppConnectorInstanceConfig {
    return AppConnectorInstanceConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppConnectorInstanceConfig>): AppConnectorInstanceConfig {
    const message = createBaseAppConnectorInstanceConfig();
    message.sequenceNumber = (object.sequenceNumber !== undefined && object.sequenceNumber !== null)
      ? Long.fromValue(object.sequenceNumber)
      : Long.ZERO;
    message.instanceConfig = (object.instanceConfig !== undefined && object.instanceConfig !== null)
      ? Any.fromPartial(object.instanceConfig)
      : undefined;
    message.notificationConfig = (object.notificationConfig !== undefined && object.notificationConfig !== null)
      ? NotificationConfig.fromPartial(object.notificationConfig)
      : undefined;
    message.imageConfig = (object.imageConfig !== undefined && object.imageConfig !== null)
      ? ImageConfig.fromPartial(object.imageConfig)
      : undefined;
    return message;
  },
};

function createBaseNotificationConfig(): NotificationConfig {
  return { pubsubNotification: undefined };
}

export const NotificationConfig: MessageFns<NotificationConfig> = {
  encode(message: NotificationConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pubsubNotification !== undefined) {
      NotificationConfig_CloudPubSubNotificationConfig.encode(message.pubsubNotification, writer.uint32(10).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pubsubNotification = NotificationConfig_CloudPubSubNotificationConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationConfig {
    return {
      pubsubNotification: isSet(object.pubsubNotification)
        ? NotificationConfig_CloudPubSubNotificationConfig.fromJSON(object.pubsubNotification)
        : undefined,
    };
  },

  toJSON(message: NotificationConfig): unknown {
    const obj: any = {};
    if (message.pubsubNotification !== undefined) {
      obj.pubsubNotification = NotificationConfig_CloudPubSubNotificationConfig.toJSON(message.pubsubNotification);
    }
    return obj;
  },

  create(base?: DeepPartial<NotificationConfig>): NotificationConfig {
    return NotificationConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotificationConfig>): NotificationConfig {
    const message = createBaseNotificationConfig();
    message.pubsubNotification = (object.pubsubNotification !== undefined && object.pubsubNotification !== null)
      ? NotificationConfig_CloudPubSubNotificationConfig.fromPartial(object.pubsubNotification)
      : undefined;
    return message;
  },
};

function createBaseNotificationConfig_CloudPubSubNotificationConfig(): NotificationConfig_CloudPubSubNotificationConfig {
  return { pubsubSubscription: "" };
}

export const NotificationConfig_CloudPubSubNotificationConfig: MessageFns<
  NotificationConfig_CloudPubSubNotificationConfig
> = {
  encode(
    message: NotificationConfig_CloudPubSubNotificationConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.pubsubSubscription !== "") {
      writer.uint32(10).string(message.pubsubSubscription);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationConfig_CloudPubSubNotificationConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationConfig_CloudPubSubNotificationConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pubsubSubscription = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationConfig_CloudPubSubNotificationConfig {
    return { pubsubSubscription: isSet(object.pubsubSubscription) ? globalThis.String(object.pubsubSubscription) : "" };
  },

  toJSON(message: NotificationConfig_CloudPubSubNotificationConfig): unknown {
    const obj: any = {};
    if (message.pubsubSubscription !== "") {
      obj.pubsubSubscription = message.pubsubSubscription;
    }
    return obj;
  },

  create(
    base?: DeepPartial<NotificationConfig_CloudPubSubNotificationConfig>,
  ): NotificationConfig_CloudPubSubNotificationConfig {
    return NotificationConfig_CloudPubSubNotificationConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<NotificationConfig_CloudPubSubNotificationConfig>,
  ): NotificationConfig_CloudPubSubNotificationConfig {
    const message = createBaseNotificationConfig_CloudPubSubNotificationConfig();
    message.pubsubSubscription = object.pubsubSubscription ?? "";
    return message;
  },
};

function createBaseImageConfig(): ImageConfig {
  return { targetImage: "", stableImage: "" };
}

export const ImageConfig: MessageFns<ImageConfig> = {
  encode(message: ImageConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetImage !== "") {
      writer.uint32(10).string(message.targetImage);
    }
    if (message.stableImage !== "") {
      writer.uint32(18).string(message.stableImage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetImage = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stableImage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageConfig {
    return {
      targetImage: isSet(object.targetImage) ? globalThis.String(object.targetImage) : "",
      stableImage: isSet(object.stableImage) ? globalThis.String(object.stableImage) : "",
    };
  },

  toJSON(message: ImageConfig): unknown {
    const obj: any = {};
    if (message.targetImage !== "") {
      obj.targetImage = message.targetImage;
    }
    if (message.stableImage !== "") {
      obj.stableImage = message.stableImage;
    }
    return obj;
  },

  create(base?: DeepPartial<ImageConfig>): ImageConfig {
    return ImageConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageConfig>): ImageConfig {
    const message = createBaseImageConfig();
    message.targetImage = object.targetImage ?? "";
    message.stableImage = object.stableImage ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
