// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/deploy/v1/target_notification_payload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Type, typeFromJSON, typeToJSON } from "./log_enums.js";

export const protobufPackage = "google.cloud.deploy.v1";

/**
 * Payload proto for "clouddeploy.googleapis.com/target_notification"
 * Platform Log event that describes the failure to send target status change
 * Pub/Sub notification.
 */
export interface TargetNotificationEvent {
  /** Debug message for when a notification fails to send. */
  message: string;
  /** The name of the `Target`. */
  target: string;
  /** Type of this notification, e.g. for a Pub/Sub failure. */
  type: Type;
}

function createBaseTargetNotificationEvent(): TargetNotificationEvent {
  return { message: "", target: "", type: 0 };
}

export const TargetNotificationEvent: MessageFns<TargetNotificationEvent> = {
  encode(message: TargetNotificationEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.target !== "") {
      writer.uint32(18).string(message.target);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetNotificationEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetNotificationEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.target = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetNotificationEvent {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      type: isSet(object.type) ? typeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: TargetNotificationEvent): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.type !== 0) {
      obj.type = typeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<TargetNotificationEvent>): TargetNotificationEvent {
    return TargetNotificationEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TargetNotificationEvent>): TargetNotificationEvent {
    const message = createBaseTargetNotificationEvent();
    message.message = object.message ?? "";
    message.target = object.target ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
