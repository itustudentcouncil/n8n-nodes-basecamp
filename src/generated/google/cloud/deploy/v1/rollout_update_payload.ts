// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/deploy/v1/rollout_update_payload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Type, typeFromJSON, typeToJSON } from "./log_enums.js";

export const protobufPackage = "google.cloud.deploy.v1";

/**
 * Payload proto for "clouddeploy.googleapis.com/rollout_update"
 * Platform Log event that describes the rollout update event.
 */
export interface RolloutUpdateEvent {
  /** Debug message for when a rollout update event occurs. */
  message: string;
  /** Unique identifier of the pipeline. */
  pipelineUid: string;
  /** Unique identifier of the release. */
  releaseUid: string;
  /** The name of the `Release`. */
  release: string;
  /**
   * The name of the rollout.
   * rollout_uid is not in this log message because we write some of these log
   * messages at rollout creation time, before we've generated the uid.
   */
  rollout: string;
  /** ID of the target. */
  targetId: string;
  /** Type of this notification, e.g. for a rollout update event. */
  type: Type;
  /** The type of the rollout update. */
  rolloutUpdateType: RolloutUpdateEvent_RolloutUpdateType;
}

/** RolloutUpdateType indicates the type of the rollout update. */
export enum RolloutUpdateEvent_RolloutUpdateType {
  /** ROLLOUT_UPDATE_TYPE_UNSPECIFIED - Rollout update type unspecified. */
  ROLLOUT_UPDATE_TYPE_UNSPECIFIED = 0,
  /** PENDING - rollout state updated to pending. */
  PENDING = 1,
  /** PENDING_RELEASE - Rollout state updated to pending release. */
  PENDING_RELEASE = 2,
  /** IN_PROGRESS - Rollout state updated to in progress. */
  IN_PROGRESS = 3,
  /** CANCELLING - Rollout state updated to cancelling. */
  CANCELLING = 4,
  /** CANCELLED - Rollout state updated to cancelled. */
  CANCELLED = 5,
  /** HALTED - Rollout state updated to halted. */
  HALTED = 6,
  /** SUCCEEDED - Rollout state updated to succeeded. */
  SUCCEEDED = 7,
  /** FAILED - Rollout state updated to failed. */
  FAILED = 8,
  /** APPROVAL_REQUIRED - Rollout requires approval. */
  APPROVAL_REQUIRED = 9,
  /** APPROVED - Rollout has been approved. */
  APPROVED = 10,
  /** REJECTED - Rollout has been rejected. */
  REJECTED = 11,
  /** ADVANCE_REQUIRED - Rollout requires advance to the next phase. */
  ADVANCE_REQUIRED = 12,
  /** ADVANCED - Rollout has been advanced. */
  ADVANCED = 13,
  UNRECOGNIZED = -1,
}

export function rolloutUpdateEvent_RolloutUpdateTypeFromJSON(object: any): RolloutUpdateEvent_RolloutUpdateType {
  switch (object) {
    case 0:
    case "ROLLOUT_UPDATE_TYPE_UNSPECIFIED":
      return RolloutUpdateEvent_RolloutUpdateType.ROLLOUT_UPDATE_TYPE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return RolloutUpdateEvent_RolloutUpdateType.PENDING;
    case 2:
    case "PENDING_RELEASE":
      return RolloutUpdateEvent_RolloutUpdateType.PENDING_RELEASE;
    case 3:
    case "IN_PROGRESS":
      return RolloutUpdateEvent_RolloutUpdateType.IN_PROGRESS;
    case 4:
    case "CANCELLING":
      return RolloutUpdateEvent_RolloutUpdateType.CANCELLING;
    case 5:
    case "CANCELLED":
      return RolloutUpdateEvent_RolloutUpdateType.CANCELLED;
    case 6:
    case "HALTED":
      return RolloutUpdateEvent_RolloutUpdateType.HALTED;
    case 7:
    case "SUCCEEDED":
      return RolloutUpdateEvent_RolloutUpdateType.SUCCEEDED;
    case 8:
    case "FAILED":
      return RolloutUpdateEvent_RolloutUpdateType.FAILED;
    case 9:
    case "APPROVAL_REQUIRED":
      return RolloutUpdateEvent_RolloutUpdateType.APPROVAL_REQUIRED;
    case 10:
    case "APPROVED":
      return RolloutUpdateEvent_RolloutUpdateType.APPROVED;
    case 11:
    case "REJECTED":
      return RolloutUpdateEvent_RolloutUpdateType.REJECTED;
    case 12:
    case "ADVANCE_REQUIRED":
      return RolloutUpdateEvent_RolloutUpdateType.ADVANCE_REQUIRED;
    case 13:
    case "ADVANCED":
      return RolloutUpdateEvent_RolloutUpdateType.ADVANCED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RolloutUpdateEvent_RolloutUpdateType.UNRECOGNIZED;
  }
}

export function rolloutUpdateEvent_RolloutUpdateTypeToJSON(object: RolloutUpdateEvent_RolloutUpdateType): string {
  switch (object) {
    case RolloutUpdateEvent_RolloutUpdateType.ROLLOUT_UPDATE_TYPE_UNSPECIFIED:
      return "ROLLOUT_UPDATE_TYPE_UNSPECIFIED";
    case RolloutUpdateEvent_RolloutUpdateType.PENDING:
      return "PENDING";
    case RolloutUpdateEvent_RolloutUpdateType.PENDING_RELEASE:
      return "PENDING_RELEASE";
    case RolloutUpdateEvent_RolloutUpdateType.IN_PROGRESS:
      return "IN_PROGRESS";
    case RolloutUpdateEvent_RolloutUpdateType.CANCELLING:
      return "CANCELLING";
    case RolloutUpdateEvent_RolloutUpdateType.CANCELLED:
      return "CANCELLED";
    case RolloutUpdateEvent_RolloutUpdateType.HALTED:
      return "HALTED";
    case RolloutUpdateEvent_RolloutUpdateType.SUCCEEDED:
      return "SUCCEEDED";
    case RolloutUpdateEvent_RolloutUpdateType.FAILED:
      return "FAILED";
    case RolloutUpdateEvent_RolloutUpdateType.APPROVAL_REQUIRED:
      return "APPROVAL_REQUIRED";
    case RolloutUpdateEvent_RolloutUpdateType.APPROVED:
      return "APPROVED";
    case RolloutUpdateEvent_RolloutUpdateType.REJECTED:
      return "REJECTED";
    case RolloutUpdateEvent_RolloutUpdateType.ADVANCE_REQUIRED:
      return "ADVANCE_REQUIRED";
    case RolloutUpdateEvent_RolloutUpdateType.ADVANCED:
      return "ADVANCED";
    case RolloutUpdateEvent_RolloutUpdateType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseRolloutUpdateEvent(): RolloutUpdateEvent {
  return {
    message: "",
    pipelineUid: "",
    releaseUid: "",
    release: "",
    rollout: "",
    targetId: "",
    type: 0,
    rolloutUpdateType: 0,
  };
}

export const RolloutUpdateEvent: MessageFns<RolloutUpdateEvent> = {
  encode(message: RolloutUpdateEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(50).string(message.message);
    }
    if (message.pipelineUid !== "") {
      writer.uint32(10).string(message.pipelineUid);
    }
    if (message.releaseUid !== "") {
      writer.uint32(18).string(message.releaseUid);
    }
    if (message.release !== "") {
      writer.uint32(66).string(message.release);
    }
    if (message.rollout !== "") {
      writer.uint32(26).string(message.rollout);
    }
    if (message.targetId !== "") {
      writer.uint32(34).string(message.targetId);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    if (message.rolloutUpdateType !== 0) {
      writer.uint32(40).int32(message.rolloutUpdateType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RolloutUpdateEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRolloutUpdateEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6:
          if (tag !== 50) {
            break;
          }

          message.message = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pipelineUid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.releaseUid = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.release = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rollout = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.rolloutUpdateType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RolloutUpdateEvent {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      pipelineUid: isSet(object.pipelineUid) ? globalThis.String(object.pipelineUid) : "",
      releaseUid: isSet(object.releaseUid) ? globalThis.String(object.releaseUid) : "",
      release: isSet(object.release) ? globalThis.String(object.release) : "",
      rollout: isSet(object.rollout) ? globalThis.String(object.rollout) : "",
      targetId: isSet(object.targetId) ? globalThis.String(object.targetId) : "",
      type: isSet(object.type) ? typeFromJSON(object.type) : 0,
      rolloutUpdateType: isSet(object.rolloutUpdateType)
        ? rolloutUpdateEvent_RolloutUpdateTypeFromJSON(object.rolloutUpdateType)
        : 0,
    };
  },

  toJSON(message: RolloutUpdateEvent): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.pipelineUid !== "") {
      obj.pipelineUid = message.pipelineUid;
    }
    if (message.releaseUid !== "") {
      obj.releaseUid = message.releaseUid;
    }
    if (message.release !== "") {
      obj.release = message.release;
    }
    if (message.rollout !== "") {
      obj.rollout = message.rollout;
    }
    if (message.targetId !== "") {
      obj.targetId = message.targetId;
    }
    if (message.type !== 0) {
      obj.type = typeToJSON(message.type);
    }
    if (message.rolloutUpdateType !== 0) {
      obj.rolloutUpdateType = rolloutUpdateEvent_RolloutUpdateTypeToJSON(message.rolloutUpdateType);
    }
    return obj;
  },

  create(base?: DeepPartial<RolloutUpdateEvent>): RolloutUpdateEvent {
    return RolloutUpdateEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RolloutUpdateEvent>): RolloutUpdateEvent {
    const message = createBaseRolloutUpdateEvent();
    message.message = object.message ?? "";
    message.pipelineUid = object.pipelineUid ?? "";
    message.releaseUid = object.releaseUid ?? "";
    message.release = object.release ?? "";
    message.rollout = object.rollout ?? "";
    message.targetId = object.targetId ?? "";
    message.type = object.type ?? 0;
    message.rolloutUpdateType = object.rolloutUpdateType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
