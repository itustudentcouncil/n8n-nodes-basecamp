// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/deploy/v1/log_enums.proto

/* eslint-disable */

export const protobufPackage = "google.cloud.deploy.v1";

/** Type indicates the type of the log entry and can be used as a filter. */
export enum Type {
  /** TYPE_UNSPECIFIED - Type is unspecified. */
  TYPE_UNSPECIFIED = 0,
  /** TYPE_PUBSUB_NOTIFICATION_FAILURE - A Pub/Sub notification failed to be sent. */
  TYPE_PUBSUB_NOTIFICATION_FAILURE = 1,
  /** TYPE_RESOURCE_STATE_CHANGE - Resource state changed. */
  TYPE_RESOURCE_STATE_CHANGE = 3,
  /** TYPE_PROCESS_ABORTED - A process aborted. */
  TYPE_PROCESS_ABORTED = 4,
  /** TYPE_RESTRICTION_VIOLATED - Restriction check failed. */
  TYPE_RESTRICTION_VIOLATED = 5,
  /** TYPE_RESOURCE_DELETED - Resource deleted. */
  TYPE_RESOURCE_DELETED = 6,
  /** TYPE_ROLLOUT_UPDATE - Rollout updated. */
  TYPE_ROLLOUT_UPDATE = 7,
  /** TYPE_DEPLOY_POLICY_EVALUATION - Deploy Policy evaluation. */
  TYPE_DEPLOY_POLICY_EVALUATION = 8,
  /**
   * TYPE_RENDER_STATUES_CHANGE - Deprecated: This field is never used. Use release_render log type instead.
   *
   * @deprecated
   */
  TYPE_RENDER_STATUES_CHANGE = 2,
  UNRECOGNIZED = -1,
}

export function typeFromJSON(object: any): Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Type.TYPE_UNSPECIFIED;
    case 1:
    case "TYPE_PUBSUB_NOTIFICATION_FAILURE":
      return Type.TYPE_PUBSUB_NOTIFICATION_FAILURE;
    case 3:
    case "TYPE_RESOURCE_STATE_CHANGE":
      return Type.TYPE_RESOURCE_STATE_CHANGE;
    case 4:
    case "TYPE_PROCESS_ABORTED":
      return Type.TYPE_PROCESS_ABORTED;
    case 5:
    case "TYPE_RESTRICTION_VIOLATED":
      return Type.TYPE_RESTRICTION_VIOLATED;
    case 6:
    case "TYPE_RESOURCE_DELETED":
      return Type.TYPE_RESOURCE_DELETED;
    case 7:
    case "TYPE_ROLLOUT_UPDATE":
      return Type.TYPE_ROLLOUT_UPDATE;
    case 8:
    case "TYPE_DEPLOY_POLICY_EVALUATION":
      return Type.TYPE_DEPLOY_POLICY_EVALUATION;
    case 2:
    case "TYPE_RENDER_STATUES_CHANGE":
      return Type.TYPE_RENDER_STATUES_CHANGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Type.UNRECOGNIZED;
  }
}

export function typeToJSON(object: Type): string {
  switch (object) {
    case Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Type.TYPE_PUBSUB_NOTIFICATION_FAILURE:
      return "TYPE_PUBSUB_NOTIFICATION_FAILURE";
    case Type.TYPE_RESOURCE_STATE_CHANGE:
      return "TYPE_RESOURCE_STATE_CHANGE";
    case Type.TYPE_PROCESS_ABORTED:
      return "TYPE_PROCESS_ABORTED";
    case Type.TYPE_RESTRICTION_VIOLATED:
      return "TYPE_RESTRICTION_VIOLATED";
    case Type.TYPE_RESOURCE_DELETED:
      return "TYPE_RESOURCE_DELETED";
    case Type.TYPE_ROLLOUT_UPDATE:
      return "TYPE_ROLLOUT_UPDATE";
    case Type.TYPE_DEPLOY_POLICY_EVALUATION:
      return "TYPE_DEPLOY_POLICY_EVALUATION";
    case Type.TYPE_RENDER_STATUES_CHANGE:
      return "TYPE_RENDER_STATUES_CHANGE";
    case Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
