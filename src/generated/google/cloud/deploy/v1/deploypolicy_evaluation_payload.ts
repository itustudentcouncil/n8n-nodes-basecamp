// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/deploy/v1/deploypolicy_evaluation_payload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { DeployPolicy_Invoker, deployPolicy_InvokerFromJSON, deployPolicy_InvokerToJSON } from "./cloud_deploy.js";

export const protobufPackage = "google.cloud.deploy.v1";

/**
 * Payload proto for "clouddeploy.googleapis.com/deploypolicy_evaluation"
 * Platform Log event that describes the deploy policy evaluation event.
 */
export interface DeployPolicyEvaluationEvent {
  /** Debug message for when a deploy policy event occurs. */
  message: string;
  /** Rule type (e.g. Restrict Rollouts). */
  ruleType: string;
  /** Rule id. */
  rule: string;
  /** Unique identifier of the `Delivery Pipeline`. */
  pipelineUid: string;
  /** The name of the `Delivery Pipeline`. */
  deliveryPipeline: string;
  /**
   * Unique identifier of the `Target`. This is an optional field, as a `Target`
   * may not always be applicable to a policy.
   */
  targetUid: string;
  /**
   * The name of the `Target`. This is an optional field, as a `Target` may not
   * always be applicable to a policy.
   */
  target: string;
  /** What invoked the action (e.g. a user or automation). */
  invoker: DeployPolicy_Invoker;
  /** The name of the `DeployPolicy`. */
  deployPolicy: string;
  /** Unique identifier of the `DeployPolicy`. */
  deployPolicyUid: string;
  /**
   * Whether the request is allowed. Allowed is set as true if:
   * (1) the request complies with the policy; or
   * (2) the request doesn't comply with the policy but the policy was
   * overridden; or
   * (3) the request doesn't comply with the policy but the policy was suspended
   */
  allowed: boolean;
  /** The policy verdict of the request. */
  verdict: DeployPolicyEvaluationEvent_PolicyVerdict;
  /**
   * Things that could have overridden the policy verdict. Overrides together
   * with verdict decide whether the request is allowed.
   */
  overrides: DeployPolicyEvaluationEvent_PolicyVerdictOverride[];
}

/** The policy verdict of the request. */
export enum DeployPolicyEvaluationEvent_PolicyVerdict {
  /** POLICY_VERDICT_UNSPECIFIED - This should never happen. */
  POLICY_VERDICT_UNSPECIFIED = 0,
  /**
   * ALLOWED_BY_POLICY - Allowed by policy. This enum value is not currently used but may be used
   * in the future. Currently logs are only generated when a request is denied
   * by policy.
   */
  ALLOWED_BY_POLICY = 1,
  /** DENIED_BY_POLICY - Denied by policy. */
  DENIED_BY_POLICY = 2,
  UNRECOGNIZED = -1,
}

export function deployPolicyEvaluationEvent_PolicyVerdictFromJSON(
  object: any,
): DeployPolicyEvaluationEvent_PolicyVerdict {
  switch (object) {
    case 0:
    case "POLICY_VERDICT_UNSPECIFIED":
      return DeployPolicyEvaluationEvent_PolicyVerdict.POLICY_VERDICT_UNSPECIFIED;
    case 1:
    case "ALLOWED_BY_POLICY":
      return DeployPolicyEvaluationEvent_PolicyVerdict.ALLOWED_BY_POLICY;
    case 2:
    case "DENIED_BY_POLICY":
      return DeployPolicyEvaluationEvent_PolicyVerdict.DENIED_BY_POLICY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeployPolicyEvaluationEvent_PolicyVerdict.UNRECOGNIZED;
  }
}

export function deployPolicyEvaluationEvent_PolicyVerdictToJSON(
  object: DeployPolicyEvaluationEvent_PolicyVerdict,
): string {
  switch (object) {
    case DeployPolicyEvaluationEvent_PolicyVerdict.POLICY_VERDICT_UNSPECIFIED:
      return "POLICY_VERDICT_UNSPECIFIED";
    case DeployPolicyEvaluationEvent_PolicyVerdict.ALLOWED_BY_POLICY:
      return "ALLOWED_BY_POLICY";
    case DeployPolicyEvaluationEvent_PolicyVerdict.DENIED_BY_POLICY:
      return "DENIED_BY_POLICY";
    case DeployPolicyEvaluationEvent_PolicyVerdict.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Things that could have overridden the policy verdict. When overrides are
 * used, the request will be allowed even if it is DENIED_BY_POLICY.
 */
export enum DeployPolicyEvaluationEvent_PolicyVerdictOverride {
  /** POLICY_VERDICT_OVERRIDE_UNSPECIFIED - This should never happen. */
  POLICY_VERDICT_OVERRIDE_UNSPECIFIED = 0,
  /** POLICY_OVERRIDDEN - The policy was overridden. */
  POLICY_OVERRIDDEN = 1,
  /** POLICY_SUSPENDED - The policy was suspended. */
  POLICY_SUSPENDED = 2,
  UNRECOGNIZED = -1,
}

export function deployPolicyEvaluationEvent_PolicyVerdictOverrideFromJSON(
  object: any,
): DeployPolicyEvaluationEvent_PolicyVerdictOverride {
  switch (object) {
    case 0:
    case "POLICY_VERDICT_OVERRIDE_UNSPECIFIED":
      return DeployPolicyEvaluationEvent_PolicyVerdictOverride.POLICY_VERDICT_OVERRIDE_UNSPECIFIED;
    case 1:
    case "POLICY_OVERRIDDEN":
      return DeployPolicyEvaluationEvent_PolicyVerdictOverride.POLICY_OVERRIDDEN;
    case 2:
    case "POLICY_SUSPENDED":
      return DeployPolicyEvaluationEvent_PolicyVerdictOverride.POLICY_SUSPENDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeployPolicyEvaluationEvent_PolicyVerdictOverride.UNRECOGNIZED;
  }
}

export function deployPolicyEvaluationEvent_PolicyVerdictOverrideToJSON(
  object: DeployPolicyEvaluationEvent_PolicyVerdictOverride,
): string {
  switch (object) {
    case DeployPolicyEvaluationEvent_PolicyVerdictOverride.POLICY_VERDICT_OVERRIDE_UNSPECIFIED:
      return "POLICY_VERDICT_OVERRIDE_UNSPECIFIED";
    case DeployPolicyEvaluationEvent_PolicyVerdictOverride.POLICY_OVERRIDDEN:
      return "POLICY_OVERRIDDEN";
    case DeployPolicyEvaluationEvent_PolicyVerdictOverride.POLICY_SUSPENDED:
      return "POLICY_SUSPENDED";
    case DeployPolicyEvaluationEvent_PolicyVerdictOverride.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDeployPolicyEvaluationEvent(): DeployPolicyEvaluationEvent {
  return {
    message: "",
    ruleType: "",
    rule: "",
    pipelineUid: "",
    deliveryPipeline: "",
    targetUid: "",
    target: "",
    invoker: 0,
    deployPolicy: "",
    deployPolicyUid: "",
    allowed: false,
    verdict: 0,
    overrides: [],
  };
}

export const DeployPolicyEvaluationEvent: MessageFns<DeployPolicyEvaluationEvent> = {
  encode(message: DeployPolicyEvaluationEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.ruleType !== "") {
      writer.uint32(18).string(message.ruleType);
    }
    if (message.rule !== "") {
      writer.uint32(26).string(message.rule);
    }
    if (message.pipelineUid !== "") {
      writer.uint32(34).string(message.pipelineUid);
    }
    if (message.deliveryPipeline !== "") {
      writer.uint32(42).string(message.deliveryPipeline);
    }
    if (message.targetUid !== "") {
      writer.uint32(50).string(message.targetUid);
    }
    if (message.target !== "") {
      writer.uint32(58).string(message.target);
    }
    if (message.invoker !== 0) {
      writer.uint32(64).int32(message.invoker);
    }
    if (message.deployPolicy !== "") {
      writer.uint32(74).string(message.deployPolicy);
    }
    if (message.deployPolicyUid !== "") {
      writer.uint32(82).string(message.deployPolicyUid);
    }
    if (message.allowed !== false) {
      writer.uint32(88).bool(message.allowed);
    }
    if (message.verdict !== 0) {
      writer.uint32(96).int32(message.verdict);
    }
    writer.uint32(106).fork();
    for (const v of message.overrides) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployPolicyEvaluationEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployPolicyEvaluationEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ruleType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rule = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pipelineUid = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.deliveryPipeline = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.targetUid = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.target = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.invoker = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.deployPolicy = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.deployPolicyUid = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.allowed = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.verdict = reader.int32() as any;
          continue;
        case 13:
          if (tag === 104) {
            message.overrides.push(reader.int32() as any);

            continue;
          }

          if (tag === 106) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.overrides.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployPolicyEvaluationEvent {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      ruleType: isSet(object.ruleType) ? globalThis.String(object.ruleType) : "",
      rule: isSet(object.rule) ? globalThis.String(object.rule) : "",
      pipelineUid: isSet(object.pipelineUid) ? globalThis.String(object.pipelineUid) : "",
      deliveryPipeline: isSet(object.deliveryPipeline) ? globalThis.String(object.deliveryPipeline) : "",
      targetUid: isSet(object.targetUid) ? globalThis.String(object.targetUid) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      invoker: isSet(object.invoker) ? deployPolicy_InvokerFromJSON(object.invoker) : 0,
      deployPolicy: isSet(object.deployPolicy) ? globalThis.String(object.deployPolicy) : "",
      deployPolicyUid: isSet(object.deployPolicyUid) ? globalThis.String(object.deployPolicyUid) : "",
      allowed: isSet(object.allowed) ? globalThis.Boolean(object.allowed) : false,
      verdict: isSet(object.verdict) ? deployPolicyEvaluationEvent_PolicyVerdictFromJSON(object.verdict) : 0,
      overrides: globalThis.Array.isArray(object?.overrides)
        ? object.overrides.map((e: any) => deployPolicyEvaluationEvent_PolicyVerdictOverrideFromJSON(e))
        : [],
    };
  },

  toJSON(message: DeployPolicyEvaluationEvent): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.ruleType !== "") {
      obj.ruleType = message.ruleType;
    }
    if (message.rule !== "") {
      obj.rule = message.rule;
    }
    if (message.pipelineUid !== "") {
      obj.pipelineUid = message.pipelineUid;
    }
    if (message.deliveryPipeline !== "") {
      obj.deliveryPipeline = message.deliveryPipeline;
    }
    if (message.targetUid !== "") {
      obj.targetUid = message.targetUid;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.invoker !== 0) {
      obj.invoker = deployPolicy_InvokerToJSON(message.invoker);
    }
    if (message.deployPolicy !== "") {
      obj.deployPolicy = message.deployPolicy;
    }
    if (message.deployPolicyUid !== "") {
      obj.deployPolicyUid = message.deployPolicyUid;
    }
    if (message.allowed !== false) {
      obj.allowed = message.allowed;
    }
    if (message.verdict !== 0) {
      obj.verdict = deployPolicyEvaluationEvent_PolicyVerdictToJSON(message.verdict);
    }
    if (message.overrides?.length) {
      obj.overrides = message.overrides.map((e) => deployPolicyEvaluationEvent_PolicyVerdictOverrideToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DeployPolicyEvaluationEvent>): DeployPolicyEvaluationEvent {
    return DeployPolicyEvaluationEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployPolicyEvaluationEvent>): DeployPolicyEvaluationEvent {
    const message = createBaseDeployPolicyEvaluationEvent();
    message.message = object.message ?? "";
    message.ruleType = object.ruleType ?? "";
    message.rule = object.rule ?? "";
    message.pipelineUid = object.pipelineUid ?? "";
    message.deliveryPipeline = object.deliveryPipeline ?? "";
    message.targetUid = object.targetUid ?? "";
    message.target = object.target ?? "";
    message.invoker = object.invoker ?? 0;
    message.deployPolicy = object.deployPolicy ?? "";
    message.deployPolicyUid = object.deployPolicyUid ?? "";
    message.allowed = object.allowed ?? false;
    message.verdict = object.verdict ?? 0;
    message.overrides = object.overrides?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
