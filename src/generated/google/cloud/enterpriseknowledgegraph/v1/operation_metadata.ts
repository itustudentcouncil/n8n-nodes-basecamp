// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/enterpriseknowledgegraph/v1/operation_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.enterpriseknowledgegraph.v1";

/** The common metadata for long running operations. */
export interface CommonOperationMetadata {
  /** The state of the operation. */
  state: CommonOperationMetadata_State;
  /** The creation time of the operation. */
  createTime:
    | Date
    | undefined;
  /** The last update time of the operation. */
  updateTime: Date | undefined;
}

/** State of the longrunning operation. */
export enum CommonOperationMetadata_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** RUNNING - Operation is still running. */
  RUNNING = 1,
  /** CANCELLING - Operation is being cancelled. */
  CANCELLING = 2,
  /** SUCCEEDED - Operation succeeded. */
  SUCCEEDED = 3,
  /** FAILED - Operation failed. */
  FAILED = 4,
  /** CANCELLED - Operation is cancelled. */
  CANCELLED = 5,
  /** PENDING - Operation is pending not running yet. */
  PENDING = 6,
  UNRECOGNIZED = -1,
}

export function commonOperationMetadata_StateFromJSON(object: any): CommonOperationMetadata_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return CommonOperationMetadata_State.STATE_UNSPECIFIED;
    case 1:
    case "RUNNING":
      return CommonOperationMetadata_State.RUNNING;
    case 2:
    case "CANCELLING":
      return CommonOperationMetadata_State.CANCELLING;
    case 3:
    case "SUCCEEDED":
      return CommonOperationMetadata_State.SUCCEEDED;
    case 4:
    case "FAILED":
      return CommonOperationMetadata_State.FAILED;
    case 5:
    case "CANCELLED":
      return CommonOperationMetadata_State.CANCELLED;
    case 6:
    case "PENDING":
      return CommonOperationMetadata_State.PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CommonOperationMetadata_State.UNRECOGNIZED;
  }
}

export function commonOperationMetadata_StateToJSON(object: CommonOperationMetadata_State): string {
  switch (object) {
    case CommonOperationMetadata_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case CommonOperationMetadata_State.RUNNING:
      return "RUNNING";
    case CommonOperationMetadata_State.CANCELLING:
      return "CANCELLING";
    case CommonOperationMetadata_State.SUCCEEDED:
      return "SUCCEEDED";
    case CommonOperationMetadata_State.FAILED:
      return "FAILED";
    case CommonOperationMetadata_State.CANCELLED:
      return "CANCELLED";
    case CommonOperationMetadata_State.PENDING:
      return "PENDING";
    case CommonOperationMetadata_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCommonOperationMetadata(): CommonOperationMetadata {
  return { state: 0, createTime: undefined, updateTime: undefined };
}

export const CommonOperationMetadata: MessageFns<CommonOperationMetadata> = {
  encode(message: CommonOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonOperationMetadata {
    return {
      state: isSet(object.state) ? commonOperationMetadata_StateFromJSON(object.state) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: CommonOperationMetadata): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = commonOperationMetadata_StateToJSON(message.state);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<CommonOperationMetadata>): CommonOperationMetadata {
    return CommonOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommonOperationMetadata>): CommonOperationMetadata {
    const message = createBaseCommonOperationMetadata();
    message.state = object.state ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
