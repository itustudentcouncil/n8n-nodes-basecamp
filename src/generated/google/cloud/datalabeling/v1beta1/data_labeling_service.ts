// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/datalabeling/v1beta1/data_labeling_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { AnnotationSpecSet } from "./annotation_spec_set.js";
import { AnnotatedDataset, DataItem, Dataset, Example, InputConfig, OutputConfig } from "./dataset.js";
import { Evaluation } from "./evaluation.js";
import { EvaluationJob } from "./evaluation_job.js";
import {
  BoundingPolyConfig,
  EventConfig,
  HumanAnnotationConfig,
  ImageClassificationConfig,
  ObjectDetectionConfig,
  ObjectTrackingConfig,
  PolylineConfig,
  SegmentationConfig,
  TextClassificationConfig,
  TextEntityExtractionConfig,
  VideoClassificationConfig,
} from "./human_annotation_config.js";
import { Instruction } from "./instruction.js";

export const protobufPackage = "google.cloud.datalabeling.v1beta1";

/** Request message for CreateDataset. */
export interface CreateDatasetRequest {
  /**
   * Required. Dataset resource parent, format:
   * projects/{project_id}
   */
  parent: string;
  /** Required. The dataset to be created. */
  dataset: Dataset | undefined;
}

/** Request message for GetDataSet. */
export interface GetDatasetRequest {
  /**
   * Required. Dataset resource name, format:
   * projects/{project_id}/datasets/{dataset_id}
   */
  name: string;
}

/** Request message for ListDataset. */
export interface ListDatasetsRequest {
  /**
   * Required. Dataset resource parent, format:
   * projects/{project_id}
   */
  parent: string;
  /** Optional. Filter on dataset is not supported at this moment. */
  filter: string;
  /**
   * Optional. Requested page size. Server may return fewer results than
   * requested. Default value is 100.
   */
  pageSize: number;
  /**
   * Optional. A token identifying a page of results for the server to return.
   * Typically obtained by
   * [ListDatasetsResponse.next_page_token][google.cloud.datalabeling.v1beta1.ListDatasetsResponse.next_page_token] of the previous
   * [DataLabelingService.ListDatasets] call.
   * Returns the first page if empty.
   */
  pageToken: string;
}

/** Results of listing datasets within a project. */
export interface ListDatasetsResponse {
  /** The list of datasets to return. */
  datasets: Dataset[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
}

/** Request message for DeleteDataset. */
export interface DeleteDatasetRequest {
  /**
   * Required. Dataset resource name, format:
   * projects/{project_id}/datasets/{dataset_id}
   */
  name: string;
}

/** Request message for ImportData API. */
export interface ImportDataRequest {
  /**
   * Required. Dataset resource name, format:
   * projects/{project_id}/datasets/{dataset_id}
   */
  name: string;
  /** Required. Specify the input source of the data. */
  inputConfig:
    | InputConfig
    | undefined;
  /**
   * Email of the user who started the import task and should be notified by
   * email. If empty no notification will be sent.
   */
  userEmailAddress: string;
}

/** Request message for ExportData API. */
export interface ExportDataRequest {
  /**
   * Required. Dataset resource name, format:
   * projects/{project_id}/datasets/{dataset_id}
   */
  name: string;
  /**
   * Required. Annotated dataset resource name. DataItem in
   * Dataset and their annotations in specified annotated dataset will be
   * exported. It's in format of
   * projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/
   * {annotated_dataset_id}
   */
  annotatedDataset: string;
  /** Optional. Filter is not supported at this moment. */
  filter: string;
  /** Required. Specify the output destination. */
  outputConfig:
    | OutputConfig
    | undefined;
  /**
   * Email of the user who started the export task and should be notified by
   * email. If empty no notification will be sent.
   */
  userEmailAddress: string;
}

/** Request message for GetDataItem. */
export interface GetDataItemRequest {
  /**
   * Required. The name of the data item to get, format:
   * projects/{project_id}/datasets/{dataset_id}/dataItems/{data_item_id}
   */
  name: string;
}

/** Request message for ListDataItems. */
export interface ListDataItemsRequest {
  /**
   * Required. Name of the dataset to list data items, format:
   * projects/{project_id}/datasets/{dataset_id}
   */
  parent: string;
  /** Optional. Filter is not supported at this moment. */
  filter: string;
  /**
   * Optional. Requested page size. Server may return fewer results than
   * requested. Default value is 100.
   */
  pageSize: number;
  /**
   * Optional. A token identifying a page of results for the server to return.
   * Typically obtained by
   * [ListDataItemsResponse.next_page_token][google.cloud.datalabeling.v1beta1.ListDataItemsResponse.next_page_token] of the previous
   * [DataLabelingService.ListDataItems] call.
   * Return first page if empty.
   */
  pageToken: string;
}

/** Results of listing data items in a dataset. */
export interface ListDataItemsResponse {
  /** The list of data items to return. */
  dataItems: DataItem[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
}

/** Request message for GetAnnotatedDataset. */
export interface GetAnnotatedDatasetRequest {
  /**
   * Required. Name of the annotated dataset to get, format:
   * projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/
   * {annotated_dataset_id}
   */
  name: string;
}

/** Request message for ListAnnotatedDatasets. */
export interface ListAnnotatedDatasetsRequest {
  /**
   * Required. Name of the dataset to list annotated datasets, format:
   * projects/{project_id}/datasets/{dataset_id}
   */
  parent: string;
  /** Optional. Filter is not supported at this moment. */
  filter: string;
  /**
   * Optional. Requested page size. Server may return fewer results than
   * requested. Default value is 100.
   */
  pageSize: number;
  /**
   * Optional. A token identifying a page of results for the server to return.
   * Typically obtained by
   * [ListAnnotatedDatasetsResponse.next_page_token][google.cloud.datalabeling.v1beta1.ListAnnotatedDatasetsResponse.next_page_token] of the previous
   * [DataLabelingService.ListAnnotatedDatasets] call.
   * Return first page if empty.
   */
  pageToken: string;
}

/** Results of listing annotated datasets for a dataset. */
export interface ListAnnotatedDatasetsResponse {
  /** The list of annotated datasets to return. */
  annotatedDatasets: AnnotatedDataset[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
}

/** Request message for DeleteAnnotatedDataset. */
export interface DeleteAnnotatedDatasetRequest {
  /**
   * Required. Name of the annotated dataset to delete, format:
   * projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/
   * {annotated_dataset_id}
   */
  name: string;
}

/** Request message for starting an image labeling task. */
export interface LabelImageRequest {
  /**
   * Configuration for image classification task.
   * One of image_classification_config, bounding_poly_config,
   * polyline_config and segmentation_config are required.
   */
  imageClassificationConfig?:
    | ImageClassificationConfig
    | undefined;
  /**
   * Configuration for bounding box and bounding poly task.
   * One of image_classification_config, bounding_poly_config,
   * polyline_config and segmentation_config are required.
   */
  boundingPolyConfig?:
    | BoundingPolyConfig
    | undefined;
  /**
   * Configuration for polyline task.
   * One of image_classification_config, bounding_poly_config,
   * polyline_config and segmentation_config are required.
   */
  polylineConfig?:
    | PolylineConfig
    | undefined;
  /**
   * Configuration for segmentation task.
   * One of image_classification_config, bounding_poly_config,
   * polyline_config and segmentation_config are required.
   */
  segmentationConfig?:
    | SegmentationConfig
    | undefined;
  /**
   * Required. Name of the dataset to request labeling task, format:
   * projects/{project_id}/datasets/{dataset_id}
   */
  parent: string;
  /** Required. Basic human annotation config. */
  basicConfig:
    | HumanAnnotationConfig
    | undefined;
  /** Required. The type of image labeling task. */
  feature: LabelImageRequest_Feature;
}

/** Image labeling task feature. */
export enum LabelImageRequest_Feature {
  FEATURE_UNSPECIFIED = 0,
  /** CLASSIFICATION - Label whole image with one or more of labels. */
  CLASSIFICATION = 1,
  /** BOUNDING_BOX - Label image with bounding boxes for labels. */
  BOUNDING_BOX = 2,
  /**
   * ORIENTED_BOUNDING_BOX - Label oriented bounding box. The box does not have to be parallel to
   * horizontal line.
   */
  ORIENTED_BOUNDING_BOX = 6,
  /**
   * BOUNDING_POLY - Label images with bounding poly. A bounding poly is a plane figure that
   * is bounded by a finite chain of straight line segments closing in a loop.
   */
  BOUNDING_POLY = 3,
  /**
   * POLYLINE - Label images with polyline. Polyline is formed by connected line segments
   * which are not in closed form.
   */
  POLYLINE = 4,
  /**
   * SEGMENTATION - Label images with segmentation. Segmentation is different from bounding
   * poly since it is more fine-grained, pixel level annotation.
   */
  SEGMENTATION = 5,
  UNRECOGNIZED = -1,
}

export function labelImageRequest_FeatureFromJSON(object: any): LabelImageRequest_Feature {
  switch (object) {
    case 0:
    case "FEATURE_UNSPECIFIED":
      return LabelImageRequest_Feature.FEATURE_UNSPECIFIED;
    case 1:
    case "CLASSIFICATION":
      return LabelImageRequest_Feature.CLASSIFICATION;
    case 2:
    case "BOUNDING_BOX":
      return LabelImageRequest_Feature.BOUNDING_BOX;
    case 6:
    case "ORIENTED_BOUNDING_BOX":
      return LabelImageRequest_Feature.ORIENTED_BOUNDING_BOX;
    case 3:
    case "BOUNDING_POLY":
      return LabelImageRequest_Feature.BOUNDING_POLY;
    case 4:
    case "POLYLINE":
      return LabelImageRequest_Feature.POLYLINE;
    case 5:
    case "SEGMENTATION":
      return LabelImageRequest_Feature.SEGMENTATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LabelImageRequest_Feature.UNRECOGNIZED;
  }
}

export function labelImageRequest_FeatureToJSON(object: LabelImageRequest_Feature): string {
  switch (object) {
    case LabelImageRequest_Feature.FEATURE_UNSPECIFIED:
      return "FEATURE_UNSPECIFIED";
    case LabelImageRequest_Feature.CLASSIFICATION:
      return "CLASSIFICATION";
    case LabelImageRequest_Feature.BOUNDING_BOX:
      return "BOUNDING_BOX";
    case LabelImageRequest_Feature.ORIENTED_BOUNDING_BOX:
      return "ORIENTED_BOUNDING_BOX";
    case LabelImageRequest_Feature.BOUNDING_POLY:
      return "BOUNDING_POLY";
    case LabelImageRequest_Feature.POLYLINE:
      return "POLYLINE";
    case LabelImageRequest_Feature.SEGMENTATION:
      return "SEGMENTATION";
    case LabelImageRequest_Feature.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for LabelVideo. */
export interface LabelVideoRequest {
  /**
   * Configuration for video classification task.
   * One of video_classification_config, object_detection_config,
   * object_tracking_config and event_config is required.
   */
  videoClassificationConfig?:
    | VideoClassificationConfig
    | undefined;
  /**
   * Configuration for video object detection task.
   * One of video_classification_config, object_detection_config,
   * object_tracking_config and event_config is required.
   */
  objectDetectionConfig?:
    | ObjectDetectionConfig
    | undefined;
  /**
   * Configuration for video object tracking task.
   * One of video_classification_config, object_detection_config,
   * object_tracking_config and event_config is required.
   */
  objectTrackingConfig?:
    | ObjectTrackingConfig
    | undefined;
  /**
   * Configuration for video event task.
   * One of video_classification_config, object_detection_config,
   * object_tracking_config and event_config is required.
   */
  eventConfig?:
    | EventConfig
    | undefined;
  /**
   * Required. Name of the dataset to request labeling task, format:
   * projects/{project_id}/datasets/{dataset_id}
   */
  parent: string;
  /** Required. Basic human annotation config. */
  basicConfig:
    | HumanAnnotationConfig
    | undefined;
  /** Required. The type of video labeling task. */
  feature: LabelVideoRequest_Feature;
}

/** Video labeling task feature. */
export enum LabelVideoRequest_Feature {
  FEATURE_UNSPECIFIED = 0,
  /** CLASSIFICATION - Label whole video or video segment with one or more labels. */
  CLASSIFICATION = 1,
  /** OBJECT_DETECTION - Label objects with bounding box on image frames extracted from the video. */
  OBJECT_DETECTION = 2,
  /** OBJECT_TRACKING - Label and track objects in video. */
  OBJECT_TRACKING = 3,
  /** EVENT - Label the range of video for the specified events. */
  EVENT = 4,
  UNRECOGNIZED = -1,
}

export function labelVideoRequest_FeatureFromJSON(object: any): LabelVideoRequest_Feature {
  switch (object) {
    case 0:
    case "FEATURE_UNSPECIFIED":
      return LabelVideoRequest_Feature.FEATURE_UNSPECIFIED;
    case 1:
    case "CLASSIFICATION":
      return LabelVideoRequest_Feature.CLASSIFICATION;
    case 2:
    case "OBJECT_DETECTION":
      return LabelVideoRequest_Feature.OBJECT_DETECTION;
    case 3:
    case "OBJECT_TRACKING":
      return LabelVideoRequest_Feature.OBJECT_TRACKING;
    case 4:
    case "EVENT":
      return LabelVideoRequest_Feature.EVENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LabelVideoRequest_Feature.UNRECOGNIZED;
  }
}

export function labelVideoRequest_FeatureToJSON(object: LabelVideoRequest_Feature): string {
  switch (object) {
    case LabelVideoRequest_Feature.FEATURE_UNSPECIFIED:
      return "FEATURE_UNSPECIFIED";
    case LabelVideoRequest_Feature.CLASSIFICATION:
      return "CLASSIFICATION";
    case LabelVideoRequest_Feature.OBJECT_DETECTION:
      return "OBJECT_DETECTION";
    case LabelVideoRequest_Feature.OBJECT_TRACKING:
      return "OBJECT_TRACKING";
    case LabelVideoRequest_Feature.EVENT:
      return "EVENT";
    case LabelVideoRequest_Feature.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for LabelText. */
export interface LabelTextRequest {
  /**
   * Configuration for text classification task.
   * One of text_classification_config and text_entity_extraction_config
   * is required.
   */
  textClassificationConfig?:
    | TextClassificationConfig
    | undefined;
  /**
   * Configuration for entity extraction task.
   * One of text_classification_config and text_entity_extraction_config
   * is required.
   */
  textEntityExtractionConfig?:
    | TextEntityExtractionConfig
    | undefined;
  /**
   * Required. Name of the data set to request labeling task, format:
   * projects/{project_id}/datasets/{dataset_id}
   */
  parent: string;
  /** Required. Basic human annotation config. */
  basicConfig:
    | HumanAnnotationConfig
    | undefined;
  /** Required. The type of text labeling task. */
  feature: LabelTextRequest_Feature;
}

/** Text labeling task feature. */
export enum LabelTextRequest_Feature {
  FEATURE_UNSPECIFIED = 0,
  /** TEXT_CLASSIFICATION - Label text content to one of more labels. */
  TEXT_CLASSIFICATION = 1,
  /** TEXT_ENTITY_EXTRACTION - Label entities and their span in text. */
  TEXT_ENTITY_EXTRACTION = 2,
  UNRECOGNIZED = -1,
}

export function labelTextRequest_FeatureFromJSON(object: any): LabelTextRequest_Feature {
  switch (object) {
    case 0:
    case "FEATURE_UNSPECIFIED":
      return LabelTextRequest_Feature.FEATURE_UNSPECIFIED;
    case 1:
    case "TEXT_CLASSIFICATION":
      return LabelTextRequest_Feature.TEXT_CLASSIFICATION;
    case 2:
    case "TEXT_ENTITY_EXTRACTION":
      return LabelTextRequest_Feature.TEXT_ENTITY_EXTRACTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LabelTextRequest_Feature.UNRECOGNIZED;
  }
}

export function labelTextRequest_FeatureToJSON(object: LabelTextRequest_Feature): string {
  switch (object) {
    case LabelTextRequest_Feature.FEATURE_UNSPECIFIED:
      return "FEATURE_UNSPECIFIED";
    case LabelTextRequest_Feature.TEXT_CLASSIFICATION:
      return "TEXT_CLASSIFICATION";
    case LabelTextRequest_Feature.TEXT_ENTITY_EXTRACTION:
      return "TEXT_ENTITY_EXTRACTION";
    case LabelTextRequest_Feature.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for GetExample */
export interface GetExampleRequest {
  /**
   * Required. Name of example, format:
   * projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/
   * {annotated_dataset_id}/examples/{example_id}
   */
  name: string;
  /**
   * Optional. An expression for filtering Examples. Filter by
   * annotation_spec.display_name is supported. Format
   * "annotation_spec.display_name = {display_name}"
   */
  filter: string;
}

/** Request message for ListExamples. */
export interface ListExamplesRequest {
  /** Required. Example resource parent. */
  parent: string;
  /**
   * Optional. An expression for filtering Examples. For annotated datasets that
   * have annotation spec set, filter by
   * annotation_spec.display_name is supported. Format
   * "annotation_spec.display_name = {display_name}"
   */
  filter: string;
  /**
   * Optional. Requested page size. Server may return fewer results than
   * requested. Default value is 100.
   */
  pageSize: number;
  /**
   * Optional. A token identifying a page of results for the server to return.
   * Typically obtained by
   * [ListExamplesResponse.next_page_token][google.cloud.datalabeling.v1beta1.ListExamplesResponse.next_page_token] of the previous
   * [DataLabelingService.ListExamples] call.
   * Return first page if empty.
   */
  pageToken: string;
}

/** Results of listing Examples in and annotated dataset. */
export interface ListExamplesResponse {
  /** The list of examples to return. */
  examples: Example[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
}

/** Request message for CreateAnnotationSpecSet. */
export interface CreateAnnotationSpecSetRequest {
  /**
   * Required. AnnotationSpecSet resource parent, format:
   * projects/{project_id}
   */
  parent: string;
  /**
   * Required. Annotation spec set to create. Annotation specs must be included.
   * Only one annotation spec will be accepted for annotation specs with same
   * display_name.
   */
  annotationSpecSet: AnnotationSpecSet | undefined;
}

/** Request message for GetAnnotationSpecSet. */
export interface GetAnnotationSpecSetRequest {
  /**
   * Required. AnnotationSpecSet resource name, format:
   * projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}
   */
  name: string;
}

/** Request message for ListAnnotationSpecSets. */
export interface ListAnnotationSpecSetsRequest {
  /**
   * Required. Parent of AnnotationSpecSet resource, format:
   * projects/{project_id}
   */
  parent: string;
  /** Optional. Filter is not supported at this moment. */
  filter: string;
  /**
   * Optional. Requested page size. Server may return fewer results than
   * requested. Default value is 100.
   */
  pageSize: number;
  /**
   * Optional. A token identifying a page of results for the server to return.
   * Typically obtained by
   * [ListAnnotationSpecSetsResponse.next_page_token][google.cloud.datalabeling.v1beta1.ListAnnotationSpecSetsResponse.next_page_token] of the previous
   * [DataLabelingService.ListAnnotationSpecSets] call.
   * Return first page if empty.
   */
  pageToken: string;
}

/** Results of listing annotation spec set under a project. */
export interface ListAnnotationSpecSetsResponse {
  /** The list of annotation spec sets. */
  annotationSpecSets: AnnotationSpecSet[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
}

/** Request message for DeleteAnnotationSpecSet. */
export interface DeleteAnnotationSpecSetRequest {
  /**
   * Required. AnnotationSpec resource name, format:
   * `projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}`.
   */
  name: string;
}

/** Request message for CreateInstruction. */
export interface CreateInstructionRequest {
  /**
   * Required. Instruction resource parent, format:
   * projects/{project_id}
   */
  parent: string;
  /** Required. Instruction of how to perform the labeling task. */
  instruction: Instruction | undefined;
}

/** Request message for GetInstruction. */
export interface GetInstructionRequest {
  /**
   * Required. Instruction resource name, format:
   * projects/{project_id}/instructions/{instruction_id}
   */
  name: string;
}

/** Request message for DeleteInstruction. */
export interface DeleteInstructionRequest {
  /**
   * Required. Instruction resource name, format:
   * projects/{project_id}/instructions/{instruction_id}
   */
  name: string;
}

/** Request message for ListInstructions. */
export interface ListInstructionsRequest {
  /**
   * Required. Instruction resource parent, format:
   * projects/{project_id}
   */
  parent: string;
  /** Optional. Filter is not supported at this moment. */
  filter: string;
  /**
   * Optional. Requested page size. Server may return fewer results than
   * requested. Default value is 100.
   */
  pageSize: number;
  /**
   * Optional. A token identifying a page of results for the server to return.
   * Typically obtained by
   * [ListInstructionsResponse.next_page_token][google.cloud.datalabeling.v1beta1.ListInstructionsResponse.next_page_token] of the previous
   * [DataLabelingService.ListInstructions] call.
   * Return first page if empty.
   */
  pageToken: string;
}

/** Results of listing instructions under a project. */
export interface ListInstructionsResponse {
  /** The list of Instructions to return. */
  instructions: Instruction[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
}

/** Request message for GetEvaluation. */
export interface GetEvaluationRequest {
  /**
   * Required. Name of the evaluation. Format:
   *
   * "projects/<var>{project_id}</var>/datasets/<var>{dataset_id}</var>/evaluations/<var>{evaluation_id}</var>'
   */
  name: string;
}

/** Request message for SearchEvaluation. */
export interface SearchEvaluationsRequest {
  /**
   * Required. Evaluation search parent (project ID). Format:
   * "projects/<var>{project_id}</var>"
   */
  parent: string;
  /**
   * Optional. To search evaluations, you can filter by the following:
   *
   * * evaluation<span>_</span>job.evaluation_job_id (the last part of
   *   [EvaluationJob.name][google.cloud.datalabeling.v1beta1.EvaluationJob.name])
   * * evaluation<span>_</span>job.model_id (the <var>{model_name}</var> portion
   *   of [EvaluationJob.modelVersion][google.cloud.datalabeling.v1beta1.EvaluationJob.model_version])
   * * evaluation<span>_</span>job.evaluation_job_run_time_start (Minimum
   *   threshold for the
   *   [evaluationJobRunTime][google.cloud.datalabeling.v1beta1.Evaluation.evaluation_job_run_time] that created
   *   the evaluation)
   * * evaluation<span>_</span>job.evaluation_job_run_time_end (Maximum
   *   threshold for the
   *   [evaluationJobRunTime][google.cloud.datalabeling.v1beta1.Evaluation.evaluation_job_run_time] that created
   *   the evaluation)
   * * evaluation<span>_</span>job.job_state ([EvaluationJob.state][google.cloud.datalabeling.v1beta1.EvaluationJob.state])
   * * annotation<span>_</span>spec.display_name (the Evaluation contains a
   *   metric for the annotation spec with this
   *   [displayName][google.cloud.datalabeling.v1beta1.AnnotationSpec.display_name])
   *
   * To filter by multiple critiera, use the `AND` operator or the `OR`
   * operator. The following examples shows a string that filters by several
   * critiera:
   *
   * "evaluation<span>_</span>job.evaluation_job_id =
   * <var>{evaluation_job_id}</var> AND evaluation<span>_</span>job.model_id =
   * <var>{model_name}</var> AND
   * evaluation<span>_</span>job.evaluation_job_run_time_start =
   * <var>{timestamp_1}</var> AND
   * evaluation<span>_</span>job.evaluation_job_run_time_end =
   * <var>{timestamp_2}</var> AND annotation<span>_</span>spec.display_name =
   * <var>{display_name}</var>"
   */
  filter: string;
  /**
   * Optional. Requested page size. Server may return fewer results than
   * requested. Default value is 100.
   */
  pageSize: number;
  /**
   * Optional. A token identifying a page of results for the server to return.
   * Typically obtained by the
   * [nextPageToken][google.cloud.datalabeling.v1beta1.SearchEvaluationsResponse.next_page_token] of the response
   * to a previous search request.
   *
   * If you don't specify this field, the API call requests the first page of
   * the search.
   */
  pageToken: string;
}

/** Results of searching evaluations. */
export interface SearchEvaluationsResponse {
  /** The list of evaluations matching the search. */
  evaluations: Evaluation[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
}

/** Request message of SearchExampleComparisons. */
export interface SearchExampleComparisonsRequest {
  /**
   * Required. Name of the [Evaluation][google.cloud.datalabeling.v1beta1.Evaluation] resource to search for example
   * comparisons from. Format:
   *
   * "projects/<var>{project_id}</var>/datasets/<var>{dataset_id}</var>/evaluations/<var>{evaluation_id}</var>"
   */
  parent: string;
  /**
   * Optional. Requested page size. Server may return fewer results than
   * requested. Default value is 100.
   */
  pageSize: number;
  /**
   * Optional. A token identifying a page of results for the server to return.
   * Typically obtained by the
   * [nextPageToken][SearchExampleComparisons.next_page_token] of the response
   * to a previous search rquest.
   *
   * If you don't specify this field, the API call requests the first page of
   * the search.
   */
  pageToken: string;
}

/** Results of searching example comparisons. */
export interface SearchExampleComparisonsResponse {
  /** A list of example comparisons matching the search criteria. */
  exampleComparisons: SearchExampleComparisonsResponse_ExampleComparison[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
}

/**
 * Example comparisons comparing ground truth output and predictions for a
 * specific input.
 */
export interface SearchExampleComparisonsResponse_ExampleComparison {
  /** The ground truth output for the input. */
  groundTruthExample:
    | Example
    | undefined;
  /** Predictions by the model for the input. */
  modelCreatedExamples: Example[];
}

/** Request message for CreateEvaluationJob. */
export interface CreateEvaluationJobRequest {
  /**
   * Required. Evaluation job resource parent. Format:
   * "projects/<var>{project_id}</var>"
   */
  parent: string;
  /** Required. The evaluation job to create. */
  job: EvaluationJob | undefined;
}

/** Request message for UpdateEvaluationJob. */
export interface UpdateEvaluationJobRequest {
  /** Required. Evaluation job that is going to be updated. */
  evaluationJob:
    | EvaluationJob
    | undefined;
  /**
   * Optional. Mask for which fields to update. You can only provide the
   * following fields:
   *
   * * `evaluationJobConfig.humanAnnotationConfig.instruction`
   * * `evaluationJobConfig.exampleCount`
   * * `evaluationJobConfig.exampleSamplePercentage`
   *
   * You can provide more than one of these fields by separating them with
   * commas.
   */
  updateMask: string[] | undefined;
}

/** Request message for GetEvaluationJob. */
export interface GetEvaluationJobRequest {
  /**
   * Required. Name of the evaluation job. Format:
   *
   * "projects/<var>{project_id}</var>/evaluationJobs/<var>{evaluation_job_id}</var>"
   */
  name: string;
}

/** Request message for PauseEvaluationJob. */
export interface PauseEvaluationJobRequest {
  /**
   * Required. Name of the evaluation job that is going to be paused. Format:
   *
   * "projects/<var>{project_id}</var>/evaluationJobs/<var>{evaluation_job_id}</var>"
   */
  name: string;
}

/** Request message ResumeEvaluationJob. */
export interface ResumeEvaluationJobRequest {
  /**
   * Required. Name of the evaluation job that is going to be resumed. Format:
   *
   * "projects/<var>{project_id}</var>/evaluationJobs/<var>{evaluation_job_id}</var>"
   */
  name: string;
}

/** Request message DeleteEvaluationJob. */
export interface DeleteEvaluationJobRequest {
  /**
   * Required. Name of the evaluation job that is going to be deleted. Format:
   *
   * "projects/<var>{project_id}</var>/evaluationJobs/<var>{evaluation_job_id}</var>"
   */
  name: string;
}

/** Request message for ListEvaluationJobs. */
export interface ListEvaluationJobsRequest {
  /**
   * Required. Evaluation job resource parent. Format:
   * "projects/<var>{project_id}</var>"
   */
  parent: string;
  /**
   * Optional. You can filter the jobs to list by model_id (also known as
   * model_name, as described in
   * [EvaluationJob.modelVersion][google.cloud.datalabeling.v1beta1.EvaluationJob.model_version]) or by
   * evaluation job state (as described in [EvaluationJob.state][google.cloud.datalabeling.v1beta1.EvaluationJob.state]). To filter
   * by both criteria, use the `AND` operator or the `OR` operator. For example,
   * you can use the following string for your filter:
   * "evaluation<span>_</span>job.model_id = <var>{model_name}</var> AND
   * evaluation<span>_</span>job.state = <var>{evaluation_job_state}</var>"
   */
  filter: string;
  /**
   * Optional. Requested page size. Server may return fewer results than
   * requested. Default value is 100.
   */
  pageSize: number;
  /**
   * Optional. A token identifying a page of results for the server to return.
   * Typically obtained by the
   * [nextPageToken][google.cloud.datalabeling.v1beta1.ListEvaluationJobsResponse.next_page_token] in the response
   * to the previous request. The request returns the first page if this is
   * empty.
   */
  pageToken: string;
}

/** Results for listing evaluation jobs. */
export interface ListEvaluationJobsResponse {
  /** The list of evaluation jobs to return. */
  evaluationJobs: EvaluationJob[];
  /** A token to retrieve next page of results. */
  nextPageToken: string;
}

function createBaseCreateDatasetRequest(): CreateDatasetRequest {
  return { parent: "", dataset: undefined };
}

export const CreateDatasetRequest: MessageFns<CreateDatasetRequest> = {
  encode(message: CreateDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataset !== undefined) {
      Dataset.encode(message.dataset, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataset = Dataset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDatasetRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataset: isSet(object.dataset) ? Dataset.fromJSON(object.dataset) : undefined,
    };
  },

  toJSON(message: CreateDatasetRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataset !== undefined) {
      obj.dataset = Dataset.toJSON(message.dataset);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDatasetRequest>): CreateDatasetRequest {
    return CreateDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDatasetRequest>): CreateDatasetRequest {
    const message = createBaseCreateDatasetRequest();
    message.parent = object.parent ?? "";
    message.dataset = (object.dataset !== undefined && object.dataset !== null)
      ? Dataset.fromPartial(object.dataset)
      : undefined;
    return message;
  },
};

function createBaseGetDatasetRequest(): GetDatasetRequest {
  return { name: "" };
}

export const GetDatasetRequest: MessageFns<GetDatasetRequest> = {
  encode(message: GetDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDatasetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDatasetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDatasetRequest>): GetDatasetRequest {
    return GetDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDatasetRequest>): GetDatasetRequest {
    const message = createBaseGetDatasetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDatasetsRequest(): ListDatasetsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListDatasetsRequest: MessageFns<ListDatasetsRequest> = {
  encode(message: ListDatasetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDatasetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDatasetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDatasetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDatasetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDatasetsRequest>): ListDatasetsRequest {
    return ListDatasetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDatasetsRequest>): ListDatasetsRequest {
    const message = createBaseListDatasetsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDatasetsResponse(): ListDatasetsResponse {
  return { datasets: [], nextPageToken: "" };
}

export const ListDatasetsResponse: MessageFns<ListDatasetsResponse> = {
  encode(message: ListDatasetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.datasets) {
      Dataset.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDatasetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDatasetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasets.push(Dataset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDatasetsResponse {
    return {
      datasets: globalThis.Array.isArray(object?.datasets) ? object.datasets.map((e: any) => Dataset.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDatasetsResponse): unknown {
    const obj: any = {};
    if (message.datasets?.length) {
      obj.datasets = message.datasets.map((e) => Dataset.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDatasetsResponse>): ListDatasetsResponse {
    return ListDatasetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDatasetsResponse>): ListDatasetsResponse {
    const message = createBaseListDatasetsResponse();
    message.datasets = object.datasets?.map((e) => Dataset.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteDatasetRequest(): DeleteDatasetRequest {
  return { name: "" };
}

export const DeleteDatasetRequest: MessageFns<DeleteDatasetRequest> = {
  encode(message: DeleteDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDatasetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDatasetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDatasetRequest>): DeleteDatasetRequest {
    return DeleteDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDatasetRequest>): DeleteDatasetRequest {
    const message = createBaseDeleteDatasetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseImportDataRequest(): ImportDataRequest {
  return { name: "", inputConfig: undefined, userEmailAddress: "" };
}

export const ImportDataRequest: MessageFns<ImportDataRequest> = {
  encode(message: ImportDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.inputConfig !== undefined) {
      InputConfig.encode(message.inputConfig, writer.uint32(18).fork()).join();
    }
    if (message.userEmailAddress !== "") {
      writer.uint32(26).string(message.userEmailAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.inputConfig = InputConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userEmailAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      inputConfig: isSet(object.inputConfig) ? InputConfig.fromJSON(object.inputConfig) : undefined,
      userEmailAddress: isSet(object.userEmailAddress) ? globalThis.String(object.userEmailAddress) : "",
    };
  },

  toJSON(message: ImportDataRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.inputConfig !== undefined) {
      obj.inputConfig = InputConfig.toJSON(message.inputConfig);
    }
    if (message.userEmailAddress !== "") {
      obj.userEmailAddress = message.userEmailAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataRequest>): ImportDataRequest {
    return ImportDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataRequest>): ImportDataRequest {
    const message = createBaseImportDataRequest();
    message.name = object.name ?? "";
    message.inputConfig = (object.inputConfig !== undefined && object.inputConfig !== null)
      ? InputConfig.fromPartial(object.inputConfig)
      : undefined;
    message.userEmailAddress = object.userEmailAddress ?? "";
    return message;
  },
};

function createBaseExportDataRequest(): ExportDataRequest {
  return { name: "", annotatedDataset: "", filter: "", outputConfig: undefined, userEmailAddress: "" };
}

export const ExportDataRequest: MessageFns<ExportDataRequest> = {
  encode(message: ExportDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.annotatedDataset !== "") {
      writer.uint32(18).string(message.annotatedDataset);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.outputConfig !== undefined) {
      OutputConfig.encode(message.outputConfig, writer.uint32(34).fork()).join();
    }
    if (message.userEmailAddress !== "") {
      writer.uint32(42).string(message.userEmailAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.annotatedDataset = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.outputConfig = OutputConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.userEmailAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      annotatedDataset: isSet(object.annotatedDataset) ? globalThis.String(object.annotatedDataset) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      outputConfig: isSet(object.outputConfig) ? OutputConfig.fromJSON(object.outputConfig) : undefined,
      userEmailAddress: isSet(object.userEmailAddress) ? globalThis.String(object.userEmailAddress) : "",
    };
  },

  toJSON(message: ExportDataRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.annotatedDataset !== "") {
      obj.annotatedDataset = message.annotatedDataset;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.outputConfig !== undefined) {
      obj.outputConfig = OutputConfig.toJSON(message.outputConfig);
    }
    if (message.userEmailAddress !== "") {
      obj.userEmailAddress = message.userEmailAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataRequest>): ExportDataRequest {
    return ExportDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataRequest>): ExportDataRequest {
    const message = createBaseExportDataRequest();
    message.name = object.name ?? "";
    message.annotatedDataset = object.annotatedDataset ?? "";
    message.filter = object.filter ?? "";
    message.outputConfig = (object.outputConfig !== undefined && object.outputConfig !== null)
      ? OutputConfig.fromPartial(object.outputConfig)
      : undefined;
    message.userEmailAddress = object.userEmailAddress ?? "";
    return message;
  },
};

function createBaseGetDataItemRequest(): GetDataItemRequest {
  return { name: "" };
}

export const GetDataItemRequest: MessageFns<GetDataItemRequest> = {
  encode(message: GetDataItemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataItemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataItemRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataItemRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataItemRequest>): GetDataItemRequest {
    return GetDataItemRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataItemRequest>): GetDataItemRequest {
    const message = createBaseGetDataItemRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDataItemsRequest(): ListDataItemsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListDataItemsRequest: MessageFns<ListDataItemsRequest> = {
  encode(message: ListDataItemsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataItemsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataItemsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataItemsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDataItemsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataItemsRequest>): ListDataItemsRequest {
    return ListDataItemsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataItemsRequest>): ListDataItemsRequest {
    const message = createBaseListDataItemsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDataItemsResponse(): ListDataItemsResponse {
  return { dataItems: [], nextPageToken: "" };
}

export const ListDataItemsResponse: MessageFns<ListDataItemsResponse> = {
  encode(message: ListDataItemsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataItems) {
      DataItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataItemsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataItemsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataItems.push(DataItem.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataItemsResponse {
    return {
      dataItems: globalThis.Array.isArray(object?.dataItems)
        ? object.dataItems.map((e: any) => DataItem.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDataItemsResponse): unknown {
    const obj: any = {};
    if (message.dataItems?.length) {
      obj.dataItems = message.dataItems.map((e) => DataItem.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataItemsResponse>): ListDataItemsResponse {
    return ListDataItemsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataItemsResponse>): ListDataItemsResponse {
    const message = createBaseListDataItemsResponse();
    message.dataItems = object.dataItems?.map((e) => DataItem.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetAnnotatedDatasetRequest(): GetAnnotatedDatasetRequest {
  return { name: "" };
}

export const GetAnnotatedDatasetRequest: MessageFns<GetAnnotatedDatasetRequest> = {
  encode(message: GetAnnotatedDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAnnotatedDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAnnotatedDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAnnotatedDatasetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAnnotatedDatasetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAnnotatedDatasetRequest>): GetAnnotatedDatasetRequest {
    return GetAnnotatedDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAnnotatedDatasetRequest>): GetAnnotatedDatasetRequest {
    const message = createBaseGetAnnotatedDatasetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAnnotatedDatasetsRequest(): ListAnnotatedDatasetsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListAnnotatedDatasetsRequest: MessageFns<ListAnnotatedDatasetsRequest> = {
  encode(message: ListAnnotatedDatasetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnnotatedDatasetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnnotatedDatasetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnnotatedDatasetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAnnotatedDatasetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnnotatedDatasetsRequest>): ListAnnotatedDatasetsRequest {
    return ListAnnotatedDatasetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnnotatedDatasetsRequest>): ListAnnotatedDatasetsRequest {
    const message = createBaseListAnnotatedDatasetsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAnnotatedDatasetsResponse(): ListAnnotatedDatasetsResponse {
  return { annotatedDatasets: [], nextPageToken: "" };
}

export const ListAnnotatedDatasetsResponse: MessageFns<ListAnnotatedDatasetsResponse> = {
  encode(message: ListAnnotatedDatasetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.annotatedDatasets) {
      AnnotatedDataset.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnnotatedDatasetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnnotatedDatasetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.annotatedDatasets.push(AnnotatedDataset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnnotatedDatasetsResponse {
    return {
      annotatedDatasets: globalThis.Array.isArray(object?.annotatedDatasets)
        ? object.annotatedDatasets.map((e: any) => AnnotatedDataset.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAnnotatedDatasetsResponse): unknown {
    const obj: any = {};
    if (message.annotatedDatasets?.length) {
      obj.annotatedDatasets = message.annotatedDatasets.map((e) => AnnotatedDataset.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnnotatedDatasetsResponse>): ListAnnotatedDatasetsResponse {
    return ListAnnotatedDatasetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnnotatedDatasetsResponse>): ListAnnotatedDatasetsResponse {
    const message = createBaseListAnnotatedDatasetsResponse();
    message.annotatedDatasets = object.annotatedDatasets?.map((e) => AnnotatedDataset.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteAnnotatedDatasetRequest(): DeleteAnnotatedDatasetRequest {
  return { name: "" };
}

export const DeleteAnnotatedDatasetRequest: MessageFns<DeleteAnnotatedDatasetRequest> = {
  encode(message: DeleteAnnotatedDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAnnotatedDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAnnotatedDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAnnotatedDatasetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAnnotatedDatasetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAnnotatedDatasetRequest>): DeleteAnnotatedDatasetRequest {
    return DeleteAnnotatedDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAnnotatedDatasetRequest>): DeleteAnnotatedDatasetRequest {
    const message = createBaseDeleteAnnotatedDatasetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLabelImageRequest(): LabelImageRequest {
  return {
    imageClassificationConfig: undefined,
    boundingPolyConfig: undefined,
    polylineConfig: undefined,
    segmentationConfig: undefined,
    parent: "",
    basicConfig: undefined,
    feature: 0,
  };
}

export const LabelImageRequest: MessageFns<LabelImageRequest> = {
  encode(message: LabelImageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imageClassificationConfig !== undefined) {
      ImageClassificationConfig.encode(message.imageClassificationConfig, writer.uint32(34).fork()).join();
    }
    if (message.boundingPolyConfig !== undefined) {
      BoundingPolyConfig.encode(message.boundingPolyConfig, writer.uint32(42).fork()).join();
    }
    if (message.polylineConfig !== undefined) {
      PolylineConfig.encode(message.polylineConfig, writer.uint32(50).fork()).join();
    }
    if (message.segmentationConfig !== undefined) {
      SegmentationConfig.encode(message.segmentationConfig, writer.uint32(58).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.basicConfig !== undefined) {
      HumanAnnotationConfig.encode(message.basicConfig, writer.uint32(18).fork()).join();
    }
    if (message.feature !== 0) {
      writer.uint32(24).int32(message.feature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelImageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.imageClassificationConfig = ImageClassificationConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.boundingPolyConfig = BoundingPolyConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.polylineConfig = PolylineConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.segmentationConfig = SegmentationConfig.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.basicConfig = HumanAnnotationConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.feature = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelImageRequest {
    return {
      imageClassificationConfig: isSet(object.imageClassificationConfig)
        ? ImageClassificationConfig.fromJSON(object.imageClassificationConfig)
        : undefined,
      boundingPolyConfig: isSet(object.boundingPolyConfig)
        ? BoundingPolyConfig.fromJSON(object.boundingPolyConfig)
        : undefined,
      polylineConfig: isSet(object.polylineConfig) ? PolylineConfig.fromJSON(object.polylineConfig) : undefined,
      segmentationConfig: isSet(object.segmentationConfig)
        ? SegmentationConfig.fromJSON(object.segmentationConfig)
        : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      basicConfig: isSet(object.basicConfig) ? HumanAnnotationConfig.fromJSON(object.basicConfig) : undefined,
      feature: isSet(object.feature) ? labelImageRequest_FeatureFromJSON(object.feature) : 0,
    };
  },

  toJSON(message: LabelImageRequest): unknown {
    const obj: any = {};
    if (message.imageClassificationConfig !== undefined) {
      obj.imageClassificationConfig = ImageClassificationConfig.toJSON(message.imageClassificationConfig);
    }
    if (message.boundingPolyConfig !== undefined) {
      obj.boundingPolyConfig = BoundingPolyConfig.toJSON(message.boundingPolyConfig);
    }
    if (message.polylineConfig !== undefined) {
      obj.polylineConfig = PolylineConfig.toJSON(message.polylineConfig);
    }
    if (message.segmentationConfig !== undefined) {
      obj.segmentationConfig = SegmentationConfig.toJSON(message.segmentationConfig);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.basicConfig !== undefined) {
      obj.basicConfig = HumanAnnotationConfig.toJSON(message.basicConfig);
    }
    if (message.feature !== 0) {
      obj.feature = labelImageRequest_FeatureToJSON(message.feature);
    }
    return obj;
  },

  create(base?: DeepPartial<LabelImageRequest>): LabelImageRequest {
    return LabelImageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelImageRequest>): LabelImageRequest {
    const message = createBaseLabelImageRequest();
    message.imageClassificationConfig =
      (object.imageClassificationConfig !== undefined && object.imageClassificationConfig !== null)
        ? ImageClassificationConfig.fromPartial(object.imageClassificationConfig)
        : undefined;
    message.boundingPolyConfig = (object.boundingPolyConfig !== undefined && object.boundingPolyConfig !== null)
      ? BoundingPolyConfig.fromPartial(object.boundingPolyConfig)
      : undefined;
    message.polylineConfig = (object.polylineConfig !== undefined && object.polylineConfig !== null)
      ? PolylineConfig.fromPartial(object.polylineConfig)
      : undefined;
    message.segmentationConfig = (object.segmentationConfig !== undefined && object.segmentationConfig !== null)
      ? SegmentationConfig.fromPartial(object.segmentationConfig)
      : undefined;
    message.parent = object.parent ?? "";
    message.basicConfig = (object.basicConfig !== undefined && object.basicConfig !== null)
      ? HumanAnnotationConfig.fromPartial(object.basicConfig)
      : undefined;
    message.feature = object.feature ?? 0;
    return message;
  },
};

function createBaseLabelVideoRequest(): LabelVideoRequest {
  return {
    videoClassificationConfig: undefined,
    objectDetectionConfig: undefined,
    objectTrackingConfig: undefined,
    eventConfig: undefined,
    parent: "",
    basicConfig: undefined,
    feature: 0,
  };
}

export const LabelVideoRequest: MessageFns<LabelVideoRequest> = {
  encode(message: LabelVideoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoClassificationConfig !== undefined) {
      VideoClassificationConfig.encode(message.videoClassificationConfig, writer.uint32(34).fork()).join();
    }
    if (message.objectDetectionConfig !== undefined) {
      ObjectDetectionConfig.encode(message.objectDetectionConfig, writer.uint32(42).fork()).join();
    }
    if (message.objectTrackingConfig !== undefined) {
      ObjectTrackingConfig.encode(message.objectTrackingConfig, writer.uint32(50).fork()).join();
    }
    if (message.eventConfig !== undefined) {
      EventConfig.encode(message.eventConfig, writer.uint32(58).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.basicConfig !== undefined) {
      HumanAnnotationConfig.encode(message.basicConfig, writer.uint32(18).fork()).join();
    }
    if (message.feature !== 0) {
      writer.uint32(24).int32(message.feature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelVideoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelVideoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.videoClassificationConfig = VideoClassificationConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.objectDetectionConfig = ObjectDetectionConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.objectTrackingConfig = ObjectTrackingConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.eventConfig = EventConfig.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.basicConfig = HumanAnnotationConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.feature = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelVideoRequest {
    return {
      videoClassificationConfig: isSet(object.videoClassificationConfig)
        ? VideoClassificationConfig.fromJSON(object.videoClassificationConfig)
        : undefined,
      objectDetectionConfig: isSet(object.objectDetectionConfig)
        ? ObjectDetectionConfig.fromJSON(object.objectDetectionConfig)
        : undefined,
      objectTrackingConfig: isSet(object.objectTrackingConfig)
        ? ObjectTrackingConfig.fromJSON(object.objectTrackingConfig)
        : undefined,
      eventConfig: isSet(object.eventConfig) ? EventConfig.fromJSON(object.eventConfig) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      basicConfig: isSet(object.basicConfig) ? HumanAnnotationConfig.fromJSON(object.basicConfig) : undefined,
      feature: isSet(object.feature) ? labelVideoRequest_FeatureFromJSON(object.feature) : 0,
    };
  },

  toJSON(message: LabelVideoRequest): unknown {
    const obj: any = {};
    if (message.videoClassificationConfig !== undefined) {
      obj.videoClassificationConfig = VideoClassificationConfig.toJSON(message.videoClassificationConfig);
    }
    if (message.objectDetectionConfig !== undefined) {
      obj.objectDetectionConfig = ObjectDetectionConfig.toJSON(message.objectDetectionConfig);
    }
    if (message.objectTrackingConfig !== undefined) {
      obj.objectTrackingConfig = ObjectTrackingConfig.toJSON(message.objectTrackingConfig);
    }
    if (message.eventConfig !== undefined) {
      obj.eventConfig = EventConfig.toJSON(message.eventConfig);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.basicConfig !== undefined) {
      obj.basicConfig = HumanAnnotationConfig.toJSON(message.basicConfig);
    }
    if (message.feature !== 0) {
      obj.feature = labelVideoRequest_FeatureToJSON(message.feature);
    }
    return obj;
  },

  create(base?: DeepPartial<LabelVideoRequest>): LabelVideoRequest {
    return LabelVideoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelVideoRequest>): LabelVideoRequest {
    const message = createBaseLabelVideoRequest();
    message.videoClassificationConfig =
      (object.videoClassificationConfig !== undefined && object.videoClassificationConfig !== null)
        ? VideoClassificationConfig.fromPartial(object.videoClassificationConfig)
        : undefined;
    message.objectDetectionConfig =
      (object.objectDetectionConfig !== undefined && object.objectDetectionConfig !== null)
        ? ObjectDetectionConfig.fromPartial(object.objectDetectionConfig)
        : undefined;
    message.objectTrackingConfig = (object.objectTrackingConfig !== undefined && object.objectTrackingConfig !== null)
      ? ObjectTrackingConfig.fromPartial(object.objectTrackingConfig)
      : undefined;
    message.eventConfig = (object.eventConfig !== undefined && object.eventConfig !== null)
      ? EventConfig.fromPartial(object.eventConfig)
      : undefined;
    message.parent = object.parent ?? "";
    message.basicConfig = (object.basicConfig !== undefined && object.basicConfig !== null)
      ? HumanAnnotationConfig.fromPartial(object.basicConfig)
      : undefined;
    message.feature = object.feature ?? 0;
    return message;
  },
};

function createBaseLabelTextRequest(): LabelTextRequest {
  return {
    textClassificationConfig: undefined,
    textEntityExtractionConfig: undefined,
    parent: "",
    basicConfig: undefined,
    feature: 0,
  };
}

export const LabelTextRequest: MessageFns<LabelTextRequest> = {
  encode(message: LabelTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.textClassificationConfig !== undefined) {
      TextClassificationConfig.encode(message.textClassificationConfig, writer.uint32(34).fork()).join();
    }
    if (message.textEntityExtractionConfig !== undefined) {
      TextEntityExtractionConfig.encode(message.textEntityExtractionConfig, writer.uint32(42).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.basicConfig !== undefined) {
      HumanAnnotationConfig.encode(message.basicConfig, writer.uint32(18).fork()).join();
    }
    if (message.feature !== 0) {
      writer.uint32(48).int32(message.feature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.textClassificationConfig = TextClassificationConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.textEntityExtractionConfig = TextEntityExtractionConfig.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.basicConfig = HumanAnnotationConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.feature = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelTextRequest {
    return {
      textClassificationConfig: isSet(object.textClassificationConfig)
        ? TextClassificationConfig.fromJSON(object.textClassificationConfig)
        : undefined,
      textEntityExtractionConfig: isSet(object.textEntityExtractionConfig)
        ? TextEntityExtractionConfig.fromJSON(object.textEntityExtractionConfig)
        : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      basicConfig: isSet(object.basicConfig) ? HumanAnnotationConfig.fromJSON(object.basicConfig) : undefined,
      feature: isSet(object.feature) ? labelTextRequest_FeatureFromJSON(object.feature) : 0,
    };
  },

  toJSON(message: LabelTextRequest): unknown {
    const obj: any = {};
    if (message.textClassificationConfig !== undefined) {
      obj.textClassificationConfig = TextClassificationConfig.toJSON(message.textClassificationConfig);
    }
    if (message.textEntityExtractionConfig !== undefined) {
      obj.textEntityExtractionConfig = TextEntityExtractionConfig.toJSON(message.textEntityExtractionConfig);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.basicConfig !== undefined) {
      obj.basicConfig = HumanAnnotationConfig.toJSON(message.basicConfig);
    }
    if (message.feature !== 0) {
      obj.feature = labelTextRequest_FeatureToJSON(message.feature);
    }
    return obj;
  },

  create(base?: DeepPartial<LabelTextRequest>): LabelTextRequest {
    return LabelTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelTextRequest>): LabelTextRequest {
    const message = createBaseLabelTextRequest();
    message.textClassificationConfig =
      (object.textClassificationConfig !== undefined && object.textClassificationConfig !== null)
        ? TextClassificationConfig.fromPartial(object.textClassificationConfig)
        : undefined;
    message.textEntityExtractionConfig =
      (object.textEntityExtractionConfig !== undefined && object.textEntityExtractionConfig !== null)
        ? TextEntityExtractionConfig.fromPartial(object.textEntityExtractionConfig)
        : undefined;
    message.parent = object.parent ?? "";
    message.basicConfig = (object.basicConfig !== undefined && object.basicConfig !== null)
      ? HumanAnnotationConfig.fromPartial(object.basicConfig)
      : undefined;
    message.feature = object.feature ?? 0;
    return message;
  },
};

function createBaseGetExampleRequest(): GetExampleRequest {
  return { name: "", filter: "" };
}

export const GetExampleRequest: MessageFns<GetExampleRequest> = {
  encode(message: GetExampleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExampleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExampleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExampleRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: GetExampleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<GetExampleRequest>): GetExampleRequest {
    return GetExampleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExampleRequest>): GetExampleRequest {
    const message = createBaseGetExampleRequest();
    message.name = object.name ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListExamplesRequest(): ListExamplesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListExamplesRequest: MessageFns<ListExamplesRequest> = {
  encode(message: ListExamplesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExamplesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExamplesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExamplesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListExamplesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExamplesRequest>): ListExamplesRequest {
    return ListExamplesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExamplesRequest>): ListExamplesRequest {
    const message = createBaseListExamplesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListExamplesResponse(): ListExamplesResponse {
  return { examples: [], nextPageToken: "" };
}

export const ListExamplesResponse: MessageFns<ListExamplesResponse> = {
  encode(message: ListExamplesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.examples) {
      Example.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExamplesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExamplesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.examples.push(Example.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExamplesResponse {
    return {
      examples: globalThis.Array.isArray(object?.examples) ? object.examples.map((e: any) => Example.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExamplesResponse): unknown {
    const obj: any = {};
    if (message.examples?.length) {
      obj.examples = message.examples.map((e) => Example.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExamplesResponse>): ListExamplesResponse {
    return ListExamplesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExamplesResponse>): ListExamplesResponse {
    const message = createBaseListExamplesResponse();
    message.examples = object.examples?.map((e) => Example.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateAnnotationSpecSetRequest(): CreateAnnotationSpecSetRequest {
  return { parent: "", annotationSpecSet: undefined };
}

export const CreateAnnotationSpecSetRequest: MessageFns<CreateAnnotationSpecSetRequest> = {
  encode(message: CreateAnnotationSpecSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.annotationSpecSet !== undefined) {
      AnnotationSpecSet.encode(message.annotationSpecSet, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAnnotationSpecSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAnnotationSpecSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.annotationSpecSet = AnnotationSpecSet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAnnotationSpecSetRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      annotationSpecSet: isSet(object.annotationSpecSet)
        ? AnnotationSpecSet.fromJSON(object.annotationSpecSet)
        : undefined,
    };
  },

  toJSON(message: CreateAnnotationSpecSetRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.annotationSpecSet !== undefined) {
      obj.annotationSpecSet = AnnotationSpecSet.toJSON(message.annotationSpecSet);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAnnotationSpecSetRequest>): CreateAnnotationSpecSetRequest {
    return CreateAnnotationSpecSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAnnotationSpecSetRequest>): CreateAnnotationSpecSetRequest {
    const message = createBaseCreateAnnotationSpecSetRequest();
    message.parent = object.parent ?? "";
    message.annotationSpecSet = (object.annotationSpecSet !== undefined && object.annotationSpecSet !== null)
      ? AnnotationSpecSet.fromPartial(object.annotationSpecSet)
      : undefined;
    return message;
  },
};

function createBaseGetAnnotationSpecSetRequest(): GetAnnotationSpecSetRequest {
  return { name: "" };
}

export const GetAnnotationSpecSetRequest: MessageFns<GetAnnotationSpecSetRequest> = {
  encode(message: GetAnnotationSpecSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAnnotationSpecSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAnnotationSpecSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAnnotationSpecSetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAnnotationSpecSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAnnotationSpecSetRequest>): GetAnnotationSpecSetRequest {
    return GetAnnotationSpecSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAnnotationSpecSetRequest>): GetAnnotationSpecSetRequest {
    const message = createBaseGetAnnotationSpecSetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAnnotationSpecSetsRequest(): ListAnnotationSpecSetsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListAnnotationSpecSetsRequest: MessageFns<ListAnnotationSpecSetsRequest> = {
  encode(message: ListAnnotationSpecSetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnnotationSpecSetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnnotationSpecSetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnnotationSpecSetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAnnotationSpecSetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnnotationSpecSetsRequest>): ListAnnotationSpecSetsRequest {
    return ListAnnotationSpecSetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnnotationSpecSetsRequest>): ListAnnotationSpecSetsRequest {
    const message = createBaseListAnnotationSpecSetsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAnnotationSpecSetsResponse(): ListAnnotationSpecSetsResponse {
  return { annotationSpecSets: [], nextPageToken: "" };
}

export const ListAnnotationSpecSetsResponse: MessageFns<ListAnnotationSpecSetsResponse> = {
  encode(message: ListAnnotationSpecSetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.annotationSpecSets) {
      AnnotationSpecSet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnnotationSpecSetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnnotationSpecSetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.annotationSpecSets.push(AnnotationSpecSet.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnnotationSpecSetsResponse {
    return {
      annotationSpecSets: globalThis.Array.isArray(object?.annotationSpecSets)
        ? object.annotationSpecSets.map((e: any) => AnnotationSpecSet.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAnnotationSpecSetsResponse): unknown {
    const obj: any = {};
    if (message.annotationSpecSets?.length) {
      obj.annotationSpecSets = message.annotationSpecSets.map((e) => AnnotationSpecSet.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnnotationSpecSetsResponse>): ListAnnotationSpecSetsResponse {
    return ListAnnotationSpecSetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnnotationSpecSetsResponse>): ListAnnotationSpecSetsResponse {
    const message = createBaseListAnnotationSpecSetsResponse();
    message.annotationSpecSets = object.annotationSpecSets?.map((e) => AnnotationSpecSet.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteAnnotationSpecSetRequest(): DeleteAnnotationSpecSetRequest {
  return { name: "" };
}

export const DeleteAnnotationSpecSetRequest: MessageFns<DeleteAnnotationSpecSetRequest> = {
  encode(message: DeleteAnnotationSpecSetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAnnotationSpecSetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAnnotationSpecSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAnnotationSpecSetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAnnotationSpecSetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAnnotationSpecSetRequest>): DeleteAnnotationSpecSetRequest {
    return DeleteAnnotationSpecSetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAnnotationSpecSetRequest>): DeleteAnnotationSpecSetRequest {
    const message = createBaseDeleteAnnotationSpecSetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateInstructionRequest(): CreateInstructionRequest {
  return { parent: "", instruction: undefined };
}

export const CreateInstructionRequest: MessageFns<CreateInstructionRequest> = {
  encode(message: CreateInstructionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.instruction !== undefined) {
      Instruction.encode(message.instruction, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInstructionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInstructionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instruction = Instruction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInstructionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      instruction: isSet(object.instruction) ? Instruction.fromJSON(object.instruction) : undefined,
    };
  },

  toJSON(message: CreateInstructionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.instruction !== undefined) {
      obj.instruction = Instruction.toJSON(message.instruction);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateInstructionRequest>): CreateInstructionRequest {
    return CreateInstructionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateInstructionRequest>): CreateInstructionRequest {
    const message = createBaseCreateInstructionRequest();
    message.parent = object.parent ?? "";
    message.instruction = (object.instruction !== undefined && object.instruction !== null)
      ? Instruction.fromPartial(object.instruction)
      : undefined;
    return message;
  },
};

function createBaseGetInstructionRequest(): GetInstructionRequest {
  return { name: "" };
}

export const GetInstructionRequest: MessageFns<GetInstructionRequest> = {
  encode(message: GetInstructionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInstructionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInstructionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInstructionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetInstructionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetInstructionRequest>): GetInstructionRequest {
    return GetInstructionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetInstructionRequest>): GetInstructionRequest {
    const message = createBaseGetInstructionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteInstructionRequest(): DeleteInstructionRequest {
  return { name: "" };
}

export const DeleteInstructionRequest: MessageFns<DeleteInstructionRequest> = {
  encode(message: DeleteInstructionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteInstructionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteInstructionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteInstructionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteInstructionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteInstructionRequest>): DeleteInstructionRequest {
    return DeleteInstructionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteInstructionRequest>): DeleteInstructionRequest {
    const message = createBaseDeleteInstructionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListInstructionsRequest(): ListInstructionsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListInstructionsRequest: MessageFns<ListInstructionsRequest> = {
  encode(message: ListInstructionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstructionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstructionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstructionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListInstructionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstructionsRequest>): ListInstructionsRequest {
    return ListInstructionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstructionsRequest>): ListInstructionsRequest {
    const message = createBaseListInstructionsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListInstructionsResponse(): ListInstructionsResponse {
  return { instructions: [], nextPageToken: "" };
}

export const ListInstructionsResponse: MessageFns<ListInstructionsResponse> = {
  encode(message: ListInstructionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.instructions) {
      Instruction.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListInstructionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListInstructionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instructions.push(Instruction.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListInstructionsResponse {
    return {
      instructions: globalThis.Array.isArray(object?.instructions)
        ? object.instructions.map((e: any) => Instruction.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListInstructionsResponse): unknown {
    const obj: any = {};
    if (message.instructions?.length) {
      obj.instructions = message.instructions.map((e) => Instruction.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListInstructionsResponse>): ListInstructionsResponse {
    return ListInstructionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListInstructionsResponse>): ListInstructionsResponse {
    const message = createBaseListInstructionsResponse();
    message.instructions = object.instructions?.map((e) => Instruction.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetEvaluationRequest(): GetEvaluationRequest {
  return { name: "" };
}

export const GetEvaluationRequest: MessageFns<GetEvaluationRequest> = {
  encode(message: GetEvaluationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEvaluationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEvaluationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEvaluationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEvaluationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEvaluationRequest>): GetEvaluationRequest {
    return GetEvaluationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEvaluationRequest>): GetEvaluationRequest {
    const message = createBaseGetEvaluationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSearchEvaluationsRequest(): SearchEvaluationsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const SearchEvaluationsRequest: MessageFns<SearchEvaluationsRequest> = {
  encode(message: SearchEvaluationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchEvaluationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchEvaluationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchEvaluationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchEvaluationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchEvaluationsRequest>): SearchEvaluationsRequest {
    return SearchEvaluationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchEvaluationsRequest>): SearchEvaluationsRequest {
    const message = createBaseSearchEvaluationsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchEvaluationsResponse(): SearchEvaluationsResponse {
  return { evaluations: [], nextPageToken: "" };
}

export const SearchEvaluationsResponse: MessageFns<SearchEvaluationsResponse> = {
  encode(message: SearchEvaluationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.evaluations) {
      Evaluation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchEvaluationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchEvaluationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.evaluations.push(Evaluation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchEvaluationsResponse {
    return {
      evaluations: globalThis.Array.isArray(object?.evaluations)
        ? object.evaluations.map((e: any) => Evaluation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchEvaluationsResponse): unknown {
    const obj: any = {};
    if (message.evaluations?.length) {
      obj.evaluations = message.evaluations.map((e) => Evaluation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchEvaluationsResponse>): SearchEvaluationsResponse {
    return SearchEvaluationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchEvaluationsResponse>): SearchEvaluationsResponse {
    const message = createBaseSearchEvaluationsResponse();
    message.evaluations = object.evaluations?.map((e) => Evaluation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchExampleComparisonsRequest(): SearchExampleComparisonsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const SearchExampleComparisonsRequest: MessageFns<SearchExampleComparisonsRequest> = {
  encode(message: SearchExampleComparisonsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchExampleComparisonsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchExampleComparisonsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchExampleComparisonsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchExampleComparisonsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchExampleComparisonsRequest>): SearchExampleComparisonsRequest {
    return SearchExampleComparisonsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchExampleComparisonsRequest>): SearchExampleComparisonsRequest {
    const message = createBaseSearchExampleComparisonsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchExampleComparisonsResponse(): SearchExampleComparisonsResponse {
  return { exampleComparisons: [], nextPageToken: "" };
}

export const SearchExampleComparisonsResponse: MessageFns<SearchExampleComparisonsResponse> = {
  encode(message: SearchExampleComparisonsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.exampleComparisons) {
      SearchExampleComparisonsResponse_ExampleComparison.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchExampleComparisonsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchExampleComparisonsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.exampleComparisons.push(
            SearchExampleComparisonsResponse_ExampleComparison.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchExampleComparisonsResponse {
    return {
      exampleComparisons: globalThis.Array.isArray(object?.exampleComparisons)
        ? object.exampleComparisons.map((e: any) => SearchExampleComparisonsResponse_ExampleComparison.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchExampleComparisonsResponse): unknown {
    const obj: any = {};
    if (message.exampleComparisons?.length) {
      obj.exampleComparisons = message.exampleComparisons.map((e) =>
        SearchExampleComparisonsResponse_ExampleComparison.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchExampleComparisonsResponse>): SearchExampleComparisonsResponse {
    return SearchExampleComparisonsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchExampleComparisonsResponse>): SearchExampleComparisonsResponse {
    const message = createBaseSearchExampleComparisonsResponse();
    message.exampleComparisons =
      object.exampleComparisons?.map((e) => SearchExampleComparisonsResponse_ExampleComparison.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchExampleComparisonsResponse_ExampleComparison(): SearchExampleComparisonsResponse_ExampleComparison {
  return { groundTruthExample: undefined, modelCreatedExamples: [] };
}

export const SearchExampleComparisonsResponse_ExampleComparison: MessageFns<
  SearchExampleComparisonsResponse_ExampleComparison
> = {
  encode(
    message: SearchExampleComparisonsResponse_ExampleComparison,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.groundTruthExample !== undefined) {
      Example.encode(message.groundTruthExample, writer.uint32(10).fork()).join();
    }
    for (const v of message.modelCreatedExamples) {
      Example.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchExampleComparisonsResponse_ExampleComparison {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchExampleComparisonsResponse_ExampleComparison();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groundTruthExample = Example.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelCreatedExamples.push(Example.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchExampleComparisonsResponse_ExampleComparison {
    return {
      groundTruthExample: isSet(object.groundTruthExample) ? Example.fromJSON(object.groundTruthExample) : undefined,
      modelCreatedExamples: globalThis.Array.isArray(object?.modelCreatedExamples)
        ? object.modelCreatedExamples.map((e: any) => Example.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SearchExampleComparisonsResponse_ExampleComparison): unknown {
    const obj: any = {};
    if (message.groundTruthExample !== undefined) {
      obj.groundTruthExample = Example.toJSON(message.groundTruthExample);
    }
    if (message.modelCreatedExamples?.length) {
      obj.modelCreatedExamples = message.modelCreatedExamples.map((e) => Example.toJSON(e));
    }
    return obj;
  },

  create(
    base?: DeepPartial<SearchExampleComparisonsResponse_ExampleComparison>,
  ): SearchExampleComparisonsResponse_ExampleComparison {
    return SearchExampleComparisonsResponse_ExampleComparison.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SearchExampleComparisonsResponse_ExampleComparison>,
  ): SearchExampleComparisonsResponse_ExampleComparison {
    const message = createBaseSearchExampleComparisonsResponse_ExampleComparison();
    message.groundTruthExample = (object.groundTruthExample !== undefined && object.groundTruthExample !== null)
      ? Example.fromPartial(object.groundTruthExample)
      : undefined;
    message.modelCreatedExamples = object.modelCreatedExamples?.map((e) => Example.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateEvaluationJobRequest(): CreateEvaluationJobRequest {
  return { parent: "", job: undefined };
}

export const CreateEvaluationJobRequest: MessageFns<CreateEvaluationJobRequest> = {
  encode(message: CreateEvaluationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.job !== undefined) {
      EvaluationJob.encode(message.job, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEvaluationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEvaluationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.job = EvaluationJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEvaluationJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      job: isSet(object.job) ? EvaluationJob.fromJSON(object.job) : undefined,
    };
  },

  toJSON(message: CreateEvaluationJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.job !== undefined) {
      obj.job = EvaluationJob.toJSON(message.job);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEvaluationJobRequest>): CreateEvaluationJobRequest {
    return CreateEvaluationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEvaluationJobRequest>): CreateEvaluationJobRequest {
    const message = createBaseCreateEvaluationJobRequest();
    message.parent = object.parent ?? "";
    message.job = (object.job !== undefined && object.job !== null) ? EvaluationJob.fromPartial(object.job) : undefined;
    return message;
  },
};

function createBaseUpdateEvaluationJobRequest(): UpdateEvaluationJobRequest {
  return { evaluationJob: undefined, updateMask: undefined };
}

export const UpdateEvaluationJobRequest: MessageFns<UpdateEvaluationJobRequest> = {
  encode(message: UpdateEvaluationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.evaluationJob !== undefined) {
      EvaluationJob.encode(message.evaluationJob, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEvaluationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEvaluationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.evaluationJob = EvaluationJob.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEvaluationJobRequest {
    return {
      evaluationJob: isSet(object.evaluationJob) ? EvaluationJob.fromJSON(object.evaluationJob) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateEvaluationJobRequest): unknown {
    const obj: any = {};
    if (message.evaluationJob !== undefined) {
      obj.evaluationJob = EvaluationJob.toJSON(message.evaluationJob);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEvaluationJobRequest>): UpdateEvaluationJobRequest {
    return UpdateEvaluationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEvaluationJobRequest>): UpdateEvaluationJobRequest {
    const message = createBaseUpdateEvaluationJobRequest();
    message.evaluationJob = (object.evaluationJob !== undefined && object.evaluationJob !== null)
      ? EvaluationJob.fromPartial(object.evaluationJob)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetEvaluationJobRequest(): GetEvaluationJobRequest {
  return { name: "" };
}

export const GetEvaluationJobRequest: MessageFns<GetEvaluationJobRequest> = {
  encode(message: GetEvaluationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEvaluationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEvaluationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEvaluationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEvaluationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEvaluationJobRequest>): GetEvaluationJobRequest {
    return GetEvaluationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEvaluationJobRequest>): GetEvaluationJobRequest {
    const message = createBaseGetEvaluationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePauseEvaluationJobRequest(): PauseEvaluationJobRequest {
  return { name: "" };
}

export const PauseEvaluationJobRequest: MessageFns<PauseEvaluationJobRequest> = {
  encode(message: PauseEvaluationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PauseEvaluationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePauseEvaluationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PauseEvaluationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: PauseEvaluationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<PauseEvaluationJobRequest>): PauseEvaluationJobRequest {
    return PauseEvaluationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PauseEvaluationJobRequest>): PauseEvaluationJobRequest {
    const message = createBasePauseEvaluationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResumeEvaluationJobRequest(): ResumeEvaluationJobRequest {
  return { name: "" };
}

export const ResumeEvaluationJobRequest: MessageFns<ResumeEvaluationJobRequest> = {
  encode(message: ResumeEvaluationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeEvaluationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeEvaluationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeEvaluationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ResumeEvaluationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ResumeEvaluationJobRequest>): ResumeEvaluationJobRequest {
    return ResumeEvaluationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResumeEvaluationJobRequest>): ResumeEvaluationJobRequest {
    const message = createBaseResumeEvaluationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteEvaluationJobRequest(): DeleteEvaluationJobRequest {
  return { name: "" };
}

export const DeleteEvaluationJobRequest: MessageFns<DeleteEvaluationJobRequest> = {
  encode(message: DeleteEvaluationJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEvaluationJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEvaluationJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEvaluationJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEvaluationJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEvaluationJobRequest>): DeleteEvaluationJobRequest {
    return DeleteEvaluationJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEvaluationJobRequest>): DeleteEvaluationJobRequest {
    const message = createBaseDeleteEvaluationJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListEvaluationJobsRequest(): ListEvaluationJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListEvaluationJobsRequest: MessageFns<ListEvaluationJobsRequest> = {
  encode(message: ListEvaluationJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEvaluationJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEvaluationJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEvaluationJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEvaluationJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEvaluationJobsRequest>): ListEvaluationJobsRequest {
    return ListEvaluationJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEvaluationJobsRequest>): ListEvaluationJobsRequest {
    const message = createBaseListEvaluationJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEvaluationJobsResponse(): ListEvaluationJobsResponse {
  return { evaluationJobs: [], nextPageToken: "" };
}

export const ListEvaluationJobsResponse: MessageFns<ListEvaluationJobsResponse> = {
  encode(message: ListEvaluationJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.evaluationJobs) {
      EvaluationJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEvaluationJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEvaluationJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.evaluationJobs.push(EvaluationJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEvaluationJobsResponse {
    return {
      evaluationJobs: globalThis.Array.isArray(object?.evaluationJobs)
        ? object.evaluationJobs.map((e: any) => EvaluationJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEvaluationJobsResponse): unknown {
    const obj: any = {};
    if (message.evaluationJobs?.length) {
      obj.evaluationJobs = message.evaluationJobs.map((e) => EvaluationJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEvaluationJobsResponse>): ListEvaluationJobsResponse {
    return ListEvaluationJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEvaluationJobsResponse>): ListEvaluationJobsResponse {
    const message = createBaseListEvaluationJobsResponse();
    message.evaluationJobs = object.evaluationJobs?.map((e) => EvaluationJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service for the AI Platform Data Labeling API. */
export type DataLabelingServiceDefinition = typeof DataLabelingServiceDefinition;
export const DataLabelingServiceDefinition = {
  name: "DataLabelingService",
  fullName: "google.cloud.datalabeling.v1beta1.DataLabelingService",
  methods: {
    /** Creates dataset. If success return a Dataset resource. */
    createDataset: {
      name: "CreateDataset",
      requestType: CreateDatasetRequest,
      requestStream: false,
      responseType: Dataset,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 100, 97, 116, 97, 115, 101, 116])],
          578365826: [
            Buffer.from([
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets dataset by resource name. */
    getDataset: {
      name: "GetDataset",
      requestType: GetDatasetRequest,
      requestStream: false,
      responseType: Dataset,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists datasets under a project. Pagination is supported. */
    listDatasets: {
      name: "ListDatasets",
      requestType: ListDatasetsRequest,
      requestStream: false,
      responseType: ListDatasetsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a dataset by resource name. */
    deleteDataset: {
      name: "DeleteDataset",
      requestType: DeleteDatasetRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              39,
              42,
              37,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Imports data into dataset based on source locations defined in request.
     * It can be called multiple times for the same dataset. Each dataset can
     * only have one long running operation running on it. For example, no
     * labeling task (also long running operation) can be started while
     * importing is still ongoing. Vice versa.
     */
    importData: {
      name: "ImportData",
      requestType: ImportDataRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              58,
              10,
              27,
              73,
              109,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              27,
              73,
              109,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([17, 110, 97, 109, 101, 44, 105, 110, 112, 117, 116, 95, 99, 111, 110, 102, 105, 103])],
          578365826: [
            Buffer.from([
              53,
              58,
              1,
              42,
              34,
              48,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
            ]),
          ],
        },
      },
    },
    /** Exports data and annotations from dataset. */
    exportData: {
      name: "ExportData",
      requestType: ExportDataRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              58,
              10,
              27,
              69,
              120,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              27,
              69,
              120,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              43,
              110,
              97,
              109,
              101,
              44,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              100,
              95,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              44,
              102,
              105,
              108,
              116,
              101,
              114,
              44,
              111,
              117,
              116,
              112,
              117,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              53,
              58,
              1,
              42,
              34,
              48,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a data item in a dataset by resource name. This API can be
     * called after data are imported into dataset.
     */
    getDataItem: {
      name: "GetDataItem",
      requestType: GetDataItemRequest,
      requestStream: false,
      responseType: DataItem,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              73,
              116,
              101,
              109,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists data items in a dataset. This API can be called after data
     * are imported into dataset. Pagination is supported.
     */
    listDataItems: {
      name: "ListDataItems",
      requestType: ListDataItemsRequest,
      requestStream: false,
      responseType: ListDataItemsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              73,
              116,
              101,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets an annotated dataset by resource name. */
    getAnnotatedDataset: {
      name: "GetAnnotatedDataset",
      requestType: GetAnnotatedDatasetRequest,
      requestStream: false,
      responseType: AnnotatedDataset,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              100,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists annotated datasets for a dataset. Pagination is supported. */
    listAnnotatedDatasets: {
      name: "ListAnnotatedDatasets",
      requestType: ListAnnotatedDatasetsRequest,
      requestStream: false,
      responseType: ListAnnotatedDatasetsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              100,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an annotated dataset by resource name. */
    deleteAnnotatedDataset: {
      name: "DeleteAnnotatedDataset",
      requestType: DeleteAnnotatedDatasetRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              59,
              42,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              100,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Starts a labeling task for image. The type of image labeling task is
     * configured by feature in the request.
     */
    labelImage: {
      name: "LabelImage",
      requestType: LabelImageRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              16,
              65,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              100,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              18,
              22,
              76,
              97,
              98,
              101,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              97,
              115,
              105,
              99,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              109,
              97,
              103,
              101,
              58,
              108,
              97,
              98,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Starts a labeling task for video. The type of video labeling task is
     * configured by feature in the request.
     */
    labelVideo: {
      name: "LabelVideo",
      requestType: LabelVideoRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              16,
              65,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              100,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              18,
              22,
              76,
              97,
              98,
              101,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              97,
              115,
              105,
              99,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              100,
              101,
              111,
              58,
              108,
              97,
              98,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Starts a labeling task for text. The type of text labeling task is
     * configured by feature in the request.
     */
    labelText: {
      name: "LabelText",
      requestType: LabelTextRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              16,
              65,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              100,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              18,
              22,
              76,
              97,
              98,
              101,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              97,
              115,
              105,
              99,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              116,
              101,
              120,
              116,
              58,
              108,
              97,
              98,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /** Gets an example by resource name, including both data and annotation. */
    getExample: {
      name: "GetExample",
      requestType: GetExampleRequest,
      requestStream: false,
      responseType: Example,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 110, 97, 109, 101, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              100,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists examples in an annotated dataset. Pagination is supported. */
    listExamples: {
      name: "ListExamples",
      requestType: ListExamplesRequest,
      requestStream: false,
      responseType: ListExamplesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              101,
              100,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates an annotation spec set by providing a set of labels. */
    createAnnotationSpecSet: {
      name: "CreateAnnotationSpecSet",
      requestType: CreateAnnotationSpecSetRequest,
      requestStream: false,
      responseType: AnnotationSpecSet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              105,
              111,
              110,
              95,
              115,
              112,
              101,
              99,
              95,
              115,
              101,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              52,
              58,
              1,
              42,
              34,
              47,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              105,
              111,
              110,
              83,
              112,
              101,
              99,
              83,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets an annotation spec set by resource name. */
    getAnnotationSpecSet: {
      name: "GetAnnotationSpecSet",
      requestType: GetAnnotationSpecSetRequest,
      requestStream: false,
      responseType: AnnotationSpecSet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              105,
              111,
              110,
              83,
              112,
              101,
              99,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists annotation spec sets for a project. Pagination is supported. */
    listAnnotationSpecSets: {
      name: "ListAnnotationSpecSets",
      requestType: ListAnnotationSpecSetsRequest,
      requestStream: false,
      responseType: ListAnnotationSpecSetsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              105,
              111,
              110,
              83,
              112,
              101,
              99,
              83,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an annotation spec set by resource name. */
    deleteAnnotationSpecSet: {
      name: "DeleteAnnotationSpecSet",
      requestType: DeleteAnnotationSpecSetRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              105,
              111,
              110,
              83,
              112,
              101,
              99,
              83,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates an instruction for how data should be labeled. */
    createInstruction: {
      name: "CreateInstruction",
      requestType: CreateInstructionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              40,
              10,
              11,
              73,
              110,
              115,
              116,
              114,
              117,
              99,
              116,
              105,
              111,
              110,
              18,
              25,
              67,
              114,
              101,
              97,
              116,
              101,
              73,
              110,
              115,
              116,
              114,
              117,
              99,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110]),
          ],
          578365826: [
            Buffer.from([
              46,
              58,
              1,
              42,
              34,
              41,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              114,
              117,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets an instruction by resource name. */
    getInstruction: {
      name: "GetInstruction",
      requestType: GetInstructionRequest,
      requestStream: false,
      responseType: Instruction,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              43,
              18,
              41,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              114,
              117,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists instructions for a project. Pagination is supported. */
    listInstructions: {
      name: "ListInstructions",
      requestType: ListInstructionsRequest,
      requestStream: false,
      responseType: ListInstructionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              43,
              18,
              41,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              116,
              114,
              117,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an instruction object by resource name. */
    deleteInstruction: {
      name: "DeleteInstruction",
      requestType: DeleteInstructionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              43,
              42,
              41,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              105,
              110,
              115,
              116,
              114,
              117,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets an evaluation by resource name (to search, use
     * [projects.evaluations.search][google.cloud.datalabeling.v1beta1.DataLabelingService.SearchEvaluations]).
     */
    getEvaluation: {
      name: "GetEvaluation",
      requestType: GetEvaluationRequest,
      requestStream: false,
      responseType: Evaluation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Searches [evaluations][google.cloud.datalabeling.v1beta1.Evaluation] within a project. */
    searchEvaluations: {
      name: "SearchEvaluations",
      requestType: SearchEvaluationsRequest,
      requestStream: false,
      responseType: SearchEvaluationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Searches example comparisons from an evaluation. The return format is a
     * list of example comparisons that show ground truth and prediction(s) for
     * a single input. Search by providing an evaluation ID.
     */
    searchExampleComparisons: {
      name: "SearchExampleComparisons",
      requestType: SearchExampleComparisonsRequest,
      requestStream: false,
      responseType: SearchExampleComparisonsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              84,
              58,
              1,
              42,
              34,
              79,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              67,
              111,
              109,
              112,
              97,
              114,
              105,
              115,
              111,
              110,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Creates an evaluation job. */
    createEvaluationJob: {
      name: "CreateEvaluationJob",
      requestType: CreateEvaluationJobRequest,
      requestStream: false,
      responseType: EvaluationJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([10, 112, 97, 114, 101, 110, 116, 44, 106, 111, 98])],
          578365826: [
            Buffer.from([
              48,
              58,
              1,
              42,
              34,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an evaluation job. You can only update certain fields of the job's
     * [EvaluationJobConfig][google.cloud.datalabeling.v1beta1.EvaluationJobConfig]: `humanAnnotationConfig.instruction`,
     * `exampleCount`, and `exampleSamplePercentage`.
     *
     * If you want to change any other aspect of the evaluation job, you must
     * delete the job and create a new one.
     */
    updateEvaluationJob: {
      name: "UpdateEvaluationJob",
      requestType: UpdateEvaluationJobRequest,
      requestStream: false,
      responseType: EvaluationJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              76,
              58,
              14,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              50,
              58,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets an evaluation job by resource name. */
    getEvaluationJob: {
      name: "GetEvaluationJob",
      requestType: GetEvaluationJobRequest,
      requestStream: false,
      responseType: EvaluationJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Pauses an evaluation job. Pausing an evaluation job that is already in a
     * `PAUSED` state is a no-op.
     */
    pauseEvaluationJob: {
      name: "PauseEvaluationJob",
      requestType: PauseEvaluationJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              112,
              97,
              117,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Resumes a paused evaluation job. A deleted evaluation job can't be resumed.
     * Resuming a running or scheduled evaluation job is a no-op.
     */
    resumeEvaluationJob: {
      name: "ResumeEvaluationJob",
      requestType: ResumeEvaluationJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              117,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /** Stops and deletes an evaluation job. */
    deleteEvaluationJob: {
      name: "DeleteEvaluationJob",
      requestType: DeleteEvaluationJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              42,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all evaluation jobs within a project with possible filters.
     * Pagination is supported.
     */
    listEvaluationJobs: {
      name: "ListEvaluationJobs",
      requestType: ListEvaluationJobsRequest,
      requestStream: false,
      responseType: ListEvaluationJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataLabelingServiceImplementation<CallContextExt = {}> {
  /** Creates dataset. If success return a Dataset resource. */
  createDataset(request: CreateDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Dataset>>;
  /** Gets dataset by resource name. */
  getDataset(request: GetDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Dataset>>;
  /** Lists datasets under a project. Pagination is supported. */
  listDatasets(
    request: ListDatasetsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDatasetsResponse>>;
  /** Deletes a dataset by resource name. */
  deleteDataset(request: DeleteDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Imports data into dataset based on source locations defined in request.
   * It can be called multiple times for the same dataset. Each dataset can
   * only have one long running operation running on it. For example, no
   * labeling task (also long running operation) can be started while
   * importing is still ongoing. Vice versa.
   */
  importData(request: ImportDataRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Exports data and annotations from dataset. */
  exportData(request: ExportDataRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Gets a data item in a dataset by resource name. This API can be
   * called after data are imported into dataset.
   */
  getDataItem(request: GetDataItemRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DataItem>>;
  /**
   * Lists data items in a dataset. This API can be called after data
   * are imported into dataset. Pagination is supported.
   */
  listDataItems(
    request: ListDataItemsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataItemsResponse>>;
  /** Gets an annotated dataset by resource name. */
  getAnnotatedDataset(
    request: GetAnnotatedDatasetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AnnotatedDataset>>;
  /** Lists annotated datasets for a dataset. Pagination is supported. */
  listAnnotatedDatasets(
    request: ListAnnotatedDatasetsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAnnotatedDatasetsResponse>>;
  /** Deletes an annotated dataset by resource name. */
  deleteAnnotatedDataset(
    request: DeleteAnnotatedDatasetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Starts a labeling task for image. The type of image labeling task is
   * configured by feature in the request.
   */
  labelImage(request: LabelImageRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Starts a labeling task for video. The type of video labeling task is
   * configured by feature in the request.
   */
  labelVideo(request: LabelVideoRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Starts a labeling task for text. The type of text labeling task is
   * configured by feature in the request.
   */
  labelText(request: LabelTextRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets an example by resource name, including both data and annotation. */
  getExample(request: GetExampleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Example>>;
  /** Lists examples in an annotated dataset. Pagination is supported. */
  listExamples(
    request: ListExamplesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExamplesResponse>>;
  /** Creates an annotation spec set by providing a set of labels. */
  createAnnotationSpecSet(
    request: CreateAnnotationSpecSetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AnnotationSpecSet>>;
  /** Gets an annotation spec set by resource name. */
  getAnnotationSpecSet(
    request: GetAnnotationSpecSetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AnnotationSpecSet>>;
  /** Lists annotation spec sets for a project. Pagination is supported. */
  listAnnotationSpecSets(
    request: ListAnnotationSpecSetsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAnnotationSpecSetsResponse>>;
  /** Deletes an annotation spec set by resource name. */
  deleteAnnotationSpecSet(
    request: DeleteAnnotationSpecSetRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Creates an instruction for how data should be labeled. */
  createInstruction(
    request: CreateInstructionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets an instruction by resource name. */
  getInstruction(
    request: GetInstructionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Instruction>>;
  /** Lists instructions for a project. Pagination is supported. */
  listInstructions(
    request: ListInstructionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListInstructionsResponse>>;
  /** Deletes an instruction object by resource name. */
  deleteInstruction(
    request: DeleteInstructionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Gets an evaluation by resource name (to search, use
   * [projects.evaluations.search][google.cloud.datalabeling.v1beta1.DataLabelingService.SearchEvaluations]).
   */
  getEvaluation(request: GetEvaluationRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Evaluation>>;
  /** Searches [evaluations][google.cloud.datalabeling.v1beta1.Evaluation] within a project. */
  searchEvaluations(
    request: SearchEvaluationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchEvaluationsResponse>>;
  /**
   * Searches example comparisons from an evaluation. The return format is a
   * list of example comparisons that show ground truth and prediction(s) for
   * a single input. Search by providing an evaluation ID.
   */
  searchExampleComparisons(
    request: SearchExampleComparisonsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchExampleComparisonsResponse>>;
  /** Creates an evaluation job. */
  createEvaluationJob(
    request: CreateEvaluationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EvaluationJob>>;
  /**
   * Updates an evaluation job. You can only update certain fields of the job's
   * [EvaluationJobConfig][google.cloud.datalabeling.v1beta1.EvaluationJobConfig]: `humanAnnotationConfig.instruction`,
   * `exampleCount`, and `exampleSamplePercentage`.
   *
   * If you want to change any other aspect of the evaluation job, you must
   * delete the job and create a new one.
   */
  updateEvaluationJob(
    request: UpdateEvaluationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EvaluationJob>>;
  /** Gets an evaluation job by resource name. */
  getEvaluationJob(
    request: GetEvaluationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EvaluationJob>>;
  /**
   * Pauses an evaluation job. Pausing an evaluation job that is already in a
   * `PAUSED` state is a no-op.
   */
  pauseEvaluationJob(
    request: PauseEvaluationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Resumes a paused evaluation job. A deleted evaluation job can't be resumed.
   * Resuming a running or scheduled evaluation job is a no-op.
   */
  resumeEvaluationJob(
    request: ResumeEvaluationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Stops and deletes an evaluation job. */
  deleteEvaluationJob(
    request: DeleteEvaluationJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Lists all evaluation jobs within a project with possible filters.
   * Pagination is supported.
   */
  listEvaluationJobs(
    request: ListEvaluationJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEvaluationJobsResponse>>;
}

export interface DataLabelingServiceClient<CallOptionsExt = {}> {
  /** Creates dataset. If success return a Dataset resource. */
  createDataset(request: DeepPartial<CreateDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Dataset>;
  /** Gets dataset by resource name. */
  getDataset(request: DeepPartial<GetDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Dataset>;
  /** Lists datasets under a project. Pagination is supported. */
  listDatasets(
    request: DeepPartial<ListDatasetsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDatasetsResponse>;
  /** Deletes a dataset by resource name. */
  deleteDataset(request: DeepPartial<DeleteDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Imports data into dataset based on source locations defined in request.
   * It can be called multiple times for the same dataset. Each dataset can
   * only have one long running operation running on it. For example, no
   * labeling task (also long running operation) can be started while
   * importing is still ongoing. Vice versa.
   */
  importData(request: DeepPartial<ImportDataRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Exports data and annotations from dataset. */
  exportData(request: DeepPartial<ExportDataRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Gets a data item in a dataset by resource name. This API can be
   * called after data are imported into dataset.
   */
  getDataItem(request: DeepPartial<GetDataItemRequest>, options?: CallOptions & CallOptionsExt): Promise<DataItem>;
  /**
   * Lists data items in a dataset. This API can be called after data
   * are imported into dataset. Pagination is supported.
   */
  listDataItems(
    request: DeepPartial<ListDataItemsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataItemsResponse>;
  /** Gets an annotated dataset by resource name. */
  getAnnotatedDataset(
    request: DeepPartial<GetAnnotatedDatasetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AnnotatedDataset>;
  /** Lists annotated datasets for a dataset. Pagination is supported. */
  listAnnotatedDatasets(
    request: DeepPartial<ListAnnotatedDatasetsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAnnotatedDatasetsResponse>;
  /** Deletes an annotated dataset by resource name. */
  deleteAnnotatedDataset(
    request: DeepPartial<DeleteAnnotatedDatasetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Starts a labeling task for image. The type of image labeling task is
   * configured by feature in the request.
   */
  labelImage(request: DeepPartial<LabelImageRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Starts a labeling task for video. The type of video labeling task is
   * configured by feature in the request.
   */
  labelVideo(request: DeepPartial<LabelVideoRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Starts a labeling task for text. The type of text labeling task is
   * configured by feature in the request.
   */
  labelText(request: DeepPartial<LabelTextRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets an example by resource name, including both data and annotation. */
  getExample(request: DeepPartial<GetExampleRequest>, options?: CallOptions & CallOptionsExt): Promise<Example>;
  /** Lists examples in an annotated dataset. Pagination is supported. */
  listExamples(
    request: DeepPartial<ListExamplesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExamplesResponse>;
  /** Creates an annotation spec set by providing a set of labels. */
  createAnnotationSpecSet(
    request: DeepPartial<CreateAnnotationSpecSetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AnnotationSpecSet>;
  /** Gets an annotation spec set by resource name. */
  getAnnotationSpecSet(
    request: DeepPartial<GetAnnotationSpecSetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AnnotationSpecSet>;
  /** Lists annotation spec sets for a project. Pagination is supported. */
  listAnnotationSpecSets(
    request: DeepPartial<ListAnnotationSpecSetsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAnnotationSpecSetsResponse>;
  /** Deletes an annotation spec set by resource name. */
  deleteAnnotationSpecSet(
    request: DeepPartial<DeleteAnnotationSpecSetRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Creates an instruction for how data should be labeled. */
  createInstruction(
    request: DeepPartial<CreateInstructionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets an instruction by resource name. */
  getInstruction(
    request: DeepPartial<GetInstructionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Instruction>;
  /** Lists instructions for a project. Pagination is supported. */
  listInstructions(
    request: DeepPartial<ListInstructionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListInstructionsResponse>;
  /** Deletes an instruction object by resource name. */
  deleteInstruction(
    request: DeepPartial<DeleteInstructionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Gets an evaluation by resource name (to search, use
   * [projects.evaluations.search][google.cloud.datalabeling.v1beta1.DataLabelingService.SearchEvaluations]).
   */
  getEvaluation(
    request: DeepPartial<GetEvaluationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Evaluation>;
  /** Searches [evaluations][google.cloud.datalabeling.v1beta1.Evaluation] within a project. */
  searchEvaluations(
    request: DeepPartial<SearchEvaluationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchEvaluationsResponse>;
  /**
   * Searches example comparisons from an evaluation. The return format is a
   * list of example comparisons that show ground truth and prediction(s) for
   * a single input. Search by providing an evaluation ID.
   */
  searchExampleComparisons(
    request: DeepPartial<SearchExampleComparisonsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchExampleComparisonsResponse>;
  /** Creates an evaluation job. */
  createEvaluationJob(
    request: DeepPartial<CreateEvaluationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EvaluationJob>;
  /**
   * Updates an evaluation job. You can only update certain fields of the job's
   * [EvaluationJobConfig][google.cloud.datalabeling.v1beta1.EvaluationJobConfig]: `humanAnnotationConfig.instruction`,
   * `exampleCount`, and `exampleSamplePercentage`.
   *
   * If you want to change any other aspect of the evaluation job, you must
   * delete the job and create a new one.
   */
  updateEvaluationJob(
    request: DeepPartial<UpdateEvaluationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EvaluationJob>;
  /** Gets an evaluation job by resource name. */
  getEvaluationJob(
    request: DeepPartial<GetEvaluationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EvaluationJob>;
  /**
   * Pauses an evaluation job. Pausing an evaluation job that is already in a
   * `PAUSED` state is a no-op.
   */
  pauseEvaluationJob(
    request: DeepPartial<PauseEvaluationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Resumes a paused evaluation job. A deleted evaluation job can't be resumed.
   * Resuming a running or scheduled evaluation job is a no-op.
   */
  resumeEvaluationJob(
    request: DeepPartial<ResumeEvaluationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Stops and deletes an evaluation job. */
  deleteEvaluationJob(
    request: DeepPartial<DeleteEvaluationJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Lists all evaluation jobs within a project with possible filters.
   * Pagination is supported.
   */
  listEvaluationJobs(
    request: DeepPartial<ListEvaluationJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEvaluationJobsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
