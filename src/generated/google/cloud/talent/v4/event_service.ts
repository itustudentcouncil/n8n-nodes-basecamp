// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/talent/v4/event_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { ClientEvent } from "./event.js";

export const protobufPackage = "google.cloud.talent.v4";

/** The report event request. */
export interface CreateClientEventRequest {
  /**
   * Required. Resource name of the tenant under which the event is created.
   *
   * The format is "projects/{project_id}/tenants/{tenant_id}", for example,
   * "projects/foo/tenants/bar".
   */
  parent: string;
  /**
   * Required. Events issued when end user interacts with customer's application
   * that uses Cloud Talent Solution.
   */
  clientEvent: ClientEvent | undefined;
}

function createBaseCreateClientEventRequest(): CreateClientEventRequest {
  return { parent: "", clientEvent: undefined };
}

export const CreateClientEventRequest: MessageFns<CreateClientEventRequest> = {
  encode(message: CreateClientEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.clientEvent !== undefined) {
      ClientEvent.encode(message.clientEvent, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClientEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClientEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientEvent = ClientEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateClientEventRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      clientEvent: isSet(object.clientEvent) ? ClientEvent.fromJSON(object.clientEvent) : undefined,
    };
  },

  toJSON(message: CreateClientEventRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.clientEvent !== undefined) {
      obj.clientEvent = ClientEvent.toJSON(message.clientEvent);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateClientEventRequest>): CreateClientEventRequest {
    return CreateClientEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateClientEventRequest>): CreateClientEventRequest {
    const message = createBaseCreateClientEventRequest();
    message.parent = object.parent ?? "";
    message.clientEvent = (object.clientEvent !== undefined && object.clientEvent !== null)
      ? ClientEvent.fromPartial(object.clientEvent)
      : undefined;
    return message;
  },
};

/** A service handles client event report. */
export type EventServiceDefinition = typeof EventServiceDefinition;
export const EventServiceDefinition = {
  name: "EventService",
  fullName: "google.cloud.talent.v4.EventService",
  methods: {
    /**
     * Report events issued when end user interacts with customer's application
     * that uses Cloud Talent Solution. You may inspect the created events in
     * [self service
     * tools](https://console.cloud.google.com/talent-solution/overview).
     * [Learn
     * more](https://cloud.google.com/talent-solution/docs/management-tools)
     * about self service tools.
     */
    createClientEvent: {
      name: "CreateClientEvent",
      requestType: CreateClientEventRequest,
      requestStream: false,
      responseType: ClientEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              101,
              118,
              101,
              110,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              12,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              101,
              118,
              101,
              110,
              116,
              34,
              46,
              47,
              118,
              52,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              108,
              105,
              101,
              110,
              116,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EventServiceImplementation<CallContextExt = {}> {
  /**
   * Report events issued when end user interacts with customer's application
   * that uses Cloud Talent Solution. You may inspect the created events in
   * [self service
   * tools](https://console.cloud.google.com/talent-solution/overview).
   * [Learn
   * more](https://cloud.google.com/talent-solution/docs/management-tools)
   * about self service tools.
   */
  createClientEvent(
    request: CreateClientEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ClientEvent>>;
}

export interface EventServiceClient<CallOptionsExt = {}> {
  /**
   * Report events issued when end user interacts with customer's application
   * that uses Cloud Talent Solution. You may inspect the created events in
   * [self service
   * tools](https://console.cloud.google.com/talent-solution/overview).
   * [Learn
   * more](https://cloud.google.com/talent-solution/docs/management-tools)
   * about self service tools.
   */
  createClientEvent(
    request: DeepPartial<CreateClientEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ClientEvent>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
