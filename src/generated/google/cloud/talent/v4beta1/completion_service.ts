// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/talent/v4beta1/completion_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { ResponseMetadata } from "./common.js";

export const protobufPackage = "google.cloud.talent.v4beta1";

/** Auto-complete parameters. */
export interface CompleteQueryRequest {
  /**
   * Required. Resource name of tenant the completion is performed within.
   *
   * The format is "projects/{project_id}/tenants/{tenant_id}", for example,
   * "projects/foo/tenant/bar".
   *
   * If tenant id is unspecified, the default tenant is used, for
   * example, "projects/foo".
   */
  parent: string;
  /**
   * Required. The query used to generate suggestions.
   *
   * The maximum number of allowed characters is 255.
   */
  query: string;
  /**
   * The list of languages of the query. This is
   * the BCP-47 language code, such as "en-US" or "sr-Latn".
   * For more information, see
   * [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
   *
   * The maximum number of allowed characters is 255.
   */
  languageCodes: string[];
  /**
   * Required. Completion result count.
   *
   * The maximum allowed page size is 10.
   */
  pageSize: number;
  /**
   * If provided, restricts completion to specified company.
   *
   * The format is
   * "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
   * example, "projects/foo/tenants/bar/companies/baz".
   *
   * If tenant id is unspecified, the default tenant is used, for
   * example, "projects/foo".
   */
  company: string;
  /**
   * The scope of the completion. The defaults is
   * [CompletionScope.PUBLIC][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionScope.PUBLIC].
   */
  scope: CompleteQueryRequest_CompletionScope;
  /**
   * The completion topic. The default is
   * [CompletionType.COMBINED][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionType.COMBINED].
   */
  type: CompleteQueryRequest_CompletionType;
}

/** Enum to specify the scope of completion. */
export enum CompleteQueryRequest_CompletionScope {
  /** COMPLETION_SCOPE_UNSPECIFIED - Default value. */
  COMPLETION_SCOPE_UNSPECIFIED = 0,
  /** TENANT - Suggestions are based only on the data provided by the client. */
  TENANT = 1,
  /**
   * PUBLIC - Suggestions are based on all jobs data in the system that's visible to
   * the client
   */
  PUBLIC = 2,
  UNRECOGNIZED = -1,
}

export function completeQueryRequest_CompletionScopeFromJSON(object: any): CompleteQueryRequest_CompletionScope {
  switch (object) {
    case 0:
    case "COMPLETION_SCOPE_UNSPECIFIED":
      return CompleteQueryRequest_CompletionScope.COMPLETION_SCOPE_UNSPECIFIED;
    case 1:
    case "TENANT":
      return CompleteQueryRequest_CompletionScope.TENANT;
    case 2:
    case "PUBLIC":
      return CompleteQueryRequest_CompletionScope.PUBLIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CompleteQueryRequest_CompletionScope.UNRECOGNIZED;
  }
}

export function completeQueryRequest_CompletionScopeToJSON(object: CompleteQueryRequest_CompletionScope): string {
  switch (object) {
    case CompleteQueryRequest_CompletionScope.COMPLETION_SCOPE_UNSPECIFIED:
      return "COMPLETION_SCOPE_UNSPECIFIED";
    case CompleteQueryRequest_CompletionScope.TENANT:
      return "TENANT";
    case CompleteQueryRequest_CompletionScope.PUBLIC:
      return "PUBLIC";
    case CompleteQueryRequest_CompletionScope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Enum to specify auto-completion topics. */
export enum CompleteQueryRequest_CompletionType {
  /** COMPLETION_TYPE_UNSPECIFIED - Default value. */
  COMPLETION_TYPE_UNSPECIFIED = 0,
  /**
   * JOB_TITLE - Suggest job titles for jobs autocomplete.
   *
   * For
   * [CompletionType.JOB_TITLE][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionType.JOB_TITLE]
   * type, only open jobs with the same
   * [language_codes][google.cloud.talent.v4beta1.CompleteQueryRequest.language_codes]
   * are returned.
   */
  JOB_TITLE = 1,
  /**
   * COMPANY_NAME - Suggest company names for jobs autocomplete.
   *
   * For
   * [CompletionType.COMPANY_NAME][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionType.COMPANY_NAME]
   * type, only companies having open jobs with the same
   * [language_codes][google.cloud.talent.v4beta1.CompleteQueryRequest.language_codes]
   * are returned.
   */
  COMPANY_NAME = 2,
  /**
   * COMBINED - Suggest both job titles and company names for jobs autocomplete.
   *
   * For
   * [CompletionType.COMBINED][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionType.COMBINED]
   * type, only open jobs with the same
   * [language_codes][google.cloud.talent.v4beta1.CompleteQueryRequest.language_codes]
   * or companies having open jobs with the same
   * [language_codes][google.cloud.talent.v4beta1.CompleteQueryRequest.language_codes]
   * are returned.
   */
  COMBINED = 3,
  UNRECOGNIZED = -1,
}

export function completeQueryRequest_CompletionTypeFromJSON(object: any): CompleteQueryRequest_CompletionType {
  switch (object) {
    case 0:
    case "COMPLETION_TYPE_UNSPECIFIED":
      return CompleteQueryRequest_CompletionType.COMPLETION_TYPE_UNSPECIFIED;
    case 1:
    case "JOB_TITLE":
      return CompleteQueryRequest_CompletionType.JOB_TITLE;
    case 2:
    case "COMPANY_NAME":
      return CompleteQueryRequest_CompletionType.COMPANY_NAME;
    case 3:
    case "COMBINED":
      return CompleteQueryRequest_CompletionType.COMBINED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CompleteQueryRequest_CompletionType.UNRECOGNIZED;
  }
}

export function completeQueryRequest_CompletionTypeToJSON(object: CompleteQueryRequest_CompletionType): string {
  switch (object) {
    case CompleteQueryRequest_CompletionType.COMPLETION_TYPE_UNSPECIFIED:
      return "COMPLETION_TYPE_UNSPECIFIED";
    case CompleteQueryRequest_CompletionType.JOB_TITLE:
      return "JOB_TITLE";
    case CompleteQueryRequest_CompletionType.COMPANY_NAME:
      return "COMPANY_NAME";
    case CompleteQueryRequest_CompletionType.COMBINED:
      return "COMBINED";
    case CompleteQueryRequest_CompletionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Response of auto-complete query. */
export interface CompleteQueryResponse {
  /** Results of the matching job/company candidates. */
  completionResults: CompleteQueryResponse_CompletionResult[];
  /**
   * Additional information for the API invocation, such as the request
   * tracking id.
   */
  metadata: ResponseMetadata | undefined;
}

/** Resource that represents completion results. */
export interface CompleteQueryResponse_CompletionResult {
  /** The suggestion for the query. */
  suggestion: string;
  /** The completion topic. */
  type: CompleteQueryRequest_CompletionType;
  /**
   * The URI of the company image for
   * [COMPANY_NAME][google.cloud.talent.v4beta1.CompleteQueryRequest.CompletionType.COMPANY_NAME].
   */
  imageUri: string;
}

function createBaseCompleteQueryRequest(): CompleteQueryRequest {
  return { parent: "", query: "", languageCodes: [], pageSize: 0, company: "", scope: 0, type: 0 };
}

export const CompleteQueryRequest: MessageFns<CompleteQueryRequest> = {
  encode(message: CompleteQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    for (const v of message.languageCodes) {
      writer.uint32(26).string(v!);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.company !== "") {
      writer.uint32(42).string(message.company);
    }
    if (message.scope !== 0) {
      writer.uint32(48).int32(message.scope);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCodes.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.company = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.scope = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteQueryRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      languageCodes: globalThis.Array.isArray(object?.languageCodes)
        ? object.languageCodes.map((e: any) => globalThis.String(e))
        : [],
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      company: isSet(object.company) ? globalThis.String(object.company) : "",
      scope: isSet(object.scope) ? completeQueryRequest_CompletionScopeFromJSON(object.scope) : 0,
      type: isSet(object.type) ? completeQueryRequest_CompletionTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: CompleteQueryRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.languageCodes?.length) {
      obj.languageCodes = message.languageCodes;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.company !== "") {
      obj.company = message.company;
    }
    if (message.scope !== 0) {
      obj.scope = completeQueryRequest_CompletionScopeToJSON(message.scope);
    }
    if (message.type !== 0) {
      obj.type = completeQueryRequest_CompletionTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<CompleteQueryRequest>): CompleteQueryRequest {
    return CompleteQueryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompleteQueryRequest>): CompleteQueryRequest {
    const message = createBaseCompleteQueryRequest();
    message.parent = object.parent ?? "";
    message.query = object.query ?? "";
    message.languageCodes = object.languageCodes?.map((e) => e) || [];
    message.pageSize = object.pageSize ?? 0;
    message.company = object.company ?? "";
    message.scope = object.scope ?? 0;
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseCompleteQueryResponse(): CompleteQueryResponse {
  return { completionResults: [], metadata: undefined };
}

export const CompleteQueryResponse: MessageFns<CompleteQueryResponse> = {
  encode(message: CompleteQueryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.completionResults) {
      CompleteQueryResponse_CompletionResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.metadata !== undefined) {
      ResponseMetadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteQueryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.completionResults.push(CompleteQueryResponse_CompletionResult.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata = ResponseMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteQueryResponse {
    return {
      completionResults: globalThis.Array.isArray(object?.completionResults)
        ? object.completionResults.map((e: any) => CompleteQueryResponse_CompletionResult.fromJSON(e))
        : [],
      metadata: isSet(object.metadata) ? ResponseMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: CompleteQueryResponse): unknown {
    const obj: any = {};
    if (message.completionResults?.length) {
      obj.completionResults = message.completionResults.map((e) => CompleteQueryResponse_CompletionResult.toJSON(e));
    }
    if (message.metadata !== undefined) {
      obj.metadata = ResponseMetadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CompleteQueryResponse>): CompleteQueryResponse {
    return CompleteQueryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompleteQueryResponse>): CompleteQueryResponse {
    const message = createBaseCompleteQueryResponse();
    message.completionResults =
      object.completionResults?.map((e) => CompleteQueryResponse_CompletionResult.fromPartial(e)) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ResponseMetadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseCompleteQueryResponse_CompletionResult(): CompleteQueryResponse_CompletionResult {
  return { suggestion: "", type: 0, imageUri: "" };
}

export const CompleteQueryResponse_CompletionResult: MessageFns<CompleteQueryResponse_CompletionResult> = {
  encode(message: CompleteQueryResponse_CompletionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.suggestion !== "") {
      writer.uint32(10).string(message.suggestion);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.imageUri !== "") {
      writer.uint32(26).string(message.imageUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteQueryResponse_CompletionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteQueryResponse_CompletionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.suggestion = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.imageUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteQueryResponse_CompletionResult {
    return {
      suggestion: isSet(object.suggestion) ? globalThis.String(object.suggestion) : "",
      type: isSet(object.type) ? completeQueryRequest_CompletionTypeFromJSON(object.type) : 0,
      imageUri: isSet(object.imageUri) ? globalThis.String(object.imageUri) : "",
    };
  },

  toJSON(message: CompleteQueryResponse_CompletionResult): unknown {
    const obj: any = {};
    if (message.suggestion !== "") {
      obj.suggestion = message.suggestion;
    }
    if (message.type !== 0) {
      obj.type = completeQueryRequest_CompletionTypeToJSON(message.type);
    }
    if (message.imageUri !== "") {
      obj.imageUri = message.imageUri;
    }
    return obj;
  },

  create(base?: DeepPartial<CompleteQueryResponse_CompletionResult>): CompleteQueryResponse_CompletionResult {
    return CompleteQueryResponse_CompletionResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompleteQueryResponse_CompletionResult>): CompleteQueryResponse_CompletionResult {
    const message = createBaseCompleteQueryResponse_CompletionResult();
    message.suggestion = object.suggestion ?? "";
    message.type = object.type ?? 0;
    message.imageUri = object.imageUri ?? "";
    return message;
  },
};

/** A service handles auto completion. */
export type CompletionDefinition = typeof CompletionDefinition;
export const CompletionDefinition = {
  name: "Completion",
  fullName: "google.cloud.talent.v4beta1.Completion",
  methods: {
    /**
     * Completes the specified prefix with keyword suggestions.
     * Intended for use by a job search auto-complete search box.
     */
    completeQuery: {
      name: "CompleteQuery",
      requestType: CompleteQueryRequest,
      requestStream: false,
      responseType: CompleteQueryResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              90,
              90,
              39,
              18,
              37,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              18,
              47,
              47,
              118,
              52,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              97,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface CompletionServiceImplementation<CallContextExt = {}> {
  /**
   * Completes the specified prefix with keyword suggestions.
   * Intended for use by a job search auto-complete search box.
   */
  completeQuery(
    request: CompleteQueryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CompleteQueryResponse>>;
}

export interface CompletionClient<CallOptionsExt = {}> {
  /**
   * Completes the specified prefix with keyword suggestions.
   * Intended for use by a job search auto-complete search box.
   */
  completeQuery(
    request: DeepPartial<CompleteQueryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CompleteQueryResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
