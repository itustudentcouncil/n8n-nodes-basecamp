// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/talent/v4beta1/company.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { CompanySize, companySizeFromJSON, companySizeToJSON, Location } from "./common.js";

export const protobufPackage = "google.cloud.talent.v4beta1";

/**
 * A Company resource represents a company in the service. A company is the
 * entity that owns job postings, that is, the hiring entity responsible for
 * employing applicants for the job position.
 */
export interface Company {
  /**
   * Required during company update.
   *
   * The resource name for a company. This is generated by the service when a
   * company is created.
   *
   * The format is
   * "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
   * example, "projects/foo/tenants/bar/companies/baz".
   *
   * If tenant id is unspecified, the default tenant is used. For
   * example, "projects/foo/companies/bar".
   */
  name: string;
  /** Required. The display name of the company, for example, "Google LLC". */
  displayName: string;
  /**
   * Required. Client side company identifier, used to uniquely identify the
   * company.
   *
   * The maximum number of allowed characters is 255.
   */
  externalId: string;
  /** The employer's company size. */
  size: CompanySize;
  /**
   * The street address of the company's main headquarters, which may be
   * different from the job location. The service attempts
   * to geolocate the provided address, and populates a more specific
   * location wherever possible in
   * [DerivedInfo.headquarters_location][google.cloud.talent.v4beta1.Company.DerivedInfo.headquarters_location].
   */
  headquartersAddress: string;
  /**
   * Set to true if it is the hiring agency that post jobs for other
   * employers.
   *
   * Defaults to false if not provided.
   */
  hiringAgency: boolean;
  /**
   * Equal Employment Opportunity legal disclaimer text to be
   * associated with all jobs, and typically to be displayed in all
   * roles.
   *
   * The maximum number of allowed characters is 500.
   */
  eeoText: string;
  /**
   * The URI representing the company's primary web site or home page,
   * for example, "https://www.google.com".
   *
   * The maximum number of allowed characters is 255.
   */
  websiteUri: string;
  /**
   * The URI to employer's career site or careers page on the employer's web
   * site, for example, "https://careers.google.com".
   */
  careerSiteUri: string;
  /** A URI that hosts the employer's company logo. */
  imageUri: string;
  /**
   * This field is deprecated. Please set the searchability of the custom
   * attribute in the
   * [Job.custom_attributes][google.cloud.talent.v4beta1.Job.custom_attributes]
   * going forward.
   *
   * A list of keys of filterable
   * [Job.custom_attributes][google.cloud.talent.v4beta1.Job.custom_attributes],
   * whose corresponding `string_values` are used in keyword searches. Jobs with
   * `string_values` under these specified field keys are returned if any
   * of the values match the search keyword. Custom field values with
   * parenthesis, brackets and special symbols are not searchable as-is,
   * and those keyword queries must be surrounded by quotes.
   *
   * @deprecated
   */
  keywordSearchableJobCustomAttributes: string[];
  /** Output only. Derived details about the company. */
  derivedInfo:
    | Company_DerivedInfo
    | undefined;
  /**
   * Output only. Indicates whether a company is flagged to be suspended from
   * public availability by the service when job content appears suspicious,
   * abusive, or spammy.
   */
  suspended: boolean;
}

/** Derived details about the company. */
export interface Company_DerivedInfo {
  /**
   * A structured headquarters location of the company, resolved from
   * [Company.headquarters_address][google.cloud.talent.v4beta1.Company.headquarters_address]
   * if provided.
   */
  headquartersLocation: Location | undefined;
}

function createBaseCompany(): Company {
  return {
    name: "",
    displayName: "",
    externalId: "",
    size: 0,
    headquartersAddress: "",
    hiringAgency: false,
    eeoText: "",
    websiteUri: "",
    careerSiteUri: "",
    imageUri: "",
    keywordSearchableJobCustomAttributes: [],
    derivedInfo: undefined,
    suspended: false,
  };
}

export const Company: MessageFns<Company> = {
  encode(message: Company, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.externalId !== "") {
      writer.uint32(26).string(message.externalId);
    }
    if (message.size !== 0) {
      writer.uint32(32).int32(message.size);
    }
    if (message.headquartersAddress !== "") {
      writer.uint32(42).string(message.headquartersAddress);
    }
    if (message.hiringAgency !== false) {
      writer.uint32(48).bool(message.hiringAgency);
    }
    if (message.eeoText !== "") {
      writer.uint32(58).string(message.eeoText);
    }
    if (message.websiteUri !== "") {
      writer.uint32(66).string(message.websiteUri);
    }
    if (message.careerSiteUri !== "") {
      writer.uint32(74).string(message.careerSiteUri);
    }
    if (message.imageUri !== "") {
      writer.uint32(82).string(message.imageUri);
    }
    for (const v of message.keywordSearchableJobCustomAttributes) {
      writer.uint32(90).string(v!);
    }
    if (message.derivedInfo !== undefined) {
      Company_DerivedInfo.encode(message.derivedInfo, writer.uint32(98).fork()).join();
    }
    if (message.suspended !== false) {
      writer.uint32(104).bool(message.suspended);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Company {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompany();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.externalId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.size = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headquartersAddress = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.hiringAgency = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.eeoText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.websiteUri = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.careerSiteUri = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.imageUri = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.keywordSearchableJobCustomAttributes.push(reader.string());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.derivedInfo = Company_DerivedInfo.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.suspended = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Company {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : "",
      size: isSet(object.size) ? companySizeFromJSON(object.size) : 0,
      headquartersAddress: isSet(object.headquartersAddress) ? globalThis.String(object.headquartersAddress) : "",
      hiringAgency: isSet(object.hiringAgency) ? globalThis.Boolean(object.hiringAgency) : false,
      eeoText: isSet(object.eeoText) ? globalThis.String(object.eeoText) : "",
      websiteUri: isSet(object.websiteUri) ? globalThis.String(object.websiteUri) : "",
      careerSiteUri: isSet(object.careerSiteUri) ? globalThis.String(object.careerSiteUri) : "",
      imageUri: isSet(object.imageUri) ? globalThis.String(object.imageUri) : "",
      keywordSearchableJobCustomAttributes: globalThis.Array.isArray(object?.keywordSearchableJobCustomAttributes)
        ? object.keywordSearchableJobCustomAttributes.map((e: any) => globalThis.String(e))
        : [],
      derivedInfo: isSet(object.derivedInfo) ? Company_DerivedInfo.fromJSON(object.derivedInfo) : undefined,
      suspended: isSet(object.suspended) ? globalThis.Boolean(object.suspended) : false,
    };
  },

  toJSON(message: Company): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.externalId !== "") {
      obj.externalId = message.externalId;
    }
    if (message.size !== 0) {
      obj.size = companySizeToJSON(message.size);
    }
    if (message.headquartersAddress !== "") {
      obj.headquartersAddress = message.headquartersAddress;
    }
    if (message.hiringAgency !== false) {
      obj.hiringAgency = message.hiringAgency;
    }
    if (message.eeoText !== "") {
      obj.eeoText = message.eeoText;
    }
    if (message.websiteUri !== "") {
      obj.websiteUri = message.websiteUri;
    }
    if (message.careerSiteUri !== "") {
      obj.careerSiteUri = message.careerSiteUri;
    }
    if (message.imageUri !== "") {
      obj.imageUri = message.imageUri;
    }
    if (message.keywordSearchableJobCustomAttributes?.length) {
      obj.keywordSearchableJobCustomAttributes = message.keywordSearchableJobCustomAttributes;
    }
    if (message.derivedInfo !== undefined) {
      obj.derivedInfo = Company_DerivedInfo.toJSON(message.derivedInfo);
    }
    if (message.suspended !== false) {
      obj.suspended = message.suspended;
    }
    return obj;
  },

  create(base?: DeepPartial<Company>): Company {
    return Company.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Company>): Company {
    const message = createBaseCompany();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.externalId = object.externalId ?? "";
    message.size = object.size ?? 0;
    message.headquartersAddress = object.headquartersAddress ?? "";
    message.hiringAgency = object.hiringAgency ?? false;
    message.eeoText = object.eeoText ?? "";
    message.websiteUri = object.websiteUri ?? "";
    message.careerSiteUri = object.careerSiteUri ?? "";
    message.imageUri = object.imageUri ?? "";
    message.keywordSearchableJobCustomAttributes = object.keywordSearchableJobCustomAttributes?.map((e) => e) || [];
    message.derivedInfo = (object.derivedInfo !== undefined && object.derivedInfo !== null)
      ? Company_DerivedInfo.fromPartial(object.derivedInfo)
      : undefined;
    message.suspended = object.suspended ?? false;
    return message;
  },
};

function createBaseCompany_DerivedInfo(): Company_DerivedInfo {
  return { headquartersLocation: undefined };
}

export const Company_DerivedInfo: MessageFns<Company_DerivedInfo> = {
  encode(message: Company_DerivedInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headquartersLocation !== undefined) {
      Location.encode(message.headquartersLocation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Company_DerivedInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompany_DerivedInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headquartersLocation = Location.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Company_DerivedInfo {
    return {
      headquartersLocation: isSet(object.headquartersLocation)
        ? Location.fromJSON(object.headquartersLocation)
        : undefined,
    };
  },

  toJSON(message: Company_DerivedInfo): unknown {
    const obj: any = {};
    if (message.headquartersLocation !== undefined) {
      obj.headquartersLocation = Location.toJSON(message.headquartersLocation);
    }
    return obj;
  },

  create(base?: DeepPartial<Company_DerivedInfo>): Company_DerivedInfo {
    return Company_DerivedInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Company_DerivedInfo>): Company_DerivedInfo {
    const message = createBaseCompany_DerivedInfo();
    message.headquartersLocation = (object.headquartersLocation !== undefined && object.headquartersLocation !== null)
      ? Location.fromPartial(object.headquartersLocation)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
