// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/binaryauthorization/v1beta1/continuous_validation_logging.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.binaryauthorization.v1beta1";

/** Represents an auditing event from Continuous Validation. */
export interface ContinuousValidationEvent {
  /** Pod event. */
  podEvent?:
    | ContinuousValidationEvent_ContinuousValidationPodEvent
    | undefined;
  /** Config error event. */
  configErrorEvent?: ContinuousValidationEvent_ConfigErrorEvent | undefined;
}

/** An auditing event for one Pod. */
export interface ContinuousValidationEvent_ContinuousValidationPodEvent {
  /** The k8s namespace of the Pod. */
  podNamespace: string;
  /** The name of the Pod. */
  pod: string;
  /** The name of the policy. */
  policyName: string;
  /** Deploy time of the Pod from k8s. */
  deployTime:
    | Date
    | undefined;
  /** Termination time of the Pod from k8s, or nothing if still running. */
  endTime:
    | Date
    | undefined;
  /** Auditing verdict for this Pod. */
  verdict: ContinuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdict;
  /** List of images with auditing details. */
  images: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails[];
}

/** Audit time policy conformance verdict. */
export enum ContinuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdict {
  /** POLICY_CONFORMANCE_VERDICT_UNSPECIFIED - We should always have a verdict. This is an error. */
  POLICY_CONFORMANCE_VERDICT_UNSPECIFIED = 0,
  /** VIOLATES_POLICY - The pod violates the policy. */
  VIOLATES_POLICY = 1,
  UNRECOGNIZED = -1,
}

export function continuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdictFromJSON(
  object: any,
): ContinuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdict {
  switch (object) {
    case 0:
    case "POLICY_CONFORMANCE_VERDICT_UNSPECIFIED":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdict
        .POLICY_CONFORMANCE_VERDICT_UNSPECIFIED;
    case 1:
    case "VIOLATES_POLICY":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdict.VIOLATES_POLICY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContinuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdict.UNRECOGNIZED;
  }
}

export function continuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdictToJSON(
  object: ContinuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdict,
): string {
  switch (object) {
    case ContinuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdict
      .POLICY_CONFORMANCE_VERDICT_UNSPECIFIED:
      return "POLICY_CONFORMANCE_VERDICT_UNSPECIFIED";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdict.VIOLATES_POLICY:
      return "VIOLATES_POLICY";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdict.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Container image with auditing details. */
export interface ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails {
  /** The name of the image. */
  image: string;
  /** The name of the container. */
  containerName: string;
  /** The container type that this image belongs to. */
  containerType: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType;
  /** The result of the audit for this image. */
  result: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult;
  /** Description of the above result. */
  description: string;
  /** List of check results. */
  checkResults: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult[];
}

/** The container type. */
export enum ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType {
  /** CONTAINER_TYPE_UNSPECIFIED - The container type should always be specified. This is an error. */
  CONTAINER_TYPE_UNSPECIFIED = 0,
  /** CONTAINER - A regular deployment. */
  CONTAINER = 1,
  /**
   * INIT_CONTAINER - Init container defined as specified at
   * https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
   */
  INIT_CONTAINER = 2,
  /**
   * EPHEMERAL_CONTAINER - Ephemeral container defined as specified at
   * https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/
   */
  EPHEMERAL_CONTAINER = 3,
  UNRECOGNIZED = -1,
}

export function continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerTypeFromJSON(
  object: any,
): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType {
  switch (object) {
    case 0:
    case "CONTAINER_TYPE_UNSPECIFIED":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType
        .CONTAINER_TYPE_UNSPECIFIED;
    case 1:
    case "CONTAINER":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType.CONTAINER;
    case 2:
    case "INIT_CONTAINER":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType.INIT_CONTAINER;
    case 3:
    case "EPHEMERAL_CONTAINER":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType.EPHEMERAL_CONTAINER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType.UNRECOGNIZED;
  }
}

export function continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerTypeToJSON(
  object: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType,
): string {
  switch (object) {
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType.CONTAINER_TYPE_UNSPECIFIED:
      return "CONTAINER_TYPE_UNSPECIFIED";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType.CONTAINER:
      return "CONTAINER";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType.INIT_CONTAINER:
      return "INIT_CONTAINER";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType.EPHEMERAL_CONTAINER:
      return "EPHEMERAL_CONTAINER";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Result of the audit. */
export enum ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult {
  /** AUDIT_RESULT_UNSPECIFIED - Unspecified result. This is an error. */
  AUDIT_RESULT_UNSPECIFIED = 0,
  /** ALLOW - Image is allowed. */
  ALLOW = 1,
  /** DENY - Image is denied. */
  DENY = 2,
  UNRECOGNIZED = -1,
}

export function continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResultFromJSON(
  object: any,
): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult {
  switch (object) {
    case 0:
    case "AUDIT_RESULT_UNSPECIFIED":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult.AUDIT_RESULT_UNSPECIFIED;
    case 1:
    case "ALLOW":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult.ALLOW;
    case 2:
    case "DENY":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult.DENY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult.UNRECOGNIZED;
  }
}

export function continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResultToJSON(
  object: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult,
): string {
  switch (object) {
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult.AUDIT_RESULT_UNSPECIFIED:
      return "AUDIT_RESULT_UNSPECIFIED";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult.ALLOW:
      return "ALLOW";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult.DENY:
      return "DENY";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult {
  /** The index of the check set. */
  checkSetIndex: string;
  /** The name of the check set. */
  checkSetName: string;
  /** The scope of the check set. */
  checkSetScope:
    | ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope
    | undefined;
  /** The index of the check. */
  checkIndex: string;
  /** The name of the check. */
  checkName: string;
  /** The type of the check. */
  checkType: string;
  /** The verdict of this check. */
  verdict: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdict;
  /** User-friendly explanation of this check result. */
  explanation: string;
}

/** Result of evaluating one check. */
export enum ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdict {
  /** CHECK_VERDICT_UNSPECIFIED - We should always have a verdict. This is an error. */
  CHECK_VERDICT_UNSPECIFIED = 0,
  /**
   * NON_CONFORMANT - The check was successfully evaluated and the image did not satisfy
   * the check.
   */
  NON_CONFORMANT = 1,
  UNRECOGNIZED = -1,
}

export function continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdictFromJSON(
  object: any,
): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdict {
  switch (object) {
    case 0:
    case "CHECK_VERDICT_UNSPECIFIED":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdict
        .CHECK_VERDICT_UNSPECIFIED;
    case 1:
    case "NON_CONFORMANT":
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdict
        .NON_CONFORMANT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdict.UNRECOGNIZED;
  }
}

export function continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdictToJSON(
  object: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdict,
): string {
  switch (object) {
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdict
      .CHECK_VERDICT_UNSPECIFIED:
      return "CHECK_VERDICT_UNSPECIFIED";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdict.NON_CONFORMANT:
      return "NON_CONFORMANT";
    case ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdict.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A scope specifier for check sets. */
export interface ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope {
  /**
   * Matches a single Kubernetes service account, e.g.
   * 'my-namespace:my-service-account'.
   * `kubernetes_service_account` scope is always more specific than
   * `kubernetes_namespace` scope for the same namespace.
   */
  kubernetesServiceAccount?:
    | string
    | undefined;
  /**
   * Matches all Kubernetes service accounts in the provided
   * namespace, unless a more specific `kubernetes_service_account`
   * scope already matched.
   */
  kubernetesNamespace?: string | undefined;
}

/**
 * An event describing a user-actionable configuration issue that prevents CV
 * from auditing.
 */
export interface ContinuousValidationEvent_ConfigErrorEvent {
  /** A description of the issue. */
  description: string;
}

function createBaseContinuousValidationEvent(): ContinuousValidationEvent {
  return { podEvent: undefined, configErrorEvent: undefined };
}

export const ContinuousValidationEvent: MessageFns<ContinuousValidationEvent> = {
  encode(message: ContinuousValidationEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.podEvent !== undefined) {
      ContinuousValidationEvent_ContinuousValidationPodEvent.encode(message.podEvent, writer.uint32(10).fork()).join();
    }
    if (message.configErrorEvent !== undefined) {
      ContinuousValidationEvent_ConfigErrorEvent.encode(message.configErrorEvent, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContinuousValidationEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContinuousValidationEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.podEvent = ContinuousValidationEvent_ContinuousValidationPodEvent.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.configErrorEvent = ContinuousValidationEvent_ConfigErrorEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContinuousValidationEvent {
    return {
      podEvent: isSet(object.podEvent)
        ? ContinuousValidationEvent_ContinuousValidationPodEvent.fromJSON(object.podEvent)
        : undefined,
      configErrorEvent: isSet(object.configErrorEvent)
        ? ContinuousValidationEvent_ConfigErrorEvent.fromJSON(object.configErrorEvent)
        : undefined,
    };
  },

  toJSON(message: ContinuousValidationEvent): unknown {
    const obj: any = {};
    if (message.podEvent !== undefined) {
      obj.podEvent = ContinuousValidationEvent_ContinuousValidationPodEvent.toJSON(message.podEvent);
    }
    if (message.configErrorEvent !== undefined) {
      obj.configErrorEvent = ContinuousValidationEvent_ConfigErrorEvent.toJSON(message.configErrorEvent);
    }
    return obj;
  },

  create(base?: DeepPartial<ContinuousValidationEvent>): ContinuousValidationEvent {
    return ContinuousValidationEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ContinuousValidationEvent>): ContinuousValidationEvent {
    const message = createBaseContinuousValidationEvent();
    message.podEvent = (object.podEvent !== undefined && object.podEvent !== null)
      ? ContinuousValidationEvent_ContinuousValidationPodEvent.fromPartial(object.podEvent)
      : undefined;
    message.configErrorEvent = (object.configErrorEvent !== undefined && object.configErrorEvent !== null)
      ? ContinuousValidationEvent_ConfigErrorEvent.fromPartial(object.configErrorEvent)
      : undefined;
    return message;
  },
};

function createBaseContinuousValidationEvent_ContinuousValidationPodEvent(): ContinuousValidationEvent_ContinuousValidationPodEvent {
  return {
    podNamespace: "",
    pod: "",
    policyName: "",
    deployTime: undefined,
    endTime: undefined,
    verdict: 0,
    images: [],
  };
}

export const ContinuousValidationEvent_ContinuousValidationPodEvent: MessageFns<
  ContinuousValidationEvent_ContinuousValidationPodEvent
> = {
  encode(
    message: ContinuousValidationEvent_ContinuousValidationPodEvent,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.podNamespace !== "") {
      writer.uint32(58).string(message.podNamespace);
    }
    if (message.pod !== "") {
      writer.uint32(10).string(message.pod);
    }
    if (message.policyName !== "") {
      writer.uint32(66).string(message.policyName);
    }
    if (message.deployTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deployTime), writer.uint32(18).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(26).fork()).join();
    }
    if (message.verdict !== 0) {
      writer.uint32(32).int32(message.verdict);
    }
    for (const v of message.images) {
      ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContinuousValidationEvent_ContinuousValidationPodEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContinuousValidationEvent_ContinuousValidationPodEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 7:
          if (tag !== 58) {
            break;
          }

          message.podNamespace = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pod = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.policyName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.verdict = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.images.push(
            ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContinuousValidationEvent_ContinuousValidationPodEvent {
    return {
      podNamespace: isSet(object.podNamespace) ? globalThis.String(object.podNamespace) : "",
      pod: isSet(object.pod) ? globalThis.String(object.pod) : "",
      policyName: isSet(object.policyName) ? globalThis.String(object.policyName) : "",
      deployTime: isSet(object.deployTime) ? fromJsonTimestamp(object.deployTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      verdict: isSet(object.verdict)
        ? continuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdictFromJSON(object.verdict)
        : 0,
      images: globalThis.Array.isArray(object?.images)
        ? object.images.map((e: any) => ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ContinuousValidationEvent_ContinuousValidationPodEvent): unknown {
    const obj: any = {};
    if (message.podNamespace !== "") {
      obj.podNamespace = message.podNamespace;
    }
    if (message.pod !== "") {
      obj.pod = message.pod;
    }
    if (message.policyName !== "") {
      obj.policyName = message.policyName;
    }
    if (message.deployTime !== undefined) {
      obj.deployTime = message.deployTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.verdict !== 0) {
      obj.verdict = continuousValidationEvent_ContinuousValidationPodEvent_PolicyConformanceVerdictToJSON(
        message.verdict,
      );
    }
    if (message.images?.length) {
      obj.images = message.images.map((e) =>
        ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails.toJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<ContinuousValidationEvent_ContinuousValidationPodEvent>,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent {
    return ContinuousValidationEvent_ContinuousValidationPodEvent.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ContinuousValidationEvent_ContinuousValidationPodEvent>,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent {
    const message = createBaseContinuousValidationEvent_ContinuousValidationPodEvent();
    message.podNamespace = object.podNamespace ?? "";
    message.pod = object.pod ?? "";
    message.policyName = object.policyName ?? "";
    message.deployTime = object.deployTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.verdict = object.verdict ?? 0;
    message.images =
      object.images?.map((e) => ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails(): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails {
  return { image: "", containerName: "", containerType: 0, result: 0, description: "", checkResults: [] };
}

export const ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails: MessageFns<
  ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails
> = {
  encode(
    message: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.image !== "") {
      writer.uint32(10).string(message.image);
    }
    if (message.containerName !== "") {
      writer.uint32(42).string(message.containerName);
    }
    if (message.containerType !== 0) {
      writer.uint32(48).int32(message.containerType);
    }
    if (message.result !== 0) {
      writer.uint32(16).int32(message.result);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.checkResults) {
      ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult.encode(
        v!,
        writer.uint32(34).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.image = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.containerName = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.containerType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.checkResults.push(
            ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails {
    return {
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      containerName: isSet(object.containerName) ? globalThis.String(object.containerName) : "",
      containerType: isSet(object.containerType)
        ? continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerTypeFromJSON(
          object.containerType,
        )
        : 0,
      result: isSet(object.result)
        ? continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResultFromJSON(object.result)
        : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      checkResults: globalThis.Array.isArray(object?.checkResults)
        ? object.checkResults.map((e: any) =>
          ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails): unknown {
    const obj: any = {};
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.containerName !== "") {
      obj.containerName = message.containerName;
    }
    if (message.containerType !== 0) {
      obj.containerType = continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_ContainerTypeToJSON(
        message.containerType,
      );
    }
    if (message.result !== 0) {
      obj.result = continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_AuditResultToJSON(
        message.result,
      );
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.checkResults?.length) {
      obj.checkResults = message.checkResults.map((e) =>
        ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult.toJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails>,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails {
    return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails>,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails {
    const message = createBaseContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails();
    message.image = object.image ?? "";
    message.containerName = object.containerName ?? "";
    message.containerType = object.containerType ?? 0;
    message.result = object.result ?? 0;
    message.description = object.description ?? "";
    message.checkResults =
      object.checkResults?.map((e) =>
        ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult(): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult {
  return {
    checkSetIndex: "",
    checkSetName: "",
    checkSetScope: undefined,
    checkIndex: "",
    checkName: "",
    checkType: "",
    verdict: 0,
    explanation: "",
  };
}

export const ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult: MessageFns<
  ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult
> = {
  encode(
    message: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.checkSetIndex !== "") {
      writer.uint32(10).string(message.checkSetIndex);
    }
    if (message.checkSetName !== "") {
      writer.uint32(18).string(message.checkSetName);
    }
    if (message.checkSetScope !== undefined) {
      ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope.encode(
        message.checkSetScope,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.checkIndex !== "") {
      writer.uint32(34).string(message.checkIndex);
    }
    if (message.checkName !== "") {
      writer.uint32(42).string(message.checkName);
    }
    if (message.checkType !== "") {
      writer.uint32(50).string(message.checkType);
    }
    if (message.verdict !== 0) {
      writer.uint32(56).int32(message.verdict);
    }
    if (message.explanation !== "") {
      writer.uint32(66).string(message.explanation);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.checkSetIndex = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.checkSetName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.checkSetScope =
            ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope.decode(
              reader,
              reader.uint32(),
            );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.checkIndex = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.checkName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.checkType = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.verdict = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.explanation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult {
    return {
      checkSetIndex: isSet(object.checkSetIndex) ? globalThis.String(object.checkSetIndex) : "",
      checkSetName: isSet(object.checkSetName) ? globalThis.String(object.checkSetName) : "",
      checkSetScope: isSet(object.checkSetScope)
        ? ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope.fromJSON(
          object.checkSetScope,
        )
        : undefined,
      checkIndex: isSet(object.checkIndex) ? globalThis.String(object.checkIndex) : "",
      checkName: isSet(object.checkName) ? globalThis.String(object.checkName) : "",
      checkType: isSet(object.checkType) ? globalThis.String(object.checkType) : "",
      verdict: isSet(object.verdict)
        ? continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdictFromJSON(
          object.verdict,
        )
        : 0,
      explanation: isSet(object.explanation) ? globalThis.String(object.explanation) : "",
    };
  },

  toJSON(message: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult): unknown {
    const obj: any = {};
    if (message.checkSetIndex !== "") {
      obj.checkSetIndex = message.checkSetIndex;
    }
    if (message.checkSetName !== "") {
      obj.checkSetName = message.checkSetName;
    }
    if (message.checkSetScope !== undefined) {
      obj.checkSetScope = ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope
        .toJSON(message.checkSetScope);
    }
    if (message.checkIndex !== "") {
      obj.checkIndex = message.checkIndex;
    }
    if (message.checkName !== "") {
      obj.checkName = message.checkName;
    }
    if (message.checkType !== "") {
      obj.checkType = message.checkType;
    }
    if (message.verdict !== 0) {
      obj.verdict = continuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckVerdictToJSON(
        message.verdict,
      );
    }
    if (message.explanation !== "") {
      obj.explanation = message.explanation;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult>,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult {
    return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult>,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult {
    const message = createBaseContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult();
    message.checkSetIndex = object.checkSetIndex ?? "";
    message.checkSetName = object.checkSetName ?? "";
    message.checkSetScope = (object.checkSetScope !== undefined && object.checkSetScope !== null)
      ? ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope.fromPartial(
        object.checkSetScope,
      )
      : undefined;
    message.checkIndex = object.checkIndex ?? "";
    message.checkName = object.checkName ?? "";
    message.checkType = object.checkType ?? "";
    message.verdict = object.verdict ?? 0;
    message.explanation = object.explanation ?? "";
    return message;
  },
};

function createBaseContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope(): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope {
  return { kubernetesServiceAccount: undefined, kubernetesNamespace: undefined };
}

export const ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope: MessageFns<
  ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope
> = {
  encode(
    message: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.kubernetesServiceAccount !== undefined) {
      writer.uint32(10).string(message.kubernetesServiceAccount);
    }
    if (message.kubernetesNamespace !== undefined) {
      writer.uint32(18).string(message.kubernetesNamespace);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message =
      createBaseContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kubernetesServiceAccount = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kubernetesNamespace = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope {
    return {
      kubernetesServiceAccount: isSet(object.kubernetesServiceAccount)
        ? globalThis.String(object.kubernetesServiceAccount)
        : undefined,
      kubernetesNamespace: isSet(object.kubernetesNamespace)
        ? globalThis.String(object.kubernetesNamespace)
        : undefined,
    };
  },

  toJSON(
    message: ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope,
  ): unknown {
    const obj: any = {};
    if (message.kubernetesServiceAccount !== undefined) {
      obj.kubernetesServiceAccount = message.kubernetesServiceAccount;
    }
    if (message.kubernetesNamespace !== undefined) {
      obj.kubernetesNamespace = message.kubernetesNamespace;
    }
    return obj;
  },

  create(
    base?: DeepPartial<ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope>,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope {
    return ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope.fromPartial(
      base ?? {},
    );
  },
  fromPartial(
    object: DeepPartial<ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope>,
  ): ContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope {
    const message =
      createBaseContinuousValidationEvent_ContinuousValidationPodEvent_ImageDetails_CheckResult_CheckSetScope();
    message.kubernetesServiceAccount = object.kubernetesServiceAccount ?? undefined;
    message.kubernetesNamespace = object.kubernetesNamespace ?? undefined;
    return message;
  },
};

function createBaseContinuousValidationEvent_ConfigErrorEvent(): ContinuousValidationEvent_ConfigErrorEvent {
  return { description: "" };
}

export const ContinuousValidationEvent_ConfigErrorEvent: MessageFns<ContinuousValidationEvent_ConfigErrorEvent> = {
  encode(message: ContinuousValidationEvent_ConfigErrorEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContinuousValidationEvent_ConfigErrorEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContinuousValidationEvent_ConfigErrorEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContinuousValidationEvent_ConfigErrorEvent {
    return { description: isSet(object.description) ? globalThis.String(object.description) : "" };
  },

  toJSON(message: ContinuousValidationEvent_ConfigErrorEvent): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<ContinuousValidationEvent_ConfigErrorEvent>): ContinuousValidationEvent_ConfigErrorEvent {
    return ContinuousValidationEvent_ConfigErrorEvent.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ContinuousValidationEvent_ConfigErrorEvent>,
  ): ContinuousValidationEvent_ConfigErrorEvent {
    const message = createBaseContinuousValidationEvent_ConfigErrorEvent();
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
