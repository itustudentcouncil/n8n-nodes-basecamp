// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/functions/v1/operations.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../protobuf/any.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.functions.v1";

/** A type of an operation. */
export enum OperationType {
  /** OPERATION_UNSPECIFIED - Unknown operation type. */
  OPERATION_UNSPECIFIED = 0,
  /** CREATE_FUNCTION - Triggered by CreateFunction call */
  CREATE_FUNCTION = 1,
  /** UPDATE_FUNCTION - Triggered by UpdateFunction call */
  UPDATE_FUNCTION = 2,
  /** DELETE_FUNCTION - Triggered by DeleteFunction call. */
  DELETE_FUNCTION = 3,
  UNRECOGNIZED = -1,
}

export function operationTypeFromJSON(object: any): OperationType {
  switch (object) {
    case 0:
    case "OPERATION_UNSPECIFIED":
      return OperationType.OPERATION_UNSPECIFIED;
    case 1:
    case "CREATE_FUNCTION":
      return OperationType.CREATE_FUNCTION;
    case 2:
    case "UPDATE_FUNCTION":
      return OperationType.UPDATE_FUNCTION;
    case 3:
    case "DELETE_FUNCTION":
      return OperationType.DELETE_FUNCTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationType.UNRECOGNIZED;
  }
}

export function operationTypeToJSON(object: OperationType): string {
  switch (object) {
    case OperationType.OPERATION_UNSPECIFIED:
      return "OPERATION_UNSPECIFIED";
    case OperationType.CREATE_FUNCTION:
      return "CREATE_FUNCTION";
    case OperationType.UPDATE_FUNCTION:
      return "UPDATE_FUNCTION";
    case OperationType.DELETE_FUNCTION:
      return "DELETE_FUNCTION";
    case OperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Metadata describing an [Operation][google.longrunning.Operation] */
export interface OperationMetadataV1 {
  /**
   * Target of the operation - for example
   * `projects/project-1/locations/region-1/functions/function-1`
   */
  target: string;
  /** Type of operation. */
  type: OperationType;
  /** The original request that started the operation. */
  request:
    | Any
    | undefined;
  /**
   * Version id of the function created or updated by an API call.
   * This field is only populated for Create and Update operations.
   */
  versionId: Long;
  /** The last update timestamp of the operation. */
  updateTime:
    | Date
    | undefined;
  /**
   * The Cloud Build ID of the function created or updated by an API call.
   * This field is only populated for Create and Update operations.
   */
  buildId: string;
  /**
   * An identifier for Firebase function sources. Disclaimer: This field is only
   * supported for Firebase function deployments.
   */
  sourceToken: string;
  /**
   * The Cloud Build Name of the function deployment.
   * This field is only populated for Create and Update operations.
   * `projects/<project-number>/locations/<region>/builds/<build-id>`.
   */
  buildName: string;
}

function createBaseOperationMetadataV1(): OperationMetadataV1 {
  return {
    target: "",
    type: 0,
    request: undefined,
    versionId: Long.ZERO,
    updateTime: undefined,
    buildId: "",
    sourceToken: "",
    buildName: "",
  };
}

export const OperationMetadataV1: MessageFns<OperationMetadataV1> = {
  encode(message: OperationMetadataV1, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.target !== "") {
      writer.uint32(10).string(message.target);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.request !== undefined) {
      Any.encode(message.request, writer.uint32(26).fork()).join();
    }
    if (!message.versionId.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.versionId.toString());
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.buildId !== "") {
      writer.uint32(50).string(message.buildId);
    }
    if (message.sourceToken !== "") {
      writer.uint32(58).string(message.sourceToken);
    }
    if (message.buildName !== "") {
      writer.uint32(66).string(message.buildName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadataV1 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadataV1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.target = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.request = Any.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.versionId = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.buildId = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.sourceToken = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.buildName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadataV1 {
    return {
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      type: isSet(object.type) ? operationTypeFromJSON(object.type) : 0,
      request: isSet(object.request) ? Any.fromJSON(object.request) : undefined,
      versionId: isSet(object.versionId) ? Long.fromValue(object.versionId) : Long.ZERO,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      buildId: isSet(object.buildId) ? globalThis.String(object.buildId) : "",
      sourceToken: isSet(object.sourceToken) ? globalThis.String(object.sourceToken) : "",
      buildName: isSet(object.buildName) ? globalThis.String(object.buildName) : "",
    };
  },

  toJSON(message: OperationMetadataV1): unknown {
    const obj: any = {};
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.type !== 0) {
      obj.type = operationTypeToJSON(message.type);
    }
    if (message.request !== undefined) {
      obj.request = Any.toJSON(message.request);
    }
    if (!message.versionId.equals(Long.ZERO)) {
      obj.versionId = (message.versionId || Long.ZERO).toString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.buildId !== "") {
      obj.buildId = message.buildId;
    }
    if (message.sourceToken !== "") {
      obj.sourceToken = message.sourceToken;
    }
    if (message.buildName !== "") {
      obj.buildName = message.buildName;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadataV1>): OperationMetadataV1 {
    return OperationMetadataV1.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadataV1>): OperationMetadataV1 {
    const message = createBaseOperationMetadataV1();
    message.target = object.target ?? "";
    message.type = object.type ?? 0;
    message.request = (object.request !== undefined && object.request !== null)
      ? Any.fromPartial(object.request)
      : undefined;
    message.versionId = (object.versionId !== undefined && object.versionId !== null)
      ? Long.fromValue(object.versionId)
      : Long.ZERO;
    message.updateTime = object.updateTime ?? undefined;
    message.buildId = object.buildId ?? "";
    message.sourceToken = object.sourceToken ?? "";
    message.buildName = object.buildName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
