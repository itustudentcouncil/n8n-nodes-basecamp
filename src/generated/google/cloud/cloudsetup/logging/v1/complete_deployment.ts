// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/cloudsetup/logging/v1/complete_deployment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Status } from "../../../../rpc/status.js";

export const protobufPackage = "google.cloud.cloudsetup.logging.v1";

/**
 * JSON payload for the Cloud Logging event:
 * `organizations/[organizationId]/logs/cloudsetup.googleapis.com%2Fcomplete_deployment`.
 * This event gets emitted upon completion of a config deployment as part of the
 * Cloud Setup Checklist.
 *
 * The deployment can fail even if it returns a
 * `config.googleapis.com/Deployment`. The state of that message will be
 * `FAILED`. Hence, if there is a `value` present, the `state` can still be,
 * `FAILED`. The message for the error or failure will be on the `error` or the
 * `value` if the Operation results in an error or if the `state` of the
 * Deployment is `FAILED`, respectively.
 */
export interface CompleteDeploymentEvent {
  /** Result of the Deployment recorded upon completion. */
  value?:
    | CompleteDeploymentResult
    | undefined;
  /** Result of the Deployment if the `Operation` results in an error. */
  error?:
    | Status
    | undefined;
  /** The `state` of this deployment completion event. */
  state: CompleteDeploymentEvent_State;
  /** Flag to indicate if deployment is preview only. */
  previewOnly: boolean;
}

/** State of the completed deployment. */
export enum CompleteDeploymentEvent_State {
  /** STATE_UNSPECIFIED - The zero value. It is applied when `state` is unset. Do not use. */
  STATE_UNSPECIFIED = 0,
  /**
   * SUCCEEDED - Indicates that a Deployment value was present when the config deployment
   * finished and the State was anything other than FAILED.
   */
  SUCCEEDED = 1,
  /**
   * FAILED - Indicates that the Operation result was an error or the Deployment
   * `state` was FAILED.
   */
  FAILED = 2,
  UNRECOGNIZED = -1,
}

export function completeDeploymentEvent_StateFromJSON(object: any): CompleteDeploymentEvent_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return CompleteDeploymentEvent_State.STATE_UNSPECIFIED;
    case 1:
    case "SUCCEEDED":
      return CompleteDeploymentEvent_State.SUCCEEDED;
    case 2:
    case "FAILED":
      return CompleteDeploymentEvent_State.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CompleteDeploymentEvent_State.UNRECOGNIZED;
  }
}

export function completeDeploymentEvent_StateToJSON(object: CompleteDeploymentEvent_State): string {
  switch (object) {
    case CompleteDeploymentEvent_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case CompleteDeploymentEvent_State.SUCCEEDED:
      return "SUCCEEDED";
    case CompleteDeploymentEvent_State.FAILED:
      return "FAILED";
    case CompleteDeploymentEvent_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** This message is used when the CompleteDeploymentEvent has a value. */
export interface CompleteDeploymentResult {
  /**
   * This is the Deployment that completed.
   * Format is projects/{project}/locations/{location}/deployments/{name}.
   */
  deployment: string;
  /**
   * This is the Preview that completed.
   * Format is projects/{project}/locations/{location}/previews/{preview}
   */
  preview: string;
  /**
   * The message that is returned when a deployment completes. This **can** be
   * an error message if the `Deployment` `state` is `FAILED`.
   */
  message: string;
}

function createBaseCompleteDeploymentEvent(): CompleteDeploymentEvent {
  return { value: undefined, error: undefined, state: 0, previewOnly: false };
}

export const CompleteDeploymentEvent: MessageFns<CompleteDeploymentEvent> = {
  encode(message: CompleteDeploymentEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      CompleteDeploymentResult.encode(message.value, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.previewOnly !== false) {
      writer.uint32(32).bool(message.previewOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteDeploymentEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteDeploymentEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = CompleteDeploymentResult.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.previewOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteDeploymentEvent {
    return {
      value: isSet(object.value) ? CompleteDeploymentResult.fromJSON(object.value) : undefined,
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
      state: isSet(object.state) ? completeDeploymentEvent_StateFromJSON(object.state) : 0,
      previewOnly: isSet(object.previewOnly) ? globalThis.Boolean(object.previewOnly) : false,
    };
  },

  toJSON(message: CompleteDeploymentEvent): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = CompleteDeploymentResult.toJSON(message.value);
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    if (message.state !== 0) {
      obj.state = completeDeploymentEvent_StateToJSON(message.state);
    }
    if (message.previewOnly !== false) {
      obj.previewOnly = message.previewOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CompleteDeploymentEvent>): CompleteDeploymentEvent {
    return CompleteDeploymentEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompleteDeploymentEvent>): CompleteDeploymentEvent {
    const message = createBaseCompleteDeploymentEvent();
    message.value = (object.value !== undefined && object.value !== null)
      ? CompleteDeploymentResult.fromPartial(object.value)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    message.state = object.state ?? 0;
    message.previewOnly = object.previewOnly ?? false;
    return message;
  },
};

function createBaseCompleteDeploymentResult(): CompleteDeploymentResult {
  return { deployment: "", preview: "", message: "" };
}

export const CompleteDeploymentResult: MessageFns<CompleteDeploymentResult> = {
  encode(message: CompleteDeploymentResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== "") {
      writer.uint32(10).string(message.deployment);
    }
    if (message.preview !== "") {
      writer.uint32(26).string(message.preview);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteDeploymentResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteDeploymentResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deployment = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preview = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteDeploymentResult {
    return {
      deployment: isSet(object.deployment) ? globalThis.String(object.deployment) : "",
      preview: isSet(object.preview) ? globalThis.String(object.preview) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: CompleteDeploymentResult): unknown {
    const obj: any = {};
    if (message.deployment !== "") {
      obj.deployment = message.deployment;
    }
    if (message.preview !== "") {
      obj.preview = message.preview;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<CompleteDeploymentResult>): CompleteDeploymentResult {
    return CompleteDeploymentResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompleteDeploymentResult>): CompleteDeploymentResult {
    const message = createBaseCompleteDeploymentResult();
    message.deployment = object.deployment ?? "";
    message.preview = object.preview ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
