// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/contactcenterinsights/v1/contact_center_insights.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Duration } from "../../../protobuf/duration.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import {
  Analysis,
  AnnotatorSelector,
  Conversation,
  Conversation_Medium,
  conversation_MediumFromJSON,
  conversation_MediumToJSON,
  Issue,
  IssueModel,
  IssueModelLabelStats,
  IssueModelLabelStats_IssueStats,
  PhraseMatcher,
  RedactionConfig,
  Settings,
  SpeechConfig,
  View,
} from "./resources.js";

export const protobufPackage = "google.cloud.contactcenterinsights.v1";

/** Represents the options for viewing a conversation. */
export enum ConversationView {
  /**
   * CONVERSATION_VIEW_UNSPECIFIED - The conversation view is not specified.
   *
   * * Defaults to `FULL` in `GetConversationRequest`.
   * * Defaults to `BASIC` in `ListConversationsRequest`.
   */
  CONVERSATION_VIEW_UNSPECIFIED = 0,
  /** FULL - Populates all fields in the conversation. */
  FULL = 2,
  /** BASIC - Populates all fields in the conversation except the transcript. */
  BASIC = 1,
  UNRECOGNIZED = -1,
}

export function conversationViewFromJSON(object: any): ConversationView {
  switch (object) {
    case 0:
    case "CONVERSATION_VIEW_UNSPECIFIED":
      return ConversationView.CONVERSATION_VIEW_UNSPECIFIED;
    case 2:
    case "FULL":
      return ConversationView.FULL;
    case 1:
    case "BASIC":
      return ConversationView.BASIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConversationView.UNRECOGNIZED;
  }
}

export function conversationViewToJSON(object: ConversationView): string {
  switch (object) {
    case ConversationView.CONVERSATION_VIEW_UNSPECIFIED:
      return "CONVERSATION_VIEW_UNSPECIFIED";
    case ConversationView.FULL:
      return "FULL";
    case ConversationView.BASIC:
      return "BASIC";
    case ConversationView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The request for calculating conversation statistics. */
export interface CalculateStatsRequest {
  /** Required. The location of the conversations. */
  location: string;
  /**
   * A filter to reduce results to a specific subset. This field is useful for
   * getting statistics about conversations with specific properties.
   */
  filter: string;
}

/** The response for calculating conversation statistics. */
export interface CalculateStatsResponse {
  /**
   * The average duration of all conversations. The average is calculated using
   * only conversations that have a time duration.
   */
  averageDuration:
    | Duration
    | undefined;
  /** The average number of turns per conversation. */
  averageTurnCount: number;
  /** The total number of conversations. */
  conversationCount: number;
  /**
   * A map associating each smart highlighter display name with its respective
   * number of matches in the set of conversations.
   */
  smartHighlighterMatches: { [key: string]: number };
  /**
   * A map associating each custom highlighter resource name with its respective
   * number of matches in the set of conversations.
   */
  customHighlighterMatches: { [key: string]: number };
  /**
   * A map associating each issue resource name with its respective number of
   * matches in the set of conversations. Key has the format:
   * `projects/<Project-ID>/locations/<Location-ID>/issueModels/<Issue-Model-ID>/issues/<Issue-ID>`
   * Deprecated, use `issue_matches_stats` field instead.
   *
   * @deprecated
   */
  issueMatches: { [key: string]: number };
  /**
   * A map associating each issue resource name with its respective number of
   * matches in the set of conversations. Key has the format:
   * `projects/<Project-ID>/locations/<Location-ID>/issueModels/<Issue-Model-ID>/issues/<Issue-ID>`
   */
  issueMatchesStats: { [key: string]: IssueModelLabelStats_IssueStats };
  /**
   * A time series representing the count of conversations created over time
   * that match that requested filter criteria.
   */
  conversationCountTimeSeries: CalculateStatsResponse_TimeSeries | undefined;
}

/** A time series representing conversations over time. */
export interface CalculateStatsResponse_TimeSeries {
  /** The duration of each interval. */
  intervalDuration:
    | Duration
    | undefined;
  /**
   * An ordered list of intervals from earliest to latest, where each interval
   * represents the number of conversations that transpired during the time
   * window.
   */
  points: CalculateStatsResponse_TimeSeries_Interval[];
}

/** A single interval in a time series. */
export interface CalculateStatsResponse_TimeSeries_Interval {
  /** The start time of this interval. */
  startTime:
    | Date
    | undefined;
  /** The number of conversations created in this interval. */
  conversationCount: number;
}

export interface CalculateStatsResponse_SmartHighlighterMatchesEntry {
  key: string;
  value: number;
}

export interface CalculateStatsResponse_CustomHighlighterMatchesEntry {
  key: string;
  value: number;
}

export interface CalculateStatsResponse_IssueMatchesEntry {
  key: string;
  value: number;
}

export interface CalculateStatsResponse_IssueMatchesStatsEntry {
  key: string;
  value: IssueModelLabelStats_IssueStats | undefined;
}

/** Metadata for a create analysis operation. */
export interface CreateAnalysisOperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. The Conversation that this Analysis Operation belongs to. */
  conversation: string;
  /** Output only. The annotator selector used for the analysis (if any). */
  annotatorSelector: AnnotatorSelector | undefined;
}

/** Request to create a conversation. */
export interface CreateConversationRequest {
  /** Required. The parent resource of the conversation. */
  parent: string;
  /** Required. The conversation resource to create. */
  conversation:
    | Conversation
    | undefined;
  /**
   * A unique ID for the new conversation. This ID will become the final
   * component of the conversation's resource name. If no ID is specified, a
   * server-generated ID will be used.
   *
   * This value should be 4-64 characters and must match the regular
   * expression `^[a-z0-9-]{4,64}$`. Valid characters are `[a-z][0-9]-`
   */
  conversationId: string;
}

/** Request to upload a conversation. */
export interface UploadConversationRequest {
  /** Required. The parent resource of the conversation. */
  parent: string;
  /** Required. The conversation resource to create. */
  conversation:
    | Conversation
    | undefined;
  /**
   * Optional. A unique ID for the new conversation. This ID will become the
   * final component of the conversation's resource name. If no ID is specified,
   * a server-generated ID will be used.
   *
   * This value should be 4-64 characters and must match the regular
   * expression `^[a-z0-9-]{4,64}$`. Valid characters are `[a-z][0-9]-`
   */
  conversationId: string;
  /**
   * Optional. DLP settings for transcript redaction. Will default to the config
   * specified in Settings.
   */
  redactionConfig:
    | RedactionConfig
    | undefined;
  /**
   * Optional. Speech-to-Text configuration. Will default to the config
   * specified in Settings.
   */
  speechConfig: SpeechConfig | undefined;
}

/** The metadata for an UploadConversation operation. */
export interface UploadConversationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. The original request. */
  request:
    | UploadConversationRequest
    | undefined;
  /**
   * Output only. The operation name for a successfully created analysis
   * operation, if any.
   */
  analysisOperation: string;
  /** Output only. The redaction config applied to the uploaded conversation. */
  appliedRedactionConfig: RedactionConfig | undefined;
}

/** Request to list conversations. */
export interface ListConversationsRequest {
  /** Required. The parent resource of the conversation. */
  parent: string;
  /**
   * The maximum number of conversations to return in the response. A valid page
   * size ranges from 0 to 1,000 inclusive. If the page size is zero or
   * unspecified, a default page size of 100 will be chosen. Note that a call
   * might return fewer results than the requested page size.
   */
  pageSize: number;
  /**
   * The value returned by the last `ListConversationsResponse`. This value
   * indicates that this is a continuation of a prior `ListConversations` call
   * and that the system should return the next page of data.
   */
  pageToken: string;
  /**
   * A filter to reduce results to a specific subset. Useful for querying
   * conversations with specific properties.
   */
  filter: string;
  /** The level of details of the conversation. Default is `BASIC`. */
  view: ConversationView;
}

/** The response of listing conversations. */
export interface ListConversationsResponse {
  /** The conversations that match the request. */
  conversations: Conversation[];
  /**
   * A token which can be sent as `page_token` to retrieve the next page. If
   * this field is set, it means there is another page available. If it is not
   * set, it means no other pages are available.
   */
  nextPageToken: string;
}

/** The request to get a conversation. */
export interface GetConversationRequest {
  /** Required. The name of the conversation to get. */
  name: string;
  /** The level of details of the conversation. Default is `FULL`. */
  view: ConversationView;
}

/** The request to update a conversation. */
export interface UpdateConversationRequest {
  /** Required. The new values for the conversation. */
  conversation:
    | Conversation
    | undefined;
  /** The list of fields to be updated. */
  updateMask: string[] | undefined;
}

/** The request to delete a conversation. */
export interface DeleteConversationRequest {
  /** Required. The name of the conversation to delete. */
  name: string;
  /**
   * If set to true, all of this conversation's analyses will also be deleted.
   * Otherwise, the request will only succeed if the conversation has no
   * analyses.
   */
  force: boolean;
}

/** The request to ingest conversations. */
export interface IngestConversationsRequest {
  /**
   * A cloud storage bucket source. Note that any previously ingested objects
   * from the source will be skipped to avoid duplication.
   */
  gcsSource?:
    | IngestConversationsRequest_GcsSource
    | undefined;
  /** Configuration for when `source` contains conversation transcripts. */
  transcriptObjectConfig?:
    | IngestConversationsRequest_TranscriptObjectConfig
    | undefined;
  /** Required. The parent resource for new conversations. */
  parent: string;
  /** Configuration that applies to all conversations. */
  conversationConfig:
    | IngestConversationsRequest_ConversationConfig
    | undefined;
  /**
   * Optional. DLP settings for transcript redaction. Optional, will default to
   * the config specified in Settings.
   */
  redactionConfig:
    | RedactionConfig
    | undefined;
  /**
   * Optional. Default Speech-to-Text configuration. Optional, will default to
   * the config specified in Settings.
   */
  speechConfig: SpeechConfig | undefined;
}

/** Configuration for Cloud Storage bucket sources. */
export interface IngestConversationsRequest_GcsSource {
  /** Required. The Cloud Storage bucket containing source objects. */
  bucketUri: string;
  /** Optional. Specifies the type of the objects in `bucket_uri`. */
  bucketObjectType: IngestConversationsRequest_GcsSource_BucketObjectType;
}

export enum IngestConversationsRequest_GcsSource_BucketObjectType {
  /** BUCKET_OBJECT_TYPE_UNSPECIFIED - The object type is unspecified and will default to `TRANSCRIPT`. */
  BUCKET_OBJECT_TYPE_UNSPECIFIED = 0,
  /** TRANSCRIPT - The object is a transcript. */
  TRANSCRIPT = 1,
  /** AUDIO - The object is an audio file. */
  AUDIO = 2,
  UNRECOGNIZED = -1,
}

export function ingestConversationsRequest_GcsSource_BucketObjectTypeFromJSON(
  object: any,
): IngestConversationsRequest_GcsSource_BucketObjectType {
  switch (object) {
    case 0:
    case "BUCKET_OBJECT_TYPE_UNSPECIFIED":
      return IngestConversationsRequest_GcsSource_BucketObjectType.BUCKET_OBJECT_TYPE_UNSPECIFIED;
    case 1:
    case "TRANSCRIPT":
      return IngestConversationsRequest_GcsSource_BucketObjectType.TRANSCRIPT;
    case 2:
    case "AUDIO":
      return IngestConversationsRequest_GcsSource_BucketObjectType.AUDIO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IngestConversationsRequest_GcsSource_BucketObjectType.UNRECOGNIZED;
  }
}

export function ingestConversationsRequest_GcsSource_BucketObjectTypeToJSON(
  object: IngestConversationsRequest_GcsSource_BucketObjectType,
): string {
  switch (object) {
    case IngestConversationsRequest_GcsSource_BucketObjectType.BUCKET_OBJECT_TYPE_UNSPECIFIED:
      return "BUCKET_OBJECT_TYPE_UNSPECIFIED";
    case IngestConversationsRequest_GcsSource_BucketObjectType.TRANSCRIPT:
      return "TRANSCRIPT";
    case IngestConversationsRequest_GcsSource_BucketObjectType.AUDIO:
      return "AUDIO";
    case IngestConversationsRequest_GcsSource_BucketObjectType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Configuration for processing transcript objects. */
export interface IngestConversationsRequest_TranscriptObjectConfig {
  /** Required. The medium transcript objects represent. */
  medium: Conversation_Medium;
}

/** Configuration that applies to all conversations. */
export interface IngestConversationsRequest_ConversationConfig {
  /**
   * An opaque, user-specified string representing the human agent who handled
   * the conversations.
   */
  agentId: string;
  /**
   * Optional. Indicates which of the channels, 1 or 2, contains the agent.
   * Note that this must be set for conversations to be properly displayed and
   * analyzed.
   */
  agentChannel: number;
  /**
   * Optional. Indicates which of the channels, 1 or 2, contains the agent.
   * Note that this must be set for conversations to be properly displayed and
   * analyzed.
   */
  customerChannel: number;
}

/** The metadata for an IngestConversations operation. */
export interface IngestConversationsMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. The original request for ingest. */
  request:
    | IngestConversationsRequest
    | undefined;
  /**
   * Output only. Partial errors during ingest operation that might cause the
   * operation output to be incomplete.
   */
  partialErrors: Status[];
  /** Output only. Statistics for IngestConversations operation. */
  ingestConversationsStats: IngestConversationsMetadata_IngestConversationsStats | undefined;
}

/** Statistics for IngestConversations operation. */
export interface IngestConversationsMetadata_IngestConversationsStats {
  /** Output only. The number of objects processed during the ingest operation. */
  processedObjectCount: number;
  /**
   * Output only. The number of objects skipped because another conversation
   * with the same transcript uri had already been ingested.
   */
  duplicatesSkippedCount: number;
  /**
   * Output only. The number of new conversations added during this ingest
   * operation.
   */
  successfulIngestCount: number;
  /**
   * Output only. The number of objects which were unable to be ingested due
   * to errors. The errors are populated in the partial_errors field.
   */
  failedIngestCount: number;
}

/** The response to an IngestConversations operation. */
export interface IngestConversationsResponse {
}

/** The request to create an analysis. */
export interface CreateAnalysisRequest {
  /** Required. The parent resource of the analysis. */
  parent: string;
  /** Required. The analysis to create. */
  analysis: Analysis | undefined;
}

/** The request to list analyses. */
export interface ListAnalysesRequest {
  /** Required. The parent resource of the analyses. */
  parent: string;
  /**
   * The maximum number of analyses to return in the response. If this
   * value is zero, the service will select a default size. A call might return
   * fewer objects than requested. A non-empty `next_page_token` in the response
   * indicates that more data is available.
   */
  pageSize: number;
  /**
   * The value returned by the last `ListAnalysesResponse`; indicates
   * that this is a continuation of a prior `ListAnalyses` call and
   * the system should return the next page of data.
   */
  pageToken: string;
  /**
   * A filter to reduce results to a specific subset. Useful for querying
   * conversations with specific properties.
   */
  filter: string;
}

/** The response to list analyses. */
export interface ListAnalysesResponse {
  /** The analyses that match the request. */
  analyses: Analysis[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** The request to get an analysis. */
export interface GetAnalysisRequest {
  /** Required. The name of the analysis to get. */
  name: string;
}

/** The request to delete an analysis. */
export interface DeleteAnalysisRequest {
  /** Required. The name of the analysis to delete. */
  name: string;
}

/** The request to analyze conversations in bulk. */
export interface BulkAnalyzeConversationsRequest {
  /** Required. The parent resource to create analyses in. */
  parent: string;
  /** Required. Filter used to select the subset of conversations to analyze. */
  filter: string;
  /**
   * Required. Percentage of selected conversation to analyze, between
   * [0, 100].
   */
  analysisPercentage: number;
  /**
   * To select the annotators to run and the phrase matchers to use
   * (if any). If not specified, all annotators will be run.
   */
  annotatorSelector: AnnotatorSelector | undefined;
}

/** The metadata for a bulk analyze conversations operation. */
export interface BulkAnalyzeConversationsMetadata {
  /** The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** The original request for bulk analyze. */
  request:
    | BulkAnalyzeConversationsRequest
    | undefined;
  /** The number of requested analyses that have completed successfully so far. */
  completedAnalysesCount: number;
  /** The number of requested analyses that have failed so far. */
  failedAnalysesCount: number;
  /**
   * Total number of analyses requested. Computed by the number of conversations
   * returned by `filter` multiplied by `analysis_percentage` in the request.
   */
  totalRequestedAnalysesCount: number;
  /**
   * Output only. Partial errors during bulk analyze operation that might cause
   * the operation output to be incomplete.
   */
  partialErrors: Status[];
}

/** The response for a bulk analyze conversations operation. */
export interface BulkAnalyzeConversationsResponse {
  /** Count of successful analyses. */
  successfulAnalysisCount: number;
  /** Count of failed analyses. */
  failedAnalysisCount: number;
}

/** The request to delete conversations in bulk. */
export interface BulkDeleteConversationsRequest {
  /**
   * Required. The parent resource to delete conversations from.
   * Format:
   * projects/{project}/locations/{location}
   */
  parent: string;
  /** Filter used to select the subset of conversations to delete. */
  filter: string;
  /** Maximum number of conversations to delete. */
  maxDeleteCount: number;
  /**
   * If set to true, all of this conversation's analyses will also be deleted.
   * Otherwise, the request will only succeed if the conversation has no
   * analyses.
   */
  force: boolean;
}

/** The metadata for a bulk delete conversations operation. */
export interface BulkDeleteConversationsMetadata {
  /** The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** The original request for bulk delete. */
  request:
    | BulkDeleteConversationsRequest
    | undefined;
  /**
   * Partial errors during bulk delete conversations operation that might cause
   * the operation output to be incomplete.
   */
  partialErrors: Status[];
}

/** The response for a bulk delete conversations operation. */
export interface BulkDeleteConversationsResponse {
}

/** The request to export insights. */
export interface ExportInsightsDataRequest {
  /** Specified if sink is a BigQuery table. */
  bigQueryDestination?:
    | ExportInsightsDataRequest_BigQueryDestination
    | undefined;
  /** Required. The parent resource to export data from. */
  parent: string;
  /**
   * A filter to reduce results to a specific subset. Useful for exporting
   * conversations with specific properties.
   */
  filter: string;
  /**
   * A fully qualified KMS key name for BigQuery tables protected by CMEK.
   * Format:
   * projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}
   */
  kmsKey: string;
  /** Options for what to do if the destination table already exists. */
  writeDisposition: ExportInsightsDataRequest_WriteDisposition;
}

/** Specifies the action that occurs if the destination table already exists. */
export enum ExportInsightsDataRequest_WriteDisposition {
  /** WRITE_DISPOSITION_UNSPECIFIED - Write disposition is not specified. Defaults to WRITE_TRUNCATE. */
  WRITE_DISPOSITION_UNSPECIFIED = 0,
  /**
   * WRITE_TRUNCATE - If the table already exists, BigQuery will overwrite the table data and
   * use the schema from the load.
   */
  WRITE_TRUNCATE = 1,
  /** WRITE_APPEND - If the table already exists, BigQuery will append data to the table. */
  WRITE_APPEND = 2,
  UNRECOGNIZED = -1,
}

export function exportInsightsDataRequest_WriteDispositionFromJSON(
  object: any,
): ExportInsightsDataRequest_WriteDisposition {
  switch (object) {
    case 0:
    case "WRITE_DISPOSITION_UNSPECIFIED":
      return ExportInsightsDataRequest_WriteDisposition.WRITE_DISPOSITION_UNSPECIFIED;
    case 1:
    case "WRITE_TRUNCATE":
      return ExportInsightsDataRequest_WriteDisposition.WRITE_TRUNCATE;
    case 2:
    case "WRITE_APPEND":
      return ExportInsightsDataRequest_WriteDisposition.WRITE_APPEND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExportInsightsDataRequest_WriteDisposition.UNRECOGNIZED;
  }
}

export function exportInsightsDataRequest_WriteDispositionToJSON(
  object: ExportInsightsDataRequest_WriteDisposition,
): string {
  switch (object) {
    case ExportInsightsDataRequest_WriteDisposition.WRITE_DISPOSITION_UNSPECIFIED:
      return "WRITE_DISPOSITION_UNSPECIFIED";
    case ExportInsightsDataRequest_WriteDisposition.WRITE_TRUNCATE:
      return "WRITE_TRUNCATE";
    case ExportInsightsDataRequest_WriteDisposition.WRITE_APPEND:
      return "WRITE_APPEND";
    case ExportInsightsDataRequest_WriteDisposition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A BigQuery Table Reference. */
export interface ExportInsightsDataRequest_BigQueryDestination {
  /**
   * A project ID or number. If specified, then export will attempt to
   * write data to this project instead of the resource project. Otherwise,
   * the resource project will be used.
   */
  projectId: string;
  /**
   * Required. The name of the BigQuery dataset that the snapshot result
   * should be exported to. If this dataset does not exist, the export call
   * returns an INVALID_ARGUMENT error.
   */
  dataset: string;
  /**
   * The BigQuery table name to which the insights data should be written.
   * If this table does not exist, the export call returns an INVALID_ARGUMENT
   * error.
   */
  table: string;
}

/** Metadata for an export insights operation. */
export interface ExportInsightsDataMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** The original request for export. */
  request:
    | ExportInsightsDataRequest
    | undefined;
  /**
   * Partial errors during export operation that might cause the operation
   * output to be incomplete.
   */
  partialErrors: Status[];
}

/** Response for an export insights operation. */
export interface ExportInsightsDataResponse {
}

/** The request to create an issue model. */
export interface CreateIssueModelRequest {
  /** Required. The parent resource of the issue model. */
  parent: string;
  /** Required. The issue model to create. */
  issueModel: IssueModel | undefined;
}

/** Metadata for creating an issue model. */
export interface CreateIssueModelMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** The original request for creation. */
  request: CreateIssueModelRequest | undefined;
}

/** The request to update an issue model. */
export interface UpdateIssueModelRequest {
  /** Required. The new values for the issue model. */
  issueModel:
    | IssueModel
    | undefined;
  /** The list of fields to be updated. */
  updateMask: string[] | undefined;
}

/** Request to list issue models. */
export interface ListIssueModelsRequest {
  /** Required. The parent resource of the issue model. */
  parent: string;
}

/** The response of listing issue models. */
export interface ListIssueModelsResponse {
  /** The issue models that match the request. */
  issueModels: IssueModel[];
}

/** The request to get an issue model. */
export interface GetIssueModelRequest {
  /** Required. The name of the issue model to get. */
  name: string;
}

/** The request to delete an issue model. */
export interface DeleteIssueModelRequest {
  /** Required. The name of the issue model to delete. */
  name: string;
}

/** Metadata for deleting an issue model. */
export interface DeleteIssueModelMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** The original request for deletion. */
  request: DeleteIssueModelRequest | undefined;
}

/** The request to deploy an issue model. */
export interface DeployIssueModelRequest {
  /** Required. The issue model to deploy. */
  name: string;
}

/** The response to deploy an issue model. */
export interface DeployIssueModelResponse {
}

/** Metadata for deploying an issue model. */
export interface DeployIssueModelMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** The original request for deployment. */
  request: DeployIssueModelRequest | undefined;
}

/** The request to undeploy an issue model. */
export interface UndeployIssueModelRequest {
  /** Required. The issue model to undeploy. */
  name: string;
}

/** The response to undeploy an issue model. */
export interface UndeployIssueModelResponse {
}

/** Metadata for undeploying an issue model. */
export interface UndeployIssueModelMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** The original request for undeployment. */
  request: UndeployIssueModelRequest | undefined;
}

/** The request to get an issue. */
export interface GetIssueRequest {
  /** Required. The name of the issue to get. */
  name: string;
}

/** Request to list issues. */
export interface ListIssuesRequest {
  /** Required. The parent resource of the issue. */
  parent: string;
}

/** The response of listing issues. */
export interface ListIssuesResponse {
  /** The issues that match the request. */
  issues: Issue[];
}

/** The request to update an issue. */
export interface UpdateIssueRequest {
  /** Required. The new values for the issue. */
  issue:
    | Issue
    | undefined;
  /** The list of fields to be updated. */
  updateMask: string[] | undefined;
}

/** The request to delete an issue. */
export interface DeleteIssueRequest {
  /** Required. The name of the issue to delete. */
  name: string;
}

/** Request to get statistics of an issue model. */
export interface CalculateIssueModelStatsRequest {
  /** Required. The resource name of the issue model to query against. */
  issueModel: string;
}

/** Response of querying an issue model's statistics. */
export interface CalculateIssueModelStatsResponse {
  /**
   * The latest label statistics for the queried issue model. Includes results
   * on both training data and data labeled after deployment.
   */
  currentStats: IssueModelLabelStats | undefined;
}

/** Request to create a phrase matcher. */
export interface CreatePhraseMatcherRequest {
  /**
   * Required. The parent resource of the phrase matcher. Required. The location
   * to create a phrase matcher for. Format: `projects/<Project
   * ID>/locations/<Location ID>` or `projects/<Project
   * Number>/locations/<Location ID>`
   */
  parent: string;
  /** Required. The phrase matcher resource to create. */
  phraseMatcher: PhraseMatcher | undefined;
}

/** Request to list phrase matchers. */
export interface ListPhraseMatchersRequest {
  /** Required. The parent resource of the phrase matcher. */
  parent: string;
  /**
   * The maximum number of phrase matchers to return in the response. If this
   * value is zero, the service will select a default size. A call might return
   * fewer objects than requested. A non-empty `next_page_token` in the response
   * indicates that more data is available.
   */
  pageSize: number;
  /**
   * The value returned by the last `ListPhraseMatchersResponse`. This value
   * indicates that this is a continuation of a prior `ListPhraseMatchers` call
   * and that the system should return the next page of data.
   */
  pageToken: string;
  /**
   * A filter to reduce results to a specific subset. Useful for querying
   * phrase matchers with specific properties.
   */
  filter: string;
}

/** The response of listing phrase matchers. */
export interface ListPhraseMatchersResponse {
  /** The phrase matchers that match the request. */
  phraseMatchers: PhraseMatcher[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** The request to get a a phrase matcher. */
export interface GetPhraseMatcherRequest {
  /** Required. The name of the phrase matcher to get. */
  name: string;
}

/** The request to delete a phrase matcher. */
export interface DeletePhraseMatcherRequest {
  /** Required. The name of the phrase matcher to delete. */
  name: string;
}

/** The request to update a phrase matcher. */
export interface UpdatePhraseMatcherRequest {
  /** Required. The new values for the phrase matcher. */
  phraseMatcher:
    | PhraseMatcher
    | undefined;
  /** The list of fields to be updated. */
  updateMask: string[] | undefined;
}

/** The request to get project-level settings. */
export interface GetSettingsRequest {
  /** Required. The name of the settings resource to get. */
  name: string;
}

/** The request to update project-level settings. */
export interface UpdateSettingsRequest {
  /** Required. The new settings values. */
  settings:
    | Settings
    | undefined;
  /** Required. The list of fields to be updated. */
  updateMask: string[] | undefined;
}

/** The request to create a view. */
export interface CreateViewRequest {
  /**
   * Required. The parent resource of the view. Required. The location to create
   * a view for.
   * Format: `projects/<Project ID>/locations/<Location ID>` or
   * `projects/<Project Number>/locations/<Location ID>`
   */
  parent: string;
  /** Required. The view resource to create. */
  view: View | undefined;
}

/** The request to get a view. */
export interface GetViewRequest {
  /** Required. The name of the view to get. */
  name: string;
}

/** The request to list views. */
export interface ListViewsRequest {
  /** Required. The parent resource of the views. */
  parent: string;
  /**
   * The maximum number of views to return in the response. If this
   * value is zero, the service will select a default size. A call may return
   * fewer objects than requested. A non-empty `next_page_token` in the response
   * indicates that more data is available.
   */
  pageSize: number;
  /**
   * The value returned by the last `ListViewsResponse`; indicates
   * that this is a continuation of a prior `ListViews` call and
   * the system should return the next page of data.
   */
  pageToken: string;
}

/** The response of listing views. */
export interface ListViewsResponse {
  /** The views that match the request. */
  views: View[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** The request to update a view. */
export interface UpdateViewRequest {
  /** Required. The new view. */
  view:
    | View
    | undefined;
  /** The list of fields to be updated. */
  updateMask: string[] | undefined;
}

/** The request to delete a view. */
export interface DeleteViewRequest {
  /** Required. The name of the view to delete. */
  name: string;
}

function createBaseCalculateStatsRequest(): CalculateStatsRequest {
  return { location: "", filter: "" };
}

export const CalculateStatsRequest: MessageFns<CalculateStatsRequest> = {
  encode(message: CalculateStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== "") {
      writer.uint32(10).string(message.location);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateStatsRequest {
    return {
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: CalculateStatsRequest): unknown {
    const obj: any = {};
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<CalculateStatsRequest>): CalculateStatsRequest {
    return CalculateStatsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CalculateStatsRequest>): CalculateStatsRequest {
    const message = createBaseCalculateStatsRequest();
    message.location = object.location ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseCalculateStatsResponse(): CalculateStatsResponse {
  return {
    averageDuration: undefined,
    averageTurnCount: 0,
    conversationCount: 0,
    smartHighlighterMatches: {},
    customHighlighterMatches: {},
    issueMatches: {},
    issueMatchesStats: {},
    conversationCountTimeSeries: undefined,
  };
}

export const CalculateStatsResponse: MessageFns<CalculateStatsResponse> = {
  encode(message: CalculateStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.averageDuration !== undefined) {
      Duration.encode(message.averageDuration, writer.uint32(10).fork()).join();
    }
    if (message.averageTurnCount !== 0) {
      writer.uint32(16).int32(message.averageTurnCount);
    }
    if (message.conversationCount !== 0) {
      writer.uint32(24).int32(message.conversationCount);
    }
    Object.entries(message.smartHighlighterMatches).forEach(([key, value]) => {
      CalculateStatsResponse_SmartHighlighterMatchesEntry.encode({ key: key as any, value }, writer.uint32(34).fork())
        .join();
    });
    Object.entries(message.customHighlighterMatches).forEach(([key, value]) => {
      CalculateStatsResponse_CustomHighlighterMatchesEntry.encode({ key: key as any, value }, writer.uint32(42).fork())
        .join();
    });
    Object.entries(message.issueMatches).forEach(([key, value]) => {
      CalculateStatsResponse_IssueMatchesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    Object.entries(message.issueMatchesStats).forEach(([key, value]) => {
      CalculateStatsResponse_IssueMatchesStatsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    if (message.conversationCountTimeSeries !== undefined) {
      CalculateStatsResponse_TimeSeries.encode(message.conversationCountTimeSeries, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.averageDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.averageTurnCount = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.conversationCount = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = CalculateStatsResponse_SmartHighlighterMatchesEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.smartHighlighterMatches[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = CalculateStatsResponse_CustomHighlighterMatchesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.customHighlighterMatches[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = CalculateStatsResponse_IssueMatchesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.issueMatches[entry6.key] = entry6.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = CalculateStatsResponse_IssueMatchesStatsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.issueMatchesStats[entry8.key] = entry8.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.conversationCountTimeSeries = CalculateStatsResponse_TimeSeries.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateStatsResponse {
    return {
      averageDuration: isSet(object.averageDuration) ? Duration.fromJSON(object.averageDuration) : undefined,
      averageTurnCount: isSet(object.averageTurnCount) ? globalThis.Number(object.averageTurnCount) : 0,
      conversationCount: isSet(object.conversationCount) ? globalThis.Number(object.conversationCount) : 0,
      smartHighlighterMatches: isObject(object.smartHighlighterMatches)
        ? Object.entries(object.smartHighlighterMatches).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      customHighlighterMatches: isObject(object.customHighlighterMatches)
        ? Object.entries(object.customHighlighterMatches).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      issueMatches: isObject(object.issueMatches)
        ? Object.entries(object.issueMatches).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      issueMatchesStats: isObject(object.issueMatchesStats)
        ? Object.entries(object.issueMatchesStats).reduce<{ [key: string]: IssueModelLabelStats_IssueStats }>(
          (acc, [key, value]) => {
            acc[key] = IssueModelLabelStats_IssueStats.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      conversationCountTimeSeries: isSet(object.conversationCountTimeSeries)
        ? CalculateStatsResponse_TimeSeries.fromJSON(object.conversationCountTimeSeries)
        : undefined,
    };
  },

  toJSON(message: CalculateStatsResponse): unknown {
    const obj: any = {};
    if (message.averageDuration !== undefined) {
      obj.averageDuration = Duration.toJSON(message.averageDuration);
    }
    if (message.averageTurnCount !== 0) {
      obj.averageTurnCount = Math.round(message.averageTurnCount);
    }
    if (message.conversationCount !== 0) {
      obj.conversationCount = Math.round(message.conversationCount);
    }
    if (message.smartHighlighterMatches) {
      const entries = Object.entries(message.smartHighlighterMatches);
      if (entries.length > 0) {
        obj.smartHighlighterMatches = {};
        entries.forEach(([k, v]) => {
          obj.smartHighlighterMatches[k] = Math.round(v);
        });
      }
    }
    if (message.customHighlighterMatches) {
      const entries = Object.entries(message.customHighlighterMatches);
      if (entries.length > 0) {
        obj.customHighlighterMatches = {};
        entries.forEach(([k, v]) => {
          obj.customHighlighterMatches[k] = Math.round(v);
        });
      }
    }
    if (message.issueMatches) {
      const entries = Object.entries(message.issueMatches);
      if (entries.length > 0) {
        obj.issueMatches = {};
        entries.forEach(([k, v]) => {
          obj.issueMatches[k] = Math.round(v);
        });
      }
    }
    if (message.issueMatchesStats) {
      const entries = Object.entries(message.issueMatchesStats);
      if (entries.length > 0) {
        obj.issueMatchesStats = {};
        entries.forEach(([k, v]) => {
          obj.issueMatchesStats[k] = IssueModelLabelStats_IssueStats.toJSON(v);
        });
      }
    }
    if (message.conversationCountTimeSeries !== undefined) {
      obj.conversationCountTimeSeries = CalculateStatsResponse_TimeSeries.toJSON(message.conversationCountTimeSeries);
    }
    return obj;
  },

  create(base?: DeepPartial<CalculateStatsResponse>): CalculateStatsResponse {
    return CalculateStatsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CalculateStatsResponse>): CalculateStatsResponse {
    const message = createBaseCalculateStatsResponse();
    message.averageDuration = (object.averageDuration !== undefined && object.averageDuration !== null)
      ? Duration.fromPartial(object.averageDuration)
      : undefined;
    message.averageTurnCount = object.averageTurnCount ?? 0;
    message.conversationCount = object.conversationCount ?? 0;
    message.smartHighlighterMatches = Object.entries(object.smartHighlighterMatches ?? {}).reduce<
      { [key: string]: number }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Number(value);
      }
      return acc;
    }, {});
    message.customHighlighterMatches = Object.entries(object.customHighlighterMatches ?? {}).reduce<
      { [key: string]: number }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Number(value);
      }
      return acc;
    }, {});
    message.issueMatches = Object.entries(object.issueMatches ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.issueMatchesStats = Object.entries(object.issueMatchesStats ?? {}).reduce<
      { [key: string]: IssueModelLabelStats_IssueStats }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = IssueModelLabelStats_IssueStats.fromPartial(value);
      }
      return acc;
    }, {});
    message.conversationCountTimeSeries =
      (object.conversationCountTimeSeries !== undefined && object.conversationCountTimeSeries !== null)
        ? CalculateStatsResponse_TimeSeries.fromPartial(object.conversationCountTimeSeries)
        : undefined;
    return message;
  },
};

function createBaseCalculateStatsResponse_TimeSeries(): CalculateStatsResponse_TimeSeries {
  return { intervalDuration: undefined, points: [] };
}

export const CalculateStatsResponse_TimeSeries: MessageFns<CalculateStatsResponse_TimeSeries> = {
  encode(message: CalculateStatsResponse_TimeSeries, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.intervalDuration !== undefined) {
      Duration.encode(message.intervalDuration, writer.uint32(10).fork()).join();
    }
    for (const v of message.points) {
      CalculateStatsResponse_TimeSeries_Interval.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateStatsResponse_TimeSeries {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateStatsResponse_TimeSeries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.intervalDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.points.push(CalculateStatsResponse_TimeSeries_Interval.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateStatsResponse_TimeSeries {
    return {
      intervalDuration: isSet(object.intervalDuration) ? Duration.fromJSON(object.intervalDuration) : undefined,
      points: globalThis.Array.isArray(object?.points)
        ? object.points.map((e: any) => CalculateStatsResponse_TimeSeries_Interval.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CalculateStatsResponse_TimeSeries): unknown {
    const obj: any = {};
    if (message.intervalDuration !== undefined) {
      obj.intervalDuration = Duration.toJSON(message.intervalDuration);
    }
    if (message.points?.length) {
      obj.points = message.points.map((e) => CalculateStatsResponse_TimeSeries_Interval.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CalculateStatsResponse_TimeSeries>): CalculateStatsResponse_TimeSeries {
    return CalculateStatsResponse_TimeSeries.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CalculateStatsResponse_TimeSeries>): CalculateStatsResponse_TimeSeries {
    const message = createBaseCalculateStatsResponse_TimeSeries();
    message.intervalDuration = (object.intervalDuration !== undefined && object.intervalDuration !== null)
      ? Duration.fromPartial(object.intervalDuration)
      : undefined;
    message.points = object.points?.map((e) => CalculateStatsResponse_TimeSeries_Interval.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCalculateStatsResponse_TimeSeries_Interval(): CalculateStatsResponse_TimeSeries_Interval {
  return { startTime: undefined, conversationCount: 0 };
}

export const CalculateStatsResponse_TimeSeries_Interval: MessageFns<CalculateStatsResponse_TimeSeries_Interval> = {
  encode(message: CalculateStatsResponse_TimeSeries_Interval, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.conversationCount !== 0) {
      writer.uint32(16).int32(message.conversationCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateStatsResponse_TimeSeries_Interval {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateStatsResponse_TimeSeries_Interval();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.conversationCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateStatsResponse_TimeSeries_Interval {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      conversationCount: isSet(object.conversationCount) ? globalThis.Number(object.conversationCount) : 0,
    };
  },

  toJSON(message: CalculateStatsResponse_TimeSeries_Interval): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.conversationCount !== 0) {
      obj.conversationCount = Math.round(message.conversationCount);
    }
    return obj;
  },

  create(base?: DeepPartial<CalculateStatsResponse_TimeSeries_Interval>): CalculateStatsResponse_TimeSeries_Interval {
    return CalculateStatsResponse_TimeSeries_Interval.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CalculateStatsResponse_TimeSeries_Interval>,
  ): CalculateStatsResponse_TimeSeries_Interval {
    const message = createBaseCalculateStatsResponse_TimeSeries_Interval();
    message.startTime = object.startTime ?? undefined;
    message.conversationCount = object.conversationCount ?? 0;
    return message;
  },
};

function createBaseCalculateStatsResponse_SmartHighlighterMatchesEntry(): CalculateStatsResponse_SmartHighlighterMatchesEntry {
  return { key: "", value: 0 };
}

export const CalculateStatsResponse_SmartHighlighterMatchesEntry: MessageFns<
  CalculateStatsResponse_SmartHighlighterMatchesEntry
> = {
  encode(
    message: CalculateStatsResponse_SmartHighlighterMatchesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateStatsResponse_SmartHighlighterMatchesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateStatsResponse_SmartHighlighterMatchesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateStatsResponse_SmartHighlighterMatchesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: CalculateStatsResponse_SmartHighlighterMatchesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CalculateStatsResponse_SmartHighlighterMatchesEntry>,
  ): CalculateStatsResponse_SmartHighlighterMatchesEntry {
    return CalculateStatsResponse_SmartHighlighterMatchesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CalculateStatsResponse_SmartHighlighterMatchesEntry>,
  ): CalculateStatsResponse_SmartHighlighterMatchesEntry {
    const message = createBaseCalculateStatsResponse_SmartHighlighterMatchesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseCalculateStatsResponse_CustomHighlighterMatchesEntry(): CalculateStatsResponse_CustomHighlighterMatchesEntry {
  return { key: "", value: 0 };
}

export const CalculateStatsResponse_CustomHighlighterMatchesEntry: MessageFns<
  CalculateStatsResponse_CustomHighlighterMatchesEntry
> = {
  encode(
    message: CalculateStatsResponse_CustomHighlighterMatchesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateStatsResponse_CustomHighlighterMatchesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateStatsResponse_CustomHighlighterMatchesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateStatsResponse_CustomHighlighterMatchesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: CalculateStatsResponse_CustomHighlighterMatchesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CalculateStatsResponse_CustomHighlighterMatchesEntry>,
  ): CalculateStatsResponse_CustomHighlighterMatchesEntry {
    return CalculateStatsResponse_CustomHighlighterMatchesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CalculateStatsResponse_CustomHighlighterMatchesEntry>,
  ): CalculateStatsResponse_CustomHighlighterMatchesEntry {
    const message = createBaseCalculateStatsResponse_CustomHighlighterMatchesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseCalculateStatsResponse_IssueMatchesEntry(): CalculateStatsResponse_IssueMatchesEntry {
  return { key: "", value: 0 };
}

export const CalculateStatsResponse_IssueMatchesEntry: MessageFns<CalculateStatsResponse_IssueMatchesEntry> = {
  encode(message: CalculateStatsResponse_IssueMatchesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateStatsResponse_IssueMatchesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateStatsResponse_IssueMatchesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateStatsResponse_IssueMatchesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: CalculateStatsResponse_IssueMatchesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<CalculateStatsResponse_IssueMatchesEntry>): CalculateStatsResponse_IssueMatchesEntry {
    return CalculateStatsResponse_IssueMatchesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CalculateStatsResponse_IssueMatchesEntry>): CalculateStatsResponse_IssueMatchesEntry {
    const message = createBaseCalculateStatsResponse_IssueMatchesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseCalculateStatsResponse_IssueMatchesStatsEntry(): CalculateStatsResponse_IssueMatchesStatsEntry {
  return { key: "", value: undefined };
}

export const CalculateStatsResponse_IssueMatchesStatsEntry: MessageFns<CalculateStatsResponse_IssueMatchesStatsEntry> =
  {
    encode(
      message: CalculateStatsResponse_IssueMatchesStatsEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== undefined) {
        IssueModelLabelStats_IssueStats.encode(message.value, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): CalculateStatsResponse_IssueMatchesStatsEntry {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCalculateStatsResponse_IssueMatchesStatsEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.value = IssueModelLabelStats_IssueStats.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): CalculateStatsResponse_IssueMatchesStatsEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value) ? IssueModelLabelStats_IssueStats.fromJSON(object.value) : undefined,
      };
    },

    toJSON(message: CalculateStatsResponse_IssueMatchesStatsEntry): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== undefined) {
        obj.value = IssueModelLabelStats_IssueStats.toJSON(message.value);
      }
      return obj;
    },

    create(
      base?: DeepPartial<CalculateStatsResponse_IssueMatchesStatsEntry>,
    ): CalculateStatsResponse_IssueMatchesStatsEntry {
      return CalculateStatsResponse_IssueMatchesStatsEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<CalculateStatsResponse_IssueMatchesStatsEntry>,
    ): CalculateStatsResponse_IssueMatchesStatsEntry {
      const message = createBaseCalculateStatsResponse_IssueMatchesStatsEntry();
      message.key = object.key ?? "";
      message.value = (object.value !== undefined && object.value !== null)
        ? IssueModelLabelStats_IssueStats.fromPartial(object.value)
        : undefined;
      return message;
    },
  };

function createBaseCreateAnalysisOperationMetadata(): CreateAnalysisOperationMetadata {
  return { createTime: undefined, endTime: undefined, conversation: "", annotatorSelector: undefined };
}

export const CreateAnalysisOperationMetadata: MessageFns<CreateAnalysisOperationMetadata> = {
  encode(message: CreateAnalysisOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.conversation !== "") {
      writer.uint32(26).string(message.conversation);
    }
    if (message.annotatorSelector !== undefined) {
      AnnotatorSelector.encode(message.annotatorSelector, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAnalysisOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAnalysisOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.conversation = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.annotatorSelector = AnnotatorSelector.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAnalysisOperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      conversation: isSet(object.conversation) ? globalThis.String(object.conversation) : "",
      annotatorSelector: isSet(object.annotatorSelector)
        ? AnnotatorSelector.fromJSON(object.annotatorSelector)
        : undefined,
    };
  },

  toJSON(message: CreateAnalysisOperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.conversation !== "") {
      obj.conversation = message.conversation;
    }
    if (message.annotatorSelector !== undefined) {
      obj.annotatorSelector = AnnotatorSelector.toJSON(message.annotatorSelector);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAnalysisOperationMetadata>): CreateAnalysisOperationMetadata {
    return CreateAnalysisOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAnalysisOperationMetadata>): CreateAnalysisOperationMetadata {
    const message = createBaseCreateAnalysisOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.conversation = object.conversation ?? "";
    message.annotatorSelector = (object.annotatorSelector !== undefined && object.annotatorSelector !== null)
      ? AnnotatorSelector.fromPartial(object.annotatorSelector)
      : undefined;
    return message;
  },
};

function createBaseCreateConversationRequest(): CreateConversationRequest {
  return { parent: "", conversation: undefined, conversationId: "" };
}

export const CreateConversationRequest: MessageFns<CreateConversationRequest> = {
  encode(message: CreateConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.conversation !== undefined) {
      Conversation.encode(message.conversation, writer.uint32(18).fork()).join();
    }
    if (message.conversationId !== "") {
      writer.uint32(26).string(message.conversationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conversation = Conversation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.conversationId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConversationRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      conversation: isSet(object.conversation) ? Conversation.fromJSON(object.conversation) : undefined,
      conversationId: isSet(object.conversationId) ? globalThis.String(object.conversationId) : "",
    };
  },

  toJSON(message: CreateConversationRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.conversation !== undefined) {
      obj.conversation = Conversation.toJSON(message.conversation);
    }
    if (message.conversationId !== "") {
      obj.conversationId = message.conversationId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConversationRequest>): CreateConversationRequest {
    return CreateConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConversationRequest>): CreateConversationRequest {
    const message = createBaseCreateConversationRequest();
    message.parent = object.parent ?? "";
    message.conversation = (object.conversation !== undefined && object.conversation !== null)
      ? Conversation.fromPartial(object.conversation)
      : undefined;
    message.conversationId = object.conversationId ?? "";
    return message;
  },
};

function createBaseUploadConversationRequest(): UploadConversationRequest {
  return {
    parent: "",
    conversation: undefined,
    conversationId: "",
    redactionConfig: undefined,
    speechConfig: undefined,
  };
}

export const UploadConversationRequest: MessageFns<UploadConversationRequest> = {
  encode(message: UploadConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.conversation !== undefined) {
      Conversation.encode(message.conversation, writer.uint32(18).fork()).join();
    }
    if (message.conversationId !== "") {
      writer.uint32(26).string(message.conversationId);
    }
    if (message.redactionConfig !== undefined) {
      RedactionConfig.encode(message.redactionConfig, writer.uint32(34).fork()).join();
    }
    if (message.speechConfig !== undefined) {
      SpeechConfig.encode(message.speechConfig, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.conversation = Conversation.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.conversationId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.redactionConfig = RedactionConfig.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.speechConfig = SpeechConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadConversationRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      conversation: isSet(object.conversation) ? Conversation.fromJSON(object.conversation) : undefined,
      conversationId: isSet(object.conversationId) ? globalThis.String(object.conversationId) : "",
      redactionConfig: isSet(object.redactionConfig) ? RedactionConfig.fromJSON(object.redactionConfig) : undefined,
      speechConfig: isSet(object.speechConfig) ? SpeechConfig.fromJSON(object.speechConfig) : undefined,
    };
  },

  toJSON(message: UploadConversationRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.conversation !== undefined) {
      obj.conversation = Conversation.toJSON(message.conversation);
    }
    if (message.conversationId !== "") {
      obj.conversationId = message.conversationId;
    }
    if (message.redactionConfig !== undefined) {
      obj.redactionConfig = RedactionConfig.toJSON(message.redactionConfig);
    }
    if (message.speechConfig !== undefined) {
      obj.speechConfig = SpeechConfig.toJSON(message.speechConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<UploadConversationRequest>): UploadConversationRequest {
    return UploadConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadConversationRequest>): UploadConversationRequest {
    const message = createBaseUploadConversationRequest();
    message.parent = object.parent ?? "";
    message.conversation = (object.conversation !== undefined && object.conversation !== null)
      ? Conversation.fromPartial(object.conversation)
      : undefined;
    message.conversationId = object.conversationId ?? "";
    message.redactionConfig = (object.redactionConfig !== undefined && object.redactionConfig !== null)
      ? RedactionConfig.fromPartial(object.redactionConfig)
      : undefined;
    message.speechConfig = (object.speechConfig !== undefined && object.speechConfig !== null)
      ? SpeechConfig.fromPartial(object.speechConfig)
      : undefined;
    return message;
  },
};

function createBaseUploadConversationMetadata(): UploadConversationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    request: undefined,
    analysisOperation: "",
    appliedRedactionConfig: undefined,
  };
}

export const UploadConversationMetadata: MessageFns<UploadConversationMetadata> = {
  encode(message: UploadConversationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.request !== undefined) {
      UploadConversationRequest.encode(message.request, writer.uint32(26).fork()).join();
    }
    if (message.analysisOperation !== "") {
      writer.uint32(34).string(message.analysisOperation);
    }
    if (message.appliedRedactionConfig !== undefined) {
      RedactionConfig.encode(message.appliedRedactionConfig, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadConversationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadConversationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.request = UploadConversationRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.analysisOperation = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.appliedRedactionConfig = RedactionConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadConversationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      request: isSet(object.request) ? UploadConversationRequest.fromJSON(object.request) : undefined,
      analysisOperation: isSet(object.analysisOperation) ? globalThis.String(object.analysisOperation) : "",
      appliedRedactionConfig: isSet(object.appliedRedactionConfig)
        ? RedactionConfig.fromJSON(object.appliedRedactionConfig)
        : undefined,
    };
  },

  toJSON(message: UploadConversationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.request !== undefined) {
      obj.request = UploadConversationRequest.toJSON(message.request);
    }
    if (message.analysisOperation !== "") {
      obj.analysisOperation = message.analysisOperation;
    }
    if (message.appliedRedactionConfig !== undefined) {
      obj.appliedRedactionConfig = RedactionConfig.toJSON(message.appliedRedactionConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<UploadConversationMetadata>): UploadConversationMetadata {
    return UploadConversationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadConversationMetadata>): UploadConversationMetadata {
    const message = createBaseUploadConversationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? UploadConversationRequest.fromPartial(object.request)
      : undefined;
    message.analysisOperation = object.analysisOperation ?? "";
    message.appliedRedactionConfig =
      (object.appliedRedactionConfig !== undefined && object.appliedRedactionConfig !== null)
        ? RedactionConfig.fromPartial(object.appliedRedactionConfig)
        : undefined;
    return message;
  },
};

function createBaseListConversationsRequest(): ListConversationsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", view: 0 };
}

export const ListConversationsRequest: MessageFns<ListConversationsRequest> = {
  encode(message: ListConversationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.view !== 0) {
      writer.uint32(40).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      view: isSet(object.view) ? conversationViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListConversationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.view !== 0) {
      obj.view = conversationViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversationsRequest>): ListConversationsRequest {
    return ListConversationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversationsRequest>): ListConversationsRequest {
    const message = createBaseListConversationsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListConversationsResponse(): ListConversationsResponse {
  return { conversations: [], nextPageToken: "" };
}

export const ListConversationsResponse: MessageFns<ListConversationsResponse> = {
  encode(message: ListConversationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversations) {
      Conversation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversations.push(Conversation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversationsResponse {
    return {
      conversations: globalThis.Array.isArray(object?.conversations)
        ? object.conversations.map((e: any) => Conversation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListConversationsResponse): unknown {
    const obj: any = {};
    if (message.conversations?.length) {
      obj.conversations = message.conversations.map((e) => Conversation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConversationsResponse>): ListConversationsResponse {
    return ListConversationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConversationsResponse>): ListConversationsResponse {
    const message = createBaseListConversationsResponse();
    message.conversations = object.conversations?.map((e) => Conversation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetConversationRequest(): GetConversationRequest {
  return { name: "", view: 0 };
}

export const GetConversationRequest: MessageFns<GetConversationRequest> = {
  encode(message: GetConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConversationRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? conversationViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetConversationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = conversationViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetConversationRequest>): GetConversationRequest {
    return GetConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConversationRequest>): GetConversationRequest {
    const message = createBaseGetConversationRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseUpdateConversationRequest(): UpdateConversationRequest {
  return { conversation: undefined, updateMask: undefined };
}

export const UpdateConversationRequest: MessageFns<UpdateConversationRequest> = {
  encode(message: UpdateConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversation !== undefined) {
      Conversation.encode(message.conversation, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.conversation = Conversation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConversationRequest {
    return {
      conversation: isSet(object.conversation) ? Conversation.fromJSON(object.conversation) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateConversationRequest): unknown {
    const obj: any = {};
    if (message.conversation !== undefined) {
      obj.conversation = Conversation.toJSON(message.conversation);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConversationRequest>): UpdateConversationRequest {
    return UpdateConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConversationRequest>): UpdateConversationRequest {
    const message = createBaseUpdateConversationRequest();
    message.conversation = (object.conversation !== undefined && object.conversation !== null)
      ? Conversation.fromPartial(object.conversation)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteConversationRequest(): DeleteConversationRequest {
  return { name: "", force: false };
}

export const DeleteConversationRequest: MessageFns<DeleteConversationRequest> = {
  encode(message: DeleteConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConversationRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteConversationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConversationRequest>): DeleteConversationRequest {
    return DeleteConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConversationRequest>): DeleteConversationRequest {
    const message = createBaseDeleteConversationRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseIngestConversationsRequest(): IngestConversationsRequest {
  return {
    gcsSource: undefined,
    transcriptObjectConfig: undefined,
    parent: "",
    conversationConfig: undefined,
    redactionConfig: undefined,
    speechConfig: undefined,
  };
}

export const IngestConversationsRequest: MessageFns<IngestConversationsRequest> = {
  encode(message: IngestConversationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsSource !== undefined) {
      IngestConversationsRequest_GcsSource.encode(message.gcsSource, writer.uint32(18).fork()).join();
    }
    if (message.transcriptObjectConfig !== undefined) {
      IngestConversationsRequest_TranscriptObjectConfig.encode(message.transcriptObjectConfig, writer.uint32(26).fork())
        .join();
    }
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.conversationConfig !== undefined) {
      IngestConversationsRequest_ConversationConfig.encode(message.conversationConfig, writer.uint32(34).fork()).join();
    }
    if (message.redactionConfig !== undefined) {
      RedactionConfig.encode(message.redactionConfig, writer.uint32(42).fork()).join();
    }
    if (message.speechConfig !== undefined) {
      SpeechConfig.encode(message.speechConfig, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestConversationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestConversationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsSource = IngestConversationsRequest_GcsSource.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.transcriptObjectConfig = IngestConversationsRequest_TranscriptObjectConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.conversationConfig = IngestConversationsRequest_ConversationConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.redactionConfig = RedactionConfig.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.speechConfig = SpeechConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestConversationsRequest {
    return {
      gcsSource: isSet(object.gcsSource) ? IngestConversationsRequest_GcsSource.fromJSON(object.gcsSource) : undefined,
      transcriptObjectConfig: isSet(object.transcriptObjectConfig)
        ? IngestConversationsRequest_TranscriptObjectConfig.fromJSON(object.transcriptObjectConfig)
        : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      conversationConfig: isSet(object.conversationConfig)
        ? IngestConversationsRequest_ConversationConfig.fromJSON(object.conversationConfig)
        : undefined,
      redactionConfig: isSet(object.redactionConfig) ? RedactionConfig.fromJSON(object.redactionConfig) : undefined,
      speechConfig: isSet(object.speechConfig) ? SpeechConfig.fromJSON(object.speechConfig) : undefined,
    };
  },

  toJSON(message: IngestConversationsRequest): unknown {
    const obj: any = {};
    if (message.gcsSource !== undefined) {
      obj.gcsSource = IngestConversationsRequest_GcsSource.toJSON(message.gcsSource);
    }
    if (message.transcriptObjectConfig !== undefined) {
      obj.transcriptObjectConfig = IngestConversationsRequest_TranscriptObjectConfig.toJSON(
        message.transcriptObjectConfig,
      );
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.conversationConfig !== undefined) {
      obj.conversationConfig = IngestConversationsRequest_ConversationConfig.toJSON(message.conversationConfig);
    }
    if (message.redactionConfig !== undefined) {
      obj.redactionConfig = RedactionConfig.toJSON(message.redactionConfig);
    }
    if (message.speechConfig !== undefined) {
      obj.speechConfig = SpeechConfig.toJSON(message.speechConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<IngestConversationsRequest>): IngestConversationsRequest {
    return IngestConversationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IngestConversationsRequest>): IngestConversationsRequest {
    const message = createBaseIngestConversationsRequest();
    message.gcsSource = (object.gcsSource !== undefined && object.gcsSource !== null)
      ? IngestConversationsRequest_GcsSource.fromPartial(object.gcsSource)
      : undefined;
    message.transcriptObjectConfig =
      (object.transcriptObjectConfig !== undefined && object.transcriptObjectConfig !== null)
        ? IngestConversationsRequest_TranscriptObjectConfig.fromPartial(object.transcriptObjectConfig)
        : undefined;
    message.parent = object.parent ?? "";
    message.conversationConfig = (object.conversationConfig !== undefined && object.conversationConfig !== null)
      ? IngestConversationsRequest_ConversationConfig.fromPartial(object.conversationConfig)
      : undefined;
    message.redactionConfig = (object.redactionConfig !== undefined && object.redactionConfig !== null)
      ? RedactionConfig.fromPartial(object.redactionConfig)
      : undefined;
    message.speechConfig = (object.speechConfig !== undefined && object.speechConfig !== null)
      ? SpeechConfig.fromPartial(object.speechConfig)
      : undefined;
    return message;
  },
};

function createBaseIngestConversationsRequest_GcsSource(): IngestConversationsRequest_GcsSource {
  return { bucketUri: "", bucketObjectType: 0 };
}

export const IngestConversationsRequest_GcsSource: MessageFns<IngestConversationsRequest_GcsSource> = {
  encode(message: IngestConversationsRequest_GcsSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucketUri !== "") {
      writer.uint32(10).string(message.bucketUri);
    }
    if (message.bucketObjectType !== 0) {
      writer.uint32(16).int32(message.bucketObjectType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestConversationsRequest_GcsSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestConversationsRequest_GcsSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucketUri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.bucketObjectType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestConversationsRequest_GcsSource {
    return {
      bucketUri: isSet(object.bucketUri) ? globalThis.String(object.bucketUri) : "",
      bucketObjectType: isSet(object.bucketObjectType)
        ? ingestConversationsRequest_GcsSource_BucketObjectTypeFromJSON(object.bucketObjectType)
        : 0,
    };
  },

  toJSON(message: IngestConversationsRequest_GcsSource): unknown {
    const obj: any = {};
    if (message.bucketUri !== "") {
      obj.bucketUri = message.bucketUri;
    }
    if (message.bucketObjectType !== 0) {
      obj.bucketObjectType = ingestConversationsRequest_GcsSource_BucketObjectTypeToJSON(message.bucketObjectType);
    }
    return obj;
  },

  create(base?: DeepPartial<IngestConversationsRequest_GcsSource>): IngestConversationsRequest_GcsSource {
    return IngestConversationsRequest_GcsSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IngestConversationsRequest_GcsSource>): IngestConversationsRequest_GcsSource {
    const message = createBaseIngestConversationsRequest_GcsSource();
    message.bucketUri = object.bucketUri ?? "";
    message.bucketObjectType = object.bucketObjectType ?? 0;
    return message;
  },
};

function createBaseIngestConversationsRequest_TranscriptObjectConfig(): IngestConversationsRequest_TranscriptObjectConfig {
  return { medium: 0 };
}

export const IngestConversationsRequest_TranscriptObjectConfig: MessageFns<
  IngestConversationsRequest_TranscriptObjectConfig
> = {
  encode(
    message: IngestConversationsRequest_TranscriptObjectConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.medium !== 0) {
      writer.uint32(8).int32(message.medium);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestConversationsRequest_TranscriptObjectConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestConversationsRequest_TranscriptObjectConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.medium = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestConversationsRequest_TranscriptObjectConfig {
    return { medium: isSet(object.medium) ? conversation_MediumFromJSON(object.medium) : 0 };
  },

  toJSON(message: IngestConversationsRequest_TranscriptObjectConfig): unknown {
    const obj: any = {};
    if (message.medium !== 0) {
      obj.medium = conversation_MediumToJSON(message.medium);
    }
    return obj;
  },

  create(
    base?: DeepPartial<IngestConversationsRequest_TranscriptObjectConfig>,
  ): IngestConversationsRequest_TranscriptObjectConfig {
    return IngestConversationsRequest_TranscriptObjectConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<IngestConversationsRequest_TranscriptObjectConfig>,
  ): IngestConversationsRequest_TranscriptObjectConfig {
    const message = createBaseIngestConversationsRequest_TranscriptObjectConfig();
    message.medium = object.medium ?? 0;
    return message;
  },
};

function createBaseIngestConversationsRequest_ConversationConfig(): IngestConversationsRequest_ConversationConfig {
  return { agentId: "", agentChannel: 0, customerChannel: 0 };
}

export const IngestConversationsRequest_ConversationConfig: MessageFns<IngestConversationsRequest_ConversationConfig> =
  {
    encode(
      message: IngestConversationsRequest_ConversationConfig,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.agentId !== "") {
        writer.uint32(10).string(message.agentId);
      }
      if (message.agentChannel !== 0) {
        writer.uint32(16).int32(message.agentChannel);
      }
      if (message.customerChannel !== 0) {
        writer.uint32(24).int32(message.customerChannel);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): IngestConversationsRequest_ConversationConfig {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseIngestConversationsRequest_ConversationConfig();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.agentId = reader.string();
            continue;
          case 2:
            if (tag !== 16) {
              break;
            }

            message.agentChannel = reader.int32();
            continue;
          case 3:
            if (tag !== 24) {
              break;
            }

            message.customerChannel = reader.int32();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): IngestConversationsRequest_ConversationConfig {
      return {
        agentId: isSet(object.agentId) ? globalThis.String(object.agentId) : "",
        agentChannel: isSet(object.agentChannel) ? globalThis.Number(object.agentChannel) : 0,
        customerChannel: isSet(object.customerChannel) ? globalThis.Number(object.customerChannel) : 0,
      };
    },

    toJSON(message: IngestConversationsRequest_ConversationConfig): unknown {
      const obj: any = {};
      if (message.agentId !== "") {
        obj.agentId = message.agentId;
      }
      if (message.agentChannel !== 0) {
        obj.agentChannel = Math.round(message.agentChannel);
      }
      if (message.customerChannel !== 0) {
        obj.customerChannel = Math.round(message.customerChannel);
      }
      return obj;
    },

    create(
      base?: DeepPartial<IngestConversationsRequest_ConversationConfig>,
    ): IngestConversationsRequest_ConversationConfig {
      return IngestConversationsRequest_ConversationConfig.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<IngestConversationsRequest_ConversationConfig>,
    ): IngestConversationsRequest_ConversationConfig {
      const message = createBaseIngestConversationsRequest_ConversationConfig();
      message.agentId = object.agentId ?? "";
      message.agentChannel = object.agentChannel ?? 0;
      message.customerChannel = object.customerChannel ?? 0;
      return message;
    },
  };

function createBaseIngestConversationsMetadata(): IngestConversationsMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    request: undefined,
    partialErrors: [],
    ingestConversationsStats: undefined,
  };
}

export const IngestConversationsMetadata: MessageFns<IngestConversationsMetadata> = {
  encode(message: IngestConversationsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.request !== undefined) {
      IngestConversationsRequest.encode(message.request, writer.uint32(26).fork()).join();
    }
    for (const v of message.partialErrors) {
      Status.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.ingestConversationsStats !== undefined) {
      IngestConversationsMetadata_IngestConversationsStats.encode(
        message.ingestConversationsStats,
        writer.uint32(42).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestConversationsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestConversationsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.request = IngestConversationsRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.partialErrors.push(Status.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ingestConversationsStats = IngestConversationsMetadata_IngestConversationsStats.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestConversationsMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      request: isSet(object.request) ? IngestConversationsRequest.fromJSON(object.request) : undefined,
      partialErrors: globalThis.Array.isArray(object?.partialErrors)
        ? object.partialErrors.map((e: any) => Status.fromJSON(e))
        : [],
      ingestConversationsStats: isSet(object.ingestConversationsStats)
        ? IngestConversationsMetadata_IngestConversationsStats.fromJSON(object.ingestConversationsStats)
        : undefined,
    };
  },

  toJSON(message: IngestConversationsMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.request !== undefined) {
      obj.request = IngestConversationsRequest.toJSON(message.request);
    }
    if (message.partialErrors?.length) {
      obj.partialErrors = message.partialErrors.map((e) => Status.toJSON(e));
    }
    if (message.ingestConversationsStats !== undefined) {
      obj.ingestConversationsStats = IngestConversationsMetadata_IngestConversationsStats.toJSON(
        message.ingestConversationsStats,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<IngestConversationsMetadata>): IngestConversationsMetadata {
    return IngestConversationsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IngestConversationsMetadata>): IngestConversationsMetadata {
    const message = createBaseIngestConversationsMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? IngestConversationsRequest.fromPartial(object.request)
      : undefined;
    message.partialErrors = object.partialErrors?.map((e) => Status.fromPartial(e)) || [];
    message.ingestConversationsStats =
      (object.ingestConversationsStats !== undefined && object.ingestConversationsStats !== null)
        ? IngestConversationsMetadata_IngestConversationsStats.fromPartial(object.ingestConversationsStats)
        : undefined;
    return message;
  },
};

function createBaseIngestConversationsMetadata_IngestConversationsStats(): IngestConversationsMetadata_IngestConversationsStats {
  return { processedObjectCount: 0, duplicatesSkippedCount: 0, successfulIngestCount: 0, failedIngestCount: 0 };
}

export const IngestConversationsMetadata_IngestConversationsStats: MessageFns<
  IngestConversationsMetadata_IngestConversationsStats
> = {
  encode(
    message: IngestConversationsMetadata_IngestConversationsStats,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.processedObjectCount !== 0) {
      writer.uint32(8).int32(message.processedObjectCount);
    }
    if (message.duplicatesSkippedCount !== 0) {
      writer.uint32(16).int32(message.duplicatesSkippedCount);
    }
    if (message.successfulIngestCount !== 0) {
      writer.uint32(24).int32(message.successfulIngestCount);
    }
    if (message.failedIngestCount !== 0) {
      writer.uint32(32).int32(message.failedIngestCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestConversationsMetadata_IngestConversationsStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestConversationsMetadata_IngestConversationsStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.processedObjectCount = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.duplicatesSkippedCount = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.successfulIngestCount = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.failedIngestCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestConversationsMetadata_IngestConversationsStats {
    return {
      processedObjectCount: isSet(object.processedObjectCount) ? globalThis.Number(object.processedObjectCount) : 0,
      duplicatesSkippedCount: isSet(object.duplicatesSkippedCount)
        ? globalThis.Number(object.duplicatesSkippedCount)
        : 0,
      successfulIngestCount: isSet(object.successfulIngestCount) ? globalThis.Number(object.successfulIngestCount) : 0,
      failedIngestCount: isSet(object.failedIngestCount) ? globalThis.Number(object.failedIngestCount) : 0,
    };
  },

  toJSON(message: IngestConversationsMetadata_IngestConversationsStats): unknown {
    const obj: any = {};
    if (message.processedObjectCount !== 0) {
      obj.processedObjectCount = Math.round(message.processedObjectCount);
    }
    if (message.duplicatesSkippedCount !== 0) {
      obj.duplicatesSkippedCount = Math.round(message.duplicatesSkippedCount);
    }
    if (message.successfulIngestCount !== 0) {
      obj.successfulIngestCount = Math.round(message.successfulIngestCount);
    }
    if (message.failedIngestCount !== 0) {
      obj.failedIngestCount = Math.round(message.failedIngestCount);
    }
    return obj;
  },

  create(
    base?: DeepPartial<IngestConversationsMetadata_IngestConversationsStats>,
  ): IngestConversationsMetadata_IngestConversationsStats {
    return IngestConversationsMetadata_IngestConversationsStats.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<IngestConversationsMetadata_IngestConversationsStats>,
  ): IngestConversationsMetadata_IngestConversationsStats {
    const message = createBaseIngestConversationsMetadata_IngestConversationsStats();
    message.processedObjectCount = object.processedObjectCount ?? 0;
    message.duplicatesSkippedCount = object.duplicatesSkippedCount ?? 0;
    message.successfulIngestCount = object.successfulIngestCount ?? 0;
    message.failedIngestCount = object.failedIngestCount ?? 0;
    return message;
  },
};

function createBaseIngestConversationsResponse(): IngestConversationsResponse {
  return {};
}

export const IngestConversationsResponse: MessageFns<IngestConversationsResponse> = {
  encode(_: IngestConversationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestConversationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestConversationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IngestConversationsResponse {
    return {};
  },

  toJSON(_: IngestConversationsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<IngestConversationsResponse>): IngestConversationsResponse {
    return IngestConversationsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<IngestConversationsResponse>): IngestConversationsResponse {
    const message = createBaseIngestConversationsResponse();
    return message;
  },
};

function createBaseCreateAnalysisRequest(): CreateAnalysisRequest {
  return { parent: "", analysis: undefined };
}

export const CreateAnalysisRequest: MessageFns<CreateAnalysisRequest> = {
  encode(message: CreateAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.analysis !== undefined) {
      Analysis.encode(message.analysis, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.analysis = Analysis.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAnalysisRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      analysis: isSet(object.analysis) ? Analysis.fromJSON(object.analysis) : undefined,
    };
  },

  toJSON(message: CreateAnalysisRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.analysis !== undefined) {
      obj.analysis = Analysis.toJSON(message.analysis);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAnalysisRequest>): CreateAnalysisRequest {
    return CreateAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAnalysisRequest>): CreateAnalysisRequest {
    const message = createBaseCreateAnalysisRequest();
    message.parent = object.parent ?? "";
    message.analysis = (object.analysis !== undefined && object.analysis !== null)
      ? Analysis.fromPartial(object.analysis)
      : undefined;
    return message;
  },
};

function createBaseListAnalysesRequest(): ListAnalysesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListAnalysesRequest: MessageFns<ListAnalysesRequest> = {
  encode(message: ListAnalysesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnalysesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnalysesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnalysesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListAnalysesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnalysesRequest>): ListAnalysesRequest {
    return ListAnalysesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnalysesRequest>): ListAnalysesRequest {
    const message = createBaseListAnalysesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListAnalysesResponse(): ListAnalysesResponse {
  return { analyses: [], nextPageToken: "" };
}

export const ListAnalysesResponse: MessageFns<ListAnalysesResponse> = {
  encode(message: ListAnalysesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.analyses) {
      Analysis.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnalysesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnalysesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.analyses.push(Analysis.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnalysesResponse {
    return {
      analyses: globalThis.Array.isArray(object?.analyses) ? object.analyses.map((e: any) => Analysis.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAnalysesResponse): unknown {
    const obj: any = {};
    if (message.analyses?.length) {
      obj.analyses = message.analyses.map((e) => Analysis.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnalysesResponse>): ListAnalysesResponse {
    return ListAnalysesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnalysesResponse>): ListAnalysesResponse {
    const message = createBaseListAnalysesResponse();
    message.analyses = object.analyses?.map((e) => Analysis.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetAnalysisRequest(): GetAnalysisRequest {
  return { name: "" };
}

export const GetAnalysisRequest: MessageFns<GetAnalysisRequest> = {
  encode(message: GetAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAnalysisRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAnalysisRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAnalysisRequest>): GetAnalysisRequest {
    return GetAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAnalysisRequest>): GetAnalysisRequest {
    const message = createBaseGetAnalysisRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteAnalysisRequest(): DeleteAnalysisRequest {
  return { name: "" };
}

export const DeleteAnalysisRequest: MessageFns<DeleteAnalysisRequest> = {
  encode(message: DeleteAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAnalysisRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAnalysisRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAnalysisRequest>): DeleteAnalysisRequest {
    return DeleteAnalysisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAnalysisRequest>): DeleteAnalysisRequest {
    const message = createBaseDeleteAnalysisRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBulkAnalyzeConversationsRequest(): BulkAnalyzeConversationsRequest {
  return { parent: "", filter: "", analysisPercentage: 0, annotatorSelector: undefined };
}

export const BulkAnalyzeConversationsRequest: MessageFns<BulkAnalyzeConversationsRequest> = {
  encode(message: BulkAnalyzeConversationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.analysisPercentage !== 0) {
      writer.uint32(29).float(message.analysisPercentage);
    }
    if (message.annotatorSelector !== undefined) {
      AnnotatorSelector.encode(message.annotatorSelector, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulkAnalyzeConversationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkAnalyzeConversationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.analysisPercentage = reader.float();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.annotatorSelector = AnnotatorSelector.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkAnalyzeConversationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      analysisPercentage: isSet(object.analysisPercentage) ? globalThis.Number(object.analysisPercentage) : 0,
      annotatorSelector: isSet(object.annotatorSelector)
        ? AnnotatorSelector.fromJSON(object.annotatorSelector)
        : undefined,
    };
  },

  toJSON(message: BulkAnalyzeConversationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.analysisPercentage !== 0) {
      obj.analysisPercentage = message.analysisPercentage;
    }
    if (message.annotatorSelector !== undefined) {
      obj.annotatorSelector = AnnotatorSelector.toJSON(message.annotatorSelector);
    }
    return obj;
  },

  create(base?: DeepPartial<BulkAnalyzeConversationsRequest>): BulkAnalyzeConversationsRequest {
    return BulkAnalyzeConversationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkAnalyzeConversationsRequest>): BulkAnalyzeConversationsRequest {
    const message = createBaseBulkAnalyzeConversationsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.analysisPercentage = object.analysisPercentage ?? 0;
    message.annotatorSelector = (object.annotatorSelector !== undefined && object.annotatorSelector !== null)
      ? AnnotatorSelector.fromPartial(object.annotatorSelector)
      : undefined;
    return message;
  },
};

function createBaseBulkAnalyzeConversationsMetadata(): BulkAnalyzeConversationsMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    request: undefined,
    completedAnalysesCount: 0,
    failedAnalysesCount: 0,
    totalRequestedAnalysesCount: 0,
    partialErrors: [],
  };
}

export const BulkAnalyzeConversationsMetadata: MessageFns<BulkAnalyzeConversationsMetadata> = {
  encode(message: BulkAnalyzeConversationsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.request !== undefined) {
      BulkAnalyzeConversationsRequest.encode(message.request, writer.uint32(26).fork()).join();
    }
    if (message.completedAnalysesCount !== 0) {
      writer.uint32(32).int32(message.completedAnalysesCount);
    }
    if (message.failedAnalysesCount !== 0) {
      writer.uint32(40).int32(message.failedAnalysesCount);
    }
    if (message.totalRequestedAnalysesCount !== 0) {
      writer.uint32(48).int32(message.totalRequestedAnalysesCount);
    }
    for (const v of message.partialErrors) {
      Status.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulkAnalyzeConversationsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkAnalyzeConversationsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.request = BulkAnalyzeConversationsRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.completedAnalysesCount = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.failedAnalysesCount = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.totalRequestedAnalysesCount = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.partialErrors.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkAnalyzeConversationsMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      request: isSet(object.request) ? BulkAnalyzeConversationsRequest.fromJSON(object.request) : undefined,
      completedAnalysesCount: isSet(object.completedAnalysesCount)
        ? globalThis.Number(object.completedAnalysesCount)
        : 0,
      failedAnalysesCount: isSet(object.failedAnalysesCount) ? globalThis.Number(object.failedAnalysesCount) : 0,
      totalRequestedAnalysesCount: isSet(object.totalRequestedAnalysesCount)
        ? globalThis.Number(object.totalRequestedAnalysesCount)
        : 0,
      partialErrors: globalThis.Array.isArray(object?.partialErrors)
        ? object.partialErrors.map((e: any) => Status.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BulkAnalyzeConversationsMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.request !== undefined) {
      obj.request = BulkAnalyzeConversationsRequest.toJSON(message.request);
    }
    if (message.completedAnalysesCount !== 0) {
      obj.completedAnalysesCount = Math.round(message.completedAnalysesCount);
    }
    if (message.failedAnalysesCount !== 0) {
      obj.failedAnalysesCount = Math.round(message.failedAnalysesCount);
    }
    if (message.totalRequestedAnalysesCount !== 0) {
      obj.totalRequestedAnalysesCount = Math.round(message.totalRequestedAnalysesCount);
    }
    if (message.partialErrors?.length) {
      obj.partialErrors = message.partialErrors.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BulkAnalyzeConversationsMetadata>): BulkAnalyzeConversationsMetadata {
    return BulkAnalyzeConversationsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkAnalyzeConversationsMetadata>): BulkAnalyzeConversationsMetadata {
    const message = createBaseBulkAnalyzeConversationsMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? BulkAnalyzeConversationsRequest.fromPartial(object.request)
      : undefined;
    message.completedAnalysesCount = object.completedAnalysesCount ?? 0;
    message.failedAnalysesCount = object.failedAnalysesCount ?? 0;
    message.totalRequestedAnalysesCount = object.totalRequestedAnalysesCount ?? 0;
    message.partialErrors = object.partialErrors?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBulkAnalyzeConversationsResponse(): BulkAnalyzeConversationsResponse {
  return { successfulAnalysisCount: 0, failedAnalysisCount: 0 };
}

export const BulkAnalyzeConversationsResponse: MessageFns<BulkAnalyzeConversationsResponse> = {
  encode(message: BulkAnalyzeConversationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.successfulAnalysisCount !== 0) {
      writer.uint32(8).int32(message.successfulAnalysisCount);
    }
    if (message.failedAnalysisCount !== 0) {
      writer.uint32(16).int32(message.failedAnalysisCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulkAnalyzeConversationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkAnalyzeConversationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.successfulAnalysisCount = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.failedAnalysisCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkAnalyzeConversationsResponse {
    return {
      successfulAnalysisCount: isSet(object.successfulAnalysisCount)
        ? globalThis.Number(object.successfulAnalysisCount)
        : 0,
      failedAnalysisCount: isSet(object.failedAnalysisCount) ? globalThis.Number(object.failedAnalysisCount) : 0,
    };
  },

  toJSON(message: BulkAnalyzeConversationsResponse): unknown {
    const obj: any = {};
    if (message.successfulAnalysisCount !== 0) {
      obj.successfulAnalysisCount = Math.round(message.successfulAnalysisCount);
    }
    if (message.failedAnalysisCount !== 0) {
      obj.failedAnalysisCount = Math.round(message.failedAnalysisCount);
    }
    return obj;
  },

  create(base?: DeepPartial<BulkAnalyzeConversationsResponse>): BulkAnalyzeConversationsResponse {
    return BulkAnalyzeConversationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkAnalyzeConversationsResponse>): BulkAnalyzeConversationsResponse {
    const message = createBaseBulkAnalyzeConversationsResponse();
    message.successfulAnalysisCount = object.successfulAnalysisCount ?? 0;
    message.failedAnalysisCount = object.failedAnalysisCount ?? 0;
    return message;
  },
};

function createBaseBulkDeleteConversationsRequest(): BulkDeleteConversationsRequest {
  return { parent: "", filter: "", maxDeleteCount: 0, force: false };
}

export const BulkDeleteConversationsRequest: MessageFns<BulkDeleteConversationsRequest> = {
  encode(message: BulkDeleteConversationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.maxDeleteCount !== 0) {
      writer.uint32(24).int32(message.maxDeleteCount);
    }
    if (message.force !== false) {
      writer.uint32(32).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulkDeleteConversationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkDeleteConversationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxDeleteCount = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkDeleteConversationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      maxDeleteCount: isSet(object.maxDeleteCount) ? globalThis.Number(object.maxDeleteCount) : 0,
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: BulkDeleteConversationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.maxDeleteCount !== 0) {
      obj.maxDeleteCount = Math.round(message.maxDeleteCount);
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<BulkDeleteConversationsRequest>): BulkDeleteConversationsRequest {
    return BulkDeleteConversationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkDeleteConversationsRequest>): BulkDeleteConversationsRequest {
    const message = createBaseBulkDeleteConversationsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.maxDeleteCount = object.maxDeleteCount ?? 0;
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseBulkDeleteConversationsMetadata(): BulkDeleteConversationsMetadata {
  return { createTime: undefined, endTime: undefined, request: undefined, partialErrors: [] };
}

export const BulkDeleteConversationsMetadata: MessageFns<BulkDeleteConversationsMetadata> = {
  encode(message: BulkDeleteConversationsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.request !== undefined) {
      BulkDeleteConversationsRequest.encode(message.request, writer.uint32(26).fork()).join();
    }
    for (const v of message.partialErrors) {
      Status.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulkDeleteConversationsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkDeleteConversationsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.request = BulkDeleteConversationsRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.partialErrors.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulkDeleteConversationsMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      request: isSet(object.request) ? BulkDeleteConversationsRequest.fromJSON(object.request) : undefined,
      partialErrors: globalThis.Array.isArray(object?.partialErrors)
        ? object.partialErrors.map((e: any) => Status.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BulkDeleteConversationsMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.request !== undefined) {
      obj.request = BulkDeleteConversationsRequest.toJSON(message.request);
    }
    if (message.partialErrors?.length) {
      obj.partialErrors = message.partialErrors.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BulkDeleteConversationsMetadata>): BulkDeleteConversationsMetadata {
    return BulkDeleteConversationsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkDeleteConversationsMetadata>): BulkDeleteConversationsMetadata {
    const message = createBaseBulkDeleteConversationsMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? BulkDeleteConversationsRequest.fromPartial(object.request)
      : undefined;
    message.partialErrors = object.partialErrors?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBulkDeleteConversationsResponse(): BulkDeleteConversationsResponse {
  return {};
}

export const BulkDeleteConversationsResponse: MessageFns<BulkDeleteConversationsResponse> = {
  encode(_: BulkDeleteConversationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulkDeleteConversationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkDeleteConversationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BulkDeleteConversationsResponse {
    return {};
  },

  toJSON(_: BulkDeleteConversationsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<BulkDeleteConversationsResponse>): BulkDeleteConversationsResponse {
    return BulkDeleteConversationsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BulkDeleteConversationsResponse>): BulkDeleteConversationsResponse {
    const message = createBaseBulkDeleteConversationsResponse();
    return message;
  },
};

function createBaseExportInsightsDataRequest(): ExportInsightsDataRequest {
  return { bigQueryDestination: undefined, parent: "", filter: "", kmsKey: "", writeDisposition: 0 };
}

export const ExportInsightsDataRequest: MessageFns<ExportInsightsDataRequest> = {
  encode(message: ExportInsightsDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bigQueryDestination !== undefined) {
      ExportInsightsDataRequest_BigQueryDestination.encode(message.bigQueryDestination, writer.uint32(18).fork())
        .join();
    }
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.kmsKey !== "") {
      writer.uint32(34).string(message.kmsKey);
    }
    if (message.writeDisposition !== 0) {
      writer.uint32(40).int32(message.writeDisposition);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportInsightsDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportInsightsDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bigQueryDestination = ExportInsightsDataRequest_BigQueryDestination.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.kmsKey = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.writeDisposition = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportInsightsDataRequest {
    return {
      bigQueryDestination: isSet(object.bigQueryDestination)
        ? ExportInsightsDataRequest_BigQueryDestination.fromJSON(object.bigQueryDestination)
        : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      kmsKey: isSet(object.kmsKey) ? globalThis.String(object.kmsKey) : "",
      writeDisposition: isSet(object.writeDisposition)
        ? exportInsightsDataRequest_WriteDispositionFromJSON(object.writeDisposition)
        : 0,
    };
  },

  toJSON(message: ExportInsightsDataRequest): unknown {
    const obj: any = {};
    if (message.bigQueryDestination !== undefined) {
      obj.bigQueryDestination = ExportInsightsDataRequest_BigQueryDestination.toJSON(message.bigQueryDestination);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.kmsKey !== "") {
      obj.kmsKey = message.kmsKey;
    }
    if (message.writeDisposition !== 0) {
      obj.writeDisposition = exportInsightsDataRequest_WriteDispositionToJSON(message.writeDisposition);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportInsightsDataRequest>): ExportInsightsDataRequest {
    return ExportInsightsDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportInsightsDataRequest>): ExportInsightsDataRequest {
    const message = createBaseExportInsightsDataRequest();
    message.bigQueryDestination = (object.bigQueryDestination !== undefined && object.bigQueryDestination !== null)
      ? ExportInsightsDataRequest_BigQueryDestination.fromPartial(object.bigQueryDestination)
      : undefined;
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.kmsKey = object.kmsKey ?? "";
    message.writeDisposition = object.writeDisposition ?? 0;
    return message;
  },
};

function createBaseExportInsightsDataRequest_BigQueryDestination(): ExportInsightsDataRequest_BigQueryDestination {
  return { projectId: "", dataset: "", table: "" };
}

export const ExportInsightsDataRequest_BigQueryDestination: MessageFns<ExportInsightsDataRequest_BigQueryDestination> =
  {
    encode(
      message: ExportInsightsDataRequest_BigQueryDestination,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.projectId !== "") {
        writer.uint32(26).string(message.projectId);
      }
      if (message.dataset !== "") {
        writer.uint32(10).string(message.dataset);
      }
      if (message.table !== "") {
        writer.uint32(18).string(message.table);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ExportInsightsDataRequest_BigQueryDestination {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseExportInsightsDataRequest_BigQueryDestination();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 3:
            if (tag !== 26) {
              break;
            }

            message.projectId = reader.string();
            continue;
          case 1:
            if (tag !== 10) {
              break;
            }

            message.dataset = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.table = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ExportInsightsDataRequest_BigQueryDestination {
      return {
        projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
        dataset: isSet(object.dataset) ? globalThis.String(object.dataset) : "",
        table: isSet(object.table) ? globalThis.String(object.table) : "",
      };
    },

    toJSON(message: ExportInsightsDataRequest_BigQueryDestination): unknown {
      const obj: any = {};
      if (message.projectId !== "") {
        obj.projectId = message.projectId;
      }
      if (message.dataset !== "") {
        obj.dataset = message.dataset;
      }
      if (message.table !== "") {
        obj.table = message.table;
      }
      return obj;
    },

    create(
      base?: DeepPartial<ExportInsightsDataRequest_BigQueryDestination>,
    ): ExportInsightsDataRequest_BigQueryDestination {
      return ExportInsightsDataRequest_BigQueryDestination.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ExportInsightsDataRequest_BigQueryDestination>,
    ): ExportInsightsDataRequest_BigQueryDestination {
      const message = createBaseExportInsightsDataRequest_BigQueryDestination();
      message.projectId = object.projectId ?? "";
      message.dataset = object.dataset ?? "";
      message.table = object.table ?? "";
      return message;
    },
  };

function createBaseExportInsightsDataMetadata(): ExportInsightsDataMetadata {
  return { createTime: undefined, endTime: undefined, request: undefined, partialErrors: [] };
}

export const ExportInsightsDataMetadata: MessageFns<ExportInsightsDataMetadata> = {
  encode(message: ExportInsightsDataMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.request !== undefined) {
      ExportInsightsDataRequest.encode(message.request, writer.uint32(26).fork()).join();
    }
    for (const v of message.partialErrors) {
      Status.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportInsightsDataMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportInsightsDataMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.request = ExportInsightsDataRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.partialErrors.push(Status.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportInsightsDataMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      request: isSet(object.request) ? ExportInsightsDataRequest.fromJSON(object.request) : undefined,
      partialErrors: globalThis.Array.isArray(object?.partialErrors)
        ? object.partialErrors.map((e: any) => Status.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ExportInsightsDataMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.request !== undefined) {
      obj.request = ExportInsightsDataRequest.toJSON(message.request);
    }
    if (message.partialErrors?.length) {
      obj.partialErrors = message.partialErrors.map((e) => Status.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ExportInsightsDataMetadata>): ExportInsightsDataMetadata {
    return ExportInsightsDataMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportInsightsDataMetadata>): ExportInsightsDataMetadata {
    const message = createBaseExportInsightsDataMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? ExportInsightsDataRequest.fromPartial(object.request)
      : undefined;
    message.partialErrors = object.partialErrors?.map((e) => Status.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExportInsightsDataResponse(): ExportInsightsDataResponse {
  return {};
}

export const ExportInsightsDataResponse: MessageFns<ExportInsightsDataResponse> = {
  encode(_: ExportInsightsDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportInsightsDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportInsightsDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ExportInsightsDataResponse {
    return {};
  },

  toJSON(_: ExportInsightsDataResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ExportInsightsDataResponse>): ExportInsightsDataResponse {
    return ExportInsightsDataResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ExportInsightsDataResponse>): ExportInsightsDataResponse {
    const message = createBaseExportInsightsDataResponse();
    return message;
  },
};

function createBaseCreateIssueModelRequest(): CreateIssueModelRequest {
  return { parent: "", issueModel: undefined };
}

export const CreateIssueModelRequest: MessageFns<CreateIssueModelRequest> = {
  encode(message: CreateIssueModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.issueModel !== undefined) {
      IssueModel.encode(message.issueModel, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateIssueModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateIssueModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issueModel = IssueModel.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateIssueModelRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      issueModel: isSet(object.issueModel) ? IssueModel.fromJSON(object.issueModel) : undefined,
    };
  },

  toJSON(message: CreateIssueModelRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.issueModel !== undefined) {
      obj.issueModel = IssueModel.toJSON(message.issueModel);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateIssueModelRequest>): CreateIssueModelRequest {
    return CreateIssueModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateIssueModelRequest>): CreateIssueModelRequest {
    const message = createBaseCreateIssueModelRequest();
    message.parent = object.parent ?? "";
    message.issueModel = (object.issueModel !== undefined && object.issueModel !== null)
      ? IssueModel.fromPartial(object.issueModel)
      : undefined;
    return message;
  },
};

function createBaseCreateIssueModelMetadata(): CreateIssueModelMetadata {
  return { createTime: undefined, endTime: undefined, request: undefined };
}

export const CreateIssueModelMetadata: MessageFns<CreateIssueModelMetadata> = {
  encode(message: CreateIssueModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.request !== undefined) {
      CreateIssueModelRequest.encode(message.request, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateIssueModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateIssueModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.request = CreateIssueModelRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateIssueModelMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      request: isSet(object.request) ? CreateIssueModelRequest.fromJSON(object.request) : undefined,
    };
  },

  toJSON(message: CreateIssueModelMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.request !== undefined) {
      obj.request = CreateIssueModelRequest.toJSON(message.request);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateIssueModelMetadata>): CreateIssueModelMetadata {
    return CreateIssueModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateIssueModelMetadata>): CreateIssueModelMetadata {
    const message = createBaseCreateIssueModelMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? CreateIssueModelRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

function createBaseUpdateIssueModelRequest(): UpdateIssueModelRequest {
  return { issueModel: undefined, updateMask: undefined };
}

export const UpdateIssueModelRequest: MessageFns<UpdateIssueModelRequest> = {
  encode(message: UpdateIssueModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issueModel !== undefined) {
      IssueModel.encode(message.issueModel, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIssueModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIssueModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issueModel = IssueModel.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIssueModelRequest {
    return {
      issueModel: isSet(object.issueModel) ? IssueModel.fromJSON(object.issueModel) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateIssueModelRequest): unknown {
    const obj: any = {};
    if (message.issueModel !== undefined) {
      obj.issueModel = IssueModel.toJSON(message.issueModel);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIssueModelRequest>): UpdateIssueModelRequest {
    return UpdateIssueModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIssueModelRequest>): UpdateIssueModelRequest {
    const message = createBaseUpdateIssueModelRequest();
    message.issueModel = (object.issueModel !== undefined && object.issueModel !== null)
      ? IssueModel.fromPartial(object.issueModel)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListIssueModelsRequest(): ListIssueModelsRequest {
  return { parent: "" };
}

export const ListIssueModelsRequest: MessageFns<ListIssueModelsRequest> = {
  encode(message: ListIssueModelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIssueModelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIssueModelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIssueModelsRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: ListIssueModelsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<ListIssueModelsRequest>): ListIssueModelsRequest {
    return ListIssueModelsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIssueModelsRequest>): ListIssueModelsRequest {
    const message = createBaseListIssueModelsRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseListIssueModelsResponse(): ListIssueModelsResponse {
  return { issueModels: [] };
}

export const ListIssueModelsResponse: MessageFns<ListIssueModelsResponse> = {
  encode(message: ListIssueModelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.issueModels) {
      IssueModel.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIssueModelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIssueModelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issueModels.push(IssueModel.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIssueModelsResponse {
    return {
      issueModels: globalThis.Array.isArray(object?.issueModels)
        ? object.issueModels.map((e: any) => IssueModel.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListIssueModelsResponse): unknown {
    const obj: any = {};
    if (message.issueModels?.length) {
      obj.issueModels = message.issueModels.map((e) => IssueModel.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListIssueModelsResponse>): ListIssueModelsResponse {
    return ListIssueModelsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIssueModelsResponse>): ListIssueModelsResponse {
    const message = createBaseListIssueModelsResponse();
    message.issueModels = object.issueModels?.map((e) => IssueModel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetIssueModelRequest(): GetIssueModelRequest {
  return { name: "" };
}

export const GetIssueModelRequest: MessageFns<GetIssueModelRequest> = {
  encode(message: GetIssueModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIssueModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIssueModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIssueModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetIssueModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetIssueModelRequest>): GetIssueModelRequest {
    return GetIssueModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIssueModelRequest>): GetIssueModelRequest {
    const message = createBaseGetIssueModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteIssueModelRequest(): DeleteIssueModelRequest {
  return { name: "" };
}

export const DeleteIssueModelRequest: MessageFns<DeleteIssueModelRequest> = {
  encode(message: DeleteIssueModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteIssueModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteIssueModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteIssueModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteIssueModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteIssueModelRequest>): DeleteIssueModelRequest {
    return DeleteIssueModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteIssueModelRequest>): DeleteIssueModelRequest {
    const message = createBaseDeleteIssueModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteIssueModelMetadata(): DeleteIssueModelMetadata {
  return { createTime: undefined, endTime: undefined, request: undefined };
}

export const DeleteIssueModelMetadata: MessageFns<DeleteIssueModelMetadata> = {
  encode(message: DeleteIssueModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.request !== undefined) {
      DeleteIssueModelRequest.encode(message.request, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteIssueModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteIssueModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.request = DeleteIssueModelRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteIssueModelMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      request: isSet(object.request) ? DeleteIssueModelRequest.fromJSON(object.request) : undefined,
    };
  },

  toJSON(message: DeleteIssueModelMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.request !== undefined) {
      obj.request = DeleteIssueModelRequest.toJSON(message.request);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteIssueModelMetadata>): DeleteIssueModelMetadata {
    return DeleteIssueModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteIssueModelMetadata>): DeleteIssueModelMetadata {
    const message = createBaseDeleteIssueModelMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? DeleteIssueModelRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

function createBaseDeployIssueModelRequest(): DeployIssueModelRequest {
  return { name: "" };
}

export const DeployIssueModelRequest: MessageFns<DeployIssueModelRequest> = {
  encode(message: DeployIssueModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployIssueModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployIssueModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployIssueModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeployIssueModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeployIssueModelRequest>): DeployIssueModelRequest {
    return DeployIssueModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployIssueModelRequest>): DeployIssueModelRequest {
    const message = createBaseDeployIssueModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeployIssueModelResponse(): DeployIssueModelResponse {
  return {};
}

export const DeployIssueModelResponse: MessageFns<DeployIssueModelResponse> = {
  encode(_: DeployIssueModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployIssueModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployIssueModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeployIssueModelResponse {
    return {};
  },

  toJSON(_: DeployIssueModelResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeployIssueModelResponse>): DeployIssueModelResponse {
    return DeployIssueModelResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeployIssueModelResponse>): DeployIssueModelResponse {
    const message = createBaseDeployIssueModelResponse();
    return message;
  },
};

function createBaseDeployIssueModelMetadata(): DeployIssueModelMetadata {
  return { createTime: undefined, endTime: undefined, request: undefined };
}

export const DeployIssueModelMetadata: MessageFns<DeployIssueModelMetadata> = {
  encode(message: DeployIssueModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.request !== undefined) {
      DeployIssueModelRequest.encode(message.request, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployIssueModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployIssueModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.request = DeployIssueModelRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployIssueModelMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      request: isSet(object.request) ? DeployIssueModelRequest.fromJSON(object.request) : undefined,
    };
  },

  toJSON(message: DeployIssueModelMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.request !== undefined) {
      obj.request = DeployIssueModelRequest.toJSON(message.request);
    }
    return obj;
  },

  create(base?: DeepPartial<DeployIssueModelMetadata>): DeployIssueModelMetadata {
    return DeployIssueModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployIssueModelMetadata>): DeployIssueModelMetadata {
    const message = createBaseDeployIssueModelMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? DeployIssueModelRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

function createBaseUndeployIssueModelRequest(): UndeployIssueModelRequest {
  return { name: "" };
}

export const UndeployIssueModelRequest: MessageFns<UndeployIssueModelRequest> = {
  encode(message: UndeployIssueModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployIssueModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployIssueModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployIssueModelRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UndeployIssueModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployIssueModelRequest>): UndeployIssueModelRequest {
    return UndeployIssueModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployIssueModelRequest>): UndeployIssueModelRequest {
    const message = createBaseUndeployIssueModelRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUndeployIssueModelResponse(): UndeployIssueModelResponse {
  return {};
}

export const UndeployIssueModelResponse: MessageFns<UndeployIssueModelResponse> = {
  encode(_: UndeployIssueModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployIssueModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployIssueModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UndeployIssueModelResponse {
    return {};
  },

  toJSON(_: UndeployIssueModelResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UndeployIssueModelResponse>): UndeployIssueModelResponse {
    return UndeployIssueModelResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UndeployIssueModelResponse>): UndeployIssueModelResponse {
    const message = createBaseUndeployIssueModelResponse();
    return message;
  },
};

function createBaseUndeployIssueModelMetadata(): UndeployIssueModelMetadata {
  return { createTime: undefined, endTime: undefined, request: undefined };
}

export const UndeployIssueModelMetadata: MessageFns<UndeployIssueModelMetadata> = {
  encode(message: UndeployIssueModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.request !== undefined) {
      UndeployIssueModelRequest.encode(message.request, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployIssueModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployIssueModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.request = UndeployIssueModelRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployIssueModelMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      request: isSet(object.request) ? UndeployIssueModelRequest.fromJSON(object.request) : undefined,
    };
  },

  toJSON(message: UndeployIssueModelMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.request !== undefined) {
      obj.request = UndeployIssueModelRequest.toJSON(message.request);
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployIssueModelMetadata>): UndeployIssueModelMetadata {
    return UndeployIssueModelMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployIssueModelMetadata>): UndeployIssueModelMetadata {
    const message = createBaseUndeployIssueModelMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? UndeployIssueModelRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

function createBaseGetIssueRequest(): GetIssueRequest {
  return { name: "" };
}

export const GetIssueRequest: MessageFns<GetIssueRequest> = {
  encode(message: GetIssueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIssueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIssueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIssueRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetIssueRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetIssueRequest>): GetIssueRequest {
    return GetIssueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIssueRequest>): GetIssueRequest {
    const message = createBaseGetIssueRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListIssuesRequest(): ListIssuesRequest {
  return { parent: "" };
}

export const ListIssuesRequest: MessageFns<ListIssuesRequest> = {
  encode(message: ListIssuesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIssuesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIssuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIssuesRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: ListIssuesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<ListIssuesRequest>): ListIssuesRequest {
    return ListIssuesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIssuesRequest>): ListIssuesRequest {
    const message = createBaseListIssuesRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseListIssuesResponse(): ListIssuesResponse {
  return { issues: [] };
}

export const ListIssuesResponse: MessageFns<ListIssuesResponse> = {
  encode(message: ListIssuesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.issues) {
      Issue.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIssuesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIssuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issues.push(Issue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIssuesResponse {
    return { issues: globalThis.Array.isArray(object?.issues) ? object.issues.map((e: any) => Issue.fromJSON(e)) : [] };
  },

  toJSON(message: ListIssuesResponse): unknown {
    const obj: any = {};
    if (message.issues?.length) {
      obj.issues = message.issues.map((e) => Issue.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListIssuesResponse>): ListIssuesResponse {
    return ListIssuesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListIssuesResponse>): ListIssuesResponse {
    const message = createBaseListIssuesResponse();
    message.issues = object.issues?.map((e) => Issue.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateIssueRequest(): UpdateIssueRequest {
  return { issue: undefined, updateMask: undefined };
}

export const UpdateIssueRequest: MessageFns<UpdateIssueRequest> = {
  encode(message: UpdateIssueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issue !== undefined) {
      Issue.encode(message.issue, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIssueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIssueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issue = Issue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIssueRequest {
    return {
      issue: isSet(object.issue) ? Issue.fromJSON(object.issue) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateIssueRequest): unknown {
    const obj: any = {};
    if (message.issue !== undefined) {
      obj.issue = Issue.toJSON(message.issue);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateIssueRequest>): UpdateIssueRequest {
    return UpdateIssueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateIssueRequest>): UpdateIssueRequest {
    const message = createBaseUpdateIssueRequest();
    message.issue = (object.issue !== undefined && object.issue !== null) ? Issue.fromPartial(object.issue) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteIssueRequest(): DeleteIssueRequest {
  return { name: "" };
}

export const DeleteIssueRequest: MessageFns<DeleteIssueRequest> = {
  encode(message: DeleteIssueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteIssueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteIssueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteIssueRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteIssueRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteIssueRequest>): DeleteIssueRequest {
    return DeleteIssueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteIssueRequest>): DeleteIssueRequest {
    const message = createBaseDeleteIssueRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCalculateIssueModelStatsRequest(): CalculateIssueModelStatsRequest {
  return { issueModel: "" };
}

export const CalculateIssueModelStatsRequest: MessageFns<CalculateIssueModelStatsRequest> = {
  encode(message: CalculateIssueModelStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.issueModel !== "") {
      writer.uint32(10).string(message.issueModel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateIssueModelStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateIssueModelStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issueModel = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateIssueModelStatsRequest {
    return { issueModel: isSet(object.issueModel) ? globalThis.String(object.issueModel) : "" };
  },

  toJSON(message: CalculateIssueModelStatsRequest): unknown {
    const obj: any = {};
    if (message.issueModel !== "") {
      obj.issueModel = message.issueModel;
    }
    return obj;
  },

  create(base?: DeepPartial<CalculateIssueModelStatsRequest>): CalculateIssueModelStatsRequest {
    return CalculateIssueModelStatsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CalculateIssueModelStatsRequest>): CalculateIssueModelStatsRequest {
    const message = createBaseCalculateIssueModelStatsRequest();
    message.issueModel = object.issueModel ?? "";
    return message;
  },
};

function createBaseCalculateIssueModelStatsResponse(): CalculateIssueModelStatsResponse {
  return { currentStats: undefined };
}

export const CalculateIssueModelStatsResponse: MessageFns<CalculateIssueModelStatsResponse> = {
  encode(message: CalculateIssueModelStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentStats !== undefined) {
      IssueModelLabelStats.encode(message.currentStats, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateIssueModelStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateIssueModelStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.currentStats = IssueModelLabelStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateIssueModelStatsResponse {
    return {
      currentStats: isSet(object.currentStats) ? IssueModelLabelStats.fromJSON(object.currentStats) : undefined,
    };
  },

  toJSON(message: CalculateIssueModelStatsResponse): unknown {
    const obj: any = {};
    if (message.currentStats !== undefined) {
      obj.currentStats = IssueModelLabelStats.toJSON(message.currentStats);
    }
    return obj;
  },

  create(base?: DeepPartial<CalculateIssueModelStatsResponse>): CalculateIssueModelStatsResponse {
    return CalculateIssueModelStatsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CalculateIssueModelStatsResponse>): CalculateIssueModelStatsResponse {
    const message = createBaseCalculateIssueModelStatsResponse();
    message.currentStats = (object.currentStats !== undefined && object.currentStats !== null)
      ? IssueModelLabelStats.fromPartial(object.currentStats)
      : undefined;
    return message;
  },
};

function createBaseCreatePhraseMatcherRequest(): CreatePhraseMatcherRequest {
  return { parent: "", phraseMatcher: undefined };
}

export const CreatePhraseMatcherRequest: MessageFns<CreatePhraseMatcherRequest> = {
  encode(message: CreatePhraseMatcherRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.phraseMatcher !== undefined) {
      PhraseMatcher.encode(message.phraseMatcher, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePhraseMatcherRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePhraseMatcherRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.phraseMatcher = PhraseMatcher.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePhraseMatcherRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      phraseMatcher: isSet(object.phraseMatcher) ? PhraseMatcher.fromJSON(object.phraseMatcher) : undefined,
    };
  },

  toJSON(message: CreatePhraseMatcherRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.phraseMatcher !== undefined) {
      obj.phraseMatcher = PhraseMatcher.toJSON(message.phraseMatcher);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePhraseMatcherRequest>): CreatePhraseMatcherRequest {
    return CreatePhraseMatcherRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePhraseMatcherRequest>): CreatePhraseMatcherRequest {
    const message = createBaseCreatePhraseMatcherRequest();
    message.parent = object.parent ?? "";
    message.phraseMatcher = (object.phraseMatcher !== undefined && object.phraseMatcher !== null)
      ? PhraseMatcher.fromPartial(object.phraseMatcher)
      : undefined;
    return message;
  },
};

function createBaseListPhraseMatchersRequest(): ListPhraseMatchersRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListPhraseMatchersRequest: MessageFns<ListPhraseMatchersRequest> = {
  encode(message: ListPhraseMatchersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPhraseMatchersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPhraseMatchersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPhraseMatchersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListPhraseMatchersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPhraseMatchersRequest>): ListPhraseMatchersRequest {
    return ListPhraseMatchersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPhraseMatchersRequest>): ListPhraseMatchersRequest {
    const message = createBaseListPhraseMatchersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListPhraseMatchersResponse(): ListPhraseMatchersResponse {
  return { phraseMatchers: [], nextPageToken: "" };
}

export const ListPhraseMatchersResponse: MessageFns<ListPhraseMatchersResponse> = {
  encode(message: ListPhraseMatchersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.phraseMatchers) {
      PhraseMatcher.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPhraseMatchersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPhraseMatchersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phraseMatchers.push(PhraseMatcher.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPhraseMatchersResponse {
    return {
      phraseMatchers: globalThis.Array.isArray(object?.phraseMatchers)
        ? object.phraseMatchers.map((e: any) => PhraseMatcher.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListPhraseMatchersResponse): unknown {
    const obj: any = {};
    if (message.phraseMatchers?.length) {
      obj.phraseMatchers = message.phraseMatchers.map((e) => PhraseMatcher.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListPhraseMatchersResponse>): ListPhraseMatchersResponse {
    return ListPhraseMatchersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPhraseMatchersResponse>): ListPhraseMatchersResponse {
    const message = createBaseListPhraseMatchersResponse();
    message.phraseMatchers = object.phraseMatchers?.map((e) => PhraseMatcher.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetPhraseMatcherRequest(): GetPhraseMatcherRequest {
  return { name: "" };
}

export const GetPhraseMatcherRequest: MessageFns<GetPhraseMatcherRequest> = {
  encode(message: GetPhraseMatcherRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPhraseMatcherRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPhraseMatcherRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPhraseMatcherRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetPhraseMatcherRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPhraseMatcherRequest>): GetPhraseMatcherRequest {
    return GetPhraseMatcherRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPhraseMatcherRequest>): GetPhraseMatcherRequest {
    const message = createBaseGetPhraseMatcherRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeletePhraseMatcherRequest(): DeletePhraseMatcherRequest {
  return { name: "" };
}

export const DeletePhraseMatcherRequest: MessageFns<DeletePhraseMatcherRequest> = {
  encode(message: DeletePhraseMatcherRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePhraseMatcherRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePhraseMatcherRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePhraseMatcherRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeletePhraseMatcherRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePhraseMatcherRequest>): DeletePhraseMatcherRequest {
    return DeletePhraseMatcherRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePhraseMatcherRequest>): DeletePhraseMatcherRequest {
    const message = createBaseDeletePhraseMatcherRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdatePhraseMatcherRequest(): UpdatePhraseMatcherRequest {
  return { phraseMatcher: undefined, updateMask: undefined };
}

export const UpdatePhraseMatcherRequest: MessageFns<UpdatePhraseMatcherRequest> = {
  encode(message: UpdatePhraseMatcherRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phraseMatcher !== undefined) {
      PhraseMatcher.encode(message.phraseMatcher, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePhraseMatcherRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePhraseMatcherRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phraseMatcher = PhraseMatcher.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePhraseMatcherRequest {
    return {
      phraseMatcher: isSet(object.phraseMatcher) ? PhraseMatcher.fromJSON(object.phraseMatcher) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdatePhraseMatcherRequest): unknown {
    const obj: any = {};
    if (message.phraseMatcher !== undefined) {
      obj.phraseMatcher = PhraseMatcher.toJSON(message.phraseMatcher);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePhraseMatcherRequest>): UpdatePhraseMatcherRequest {
    return UpdatePhraseMatcherRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePhraseMatcherRequest>): UpdatePhraseMatcherRequest {
    const message = createBaseUpdatePhraseMatcherRequest();
    message.phraseMatcher = (object.phraseMatcher !== undefined && object.phraseMatcher !== null)
      ? PhraseMatcher.fromPartial(object.phraseMatcher)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetSettingsRequest(): GetSettingsRequest {
  return { name: "" };
}

export const GetSettingsRequest: MessageFns<GetSettingsRequest> = {
  encode(message: GetSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSettingsRequest>): GetSettingsRequest {
    return GetSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSettingsRequest>): GetSettingsRequest {
    const message = createBaseGetSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSettingsRequest(): UpdateSettingsRequest {
  return { settings: undefined, updateMask: undefined };
}

export const UpdateSettingsRequest: MessageFns<UpdateSettingsRequest> = {
  encode(message: UpdateSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.settings !== undefined) {
      Settings.encode(message.settings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.settings = Settings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSettingsRequest {
    return {
      settings: isSet(object.settings) ? Settings.fromJSON(object.settings) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSettingsRequest): unknown {
    const obj: any = {};
    if (message.settings !== undefined) {
      obj.settings = Settings.toJSON(message.settings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSettingsRequest>): UpdateSettingsRequest {
    return UpdateSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSettingsRequest>): UpdateSettingsRequest {
    const message = createBaseUpdateSettingsRequest();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? Settings.fromPartial(object.settings)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseCreateViewRequest(): CreateViewRequest {
  return { parent: "", view: undefined };
}

export const CreateViewRequest: MessageFns<CreateViewRequest> = {
  encode(message: CreateViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.view !== undefined) {
      View.encode(message.view, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.view = View.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateViewRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      view: isSet(object.view) ? View.fromJSON(object.view) : undefined,
    };
  },

  toJSON(message: CreateViewRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.view !== undefined) {
      obj.view = View.toJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateViewRequest>): CreateViewRequest {
    return CreateViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateViewRequest>): CreateViewRequest {
    const message = createBaseCreateViewRequest();
    message.parent = object.parent ?? "";
    message.view = (object.view !== undefined && object.view !== null) ? View.fromPartial(object.view) : undefined;
    return message;
  },
};

function createBaseGetViewRequest(): GetViewRequest {
  return { name: "" };
}

export const GetViewRequest: MessageFns<GetViewRequest> = {
  encode(message: GetViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetViewRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetViewRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetViewRequest>): GetViewRequest {
    return GetViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetViewRequest>): GetViewRequest {
    const message = createBaseGetViewRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListViewsRequest(): ListViewsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListViewsRequest: MessageFns<ListViewsRequest> = {
  encode(message: ListViewsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListViewsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListViewsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListViewsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListViewsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListViewsRequest>): ListViewsRequest {
    return ListViewsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListViewsRequest>): ListViewsRequest {
    const message = createBaseListViewsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListViewsResponse(): ListViewsResponse {
  return { views: [], nextPageToken: "" };
}

export const ListViewsResponse: MessageFns<ListViewsResponse> = {
  encode(message: ListViewsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.views) {
      View.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListViewsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListViewsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.views.push(View.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListViewsResponse {
    return {
      views: globalThis.Array.isArray(object?.views) ? object.views.map((e: any) => View.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListViewsResponse): unknown {
    const obj: any = {};
    if (message.views?.length) {
      obj.views = message.views.map((e) => View.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListViewsResponse>): ListViewsResponse {
    return ListViewsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListViewsResponse>): ListViewsResponse {
    const message = createBaseListViewsResponse();
    message.views = object.views?.map((e) => View.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateViewRequest(): UpdateViewRequest {
  return { view: undefined, updateMask: undefined };
}

export const UpdateViewRequest: MessageFns<UpdateViewRequest> = {
  encode(message: UpdateViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.view !== undefined) {
      View.encode(message.view, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.view = View.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateViewRequest {
    return {
      view: isSet(object.view) ? View.fromJSON(object.view) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateViewRequest): unknown {
    const obj: any = {};
    if (message.view !== undefined) {
      obj.view = View.toJSON(message.view);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateViewRequest>): UpdateViewRequest {
    return UpdateViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateViewRequest>): UpdateViewRequest {
    const message = createBaseUpdateViewRequest();
    message.view = (object.view !== undefined && object.view !== null) ? View.fromPartial(object.view) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteViewRequest(): DeleteViewRequest {
  return { name: "" };
}

export const DeleteViewRequest: MessageFns<DeleteViewRequest> = {
  encode(message: DeleteViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteViewRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteViewRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteViewRequest>): DeleteViewRequest {
    return DeleteViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteViewRequest>): DeleteViewRequest {
    const message = createBaseDeleteViewRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** An API that lets users analyze and explore their business conversation data. */
export type ContactCenterInsightsDefinition = typeof ContactCenterInsightsDefinition;
export const ContactCenterInsightsDefinition = {
  name: "ContactCenterInsights",
  fullName: "google.cloud.contactcenterinsights.v1.ContactCenterInsights",
  methods: {
    /** Creates a conversation. */
    createConversation: {
      name: "CreateConversation",
      requestType: CreateConversationRequest,
      requestStream: false,
      responseType: Conversation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              44,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              65,
              58,
              12,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Create a longrunning conversation upload operation. This method differs
     * from CreateConversation by allowing audio transcription and optional DLP
     * redaction.
     */
    uploadConversation: {
      name: "UploadConversation",
      requestType: UploadConversationRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              12,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              18,
              26,
              85,
              112,
              108,
              111,
              97,
              100,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              58,
              117,
              112,
              108,
              111,
              97,
              100,
            ]),
          ],
        },
      },
    },
    /** Updates a conversation. */
    updateConversation: {
      name: "UpdateConversation",
      requestType: UpdateConversationRequest,
      requestStream: false,
      responseType: Conversation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              12,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              50,
              62,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a conversation. */
    getConversation: {
      name: "GetConversation",
      requestType: GetConversationRequest,
      requestStream: false,
      responseType: Conversation,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists conversations. */
    listConversations: {
      name: "ListConversations",
      requestType: ListConversationsRequest,
      requestStream: false,
      responseType: ListConversationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a conversation. */
    deleteConversation: {
      name: "DeleteConversation",
      requestType: DeleteConversationRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an analysis. The long running operation is done when the analysis
     * has completed.
     */
    createAnalysis: {
      name: "CreateAnalysis",
      requestType: CreateAnalysisRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              43,
              10,
              8,
              65,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              18,
              31,
              67,
              114,
              101,
              97,
              116,
              101,
              65,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 97, 110, 97, 108, 121, 115, 105, 115])],
          578365826: [
            Buffer.from([
              72,
              58,
              8,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets an analysis. */
    getAnalysis: {
      name: "GetAnalysis",
      requestType: GetAnalysisRequest,
      requestStream: false,
      responseType: Analysis,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists analyses. */
    listAnalyses: {
      name: "ListAnalyses",
      requestType: ListAnalysesRequest,
      requestStream: false,
      responseType: ListAnalysesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an analysis. */
    deleteAnalysis: {
      name: "DeleteAnalysis",
      requestType: DeleteAnalysisRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              42,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              110,
              97,
              108,
              121,
              115,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Analyzes multiple conversations in a single request. */
    bulkAnalyzeConversations: {
      name: "BulkAnalyzeConversations",
      requestType: BulkAnalyzeConversationsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              68,
              10,
              32,
              66,
              117,
              108,
              107,
              65,
              110,
              97,
              108,
              121,
              122,
              101,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              32,
              66,
              117,
              108,
              107,
              65,
              110,
              97,
              108,
              121,
              122,
              101,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              33,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              102,
              105,
              108,
              116,
              101,
              114,
              44,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              95,
              112,
              101,
              114,
              99,
              101,
              110,
              116,
              97,
              103,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              58,
              98,
              117,
              108,
              107,
              65,
              110,
              97,
              108,
              121,
              122,
              101,
            ]),
          ],
        },
      },
    },
    /** Deletes multiple conversations in a single request. */
    bulkDeleteConversations: {
      name: "BulkDeleteConversations",
      requestType: BulkDeleteConversationsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              66,
              10,
              31,
              66,
              117,
              108,
              107,
              68,
              101,
              108,
              101,
              116,
              101,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              31,
              66,
              117,
              108,
              107,
              68,
              101,
              108,
              101,
              116,
              101,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              58,
              98,
              117,
              108,
              107,
              68,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Imports conversations and processes them according to the user's
     * configuration.
     */
    ingestConversations: {
      name: "IngestConversations",
      requestType: IngestConversationsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              58,
              10,
              27,
              73,
              110,
              103,
              101,
              115,
              116,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              27,
              73,
              110,
              103,
              101,
              115,
              116,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              58,
              105,
              110,
              103,
              101,
              115,
              116,
            ]),
          ],
        },
      },
    },
    /** Export insights data to a destination defined in the request body. */
    exportInsightsData: {
      name: "ExportInsightsData",
      requestType: ExportInsightsDataRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              56,
              10,
              26,
              69,
              120,
              112,
              111,
              114,
              116,
              73,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              68,
              97,
              116,
              97,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              26,
              69,
              120,
              112,
              111,
              114,
              116,
              73,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              68,
              97,
              116,
              97,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              110,
              115,
              105,
              103,
              104,
              116,
              115,
              100,
              97,
              116,
              97,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Creates an issue model. */
    createIssueModel: {
      name: "CreateIssueModel",
      requestType: CreateIssueModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              38,
              10,
              10,
              73,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              18,
              24,
              67,
              114,
              101,
              97,
              116,
              101,
              73,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 105, 115, 115, 117, 101, 95, 109, 111, 100, 101, 108]),
          ],
          578365826: [
            Buffer.from([
              62,
              58,
              11,
              105,
              115,
              115,
              117,
              101,
              95,
              109,
              111,
              100,
              101,
              108,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an issue model. */
    updateIssueModel: {
      name: "UpdateIssueModel",
      requestType: UpdateIssueModelRequest,
      requestStream: false,
      responseType: IssueModel,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              105,
              115,
              115,
              117,
              101,
              95,
              109,
              111,
              100,
              101,
              108,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              11,
              105,
              115,
              115,
              117,
              101,
              95,
              109,
              111,
              100,
              101,
              108,
              50,
              59,
              47,
              118,
              49,
              47,
              123,
              105,
              115,
              115,
              117,
              101,
              95,
              109,
              111,
              100,
              101,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets an issue model. */
    getIssueModel: {
      name: "GetIssueModel",
      requestType: GetIssueModelRequest,
      requestStream: false,
      responseType: IssueModel,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists issue models. */
    listIssueModels: {
      name: "ListIssueModels",
      requestType: ListIssueModelsRequest,
      requestStream: false,
      responseType: ListIssueModelsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes an issue model. */
    deleteIssueModel: {
      name: "DeleteIssueModel",
      requestType: DeleteIssueModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              49,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              24,
              68,
              101,
              108,
              101,
              116,
              101,
              73,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deploys an issue model. Returns an error if a model is already deployed.
     * An issue model can only be used in analysis after it has been deployed.
     */
    deployIssueModel: {
      name: "DeployIssueModel",
      requestType: DeployIssueModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              52,
              10,
              24,
              68,
              101,
              112,
              108,
              111,
              121,
              73,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              24,
              68,
              101,
              112,
              108,
              111,
              121,
              73,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              112,
              108,
              111,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Undeploys an issue model.
     * An issue model can not be used in analysis after it has been undeployed.
     */
    undeployIssueModel: {
      name: "UndeployIssueModel",
      requestType: UndeployIssueModelRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              56,
              10,
              26,
              85,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
              73,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              26,
              85,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
              73,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              117,
              110,
              100,
              101,
              112,
              108,
              111,
              121,
            ]),
          ],
        },
      },
    },
    /** Gets an issue. */
    getIssue: {
      name: "GetIssue",
      requestType: GetIssueRequest,
      requestStream: false,
      responseType: Issue,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists issues. */
    listIssues: {
      name: "ListIssues",
      requestType: ListIssuesRequest,
      requestStream: false,
      responseType: ListIssuesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              47,
              105,
              115,
              115,
              117,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an issue. */
    updateIssue: {
      name: "UpdateIssue",
      requestType: UpdateIssueRequest,
      requestStream: false,
      responseType: Issue,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 105, 115, 115, 117, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              71,
              58,
              5,
              105,
              115,
              115,
              117,
              101,
              50,
              62,
              47,
              118,
              49,
              47,
              123,
              105,
              115,
              115,
              117,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an issue. */
    deleteIssue: {
      name: "DeleteIssue",
      requestType: DeleteIssueRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              58,
              42,
              56,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets an issue model's statistics. */
    calculateIssueModelStats: {
      name: "CalculateIssueModelStats",
      requestType: CalculateIssueModelStatsRequest,
      requestStream: false,
      responseType: CalculateIssueModelStatsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 105, 115, 115, 117, 101, 95, 109, 111, 100, 101, 108])],
          578365826: [
            Buffer.from([
              81,
              18,
              79,
              47,
              118,
              49,
              47,
              123,
              105,
              115,
              115,
              117,
              101,
              95,
              109,
              111,
              100,
              101,
              108,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              105,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              73,
              115,
              115,
              117,
              101,
              77,
              111,
              100,
              101,
              108,
              83,
              116,
              97,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Creates a phrase matcher. */
    createPhraseMatcher: {
      name: "CreatePhraseMatcher",
      requestType: CreatePhraseMatcherRequest,
      requestStream: false,
      responseType: PhraseMatcher,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              112,
              104,
              114,
              97,
              115,
              101,
              95,
              109,
              97,
              116,
              99,
              104,
              101,
              114,
            ]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              14,
              112,
              104,
              114,
              97,
              115,
              101,
              95,
              109,
              97,
              116,
              99,
              104,
              101,
              114,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              104,
              114,
              97,
              115,
              101,
              77,
              97,
              116,
              99,
              104,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a phrase matcher. */
    getPhraseMatcher: {
      name: "GetPhraseMatcher",
      requestType: GetPhraseMatcherRequest,
      requestStream: false,
      responseType: PhraseMatcher,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              104,
              114,
              97,
              115,
              101,
              77,
              97,
              116,
              99,
              104,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists phrase matchers. */
    listPhraseMatchers: {
      name: "ListPhraseMatchers",
      requestType: ListPhraseMatchersRequest,
      requestStream: false,
      responseType: ListPhraseMatchersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              104,
              114,
              97,
              115,
              101,
              77,
              97,
              116,
              99,
              104,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a phrase matcher. */
    deletePhraseMatcher: {
      name: "DeletePhraseMatcher",
      requestType: DeletePhraseMatcherRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              104,
              114,
              97,
              115,
              101,
              77,
              97,
              116,
              99,
              104,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a phrase matcher. */
    updatePhraseMatcher: {
      name: "UpdatePhraseMatcher",
      requestType: UpdatePhraseMatcherRequest,
      requestStream: false,
      responseType: PhraseMatcher,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              112,
              104,
              114,
              97,
              115,
              101,
              95,
              109,
              97,
              116,
              99,
              104,
              101,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              14,
              112,
              104,
              114,
              97,
              115,
              101,
              95,
              109,
              97,
              116,
              99,
              104,
              101,
              114,
              50,
              65,
              47,
              118,
              49,
              47,
              123,
              112,
              104,
              114,
              97,
              115,
              101,
              95,
              109,
              97,
              116,
              99,
              104,
              101,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              112,
              104,
              114,
              97,
              115,
              101,
              77,
              97,
              116,
              99,
              104,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets conversation statistics. */
    calculateStats: {
      name: "CalculateStats",
      requestType: CalculateStatsRequest,
      requestStream: false,
      responseType: CalculateStatsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 108, 111, 99, 97, 116, 105, 111, 110])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              47,
              123,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              83,
              116,
              97,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets project-level settings. */
    getSettings: {
      name: "GetSettings",
      requestType: GetSettingsRequest,
      requestStream: false,
      responseType: Settings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates project-level settings. */
    updateSettings: {
      name: "UpdateSettings",
      requestType: UpdateSettingsRequest,
      requestStream: false,
      responseType: Settings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              63,
              58,
              8,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              51,
              47,
              118,
              49,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a view. */
    createView: {
      name: "CreateView",
      requestType: CreateViewRequest,
      requestStream: false,
      responseType: View,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 112, 97, 114, 101, 110, 116, 44, 118, 105, 101, 119])],
          578365826: [
            Buffer.from([
              49,
              58,
              4,
              118,
              105,
              101,
              119,
              34,
              41,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a view. */
    getView: {
      name: "GetView",
      requestType: GetViewRequest,
      requestStream: false,
      responseType: View,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              43,
              18,
              41,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists views. */
    listViews: {
      name: "ListViews",
      requestType: ListViewsRequest,
      requestStream: false,
      responseType: ListViewsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              43,
              18,
              41,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              105,
              101,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a view. */
    updateView: {
      name: "UpdateView",
      requestType: UpdateViewRequest,
      requestStream: false,
      responseType: View,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([16, 118, 105, 101, 119, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            Buffer.from([
              54,
              58,
              4,
              118,
              105,
              101,
              119,
              50,
              46,
              47,
              118,
              49,
              47,
              123,
              118,
              105,
              101,
              119,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a view. */
    deleteView: {
      name: "DeleteView",
      requestType: DeleteViewRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              43,
              42,
              41,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ContactCenterInsightsServiceImplementation<CallContextExt = {}> {
  /** Creates a conversation. */
  createConversation(
    request: CreateConversationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Conversation>>;
  /**
   * Create a longrunning conversation upload operation. This method differs
   * from CreateConversation by allowing audio transcription and optional DLP
   * redaction.
   */
  uploadConversation(
    request: UploadConversationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a conversation. */
  updateConversation(
    request: UpdateConversationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Conversation>>;
  /** Gets a conversation. */
  getConversation(
    request: GetConversationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Conversation>>;
  /** Lists conversations. */
  listConversations(
    request: ListConversationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConversationsResponse>>;
  /** Deletes a conversation. */
  deleteConversation(
    request: DeleteConversationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Creates an analysis. The long running operation is done when the analysis
   * has completed.
   */
  createAnalysis(
    request: CreateAnalysisRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets an analysis. */
  getAnalysis(request: GetAnalysisRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Analysis>>;
  /** Lists analyses. */
  listAnalyses(
    request: ListAnalysesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAnalysesResponse>>;
  /** Deletes an analysis. */
  deleteAnalysis(request: DeleteAnalysisRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Analyzes multiple conversations in a single request. */
  bulkAnalyzeConversations(
    request: BulkAnalyzeConversationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes multiple conversations in a single request. */
  bulkDeleteConversations(
    request: BulkDeleteConversationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Imports conversations and processes them according to the user's
   * configuration.
   */
  ingestConversations(
    request: IngestConversationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Export insights data to a destination defined in the request body. */
  exportInsightsData(
    request: ExportInsightsDataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates an issue model. */
  createIssueModel(
    request: CreateIssueModelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates an issue model. */
  updateIssueModel(
    request: UpdateIssueModelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IssueModel>>;
  /** Gets an issue model. */
  getIssueModel(request: GetIssueModelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<IssueModel>>;
  /** Lists issue models. */
  listIssueModels(
    request: ListIssueModelsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListIssueModelsResponse>>;
  /** Deletes an issue model. */
  deleteIssueModel(
    request: DeleteIssueModelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deploys an issue model. Returns an error if a model is already deployed.
   * An issue model can only be used in analysis after it has been deployed.
   */
  deployIssueModel(
    request: DeployIssueModelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Undeploys an issue model.
   * An issue model can not be used in analysis after it has been undeployed.
   */
  undeployIssueModel(
    request: UndeployIssueModelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets an issue. */
  getIssue(request: GetIssueRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Issue>>;
  /** Lists issues. */
  listIssues(
    request: ListIssuesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListIssuesResponse>>;
  /** Updates an issue. */
  updateIssue(request: UpdateIssueRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Issue>>;
  /** Deletes an issue. */
  deleteIssue(request: DeleteIssueRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Gets an issue model's statistics. */
  calculateIssueModelStats(
    request: CalculateIssueModelStatsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CalculateIssueModelStatsResponse>>;
  /** Creates a phrase matcher. */
  createPhraseMatcher(
    request: CreatePhraseMatcherRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PhraseMatcher>>;
  /** Gets a phrase matcher. */
  getPhraseMatcher(
    request: GetPhraseMatcherRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PhraseMatcher>>;
  /** Lists phrase matchers. */
  listPhraseMatchers(
    request: ListPhraseMatchersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPhraseMatchersResponse>>;
  /** Deletes a phrase matcher. */
  deletePhraseMatcher(
    request: DeletePhraseMatcherRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Updates a phrase matcher. */
  updatePhraseMatcher(
    request: UpdatePhraseMatcherRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PhraseMatcher>>;
  /** Gets conversation statistics. */
  calculateStats(
    request: CalculateStatsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CalculateStatsResponse>>;
  /** Gets project-level settings. */
  getSettings(request: GetSettingsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Settings>>;
  /** Updates project-level settings. */
  updateSettings(request: UpdateSettingsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Settings>>;
  /** Creates a view. */
  createView(request: CreateViewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<View>>;
  /** Gets a view. */
  getView(request: GetViewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<View>>;
  /** Lists views. */
  listViews(request: ListViewsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListViewsResponse>>;
  /** Updates a view. */
  updateView(request: UpdateViewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<View>>;
  /** Deletes a view. */
  deleteView(request: DeleteViewRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface ContactCenterInsightsClient<CallOptionsExt = {}> {
  /** Creates a conversation. */
  createConversation(
    request: DeepPartial<CreateConversationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Conversation>;
  /**
   * Create a longrunning conversation upload operation. This method differs
   * from CreateConversation by allowing audio transcription and optional DLP
   * redaction.
   */
  uploadConversation(
    request: DeepPartial<UploadConversationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a conversation. */
  updateConversation(
    request: DeepPartial<UpdateConversationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Conversation>;
  /** Gets a conversation. */
  getConversation(
    request: DeepPartial<GetConversationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Conversation>;
  /** Lists conversations. */
  listConversations(
    request: DeepPartial<ListConversationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConversationsResponse>;
  /** Deletes a conversation. */
  deleteConversation(
    request: DeepPartial<DeleteConversationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Creates an analysis. The long running operation is done when the analysis
   * has completed.
   */
  createAnalysis(
    request: DeepPartial<CreateAnalysisRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets an analysis. */
  getAnalysis(request: DeepPartial<GetAnalysisRequest>, options?: CallOptions & CallOptionsExt): Promise<Analysis>;
  /** Lists analyses. */
  listAnalyses(
    request: DeepPartial<ListAnalysesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAnalysesResponse>;
  /** Deletes an analysis. */
  deleteAnalysis(request: DeepPartial<DeleteAnalysisRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Analyzes multiple conversations in a single request. */
  bulkAnalyzeConversations(
    request: DeepPartial<BulkAnalyzeConversationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes multiple conversations in a single request. */
  bulkDeleteConversations(
    request: DeepPartial<BulkDeleteConversationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Imports conversations and processes them according to the user's
   * configuration.
   */
  ingestConversations(
    request: DeepPartial<IngestConversationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Export insights data to a destination defined in the request body. */
  exportInsightsData(
    request: DeepPartial<ExportInsightsDataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates an issue model. */
  createIssueModel(
    request: DeepPartial<CreateIssueModelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates an issue model. */
  updateIssueModel(
    request: DeepPartial<UpdateIssueModelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IssueModel>;
  /** Gets an issue model. */
  getIssueModel(
    request: DeepPartial<GetIssueModelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IssueModel>;
  /** Lists issue models. */
  listIssueModels(
    request: DeepPartial<ListIssueModelsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListIssueModelsResponse>;
  /** Deletes an issue model. */
  deleteIssueModel(
    request: DeepPartial<DeleteIssueModelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deploys an issue model. Returns an error if a model is already deployed.
   * An issue model can only be used in analysis after it has been deployed.
   */
  deployIssueModel(
    request: DeepPartial<DeployIssueModelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Undeploys an issue model.
   * An issue model can not be used in analysis after it has been undeployed.
   */
  undeployIssueModel(
    request: DeepPartial<UndeployIssueModelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets an issue. */
  getIssue(request: DeepPartial<GetIssueRequest>, options?: CallOptions & CallOptionsExt): Promise<Issue>;
  /** Lists issues. */
  listIssues(
    request: DeepPartial<ListIssuesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListIssuesResponse>;
  /** Updates an issue. */
  updateIssue(request: DeepPartial<UpdateIssueRequest>, options?: CallOptions & CallOptionsExt): Promise<Issue>;
  /** Deletes an issue. */
  deleteIssue(request: DeepPartial<DeleteIssueRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Gets an issue model's statistics. */
  calculateIssueModelStats(
    request: DeepPartial<CalculateIssueModelStatsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CalculateIssueModelStatsResponse>;
  /** Creates a phrase matcher. */
  createPhraseMatcher(
    request: DeepPartial<CreatePhraseMatcherRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PhraseMatcher>;
  /** Gets a phrase matcher. */
  getPhraseMatcher(
    request: DeepPartial<GetPhraseMatcherRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PhraseMatcher>;
  /** Lists phrase matchers. */
  listPhraseMatchers(
    request: DeepPartial<ListPhraseMatchersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPhraseMatchersResponse>;
  /** Deletes a phrase matcher. */
  deletePhraseMatcher(
    request: DeepPartial<DeletePhraseMatcherRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Updates a phrase matcher. */
  updatePhraseMatcher(
    request: DeepPartial<UpdatePhraseMatcherRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PhraseMatcher>;
  /** Gets conversation statistics. */
  calculateStats(
    request: DeepPartial<CalculateStatsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CalculateStatsResponse>;
  /** Gets project-level settings. */
  getSettings(request: DeepPartial<GetSettingsRequest>, options?: CallOptions & CallOptionsExt): Promise<Settings>;
  /** Updates project-level settings. */
  updateSettings(
    request: DeepPartial<UpdateSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Settings>;
  /** Creates a view. */
  createView(request: DeepPartial<CreateViewRequest>, options?: CallOptions & CallOptionsExt): Promise<View>;
  /** Gets a view. */
  getView(request: DeepPartial<GetViewRequest>, options?: CallOptions & CallOptionsExt): Promise<View>;
  /** Lists views. */
  listViews(request: DeepPartial<ListViewsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListViewsResponse>;
  /** Updates a view. */
  updateView(request: DeepPartial<UpdateViewRequest>, options?: CallOptions & CallOptionsExt): Promise<View>;
  /** Deletes a view. */
  deleteView(request: DeepPartial<DeleteViewRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
