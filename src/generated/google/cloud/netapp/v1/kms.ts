// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/netapp/v1/kms.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.netapp.v1";

/** GetKmsConfigRequest gets a KMS Config. */
export interface GetKmsConfigRequest {
  /** Required. Name of the KmsConfig */
  name: string;
}

/** ListKmsConfigsRequest lists KMS Configs. */
export interface ListKmsConfigsRequest {
  /** Required. Parent value */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /**
   * The next_page_token value to use if there are additional
   * results to retrieve for this list request.
   */
  pageToken: string;
  /** Sort results. Supported values are "name", "name desc" or "" (unsorted). */
  orderBy: string;
  /** List filter. */
  filter: string;
}

/** ListKmsConfigsResponse is the response to a ListKmsConfigsRequest. */
export interface ListKmsConfigsResponse {
  /** The list of KmsConfigs */
  kmsConfigs: KmsConfig[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** CreateKmsConfigRequest creates a KMS Config. */
export interface CreateKmsConfigRequest {
  /** Required. Value for parent. */
  parent: string;
  /**
   * Required. Id of the requesting KmsConfig. Must be unique within the parent
   * resource. Must contain only letters, numbers, underscore and hyphen, with
   * the first character a letter or underscore, the last a letter or underscore
   * or a number, and a 63 character maximum.
   */
  kmsConfigId: string;
  /** Required. The required parameters to create a new KmsConfig. */
  kmsConfig: KmsConfig | undefined;
}

/** UpdateKmsConfigRequest updates a KMS Config. */
export interface UpdateKmsConfigRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * KmsConfig resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The KmsConfig being updated */
  kmsConfig: KmsConfig | undefined;
}

/** DeleteKmsConfigRequest deletes a KMS Config. */
export interface DeleteKmsConfigRequest {
  /** Required. Name of the KmsConfig. */
  name: string;
}

/** EncryptVolumesRequest specifies the KMS config to encrypt existing volumes. */
export interface EncryptVolumesRequest {
  /** Required. Name of the KmsConfig. */
  name: string;
}

/** VerifyKmsConfigRequest specifies the KMS config to be validated. */
export interface VerifyKmsConfigRequest {
  /** Required. Name of the KMS Config to be verified. */
  name: string;
}

/**
 * VerifyKmsConfigResponse contains the information if the config is correctly
 * and error message.
 */
export interface VerifyKmsConfigResponse {
  /**
   * Output only. If the customer key configured correctly to the encrypt
   * volume.
   */
  healthy: boolean;
  /** Output only. Error message if config is not healthy. */
  healthError: string;
  /**
   * Output only. Instructions for the customers to provide the access to the
   * encryption key.
   */
  instructions: string;
}

/** KmsConfig is the customer managed encryption key(CMEK) configuration. */
export interface KmsConfig {
  /** Identifier. Name of the KmsConfig. */
  name: string;
  /**
   * Required. Customer managed crypto key resource full name. Format:
   * projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{key}.
   */
  cryptoKeyName: string;
  /** Output only. State of the KmsConfig. */
  state: KmsConfig_State;
  /** Output only. State details of the KmsConfig. */
  stateDetails: string;
  /** Output only. Create time of the KmsConfig. */
  createTime:
    | Date
    | undefined;
  /** Description of the KmsConfig. */
  description: string;
  /** Labels as key value pairs */
  labels: { [key: string]: string };
  /**
   * Output only. Instructions to provide the access to the customer provided
   * encryption key.
   */
  instructions: string;
  /**
   * Output only. The Service account which will have access to the customer
   * provided encryption key.
   */
  serviceAccount: string;
}

/** The KmsConfig States */
export enum KmsConfig_State {
  /** STATE_UNSPECIFIED - Unspecified KmsConfig State */
  STATE_UNSPECIFIED = 0,
  /** READY - KmsConfig State is Ready */
  READY = 1,
  /** CREATING - KmsConfig State is Creating */
  CREATING = 2,
  /** DELETING - KmsConfig State is Deleting */
  DELETING = 3,
  /** UPDATING - KmsConfig State is Updating */
  UPDATING = 4,
  /** IN_USE - KmsConfig State is In Use. */
  IN_USE = 5,
  /** ERROR - KmsConfig State is Error */
  ERROR = 6,
  /** KEY_CHECK_PENDING - KmsConfig State is Pending to verify crypto key access. */
  KEY_CHECK_PENDING = 7,
  /**
   * KEY_NOT_REACHABLE - KmsConfig State is Not accessbile by the SDE service account to the
   * crypto key.
   */
  KEY_NOT_REACHABLE = 8,
  /** DISABLING - KmsConfig State is Disabling. */
  DISABLING = 9,
  /** DISABLED - KmsConfig State is Disabled. */
  DISABLED = 10,
  /**
   * MIGRATING - KmsConfig State is Migrating.
   * The existing volumes are migrating from SMEK to CMEK.
   */
  MIGRATING = 11,
  UNRECOGNIZED = -1,
}

export function kmsConfig_StateFromJSON(object: any): KmsConfig_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return KmsConfig_State.STATE_UNSPECIFIED;
    case 1:
    case "READY":
      return KmsConfig_State.READY;
    case 2:
    case "CREATING":
      return KmsConfig_State.CREATING;
    case 3:
    case "DELETING":
      return KmsConfig_State.DELETING;
    case 4:
    case "UPDATING":
      return KmsConfig_State.UPDATING;
    case 5:
    case "IN_USE":
      return KmsConfig_State.IN_USE;
    case 6:
    case "ERROR":
      return KmsConfig_State.ERROR;
    case 7:
    case "KEY_CHECK_PENDING":
      return KmsConfig_State.KEY_CHECK_PENDING;
    case 8:
    case "KEY_NOT_REACHABLE":
      return KmsConfig_State.KEY_NOT_REACHABLE;
    case 9:
    case "DISABLING":
      return KmsConfig_State.DISABLING;
    case 10:
    case "DISABLED":
      return KmsConfig_State.DISABLED;
    case 11:
    case "MIGRATING":
      return KmsConfig_State.MIGRATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KmsConfig_State.UNRECOGNIZED;
  }
}

export function kmsConfig_StateToJSON(object: KmsConfig_State): string {
  switch (object) {
    case KmsConfig_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case KmsConfig_State.READY:
      return "READY";
    case KmsConfig_State.CREATING:
      return "CREATING";
    case KmsConfig_State.DELETING:
      return "DELETING";
    case KmsConfig_State.UPDATING:
      return "UPDATING";
    case KmsConfig_State.IN_USE:
      return "IN_USE";
    case KmsConfig_State.ERROR:
      return "ERROR";
    case KmsConfig_State.KEY_CHECK_PENDING:
      return "KEY_CHECK_PENDING";
    case KmsConfig_State.KEY_NOT_REACHABLE:
      return "KEY_NOT_REACHABLE";
    case KmsConfig_State.DISABLING:
      return "DISABLING";
    case KmsConfig_State.DISABLED:
      return "DISABLED";
    case KmsConfig_State.MIGRATING:
      return "MIGRATING";
    case KmsConfig_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface KmsConfig_LabelsEntry {
  key: string;
  value: string;
}

function createBaseGetKmsConfigRequest(): GetKmsConfigRequest {
  return { name: "" };
}

export const GetKmsConfigRequest: MessageFns<GetKmsConfigRequest> = {
  encode(message: GetKmsConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetKmsConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetKmsConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetKmsConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetKmsConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetKmsConfigRequest>): GetKmsConfigRequest {
    return GetKmsConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetKmsConfigRequest>): GetKmsConfigRequest {
    const message = createBaseGetKmsConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListKmsConfigsRequest(): ListKmsConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "", orderBy: "", filter: "" };
}

export const ListKmsConfigsRequest: MessageFns<ListKmsConfigsRequest> = {
  encode(message: ListKmsConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKmsConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKmsConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKmsConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListKmsConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListKmsConfigsRequest>): ListKmsConfigsRequest {
    return ListKmsConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListKmsConfigsRequest>): ListKmsConfigsRequest {
    const message = createBaseListKmsConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListKmsConfigsResponse(): ListKmsConfigsResponse {
  return { kmsConfigs: [], nextPageToken: "", unreachable: [] };
}

export const ListKmsConfigsResponse: MessageFns<ListKmsConfigsResponse> = {
  encode(message: ListKmsConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.kmsConfigs) {
      KmsConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKmsConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKmsConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kmsConfigs.push(KmsConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKmsConfigsResponse {
    return {
      kmsConfigs: globalThis.Array.isArray(object?.kmsConfigs)
        ? object.kmsConfigs.map((e: any) => KmsConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListKmsConfigsResponse): unknown {
    const obj: any = {};
    if (message.kmsConfigs?.length) {
      obj.kmsConfigs = message.kmsConfigs.map((e) => KmsConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListKmsConfigsResponse>): ListKmsConfigsResponse {
    return ListKmsConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListKmsConfigsResponse>): ListKmsConfigsResponse {
    const message = createBaseListKmsConfigsResponse();
    message.kmsConfigs = object.kmsConfigs?.map((e) => KmsConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseCreateKmsConfigRequest(): CreateKmsConfigRequest {
  return { parent: "", kmsConfigId: "", kmsConfig: undefined };
}

export const CreateKmsConfigRequest: MessageFns<CreateKmsConfigRequest> = {
  encode(message: CreateKmsConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.kmsConfigId !== "") {
      writer.uint32(18).string(message.kmsConfigId);
    }
    if (message.kmsConfig !== undefined) {
      KmsConfig.encode(message.kmsConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateKmsConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateKmsConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kmsConfigId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.kmsConfig = KmsConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateKmsConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      kmsConfigId: isSet(object.kmsConfigId) ? globalThis.String(object.kmsConfigId) : "",
      kmsConfig: isSet(object.kmsConfig) ? KmsConfig.fromJSON(object.kmsConfig) : undefined,
    };
  },

  toJSON(message: CreateKmsConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.kmsConfigId !== "") {
      obj.kmsConfigId = message.kmsConfigId;
    }
    if (message.kmsConfig !== undefined) {
      obj.kmsConfig = KmsConfig.toJSON(message.kmsConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateKmsConfigRequest>): CreateKmsConfigRequest {
    return CreateKmsConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateKmsConfigRequest>): CreateKmsConfigRequest {
    const message = createBaseCreateKmsConfigRequest();
    message.parent = object.parent ?? "";
    message.kmsConfigId = object.kmsConfigId ?? "";
    message.kmsConfig = (object.kmsConfig !== undefined && object.kmsConfig !== null)
      ? KmsConfig.fromPartial(object.kmsConfig)
      : undefined;
    return message;
  },
};

function createBaseUpdateKmsConfigRequest(): UpdateKmsConfigRequest {
  return { updateMask: undefined, kmsConfig: undefined };
}

export const UpdateKmsConfigRequest: MessageFns<UpdateKmsConfigRequest> = {
  encode(message: UpdateKmsConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.kmsConfig !== undefined) {
      KmsConfig.encode(message.kmsConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateKmsConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateKmsConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kmsConfig = KmsConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateKmsConfigRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      kmsConfig: isSet(object.kmsConfig) ? KmsConfig.fromJSON(object.kmsConfig) : undefined,
    };
  },

  toJSON(message: UpdateKmsConfigRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.kmsConfig !== undefined) {
      obj.kmsConfig = KmsConfig.toJSON(message.kmsConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateKmsConfigRequest>): UpdateKmsConfigRequest {
    return UpdateKmsConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateKmsConfigRequest>): UpdateKmsConfigRequest {
    const message = createBaseUpdateKmsConfigRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.kmsConfig = (object.kmsConfig !== undefined && object.kmsConfig !== null)
      ? KmsConfig.fromPartial(object.kmsConfig)
      : undefined;
    return message;
  },
};

function createBaseDeleteKmsConfigRequest(): DeleteKmsConfigRequest {
  return { name: "" };
}

export const DeleteKmsConfigRequest: MessageFns<DeleteKmsConfigRequest> = {
  encode(message: DeleteKmsConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteKmsConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteKmsConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteKmsConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteKmsConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteKmsConfigRequest>): DeleteKmsConfigRequest {
    return DeleteKmsConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteKmsConfigRequest>): DeleteKmsConfigRequest {
    const message = createBaseDeleteKmsConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseEncryptVolumesRequest(): EncryptVolumesRequest {
  return { name: "" };
}

export const EncryptVolumesRequest: MessageFns<EncryptVolumesRequest> = {
  encode(message: EncryptVolumesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptVolumesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptVolumesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptVolumesRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: EncryptVolumesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<EncryptVolumesRequest>): EncryptVolumesRequest {
    return EncryptVolumesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EncryptVolumesRequest>): EncryptVolumesRequest {
    const message = createBaseEncryptVolumesRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseVerifyKmsConfigRequest(): VerifyKmsConfigRequest {
  return { name: "" };
}

export const VerifyKmsConfigRequest: MessageFns<VerifyKmsConfigRequest> = {
  encode(message: VerifyKmsConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyKmsConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyKmsConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyKmsConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: VerifyKmsConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<VerifyKmsConfigRequest>): VerifyKmsConfigRequest {
    return VerifyKmsConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifyKmsConfigRequest>): VerifyKmsConfigRequest {
    const message = createBaseVerifyKmsConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseVerifyKmsConfigResponse(): VerifyKmsConfigResponse {
  return { healthy: false, healthError: "", instructions: "" };
}

export const VerifyKmsConfigResponse: MessageFns<VerifyKmsConfigResponse> = {
  encode(message: VerifyKmsConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.healthy !== false) {
      writer.uint32(8).bool(message.healthy);
    }
    if (message.healthError !== "") {
      writer.uint32(18).string(message.healthError);
    }
    if (message.instructions !== "") {
      writer.uint32(26).string(message.instructions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyKmsConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyKmsConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.healthy = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.healthError = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.instructions = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyKmsConfigResponse {
    return {
      healthy: isSet(object.healthy) ? globalThis.Boolean(object.healthy) : false,
      healthError: isSet(object.healthError) ? globalThis.String(object.healthError) : "",
      instructions: isSet(object.instructions) ? globalThis.String(object.instructions) : "",
    };
  },

  toJSON(message: VerifyKmsConfigResponse): unknown {
    const obj: any = {};
    if (message.healthy !== false) {
      obj.healthy = message.healthy;
    }
    if (message.healthError !== "") {
      obj.healthError = message.healthError;
    }
    if (message.instructions !== "") {
      obj.instructions = message.instructions;
    }
    return obj;
  },

  create(base?: DeepPartial<VerifyKmsConfigResponse>): VerifyKmsConfigResponse {
    return VerifyKmsConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifyKmsConfigResponse>): VerifyKmsConfigResponse {
    const message = createBaseVerifyKmsConfigResponse();
    message.healthy = object.healthy ?? false;
    message.healthError = object.healthError ?? "";
    message.instructions = object.instructions ?? "";
    return message;
  },
};

function createBaseKmsConfig(): KmsConfig {
  return {
    name: "",
    cryptoKeyName: "",
    state: 0,
    stateDetails: "",
    createTime: undefined,
    description: "",
    labels: {},
    instructions: "",
    serviceAccount: "",
  };
}

export const KmsConfig: MessageFns<KmsConfig> = {
  encode(message: KmsConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.cryptoKeyName !== "") {
      writer.uint32(18).string(message.cryptoKeyName);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.stateDetails !== "") {
      writer.uint32(34).string(message.stateDetails);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      KmsConfig_LabelsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.instructions !== "") {
      writer.uint32(66).string(message.instructions);
    }
    if (message.serviceAccount !== "") {
      writer.uint32(74).string(message.serviceAccount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KmsConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKmsConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cryptoKeyName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.stateDetails = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = KmsConfig_LabelsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.labels[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.instructions = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KmsConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      cryptoKeyName: isSet(object.cryptoKeyName) ? globalThis.String(object.cryptoKeyName) : "",
      state: isSet(object.state) ? kmsConfig_StateFromJSON(object.state) : 0,
      stateDetails: isSet(object.stateDetails) ? globalThis.String(object.stateDetails) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      instructions: isSet(object.instructions) ? globalThis.String(object.instructions) : "",
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
    };
  },

  toJSON(message: KmsConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.cryptoKeyName !== "") {
      obj.cryptoKeyName = message.cryptoKeyName;
    }
    if (message.state !== 0) {
      obj.state = kmsConfig_StateToJSON(message.state);
    }
    if (message.stateDetails !== "") {
      obj.stateDetails = message.stateDetails;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.instructions !== "") {
      obj.instructions = message.instructions;
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    return obj;
  },

  create(base?: DeepPartial<KmsConfig>): KmsConfig {
    return KmsConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KmsConfig>): KmsConfig {
    const message = createBaseKmsConfig();
    message.name = object.name ?? "";
    message.cryptoKeyName = object.cryptoKeyName ?? "";
    message.state = object.state ?? 0;
    message.stateDetails = object.stateDetails ?? "";
    message.createTime = object.createTime ?? undefined;
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.instructions = object.instructions ?? "";
    message.serviceAccount = object.serviceAccount ?? "";
    return message;
  },
};

function createBaseKmsConfig_LabelsEntry(): KmsConfig_LabelsEntry {
  return { key: "", value: "" };
}

export const KmsConfig_LabelsEntry: MessageFns<KmsConfig_LabelsEntry> = {
  encode(message: KmsConfig_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KmsConfig_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKmsConfig_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KmsConfig_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: KmsConfig_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<KmsConfig_LabelsEntry>): KmsConfig_LabelsEntry {
    return KmsConfig_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KmsConfig_LabelsEntry>): KmsConfig_LabelsEntry {
    const message = createBaseKmsConfig_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
