// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/netapp/v1/backup_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.netapp.v1";

/** Backup Policy. */
export interface BackupPolicy {
  /**
   * Identifier. The resource name of the backup policy.
   * Format:
   * `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`.
   */
  name: string;
  /**
   * Number of daily backups to keep. Note that the minimum daily backup limit
   * is 2.
   */
  dailyBackupLimit?:
    | number
    | undefined;
  /**
   * Number of weekly backups to keep. Note that the sum of daily, weekly and
   * monthly backups should be greater than 1.
   */
  weeklyBackupLimit?:
    | number
    | undefined;
  /**
   * Number of monthly backups to keep. Note that the sum of daily, weekly and
   * monthly backups should be greater than 1.
   */
  monthlyBackupLimit?:
    | number
    | undefined;
  /** Description of the backup policy. */
  description?:
    | string
    | undefined;
  /**
   * If enabled, make backups automatically according to the schedules.
   * This will be applied to all volumes that have this policy attached and
   * enforced on volume level. If not specified, default is true.
   */
  enabled?:
    | boolean
    | undefined;
  /** Output only. The total number of volumes assigned by this backup policy. */
  assignedVolumeCount?:
    | number
    | undefined;
  /** Output only. The time when the backup policy was created. */
  createTime:
    | Date
    | undefined;
  /** Resource labels to represent user provided metadata. */
  labels: { [key: string]: string };
  /** Output only. The backup policy state. */
  state: BackupPolicy_State;
}

export enum BackupPolicy_State {
  /** STATE_UNSPECIFIED - State not set. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - BackupPolicy is being created. */
  CREATING = 1,
  /** READY - BackupPolicy is available for use. */
  READY = 2,
  /** DELETING - BackupPolicy is being deleted. */
  DELETING = 3,
  /** ERROR - BackupPolicy is not valid and cannot be used. */
  ERROR = 4,
  /** UPDATING - BackupPolicy is being updated. */
  UPDATING = 5,
  UNRECOGNIZED = -1,
}

export function backupPolicy_StateFromJSON(object: any): BackupPolicy_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return BackupPolicy_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return BackupPolicy_State.CREATING;
    case 2:
    case "READY":
      return BackupPolicy_State.READY;
    case 3:
    case "DELETING":
      return BackupPolicy_State.DELETING;
    case 4:
    case "ERROR":
      return BackupPolicy_State.ERROR;
    case 5:
    case "UPDATING":
      return BackupPolicy_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BackupPolicy_State.UNRECOGNIZED;
  }
}

export function backupPolicy_StateToJSON(object: BackupPolicy_State): string {
  switch (object) {
    case BackupPolicy_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case BackupPolicy_State.CREATING:
      return "CREATING";
    case BackupPolicy_State.READY:
      return "READY";
    case BackupPolicy_State.DELETING:
      return "DELETING";
    case BackupPolicy_State.ERROR:
      return "ERROR";
    case BackupPolicy_State.UPDATING:
      return "UPDATING";
    case BackupPolicy_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BackupPolicy_LabelsEntry {
  key: string;
  value: string;
}

/** CreateBackupPolicyRequest creates a backupPolicy. */
export interface CreateBackupPolicyRequest {
  /**
   * Required. The location to create the backup policies of, in the format
   * `projects/{project_id}/locations/{location}`
   */
  parent: string;
  /** Required. A backupPolicy resource */
  backupPolicy:
    | BackupPolicy
    | undefined;
  /**
   * Required. The ID to use for the backup policy.
   * The ID must be unique within the specified location.
   * Must contain only letters, numbers, underscore and hyphen, with the first
   * character a letter or underscore, the last a letter or underscore or a
   * number, and a 63 character maximum.
   */
  backupPolicyId: string;
}

/** GetBackupPolicyRequest gets the state of a backupPolicy. */
export interface GetBackupPolicyRequest {
  /**
   * Required. The backupPolicy resource name, in the format
   * `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`
   */
  name: string;
}

/** ListBackupPoliciesRequest for requesting multiple backup policies. */
export interface ListBackupPoliciesRequest {
  /** Required. Parent value for ListBackupPoliciesRequest */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, the server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results */
  filter: string;
  /** Hint for how to order the results */
  orderBy: string;
}

/** ListBackupPoliciesResponse contains all the backup policies requested. */
export interface ListBackupPoliciesResponse {
  /** The list of backup policies. */
  backupPolicies: BackupPolicy[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** UpdateBackupPolicyRequest for updating a backup policy. */
export interface UpdateBackupPolicyRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Backup Policy resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The backup policy being updated */
  backupPolicy: BackupPolicy | undefined;
}

/** DeleteBackupPolicyRequest deletes a backup policy. */
export interface DeleteBackupPolicyRequest {
  /**
   * Required. The backup policy resource name, in the format
   * `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`
   */
  name: string;
}

function createBaseBackupPolicy(): BackupPolicy {
  return {
    name: "",
    dailyBackupLimit: undefined,
    weeklyBackupLimit: undefined,
    monthlyBackupLimit: undefined,
    description: undefined,
    enabled: undefined,
    assignedVolumeCount: undefined,
    createTime: undefined,
    labels: {},
    state: 0,
  };
}

export const BackupPolicy: MessageFns<BackupPolicy> = {
  encode(message: BackupPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.dailyBackupLimit !== undefined) {
      writer.uint32(16).int32(message.dailyBackupLimit);
    }
    if (message.weeklyBackupLimit !== undefined) {
      writer.uint32(24).int32(message.weeklyBackupLimit);
    }
    if (message.monthlyBackupLimit !== undefined) {
      writer.uint32(32).int32(message.monthlyBackupLimit);
    }
    if (message.description !== undefined) {
      writer.uint32(42).string(message.description);
    }
    if (message.enabled !== undefined) {
      writer.uint32(48).bool(message.enabled);
    }
    if (message.assignedVolumeCount !== undefined) {
      writer.uint32(56).int32(message.assignedVolumeCount);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(66).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      BackupPolicy_LabelsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    if (message.state !== 0) {
      writer.uint32(80).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.dailyBackupLimit = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.weeklyBackupLimit = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.monthlyBackupLimit = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.assignedVolumeCount = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = BackupPolicy_LabelsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.labels[entry9.key] = entry9.value;
          }
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupPolicy {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dailyBackupLimit: isSet(object.dailyBackupLimit) ? globalThis.Number(object.dailyBackupLimit) : undefined,
      weeklyBackupLimit: isSet(object.weeklyBackupLimit) ? globalThis.Number(object.weeklyBackupLimit) : undefined,
      monthlyBackupLimit: isSet(object.monthlyBackupLimit) ? globalThis.Number(object.monthlyBackupLimit) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : undefined,
      assignedVolumeCount: isSet(object.assignedVolumeCount)
        ? globalThis.Number(object.assignedVolumeCount)
        : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      state: isSet(object.state) ? backupPolicy_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: BackupPolicy): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dailyBackupLimit !== undefined) {
      obj.dailyBackupLimit = Math.round(message.dailyBackupLimit);
    }
    if (message.weeklyBackupLimit !== undefined) {
      obj.weeklyBackupLimit = Math.round(message.weeklyBackupLimit);
    }
    if (message.monthlyBackupLimit !== undefined) {
      obj.monthlyBackupLimit = Math.round(message.monthlyBackupLimit);
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.enabled !== undefined) {
      obj.enabled = message.enabled;
    }
    if (message.assignedVolumeCount !== undefined) {
      obj.assignedVolumeCount = Math.round(message.assignedVolumeCount);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.state !== 0) {
      obj.state = backupPolicy_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<BackupPolicy>): BackupPolicy {
    return BackupPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackupPolicy>): BackupPolicy {
    const message = createBaseBackupPolicy();
    message.name = object.name ?? "";
    message.dailyBackupLimit = object.dailyBackupLimit ?? undefined;
    message.weeklyBackupLimit = object.weeklyBackupLimit ?? undefined;
    message.monthlyBackupLimit = object.monthlyBackupLimit ?? undefined;
    message.description = object.description ?? undefined;
    message.enabled = object.enabled ?? undefined;
    message.assignedVolumeCount = object.assignedVolumeCount ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseBackupPolicy_LabelsEntry(): BackupPolicy_LabelsEntry {
  return { key: "", value: "" };
}

export const BackupPolicy_LabelsEntry: MessageFns<BackupPolicy_LabelsEntry> = {
  encode(message: BackupPolicy_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupPolicy_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupPolicy_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupPolicy_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BackupPolicy_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<BackupPolicy_LabelsEntry>): BackupPolicy_LabelsEntry {
    return BackupPolicy_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackupPolicy_LabelsEntry>): BackupPolicy_LabelsEntry {
    const message = createBaseBackupPolicy_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCreateBackupPolicyRequest(): CreateBackupPolicyRequest {
  return { parent: "", backupPolicy: undefined, backupPolicyId: "" };
}

export const CreateBackupPolicyRequest: MessageFns<CreateBackupPolicyRequest> = {
  encode(message: CreateBackupPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.backupPolicy !== undefined) {
      BackupPolicy.encode(message.backupPolicy, writer.uint32(18).fork()).join();
    }
    if (message.backupPolicyId !== "") {
      writer.uint32(26).string(message.backupPolicyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBackupPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBackupPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.backupPolicy = BackupPolicy.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.backupPolicyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBackupPolicyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      backupPolicy: isSet(object.backupPolicy) ? BackupPolicy.fromJSON(object.backupPolicy) : undefined,
      backupPolicyId: isSet(object.backupPolicyId) ? globalThis.String(object.backupPolicyId) : "",
    };
  },

  toJSON(message: CreateBackupPolicyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.backupPolicy !== undefined) {
      obj.backupPolicy = BackupPolicy.toJSON(message.backupPolicy);
    }
    if (message.backupPolicyId !== "") {
      obj.backupPolicyId = message.backupPolicyId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBackupPolicyRequest>): CreateBackupPolicyRequest {
    return CreateBackupPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBackupPolicyRequest>): CreateBackupPolicyRequest {
    const message = createBaseCreateBackupPolicyRequest();
    message.parent = object.parent ?? "";
    message.backupPolicy = (object.backupPolicy !== undefined && object.backupPolicy !== null)
      ? BackupPolicy.fromPartial(object.backupPolicy)
      : undefined;
    message.backupPolicyId = object.backupPolicyId ?? "";
    return message;
  },
};

function createBaseGetBackupPolicyRequest(): GetBackupPolicyRequest {
  return { name: "" };
}

export const GetBackupPolicyRequest: MessageFns<GetBackupPolicyRequest> = {
  encode(message: GetBackupPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBackupPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBackupPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBackupPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBackupPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBackupPolicyRequest>): GetBackupPolicyRequest {
    return GetBackupPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBackupPolicyRequest>): GetBackupPolicyRequest {
    const message = createBaseGetBackupPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListBackupPoliciesRequest(): ListBackupPoliciesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListBackupPoliciesRequest: MessageFns<ListBackupPoliciesRequest> = {
  encode(message: ListBackupPoliciesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBackupPoliciesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBackupPoliciesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBackupPoliciesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListBackupPoliciesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBackupPoliciesRequest>): ListBackupPoliciesRequest {
    return ListBackupPoliciesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBackupPoliciesRequest>): ListBackupPoliciesRequest {
    const message = createBaseListBackupPoliciesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListBackupPoliciesResponse(): ListBackupPoliciesResponse {
  return { backupPolicies: [], nextPageToken: "", unreachable: [] };
}

export const ListBackupPoliciesResponse: MessageFns<ListBackupPoliciesResponse> = {
  encode(message: ListBackupPoliciesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.backupPolicies) {
      BackupPolicy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBackupPoliciesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBackupPoliciesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backupPolicies.push(BackupPolicy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBackupPoliciesResponse {
    return {
      backupPolicies: globalThis.Array.isArray(object?.backupPolicies)
        ? object.backupPolicies.map((e: any) => BackupPolicy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListBackupPoliciesResponse): unknown {
    const obj: any = {};
    if (message.backupPolicies?.length) {
      obj.backupPolicies = message.backupPolicies.map((e) => BackupPolicy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBackupPoliciesResponse>): ListBackupPoliciesResponse {
    return ListBackupPoliciesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBackupPoliciesResponse>): ListBackupPoliciesResponse {
    const message = createBaseListBackupPoliciesResponse();
    message.backupPolicies = object.backupPolicies?.map((e) => BackupPolicy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateBackupPolicyRequest(): UpdateBackupPolicyRequest {
  return { updateMask: undefined, backupPolicy: undefined };
}

export const UpdateBackupPolicyRequest: MessageFns<UpdateBackupPolicyRequest> = {
  encode(message: UpdateBackupPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.backupPolicy !== undefined) {
      BackupPolicy.encode(message.backupPolicy, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBackupPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBackupPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.backupPolicy = BackupPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBackupPolicyRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      backupPolicy: isSet(object.backupPolicy) ? BackupPolicy.fromJSON(object.backupPolicy) : undefined,
    };
  },

  toJSON(message: UpdateBackupPolicyRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.backupPolicy !== undefined) {
      obj.backupPolicy = BackupPolicy.toJSON(message.backupPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBackupPolicyRequest>): UpdateBackupPolicyRequest {
    return UpdateBackupPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBackupPolicyRequest>): UpdateBackupPolicyRequest {
    const message = createBaseUpdateBackupPolicyRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.backupPolicy = (object.backupPolicy !== undefined && object.backupPolicy !== null)
      ? BackupPolicy.fromPartial(object.backupPolicy)
      : undefined;
    return message;
  },
};

function createBaseDeleteBackupPolicyRequest(): DeleteBackupPolicyRequest {
  return { name: "" };
}

export const DeleteBackupPolicyRequest: MessageFns<DeleteBackupPolicyRequest> = {
  encode(message: DeleteBackupPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBackupPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBackupPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBackupPolicyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteBackupPolicyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteBackupPolicyRequest>): DeleteBackupPolicyRequest {
    return DeleteBackupPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteBackupPolicyRequest>): DeleteBackupPolicyRequest {
    const message = createBaseDeleteBackupPolicyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
