// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/netapp/v1/snapshot.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.netapp.v1";

/** ListSnapshotsRequest lists snapshots. */
export interface ListSnapshotsRequest {
  /**
   * Required. The volume for which to retrieve snapshot information,
   * in the format
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
   */
  parent: string;
  /** The maximum number of items to return. */
  pageSize: number;
  /**
   * The next_page_token value to use if there are additional
   * results to retrieve for this list request.
   */
  pageToken: string;
  /** Sort results. Supported values are "name", "name desc" or "" (unsorted). */
  orderBy: string;
  /** List filter. */
  filter: string;
}

/** ListSnapshotsResponse is the result of ListSnapshotsRequest. */
export interface ListSnapshotsResponse {
  /** A list of snapshots in the project for the specified volume. */
  snapshots: Snapshot[];
  /**
   * The token you can use to retrieve the next page of results. Not returned
   * if there are no more results in the list.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** GetSnapshotRequest gets the state of a snapshot. */
export interface GetSnapshotRequest {
  /**
   * Required. The snapshot resource name, in the format
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}/snapshots/{snapshot_id}`
   */
  name: string;
}

/** CreateSnapshotRequest creates a snapshot. */
export interface CreateSnapshotRequest {
  /**
   * Required. The NetApp volume to create the snapshots of, in the format
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}`
   */
  parent: string;
  /** Required. A snapshot resource */
  snapshot:
    | Snapshot
    | undefined;
  /**
   * Required. ID of the snapshot to create. Must be unique within the parent
   * resource. Must contain only letters, numbers, underscore and hyphen, with
   * the first character a letter or underscore, the last a letter or underscore
   * or a number, and a 63 character maximum.
   */
  snapshotId: string;
}

/** DeleteSnapshotRequest deletes a snapshot. */
export interface DeleteSnapshotRequest {
  /**
   * Required. The snapshot resource name, in the format
   * `projects/* /locations/* /volumes/* /snapshots/{snapshot_id}`
   */
  name: string;
}

/** UpdateSnapshotRequest updates description and/or labels for a snapshot. */
export interface UpdateSnapshotRequest {
  /**
   * Required. Mask of fields to update.  At least one path must be supplied in
   * this field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. A snapshot resource */
  snapshot: Snapshot | undefined;
}

/** Snapshot is a point-in-time version of a Volume's content. */
export interface Snapshot {
  /**
   * Identifier. The resource name of the snapshot.
   * Format:
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}/snapshots/{snapshot_id}`.
   */
  name: string;
  /** Output only. The snapshot state. */
  state: Snapshot_State;
  /** Output only. State details of the storage pool */
  stateDetails: string;
  /**
   * A description of the snapshot with 2048 characters or less.
   * Requests with longer descriptions will be rejected.
   */
  description: string;
  /** Output only. Current storage usage for the snapshot in bytes. */
  usedBytes: number;
  /** Output only. The time when the snapshot was created. */
  createTime:
    | Date
    | undefined;
  /** Resource labels to represent user provided metadata. */
  labels: { [key: string]: string };
}

/** The Snapshot States */
export enum Snapshot_State {
  /** STATE_UNSPECIFIED - Unspecified Snapshot State */
  STATE_UNSPECIFIED = 0,
  /** READY - Snapshot State is Ready */
  READY = 1,
  /** CREATING - Snapshot State is Creating */
  CREATING = 2,
  /** DELETING - Snapshot State is Deleting */
  DELETING = 3,
  /** UPDATING - Snapshot State is Updating */
  UPDATING = 4,
  /** DISABLED - Snapshot State is Disabled */
  DISABLED = 5,
  /** ERROR - Snapshot State is Error */
  ERROR = 6,
  UNRECOGNIZED = -1,
}

export function snapshot_StateFromJSON(object: any): Snapshot_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Snapshot_State.STATE_UNSPECIFIED;
    case 1:
    case "READY":
      return Snapshot_State.READY;
    case 2:
    case "CREATING":
      return Snapshot_State.CREATING;
    case 3:
    case "DELETING":
      return Snapshot_State.DELETING;
    case 4:
    case "UPDATING":
      return Snapshot_State.UPDATING;
    case 5:
    case "DISABLED":
      return Snapshot_State.DISABLED;
    case 6:
    case "ERROR":
      return Snapshot_State.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Snapshot_State.UNRECOGNIZED;
  }
}

export function snapshot_StateToJSON(object: Snapshot_State): string {
  switch (object) {
    case Snapshot_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Snapshot_State.READY:
      return "READY";
    case Snapshot_State.CREATING:
      return "CREATING";
    case Snapshot_State.DELETING:
      return "DELETING";
    case Snapshot_State.UPDATING:
      return "UPDATING";
    case Snapshot_State.DISABLED:
      return "DISABLED";
    case Snapshot_State.ERROR:
      return "ERROR";
    case Snapshot_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Snapshot_LabelsEntry {
  key: string;
  value: string;
}

function createBaseListSnapshotsRequest(): ListSnapshotsRequest {
  return { parent: "", pageSize: 0, pageToken: "", orderBy: "", filter: "" };
}

export const ListSnapshotsRequest: MessageFns<ListSnapshotsRequest> = {
  encode(message: ListSnapshotsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(34).string(message.orderBy);
    }
    if (message.filter !== "") {
      writer.uint32(42).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSnapshotsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSnapshotsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSnapshotsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListSnapshotsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSnapshotsRequest>): ListSnapshotsRequest {
    return ListSnapshotsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSnapshotsRequest>): ListSnapshotsRequest {
    const message = createBaseListSnapshotsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListSnapshotsResponse(): ListSnapshotsResponse {
  return { snapshots: [], nextPageToken: "", unreachable: [] };
}

export const ListSnapshotsResponse: MessageFns<ListSnapshotsResponse> = {
  encode(message: ListSnapshotsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.snapshots) {
      Snapshot.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSnapshotsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSnapshotsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.snapshots.push(Snapshot.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSnapshotsResponse {
    return {
      snapshots: globalThis.Array.isArray(object?.snapshots)
        ? object.snapshots.map((e: any) => Snapshot.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListSnapshotsResponse): unknown {
    const obj: any = {};
    if (message.snapshots?.length) {
      obj.snapshots = message.snapshots.map((e) => Snapshot.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSnapshotsResponse>): ListSnapshotsResponse {
    return ListSnapshotsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSnapshotsResponse>): ListSnapshotsResponse {
    const message = createBaseListSnapshotsResponse();
    message.snapshots = object.snapshots?.map((e) => Snapshot.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetSnapshotRequest(): GetSnapshotRequest {
  return { name: "" };
}

export const GetSnapshotRequest: MessageFns<GetSnapshotRequest> = {
  encode(message: GetSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSnapshotRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSnapshotRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSnapshotRequest>): GetSnapshotRequest {
    return GetSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSnapshotRequest>): GetSnapshotRequest {
    const message = createBaseGetSnapshotRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateSnapshotRequest(): CreateSnapshotRequest {
  return { parent: "", snapshot: undefined, snapshotId: "" };
}

export const CreateSnapshotRequest: MessageFns<CreateSnapshotRequest> = {
  encode(message: CreateSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.snapshot !== undefined) {
      Snapshot.encode(message.snapshot, writer.uint32(18).fork()).join();
    }
    if (message.snapshotId !== "") {
      writer.uint32(26).string(message.snapshotId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.snapshot = Snapshot.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.snapshotId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSnapshotRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      snapshot: isSet(object.snapshot) ? Snapshot.fromJSON(object.snapshot) : undefined,
      snapshotId: isSet(object.snapshotId) ? globalThis.String(object.snapshotId) : "",
    };
  },

  toJSON(message: CreateSnapshotRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.snapshot !== undefined) {
      obj.snapshot = Snapshot.toJSON(message.snapshot);
    }
    if (message.snapshotId !== "") {
      obj.snapshotId = message.snapshotId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSnapshotRequest>): CreateSnapshotRequest {
    return CreateSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSnapshotRequest>): CreateSnapshotRequest {
    const message = createBaseCreateSnapshotRequest();
    message.parent = object.parent ?? "";
    message.snapshot = (object.snapshot !== undefined && object.snapshot !== null)
      ? Snapshot.fromPartial(object.snapshot)
      : undefined;
    message.snapshotId = object.snapshotId ?? "";
    return message;
  },
};

function createBaseDeleteSnapshotRequest(): DeleteSnapshotRequest {
  return { name: "" };
}

export const DeleteSnapshotRequest: MessageFns<DeleteSnapshotRequest> = {
  encode(message: DeleteSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSnapshotRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSnapshotRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSnapshotRequest>): DeleteSnapshotRequest {
    return DeleteSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSnapshotRequest>): DeleteSnapshotRequest {
    const message = createBaseDeleteSnapshotRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSnapshotRequest(): UpdateSnapshotRequest {
  return { updateMask: undefined, snapshot: undefined };
}

export const UpdateSnapshotRequest: MessageFns<UpdateSnapshotRequest> = {
  encode(message: UpdateSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.snapshot !== undefined) {
      Snapshot.encode(message.snapshot, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.snapshot = Snapshot.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSnapshotRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      snapshot: isSet(object.snapshot) ? Snapshot.fromJSON(object.snapshot) : undefined,
    };
  },

  toJSON(message: UpdateSnapshotRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.snapshot !== undefined) {
      obj.snapshot = Snapshot.toJSON(message.snapshot);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSnapshotRequest>): UpdateSnapshotRequest {
    return UpdateSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSnapshotRequest>): UpdateSnapshotRequest {
    const message = createBaseUpdateSnapshotRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.snapshot = (object.snapshot !== undefined && object.snapshot !== null)
      ? Snapshot.fromPartial(object.snapshot)
      : undefined;
    return message;
  },
};

function createBaseSnapshot(): Snapshot {
  return { name: "", state: 0, stateDetails: "", description: "", usedBytes: 0, createTime: undefined, labels: {} };
}

export const Snapshot: MessageFns<Snapshot> = {
  encode(message: Snapshot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.stateDetails !== "") {
      writer.uint32(26).string(message.stateDetails);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.usedBytes !== 0) {
      writer.uint32(41).double(message.usedBytes);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Snapshot_LabelsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Snapshot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stateDetails = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.usedBytes = reader.double();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = Snapshot_LabelsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.labels[entry7.key] = entry7.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Snapshot {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      state: isSet(object.state) ? snapshot_StateFromJSON(object.state) : 0,
      stateDetails: isSet(object.stateDetails) ? globalThis.String(object.stateDetails) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      usedBytes: isSet(object.usedBytes) ? globalThis.Number(object.usedBytes) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Snapshot): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.state !== 0) {
      obj.state = snapshot_StateToJSON(message.state);
    }
    if (message.stateDetails !== "") {
      obj.stateDetails = message.stateDetails;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.usedBytes !== 0) {
      obj.usedBytes = message.usedBytes;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Snapshot>): Snapshot {
    return Snapshot.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Snapshot>): Snapshot {
    const message = createBaseSnapshot();
    message.name = object.name ?? "";
    message.state = object.state ?? 0;
    message.stateDetails = object.stateDetails ?? "";
    message.description = object.description ?? "";
    message.usedBytes = object.usedBytes ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSnapshot_LabelsEntry(): Snapshot_LabelsEntry {
  return { key: "", value: "" };
}

export const Snapshot_LabelsEntry: MessageFns<Snapshot_LabelsEntry> = {
  encode(message: Snapshot_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Snapshot_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSnapshot_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Snapshot_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Snapshot_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Snapshot_LabelsEntry>): Snapshot_LabelsEntry {
    return Snapshot_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Snapshot_LabelsEntry>): Snapshot_LabelsEntry {
    const message = createBaseSnapshot_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
