// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1p1beta1/finding.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { SecurityMarks } from "./security_marks.js";

export const protobufPackage = "google.cloud.securitycenter.v1p1beta1";

/**
 * Security Command Center finding.
 *
 * A finding is a record of assessment data (security, risk, health or privacy)
 * ingested into Security Command Center for presentation, notification,
 * analysis, policy testing, and enforcement. For example, an XSS vulnerability
 * in an App Engine application is a finding.
 */
export interface Finding {
  /**
   * The relative resource name of this finding. See:
   * https://cloud.google.com/apis/design/resource_names#relative_resource_name
   * Example:
   * "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}"
   */
  name: string;
  /**
   * The relative resource name of the source the finding belongs to. See:
   * https://cloud.google.com/apis/design/resource_names#relative_resource_name
   * This field is immutable after creation time.
   * For example:
   * "organizations/{organization_id}/sources/{source_id}"
   */
  parent: string;
  /**
   * For findings on Google Cloud resources, the full resource
   * name of the Google Cloud resource this finding is for. See:
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   * When the finding is for a non-Google Cloud resource, the resourceName can
   * be a customer or partner defined string. This field is immutable after
   * creation time.
   */
  resourceName: string;
  /** The state of the finding. */
  state: Finding_State;
  /**
   * The additional taxonomy group within findings from a given source.
   * This field is immutable after creation time.
   * Example: "XSS_FLASH_INJECTION"
   */
  category: string;
  /**
   * The URI that, if available, points to a web page outside of Security
   * Command Center where additional information about the finding can be found.
   * This field is guaranteed to be either empty or a well formed URL.
   */
  externalUri: string;
  /**
   * Source specific properties. These properties are managed by the source
   * that writes the finding. The key names in the source_properties map must be
   * between 1 and 255 characters, and must start with a letter and contain
   * alphanumeric characters or underscores only.
   */
  sourceProperties: { [key: string]: any | undefined };
  /**
   * Output only. User specified security marks. These marks are entirely
   * managed by the user and come from the SecurityMarks resource that belongs
   * to the finding.
   */
  securityMarks:
    | SecurityMarks
    | undefined;
  /**
   * The time at which the event took place, or when an update to the finding
   * occurred. For example, if the finding represents an open firewall it would
   * capture the time the detector believes the firewall became open. The
   * accuracy is determined by the detector. If the finding were to be resolved
   * afterward, this time would reflect when the finding was resolved. Must not
   * be set to a value greater than the current timestamp.
   */
  eventTime:
    | Date
    | undefined;
  /** The time at which the finding was created in Security Command Center. */
  createTime:
    | Date
    | undefined;
  /**
   * The severity of the finding. This field is managed by the source that
   * writes the finding.
   */
  severity: Finding_Severity;
  /**
   * The canonical name of the finding. It's either
   * "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}",
   * "folders/{folder_id}/sources/{source_id}/findings/{finding_id}" or
   * "projects/{project_number}/sources/{source_id}/findings/{finding_id}",
   * depending on the closest CRM ancestor of the resource associated with the
   * finding.
   */
  canonicalName: string;
}

/** The state of the finding. */
export enum Finding_State {
  /** STATE_UNSPECIFIED - Unspecified state. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The finding requires attention and has not been addressed yet. */
  ACTIVE = 1,
  /**
   * INACTIVE - The finding has been fixed, triaged as a non-issue or otherwise addressed
   * and is no longer active.
   */
  INACTIVE = 2,
  UNRECOGNIZED = -1,
}

export function finding_StateFromJSON(object: any): Finding_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Finding_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return Finding_State.ACTIVE;
    case 2:
    case "INACTIVE":
      return Finding_State.INACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Finding_State.UNRECOGNIZED;
  }
}

export function finding_StateToJSON(object: Finding_State): string {
  switch (object) {
    case Finding_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Finding_State.ACTIVE:
      return "ACTIVE";
    case Finding_State.INACTIVE:
      return "INACTIVE";
    case Finding_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The severity of the finding. This field is managed by the source that
 * writes the finding.
 */
export enum Finding_Severity {
  /** SEVERITY_UNSPECIFIED - No severity specified. The default value. */
  SEVERITY_UNSPECIFIED = 0,
  /** CRITICAL - Critical severity. */
  CRITICAL = 1,
  /** HIGH - High severity. */
  HIGH = 2,
  /** MEDIUM - Medium severity. */
  MEDIUM = 3,
  /** LOW - Low severity. */
  LOW = 4,
  UNRECOGNIZED = -1,
}

export function finding_SeverityFromJSON(object: any): Finding_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return Finding_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "CRITICAL":
      return Finding_Severity.CRITICAL;
    case 2:
    case "HIGH":
      return Finding_Severity.HIGH;
    case 3:
    case "MEDIUM":
      return Finding_Severity.MEDIUM;
    case 4:
    case "LOW":
      return Finding_Severity.LOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Finding_Severity.UNRECOGNIZED;
  }
}

export function finding_SeverityToJSON(object: Finding_Severity): string {
  switch (object) {
    case Finding_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case Finding_Severity.CRITICAL:
      return "CRITICAL";
    case Finding_Severity.HIGH:
      return "HIGH";
    case Finding_Severity.MEDIUM:
      return "MEDIUM";
    case Finding_Severity.LOW:
      return "LOW";
    case Finding_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Finding_SourcePropertiesEntry {
  key: string;
  value: any | undefined;
}

function createBaseFinding(): Finding {
  return {
    name: "",
    parent: "",
    resourceName: "",
    state: 0,
    category: "",
    externalUri: "",
    sourceProperties: {},
    securityMarks: undefined,
    eventTime: undefined,
    createTime: undefined,
    severity: 0,
    canonicalName: "",
  };
}

export const Finding: MessageFns<Finding> = {
  encode(message: Finding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.parent !== "") {
      writer.uint32(18).string(message.parent);
    }
    if (message.resourceName !== "") {
      writer.uint32(26).string(message.resourceName);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.category !== "") {
      writer.uint32(42).string(message.category);
    }
    if (message.externalUri !== "") {
      writer.uint32(50).string(message.externalUri);
    }
    Object.entries(message.sourceProperties).forEach(([key, value]) => {
      if (value !== undefined) {
        Finding_SourcePropertiesEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
      }
    });
    if (message.securityMarks !== undefined) {
      SecurityMarks.encode(message.securityMarks, writer.uint32(66).fork()).join();
    }
    if (message.eventTime !== undefined) {
      Timestamp.encode(toTimestamp(message.eventTime), writer.uint32(74).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(82).fork()).join();
    }
    if (message.severity !== 0) {
      writer.uint32(104).int32(message.severity);
    }
    if (message.canonicalName !== "") {
      writer.uint32(114).string(message.canonicalName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Finding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.category = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.externalUri = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = Finding_SourcePropertiesEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.sourceProperties[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.securityMarks = SecurityMarks.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.eventTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.canonicalName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Finding {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      state: isSet(object.state) ? finding_StateFromJSON(object.state) : 0,
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      externalUri: isSet(object.externalUri) ? globalThis.String(object.externalUri) : "",
      sourceProperties: isObject(object.sourceProperties)
        ? Object.entries(object.sourceProperties).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      securityMarks: isSet(object.securityMarks) ? SecurityMarks.fromJSON(object.securityMarks) : undefined,
      eventTime: isSet(object.eventTime) ? fromJsonTimestamp(object.eventTime) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      severity: isSet(object.severity) ? finding_SeverityFromJSON(object.severity) : 0,
      canonicalName: isSet(object.canonicalName) ? globalThis.String(object.canonicalName) : "",
    };
  },

  toJSON(message: Finding): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.state !== 0) {
      obj.state = finding_StateToJSON(message.state);
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.externalUri !== "") {
      obj.externalUri = message.externalUri;
    }
    if (message.sourceProperties) {
      const entries = Object.entries(message.sourceProperties);
      if (entries.length > 0) {
        obj.sourceProperties = {};
        entries.forEach(([k, v]) => {
          obj.sourceProperties[k] = v;
        });
      }
    }
    if (message.securityMarks !== undefined) {
      obj.securityMarks = SecurityMarks.toJSON(message.securityMarks);
    }
    if (message.eventTime !== undefined) {
      obj.eventTime = message.eventTime.toISOString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.severity !== 0) {
      obj.severity = finding_SeverityToJSON(message.severity);
    }
    if (message.canonicalName !== "") {
      obj.canonicalName = message.canonicalName;
    }
    return obj;
  },

  create(base?: DeepPartial<Finding>): Finding {
    return Finding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Finding>): Finding {
    const message = createBaseFinding();
    message.name = object.name ?? "";
    message.parent = object.parent ?? "";
    message.resourceName = object.resourceName ?? "";
    message.state = object.state ?? 0;
    message.category = object.category ?? "";
    message.externalUri = object.externalUri ?? "";
    message.sourceProperties = Object.entries(object.sourceProperties ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.securityMarks = (object.securityMarks !== undefined && object.securityMarks !== null)
      ? SecurityMarks.fromPartial(object.securityMarks)
      : undefined;
    message.eventTime = object.eventTime ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.severity = object.severity ?? 0;
    message.canonicalName = object.canonicalName ?? "";
    return message;
  },
};

function createBaseFinding_SourcePropertiesEntry(): Finding_SourcePropertiesEntry {
  return { key: "", value: undefined };
}

export const Finding_SourcePropertiesEntry: MessageFns<Finding_SourcePropertiesEntry> = {
  encode(message: Finding_SourcePropertiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Finding_SourcePropertiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinding_SourcePropertiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Finding_SourcePropertiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: Finding_SourcePropertiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Finding_SourcePropertiesEntry>): Finding_SourcePropertiesEntry {
    return Finding_SourcePropertiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Finding_SourcePropertiesEntry>): Finding_SourcePropertiesEntry {
    const message = createBaseFinding_SourcePropertiesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
