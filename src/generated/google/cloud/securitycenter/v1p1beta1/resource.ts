// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1p1beta1/resource.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Folder } from "./folder.js";

export const protobufPackage = "google.cloud.securitycenter.v1p1beta1";

/** Information related to the Google Cloud resource. */
export interface Resource {
  /**
   * The full resource name of the resource. See:
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   */
  name: string;
  /** The full resource name of project that the resource belongs to. */
  project: string;
  /** The human readable name of project that the resource belongs to. */
  projectDisplayName: string;
  /** The full resource name of resource's parent. */
  parent: string;
  /** The human readable name of resource's parent. */
  parentDisplayName: string;
  /**
   * Output only. Contains a Folder message for each folder in the assets ancestry.
   * The first folder is the deepest nested folder, and the last folder is the
   * folder directly under the Organization.
   */
  folders: Folder[];
}

function createBaseResource(): Resource {
  return { name: "", project: "", projectDisplayName: "", parent: "", parentDisplayName: "", folders: [] };
}

export const Resource: MessageFns<Resource> = {
  encode(message: Resource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.projectDisplayName !== "") {
      writer.uint32(26).string(message.projectDisplayName);
    }
    if (message.parent !== "") {
      writer.uint32(34).string(message.parent);
    }
    if (message.parentDisplayName !== "") {
      writer.uint32(42).string(message.parentDisplayName);
    }
    for (const v of message.folders) {
      Folder.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Resource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectDisplayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.parentDisplayName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.folders.push(Folder.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Resource {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      projectDisplayName: isSet(object.projectDisplayName) ? globalThis.String(object.projectDisplayName) : "",
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      parentDisplayName: isSet(object.parentDisplayName) ? globalThis.String(object.parentDisplayName) : "",
      folders: globalThis.Array.isArray(object?.folders) ? object.folders.map((e: any) => Folder.fromJSON(e)) : [],
    };
  },

  toJSON(message: Resource): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.projectDisplayName !== "") {
      obj.projectDisplayName = message.projectDisplayName;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.parentDisplayName !== "") {
      obj.parentDisplayName = message.parentDisplayName;
    }
    if (message.folders?.length) {
      obj.folders = message.folders.map((e) => Folder.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Resource>): Resource {
    return Resource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Resource>): Resource {
    const message = createBaseResource();
    message.name = object.name ?? "";
    message.project = object.project ?? "";
    message.projectDisplayName = object.projectDisplayName ?? "";
    message.parent = object.parent ?? "";
    message.parentDisplayName = object.parentDisplayName ?? "";
    message.folders = object.folders?.map((e) => Folder.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
