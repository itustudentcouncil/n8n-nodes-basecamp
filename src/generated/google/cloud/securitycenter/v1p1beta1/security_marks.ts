// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1p1beta1/security_marks.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v1p1beta1";

/**
 * User specified security marks that are attached to the parent Security
 * Command Center resource. Security marks are scoped within a Security Command
 * Center organization -- they can be modified and viewed by all users who have
 * proper permissions on the organization.
 */
export interface SecurityMarks {
  /**
   * The relative resource name of the SecurityMarks. See:
   * https://cloud.google.com/apis/design/resource_names#relative_resource_name
   * Examples:
   * "organizations/{organization_id}/assets/{asset_id}/securityMarks"
   * "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks".
   */
  name: string;
  /**
   * Mutable user specified security marks belonging to the parent resource.
   * Constraints are as follows:
   *
   *   * Keys and values are treated as case insensitive
   *   * Keys must be between 1 - 256 characters (inclusive)
   *   * Keys must be letters, numbers, underscores, or dashes
   *   * Values have leading and trailing whitespace trimmed, remaining
   *     characters must be between 1 - 4096 characters (inclusive)
   */
  marks: { [key: string]: string };
  /**
   * The canonical name of the marks.
   * Examples:
   * "organizations/{organization_id}/assets/{asset_id}/securityMarks"
   * "folders/{folder_id}/assets/{asset_id}/securityMarks"
   * "projects/{project_number}/assets/{asset_id}/securityMarks"
   * "organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks"
   * "folders/{folder_id}/sources/{source_id}/findings/{finding_id}/securityMarks"
   * "projects/{project_number}/sources/{source_id}/findings/{finding_id}/securityMarks"
   */
  canonicalName: string;
}

export interface SecurityMarks_MarksEntry {
  key: string;
  value: string;
}

function createBaseSecurityMarks(): SecurityMarks {
  return { name: "", marks: {}, canonicalName: "" };
}

export const SecurityMarks: MessageFns<SecurityMarks> = {
  encode(message: SecurityMarks, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.marks).forEach(([key, value]) => {
      SecurityMarks_MarksEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.canonicalName !== "") {
      writer.uint32(26).string(message.canonicalName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityMarks {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityMarks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = SecurityMarks_MarksEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.marks[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.canonicalName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityMarks {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      marks: isObject(object.marks)
        ? Object.entries(object.marks).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      canonicalName: isSet(object.canonicalName) ? globalThis.String(object.canonicalName) : "",
    };
  },

  toJSON(message: SecurityMarks): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.marks) {
      const entries = Object.entries(message.marks);
      if (entries.length > 0) {
        obj.marks = {};
        entries.forEach(([k, v]) => {
          obj.marks[k] = v;
        });
      }
    }
    if (message.canonicalName !== "") {
      obj.canonicalName = message.canonicalName;
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityMarks>): SecurityMarks {
    return SecurityMarks.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityMarks>): SecurityMarks {
    const message = createBaseSecurityMarks();
    message.name = object.name ?? "";
    message.marks = Object.entries(object.marks ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.canonicalName = object.canonicalName ?? "";
    return message;
  },
};

function createBaseSecurityMarks_MarksEntry(): SecurityMarks_MarksEntry {
  return { key: "", value: "" };
}

export const SecurityMarks_MarksEntry: MessageFns<SecurityMarks_MarksEntry> = {
  encode(message: SecurityMarks_MarksEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityMarks_MarksEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityMarks_MarksEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityMarks_MarksEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SecurityMarks_MarksEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityMarks_MarksEntry>): SecurityMarks_MarksEntry {
    return SecurityMarks_MarksEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityMarks_MarksEntry>): SecurityMarks_MarksEntry {
    const message = createBaseSecurityMarks_MarksEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
