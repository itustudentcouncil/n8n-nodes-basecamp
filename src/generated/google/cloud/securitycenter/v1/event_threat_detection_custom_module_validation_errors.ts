// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1/event_threat_detection_custom_module_validation_errors.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v1";

/**
 * A list of zero or more errors encountered while validating the uploaded
 * configuration of an Event Threat Detection Custom Module.
 */
export interface CustomModuleValidationErrors {
  errors: CustomModuleValidationError[];
}

/**
 * An error encountered while validating the uploaded configuration of an
 * Event Threat Detection Custom Module.
 */
export interface CustomModuleValidationError {
  /** A description of the error, suitable for human consumption. Required. */
  description: string;
  /**
   * The path, in RFC 8901 JSON Pointer format, to the field that failed
   * validation. This may be left empty if no specific field is affected.
   */
  fieldPath: string;
  /**
   * The initial position of the error in the uploaded text version of the
   * module. This field may be omitted if no specific position applies, or if
   * one could not be computed.
   */
  start?:
    | Position
    | undefined;
  /**
   * The end position of the error in the uploaded text version of the
   * module. This field may be omitted if no specific position applies, or if
   * one could not be computed..
   */
  end?: Position | undefined;
}

/** A position in the uploaded text version of a module. */
export interface Position {
  lineNumber: number;
  columnNumber: number;
}

function createBaseCustomModuleValidationErrors(): CustomModuleValidationErrors {
  return { errors: [] };
}

export const CustomModuleValidationErrors: MessageFns<CustomModuleValidationErrors> = {
  encode(message: CustomModuleValidationErrors, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errors) {
      CustomModuleValidationError.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomModuleValidationErrors {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomModuleValidationErrors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errors.push(CustomModuleValidationError.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomModuleValidationErrors {
    return {
      errors: globalThis.Array.isArray(object?.errors)
        ? object.errors.map((e: any) => CustomModuleValidationError.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CustomModuleValidationErrors): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => CustomModuleValidationError.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CustomModuleValidationErrors>): CustomModuleValidationErrors {
    return CustomModuleValidationErrors.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomModuleValidationErrors>): CustomModuleValidationErrors {
    const message = createBaseCustomModuleValidationErrors();
    message.errors = object.errors?.map((e) => CustomModuleValidationError.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCustomModuleValidationError(): CustomModuleValidationError {
  return { description: "", fieldPath: "", start: undefined, end: undefined };
}

export const CustomModuleValidationError: MessageFns<CustomModuleValidationError> = {
  encode(message: CustomModuleValidationError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.fieldPath !== "") {
      writer.uint32(18).string(message.fieldPath);
    }
    if (message.start !== undefined) {
      Position.encode(message.start, writer.uint32(26).fork()).join();
    }
    if (message.end !== undefined) {
      Position.encode(message.end, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomModuleValidationError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomModuleValidationError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldPath = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.start = Position.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.end = Position.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomModuleValidationError {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      fieldPath: isSet(object.fieldPath) ? globalThis.String(object.fieldPath) : "",
      start: isSet(object.start) ? Position.fromJSON(object.start) : undefined,
      end: isSet(object.end) ? Position.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: CustomModuleValidationError): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.fieldPath !== "") {
      obj.fieldPath = message.fieldPath;
    }
    if (message.start !== undefined) {
      obj.start = Position.toJSON(message.start);
    }
    if (message.end !== undefined) {
      obj.end = Position.toJSON(message.end);
    }
    return obj;
  },

  create(base?: DeepPartial<CustomModuleValidationError>): CustomModuleValidationError {
    return CustomModuleValidationError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CustomModuleValidationError>): CustomModuleValidationError {
    const message = createBaseCustomModuleValidationError();
    message.description = object.description ?? "";
    message.fieldPath = object.fieldPath ?? "";
    message.start = (object.start !== undefined && object.start !== null)
      ? Position.fromPartial(object.start)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null) ? Position.fromPartial(object.end) : undefined;
    return message;
  },
};

function createBasePosition(): Position {
  return { lineNumber: 0, columnNumber: 0 };
}

export const Position: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lineNumber !== 0) {
      writer.uint32(8).int32(message.lineNumber);
    }
    if (message.columnNumber !== 0) {
      writer.uint32(16).int32(message.columnNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.lineNumber = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.columnNumber = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      lineNumber: isSet(object.lineNumber) ? globalThis.Number(object.lineNumber) : 0,
      columnNumber: isSet(object.columnNumber) ? globalThis.Number(object.columnNumber) : 0,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.lineNumber !== 0) {
      obj.lineNumber = Math.round(message.lineNumber);
    }
    if (message.columnNumber !== 0) {
      obj.columnNumber = Math.round(message.columnNumber);
    }
    return obj;
  },

  create(base?: DeepPartial<Position>): Position {
    return Position.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Position>): Position {
    const message = createBasePosition();
    message.lineNumber = object.lineNumber ?? 0;
    message.columnNumber = object.columnNumber ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
