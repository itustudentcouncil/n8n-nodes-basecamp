// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1/attack_path.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v1";

/** A path that an attacker could take to reach an exposed resource. */
export interface AttackPath {
  /**
   * The attack path name, for example,
   *  `organizations/12/simulation/34/valuedResources/56/attackPaths/78`
   */
  name: string;
  /** A list of nodes that exist in this attack path. */
  pathNodes: AttackPath_AttackPathNode[];
  /** A list of the edges between nodes in this attack path. */
  edges: AttackPath_AttackPathEdge[];
}

/** Represents one point that an attacker passes through in this attack path. */
export interface AttackPath_AttackPathNode {
  /**
   * The name of the resource at this point in the attack path.
   * The format of the name follows the Cloud Asset Inventory [resource
   * name
   * format](https://cloud.google.com/asset-inventory/docs/resource-name-format)
   */
  resource: string;
  /**
   * The [supported resource
   * type](https://cloud.google.com/asset-inventory/docs/supported-asset-types)
   */
  resourceType: string;
  /** Human-readable name of this resource. */
  displayName: string;
  /** The findings associated with this node in the attack path. */
  associatedFindings: AttackPath_AttackPathNode_PathNodeAssociatedFinding[];
  /** Unique id of the attack path node. */
  uuid: string;
  /** A list of attack step nodes that exist in this attack path node. */
  attackSteps: AttackPath_AttackPathNode_AttackStepNode[];
}

/** The type of the incoming attack step node. */
export enum AttackPath_AttackPathNode_NodeType {
  /** NODE_TYPE_UNSPECIFIED - Type not specified */
  NODE_TYPE_UNSPECIFIED = 0,
  /** NODE_TYPE_AND - Incoming edge joined with AND */
  NODE_TYPE_AND = 1,
  /** NODE_TYPE_OR - Incoming edge joined with OR */
  NODE_TYPE_OR = 2,
  /** NODE_TYPE_DEFENSE - Incoming edge is defense */
  NODE_TYPE_DEFENSE = 3,
  /** NODE_TYPE_ATTACKER - Incoming edge is attacker */
  NODE_TYPE_ATTACKER = 4,
  UNRECOGNIZED = -1,
}

export function attackPath_AttackPathNode_NodeTypeFromJSON(object: any): AttackPath_AttackPathNode_NodeType {
  switch (object) {
    case 0:
    case "NODE_TYPE_UNSPECIFIED":
      return AttackPath_AttackPathNode_NodeType.NODE_TYPE_UNSPECIFIED;
    case 1:
    case "NODE_TYPE_AND":
      return AttackPath_AttackPathNode_NodeType.NODE_TYPE_AND;
    case 2:
    case "NODE_TYPE_OR":
      return AttackPath_AttackPathNode_NodeType.NODE_TYPE_OR;
    case 3:
    case "NODE_TYPE_DEFENSE":
      return AttackPath_AttackPathNode_NodeType.NODE_TYPE_DEFENSE;
    case 4:
    case "NODE_TYPE_ATTACKER":
      return AttackPath_AttackPathNode_NodeType.NODE_TYPE_ATTACKER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttackPath_AttackPathNode_NodeType.UNRECOGNIZED;
  }
}

export function attackPath_AttackPathNode_NodeTypeToJSON(object: AttackPath_AttackPathNode_NodeType): string {
  switch (object) {
    case AttackPath_AttackPathNode_NodeType.NODE_TYPE_UNSPECIFIED:
      return "NODE_TYPE_UNSPECIFIED";
    case AttackPath_AttackPathNode_NodeType.NODE_TYPE_AND:
      return "NODE_TYPE_AND";
    case AttackPath_AttackPathNode_NodeType.NODE_TYPE_OR:
      return "NODE_TYPE_OR";
    case AttackPath_AttackPathNode_NodeType.NODE_TYPE_DEFENSE:
      return "NODE_TYPE_DEFENSE";
    case AttackPath_AttackPathNode_NodeType.NODE_TYPE_ATTACKER:
      return "NODE_TYPE_ATTACKER";
    case AttackPath_AttackPathNode_NodeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A finding that is associated with this node in the attack path. */
export interface AttackPath_AttackPathNode_PathNodeAssociatedFinding {
  /**
   * Canonical name of the associated findings. Example:
   * `organizations/123/sources/456/findings/789`
   */
  canonicalFinding: string;
  /** The additional taxonomy group within findings from a given source. */
  findingCategory: string;
  /** Full resource name of the finding. */
  name: string;
}

/** Detailed steps the attack can take between path nodes. */
export interface AttackPath_AttackPathNode_AttackStepNode {
  /** Unique ID for one Node */
  uuid: string;
  /** Attack step type. Can be either AND, OR or DEFENSE */
  type: AttackPath_AttackPathNode_NodeType;
  /** User friendly name of the attack step */
  displayName: string;
  /** Attack step labels for metadata */
  labels: { [key: string]: string };
  /** Attack step description */
  description: string;
}

export interface AttackPath_AttackPathNode_AttackStepNode_LabelsEntry {
  key: string;
  value: string;
}

/**
 * Represents a connection between a source node and a destination node in
 * this attack path.
 */
export interface AttackPath_AttackPathEdge {
  /** The attack node uuid of the source node. */
  source: string;
  /** The attack node uuid of the destination node. */
  destination: string;
}

function createBaseAttackPath(): AttackPath {
  return { name: "", pathNodes: [], edges: [] };
}

export const AttackPath: MessageFns<AttackPath> = {
  encode(message: AttackPath, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.pathNodes) {
      AttackPath_AttackPathNode.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.edges) {
      AttackPath_AttackPathEdge.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttackPath {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttackPath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pathNodes.push(AttackPath_AttackPathNode.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.edges.push(AttackPath_AttackPathEdge.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttackPath {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pathNodes: globalThis.Array.isArray(object?.pathNodes)
        ? object.pathNodes.map((e: any) => AttackPath_AttackPathNode.fromJSON(e))
        : [],
      edges: globalThis.Array.isArray(object?.edges)
        ? object.edges.map((e: any) => AttackPath_AttackPathEdge.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AttackPath): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pathNodes?.length) {
      obj.pathNodes = message.pathNodes.map((e) => AttackPath_AttackPathNode.toJSON(e));
    }
    if (message.edges?.length) {
      obj.edges = message.edges.map((e) => AttackPath_AttackPathEdge.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AttackPath>): AttackPath {
    return AttackPath.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttackPath>): AttackPath {
    const message = createBaseAttackPath();
    message.name = object.name ?? "";
    message.pathNodes = object.pathNodes?.map((e) => AttackPath_AttackPathNode.fromPartial(e)) || [];
    message.edges = object.edges?.map((e) => AttackPath_AttackPathEdge.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAttackPath_AttackPathNode(): AttackPath_AttackPathNode {
  return { resource: "", resourceType: "", displayName: "", associatedFindings: [], uuid: "", attackSteps: [] };
}

export const AttackPath_AttackPathNode: MessageFns<AttackPath_AttackPathNode> = {
  encode(message: AttackPath_AttackPathNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resource !== "") {
      writer.uint32(10).string(message.resource);
    }
    if (message.resourceType !== "") {
      writer.uint32(18).string(message.resourceType);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    for (const v of message.associatedFindings) {
      AttackPath_AttackPathNode_PathNodeAssociatedFinding.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.uuid !== "") {
      writer.uint32(42).string(message.uuid);
    }
    for (const v of message.attackSteps) {
      AttackPath_AttackPathNode_AttackStepNode.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttackPath_AttackPathNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttackPath_AttackPathNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.associatedFindings.push(
            AttackPath_AttackPathNode_PathNodeAssociatedFinding.decode(reader, reader.uint32()),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.attackSteps.push(AttackPath_AttackPathNode_AttackStepNode.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttackPath_AttackPathNode {
    return {
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      associatedFindings: globalThis.Array.isArray(object?.associatedFindings)
        ? object.associatedFindings.map((e: any) => AttackPath_AttackPathNode_PathNodeAssociatedFinding.fromJSON(e))
        : [],
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      attackSteps: globalThis.Array.isArray(object?.attackSteps)
        ? object.attackSteps.map((e: any) => AttackPath_AttackPathNode_AttackStepNode.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AttackPath_AttackPathNode): unknown {
    const obj: any = {};
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.associatedFindings?.length) {
      obj.associatedFindings = message.associatedFindings.map((e) =>
        AttackPath_AttackPathNode_PathNodeAssociatedFinding.toJSON(e)
      );
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.attackSteps?.length) {
      obj.attackSteps = message.attackSteps.map((e) => AttackPath_AttackPathNode_AttackStepNode.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AttackPath_AttackPathNode>): AttackPath_AttackPathNode {
    return AttackPath_AttackPathNode.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttackPath_AttackPathNode>): AttackPath_AttackPathNode {
    const message = createBaseAttackPath_AttackPathNode();
    message.resource = object.resource ?? "";
    message.resourceType = object.resourceType ?? "";
    message.displayName = object.displayName ?? "";
    message.associatedFindings =
      object.associatedFindings?.map((e) => AttackPath_AttackPathNode_PathNodeAssociatedFinding.fromPartial(e)) || [];
    message.uuid = object.uuid ?? "";
    message.attackSteps = object.attackSteps?.map((e) => AttackPath_AttackPathNode_AttackStepNode.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAttackPath_AttackPathNode_PathNodeAssociatedFinding(): AttackPath_AttackPathNode_PathNodeAssociatedFinding {
  return { canonicalFinding: "", findingCategory: "", name: "" };
}

export const AttackPath_AttackPathNode_PathNodeAssociatedFinding: MessageFns<
  AttackPath_AttackPathNode_PathNodeAssociatedFinding
> = {
  encode(
    message: AttackPath_AttackPathNode_PathNodeAssociatedFinding,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.canonicalFinding !== "") {
      writer.uint32(10).string(message.canonicalFinding);
    }
    if (message.findingCategory !== "") {
      writer.uint32(18).string(message.findingCategory);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttackPath_AttackPathNode_PathNodeAssociatedFinding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttackPath_AttackPathNode_PathNodeAssociatedFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.canonicalFinding = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.findingCategory = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttackPath_AttackPathNode_PathNodeAssociatedFinding {
    return {
      canonicalFinding: isSet(object.canonicalFinding) ? globalThis.String(object.canonicalFinding) : "",
      findingCategory: isSet(object.findingCategory) ? globalThis.String(object.findingCategory) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: AttackPath_AttackPathNode_PathNodeAssociatedFinding): unknown {
    const obj: any = {};
    if (message.canonicalFinding !== "") {
      obj.canonicalFinding = message.canonicalFinding;
    }
    if (message.findingCategory !== "") {
      obj.findingCategory = message.findingCategory;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AttackPath_AttackPathNode_PathNodeAssociatedFinding>,
  ): AttackPath_AttackPathNode_PathNodeAssociatedFinding {
    return AttackPath_AttackPathNode_PathNodeAssociatedFinding.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AttackPath_AttackPathNode_PathNodeAssociatedFinding>,
  ): AttackPath_AttackPathNode_PathNodeAssociatedFinding {
    const message = createBaseAttackPath_AttackPathNode_PathNodeAssociatedFinding();
    message.canonicalFinding = object.canonicalFinding ?? "";
    message.findingCategory = object.findingCategory ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAttackPath_AttackPathNode_AttackStepNode(): AttackPath_AttackPathNode_AttackStepNode {
  return { uuid: "", type: 0, displayName: "", labels: {}, description: "" };
}

export const AttackPath_AttackPathNode_AttackStepNode: MessageFns<AttackPath_AttackPathNode_AttackStepNode> = {
  encode(message: AttackPath_AttackPathNode_AttackStepNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      AttackPath_AttackPathNode_AttackStepNode_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork())
        .join();
    });
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttackPath_AttackPathNode_AttackStepNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttackPath_AttackPathNode_AttackStepNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = AttackPath_AttackPathNode_AttackStepNode_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttackPath_AttackPathNode_AttackStepNode {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      type: isSet(object.type) ? attackPath_AttackPathNode_NodeTypeFromJSON(object.type) : 0,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: AttackPath_AttackPathNode_AttackStepNode): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.type !== 0) {
      obj.type = attackPath_AttackPathNode_NodeTypeToJSON(message.type);
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<AttackPath_AttackPathNode_AttackStepNode>): AttackPath_AttackPathNode_AttackStepNode {
    return AttackPath_AttackPathNode_AttackStepNode.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttackPath_AttackPathNode_AttackStepNode>): AttackPath_AttackPathNode_AttackStepNode {
    const message = createBaseAttackPath_AttackPathNode_AttackStepNode();
    message.uuid = object.uuid ?? "";
    message.type = object.type ?? 0;
    message.displayName = object.displayName ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseAttackPath_AttackPathNode_AttackStepNode_LabelsEntry(): AttackPath_AttackPathNode_AttackStepNode_LabelsEntry {
  return { key: "", value: "" };
}

export const AttackPath_AttackPathNode_AttackStepNode_LabelsEntry: MessageFns<
  AttackPath_AttackPathNode_AttackStepNode_LabelsEntry
> = {
  encode(
    message: AttackPath_AttackPathNode_AttackStepNode_LabelsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttackPath_AttackPathNode_AttackStepNode_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttackPath_AttackPathNode_AttackStepNode_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttackPath_AttackPathNode_AttackStepNode_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AttackPath_AttackPathNode_AttackStepNode_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AttackPath_AttackPathNode_AttackStepNode_LabelsEntry>,
  ): AttackPath_AttackPathNode_AttackStepNode_LabelsEntry {
    return AttackPath_AttackPathNode_AttackStepNode_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AttackPath_AttackPathNode_AttackStepNode_LabelsEntry>,
  ): AttackPath_AttackPathNode_AttackStepNode_LabelsEntry {
    const message = createBaseAttackPath_AttackPathNode_AttackStepNode_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAttackPath_AttackPathEdge(): AttackPath_AttackPathEdge {
  return { source: "", destination: "" };
}

export const AttackPath_AttackPathEdge: MessageFns<AttackPath_AttackPathEdge> = {
  encode(message: AttackPath_AttackPathEdge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== "") {
      writer.uint32(10).string(message.source);
    }
    if (message.destination !== "") {
      writer.uint32(18).string(message.destination);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttackPath_AttackPathEdge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttackPath_AttackPathEdge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.source = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destination = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttackPath_AttackPathEdge {
    return {
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
    };
  },

  toJSON(message: AttackPath_AttackPathEdge): unknown {
    const obj: any = {};
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.destination !== "") {
      obj.destination = message.destination;
    }
    return obj;
  },

  create(base?: DeepPartial<AttackPath_AttackPathEdge>): AttackPath_AttackPathEdge {
    return AttackPath_AttackPathEdge.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttackPath_AttackPathEdge>): AttackPath_AttackPathEdge {
    const message = createBaseAttackPath_AttackPathEdge();
    message.source = object.source ?? "";
    message.destination = object.destination ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
