// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1/compliance.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v1";

/**
 * Contains compliance information about a security standard indicating unmet
 * recommendations.
 */
export interface Compliance {
  /**
   * Industry-wide compliance standards or benchmarks, such as CIS, PCI, and
   * OWASP.
   */
  standard: string;
  /** Version of the standard or benchmark, for example, 1.1 */
  version: string;
  /** Policies within the standard or benchmark, for example, A.12.4.1 */
  ids: string[];
}

function createBaseCompliance(): Compliance {
  return { standard: "", version: "", ids: [] };
}

export const Compliance: MessageFns<Compliance> = {
  encode(message: Compliance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.standard !== "") {
      writer.uint32(10).string(message.standard);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    for (const v of message.ids) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Compliance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompliance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.standard = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ids.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Compliance {
    return {
      standard: isSet(object.standard) ? globalThis.String(object.standard) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Compliance): unknown {
    const obj: any = {};
    if (message.standard !== "") {
      obj.standard = message.standard;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.ids?.length) {
      obj.ids = message.ids;
    }
    return obj;
  },

  create(base?: DeepPartial<Compliance>): Compliance {
    return Compliance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Compliance>): Compliance {
    const message = createBaseCompliance();
    message.standard = object.standard ?? "";
    message.version = object.version ?? "";
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
