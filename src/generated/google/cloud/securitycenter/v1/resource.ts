// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1/resource.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Folder } from "./folder.js";

export const protobufPackage = "google.cloud.securitycenter.v1";

/**
 * Enumeration representing the various cloud providers a finding's resource
 * could reside in.
 */
export enum CloudProvider {
  /** CLOUD_PROVIDER_UNSPECIFIED - The cloud provider is unspecified. */
  CLOUD_PROVIDER_UNSPECIFIED = 0,
  /** GOOGLE_CLOUD_PLATFORM - The cloud provider is Google Cloud Platform. */
  GOOGLE_CLOUD_PLATFORM = 1,
  /** AMAZON_WEB_SERVICES - The cloud provider is Amazon Web Services. */
  AMAZON_WEB_SERVICES = 2,
  /** MICROSOFT_AZURE - The cloud provider is Microsoft Azure. */
  MICROSOFT_AZURE = 3,
  UNRECOGNIZED = -1,
}

export function cloudProviderFromJSON(object: any): CloudProvider {
  switch (object) {
    case 0:
    case "CLOUD_PROVIDER_UNSPECIFIED":
      return CloudProvider.CLOUD_PROVIDER_UNSPECIFIED;
    case 1:
    case "GOOGLE_CLOUD_PLATFORM":
      return CloudProvider.GOOGLE_CLOUD_PLATFORM;
    case 2:
    case "AMAZON_WEB_SERVICES":
      return CloudProvider.AMAZON_WEB_SERVICES;
    case 3:
    case "MICROSOFT_AZURE":
      return CloudProvider.MICROSOFT_AZURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CloudProvider.UNRECOGNIZED;
  }
}

export function cloudProviderToJSON(object: CloudProvider): string {
  switch (object) {
    case CloudProvider.CLOUD_PROVIDER_UNSPECIFIED:
      return "CLOUD_PROVIDER_UNSPECIFIED";
    case CloudProvider.GOOGLE_CLOUD_PLATFORM:
      return "GOOGLE_CLOUD_PLATFORM";
    case CloudProvider.AMAZON_WEB_SERVICES:
      return "AMAZON_WEB_SERVICES";
    case CloudProvider.MICROSOFT_AZURE:
      return "MICROSOFT_AZURE";
    case CloudProvider.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Information related to the Google Cloud resource. */
export interface Resource {
  /**
   * The full resource name of the resource. See:
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   */
  name: string;
  /** The human readable name of the resource. */
  displayName: string;
  /** The full resource type of the resource. */
  type: string;
  /** The full resource name of project that the resource belongs to. */
  project: string;
  /** The project ID that the resource belongs to. */
  projectDisplayName: string;
  /** The full resource name of resource's parent. */
  parent: string;
  /** The human readable name of resource's parent. */
  parentDisplayName: string;
  /**
   * Output only. Contains a Folder message for each folder in the assets
   * ancestry. The first folder is the deepest nested folder, and the last
   * folder is the folder directly under the Organization.
   */
  folders: Folder[];
  /** Indicates which cloud provider the resource resides in. */
  cloudProvider: CloudProvider;
  /**
   * Indicates which organization or tenant in the cloud provider the finding
   * applies to.
   */
  organization: string;
  /**
   * The parent service or product from which the resource is provided, for
   * example, GKE or SNS.
   */
  service: string;
  /** The region or location of the service (if applicable). */
  location: string;
  /** The AWS metadata associated with the finding. */
  awsMetadata?:
    | AwsMetadata
    | undefined;
  /** The Azure metadata associated with the finding. */
  azureMetadata?:
    | AzureMetadata
    | undefined;
  /** Provides the path to the resource within the resource hierarchy. */
  resourcePath:
    | ResourcePath
    | undefined;
  /**
   * A string representation of the resource path.
   * For Google Cloud, it has the format of
   * `organizations/{organization_id}/folders/{folder_id}/folders/{folder_id}/projects/{project_id}`
   * where there can be any number of folders.
   * For AWS, it has the format of
   * `org/{organization_id}/ou/{organizational_unit_id}/ou/{organizational_unit_id}/account/{account_id}`
   * where there can be any number of organizational units.
   * For Azure, it has the format of
   * `mg/{management_group_id}/mg/{management_group_id}/subscription/{subscription_id}/rg/{resource_group_name}`
   * where there can be any number of management groups.
   */
  resourcePathString: string;
}

/**
 * AWS metadata associated with the resource, only applicable if the finding's
 * cloud provider is Amazon Web Services.
 */
export interface AwsMetadata {
  /** The AWS organization associated with the resource. */
  organization:
    | AwsMetadata_AwsOrganization
    | undefined;
  /**
   * A list of AWS organizational units associated with the resource, ordered
   * from lowest level (closest to the account) to highest level.
   */
  organizationalUnits: AwsMetadata_AwsOrganizationalUnit[];
  /** The AWS account associated with the resource. */
  account: AwsMetadata_AwsAccount | undefined;
}

/**
 * An organization is a collection of accounts that are centrally managed
 * together using consolidated billing, organized hierarchically with
 * organizational units (OUs), and controlled with policies.
 */
export interface AwsMetadata_AwsOrganization {
  /**
   * The unique identifier (ID) for the organization. The regex pattern for an
   * organization ID string requires "o-" followed by from 10 to 32 lowercase
   * letters or digits.
   */
  id: string;
}

/**
 * An Organizational Unit (OU) is a container of AWS accounts within a root of
 * an organization. Policies that are attached to an OU apply to all accounts
 * contained in that OU and in any child OUs.
 */
export interface AwsMetadata_AwsOrganizationalUnit {
  /**
   * The unique identifier (ID) associated with this OU. The regex pattern for
   * an organizational unit ID string requires "ou-" followed by from 4 to 32
   * lowercase letters or digits (the ID of the root that contains the OU).
   * This string is followed by a second "-" dash and from 8 to 32 additional
   * lowercase letters or digits. For example, "ou-ab12-cd34ef56".
   */
  id: string;
  /** The friendly name of the OU. */
  name: string;
}

/** An AWS account that is a member of an organization. */
export interface AwsMetadata_AwsAccount {
  /** The unique identifier (ID) of the account, containing exactly 12 digits. */
  id: string;
  /** The friendly name of this account. */
  name: string;
}

/**
 * Azure metadata associated with the resource, only applicable if the finding's
 * cloud provider is Microsoft Azure.
 */
export interface AzureMetadata {
  /**
   * A list of Azure management groups associated with the resource, ordered
   * from lowest level (closest to the subscription) to highest level.
   */
  managementGroups: AzureMetadata_AzureManagementGroup[];
  /** The Azure subscription associated with the resource. */
  subscription:
    | AzureMetadata_AzureSubscription
    | undefined;
  /** The Azure resource group associated with the resource. */
  resourceGroup: AzureMetadata_AzureResourceGroup | undefined;
}

/** Represents an Azure management group. */
export interface AzureMetadata_AzureManagementGroup {
  /**
   * The UUID of the Azure management group, for example,
   * `20000000-0001-0000-0000-000000000000`.
   */
  id: string;
  /** The display name of the Azure management group. */
  displayName: string;
}

/** Represents an Azure subscription. */
export interface AzureMetadata_AzureSubscription {
  /**
   * The UUID of the Azure subscription, for example,
   * `291bba3f-e0a5-47bc-a099-3bdcb2a50a05`.
   */
  id: string;
  /** The display name of the Azure subscription. */
  displayName: string;
}

/** Represents an Azure resource group. */
export interface AzureMetadata_AzureResourceGroup {
  /** The name of the Azure resource group. This is not a UUID. */
  name: string;
}

/**
 * Represents the path of resources leading up to the resource this finding is
 * about.
 */
export interface ResourcePath {
  /**
   * The list of nodes that make the up resource path, ordered from lowest
   * level to highest level.
   */
  nodes: ResourcePath_ResourcePathNode[];
}

/** The type of resource the node represents. */
export enum ResourcePath_ResourcePathNodeType {
  /** RESOURCE_PATH_NODE_TYPE_UNSPECIFIED - Node type is unspecified. */
  RESOURCE_PATH_NODE_TYPE_UNSPECIFIED = 0,
  /** GCP_ORGANIZATION - The node represents a Google Cloud organization. */
  GCP_ORGANIZATION = 1,
  /** GCP_FOLDER - The node represents a Google Cloud folder. */
  GCP_FOLDER = 2,
  /** GCP_PROJECT - The node represents a Google Cloud project. */
  GCP_PROJECT = 3,
  /** AWS_ORGANIZATION - The node represents an AWS organization. */
  AWS_ORGANIZATION = 4,
  /** AWS_ORGANIZATIONAL_UNIT - The node represents an AWS organizational unit. */
  AWS_ORGANIZATIONAL_UNIT = 5,
  /** AWS_ACCOUNT - The node represents an AWS account. */
  AWS_ACCOUNT = 6,
  /** AZURE_MANAGEMENT_GROUP - The node represents an Azure management group. */
  AZURE_MANAGEMENT_GROUP = 7,
  /** AZURE_SUBSCRIPTION - The node represents an Azure subscription. */
  AZURE_SUBSCRIPTION = 8,
  /** AZURE_RESOURCE_GROUP - The node represents an Azure resource group. */
  AZURE_RESOURCE_GROUP = 9,
  UNRECOGNIZED = -1,
}

export function resourcePath_ResourcePathNodeTypeFromJSON(object: any): ResourcePath_ResourcePathNodeType {
  switch (object) {
    case 0:
    case "RESOURCE_PATH_NODE_TYPE_UNSPECIFIED":
      return ResourcePath_ResourcePathNodeType.RESOURCE_PATH_NODE_TYPE_UNSPECIFIED;
    case 1:
    case "GCP_ORGANIZATION":
      return ResourcePath_ResourcePathNodeType.GCP_ORGANIZATION;
    case 2:
    case "GCP_FOLDER":
      return ResourcePath_ResourcePathNodeType.GCP_FOLDER;
    case 3:
    case "GCP_PROJECT":
      return ResourcePath_ResourcePathNodeType.GCP_PROJECT;
    case 4:
    case "AWS_ORGANIZATION":
      return ResourcePath_ResourcePathNodeType.AWS_ORGANIZATION;
    case 5:
    case "AWS_ORGANIZATIONAL_UNIT":
      return ResourcePath_ResourcePathNodeType.AWS_ORGANIZATIONAL_UNIT;
    case 6:
    case "AWS_ACCOUNT":
      return ResourcePath_ResourcePathNodeType.AWS_ACCOUNT;
    case 7:
    case "AZURE_MANAGEMENT_GROUP":
      return ResourcePath_ResourcePathNodeType.AZURE_MANAGEMENT_GROUP;
    case 8:
    case "AZURE_SUBSCRIPTION":
      return ResourcePath_ResourcePathNodeType.AZURE_SUBSCRIPTION;
    case 9:
    case "AZURE_RESOURCE_GROUP":
      return ResourcePath_ResourcePathNodeType.AZURE_RESOURCE_GROUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResourcePath_ResourcePathNodeType.UNRECOGNIZED;
  }
}

export function resourcePath_ResourcePathNodeTypeToJSON(object: ResourcePath_ResourcePathNodeType): string {
  switch (object) {
    case ResourcePath_ResourcePathNodeType.RESOURCE_PATH_NODE_TYPE_UNSPECIFIED:
      return "RESOURCE_PATH_NODE_TYPE_UNSPECIFIED";
    case ResourcePath_ResourcePathNodeType.GCP_ORGANIZATION:
      return "GCP_ORGANIZATION";
    case ResourcePath_ResourcePathNodeType.GCP_FOLDER:
      return "GCP_FOLDER";
    case ResourcePath_ResourcePathNodeType.GCP_PROJECT:
      return "GCP_PROJECT";
    case ResourcePath_ResourcePathNodeType.AWS_ORGANIZATION:
      return "AWS_ORGANIZATION";
    case ResourcePath_ResourcePathNodeType.AWS_ORGANIZATIONAL_UNIT:
      return "AWS_ORGANIZATIONAL_UNIT";
    case ResourcePath_ResourcePathNodeType.AWS_ACCOUNT:
      return "AWS_ACCOUNT";
    case ResourcePath_ResourcePathNodeType.AZURE_MANAGEMENT_GROUP:
      return "AZURE_MANAGEMENT_GROUP";
    case ResourcePath_ResourcePathNodeType.AZURE_SUBSCRIPTION:
      return "AZURE_SUBSCRIPTION";
    case ResourcePath_ResourcePathNodeType.AZURE_RESOURCE_GROUP:
      return "AZURE_RESOURCE_GROUP";
    case ResourcePath_ResourcePathNodeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * A node within the resource path. Each node represents a resource within the
 * resource hierarchy.
 */
export interface ResourcePath_ResourcePathNode {
  /** The type of resource this node represents. */
  nodeType: ResourcePath_ResourcePathNodeType;
  /** The ID of the resource this node represents. */
  id: string;
  /** The display name of the resource this node represents. */
  displayName: string;
}

function createBaseResource(): Resource {
  return {
    name: "",
    displayName: "",
    type: "",
    project: "",
    projectDisplayName: "",
    parent: "",
    parentDisplayName: "",
    folders: [],
    cloudProvider: 0,
    organization: "",
    service: "",
    location: "",
    awsMetadata: undefined,
    azureMetadata: undefined,
    resourcePath: undefined,
    resourcePathString: "",
  };
}

export const Resource: MessageFns<Resource> = {
  encode(message: Resource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(66).string(message.displayName);
    }
    if (message.type !== "") {
      writer.uint32(50).string(message.type);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.projectDisplayName !== "") {
      writer.uint32(26).string(message.projectDisplayName);
    }
    if (message.parent !== "") {
      writer.uint32(34).string(message.parent);
    }
    if (message.parentDisplayName !== "") {
      writer.uint32(42).string(message.parentDisplayName);
    }
    for (const v of message.folders) {
      Folder.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.cloudProvider !== 0) {
      writer.uint32(72).int32(message.cloudProvider);
    }
    if (message.organization !== "") {
      writer.uint32(82).string(message.organization);
    }
    if (message.service !== "") {
      writer.uint32(90).string(message.service);
    }
    if (message.location !== "") {
      writer.uint32(98).string(message.location);
    }
    if (message.awsMetadata !== undefined) {
      AwsMetadata.encode(message.awsMetadata, writer.uint32(130).fork()).join();
    }
    if (message.azureMetadata !== undefined) {
      AzureMetadata.encode(message.azureMetadata, writer.uint32(138).fork()).join();
    }
    if (message.resourcePath !== undefined) {
      ResourcePath.encode(message.resourcePath, writer.uint32(146).fork()).join();
    }
    if (message.resourcePathString !== "") {
      writer.uint32(154).string(message.resourcePathString);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Resource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectDisplayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.parentDisplayName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.folders.push(Folder.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.cloudProvider = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.organization = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.service = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.location = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.awsMetadata = AwsMetadata.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.azureMetadata = AzureMetadata.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.resourcePath = ResourcePath.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.resourcePathString = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Resource {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      projectDisplayName: isSet(object.projectDisplayName) ? globalThis.String(object.projectDisplayName) : "",
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      parentDisplayName: isSet(object.parentDisplayName) ? globalThis.String(object.parentDisplayName) : "",
      folders: globalThis.Array.isArray(object?.folders) ? object.folders.map((e: any) => Folder.fromJSON(e)) : [],
      cloudProvider: isSet(object.cloudProvider) ? cloudProviderFromJSON(object.cloudProvider) : 0,
      organization: isSet(object.organization) ? globalThis.String(object.organization) : "",
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      awsMetadata: isSet(object.awsMetadata) ? AwsMetadata.fromJSON(object.awsMetadata) : undefined,
      azureMetadata: isSet(object.azureMetadata) ? AzureMetadata.fromJSON(object.azureMetadata) : undefined,
      resourcePath: isSet(object.resourcePath) ? ResourcePath.fromJSON(object.resourcePath) : undefined,
      resourcePathString: isSet(object.resourcePathString) ? globalThis.String(object.resourcePathString) : "",
    };
  },

  toJSON(message: Resource): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.projectDisplayName !== "") {
      obj.projectDisplayName = message.projectDisplayName;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.parentDisplayName !== "") {
      obj.parentDisplayName = message.parentDisplayName;
    }
    if (message.folders?.length) {
      obj.folders = message.folders.map((e) => Folder.toJSON(e));
    }
    if (message.cloudProvider !== 0) {
      obj.cloudProvider = cloudProviderToJSON(message.cloudProvider);
    }
    if (message.organization !== "") {
      obj.organization = message.organization;
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.awsMetadata !== undefined) {
      obj.awsMetadata = AwsMetadata.toJSON(message.awsMetadata);
    }
    if (message.azureMetadata !== undefined) {
      obj.azureMetadata = AzureMetadata.toJSON(message.azureMetadata);
    }
    if (message.resourcePath !== undefined) {
      obj.resourcePath = ResourcePath.toJSON(message.resourcePath);
    }
    if (message.resourcePathString !== "") {
      obj.resourcePathString = message.resourcePathString;
    }
    return obj;
  },

  create(base?: DeepPartial<Resource>): Resource {
    return Resource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Resource>): Resource {
    const message = createBaseResource();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.type = object.type ?? "";
    message.project = object.project ?? "";
    message.projectDisplayName = object.projectDisplayName ?? "";
    message.parent = object.parent ?? "";
    message.parentDisplayName = object.parentDisplayName ?? "";
    message.folders = object.folders?.map((e) => Folder.fromPartial(e)) || [];
    message.cloudProvider = object.cloudProvider ?? 0;
    message.organization = object.organization ?? "";
    message.service = object.service ?? "";
    message.location = object.location ?? "";
    message.awsMetadata = (object.awsMetadata !== undefined && object.awsMetadata !== null)
      ? AwsMetadata.fromPartial(object.awsMetadata)
      : undefined;
    message.azureMetadata = (object.azureMetadata !== undefined && object.azureMetadata !== null)
      ? AzureMetadata.fromPartial(object.azureMetadata)
      : undefined;
    message.resourcePath = (object.resourcePath !== undefined && object.resourcePath !== null)
      ? ResourcePath.fromPartial(object.resourcePath)
      : undefined;
    message.resourcePathString = object.resourcePathString ?? "";
    return message;
  },
};

function createBaseAwsMetadata(): AwsMetadata {
  return { organization: undefined, organizationalUnits: [], account: undefined };
}

export const AwsMetadata: MessageFns<AwsMetadata> = {
  encode(message: AwsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.organization !== undefined) {
      AwsMetadata_AwsOrganization.encode(message.organization, writer.uint32(18).fork()).join();
    }
    for (const v of message.organizationalUnits) {
      AwsMetadata_AwsOrganizationalUnit.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.account !== undefined) {
      AwsMetadata_AwsAccount.encode(message.account, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AwsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAwsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.organization = AwsMetadata_AwsOrganization.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.organizationalUnits.push(AwsMetadata_AwsOrganizationalUnit.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.account = AwsMetadata_AwsAccount.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AwsMetadata {
    return {
      organization: isSet(object.organization) ? AwsMetadata_AwsOrganization.fromJSON(object.organization) : undefined,
      organizationalUnits: globalThis.Array.isArray(object?.organizationalUnits)
        ? object.organizationalUnits.map((e: any) => AwsMetadata_AwsOrganizationalUnit.fromJSON(e))
        : [],
      account: isSet(object.account) ? AwsMetadata_AwsAccount.fromJSON(object.account) : undefined,
    };
  },

  toJSON(message: AwsMetadata): unknown {
    const obj: any = {};
    if (message.organization !== undefined) {
      obj.organization = AwsMetadata_AwsOrganization.toJSON(message.organization);
    }
    if (message.organizationalUnits?.length) {
      obj.organizationalUnits = message.organizationalUnits.map((e) => AwsMetadata_AwsOrganizationalUnit.toJSON(e));
    }
    if (message.account !== undefined) {
      obj.account = AwsMetadata_AwsAccount.toJSON(message.account);
    }
    return obj;
  },

  create(base?: DeepPartial<AwsMetadata>): AwsMetadata {
    return AwsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AwsMetadata>): AwsMetadata {
    const message = createBaseAwsMetadata();
    message.organization = (object.organization !== undefined && object.organization !== null)
      ? AwsMetadata_AwsOrganization.fromPartial(object.organization)
      : undefined;
    message.organizationalUnits =
      object.organizationalUnits?.map((e) => AwsMetadata_AwsOrganizationalUnit.fromPartial(e)) || [];
    message.account = (object.account !== undefined && object.account !== null)
      ? AwsMetadata_AwsAccount.fromPartial(object.account)
      : undefined;
    return message;
  },
};

function createBaseAwsMetadata_AwsOrganization(): AwsMetadata_AwsOrganization {
  return { id: "" };
}

export const AwsMetadata_AwsOrganization: MessageFns<AwsMetadata_AwsOrganization> = {
  encode(message: AwsMetadata_AwsOrganization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AwsMetadata_AwsOrganization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAwsMetadata_AwsOrganization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AwsMetadata_AwsOrganization {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: AwsMetadata_AwsOrganization): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AwsMetadata_AwsOrganization>): AwsMetadata_AwsOrganization {
    return AwsMetadata_AwsOrganization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AwsMetadata_AwsOrganization>): AwsMetadata_AwsOrganization {
    const message = createBaseAwsMetadata_AwsOrganization();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseAwsMetadata_AwsOrganizationalUnit(): AwsMetadata_AwsOrganizationalUnit {
  return { id: "", name: "" };
}

export const AwsMetadata_AwsOrganizationalUnit: MessageFns<AwsMetadata_AwsOrganizationalUnit> = {
  encode(message: AwsMetadata_AwsOrganizationalUnit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AwsMetadata_AwsOrganizationalUnit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAwsMetadata_AwsOrganizationalUnit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AwsMetadata_AwsOrganizationalUnit {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: AwsMetadata_AwsOrganizationalUnit): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<AwsMetadata_AwsOrganizationalUnit>): AwsMetadata_AwsOrganizationalUnit {
    return AwsMetadata_AwsOrganizationalUnit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AwsMetadata_AwsOrganizationalUnit>): AwsMetadata_AwsOrganizationalUnit {
    const message = createBaseAwsMetadata_AwsOrganizationalUnit();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAwsMetadata_AwsAccount(): AwsMetadata_AwsAccount {
  return { id: "", name: "" };
}

export const AwsMetadata_AwsAccount: MessageFns<AwsMetadata_AwsAccount> = {
  encode(message: AwsMetadata_AwsAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AwsMetadata_AwsAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAwsMetadata_AwsAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AwsMetadata_AwsAccount {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: AwsMetadata_AwsAccount): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<AwsMetadata_AwsAccount>): AwsMetadata_AwsAccount {
    return AwsMetadata_AwsAccount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AwsMetadata_AwsAccount>): AwsMetadata_AwsAccount {
    const message = createBaseAwsMetadata_AwsAccount();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAzureMetadata(): AzureMetadata {
  return { managementGroups: [], subscription: undefined, resourceGroup: undefined };
}

export const AzureMetadata: MessageFns<AzureMetadata> = {
  encode(message: AzureMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.managementGroups) {
      AzureMetadata_AzureManagementGroup.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.subscription !== undefined) {
      AzureMetadata_AzureSubscription.encode(message.subscription, writer.uint32(42).fork()).join();
    }
    if (message.resourceGroup !== undefined) {
      AzureMetadata_AzureResourceGroup.encode(message.resourceGroup, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AzureMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAzureMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4:
          if (tag !== 34) {
            break;
          }

          message.managementGroups.push(AzureMetadata_AzureManagementGroup.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.subscription = AzureMetadata_AzureSubscription.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.resourceGroup = AzureMetadata_AzureResourceGroup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AzureMetadata {
    return {
      managementGroups: globalThis.Array.isArray(object?.managementGroups)
        ? object.managementGroups.map((e: any) => AzureMetadata_AzureManagementGroup.fromJSON(e))
        : [],
      subscription: isSet(object.subscription)
        ? AzureMetadata_AzureSubscription.fromJSON(object.subscription)
        : undefined,
      resourceGroup: isSet(object.resourceGroup)
        ? AzureMetadata_AzureResourceGroup.fromJSON(object.resourceGroup)
        : undefined,
    };
  },

  toJSON(message: AzureMetadata): unknown {
    const obj: any = {};
    if (message.managementGroups?.length) {
      obj.managementGroups = message.managementGroups.map((e) => AzureMetadata_AzureManagementGroup.toJSON(e));
    }
    if (message.subscription !== undefined) {
      obj.subscription = AzureMetadata_AzureSubscription.toJSON(message.subscription);
    }
    if (message.resourceGroup !== undefined) {
      obj.resourceGroup = AzureMetadata_AzureResourceGroup.toJSON(message.resourceGroup);
    }
    return obj;
  },

  create(base?: DeepPartial<AzureMetadata>): AzureMetadata {
    return AzureMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AzureMetadata>): AzureMetadata {
    const message = createBaseAzureMetadata();
    message.managementGroups = object.managementGroups?.map((e) => AzureMetadata_AzureManagementGroup.fromPartial(e)) ||
      [];
    message.subscription = (object.subscription !== undefined && object.subscription !== null)
      ? AzureMetadata_AzureSubscription.fromPartial(object.subscription)
      : undefined;
    message.resourceGroup = (object.resourceGroup !== undefined && object.resourceGroup !== null)
      ? AzureMetadata_AzureResourceGroup.fromPartial(object.resourceGroup)
      : undefined;
    return message;
  },
};

function createBaseAzureMetadata_AzureManagementGroup(): AzureMetadata_AzureManagementGroup {
  return { id: "", displayName: "" };
}

export const AzureMetadata_AzureManagementGroup: MessageFns<AzureMetadata_AzureManagementGroup> = {
  encode(message: AzureMetadata_AzureManagementGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AzureMetadata_AzureManagementGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAzureMetadata_AzureManagementGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AzureMetadata_AzureManagementGroup {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: AzureMetadata_AzureManagementGroup): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<AzureMetadata_AzureManagementGroup>): AzureMetadata_AzureManagementGroup {
    return AzureMetadata_AzureManagementGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AzureMetadata_AzureManagementGroup>): AzureMetadata_AzureManagementGroup {
    const message = createBaseAzureMetadata_AzureManagementGroup();
    message.id = object.id ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseAzureMetadata_AzureSubscription(): AzureMetadata_AzureSubscription {
  return { id: "", displayName: "" };
}

export const AzureMetadata_AzureSubscription: MessageFns<AzureMetadata_AzureSubscription> = {
  encode(message: AzureMetadata_AzureSubscription, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AzureMetadata_AzureSubscription {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAzureMetadata_AzureSubscription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AzureMetadata_AzureSubscription {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: AzureMetadata_AzureSubscription): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<AzureMetadata_AzureSubscription>): AzureMetadata_AzureSubscription {
    return AzureMetadata_AzureSubscription.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AzureMetadata_AzureSubscription>): AzureMetadata_AzureSubscription {
    const message = createBaseAzureMetadata_AzureSubscription();
    message.id = object.id ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseAzureMetadata_AzureResourceGroup(): AzureMetadata_AzureResourceGroup {
  return { name: "" };
}

export const AzureMetadata_AzureResourceGroup: MessageFns<AzureMetadata_AzureResourceGroup> = {
  encode(message: AzureMetadata_AzureResourceGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AzureMetadata_AzureResourceGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAzureMetadata_AzureResourceGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AzureMetadata_AzureResourceGroup {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: AzureMetadata_AzureResourceGroup): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<AzureMetadata_AzureResourceGroup>): AzureMetadata_AzureResourceGroup {
    return AzureMetadata_AzureResourceGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AzureMetadata_AzureResourceGroup>): AzureMetadata_AzureResourceGroup {
    const message = createBaseAzureMetadata_AzureResourceGroup();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResourcePath(): ResourcePath {
  return { nodes: [] };
}

export const ResourcePath: MessageFns<ResourcePath> = {
  encode(message: ResourcePath, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nodes) {
      ResourcePath_ResourcePathNode.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourcePath {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourcePath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nodes.push(ResourcePath_ResourcePathNode.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourcePath {
    return {
      nodes: globalThis.Array.isArray(object?.nodes)
        ? object.nodes.map((e: any) => ResourcePath_ResourcePathNode.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ResourcePath): unknown {
    const obj: any = {};
    if (message.nodes?.length) {
      obj.nodes = message.nodes.map((e) => ResourcePath_ResourcePathNode.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ResourcePath>): ResourcePath {
    return ResourcePath.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourcePath>): ResourcePath {
    const message = createBaseResourcePath();
    message.nodes = object.nodes?.map((e) => ResourcePath_ResourcePathNode.fromPartial(e)) || [];
    return message;
  },
};

function createBaseResourcePath_ResourcePathNode(): ResourcePath_ResourcePathNode {
  return { nodeType: 0, id: "", displayName: "" };
}

export const ResourcePath_ResourcePathNode: MessageFns<ResourcePath_ResourcePathNode> = {
  encode(message: ResourcePath_ResourcePathNode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeType !== 0) {
      writer.uint32(8).int32(message.nodeType);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourcePath_ResourcePathNode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourcePath_ResourcePathNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.nodeType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourcePath_ResourcePathNode {
    return {
      nodeType: isSet(object.nodeType) ? resourcePath_ResourcePathNodeTypeFromJSON(object.nodeType) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: ResourcePath_ResourcePathNode): unknown {
    const obj: any = {};
    if (message.nodeType !== 0) {
      obj.nodeType = resourcePath_ResourcePathNodeTypeToJSON(message.nodeType);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<ResourcePath_ResourcePathNode>): ResourcePath_ResourcePathNode {
    return ResourcePath_ResourcePathNode.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourcePath_ResourcePathNode>): ResourcePath_ResourcePathNode {
    const message = createBaseResourcePath_ResourcePathNode();
    message.nodeType = object.nodeType ?? 0;
    message.id = object.id ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
