// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1/organization_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v1";

/**
 * User specified settings that are attached to the Security Command
 * Center organization.
 */
export interface OrganizationSettings {
  /**
   * The relative resource name of the settings. See:
   * https://cloud.google.com/apis/design/resource_names#relative_resource_name
   * Example:
   * "organizations/{organization_id}/organizationSettings".
   */
  name: string;
  /**
   * A flag that indicates if Asset Discovery should be enabled. If the flag is
   * set to `true`, then discovery of assets will occur. If it is set to
   * `false`, all historical assets will remain, but discovery of future assets
   * will not occur.
   */
  enableAssetDiscovery: boolean;
  /** The configuration used for Asset Discovery runs. */
  assetDiscoveryConfig: OrganizationSettings_AssetDiscoveryConfig | undefined;
}

/** The configuration used for Asset Discovery runs. */
export interface OrganizationSettings_AssetDiscoveryConfig {
  /** The project ids to use for filtering asset discovery. */
  projectIds: string[];
  /** The mode to use for filtering asset discovery. */
  inclusionMode: OrganizationSettings_AssetDiscoveryConfig_InclusionMode;
  /**
   * The folder ids to use for filtering asset discovery.
   * It consists of only digits, e.g., 756619654966.
   */
  folderIds: string[];
}

/**
 * The mode of inclusion when running Asset Discovery.
 * Asset discovery can be limited by explicitly identifying projects to be
 * included or excluded. If INCLUDE_ONLY is set, then only those projects
 * within the organization and their children are discovered during asset
 * discovery. If EXCLUDE is set, then projects that don't match those
 * projects are discovered during asset discovery. If neither are set, then
 * all projects within the organization are discovered during asset
 * discovery.
 */
export enum OrganizationSettings_AssetDiscoveryConfig_InclusionMode {
  /**
   * INCLUSION_MODE_UNSPECIFIED - Unspecified. Setting the mode with this value will disable
   * inclusion/exclusion filtering for Asset Discovery.
   */
  INCLUSION_MODE_UNSPECIFIED = 0,
  /**
   * INCLUDE_ONLY - Asset Discovery will capture only the resources within the projects
   * specified. All other resources will be ignored.
   */
  INCLUDE_ONLY = 1,
  /**
   * EXCLUDE - Asset Discovery will ignore all resources under the projects specified.
   * All other resources will be retrieved.
   */
  EXCLUDE = 2,
  UNRECOGNIZED = -1,
}

export function organizationSettings_AssetDiscoveryConfig_InclusionModeFromJSON(
  object: any,
): OrganizationSettings_AssetDiscoveryConfig_InclusionMode {
  switch (object) {
    case 0:
    case "INCLUSION_MODE_UNSPECIFIED":
      return OrganizationSettings_AssetDiscoveryConfig_InclusionMode.INCLUSION_MODE_UNSPECIFIED;
    case 1:
    case "INCLUDE_ONLY":
      return OrganizationSettings_AssetDiscoveryConfig_InclusionMode.INCLUDE_ONLY;
    case 2:
    case "EXCLUDE":
      return OrganizationSettings_AssetDiscoveryConfig_InclusionMode.EXCLUDE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OrganizationSettings_AssetDiscoveryConfig_InclusionMode.UNRECOGNIZED;
  }
}

export function organizationSettings_AssetDiscoveryConfig_InclusionModeToJSON(
  object: OrganizationSettings_AssetDiscoveryConfig_InclusionMode,
): string {
  switch (object) {
    case OrganizationSettings_AssetDiscoveryConfig_InclusionMode.INCLUSION_MODE_UNSPECIFIED:
      return "INCLUSION_MODE_UNSPECIFIED";
    case OrganizationSettings_AssetDiscoveryConfig_InclusionMode.INCLUDE_ONLY:
      return "INCLUDE_ONLY";
    case OrganizationSettings_AssetDiscoveryConfig_InclusionMode.EXCLUDE:
      return "EXCLUDE";
    case OrganizationSettings_AssetDiscoveryConfig_InclusionMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseOrganizationSettings(): OrganizationSettings {
  return { name: "", enableAssetDiscovery: false, assetDiscoveryConfig: undefined };
}

export const OrganizationSettings: MessageFns<OrganizationSettings> = {
  encode(message: OrganizationSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.enableAssetDiscovery !== false) {
      writer.uint32(16).bool(message.enableAssetDiscovery);
    }
    if (message.assetDiscoveryConfig !== undefined) {
      OrganizationSettings_AssetDiscoveryConfig.encode(message.assetDiscoveryConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.enableAssetDiscovery = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.assetDiscoveryConfig = OrganizationSettings_AssetDiscoveryConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationSettings {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      enableAssetDiscovery: isSet(object.enableAssetDiscovery)
        ? globalThis.Boolean(object.enableAssetDiscovery)
        : false,
      assetDiscoveryConfig: isSet(object.assetDiscoveryConfig)
        ? OrganizationSettings_AssetDiscoveryConfig.fromJSON(object.assetDiscoveryConfig)
        : undefined,
    };
  },

  toJSON(message: OrganizationSettings): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.enableAssetDiscovery !== false) {
      obj.enableAssetDiscovery = message.enableAssetDiscovery;
    }
    if (message.assetDiscoveryConfig !== undefined) {
      obj.assetDiscoveryConfig = OrganizationSettings_AssetDiscoveryConfig.toJSON(message.assetDiscoveryConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<OrganizationSettings>): OrganizationSettings {
    return OrganizationSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OrganizationSettings>): OrganizationSettings {
    const message = createBaseOrganizationSettings();
    message.name = object.name ?? "";
    message.enableAssetDiscovery = object.enableAssetDiscovery ?? false;
    message.assetDiscoveryConfig = (object.assetDiscoveryConfig !== undefined && object.assetDiscoveryConfig !== null)
      ? OrganizationSettings_AssetDiscoveryConfig.fromPartial(object.assetDiscoveryConfig)
      : undefined;
    return message;
  },
};

function createBaseOrganizationSettings_AssetDiscoveryConfig(): OrganizationSettings_AssetDiscoveryConfig {
  return { projectIds: [], inclusionMode: 0, folderIds: [] };
}

export const OrganizationSettings_AssetDiscoveryConfig: MessageFns<OrganizationSettings_AssetDiscoveryConfig> = {
  encode(message: OrganizationSettings_AssetDiscoveryConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.projectIds) {
      writer.uint32(10).string(v!);
    }
    if (message.inclusionMode !== 0) {
      writer.uint32(16).int32(message.inclusionMode);
    }
    for (const v of message.folderIds) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrganizationSettings_AssetDiscoveryConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrganizationSettings_AssetDiscoveryConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectIds.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.inclusionMode = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.folderIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrganizationSettings_AssetDiscoveryConfig {
    return {
      projectIds: globalThis.Array.isArray(object?.projectIds)
        ? object.projectIds.map((e: any) => globalThis.String(e))
        : [],
      inclusionMode: isSet(object.inclusionMode)
        ? organizationSettings_AssetDiscoveryConfig_InclusionModeFromJSON(object.inclusionMode)
        : 0,
      folderIds: globalThis.Array.isArray(object?.folderIds)
        ? object.folderIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: OrganizationSettings_AssetDiscoveryConfig): unknown {
    const obj: any = {};
    if (message.projectIds?.length) {
      obj.projectIds = message.projectIds;
    }
    if (message.inclusionMode !== 0) {
      obj.inclusionMode = organizationSettings_AssetDiscoveryConfig_InclusionModeToJSON(message.inclusionMode);
    }
    if (message.folderIds?.length) {
      obj.folderIds = message.folderIds;
    }
    return obj;
  },

  create(base?: DeepPartial<OrganizationSettings_AssetDiscoveryConfig>): OrganizationSettings_AssetDiscoveryConfig {
    return OrganizationSettings_AssetDiscoveryConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<OrganizationSettings_AssetDiscoveryConfig>,
  ): OrganizationSettings_AssetDiscoveryConfig {
    const message = createBaseOrganizationSettings_AssetDiscoveryConfig();
    message.projectIds = object.projectIds?.map((e) => e) || [];
    message.inclusionMode = object.inclusionMode ?? 0;
    message.folderIds = object.folderIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
