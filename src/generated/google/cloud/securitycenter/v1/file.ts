// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1/file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v1";

/**
 * File information about the related binary/library used by an executable, or
 * the script used by a script interpreter
 */
export interface File {
  /** Absolute path of the file as a JSON encoded string. */
  path: string;
  /** Size of the file in bytes. */
  size: Long;
  /**
   * SHA256 hash of the first hashed_size bytes of the file encoded as a
   * hex string.  If hashed_size == size, sha256 represents the SHA256 hash
   * of the entire file.
   */
  sha256: string;
  /**
   * The length in bytes of the file prefix that was hashed.  If
   * hashed_size == size, any hashes reported represent the entire
   * file.
   */
  hashedSize: Long;
  /** True when the hash covers only a prefix of the file. */
  partiallyHashed: boolean;
  /** Prefix of the file contents as a JSON-encoded string. */
  contents: string;
  /** Path of the file in terms of underlying disk/partition identifiers. */
  diskPath: File_DiskPath | undefined;
}

/** Path of the file in terms of underlying disk/partition identifiers. */
export interface File_DiskPath {
  /**
   * UUID of the partition (format
   * https://wiki.archlinux.org/title/persistent_block_device_naming#by-uuid)
   */
  partitionUuid: string;
  /**
   * Relative path of the file in the partition as a JSON encoded string.
   * Example: /home/user1/executable_file.sh
   */
  relativePath: string;
}

function createBaseFile(): File {
  return {
    path: "",
    size: Long.ZERO,
    sha256: "",
    hashedSize: Long.ZERO,
    partiallyHashed: false,
    contents: "",
    diskPath: undefined,
  };
}

export const File: MessageFns<File> = {
  encode(message: File, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (!message.size.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.size.toString());
    }
    if (message.sha256 !== "") {
      writer.uint32(26).string(message.sha256);
    }
    if (!message.hashedSize.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.hashedSize.toString());
    }
    if (message.partiallyHashed !== false) {
      writer.uint32(40).bool(message.partiallyHashed);
    }
    if (message.contents !== "") {
      writer.uint32(50).string(message.contents);
    }
    if (message.diskPath !== undefined) {
      File_DiskPath.encode(message.diskPath, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): File {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.size = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sha256 = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hashedSize = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.partiallyHashed = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.contents = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.diskPath = File_DiskPath.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): File {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      size: isSet(object.size) ? Long.fromValue(object.size) : Long.ZERO,
      sha256: isSet(object.sha256) ? globalThis.String(object.sha256) : "",
      hashedSize: isSet(object.hashedSize) ? Long.fromValue(object.hashedSize) : Long.ZERO,
      partiallyHashed: isSet(object.partiallyHashed) ? globalThis.Boolean(object.partiallyHashed) : false,
      contents: isSet(object.contents) ? globalThis.String(object.contents) : "",
      diskPath: isSet(object.diskPath) ? File_DiskPath.fromJSON(object.diskPath) : undefined,
    };
  },

  toJSON(message: File): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (!message.size.equals(Long.ZERO)) {
      obj.size = (message.size || Long.ZERO).toString();
    }
    if (message.sha256 !== "") {
      obj.sha256 = message.sha256;
    }
    if (!message.hashedSize.equals(Long.ZERO)) {
      obj.hashedSize = (message.hashedSize || Long.ZERO).toString();
    }
    if (message.partiallyHashed !== false) {
      obj.partiallyHashed = message.partiallyHashed;
    }
    if (message.contents !== "") {
      obj.contents = message.contents;
    }
    if (message.diskPath !== undefined) {
      obj.diskPath = File_DiskPath.toJSON(message.diskPath);
    }
    return obj;
  },

  create(base?: DeepPartial<File>): File {
    return File.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<File>): File {
    const message = createBaseFile();
    message.path = object.path ?? "";
    message.size = (object.size !== undefined && object.size !== null) ? Long.fromValue(object.size) : Long.ZERO;
    message.sha256 = object.sha256 ?? "";
    message.hashedSize = (object.hashedSize !== undefined && object.hashedSize !== null)
      ? Long.fromValue(object.hashedSize)
      : Long.ZERO;
    message.partiallyHashed = object.partiallyHashed ?? false;
    message.contents = object.contents ?? "";
    message.diskPath = (object.diskPath !== undefined && object.diskPath !== null)
      ? File_DiskPath.fromPartial(object.diskPath)
      : undefined;
    return message;
  },
};

function createBaseFile_DiskPath(): File_DiskPath {
  return { partitionUuid: "", relativePath: "" };
}

export const File_DiskPath: MessageFns<File_DiskPath> = {
  encode(message: File_DiskPath, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partitionUuid !== "") {
      writer.uint32(10).string(message.partitionUuid);
    }
    if (message.relativePath !== "") {
      writer.uint32(18).string(message.relativePath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): File_DiskPath {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFile_DiskPath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.partitionUuid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.relativePath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): File_DiskPath {
    return {
      partitionUuid: isSet(object.partitionUuid) ? globalThis.String(object.partitionUuid) : "",
      relativePath: isSet(object.relativePath) ? globalThis.String(object.relativePath) : "",
    };
  },

  toJSON(message: File_DiskPath): unknown {
    const obj: any = {};
    if (message.partitionUuid !== "") {
      obj.partitionUuid = message.partitionUuid;
    }
    if (message.relativePath !== "") {
      obj.relativePath = message.relativePath;
    }
    return obj;
  },

  create(base?: DeepPartial<File_DiskPath>): File_DiskPath {
    return File_DiskPath.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<File_DiskPath>): File_DiskPath {
    const message = createBaseFile_DiskPath();
    message.partitionUuid = object.partitionUuid ?? "";
    message.relativePath = object.relativePath ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
