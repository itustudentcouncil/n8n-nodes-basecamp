// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1/iam_binding.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v1";

/**
 * Represents a particular IAM binding, which captures a member's role addition,
 * removal, or state.
 */
export interface IamBinding {
  /** The action that was performed on a Binding. */
  action: IamBinding_Action;
  /**
   * Role that is assigned to "members".
   * For example, "roles/viewer", "roles/editor", or "roles/owner".
   */
  role: string;
  /**
   * A single identity requesting access for a Cloud Platform resource, for
   * example, "foo@google.com".
   */
  member: string;
}

/** The type of action performed on a Binding in a policy. */
export enum IamBinding_Action {
  /** ACTION_UNSPECIFIED - Unspecified. */
  ACTION_UNSPECIFIED = 0,
  /** ADD - Addition of a Binding. */
  ADD = 1,
  /** REMOVE - Removal of a Binding. */
  REMOVE = 2,
  UNRECOGNIZED = -1,
}

export function iamBinding_ActionFromJSON(object: any): IamBinding_Action {
  switch (object) {
    case 0:
    case "ACTION_UNSPECIFIED":
      return IamBinding_Action.ACTION_UNSPECIFIED;
    case 1:
    case "ADD":
      return IamBinding_Action.ADD;
    case 2:
    case "REMOVE":
      return IamBinding_Action.REMOVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IamBinding_Action.UNRECOGNIZED;
  }
}

export function iamBinding_ActionToJSON(object: IamBinding_Action): string {
  switch (object) {
    case IamBinding_Action.ACTION_UNSPECIFIED:
      return "ACTION_UNSPECIFIED";
    case IamBinding_Action.ADD:
      return "ADD";
    case IamBinding_Action.REMOVE:
      return "REMOVE";
    case IamBinding_Action.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseIamBinding(): IamBinding {
  return { action: 0, role: "", member: "" };
}

export const IamBinding: MessageFns<IamBinding> = {
  encode(message: IamBinding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.action !== 0) {
      writer.uint32(8).int32(message.action);
    }
    if (message.role !== "") {
      writer.uint32(18).string(message.role);
    }
    if (message.member !== "") {
      writer.uint32(26).string(message.member);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IamBinding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIamBinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.role = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.member = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IamBinding {
    return {
      action: isSet(object.action) ? iamBinding_ActionFromJSON(object.action) : 0,
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      member: isSet(object.member) ? globalThis.String(object.member) : "",
    };
  },

  toJSON(message: IamBinding): unknown {
    const obj: any = {};
    if (message.action !== 0) {
      obj.action = iamBinding_ActionToJSON(message.action);
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.member !== "") {
      obj.member = message.member;
    }
    return obj;
  },

  create(base?: DeepPartial<IamBinding>): IamBinding {
    return IamBinding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IamBinding>): IamBinding {
    const message = createBaseIamBinding();
    message.action = object.action ?? 0;
    message.role = object.role ?? "";
    message.member = object.member ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
