// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v1/cloud_armor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";

export const protobufPackage = "google.cloud.securitycenter.v1";

/** Fields related to Google Cloud Armor findings. */
export interface CloudArmor {
  /**
   * Information about the [Google Cloud Armor security
   * policy](https://cloud.google.com/armor/docs/security-policy-overview)
   * relevant to the finding.
   */
  securityPolicy:
    | SecurityPolicy
    | undefined;
  /**
   * Information about incoming requests evaluated by [Google Cloud Armor
   * security
   * policies](https://cloud.google.com/armor/docs/security-policy-overview).
   */
  requests:
    | Requests
    | undefined;
  /**
   * Information about potential Layer 7 DDoS attacks identified by [Google
   * Cloud Armor Adaptive
   * Protection](https://cloud.google.com/armor/docs/adaptive-protection-overview).
   */
  adaptiveProtection:
    | AdaptiveProtection
    | undefined;
  /** Information about DDoS attack volume and classification. */
  attack:
    | Attack
    | undefined;
  /**
   * Distinguish between volumetric & protocol DDoS attack and
   * application layer attacks. For example, "L3_4" for Layer 3 and Layer 4 DDoS
   * attacks, or "L_7" for Layer 7 DDoS attacks.
   */
  threatVector: string;
  /**
   * Duration of attack from the start until the current moment (updated every 5
   * minutes).
   */
  duration: Duration | undefined;
}

/**
 * Information about the [Google Cloud Armor security
 * policy](https://cloud.google.com/armor/docs/security-policy-overview)
 * relevant to the finding.
 */
export interface SecurityPolicy {
  /**
   * The name of the Google Cloud Armor security policy, for example,
   * "my-security-policy".
   */
  name: string;
  /**
   * The type of Google Cloud Armor security policy for example, 'backend
   * security policy', 'edge security policy', 'network edge security policy',
   * or 'always-on DDoS protection'.
   */
  type: string;
  /** Whether or not the associated rule or policy is in preview mode. */
  preview: boolean;
}

/** Information about the requests relevant to the finding. */
export interface Requests {
  /**
   * For 'Increasing deny ratio', the ratio is the denied traffic divided by the
   * allowed traffic. For 'Allowed traffic spike', the ratio is the allowed
   * traffic in the short term divided by allowed traffic in the long term.
   */
  ratio: number;
  /** Allowed RPS (requests per second) in the short term. */
  shortTermAllowed: number;
  /** Allowed RPS (requests per second) over the long term. */
  longTermAllowed: number;
  /** Denied RPS (requests per second) over the long term. */
  longTermDenied: number;
}

/**
 * Information about [Google Cloud Armor Adaptive
 * Protection](https://cloud.google.com/armor/docs/cloud-armor-overview#google-cloud-armor-adaptive-protection).
 */
export interface AdaptiveProtection {
  /**
   * A score of 0 means that there is low confidence that the detected event is
   * an actual attack. A score of 1 means that there is high confidence that the
   * detected event is an attack. See the [Adaptive Protection
   * documentation](https://cloud.google.com/armor/docs/adaptive-protection-overview#configure-alert-tuning)
   * for further explanation.
   */
  confidence: number;
}

/** Information about DDoS attack volume and classification. */
export interface Attack {
  /** Total PPS (packets per second) volume of attack. */
  volumePps: number;
  /** Total BPS (bytes per second) volume of attack. */
  volumeBps: number;
  /** Type of attack, for example, 'SYN-flood', 'NTP-udp', or 'CHARGEN-udp'. */
  classification: string;
}

function createBaseCloudArmor(): CloudArmor {
  return {
    securityPolicy: undefined,
    requests: undefined,
    adaptiveProtection: undefined,
    attack: undefined,
    threatVector: "",
    duration: undefined,
  };
}

export const CloudArmor: MessageFns<CloudArmor> = {
  encode(message: CloudArmor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.securityPolicy !== undefined) {
      SecurityPolicy.encode(message.securityPolicy, writer.uint32(10).fork()).join();
    }
    if (message.requests !== undefined) {
      Requests.encode(message.requests, writer.uint32(18).fork()).join();
    }
    if (message.adaptiveProtection !== undefined) {
      AdaptiveProtection.encode(message.adaptiveProtection, writer.uint32(26).fork()).join();
    }
    if (message.attack !== undefined) {
      Attack.encode(message.attack, writer.uint32(34).fork()).join();
    }
    if (message.threatVector !== "") {
      writer.uint32(42).string(message.threatVector);
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudArmor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudArmor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.securityPolicy = SecurityPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests = Requests.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.adaptiveProtection = AdaptiveProtection.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.attack = Attack.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.threatVector = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudArmor {
    return {
      securityPolicy: isSet(object.securityPolicy) ? SecurityPolicy.fromJSON(object.securityPolicy) : undefined,
      requests: isSet(object.requests) ? Requests.fromJSON(object.requests) : undefined,
      adaptiveProtection: isSet(object.adaptiveProtection)
        ? AdaptiveProtection.fromJSON(object.adaptiveProtection)
        : undefined,
      attack: isSet(object.attack) ? Attack.fromJSON(object.attack) : undefined,
      threatVector: isSet(object.threatVector) ? globalThis.String(object.threatVector) : "",
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
    };
  },

  toJSON(message: CloudArmor): unknown {
    const obj: any = {};
    if (message.securityPolicy !== undefined) {
      obj.securityPolicy = SecurityPolicy.toJSON(message.securityPolicy);
    }
    if (message.requests !== undefined) {
      obj.requests = Requests.toJSON(message.requests);
    }
    if (message.adaptiveProtection !== undefined) {
      obj.adaptiveProtection = AdaptiveProtection.toJSON(message.adaptiveProtection);
    }
    if (message.attack !== undefined) {
      obj.attack = Attack.toJSON(message.attack);
    }
    if (message.threatVector !== "") {
      obj.threatVector = message.threatVector;
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    return obj;
  },

  create(base?: DeepPartial<CloudArmor>): CloudArmor {
    return CloudArmor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudArmor>): CloudArmor {
    const message = createBaseCloudArmor();
    message.securityPolicy = (object.securityPolicy !== undefined && object.securityPolicy !== null)
      ? SecurityPolicy.fromPartial(object.securityPolicy)
      : undefined;
    message.requests = (object.requests !== undefined && object.requests !== null)
      ? Requests.fromPartial(object.requests)
      : undefined;
    message.adaptiveProtection = (object.adaptiveProtection !== undefined && object.adaptiveProtection !== null)
      ? AdaptiveProtection.fromPartial(object.adaptiveProtection)
      : undefined;
    message.attack = (object.attack !== undefined && object.attack !== null)
      ? Attack.fromPartial(object.attack)
      : undefined;
    message.threatVector = object.threatVector ?? "";
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    return message;
  },
};

function createBaseSecurityPolicy(): SecurityPolicy {
  return { name: "", type: "", preview: false };
}

export const SecurityPolicy: MessageFns<SecurityPolicy> = {
  encode(message: SecurityPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.preview !== false) {
      writer.uint32(24).bool(message.preview);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.preview = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityPolicy {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      preview: isSet(object.preview) ? globalThis.Boolean(object.preview) : false,
    };
  },

  toJSON(message: SecurityPolicy): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.preview !== false) {
      obj.preview = message.preview;
    }
    return obj;
  },

  create(base?: DeepPartial<SecurityPolicy>): SecurityPolicy {
    return SecurityPolicy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecurityPolicy>): SecurityPolicy {
    const message = createBaseSecurityPolicy();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.preview = object.preview ?? false;
    return message;
  },
};

function createBaseRequests(): Requests {
  return { ratio: 0, shortTermAllowed: 0, longTermAllowed: 0, longTermDenied: 0 };
}

export const Requests: MessageFns<Requests> = {
  encode(message: Requests, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ratio !== 0) {
      writer.uint32(9).double(message.ratio);
    }
    if (message.shortTermAllowed !== 0) {
      writer.uint32(16).int32(message.shortTermAllowed);
    }
    if (message.longTermAllowed !== 0) {
      writer.uint32(24).int32(message.longTermAllowed);
    }
    if (message.longTermDenied !== 0) {
      writer.uint32(32).int32(message.longTermDenied);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Requests {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequests();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.ratio = reader.double();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.shortTermAllowed = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.longTermAllowed = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.longTermDenied = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Requests {
    return {
      ratio: isSet(object.ratio) ? globalThis.Number(object.ratio) : 0,
      shortTermAllowed: isSet(object.shortTermAllowed) ? globalThis.Number(object.shortTermAllowed) : 0,
      longTermAllowed: isSet(object.longTermAllowed) ? globalThis.Number(object.longTermAllowed) : 0,
      longTermDenied: isSet(object.longTermDenied) ? globalThis.Number(object.longTermDenied) : 0,
    };
  },

  toJSON(message: Requests): unknown {
    const obj: any = {};
    if (message.ratio !== 0) {
      obj.ratio = message.ratio;
    }
    if (message.shortTermAllowed !== 0) {
      obj.shortTermAllowed = Math.round(message.shortTermAllowed);
    }
    if (message.longTermAllowed !== 0) {
      obj.longTermAllowed = Math.round(message.longTermAllowed);
    }
    if (message.longTermDenied !== 0) {
      obj.longTermDenied = Math.round(message.longTermDenied);
    }
    return obj;
  },

  create(base?: DeepPartial<Requests>): Requests {
    return Requests.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Requests>): Requests {
    const message = createBaseRequests();
    message.ratio = object.ratio ?? 0;
    message.shortTermAllowed = object.shortTermAllowed ?? 0;
    message.longTermAllowed = object.longTermAllowed ?? 0;
    message.longTermDenied = object.longTermDenied ?? 0;
    return message;
  },
};

function createBaseAdaptiveProtection(): AdaptiveProtection {
  return { confidence: 0 };
}

export const AdaptiveProtection: MessageFns<AdaptiveProtection> = {
  encode(message: AdaptiveProtection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.confidence !== 0) {
      writer.uint32(9).double(message.confidence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdaptiveProtection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdaptiveProtection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.confidence = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdaptiveProtection {
    return { confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0 };
  },

  toJSON(message: AdaptiveProtection): unknown {
    const obj: any = {};
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    return obj;
  },

  create(base?: DeepPartial<AdaptiveProtection>): AdaptiveProtection {
    return AdaptiveProtection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AdaptiveProtection>): AdaptiveProtection {
    const message = createBaseAdaptiveProtection();
    message.confidence = object.confidence ?? 0;
    return message;
  },
};

function createBaseAttack(): Attack {
  return { volumePps: 0, volumeBps: 0, classification: "" };
}

export const Attack: MessageFns<Attack> = {
  encode(message: Attack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.volumePps !== 0) {
      writer.uint32(8).int32(message.volumePps);
    }
    if (message.volumeBps !== 0) {
      writer.uint32(16).int32(message.volumeBps);
    }
    if (message.classification !== "") {
      writer.uint32(26).string(message.classification);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.volumePps = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.volumeBps = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.classification = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attack {
    return {
      volumePps: isSet(object.volumePps) ? globalThis.Number(object.volumePps) : 0,
      volumeBps: isSet(object.volumeBps) ? globalThis.Number(object.volumeBps) : 0,
      classification: isSet(object.classification) ? globalThis.String(object.classification) : "",
    };
  },

  toJSON(message: Attack): unknown {
    const obj: any = {};
    if (message.volumePps !== 0) {
      obj.volumePps = Math.round(message.volumePps);
    }
    if (message.volumeBps !== 0) {
      obj.volumeBps = Math.round(message.volumeBps);
    }
    if (message.classification !== "") {
      obj.classification = message.classification;
    }
    return obj;
  },

  create(base?: DeepPartial<Attack>): Attack {
    return Attack.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Attack>): Attack {
    const message = createBaseAttack();
    message.volumePps = object.volumePps ?? 0;
    message.volumeBps = object.volumeBps ?? 0;
    message.classification = object.classification ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
