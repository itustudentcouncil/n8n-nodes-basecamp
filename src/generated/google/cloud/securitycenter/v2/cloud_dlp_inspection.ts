// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v2/cloud_dlp_inspection.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v2";

/**
 * Details about the Cloud Data Loss Prevention (Cloud DLP) [inspection
 * job](https://cloud.google.com/dlp/docs/concepts-job-triggers) that produced
 * the finding.
 */
export interface CloudDlpInspection {
  /**
   * Name of the inspection job, for example,
   * `projects/123/locations/europe/dlpJobs/i-8383929`.
   */
  inspectJob: string;
  /**
   * The type of information (or
   * *[infoType](https://cloud.google.com/dlp/docs/infotypes-reference)*) found,
   * for example, `EMAIL_ADDRESS` or `STREET_ADDRESS`.
   */
  infoType: string;
  /**
   * The number of times Cloud DLP found this infoType within this job
   * and resource.
   */
  infoTypeCount: Long;
  /** Whether Cloud DLP scanned the complete resource or a sampled subset. */
  fullScan: boolean;
}

function createBaseCloudDlpInspection(): CloudDlpInspection {
  return { inspectJob: "", infoType: "", infoTypeCount: Long.ZERO, fullScan: false };
}

export const CloudDlpInspection: MessageFns<CloudDlpInspection> = {
  encode(message: CloudDlpInspection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inspectJob !== "") {
      writer.uint32(10).string(message.inspectJob);
    }
    if (message.infoType !== "") {
      writer.uint32(18).string(message.infoType);
    }
    if (!message.infoTypeCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.infoTypeCount.toString());
    }
    if (message.fullScan !== false) {
      writer.uint32(32).bool(message.fullScan);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudDlpInspection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudDlpInspection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inspectJob = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.infoType = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.infoTypeCount = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.fullScan = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudDlpInspection {
    return {
      inspectJob: isSet(object.inspectJob) ? globalThis.String(object.inspectJob) : "",
      infoType: isSet(object.infoType) ? globalThis.String(object.infoType) : "",
      infoTypeCount: isSet(object.infoTypeCount) ? Long.fromValue(object.infoTypeCount) : Long.ZERO,
      fullScan: isSet(object.fullScan) ? globalThis.Boolean(object.fullScan) : false,
    };
  },

  toJSON(message: CloudDlpInspection): unknown {
    const obj: any = {};
    if (message.inspectJob !== "") {
      obj.inspectJob = message.inspectJob;
    }
    if (message.infoType !== "") {
      obj.infoType = message.infoType;
    }
    if (!message.infoTypeCount.equals(Long.ZERO)) {
      obj.infoTypeCount = (message.infoTypeCount || Long.ZERO).toString();
    }
    if (message.fullScan !== false) {
      obj.fullScan = message.fullScan;
    }
    return obj;
  },

  create(base?: DeepPartial<CloudDlpInspection>): CloudDlpInspection {
    return CloudDlpInspection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudDlpInspection>): CloudDlpInspection {
    const message = createBaseCloudDlpInspection();
    message.inspectJob = object.inspectJob ?? "";
    message.infoType = object.infoType ?? "";
    message.infoTypeCount = (object.infoTypeCount !== undefined && object.infoTypeCount !== null)
      ? Long.fromValue(object.infoTypeCount)
      : Long.ZERO;
    message.fullScan = object.fullScan ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
