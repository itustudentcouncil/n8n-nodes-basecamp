// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v2/external_system.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.securitycenter.v2";

/** Representation of third party SIEM/SOAR fields within SCC. */
export interface ExternalSystem {
  /**
   * Full resource name of the external system. The following list
   * shows some examples:
   *
   * + `organizations/1234/sources/5678/findings/123456/externalSystems/jira`
   * +
   * `organizations/1234/sources/5678/locations/us/findings/123456/externalSystems/jira`
   * + `folders/1234/sources/5678/findings/123456/externalSystems/jira`
   * +
   * `folders/1234/sources/5678/locations/us/findings/123456/externalSystems/jira`
   * + `projects/1234/sources/5678/findings/123456/externalSystems/jira`
   * +
   * `projects/1234/sources/5678/locations/us/findings/123456/externalSystems/jira`
   */
  name: string;
  /** References primary/secondary etc assignees in the external system. */
  assignees: string[];
  /**
   * The identifier that's used to track the finding's corresponding case in the
   * external system.
   */
  externalUid: string;
  /**
   * The most recent status of the finding's corresponding case, as reported by
   * the external system.
   */
  status: string;
  /**
   * The time when the case was last updated, as reported by the external
   * system.
   */
  externalSystemUpdateTime:
    | Date
    | undefined;
  /** The link to the finding's corresponding case in the external system. */
  caseUri: string;
  /** The priority of the finding's corresponding case in the external system. */
  casePriority: string;
  /** The SLA of the finding's corresponding case in the external system. */
  caseSla:
    | Date
    | undefined;
  /** The time when the case was created, as reported by the external system. */
  caseCreateTime:
    | Date
    | undefined;
  /** The time when the case was closed, as reported by the external system. */
  caseCloseTime:
    | Date
    | undefined;
  /**
   * Information about the ticket, if any, that is being used to track the
   * resolution of the issue that is identified by this finding.
   */
  ticketInfo: ExternalSystem_TicketInfo | undefined;
}

/**
 * Information about the ticket, if any, that is being used to track the
 * resolution of the issue that is identified by this finding.
 */
export interface ExternalSystem_TicketInfo {
  /** The identifier of the ticket in the ticket system. */
  id: string;
  /** The assignee of the ticket in the ticket system. */
  assignee: string;
  /** The description of the ticket in the ticket system. */
  description: string;
  /** The link to the ticket in the ticket system. */
  uri: string;
  /** The latest status of the ticket, as reported by the ticket system. */
  status: string;
  /**
   * The time when the ticket was last updated, as reported by the ticket
   * system.
   */
  updateTime: Date | undefined;
}

function createBaseExternalSystem(): ExternalSystem {
  return {
    name: "",
    assignees: [],
    externalUid: "",
    status: "",
    externalSystemUpdateTime: undefined,
    caseUri: "",
    casePriority: "",
    caseSla: undefined,
    caseCreateTime: undefined,
    caseCloseTime: undefined,
    ticketInfo: undefined,
  };
}

export const ExternalSystem: MessageFns<ExternalSystem> = {
  encode(message: ExternalSystem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.assignees) {
      writer.uint32(18).string(v!);
    }
    if (message.externalUid !== "") {
      writer.uint32(26).string(message.externalUid);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    if (message.externalSystemUpdateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.externalSystemUpdateTime), writer.uint32(42).fork()).join();
    }
    if (message.caseUri !== "") {
      writer.uint32(50).string(message.caseUri);
    }
    if (message.casePriority !== "") {
      writer.uint32(58).string(message.casePriority);
    }
    if (message.caseSla !== undefined) {
      Timestamp.encode(toTimestamp(message.caseSla), writer.uint32(74).fork()).join();
    }
    if (message.caseCreateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.caseCreateTime), writer.uint32(82).fork()).join();
    }
    if (message.caseCloseTime !== undefined) {
      Timestamp.encode(toTimestamp(message.caseCloseTime), writer.uint32(90).fork()).join();
    }
    if (message.ticketInfo !== undefined) {
      ExternalSystem_TicketInfo.encode(message.ticketInfo, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalSystem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalSystem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.assignees.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.externalUid = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.externalSystemUpdateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.caseUri = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.casePriority = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.caseSla = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.caseCreateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.caseCloseTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.ticketInfo = ExternalSystem_TicketInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalSystem {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      assignees: globalThis.Array.isArray(object?.assignees)
        ? object.assignees.map((e: any) => globalThis.String(e))
        : [],
      externalUid: isSet(object.externalUid) ? globalThis.String(object.externalUid) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      externalSystemUpdateTime: isSet(object.externalSystemUpdateTime)
        ? fromJsonTimestamp(object.externalSystemUpdateTime)
        : undefined,
      caseUri: isSet(object.caseUri) ? globalThis.String(object.caseUri) : "",
      casePriority: isSet(object.casePriority) ? globalThis.String(object.casePriority) : "",
      caseSla: isSet(object.caseSla) ? fromJsonTimestamp(object.caseSla) : undefined,
      caseCreateTime: isSet(object.caseCreateTime) ? fromJsonTimestamp(object.caseCreateTime) : undefined,
      caseCloseTime: isSet(object.caseCloseTime) ? fromJsonTimestamp(object.caseCloseTime) : undefined,
      ticketInfo: isSet(object.ticketInfo) ? ExternalSystem_TicketInfo.fromJSON(object.ticketInfo) : undefined,
    };
  },

  toJSON(message: ExternalSystem): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.assignees?.length) {
      obj.assignees = message.assignees;
    }
    if (message.externalUid !== "") {
      obj.externalUid = message.externalUid;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.externalSystemUpdateTime !== undefined) {
      obj.externalSystemUpdateTime = message.externalSystemUpdateTime.toISOString();
    }
    if (message.caseUri !== "") {
      obj.caseUri = message.caseUri;
    }
    if (message.casePriority !== "") {
      obj.casePriority = message.casePriority;
    }
    if (message.caseSla !== undefined) {
      obj.caseSla = message.caseSla.toISOString();
    }
    if (message.caseCreateTime !== undefined) {
      obj.caseCreateTime = message.caseCreateTime.toISOString();
    }
    if (message.caseCloseTime !== undefined) {
      obj.caseCloseTime = message.caseCloseTime.toISOString();
    }
    if (message.ticketInfo !== undefined) {
      obj.ticketInfo = ExternalSystem_TicketInfo.toJSON(message.ticketInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<ExternalSystem>): ExternalSystem {
    return ExternalSystem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExternalSystem>): ExternalSystem {
    const message = createBaseExternalSystem();
    message.name = object.name ?? "";
    message.assignees = object.assignees?.map((e) => e) || [];
    message.externalUid = object.externalUid ?? "";
    message.status = object.status ?? "";
    message.externalSystemUpdateTime = object.externalSystemUpdateTime ?? undefined;
    message.caseUri = object.caseUri ?? "";
    message.casePriority = object.casePriority ?? "";
    message.caseSla = object.caseSla ?? undefined;
    message.caseCreateTime = object.caseCreateTime ?? undefined;
    message.caseCloseTime = object.caseCloseTime ?? undefined;
    message.ticketInfo = (object.ticketInfo !== undefined && object.ticketInfo !== null)
      ? ExternalSystem_TicketInfo.fromPartial(object.ticketInfo)
      : undefined;
    return message;
  },
};

function createBaseExternalSystem_TicketInfo(): ExternalSystem_TicketInfo {
  return { id: "", assignee: "", description: "", uri: "", status: "", updateTime: undefined };
}

export const ExternalSystem_TicketInfo: MessageFns<ExternalSystem_TicketInfo> = {
  encode(message: ExternalSystem_TicketInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.assignee !== "") {
      writer.uint32(18).string(message.assignee);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.uri !== "") {
      writer.uint32(34).string(message.uri);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalSystem_TicketInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalSystem_TicketInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.assignee = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalSystem_TicketInfo {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      assignee: isSet(object.assignee) ? globalThis.String(object.assignee) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: ExternalSystem_TicketInfo): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.assignee !== "") {
      obj.assignee = message.assignee;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ExternalSystem_TicketInfo>): ExternalSystem_TicketInfo {
    return ExternalSystem_TicketInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExternalSystem_TicketInfo>): ExternalSystem_TicketInfo {
    const message = createBaseExternalSystem_TicketInfo();
    message.id = object.id ?? "";
    message.assignee = object.assignee ?? "";
    message.description = object.description ?? "";
    message.uri = object.uri ?? "";
    message.status = object.status ?? "";
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
