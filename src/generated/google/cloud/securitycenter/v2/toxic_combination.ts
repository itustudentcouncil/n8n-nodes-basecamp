// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/v2/toxic_combination.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.securitycenter.v2";

/**
 * Contains details about a group of security issues that, when the issues
 * occur together, represent a greater risk than when the issues occur
 * independently. A group of such issues is referred to as a toxic
 * combination.
 */
export interface ToxicCombination {
  /**
   * The
   * [Attack exposure
   * score](https://cloud.google.com/security-command-center/docs/attack-exposure-learn#attack_exposure_scores)
   * of this toxic combination. The score is a measure of how much this toxic
   * combination exposes one or more high-value resources to potential attack.
   */
  attackExposureScore: number;
  /**
   * List of resource names of findings associated with this toxic combination.
   * For example, `organizations/123/sources/456/findings/789`.
   */
  relatedFindings: string[];
}

function createBaseToxicCombination(): ToxicCombination {
  return { attackExposureScore: 0, relatedFindings: [] };
}

export const ToxicCombination: MessageFns<ToxicCombination> = {
  encode(message: ToxicCombination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attackExposureScore !== 0) {
      writer.uint32(9).double(message.attackExposureScore);
    }
    for (const v of message.relatedFindings) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToxicCombination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToxicCombination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.attackExposureScore = reader.double();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.relatedFindings.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToxicCombination {
    return {
      attackExposureScore: isSet(object.attackExposureScore) ? globalThis.Number(object.attackExposureScore) : 0,
      relatedFindings: globalThis.Array.isArray(object?.relatedFindings)
        ? object.relatedFindings.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ToxicCombination): unknown {
    const obj: any = {};
    if (message.attackExposureScore !== 0) {
      obj.attackExposureScore = message.attackExposureScore;
    }
    if (message.relatedFindings?.length) {
      obj.relatedFindings = message.relatedFindings;
    }
    return obj;
  },

  create(base?: DeepPartial<ToxicCombination>): ToxicCombination {
    return ToxicCombination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ToxicCombination>): ToxicCombination {
    const message = createBaseToxicCombination();
    message.attackExposureScore = object.attackExposureScore ?? 0;
    message.relatedFindings = object.relatedFindings?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
