// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/settings/v1beta1/billing_settings.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.securitycenter.settings.v1beta1";

/** Billing tier options */
export enum BillingTier {
  /** BILLING_TIER_UNSPECIFIED - Default value. This value is unused. */
  BILLING_TIER_UNSPECIFIED = 0,
  /** STANDARD - The standard billing tier. */
  STANDARD = 1,
  /** PREMIUM - The premium billing tier. */
  PREMIUM = 2,
  UNRECOGNIZED = -1,
}

export function billingTierFromJSON(object: any): BillingTier {
  switch (object) {
    case 0:
    case "BILLING_TIER_UNSPECIFIED":
      return BillingTier.BILLING_TIER_UNSPECIFIED;
    case 1:
    case "STANDARD":
      return BillingTier.STANDARD;
    case 2:
    case "PREMIUM":
      return BillingTier.PREMIUM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BillingTier.UNRECOGNIZED;
  }
}

export function billingTierToJSON(object: BillingTier): string {
  switch (object) {
    case BillingTier.BILLING_TIER_UNSPECIFIED:
      return "BILLING_TIER_UNSPECIFIED";
    case BillingTier.STANDARD:
      return "STANDARD";
    case BillingTier.PREMIUM:
      return "PREMIUM";
    case BillingTier.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Billing type */
export enum BillingType {
  /** BILLING_TYPE_UNSPECIFIED - Default billing type */
  BILLING_TYPE_UNSPECIFIED = 0,
  /** SUBSCRIPTION - Subscription for Premium billing tier */
  SUBSCRIPTION = 1,
  /** TRIAL_SUBSCRIPTION - Trial subscription for Premium billing tier */
  TRIAL_SUBSCRIPTION = 2,
  /** ALPHA - Alpha customer for Premium billing tier */
  ALPHA = 3,
  UNRECOGNIZED = -1,
}

export function billingTypeFromJSON(object: any): BillingType {
  switch (object) {
    case 0:
    case "BILLING_TYPE_UNSPECIFIED":
      return BillingType.BILLING_TYPE_UNSPECIFIED;
    case 1:
    case "SUBSCRIPTION":
      return BillingType.SUBSCRIPTION;
    case 2:
    case "TRIAL_SUBSCRIPTION":
      return BillingType.TRIAL_SUBSCRIPTION;
    case 3:
    case "ALPHA":
      return BillingType.ALPHA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BillingType.UNRECOGNIZED;
  }
}

export function billingTypeToJSON(object: BillingType): string {
  switch (object) {
    case BillingType.BILLING_TYPE_UNSPECIFIED:
      return "BILLING_TYPE_UNSPECIFIED";
    case BillingType.SUBSCRIPTION:
      return "SUBSCRIPTION";
    case BillingType.TRIAL_SUBSCRIPTION:
      return "TRIAL_SUBSCRIPTION";
    case BillingType.ALPHA:
      return "ALPHA";
    case BillingType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Billing settings */
export interface BillingSettings {
  /** Output only. Billing tier selected by customer */
  billingTier: BillingTier;
  /** Output only. Type of billing method */
  billingType: BillingType;
  /**
   * Output only. The absolute point in time when the subscription became effective.
   * Can be compared to expire_time value to determine full contract duration
   */
  startTime:
    | Date
    | undefined;
  /**
   * Output only. The absolute point in time when the subscription expires.
   *
   * If this field is populated and billing_tier is STANDARD, this is
   * indication of a point in the _past_ when a PREMIUM access ended.
   */
  expireTime: Date | undefined;
}

function createBaseBillingSettings(): BillingSettings {
  return { billingTier: 0, billingType: 0, startTime: undefined, expireTime: undefined };
}

export const BillingSettings: MessageFns<BillingSettings> = {
  encode(message: BillingSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.billingTier !== 0) {
      writer.uint32(8).int32(message.billingTier);
    }
    if (message.billingType !== 0) {
      writer.uint32(16).int32(message.billingType);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(26).fork()).join();
    }
    if (message.expireTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expireTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BillingSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBillingSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.billingTier = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.billingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.expireTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BillingSettings {
    return {
      billingTier: isSet(object.billingTier) ? billingTierFromJSON(object.billingTier) : 0,
      billingType: isSet(object.billingType) ? billingTypeFromJSON(object.billingType) : 0,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      expireTime: isSet(object.expireTime) ? fromJsonTimestamp(object.expireTime) : undefined,
    };
  },

  toJSON(message: BillingSettings): unknown {
    const obj: any = {};
    if (message.billingTier !== 0) {
      obj.billingTier = billingTierToJSON(message.billingTier);
    }
    if (message.billingType !== 0) {
      obj.billingType = billingTypeToJSON(message.billingType);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.expireTime !== undefined) {
      obj.expireTime = message.expireTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<BillingSettings>): BillingSettings {
    return BillingSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BillingSettings>): BillingSettings {
    const message = createBaseBillingSettings();
    message.billingTier = object.billingTier ?? 0;
    message.billingType = object.billingType ?? 0;
    message.startTime = object.startTime ?? undefined;
    message.expireTime = object.expireTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
