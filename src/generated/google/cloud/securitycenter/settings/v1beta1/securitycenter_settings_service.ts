// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/securitycenter/settings/v1beta1/securitycenter_settings_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../../protobuf/empty.js";
import { FieldMask } from "../../../../protobuf/field_mask.js";
import { ComponentSettings } from "./component_settings.js";
import { Detector } from "./detector.js";
import { Settings } from "./settings.js";

export const protobufPackage = "google.cloud.securitycenter.settings.v1beta1";

/** Request message for GetServiceAccount. */
export interface GetServiceAccountRequest {
  /**
   * Required. The relative resource name of the service account resource.
   * Format:
   *  * `organizations/{organization}/serviceAccount`
   */
  name: string;
}

/**
 * An organization-level service account to be used by threat detection
 * components.
 */
export interface ServiceAccount {
  /**
   * The relative resource name of the service account resource.
   * Format:
   *  * `organizations/{organization}/serviceAccount`
   */
  name: string;
  /**
   * Security Center managed service account for the organization
   * example service-org-1234@scc.iam.gserviceaccount.com
   * This service_account will be stored in the ComponentSettings field for the
   * SCC, SHA, and Infra Automation components.
   */
  serviceAccount: string;
}

/** Request message for GetSettings. */
export interface GetSettingsRequest {
  /**
   * Required. The name of the settings to retrieve.
   * Formats:
   *  * `organizations/{organization}/settings`
   *  * `folders/{folder}/settings`
   *  * `projects/{project}/settings`
   *  * `projects/{project}/locations/{location}/clusters/{cluster}/settings`
   *  * `projects/{project}/regions/{region}/clusters/{cluster}/settings`
   *  * `projects/{project}/zones/{zone}/clusters/{cluster}/settings`
   */
  name: string;
}

/** Request message for UpdateSettings. */
export interface UpdateSettingsRequest {
  /**
   * Required. The settings to update.
   *
   * The settings' `name` field is used to identify the settings to be updated.
   * Formats:
   *  * `organizations/{organization}/settings`
   *  * `folders/{folder}/settings`
   *  * `projects/{project}/settings`
   *  * `projects/{project}/locations/{location}/clusters/{cluster}/settings`
   *  * `projects/{project}/regions/{region}/clusters/{cluster}/settings`
   *  * `projects/{project}/zones/{zone}/clusters/{cluster}/settings`
   */
  settings:
    | Settings
    | undefined;
  /** The list of fields to be updated on the settings. */
  updateMask: string[] | undefined;
}

/** Request message for ResetSettings. */
export interface ResetSettingsRequest {
  /**
   * Required. The name of the settings to reset.
   * Formats:
   *  * `organizations/{organization}/settings`
   *  * `folders/{folder}/settings`
   *  * `projects/{project}/settings`
   *  * `projects/{project}/locations/{location}/clusters/{cluster}/settings`
   *  * `projects/{project}/regions/{region}/clusters/{cluster}/settings`
   *  * `projects/{project}/zones/{zone}/clusters/{cluster}/settings`
   */
  name: string;
  /**
   * A fingerprint used for optimistic concurrency. If none is provided,
   * then the existing settings will be blindly overwritten.
   */
  etag: string;
}

/** Request message for BatchGetSettings. */
export interface BatchGetSettingsRequest {
  /**
   * Required. The relative resource name of the organization shared by all of the
   * settings being retrieved.
   * Format:
   *  * `organizations/{organization}`
   */
  parent: string;
  /**
   * The names of the settings to retrieve.
   * A maximum of 1000 settings can be retrieved in a batch.
   * Formats:
   *  * `organizations/{organization}/settings`
   *  * `folders/{folder}/settings`
   *  * `projects/{project}/settings`
   *  * `projects/{project}/locations/{location}/clusters/{cluster}/settings`
   *  * `projects/{project}/regions/{region}/clusters/{cluster}/settings`
   *  * `projects/{project}/zones/{zone}/clusters/{cluster}/settings`
   */
  names: string[];
}

/** Response message for BatchGetSettings. */
export interface BatchGetSettingsResponse {
  /** Settings requested. */
  settings: Settings[];
}

/** Request message for CalculateEffectiveSettings. */
export interface CalculateEffectiveSettingsRequest {
  /**
   * Required. The name of the effective settings to retrieve.
   * Formats:
   *  * `organizations/{organization}/effectiveSettings`
   *  * `folders/{folder}/effectiveSettings`
   *  * `projects/{project}/effectiveSettings`
   *  * `projects/{project}/locations/{location}/clusters/{cluster}/effectiveSettings`
   *  * `projects/{project}/regions/{region}/clusters/{cluster}/effectiveSettings`
   *  * `projects/{project}/zones/{zone}/clusters/{cluster}/effectiveSettings`
   */
  name: string;
}

/** Request message for BatchGetEffectiveSettings. */
export interface BatchCalculateEffectiveSettingsRequest {
  /**
   * Required. The relative resource name of the organization shared by all of the
   * settings being retrieved.
   * Format:
   *  * `organizations/{organization}`
   */
  parent: string;
  /**
   * The requests specifying the effective settings to retrieve.
   * A maximum of 1000 effective settings can be retrieved in a batch.
   */
  requests: CalculateEffectiveSettingsRequest[];
}

/** Response message for BatchGetEffectiveSettings. */
export interface BatchCalculateEffectiveSettingsResponse {
  /** Settings requested. */
  settings: Settings[];
}

/** Request message for GetComponentSettings. */
export interface GetComponentSettingsRequest {
  /**
   * Required. The component settings to retrieve.
   *
   * Formats:
   *  * `organizations/{organization}/components/{component}/settings`
   *  * `folders/{folder}/components/{component}/settings`
   *  * `projects/{project}/components/{component}/settings`
   *  * `projects/{project}/locations/{location}/clusters/{cluster}/components/{component}/settings`
   *  * `projects/{project}/regions/{region}/clusters/{cluster}/components/{component}/settings`
   *  * `projects/{project}/zones/{zone}/clusters/{cluster}/components/{component}/settings`
   */
  name: string;
}

/** Request message for UpdateComponentSettings. */
export interface UpdateComponentSettingsRequest {
  /**
   * Required. The component settings to update.
   *
   * The component settings' `name` field is used to identify the component
   * settings to be updated. Formats:
   *  * `organizations/{organization}/components/{component}/settings`
   *  * `folders/{folder}/components/{component}/settings`
   *  * `projects/{project}/components/{component}/settings`
   *  * `projects/{project}/locations/{location}/clusters/{cluster}/components/{component}/settings`
   *  * `projects/{project}/regions/{region}/clusters/{cluster}/components/{component}/settings`
   *  * `projects/{project}/zones/{zone}/clusters/{cluster}/components/{component}/settings`
   */
  componentSettings:
    | ComponentSettings
    | undefined;
  /** The list of fields to be updated on the component settings resource. */
  updateMask: string[] | undefined;
}

/** Request message for ResetComponentSettings. */
export interface ResetComponentSettingsRequest {
  /**
   * Required. The component settings to reset.
   *
   * Formats:
   *  * `organizations/{organization}/components/{component}/settings`
   *  * `folders/{folder}/components/{component}/settings`
   *  * `projects/{project}/components/{component}/settings`
   *  * `projects/{project}/locations/{location}/clusters/{cluster}/components/{component}/settings`
   *  * `projects/{project}/regions/{region}/clusters/{cluster}/components/{component}/settings`
   *  * `projects/{project}/zones/{zone}/clusters/{cluster}/components/{component}/settings`
   */
  name: string;
  /**
   * An fingerprint used for optimistic concurrency. If none is provided,
   * then the existing settings will be blindly overwritten.
   */
  etag: string;
}

/** Request message for CalculateEffectiveComponentSettings. */
export interface CalculateEffectiveComponentSettingsRequest {
  /**
   * Required. The effective component settings to retrieve.
   *
   * Formats:
   *  * `organizations/{organization}/components/{component}/settings`
   *  * `folders/{folder}/components/{component}/settings`
   *  * `projects/{project}/components/{component}/settings`
   *  * `projects/{project}/locations/{location}/clusters/{cluster}/components/{component}/settings`
   *  * `projects/{project}/regions/{region}/clusters/{cluster}/components/{component}/settings`
   *  * `projects/{project}/zones/{zone}/clusters/{cluster}/components/{component}/settings`
   */
  name: string;
}

/** Request message for ListDetectors. */
export interface ListDetectorsRequest {
  /**
   * Required. The parent, which owns this collection of detectors.
   * Format:
   *  * `organizations/{organization}`
   */
  parent: string;
  /**
   * Filters to apply on the response. Filters can be applied on:
   *  * components
   *  * labels
   *  * billing tiers
   *
   * Component filters will retrieve only detectors for the components
   * specified. Label filters will retrieve only detectors that match one of the
   * labels specified. Billing tier filters will retrieve only detectors for
   * that billing tier.
   *
   * The filters
   */
  filter: string;
  /**
   * The maximum number of detectors to return. The service may return fewer
   * than this value. If unspecified, at most 100 detectors will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListDetectors` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListDetectors` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListDetectors. */
export interface ListDetectorsResponse {
  /** The detectors from the specified organization. */
  detectors: Detector[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for ListComponents. */
export interface ListComponentsRequest {
  /**
   * Required. The parent, which owns this collection of components.
   * Format:
   *  * `organizations/{organization}`
   */
  parent: string;
  /**
   * The maximum number of components to return. The service may return fewer
   * than this value. If unspecified, at most 100 components will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListComponents` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListComponents` must
   * match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for ListComponents. */
export interface ListComponentsResponse {
  /** The components from the specified organization. */
  components: string[];
  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseGetServiceAccountRequest(): GetServiceAccountRequest {
  return { name: "" };
}

export const GetServiceAccountRequest: MessageFns<GetServiceAccountRequest> = {
  encode(message: GetServiceAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetServiceAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetServiceAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetServiceAccountRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetServiceAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetServiceAccountRequest>): GetServiceAccountRequest {
    return GetServiceAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetServiceAccountRequest>): GetServiceAccountRequest {
    const message = createBaseGetServiceAccountRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseServiceAccount(): ServiceAccount {
  return { name: "", serviceAccount: "" };
}

export const ServiceAccount: MessageFns<ServiceAccount> = {
  encode(message: ServiceAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.serviceAccount !== "") {
      writer.uint32(18).string(message.serviceAccount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceAccount {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "",
    };
  },

  toJSON(message: ServiceAccount): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    return obj;
  },

  create(base?: DeepPartial<ServiceAccount>): ServiceAccount {
    return ServiceAccount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServiceAccount>): ServiceAccount {
    const message = createBaseServiceAccount();
    message.name = object.name ?? "";
    message.serviceAccount = object.serviceAccount ?? "";
    return message;
  },
};

function createBaseGetSettingsRequest(): GetSettingsRequest {
  return { name: "" };
}

export const GetSettingsRequest: MessageFns<GetSettingsRequest> = {
  encode(message: GetSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSettingsRequest>): GetSettingsRequest {
    return GetSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSettingsRequest>): GetSettingsRequest {
    const message = createBaseGetSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateSettingsRequest(): UpdateSettingsRequest {
  return { settings: undefined, updateMask: undefined };
}

export const UpdateSettingsRequest: MessageFns<UpdateSettingsRequest> = {
  encode(message: UpdateSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.settings !== undefined) {
      Settings.encode(message.settings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.settings = Settings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSettingsRequest {
    return {
      settings: isSet(object.settings) ? Settings.fromJSON(object.settings) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSettingsRequest): unknown {
    const obj: any = {};
    if (message.settings !== undefined) {
      obj.settings = Settings.toJSON(message.settings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSettingsRequest>): UpdateSettingsRequest {
    return UpdateSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSettingsRequest>): UpdateSettingsRequest {
    const message = createBaseUpdateSettingsRequest();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? Settings.fromPartial(object.settings)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseResetSettingsRequest(): ResetSettingsRequest {
  return { name: "", etag: "" };
}

export const ResetSettingsRequest: MessageFns<ResetSettingsRequest> = {
  encode(message: ResetSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetSettingsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: ResetSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetSettingsRequest>): ResetSettingsRequest {
    return ResetSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetSettingsRequest>): ResetSettingsRequest {
    const message = createBaseResetSettingsRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseBatchGetSettingsRequest(): BatchGetSettingsRequest {
  return { parent: "", names: [] };
}

export const BatchGetSettingsRequest: MessageFns<BatchGetSettingsRequest> = {
  encode(message: BatchGetSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.names) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchGetSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.names.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetSettingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      names: globalThis.Array.isArray(object?.names) ? object.names.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: BatchGetSettingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.names?.length) {
      obj.names = message.names;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchGetSettingsRequest>): BatchGetSettingsRequest {
    return BatchGetSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchGetSettingsRequest>): BatchGetSettingsRequest {
    const message = createBaseBatchGetSettingsRequest();
    message.parent = object.parent ?? "";
    message.names = object.names?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchGetSettingsResponse(): BatchGetSettingsResponse {
  return { settings: [] };
}

export const BatchGetSettingsResponse: MessageFns<BatchGetSettingsResponse> = {
  encode(message: BatchGetSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.settings) {
      Settings.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchGetSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.settings.push(Settings.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetSettingsResponse {
    return {
      settings: globalThis.Array.isArray(object?.settings) ? object.settings.map((e: any) => Settings.fromJSON(e)) : [],
    };
  },

  toJSON(message: BatchGetSettingsResponse): unknown {
    const obj: any = {};
    if (message.settings?.length) {
      obj.settings = message.settings.map((e) => Settings.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchGetSettingsResponse>): BatchGetSettingsResponse {
    return BatchGetSettingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchGetSettingsResponse>): BatchGetSettingsResponse {
    const message = createBaseBatchGetSettingsResponse();
    message.settings = object.settings?.map((e) => Settings.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCalculateEffectiveSettingsRequest(): CalculateEffectiveSettingsRequest {
  return { name: "" };
}

export const CalculateEffectiveSettingsRequest: MessageFns<CalculateEffectiveSettingsRequest> = {
  encode(message: CalculateEffectiveSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateEffectiveSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateEffectiveSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateEffectiveSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CalculateEffectiveSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CalculateEffectiveSettingsRequest>): CalculateEffectiveSettingsRequest {
    return CalculateEffectiveSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CalculateEffectiveSettingsRequest>): CalculateEffectiveSettingsRequest {
    const message = createBaseCalculateEffectiveSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBatchCalculateEffectiveSettingsRequest(): BatchCalculateEffectiveSettingsRequest {
  return { parent: "", requests: [] };
}

export const BatchCalculateEffectiveSettingsRequest: MessageFns<BatchCalculateEffectiveSettingsRequest> = {
  encode(message: BatchCalculateEffectiveSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      CalculateEffectiveSettingsRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCalculateEffectiveSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCalculateEffectiveSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests.push(CalculateEffectiveSettingsRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCalculateEffectiveSettingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => CalculateEffectiveSettingsRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCalculateEffectiveSettingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => CalculateEffectiveSettingsRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCalculateEffectiveSettingsRequest>): BatchCalculateEffectiveSettingsRequest {
    return BatchCalculateEffectiveSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCalculateEffectiveSettingsRequest>): BatchCalculateEffectiveSettingsRequest {
    const message = createBaseBatchCalculateEffectiveSettingsRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => CalculateEffectiveSettingsRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchCalculateEffectiveSettingsResponse(): BatchCalculateEffectiveSettingsResponse {
  return { settings: [] };
}

export const BatchCalculateEffectiveSettingsResponse: MessageFns<BatchCalculateEffectiveSettingsResponse> = {
  encode(message: BatchCalculateEffectiveSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.settings) {
      Settings.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCalculateEffectiveSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCalculateEffectiveSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.settings.push(Settings.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCalculateEffectiveSettingsResponse {
    return {
      settings: globalThis.Array.isArray(object?.settings) ? object.settings.map((e: any) => Settings.fromJSON(e)) : [],
    };
  },

  toJSON(message: BatchCalculateEffectiveSettingsResponse): unknown {
    const obj: any = {};
    if (message.settings?.length) {
      obj.settings = message.settings.map((e) => Settings.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCalculateEffectiveSettingsResponse>): BatchCalculateEffectiveSettingsResponse {
    return BatchCalculateEffectiveSettingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCalculateEffectiveSettingsResponse>): BatchCalculateEffectiveSettingsResponse {
    const message = createBaseBatchCalculateEffectiveSettingsResponse();
    message.settings = object.settings?.map((e) => Settings.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetComponentSettingsRequest(): GetComponentSettingsRequest {
  return { name: "" };
}

export const GetComponentSettingsRequest: MessageFns<GetComponentSettingsRequest> = {
  encode(message: GetComponentSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetComponentSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetComponentSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetComponentSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetComponentSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetComponentSettingsRequest>): GetComponentSettingsRequest {
    return GetComponentSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetComponentSettingsRequest>): GetComponentSettingsRequest {
    const message = createBaseGetComponentSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateComponentSettingsRequest(): UpdateComponentSettingsRequest {
  return { componentSettings: undefined, updateMask: undefined };
}

export const UpdateComponentSettingsRequest: MessageFns<UpdateComponentSettingsRequest> = {
  encode(message: UpdateComponentSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.componentSettings !== undefined) {
      ComponentSettings.encode(message.componentSettings, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateComponentSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateComponentSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.componentSettings = ComponentSettings.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateComponentSettingsRequest {
    return {
      componentSettings: isSet(object.componentSettings)
        ? ComponentSettings.fromJSON(object.componentSettings)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateComponentSettingsRequest): unknown {
    const obj: any = {};
    if (message.componentSettings !== undefined) {
      obj.componentSettings = ComponentSettings.toJSON(message.componentSettings);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateComponentSettingsRequest>): UpdateComponentSettingsRequest {
    return UpdateComponentSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateComponentSettingsRequest>): UpdateComponentSettingsRequest {
    const message = createBaseUpdateComponentSettingsRequest();
    message.componentSettings = (object.componentSettings !== undefined && object.componentSettings !== null)
      ? ComponentSettings.fromPartial(object.componentSettings)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseResetComponentSettingsRequest(): ResetComponentSettingsRequest {
  return { name: "", etag: "" };
}

export const ResetComponentSettingsRequest: MessageFns<ResetComponentSettingsRequest> = {
  encode(message: ResetComponentSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetComponentSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetComponentSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetComponentSettingsRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: ResetComponentSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetComponentSettingsRequest>): ResetComponentSettingsRequest {
    return ResetComponentSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetComponentSettingsRequest>): ResetComponentSettingsRequest {
    const message = createBaseResetComponentSettingsRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseCalculateEffectiveComponentSettingsRequest(): CalculateEffectiveComponentSettingsRequest {
  return { name: "" };
}

export const CalculateEffectiveComponentSettingsRequest: MessageFns<CalculateEffectiveComponentSettingsRequest> = {
  encode(message: CalculateEffectiveComponentSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CalculateEffectiveComponentSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalculateEffectiveComponentSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CalculateEffectiveComponentSettingsRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CalculateEffectiveComponentSettingsRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CalculateEffectiveComponentSettingsRequest>): CalculateEffectiveComponentSettingsRequest {
    return CalculateEffectiveComponentSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CalculateEffectiveComponentSettingsRequest>,
  ): CalculateEffectiveComponentSettingsRequest {
    const message = createBaseCalculateEffectiveComponentSettingsRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDetectorsRequest(): ListDetectorsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const ListDetectorsRequest: MessageFns<ListDetectorsRequest> = {
  encode(message: ListDetectorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDetectorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDetectorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDetectorsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDetectorsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDetectorsRequest>): ListDetectorsRequest {
    return ListDetectorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDetectorsRequest>): ListDetectorsRequest {
    const message = createBaseListDetectorsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDetectorsResponse(): ListDetectorsResponse {
  return { detectors: [], nextPageToken: "" };
}

export const ListDetectorsResponse: MessageFns<ListDetectorsResponse> = {
  encode(message: ListDetectorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.detectors) {
      Detector.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDetectorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDetectorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.detectors.push(Detector.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDetectorsResponse {
    return {
      detectors: globalThis.Array.isArray(object?.detectors)
        ? object.detectors.map((e: any) => Detector.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDetectorsResponse): unknown {
    const obj: any = {};
    if (message.detectors?.length) {
      obj.detectors = message.detectors.map((e) => Detector.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDetectorsResponse>): ListDetectorsResponse {
    return ListDetectorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDetectorsResponse>): ListDetectorsResponse {
    const message = createBaseListDetectorsResponse();
    message.detectors = object.detectors?.map((e) => Detector.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListComponentsRequest(): ListComponentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListComponentsRequest: MessageFns<ListComponentsRequest> = {
  encode(message: ListComponentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListComponentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListComponentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListComponentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListComponentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListComponentsRequest>): ListComponentsRequest {
    return ListComponentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListComponentsRequest>): ListComponentsRequest {
    const message = createBaseListComponentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListComponentsResponse(): ListComponentsResponse {
  return { components: [], nextPageToken: "" };
}

export const ListComponentsResponse: MessageFns<ListComponentsResponse> = {
  encode(message: ListComponentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.components) {
      writer.uint32(10).string(v!);
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListComponentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListComponentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.components.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListComponentsResponse {
    return {
      components: globalThis.Array.isArray(object?.components)
        ? object.components.map((e: any) => globalThis.String(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListComponentsResponse): unknown {
    const obj: any = {};
    if (message.components?.length) {
      obj.components = message.components;
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListComponentsResponse>): ListComponentsResponse {
    return ListComponentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListComponentsResponse>): ListComponentsResponse {
    const message = createBaseListComponentsResponse();
    message.components = object.components?.map((e) => e) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * ## API Overview
 *
 * The SecurityCenterSettingsService is a sub-api of
 * `securitycenter.googleapis.com`. The service provides methods to manage
 * Security Center Settings, and Component Settings for GCP organizations,
 * folders, projects, and clusters.
 */
export type SecurityCenterSettingsServiceDefinition = typeof SecurityCenterSettingsServiceDefinition;
export const SecurityCenterSettingsServiceDefinition = {
  name: "SecurityCenterSettingsService",
  fullName: "google.cloud.securitycenter.settings.v1beta1.SecurityCenterSettingsService",
  methods: {
    /**
     * Retrieves the organizations service account, if it exists, otherwise it
     * creates the organization service account. This API is idempotent and
     * will only create a service account once. On subsequent calls it will
     * return the previously created service account.  SHA, SCC and CTD Infra
     * Automation will use this SA.  This SA will not have any permissions when
     * created.  The UI will provision this via IAM or the user will using
     * their own internal process. This API only creates SAs on the organization.
     * Folders are not supported and projects will use per-project SAs associated
     * with APIs enabled on a project. This API will be called by the UX
     * onboarding workflow.
     */
    getServiceAccount: {
      name: "GetServiceAccount",
      requestType: GetServiceAccountRequest,
      requestStream: false,
      responseType: ServiceAccount,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              57,
              18,
              55,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the Settings. */
    getSettings: {
      name: "GetSettings",
      requestType: GetSettingsRequest,
      requestStream: false,
      responseType: Settings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              225,
              2,
              90,
              45,
              18,
              43,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              46,
              18,
              44,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              69,
              18,
              67,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              67,
              18,
              65,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              65,
              18,
              63,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              18,
              49,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the Settings. */
    updateSettings: {
      name: "UpdateSettings",
      requestType: UpdateSettingsRequest,
      requestStream: false,
      responseType: Settings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              211,
              3,
              58,
              8,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              64,
              58,
              8,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              52,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              65,
              58,
              8,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              53,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              88,
              58,
              8,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              76,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              86,
              58,
              8,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              74,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              84,
              58,
              8,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              72,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              50,
              58,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Reset the organization, folder or project's settings and return
     * the settings of just that resource to the default.
     *
     * Settings are present at the organization, folder, project, and cluster
     * levels. Using Reset on a sub-organization level will remove that resource's
     * override and result in the parent's settings being used (eg: if Reset on a
     * cluster, project settings will be used).
     *
     * Using Reset on organization will remove the override that was set and
     * result in default settings being used.
     */
    resetSettings: {
      name: "ResetSettings",
      requestType: ResetSettingsRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              151,
              3,
              58,
              1,
              42,
              90,
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              90,
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              90,
              78,
              58,
              1,
              42,
              34,
              73,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              90,
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              90,
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              34,
              55,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /** Gets a list of settings. */
    batchGetSettings: {
      name: "BatchGetSettings",
      requestType: BatchGetSettingsRequest,
      requestStream: false,
      responseType: BatchGetSettingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              71,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * CalculateEffectiveSettings looks up all of the Security Center
     * Settings resources in the GCP resource hierarchy, and calculates the
     * effective settings on that resource by applying the following rules:
     *  * Settings provided closer to the target resource take precedence over
     *    those further away (e.g. folder will override organization level
     *    settings).
     *  * Product defaults can be overridden at org, folder, project, and cluster
     *  levels.
     *  * Detectors will be filtered out if they belong to a billing tier the
     *  customer
     *    has not configured.
     */
    calculateEffectiveSettings: {
      name: "CalculateEffectiveSettings",
      requestType: CalculateEffectiveSettingsRequest,
      requestStream: false,
      responseType: Settings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              211,
              3,
              90,
              64,
              18,
              62,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              90,
              65,
              18,
              63,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              90,
              88,
              18,
              86,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              90,
              86,
              18,
              84,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              90,
              84,
              18,
              82,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              18,
              68,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets a list of effective settings. */
    batchCalculateEffectiveSettings: {
      name: "BatchCalculateEffectiveSettings",
      requestType: BatchCalculateEffectiveSettingsRequest,
      requestStream: false,
      responseType: BatchCalculateEffectiveSettingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              80,
              58,
              1,
              42,
              34,
              75,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets the Component Settings. */
    getComponentSettings: {
      name: "GetComponentSettings",
      requestType: GetComponentSettingsRequest,
      requestStream: false,
      responseType: ComponentSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              175,
              3,
              90,
              58,
              18,
              56,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              59,
              18,
              57,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              82,
              18,
              80,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              80,
              18,
              78,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              78,
              18,
              76,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              18,
              62,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates the Component Settings. */
    updateComponentSettings: {
      name: "UpdateComponentSettings",
      requestType: UpdateComponentSettingsRequest,
      requestStream: false,
      responseType: ComponentSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              30,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              153,
              5,
              58,
              18,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              90,
              97,
              58,
              18,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              75,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              98,
              58,
              18,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              76,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              121,
              58,
              18,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              99,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              119,
              58,
              18,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              97,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              90,
              117,
              58,
              18,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              50,
              95,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              50,
              81,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              95,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Reset the organization, folder or project's component settings and return
     * the settings to the default. Settings are present at the
     * organization, folder and project levels. Using Reset for a folder or
     * project will remove the override that was set and result in the
     * organization-level settings being used.
     */
    resetComponentSettings: {
      name: "ResetComponentSettings",
      requestType: ResetComponentSettingsRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              229,
              3,
              58,
              1,
              42,
              90,
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              90,
              68,
              58,
              1,
              42,
              34,
              63,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              90,
              91,
              58,
              1,
              42,
              34,
              86,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              90,
              89,
              58,
              1,
              42,
              34,
              84,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              90,
              87,
              58,
              1,
              42,
              34,
              82,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
              34,
              68,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              114,
              101,
              115,
              101,
              116,
            ]),
          ],
        },
      },
    },
    /** Gets the Effective Component Settings. */
    calculateEffectiveComponentSettings: {
      name: "CalculateEffectiveComponentSettings",
      requestType: CalculateEffectiveComponentSettingsRequest,
      requestStream: false,
      responseType: ComponentSettings,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              161,
              4,
              90,
              77,
              18,
              75,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              90,
              78,
              18,
              76,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              90,
              101,
              18,
              99,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              90,
              99,
              18,
              97,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              114,
              101,
              103,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              90,
              97,
              18,
              95,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              122,
              111,
              110,
              101,
              115,
              47,
              42,
              47,
              99,
              108,
              117,
              115,
              116,
              101,
              114,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
              18,
              81,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              125,
              58,
              99,
              97,
              108,
              99,
              117,
              108,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Retrieves an unordered list of available detectors. */
    listDetectors: {
      name: "ListDetectors",
      requestType: ListDetectorsRequest,
      requestStream: false,
      responseType: ListDetectorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              101,
              116,
              101,
              99,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves an unordered list of available SCC components. */
    listComponents: {
      name: "ListComponents",
      requestType: ListComponentsRequest,
      requestStream: false,
      responseType: ListComponentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SecurityCenterSettingsServiceImplementation<CallContextExt = {}> {
  /**
   * Retrieves the organizations service account, if it exists, otherwise it
   * creates the organization service account. This API is idempotent and
   * will only create a service account once. On subsequent calls it will
   * return the previously created service account.  SHA, SCC and CTD Infra
   * Automation will use this SA.  This SA will not have any permissions when
   * created.  The UI will provision this via IAM or the user will using
   * their own internal process. This API only creates SAs on the organization.
   * Folders are not supported and projects will use per-project SAs associated
   * with APIs enabled on a project. This API will be called by the UX
   * onboarding workflow.
   */
  getServiceAccount(
    request: GetServiceAccountRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ServiceAccount>>;
  /** Gets the Settings. */
  getSettings(request: GetSettingsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Settings>>;
  /** Updates the Settings. */
  updateSettings(request: UpdateSettingsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Settings>>;
  /**
   * Reset the organization, folder or project's settings and return
   * the settings of just that resource to the default.
   *
   * Settings are present at the organization, folder, project, and cluster
   * levels. Using Reset on a sub-organization level will remove that resource's
   * override and result in the parent's settings being used (eg: if Reset on a
   * cluster, project settings will be used).
   *
   * Using Reset on organization will remove the override that was set and
   * result in default settings being used.
   */
  resetSettings(request: ResetSettingsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Gets a list of settings. */
  batchGetSettings(
    request: BatchGetSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchGetSettingsResponse>>;
  /**
   * CalculateEffectiveSettings looks up all of the Security Center
   * Settings resources in the GCP resource hierarchy, and calculates the
   * effective settings on that resource by applying the following rules:
   *  * Settings provided closer to the target resource take precedence over
   *    those further away (e.g. folder will override organization level
   *    settings).
   *  * Product defaults can be overridden at org, folder, project, and cluster
   *  levels.
   *  * Detectors will be filtered out if they belong to a billing tier the
   *  customer
   *    has not configured.
   */
  calculateEffectiveSettings(
    request: CalculateEffectiveSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Settings>>;
  /** Gets a list of effective settings. */
  batchCalculateEffectiveSettings(
    request: BatchCalculateEffectiveSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchCalculateEffectiveSettingsResponse>>;
  /** Gets the Component Settings. */
  getComponentSettings(
    request: GetComponentSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ComponentSettings>>;
  /** Updates the Component Settings. */
  updateComponentSettings(
    request: UpdateComponentSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ComponentSettings>>;
  /**
   * Reset the organization, folder or project's component settings and return
   * the settings to the default. Settings are present at the
   * organization, folder and project levels. Using Reset for a folder or
   * project will remove the override that was set and result in the
   * organization-level settings being used.
   */
  resetComponentSettings(
    request: ResetComponentSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Gets the Effective Component Settings. */
  calculateEffectiveComponentSettings(
    request: CalculateEffectiveComponentSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ComponentSettings>>;
  /** Retrieves an unordered list of available detectors. */
  listDetectors(
    request: ListDetectorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDetectorsResponse>>;
  /** Retrieves an unordered list of available SCC components. */
  listComponents(
    request: ListComponentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListComponentsResponse>>;
}

export interface SecurityCenterSettingsServiceClient<CallOptionsExt = {}> {
  /**
   * Retrieves the organizations service account, if it exists, otherwise it
   * creates the organization service account. This API is idempotent and
   * will only create a service account once. On subsequent calls it will
   * return the previously created service account.  SHA, SCC and CTD Infra
   * Automation will use this SA.  This SA will not have any permissions when
   * created.  The UI will provision this via IAM or the user will using
   * their own internal process. This API only creates SAs on the organization.
   * Folders are not supported and projects will use per-project SAs associated
   * with APIs enabled on a project. This API will be called by the UX
   * onboarding workflow.
   */
  getServiceAccount(
    request: DeepPartial<GetServiceAccountRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ServiceAccount>;
  /** Gets the Settings. */
  getSettings(request: DeepPartial<GetSettingsRequest>, options?: CallOptions & CallOptionsExt): Promise<Settings>;
  /** Updates the Settings. */
  updateSettings(
    request: DeepPartial<UpdateSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Settings>;
  /**
   * Reset the organization, folder or project's settings and return
   * the settings of just that resource to the default.
   *
   * Settings are present at the organization, folder, project, and cluster
   * levels. Using Reset on a sub-organization level will remove that resource's
   * override and result in the parent's settings being used (eg: if Reset on a
   * cluster, project settings will be used).
   *
   * Using Reset on organization will remove the override that was set and
   * result in default settings being used.
   */
  resetSettings(request: DeepPartial<ResetSettingsRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Gets a list of settings. */
  batchGetSettings(
    request: DeepPartial<BatchGetSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchGetSettingsResponse>;
  /**
   * CalculateEffectiveSettings looks up all of the Security Center
   * Settings resources in the GCP resource hierarchy, and calculates the
   * effective settings on that resource by applying the following rules:
   *  * Settings provided closer to the target resource take precedence over
   *    those further away (e.g. folder will override organization level
   *    settings).
   *  * Product defaults can be overridden at org, folder, project, and cluster
   *  levels.
   *  * Detectors will be filtered out if they belong to a billing tier the
   *  customer
   *    has not configured.
   */
  calculateEffectiveSettings(
    request: DeepPartial<CalculateEffectiveSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Settings>;
  /** Gets a list of effective settings. */
  batchCalculateEffectiveSettings(
    request: DeepPartial<BatchCalculateEffectiveSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchCalculateEffectiveSettingsResponse>;
  /** Gets the Component Settings. */
  getComponentSettings(
    request: DeepPartial<GetComponentSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ComponentSettings>;
  /** Updates the Component Settings. */
  updateComponentSettings(
    request: DeepPartial<UpdateComponentSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ComponentSettings>;
  /**
   * Reset the organization, folder or project's component settings and return
   * the settings to the default. Settings are present at the
   * organization, folder and project levels. Using Reset for a folder or
   * project will remove the override that was set and result in the
   * organization-level settings being used.
   */
  resetComponentSettings(
    request: DeepPartial<ResetComponentSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Gets the Effective Component Settings. */
  calculateEffectiveComponentSettings(
    request: DeepPartial<CalculateEffectiveComponentSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ComponentSettings>;
  /** Retrieves an unordered list of available detectors. */
  listDetectors(
    request: DeepPartial<ListDetectorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDetectorsResponse>;
  /** Retrieves an unordered list of available SCC components. */
  listComponents(
    request: DeepPartial<ListComponentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListComponentsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
