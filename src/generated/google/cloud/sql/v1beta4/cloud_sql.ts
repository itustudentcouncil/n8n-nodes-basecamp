// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/sql/v1beta4/cloud_sql.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Duration } from "../../../protobuf/duration.js";
import { Empty } from "../../../protobuf/empty.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  BackupRun,
  BackupRunsListResponse,
  Database,
  DatabaseInstance,
  DatabasesListResponse,
  FlagsListResponse,
  InstancesAcquireSsrsLeaseRequest,
  InstancesCloneRequest,
  InstancesDemoteMasterRequest,
  InstancesDemoteRequest,
  InstancesExportRequest,
  InstancesFailoverRequest,
  InstancesImportRequest,
  InstancesListResponse,
  InstancesListServerCasResponse,
  InstancesRestoreBackupRequest,
  InstancesRotateServerCaRequest,
  InstancesTruncateLogRequest,
  MySqlSyncConfig,
  Operation,
  OperationsListResponse,
  PerformDiskShrinkContext,
  SqlInstancesGetDiskShrinkConfigResponse,
  SqlInstancesRescheduleMaintenanceRequestBody,
  SqlInstancesVerifyExternalSyncSettingsResponse,
  SslCert,
  SslCertsCreateEphemeralRequest,
  SslCertsInsertRequest,
  SslCertsInsertResponse,
  SslCertsListResponse,
} from "./cloud_sql_resources.js";

export const protobufPackage = "google.cloud.sql.v1beta4";

/** External Sync parallel level. */
export enum ExternalSyncParallelLevel {
  /** EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED - Unknown sync parallel level. Will be defaulted to OPTIMAL. */
  EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED = 0,
  /** MIN - Minimal parallel level. */
  MIN = 1,
  /** OPTIMAL - Optimal parallel level. */
  OPTIMAL = 2,
  /** MAX - Maximum parallel level. */
  MAX = 3,
  UNRECOGNIZED = -1,
}

export function externalSyncParallelLevelFromJSON(object: any): ExternalSyncParallelLevel {
  switch (object) {
    case 0:
    case "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED":
      return ExternalSyncParallelLevel.EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED;
    case 1:
    case "MIN":
      return ExternalSyncParallelLevel.MIN;
    case 2:
    case "OPTIMAL":
      return ExternalSyncParallelLevel.OPTIMAL;
    case 3:
    case "MAX":
      return ExternalSyncParallelLevel.MAX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExternalSyncParallelLevel.UNRECOGNIZED;
  }
}

export function externalSyncParallelLevelToJSON(object: ExternalSyncParallelLevel): string {
  switch (object) {
    case ExternalSyncParallelLevel.EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED:
      return "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED";
    case ExternalSyncParallelLevel.MIN:
      return "MIN";
    case ExternalSyncParallelLevel.OPTIMAL:
      return "OPTIMAL";
    case ExternalSyncParallelLevel.MAX:
      return "MAX";
    case ExternalSyncParallelLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SqlBackupRunsDeleteRequest {
  /**
   * The ID of the backup run to delete. To find a backup run ID, use the
   * [list](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/backupRuns/list)
   * method.
   */
  id: Long;
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlBackupRunsGetRequest {
  /** The ID of this backup run. */
  id: Long;
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlBackupRunsInsertRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: BackupRun | undefined;
}

export interface SqlBackupRunsListRequest {
  /**
   * Cloud SQL instance ID, or "-" for all instances. This does not include
   * the project ID.
   */
  instance: string;
  /** Maximum number of backup runs per response. */
  maxResults: number;
  /**
   * A previously-returned page token representing part of the larger set of
   * results to view.
   */
  pageToken: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlDatabasesDeleteRequest {
  /** Name of the database to be deleted in the instance. */
  database: string;
  /** Database instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlDatabasesGetRequest {
  /** Name of the database in the instance. */
  database: string;
  /** Database instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlDatabasesInsertRequest {
  /** Database instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: Database | undefined;
}

export interface SqlDatabasesListRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlDatabasesUpdateRequest {
  /** Name of the database to be updated in the instance. */
  database: string;
  /** Database instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: Database | undefined;
}

export interface SqlFlagsListRequest {
  /**
   * Database type and version you want to retrieve flags for. By default, this
   * method returns flags for all database types and versions.
   */
  databaseVersion: string;
}

export interface SqlInstancesAddServerCaRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlInstancesCloneRequest {
  /**
   * The ID of the Cloud SQL instance to be cloned (source). This does not
   * include the project ID.
   */
  instance: string;
  /** Project ID of the source as well as the clone Cloud SQL instance. */
  project: string;
  body: InstancesCloneRequest | undefined;
}

export interface SqlInstancesDeleteRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance to be deleted. */
  project: string;
}

export interface SqlInstancesDemoteMasterRequest {
  /** Cloud SQL instance name. */
  instance: string;
  /** ID of the project that contains the instance. */
  project: string;
  body: InstancesDemoteMasterRequest | undefined;
}

/** Instance demote request. */
export interface SqlInstancesDemoteRequest {
  /** Required. The name of the Cloud SQL instance. */
  instance: string;
  /** Required. The project ID of the project that contains the instance. */
  project: string;
  /** The request body. */
  body: InstancesDemoteRequest | undefined;
}

export interface SqlInstancesExportRequest {
  /** The Cloud SQL instance ID. This doesn't include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance to be exported. */
  project: string;
  body: InstancesExportRequest | undefined;
}

export interface SqlInstancesFailoverRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** ID of the project that contains the read replica. */
  project: string;
  body: InstancesFailoverRequest | undefined;
}

export interface SqlInstancesGetRequest {
  /** Database instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlInstancesImportRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: InstancesImportRequest | undefined;
}

export interface SqlInstancesInsertRequest {
  /**
   * Project ID of the project to which the newly created Cloud SQL instances
   * should belong.
   */
  project: string;
  body: DatabaseInstance | undefined;
}

export interface SqlInstancesListRequest {
  /**
   * A filter expression that filters resources listed in the response.
   * The expression is in the form of field:value. For example,
   * 'instanceType:CLOUD_SQL_INSTANCE'. Fields can be nested as needed as per
   * their JSON representation, such as 'settings.userLabels.auto_start:true'.
   *
   * Multiple filter queries are space-separated. For example.
   * 'state:RUNNABLE instanceType:CLOUD_SQL_INSTANCE'. By default, each
   * expression is an AND expression. However, you can include AND and OR
   * expressions explicitly.
   */
  filter: string;
  /**
   * The maximum number of instances to return. The service may return fewer
   * than this value.
   * If unspecified, at most 500 instances are returned.
   * The maximum value is 1000; values above 1000 are coerced to 1000.
   */
  maxResults: number;
  /**
   * A previously-returned page token representing part of the larger set of
   * results to view.
   */
  pageToken: string;
  /** Project ID of the project for which to list Cloud SQL instances. */
  project: string;
}

export interface SqlInstancesListServerCasRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlInstancesPatchRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: DatabaseInstance | undefined;
}

export interface SqlInstancesPromoteReplicaRequest {
  /** Cloud SQL read replica instance name. */
  instance: string;
  /** ID of the project that contains the read replica. */
  project: string;
  /**
   * Set to true to invoke a replica failover to the designated DR replica.
   * As part of replica failover, the promote operation attempts
   * to add the original primary instance as a replica of the promoted
   * DR replica when the original primary instance comes back online.
   * If set to false or not specified, then the original primary
   * instance becomes an independent Cloud SQL primary instance.
   * Only applicable to MySQL.
   */
  failover: boolean;
}

/** Instance switchover request. */
export interface SqlInstancesSwitchoverRequest {
  /** Cloud SQL read replica instance name. */
  instance: string;
  /** ID of the project that contains the replica. */
  project: string;
  /**
   * Optional. (MySQL only) Cloud SQL instance operations timeout, which is a
   * sum of all database operations. Default value is 10 minutes and can be
   * modified to a maximum value of 24 hours.
   */
  dbTimeout: Duration | undefined;
}

export interface SqlInstancesResetSslConfigRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlInstancesRestartRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance to be restarted. */
  project: string;
}

export interface SqlInstancesRestoreBackupRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: InstancesRestoreBackupRequest | undefined;
}

export interface SqlInstancesRotateServerCaRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: InstancesRotateServerCaRequest | undefined;
}

export interface SqlInstancesStartReplicaRequest {
  /** Cloud SQL read replica instance name. */
  instance: string;
  /** ID of the project that contains the read replica. */
  project: string;
}

export interface SqlInstancesStopReplicaRequest {
  /** Cloud SQL read replica instance name. */
  instance: string;
  /** ID of the project that contains the read replica. */
  project: string;
}

export interface SqlInstancesTruncateLogRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the Cloud SQL project. */
  project: string;
  body: InstancesTruncateLogRequest | undefined;
}

export interface SqlInstancesUpdateRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: DatabaseInstance | undefined;
}

/** Instance reencrypt request. */
export interface SqlInstancesReencryptRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** ID of the project that contains the instance. */
  project: string;
  /** Reencrypt body that users request */
  body: InstancesReencryptRequest | undefined;
}

/** Database Instance reencrypt request. */
export interface InstancesReencryptRequest {
  /** Configuration specific to backup re-encryption */
  backupReencryptionConfig?: BackupReencryptionConfig | undefined;
}

/** Backup Reencryption Config */
export interface BackupReencryptionConfig {
  /** Backup re-encryption limit */
  backupLimit?:
    | number
    | undefined;
  /** Type of backups users want to re-encrypt. */
  backupType?: BackupReencryptionConfig_BackupType | undefined;
}

/** Backup type for re-encryption */
export enum BackupReencryptionConfig_BackupType {
  /** BACKUP_TYPE_UNSPECIFIED - Unknown backup type, will be defaulted to AUTOMATIC backup type */
  BACKUP_TYPE_UNSPECIFIED = 0,
  /** AUTOMATED - Reencrypt automatic backups */
  AUTOMATED = 1,
  /** ON_DEMAND - Reencrypt on-demand backups */
  ON_DEMAND = 2,
  UNRECOGNIZED = -1,
}

export function backupReencryptionConfig_BackupTypeFromJSON(object: any): BackupReencryptionConfig_BackupType {
  switch (object) {
    case 0:
    case "BACKUP_TYPE_UNSPECIFIED":
      return BackupReencryptionConfig_BackupType.BACKUP_TYPE_UNSPECIFIED;
    case 1:
    case "AUTOMATED":
      return BackupReencryptionConfig_BackupType.AUTOMATED;
    case 2:
    case "ON_DEMAND":
      return BackupReencryptionConfig_BackupType.ON_DEMAND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BackupReencryptionConfig_BackupType.UNRECOGNIZED;
  }
}

export function backupReencryptionConfig_BackupTypeToJSON(object: BackupReencryptionConfig_BackupType): string {
  switch (object) {
    case BackupReencryptionConfig_BackupType.BACKUP_TYPE_UNSPECIFIED:
      return "BACKUP_TYPE_UNSPECIFIED";
    case BackupReencryptionConfig_BackupType.AUTOMATED:
      return "AUTOMATED";
    case BackupReencryptionConfig_BackupType.ON_DEMAND:
      return "ON_DEMAND";
    case BackupReencryptionConfig_BackupType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SqlInstancesRescheduleMaintenanceRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** ID of the project that contains the instance. */
  project: string;
  body: SqlInstancesRescheduleMaintenanceRequestBody | undefined;
}

/** Instance perform disk shrink request. */
export interface SqlInstancesPerformDiskShrinkRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  /** Perform disk shrink context. */
  body: PerformDiskShrinkContext | undefined;
}

export interface SqlInstancesVerifyExternalSyncSettingsRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  /** Flag to enable verifying connection only */
  verifyConnectionOnly: boolean;
  /** External sync mode */
  syncMode: SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode;
  /** Optional. Flag to verify settings required by replication setup only */
  verifyReplicationOnly: boolean;
  /** Optional. MySQL-specific settings for start external sync. */
  mysqlSyncConfig?:
    | MySqlSyncConfig
    | undefined;
  /**
   * Optional. MigrationType configures the migration to use physical files or
   * logical dump files. If not set, then the logical dump file configuration is
   * used. Valid values are `LOGICAL` or `PHYSICAL`. Only applicable to MySQL.
   */
  migrationType: SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType;
  /**
   * Optional. Parallel level for initial data sync. Only applicable for
   * PostgreSQL.
   */
  syncParallelLevel: ExternalSyncParallelLevel;
}

export enum SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode {
  /** EXTERNAL_SYNC_MODE_UNSPECIFIED - Unknown external sync mode, will be defaulted to ONLINE mode */
  EXTERNAL_SYNC_MODE_UNSPECIFIED = 0,
  /**
   * ONLINE - Online external sync will set up replication after initial data external
   * sync
   */
  ONLINE = 1,
  /**
   * OFFLINE - Offline external sync only dumps and loads a one-time snapshot of
   * the primary instance's data
   */
  OFFLINE = 2,
  UNRECOGNIZED = -1,
}

export function sqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncModeFromJSON(
  object: any,
): SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode {
  switch (object) {
    case 0:
    case "EXTERNAL_SYNC_MODE_UNSPECIFIED":
      return SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.EXTERNAL_SYNC_MODE_UNSPECIFIED;
    case 1:
    case "ONLINE":
      return SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.ONLINE;
    case 2:
    case "OFFLINE":
      return SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.OFFLINE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.UNRECOGNIZED;
  }
}

export function sqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncModeToJSON(
  object: SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode,
): string {
  switch (object) {
    case SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.EXTERNAL_SYNC_MODE_UNSPECIFIED:
      return "EXTERNAL_SYNC_MODE_UNSPECIFIED";
    case SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.ONLINE:
      return "ONLINE";
    case SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.OFFLINE:
      return "OFFLINE";
    case SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * MigrationType determines whether the migration is a physical file-based
 * migration or a logical dump file-based migration.
 */
export enum SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType {
  /** MIGRATION_TYPE_UNSPECIFIED - Default value is a logical dump file-based migration */
  MIGRATION_TYPE_UNSPECIFIED = 0,
  /** LOGICAL - Logical dump file-based migration */
  LOGICAL = 1,
  /** PHYSICAL - Physical file-based migration */
  PHYSICAL = 2,
  UNRECOGNIZED = -1,
}

export function sqlInstancesVerifyExternalSyncSettingsRequest_MigrationTypeFromJSON(
  object: any,
): SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType {
  switch (object) {
    case 0:
    case "MIGRATION_TYPE_UNSPECIFIED":
      return SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType.MIGRATION_TYPE_UNSPECIFIED;
    case 1:
    case "LOGICAL":
      return SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType.LOGICAL;
    case 2:
    case "PHYSICAL":
      return SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType.PHYSICAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType.UNRECOGNIZED;
  }
}

export function sqlInstancesVerifyExternalSyncSettingsRequest_MigrationTypeToJSON(
  object: SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType,
): string {
  switch (object) {
    case SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType.MIGRATION_TYPE_UNSPECIFIED:
      return "MIGRATION_TYPE_UNSPECIFIED";
    case SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType.LOGICAL:
      return "LOGICAL";
    case SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType.PHYSICAL:
      return "PHYSICAL";
    case SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SqlInstancesStartExternalSyncRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** ID of the project that contains the instance. */
  project: string;
  /** External sync mode. */
  syncMode: SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode;
  /** Whether to skip the verification step (VESS). */
  skipVerification: boolean;
  /** MySQL-specific settings for start external sync. */
  mysqlSyncConfig?:
    | MySqlSyncConfig
    | undefined;
  /**
   * Optional. Parallel level for initial data sync. Currently only applicable
   * for MySQL.
   */
  syncParallelLevel: ExternalSyncParallelLevel;
  /**
   * Optional. MigrationType configures the migration to use physical files or
   * logical dump files. If not set, then the logical dump file configuration is
   * used. Valid values are `LOGICAL` or `PHYSICAL`. Only applicable to MySQL.
   */
  migrationType: SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType;
}

/** Instance reset replica size request. */
export interface SqlInstancesResetReplicaSizeRequest {
  /** Cloud SQL read replica instance name. */
  instance: string;
  /** ID of the project that contains the read replica. */
  project: string;
}

export interface SqlOperationsGetRequest {
  /** Instance operation ID. */
  operation: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlOperationsListRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Maximum number of operations per response. */
  maxResults: number;
  /**
   * A previously-returned page token representing part of the larger set of
   * results to view.
   */
  pageToken: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

/** The request payload to cancel an operation. */
export interface SqlOperationsCancelRequest {
  /** Instance operation ID. */
  operation: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

export interface SqlInstancesCreateEphemeralCertRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the Cloud SQL project. */
  project: string;
  body: SslCertsCreateEphemeralRequest | undefined;
}

export interface SqlSslCertsDeleteRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  /** Sha1 FingerPrint. */
  sha1Fingerprint: string;
}

export interface SqlSslCertsGetRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  /** Sha1 FingerPrint. */
  sha1Fingerprint: string;
}

export interface SqlSslCertsInsertRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
  body: SslCertsInsertRequest | undefined;
}

export interface SqlSslCertsListRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

/** Instance get disk shrink config request. */
export interface SqlInstancesGetDiskShrinkConfigRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

/** Instance get latest recovery time request. */
export interface SqlInstancesGetLatestRecoveryTimeRequest {
  /** Cloud SQL instance ID. This does not include the project ID. */
  instance: string;
  /** Project ID of the project that contains the instance. */
  project: string;
}

/** Instance get latest recovery time response. */
export interface SqlInstancesGetLatestRecoveryTimeResponse {
  /** This is always `sql#getLatestRecoveryTime`. */
  kind: string;
  /** Timestamp, identifies the latest recovery time of the source instance. */
  latestRecoveryTime: Date | undefined;
}

/** Request to release a lease for SSRS. */
export interface SqlInstancesReleaseSsrsLeaseRequest {
  /**
   * Required. The Cloud SQL instance ID. This doesn't include the project ID.
   * It's composed of lowercase letters, numbers, and hyphens, and it must start
   * with a letter. The total length must be 98 characters or less (Example:
   * instance-id).
   */
  instance: string;
  /**
   * Required. The ID of the project that contains the instance (Example:
   * project-id).
   */
  project: string;
}

/** The response for the release of the SSRS lease. */
export interface SqlInstancesReleaseSsrsLeaseResponse {
  /** The operation ID. */
  operationId: string;
}

/** Request to acquire a lease for SSRS. */
export interface SqlInstancesAcquireSsrsLeaseRequest {
  /**
   * Required. Cloud SQL instance ID. This doesn't include the project ID. It's
   * composed of lowercase letters, numbers, and hyphens, and it must start with
   * a letter. The total length must be 98 characters or less (Example:
   * instance-id).
   */
  instance: string;
  /**
   * Required. ID of the project that contains the instance (Example:
   * project-id).
   */
  project: string;
  /** The body for request to acquire an SSRS lease. */
  body: InstancesAcquireSsrsLeaseRequest | undefined;
}

/** Acquire SSRS lease response. */
export interface SqlInstancesAcquireSsrsLeaseResponse {
  /** The unique identifier for this operation. */
  operationId?: string | undefined;
}

function createBaseSqlBackupRunsDeleteRequest(): SqlBackupRunsDeleteRequest {
  return { id: Long.ZERO, instance: "", project: "" };
}

export const SqlBackupRunsDeleteRequest: MessageFns<SqlBackupRunsDeleteRequest> = {
  encode(message: SqlBackupRunsDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.id.toString());
    }
    if (message.instance !== "") {
      writer.uint32(18).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(26).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlBackupRunsDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlBackupRunsDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlBackupRunsDeleteRequest {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlBackupRunsDeleteRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlBackupRunsDeleteRequest>): SqlBackupRunsDeleteRequest {
    return SqlBackupRunsDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlBackupRunsDeleteRequest>): SqlBackupRunsDeleteRequest {
    const message = createBaseSqlBackupRunsDeleteRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlBackupRunsGetRequest(): SqlBackupRunsGetRequest {
  return { id: Long.ZERO, instance: "", project: "" };
}

export const SqlBackupRunsGetRequest: MessageFns<SqlBackupRunsGetRequest> = {
  encode(message: SqlBackupRunsGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.id.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.id.toString());
    }
    if (message.instance !== "") {
      writer.uint32(18).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(26).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlBackupRunsGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlBackupRunsGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlBackupRunsGetRequest {
    return {
      id: isSet(object.id) ? Long.fromValue(object.id) : Long.ZERO,
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlBackupRunsGetRequest): unknown {
    const obj: any = {};
    if (!message.id.equals(Long.ZERO)) {
      obj.id = (message.id || Long.ZERO).toString();
    }
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlBackupRunsGetRequest>): SqlBackupRunsGetRequest {
    return SqlBackupRunsGetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlBackupRunsGetRequest>): SqlBackupRunsGetRequest {
    const message = createBaseSqlBackupRunsGetRequest();
    message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.ZERO;
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlBackupRunsInsertRequest(): SqlBackupRunsInsertRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlBackupRunsInsertRequest: MessageFns<SqlBackupRunsInsertRequest> = {
  encode(message: SqlBackupRunsInsertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      BackupRun.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlBackupRunsInsertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlBackupRunsInsertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = BackupRun.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlBackupRunsInsertRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? BackupRun.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlBackupRunsInsertRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = BackupRun.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlBackupRunsInsertRequest>): SqlBackupRunsInsertRequest {
    return SqlBackupRunsInsertRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlBackupRunsInsertRequest>): SqlBackupRunsInsertRequest {
    const message = createBaseSqlBackupRunsInsertRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null) ? BackupRun.fromPartial(object.body) : undefined;
    return message;
  },
};

function createBaseSqlBackupRunsListRequest(): SqlBackupRunsListRequest {
  return { instance: "", maxResults: 0, pageToken: "", project: "" };
}

export const SqlBackupRunsListRequest: MessageFns<SqlBackupRunsListRequest> = {
  encode(message: SqlBackupRunsListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.maxResults !== 0) {
      writer.uint32(16).int32(message.maxResults);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.project !== "") {
      writer.uint32(34).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlBackupRunsListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlBackupRunsListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxResults = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlBackupRunsListRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlBackupRunsListRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.maxResults !== 0) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlBackupRunsListRequest>): SqlBackupRunsListRequest {
    return SqlBackupRunsListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlBackupRunsListRequest>): SqlBackupRunsListRequest {
    const message = createBaseSqlBackupRunsListRequest();
    message.instance = object.instance ?? "";
    message.maxResults = object.maxResults ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlDatabasesDeleteRequest(): SqlDatabasesDeleteRequest {
  return { database: "", instance: "", project: "" };
}

export const SqlDatabasesDeleteRequest: MessageFns<SqlDatabasesDeleteRequest> = {
  encode(message: SqlDatabasesDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.database !== "") {
      writer.uint32(10).string(message.database);
    }
    if (message.instance !== "") {
      writer.uint32(18).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(26).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlDatabasesDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlDatabasesDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.database = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlDatabasesDeleteRequest {
    return {
      database: isSet(object.database) ? globalThis.String(object.database) : "",
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlDatabasesDeleteRequest): unknown {
    const obj: any = {};
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlDatabasesDeleteRequest>): SqlDatabasesDeleteRequest {
    return SqlDatabasesDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlDatabasesDeleteRequest>): SqlDatabasesDeleteRequest {
    const message = createBaseSqlDatabasesDeleteRequest();
    message.database = object.database ?? "";
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlDatabasesGetRequest(): SqlDatabasesGetRequest {
  return { database: "", instance: "", project: "" };
}

export const SqlDatabasesGetRequest: MessageFns<SqlDatabasesGetRequest> = {
  encode(message: SqlDatabasesGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.database !== "") {
      writer.uint32(10).string(message.database);
    }
    if (message.instance !== "") {
      writer.uint32(18).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(26).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlDatabasesGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlDatabasesGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.database = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlDatabasesGetRequest {
    return {
      database: isSet(object.database) ? globalThis.String(object.database) : "",
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlDatabasesGetRequest): unknown {
    const obj: any = {};
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlDatabasesGetRequest>): SqlDatabasesGetRequest {
    return SqlDatabasesGetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlDatabasesGetRequest>): SqlDatabasesGetRequest {
    const message = createBaseSqlDatabasesGetRequest();
    message.database = object.database ?? "";
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlDatabasesInsertRequest(): SqlDatabasesInsertRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlDatabasesInsertRequest: MessageFns<SqlDatabasesInsertRequest> = {
  encode(message: SqlDatabasesInsertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      Database.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlDatabasesInsertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlDatabasesInsertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = Database.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlDatabasesInsertRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? Database.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlDatabasesInsertRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = Database.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlDatabasesInsertRequest>): SqlDatabasesInsertRequest {
    return SqlDatabasesInsertRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlDatabasesInsertRequest>): SqlDatabasesInsertRequest {
    const message = createBaseSqlDatabasesInsertRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null) ? Database.fromPartial(object.body) : undefined;
    return message;
  },
};

function createBaseSqlDatabasesListRequest(): SqlDatabasesListRequest {
  return { instance: "", project: "" };
}

export const SqlDatabasesListRequest: MessageFns<SqlDatabasesListRequest> = {
  encode(message: SqlDatabasesListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlDatabasesListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlDatabasesListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlDatabasesListRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlDatabasesListRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlDatabasesListRequest>): SqlDatabasesListRequest {
    return SqlDatabasesListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlDatabasesListRequest>): SqlDatabasesListRequest {
    const message = createBaseSqlDatabasesListRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlDatabasesUpdateRequest(): SqlDatabasesUpdateRequest {
  return { database: "", instance: "", project: "", body: undefined };
}

export const SqlDatabasesUpdateRequest: MessageFns<SqlDatabasesUpdateRequest> = {
  encode(message: SqlDatabasesUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.database !== "") {
      writer.uint32(10).string(message.database);
    }
    if (message.instance !== "") {
      writer.uint32(18).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(26).string(message.project);
    }
    if (message.body !== undefined) {
      Database.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlDatabasesUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlDatabasesUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.database = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = Database.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlDatabasesUpdateRequest {
    return {
      database: isSet(object.database) ? globalThis.String(object.database) : "",
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? Database.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlDatabasesUpdateRequest): unknown {
    const obj: any = {};
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = Database.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlDatabasesUpdateRequest>): SqlDatabasesUpdateRequest {
    return SqlDatabasesUpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlDatabasesUpdateRequest>): SqlDatabasesUpdateRequest {
    const message = createBaseSqlDatabasesUpdateRequest();
    message.database = object.database ?? "";
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null) ? Database.fromPartial(object.body) : undefined;
    return message;
  },
};

function createBaseSqlFlagsListRequest(): SqlFlagsListRequest {
  return { databaseVersion: "" };
}

export const SqlFlagsListRequest: MessageFns<SqlFlagsListRequest> = {
  encode(message: SqlFlagsListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.databaseVersion !== "") {
      writer.uint32(10).string(message.databaseVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlFlagsListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlFlagsListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.databaseVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlFlagsListRequest {
    return { databaseVersion: isSet(object.databaseVersion) ? globalThis.String(object.databaseVersion) : "" };
  },

  toJSON(message: SqlFlagsListRequest): unknown {
    const obj: any = {};
    if (message.databaseVersion !== "") {
      obj.databaseVersion = message.databaseVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlFlagsListRequest>): SqlFlagsListRequest {
    return SqlFlagsListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlFlagsListRequest>): SqlFlagsListRequest {
    const message = createBaseSqlFlagsListRequest();
    message.databaseVersion = object.databaseVersion ?? "";
    return message;
  },
};

function createBaseSqlInstancesAddServerCaRequest(): SqlInstancesAddServerCaRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesAddServerCaRequest: MessageFns<SqlInstancesAddServerCaRequest> = {
  encode(message: SqlInstancesAddServerCaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesAddServerCaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesAddServerCaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesAddServerCaRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesAddServerCaRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesAddServerCaRequest>): SqlInstancesAddServerCaRequest {
    return SqlInstancesAddServerCaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesAddServerCaRequest>): SqlInstancesAddServerCaRequest {
    const message = createBaseSqlInstancesAddServerCaRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesCloneRequest(): SqlInstancesCloneRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesCloneRequest: MessageFns<SqlInstancesCloneRequest> = {
  encode(message: SqlInstancesCloneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesCloneRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesCloneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesCloneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = InstancesCloneRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesCloneRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesCloneRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesCloneRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesCloneRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesCloneRequest>): SqlInstancesCloneRequest {
    return SqlInstancesCloneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesCloneRequest>): SqlInstancesCloneRequest {
    const message = createBaseSqlInstancesCloneRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesCloneRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesDeleteRequest(): SqlInstancesDeleteRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesDeleteRequest: MessageFns<SqlInstancesDeleteRequest> = {
  encode(message: SqlInstancesDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesDeleteRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesDeleteRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesDeleteRequest>): SqlInstancesDeleteRequest {
    return SqlInstancesDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesDeleteRequest>): SqlInstancesDeleteRequest {
    const message = createBaseSqlInstancesDeleteRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesDemoteMasterRequest(): SqlInstancesDemoteMasterRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesDemoteMasterRequest: MessageFns<SqlInstancesDemoteMasterRequest> = {
  encode(message: SqlInstancesDemoteMasterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesDemoteMasterRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesDemoteMasterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesDemoteMasterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = InstancesDemoteMasterRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesDemoteMasterRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesDemoteMasterRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesDemoteMasterRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesDemoteMasterRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesDemoteMasterRequest>): SqlInstancesDemoteMasterRequest {
    return SqlInstancesDemoteMasterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesDemoteMasterRequest>): SqlInstancesDemoteMasterRequest {
    const message = createBaseSqlInstancesDemoteMasterRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesDemoteMasterRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesDemoteRequest(): SqlInstancesDemoteRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesDemoteRequest: MessageFns<SqlInstancesDemoteRequest> = {
  encode(message: SqlInstancesDemoteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesDemoteRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesDemoteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesDemoteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = InstancesDemoteRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesDemoteRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesDemoteRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesDemoteRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesDemoteRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesDemoteRequest>): SqlInstancesDemoteRequest {
    return SqlInstancesDemoteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesDemoteRequest>): SqlInstancesDemoteRequest {
    const message = createBaseSqlInstancesDemoteRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesDemoteRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesExportRequest(): SqlInstancesExportRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesExportRequest: MessageFns<SqlInstancesExportRequest> = {
  encode(message: SqlInstancesExportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesExportRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesExportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesExportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = InstancesExportRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesExportRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesExportRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesExportRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesExportRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesExportRequest>): SqlInstancesExportRequest {
    return SqlInstancesExportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesExportRequest>): SqlInstancesExportRequest {
    const message = createBaseSqlInstancesExportRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesExportRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesFailoverRequest(): SqlInstancesFailoverRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesFailoverRequest: MessageFns<SqlInstancesFailoverRequest> = {
  encode(message: SqlInstancesFailoverRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesFailoverRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesFailoverRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesFailoverRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = InstancesFailoverRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesFailoverRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesFailoverRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesFailoverRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesFailoverRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesFailoverRequest>): SqlInstancesFailoverRequest {
    return SqlInstancesFailoverRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesFailoverRequest>): SqlInstancesFailoverRequest {
    const message = createBaseSqlInstancesFailoverRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesFailoverRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesGetRequest(): SqlInstancesGetRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesGetRequest: MessageFns<SqlInstancesGetRequest> = {
  encode(message: SqlInstancesGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesGetRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesGetRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesGetRequest>): SqlInstancesGetRequest {
    return SqlInstancesGetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesGetRequest>): SqlInstancesGetRequest {
    const message = createBaseSqlInstancesGetRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesImportRequest(): SqlInstancesImportRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesImportRequest: MessageFns<SqlInstancesImportRequest> = {
  encode(message: SqlInstancesImportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesImportRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesImportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesImportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = InstancesImportRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesImportRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesImportRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesImportRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesImportRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesImportRequest>): SqlInstancesImportRequest {
    return SqlInstancesImportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesImportRequest>): SqlInstancesImportRequest {
    const message = createBaseSqlInstancesImportRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesImportRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesInsertRequest(): SqlInstancesInsertRequest {
  return { project: "", body: undefined };
}

export const SqlInstancesInsertRequest: MessageFns<SqlInstancesInsertRequest> = {
  encode(message: SqlInstancesInsertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== "") {
      writer.uint32(10).string(message.project);
    }
    if (message.body !== undefined) {
      DatabaseInstance.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesInsertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesInsertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = DatabaseInstance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesInsertRequest {
    return {
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? DatabaseInstance.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesInsertRequest): unknown {
    const obj: any = {};
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = DatabaseInstance.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesInsertRequest>): SqlInstancesInsertRequest {
    return SqlInstancesInsertRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesInsertRequest>): SqlInstancesInsertRequest {
    const message = createBaseSqlInstancesInsertRequest();
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? DatabaseInstance.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesListRequest(): SqlInstancesListRequest {
  return { filter: "", maxResults: 0, pageToken: "", project: "" };
}

export const SqlInstancesListRequest: MessageFns<SqlInstancesListRequest> = {
  encode(message: SqlInstancesListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.maxResults !== 0) {
      writer.uint32(16).uint32(message.maxResults);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.project !== "") {
      writer.uint32(34).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxResults = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesListRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesListRequest): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.maxResults !== 0) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesListRequest>): SqlInstancesListRequest {
    return SqlInstancesListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesListRequest>): SqlInstancesListRequest {
    const message = createBaseSqlInstancesListRequest();
    message.filter = object.filter ?? "";
    message.maxResults = object.maxResults ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesListServerCasRequest(): SqlInstancesListServerCasRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesListServerCasRequest: MessageFns<SqlInstancesListServerCasRequest> = {
  encode(message: SqlInstancesListServerCasRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesListServerCasRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesListServerCasRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesListServerCasRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesListServerCasRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesListServerCasRequest>): SqlInstancesListServerCasRequest {
    return SqlInstancesListServerCasRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesListServerCasRequest>): SqlInstancesListServerCasRequest {
    const message = createBaseSqlInstancesListServerCasRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesPatchRequest(): SqlInstancesPatchRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesPatchRequest: MessageFns<SqlInstancesPatchRequest> = {
  encode(message: SqlInstancesPatchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      DatabaseInstance.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesPatchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesPatchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = DatabaseInstance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesPatchRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? DatabaseInstance.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesPatchRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = DatabaseInstance.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesPatchRequest>): SqlInstancesPatchRequest {
    return SqlInstancesPatchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesPatchRequest>): SqlInstancesPatchRequest {
    const message = createBaseSqlInstancesPatchRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? DatabaseInstance.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesPromoteReplicaRequest(): SqlInstancesPromoteReplicaRequest {
  return { instance: "", project: "", failover: false };
}

export const SqlInstancesPromoteReplicaRequest: MessageFns<SqlInstancesPromoteReplicaRequest> = {
  encode(message: SqlInstancesPromoteReplicaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.failover !== false) {
      writer.uint32(24).bool(message.failover);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesPromoteReplicaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesPromoteReplicaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.failover = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesPromoteReplicaRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      failover: isSet(object.failover) ? globalThis.Boolean(object.failover) : false,
    };
  },

  toJSON(message: SqlInstancesPromoteReplicaRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.failover !== false) {
      obj.failover = message.failover;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesPromoteReplicaRequest>): SqlInstancesPromoteReplicaRequest {
    return SqlInstancesPromoteReplicaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesPromoteReplicaRequest>): SqlInstancesPromoteReplicaRequest {
    const message = createBaseSqlInstancesPromoteReplicaRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.failover = object.failover ?? false;
    return message;
  },
};

function createBaseSqlInstancesSwitchoverRequest(): SqlInstancesSwitchoverRequest {
  return { instance: "", project: "", dbTimeout: undefined };
}

export const SqlInstancesSwitchoverRequest: MessageFns<SqlInstancesSwitchoverRequest> = {
  encode(message: SqlInstancesSwitchoverRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.dbTimeout !== undefined) {
      Duration.encode(message.dbTimeout, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesSwitchoverRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesSwitchoverRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dbTimeout = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesSwitchoverRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      dbTimeout: isSet(object.dbTimeout) ? Duration.fromJSON(object.dbTimeout) : undefined,
    };
  },

  toJSON(message: SqlInstancesSwitchoverRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.dbTimeout !== undefined) {
      obj.dbTimeout = Duration.toJSON(message.dbTimeout);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesSwitchoverRequest>): SqlInstancesSwitchoverRequest {
    return SqlInstancesSwitchoverRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesSwitchoverRequest>): SqlInstancesSwitchoverRequest {
    const message = createBaseSqlInstancesSwitchoverRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.dbTimeout = (object.dbTimeout !== undefined && object.dbTimeout !== null)
      ? Duration.fromPartial(object.dbTimeout)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesResetSslConfigRequest(): SqlInstancesResetSslConfigRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesResetSslConfigRequest: MessageFns<SqlInstancesResetSslConfigRequest> = {
  encode(message: SqlInstancesResetSslConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesResetSslConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesResetSslConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesResetSslConfigRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesResetSslConfigRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesResetSslConfigRequest>): SqlInstancesResetSslConfigRequest {
    return SqlInstancesResetSslConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesResetSslConfigRequest>): SqlInstancesResetSslConfigRequest {
    const message = createBaseSqlInstancesResetSslConfigRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesRestartRequest(): SqlInstancesRestartRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesRestartRequest: MessageFns<SqlInstancesRestartRequest> = {
  encode(message: SqlInstancesRestartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesRestartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesRestartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesRestartRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesRestartRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesRestartRequest>): SqlInstancesRestartRequest {
    return SqlInstancesRestartRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesRestartRequest>): SqlInstancesRestartRequest {
    const message = createBaseSqlInstancesRestartRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesRestoreBackupRequest(): SqlInstancesRestoreBackupRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesRestoreBackupRequest: MessageFns<SqlInstancesRestoreBackupRequest> = {
  encode(message: SqlInstancesRestoreBackupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesRestoreBackupRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesRestoreBackupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesRestoreBackupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = InstancesRestoreBackupRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesRestoreBackupRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesRestoreBackupRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesRestoreBackupRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesRestoreBackupRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesRestoreBackupRequest>): SqlInstancesRestoreBackupRequest {
    return SqlInstancesRestoreBackupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesRestoreBackupRequest>): SqlInstancesRestoreBackupRequest {
    const message = createBaseSqlInstancesRestoreBackupRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesRestoreBackupRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesRotateServerCaRequest(): SqlInstancesRotateServerCaRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesRotateServerCaRequest: MessageFns<SqlInstancesRotateServerCaRequest> = {
  encode(message: SqlInstancesRotateServerCaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesRotateServerCaRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesRotateServerCaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesRotateServerCaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = InstancesRotateServerCaRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesRotateServerCaRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesRotateServerCaRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesRotateServerCaRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesRotateServerCaRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesRotateServerCaRequest>): SqlInstancesRotateServerCaRequest {
    return SqlInstancesRotateServerCaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesRotateServerCaRequest>): SqlInstancesRotateServerCaRequest {
    const message = createBaseSqlInstancesRotateServerCaRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesRotateServerCaRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesStartReplicaRequest(): SqlInstancesStartReplicaRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesStartReplicaRequest: MessageFns<SqlInstancesStartReplicaRequest> = {
  encode(message: SqlInstancesStartReplicaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesStartReplicaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesStartReplicaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesStartReplicaRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesStartReplicaRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesStartReplicaRequest>): SqlInstancesStartReplicaRequest {
    return SqlInstancesStartReplicaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesStartReplicaRequest>): SqlInstancesStartReplicaRequest {
    const message = createBaseSqlInstancesStartReplicaRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesStopReplicaRequest(): SqlInstancesStopReplicaRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesStopReplicaRequest: MessageFns<SqlInstancesStopReplicaRequest> = {
  encode(message: SqlInstancesStopReplicaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesStopReplicaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesStopReplicaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesStopReplicaRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesStopReplicaRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesStopReplicaRequest>): SqlInstancesStopReplicaRequest {
    return SqlInstancesStopReplicaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesStopReplicaRequest>): SqlInstancesStopReplicaRequest {
    const message = createBaseSqlInstancesStopReplicaRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesTruncateLogRequest(): SqlInstancesTruncateLogRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesTruncateLogRequest: MessageFns<SqlInstancesTruncateLogRequest> = {
  encode(message: SqlInstancesTruncateLogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesTruncateLogRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesTruncateLogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesTruncateLogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = InstancesTruncateLogRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesTruncateLogRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesTruncateLogRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesTruncateLogRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesTruncateLogRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesTruncateLogRequest>): SqlInstancesTruncateLogRequest {
    return SqlInstancesTruncateLogRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesTruncateLogRequest>): SqlInstancesTruncateLogRequest {
    const message = createBaseSqlInstancesTruncateLogRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesTruncateLogRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesUpdateRequest(): SqlInstancesUpdateRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesUpdateRequest: MessageFns<SqlInstancesUpdateRequest> = {
  encode(message: SqlInstancesUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      DatabaseInstance.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = DatabaseInstance.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesUpdateRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? DatabaseInstance.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesUpdateRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = DatabaseInstance.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesUpdateRequest>): SqlInstancesUpdateRequest {
    return SqlInstancesUpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesUpdateRequest>): SqlInstancesUpdateRequest {
    const message = createBaseSqlInstancesUpdateRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? DatabaseInstance.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesReencryptRequest(): SqlInstancesReencryptRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesReencryptRequest: MessageFns<SqlInstancesReencryptRequest> = {
  encode(message: SqlInstancesReencryptRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesReencryptRequest.encode(message.body, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesReencryptRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesReencryptRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.body = InstancesReencryptRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesReencryptRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesReencryptRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesReencryptRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesReencryptRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesReencryptRequest>): SqlInstancesReencryptRequest {
    return SqlInstancesReencryptRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesReencryptRequest>): SqlInstancesReencryptRequest {
    const message = createBaseSqlInstancesReencryptRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesReencryptRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseInstancesReencryptRequest(): InstancesReencryptRequest {
  return { backupReencryptionConfig: undefined };
}

export const InstancesReencryptRequest: MessageFns<InstancesReencryptRequest> = {
  encode(message: InstancesReencryptRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backupReencryptionConfig !== undefined) {
      BackupReencryptionConfig.encode(message.backupReencryptionConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstancesReencryptRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstancesReencryptRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.backupReencryptionConfig = BackupReencryptionConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstancesReencryptRequest {
    return {
      backupReencryptionConfig: isSet(object.backupReencryptionConfig)
        ? BackupReencryptionConfig.fromJSON(object.backupReencryptionConfig)
        : undefined,
    };
  },

  toJSON(message: InstancesReencryptRequest): unknown {
    const obj: any = {};
    if (message.backupReencryptionConfig !== undefined) {
      obj.backupReencryptionConfig = BackupReencryptionConfig.toJSON(message.backupReencryptionConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<InstancesReencryptRequest>): InstancesReencryptRequest {
    return InstancesReencryptRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InstancesReencryptRequest>): InstancesReencryptRequest {
    const message = createBaseInstancesReencryptRequest();
    message.backupReencryptionConfig =
      (object.backupReencryptionConfig !== undefined && object.backupReencryptionConfig !== null)
        ? BackupReencryptionConfig.fromPartial(object.backupReencryptionConfig)
        : undefined;
    return message;
  },
};

function createBaseBackupReencryptionConfig(): BackupReencryptionConfig {
  return { backupLimit: undefined, backupType: undefined };
}

export const BackupReencryptionConfig: MessageFns<BackupReencryptionConfig> = {
  encode(message: BackupReencryptionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.backupLimit !== undefined) {
      writer.uint32(8).int32(message.backupLimit);
    }
    if (message.backupType !== undefined) {
      writer.uint32(16).int32(message.backupType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackupReencryptionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackupReencryptionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.backupLimit = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.backupType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackupReencryptionConfig {
    return {
      backupLimit: isSet(object.backupLimit) ? globalThis.Number(object.backupLimit) : undefined,
      backupType: isSet(object.backupType) ? backupReencryptionConfig_BackupTypeFromJSON(object.backupType) : undefined,
    };
  },

  toJSON(message: BackupReencryptionConfig): unknown {
    const obj: any = {};
    if (message.backupLimit !== undefined) {
      obj.backupLimit = Math.round(message.backupLimit);
    }
    if (message.backupType !== undefined) {
      obj.backupType = backupReencryptionConfig_BackupTypeToJSON(message.backupType);
    }
    return obj;
  },

  create(base?: DeepPartial<BackupReencryptionConfig>): BackupReencryptionConfig {
    return BackupReencryptionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BackupReencryptionConfig>): BackupReencryptionConfig {
    const message = createBaseBackupReencryptionConfig();
    message.backupLimit = object.backupLimit ?? undefined;
    message.backupType = object.backupType ?? undefined;
    return message;
  },
};

function createBaseSqlInstancesRescheduleMaintenanceRequest(): SqlInstancesRescheduleMaintenanceRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesRescheduleMaintenanceRequest: MessageFns<SqlInstancesRescheduleMaintenanceRequest> = {
  encode(message: SqlInstancesRescheduleMaintenanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      SqlInstancesRescheduleMaintenanceRequestBody.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesRescheduleMaintenanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesRescheduleMaintenanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = SqlInstancesRescheduleMaintenanceRequestBody.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesRescheduleMaintenanceRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? SqlInstancesRescheduleMaintenanceRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesRescheduleMaintenanceRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = SqlInstancesRescheduleMaintenanceRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesRescheduleMaintenanceRequest>): SqlInstancesRescheduleMaintenanceRequest {
    return SqlInstancesRescheduleMaintenanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesRescheduleMaintenanceRequest>): SqlInstancesRescheduleMaintenanceRequest {
    const message = createBaseSqlInstancesRescheduleMaintenanceRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? SqlInstancesRescheduleMaintenanceRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesPerformDiskShrinkRequest(): SqlInstancesPerformDiskShrinkRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesPerformDiskShrinkRequest: MessageFns<SqlInstancesPerformDiskShrinkRequest> = {
  encode(message: SqlInstancesPerformDiskShrinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      PerformDiskShrinkContext.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesPerformDiskShrinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesPerformDiskShrinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = PerformDiskShrinkContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesPerformDiskShrinkRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? PerformDiskShrinkContext.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesPerformDiskShrinkRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = PerformDiskShrinkContext.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesPerformDiskShrinkRequest>): SqlInstancesPerformDiskShrinkRequest {
    return SqlInstancesPerformDiskShrinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesPerformDiskShrinkRequest>): SqlInstancesPerformDiskShrinkRequest {
    const message = createBaseSqlInstancesPerformDiskShrinkRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? PerformDiskShrinkContext.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesVerifyExternalSyncSettingsRequest(): SqlInstancesVerifyExternalSyncSettingsRequest {
  return {
    instance: "",
    project: "",
    verifyConnectionOnly: false,
    syncMode: 0,
    verifyReplicationOnly: false,
    mysqlSyncConfig: undefined,
    migrationType: 0,
    syncParallelLevel: 0,
  };
}

export const SqlInstancesVerifyExternalSyncSettingsRequest: MessageFns<SqlInstancesVerifyExternalSyncSettingsRequest> =
  {
    encode(
      message: SqlInstancesVerifyExternalSyncSettingsRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.instance !== "") {
        writer.uint32(10).string(message.instance);
      }
      if (message.project !== "") {
        writer.uint32(18).string(message.project);
      }
      if (message.verifyConnectionOnly !== false) {
        writer.uint32(24).bool(message.verifyConnectionOnly);
      }
      if (message.syncMode !== 0) {
        writer.uint32(32).int32(message.syncMode);
      }
      if (message.verifyReplicationOnly !== false) {
        writer.uint32(40).bool(message.verifyReplicationOnly);
      }
      if (message.mysqlSyncConfig !== undefined) {
        MySqlSyncConfig.encode(message.mysqlSyncConfig, writer.uint32(50).fork()).join();
      }
      if (message.migrationType !== 0) {
        writer.uint32(56).int32(message.migrationType);
      }
      if (message.syncParallelLevel !== 0) {
        writer.uint32(64).int32(message.syncParallelLevel);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesVerifyExternalSyncSettingsRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseSqlInstancesVerifyExternalSyncSettingsRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.instance = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.project = reader.string();
            continue;
          case 3:
            if (tag !== 24) {
              break;
            }

            message.verifyConnectionOnly = reader.bool();
            continue;
          case 4:
            if (tag !== 32) {
              break;
            }

            message.syncMode = reader.int32() as any;
            continue;
          case 5:
            if (tag !== 40) {
              break;
            }

            message.verifyReplicationOnly = reader.bool();
            continue;
          case 6:
            if (tag !== 50) {
              break;
            }

            message.mysqlSyncConfig = MySqlSyncConfig.decode(reader, reader.uint32());
            continue;
          case 7:
            if (tag !== 56) {
              break;
            }

            message.migrationType = reader.int32() as any;
            continue;
          case 8:
            if (tag !== 64) {
              break;
            }

            message.syncParallelLevel = reader.int32() as any;
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): SqlInstancesVerifyExternalSyncSettingsRequest {
      return {
        instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
        project: isSet(object.project) ? globalThis.String(object.project) : "",
        verifyConnectionOnly: isSet(object.verifyConnectionOnly)
          ? globalThis.Boolean(object.verifyConnectionOnly)
          : false,
        syncMode: isSet(object.syncMode)
          ? sqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncModeFromJSON(object.syncMode)
          : 0,
        verifyReplicationOnly: isSet(object.verifyReplicationOnly)
          ? globalThis.Boolean(object.verifyReplicationOnly)
          : false,
        mysqlSyncConfig: isSet(object.mysqlSyncConfig) ? MySqlSyncConfig.fromJSON(object.mysqlSyncConfig) : undefined,
        migrationType: isSet(object.migrationType)
          ? sqlInstancesVerifyExternalSyncSettingsRequest_MigrationTypeFromJSON(object.migrationType)
          : 0,
        syncParallelLevel: isSet(object.syncParallelLevel)
          ? externalSyncParallelLevelFromJSON(object.syncParallelLevel)
          : 0,
      };
    },

    toJSON(message: SqlInstancesVerifyExternalSyncSettingsRequest): unknown {
      const obj: any = {};
      if (message.instance !== "") {
        obj.instance = message.instance;
      }
      if (message.project !== "") {
        obj.project = message.project;
      }
      if (message.verifyConnectionOnly !== false) {
        obj.verifyConnectionOnly = message.verifyConnectionOnly;
      }
      if (message.syncMode !== 0) {
        obj.syncMode = sqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncModeToJSON(message.syncMode);
      }
      if (message.verifyReplicationOnly !== false) {
        obj.verifyReplicationOnly = message.verifyReplicationOnly;
      }
      if (message.mysqlSyncConfig !== undefined) {
        obj.mysqlSyncConfig = MySqlSyncConfig.toJSON(message.mysqlSyncConfig);
      }
      if (message.migrationType !== 0) {
        obj.migrationType = sqlInstancesVerifyExternalSyncSettingsRequest_MigrationTypeToJSON(message.migrationType);
      }
      if (message.syncParallelLevel !== 0) {
        obj.syncParallelLevel = externalSyncParallelLevelToJSON(message.syncParallelLevel);
      }
      return obj;
    },

    create(
      base?: DeepPartial<SqlInstancesVerifyExternalSyncSettingsRequest>,
    ): SqlInstancesVerifyExternalSyncSettingsRequest {
      return SqlInstancesVerifyExternalSyncSettingsRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<SqlInstancesVerifyExternalSyncSettingsRequest>,
    ): SqlInstancesVerifyExternalSyncSettingsRequest {
      const message = createBaseSqlInstancesVerifyExternalSyncSettingsRequest();
      message.instance = object.instance ?? "";
      message.project = object.project ?? "";
      message.verifyConnectionOnly = object.verifyConnectionOnly ?? false;
      message.syncMode = object.syncMode ?? 0;
      message.verifyReplicationOnly = object.verifyReplicationOnly ?? false;
      message.mysqlSyncConfig = (object.mysqlSyncConfig !== undefined && object.mysqlSyncConfig !== null)
        ? MySqlSyncConfig.fromPartial(object.mysqlSyncConfig)
        : undefined;
      message.migrationType = object.migrationType ?? 0;
      message.syncParallelLevel = object.syncParallelLevel ?? 0;
      return message;
    },
  };

function createBaseSqlInstancesStartExternalSyncRequest(): SqlInstancesStartExternalSyncRequest {
  return {
    instance: "",
    project: "",
    syncMode: 0,
    skipVerification: false,
    mysqlSyncConfig: undefined,
    syncParallelLevel: 0,
    migrationType: 0,
  };
}

export const SqlInstancesStartExternalSyncRequest: MessageFns<SqlInstancesStartExternalSyncRequest> = {
  encode(message: SqlInstancesStartExternalSyncRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.syncMode !== 0) {
      writer.uint32(24).int32(message.syncMode);
    }
    if (message.skipVerification !== false) {
      writer.uint32(32).bool(message.skipVerification);
    }
    if (message.mysqlSyncConfig !== undefined) {
      MySqlSyncConfig.encode(message.mysqlSyncConfig, writer.uint32(50).fork()).join();
    }
    if (message.syncParallelLevel !== 0) {
      writer.uint32(56).int32(message.syncParallelLevel);
    }
    if (message.migrationType !== 0) {
      writer.uint32(64).int32(message.migrationType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesStartExternalSyncRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesStartExternalSyncRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.syncMode = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.skipVerification = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.mysqlSyncConfig = MySqlSyncConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.syncParallelLevel = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.migrationType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesStartExternalSyncRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      syncMode: isSet(object.syncMode)
        ? sqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncModeFromJSON(object.syncMode)
        : 0,
      skipVerification: isSet(object.skipVerification) ? globalThis.Boolean(object.skipVerification) : false,
      mysqlSyncConfig: isSet(object.mysqlSyncConfig) ? MySqlSyncConfig.fromJSON(object.mysqlSyncConfig) : undefined,
      syncParallelLevel: isSet(object.syncParallelLevel)
        ? externalSyncParallelLevelFromJSON(object.syncParallelLevel)
        : 0,
      migrationType: isSet(object.migrationType)
        ? sqlInstancesVerifyExternalSyncSettingsRequest_MigrationTypeFromJSON(object.migrationType)
        : 0,
    };
  },

  toJSON(message: SqlInstancesStartExternalSyncRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.syncMode !== 0) {
      obj.syncMode = sqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncModeToJSON(message.syncMode);
    }
    if (message.skipVerification !== false) {
      obj.skipVerification = message.skipVerification;
    }
    if (message.mysqlSyncConfig !== undefined) {
      obj.mysqlSyncConfig = MySqlSyncConfig.toJSON(message.mysqlSyncConfig);
    }
    if (message.syncParallelLevel !== 0) {
      obj.syncParallelLevel = externalSyncParallelLevelToJSON(message.syncParallelLevel);
    }
    if (message.migrationType !== 0) {
      obj.migrationType = sqlInstancesVerifyExternalSyncSettingsRequest_MigrationTypeToJSON(message.migrationType);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesStartExternalSyncRequest>): SqlInstancesStartExternalSyncRequest {
    return SqlInstancesStartExternalSyncRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesStartExternalSyncRequest>): SqlInstancesStartExternalSyncRequest {
    const message = createBaseSqlInstancesStartExternalSyncRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.syncMode = object.syncMode ?? 0;
    message.skipVerification = object.skipVerification ?? false;
    message.mysqlSyncConfig = (object.mysqlSyncConfig !== undefined && object.mysqlSyncConfig !== null)
      ? MySqlSyncConfig.fromPartial(object.mysqlSyncConfig)
      : undefined;
    message.syncParallelLevel = object.syncParallelLevel ?? 0;
    message.migrationType = object.migrationType ?? 0;
    return message;
  },
};

function createBaseSqlInstancesResetReplicaSizeRequest(): SqlInstancesResetReplicaSizeRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesResetReplicaSizeRequest: MessageFns<SqlInstancesResetReplicaSizeRequest> = {
  encode(message: SqlInstancesResetReplicaSizeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesResetReplicaSizeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesResetReplicaSizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesResetReplicaSizeRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesResetReplicaSizeRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesResetReplicaSizeRequest>): SqlInstancesResetReplicaSizeRequest {
    return SqlInstancesResetReplicaSizeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesResetReplicaSizeRequest>): SqlInstancesResetReplicaSizeRequest {
    const message = createBaseSqlInstancesResetReplicaSizeRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlOperationsGetRequest(): SqlOperationsGetRequest {
  return { operation: "", project: "" };
}

export const SqlOperationsGetRequest: MessageFns<SqlOperationsGetRequest> = {
  encode(message: SqlOperationsGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operation !== "") {
      writer.uint32(10).string(message.operation);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlOperationsGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlOperationsGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operation = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlOperationsGetRequest {
    return {
      operation: isSet(object.operation) ? globalThis.String(object.operation) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlOperationsGetRequest): unknown {
    const obj: any = {};
    if (message.operation !== "") {
      obj.operation = message.operation;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlOperationsGetRequest>): SqlOperationsGetRequest {
    return SqlOperationsGetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlOperationsGetRequest>): SqlOperationsGetRequest {
    const message = createBaseSqlOperationsGetRequest();
    message.operation = object.operation ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlOperationsListRequest(): SqlOperationsListRequest {
  return { instance: "", maxResults: 0, pageToken: "", project: "" };
}

export const SqlOperationsListRequest: MessageFns<SqlOperationsListRequest> = {
  encode(message: SqlOperationsListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.maxResults !== 0) {
      writer.uint32(16).uint32(message.maxResults);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.project !== "") {
      writer.uint32(34).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlOperationsListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlOperationsListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxResults = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlOperationsListRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      maxResults: isSet(object.maxResults) ? globalThis.Number(object.maxResults) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlOperationsListRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.maxResults !== 0) {
      obj.maxResults = Math.round(message.maxResults);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlOperationsListRequest>): SqlOperationsListRequest {
    return SqlOperationsListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlOperationsListRequest>): SqlOperationsListRequest {
    const message = createBaseSqlOperationsListRequest();
    message.instance = object.instance ?? "";
    message.maxResults = object.maxResults ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlOperationsCancelRequest(): SqlOperationsCancelRequest {
  return { operation: "", project: "" };
}

export const SqlOperationsCancelRequest: MessageFns<SqlOperationsCancelRequest> = {
  encode(message: SqlOperationsCancelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operation !== "") {
      writer.uint32(10).string(message.operation);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlOperationsCancelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlOperationsCancelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operation = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlOperationsCancelRequest {
    return {
      operation: isSet(object.operation) ? globalThis.String(object.operation) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlOperationsCancelRequest): unknown {
    const obj: any = {};
    if (message.operation !== "") {
      obj.operation = message.operation;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlOperationsCancelRequest>): SqlOperationsCancelRequest {
    return SqlOperationsCancelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlOperationsCancelRequest>): SqlOperationsCancelRequest {
    const message = createBaseSqlOperationsCancelRequest();
    message.operation = object.operation ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesCreateEphemeralCertRequest(): SqlInstancesCreateEphemeralCertRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesCreateEphemeralCertRequest: MessageFns<SqlInstancesCreateEphemeralCertRequest> = {
  encode(message: SqlInstancesCreateEphemeralCertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      SslCertsCreateEphemeralRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesCreateEphemeralCertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesCreateEphemeralCertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = SslCertsCreateEphemeralRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesCreateEphemeralCertRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? SslCertsCreateEphemeralRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesCreateEphemeralCertRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = SslCertsCreateEphemeralRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesCreateEphemeralCertRequest>): SqlInstancesCreateEphemeralCertRequest {
    return SqlInstancesCreateEphemeralCertRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesCreateEphemeralCertRequest>): SqlInstancesCreateEphemeralCertRequest {
    const message = createBaseSqlInstancesCreateEphemeralCertRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? SslCertsCreateEphemeralRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlSslCertsDeleteRequest(): SqlSslCertsDeleteRequest {
  return { instance: "", project: "", sha1Fingerprint: "" };
}

export const SqlSslCertsDeleteRequest: MessageFns<SqlSslCertsDeleteRequest> = {
  encode(message: SqlSslCertsDeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.sha1Fingerprint !== "") {
      writer.uint32(26).string(message.sha1Fingerprint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlSslCertsDeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlSslCertsDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sha1Fingerprint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlSslCertsDeleteRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      sha1Fingerprint: isSet(object.sha1Fingerprint) ? globalThis.String(object.sha1Fingerprint) : "",
    };
  },

  toJSON(message: SqlSslCertsDeleteRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.sha1Fingerprint !== "") {
      obj.sha1Fingerprint = message.sha1Fingerprint;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlSslCertsDeleteRequest>): SqlSslCertsDeleteRequest {
    return SqlSslCertsDeleteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlSslCertsDeleteRequest>): SqlSslCertsDeleteRequest {
    const message = createBaseSqlSslCertsDeleteRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.sha1Fingerprint = object.sha1Fingerprint ?? "";
    return message;
  },
};

function createBaseSqlSslCertsGetRequest(): SqlSslCertsGetRequest {
  return { instance: "", project: "", sha1Fingerprint: "" };
}

export const SqlSslCertsGetRequest: MessageFns<SqlSslCertsGetRequest> = {
  encode(message: SqlSslCertsGetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.sha1Fingerprint !== "") {
      writer.uint32(26).string(message.sha1Fingerprint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlSslCertsGetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlSslCertsGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sha1Fingerprint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlSslCertsGetRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      sha1Fingerprint: isSet(object.sha1Fingerprint) ? globalThis.String(object.sha1Fingerprint) : "",
    };
  },

  toJSON(message: SqlSslCertsGetRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.sha1Fingerprint !== "") {
      obj.sha1Fingerprint = message.sha1Fingerprint;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlSslCertsGetRequest>): SqlSslCertsGetRequest {
    return SqlSslCertsGetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlSslCertsGetRequest>): SqlSslCertsGetRequest {
    const message = createBaseSqlSslCertsGetRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.sha1Fingerprint = object.sha1Fingerprint ?? "";
    return message;
  },
};

function createBaseSqlSslCertsInsertRequest(): SqlSslCertsInsertRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlSslCertsInsertRequest: MessageFns<SqlSslCertsInsertRequest> = {
  encode(message: SqlSslCertsInsertRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      SslCertsInsertRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlSslCertsInsertRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlSslCertsInsertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = SslCertsInsertRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlSslCertsInsertRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? SslCertsInsertRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlSslCertsInsertRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = SslCertsInsertRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlSslCertsInsertRequest>): SqlSslCertsInsertRequest {
    return SqlSslCertsInsertRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlSslCertsInsertRequest>): SqlSslCertsInsertRequest {
    const message = createBaseSqlSslCertsInsertRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? SslCertsInsertRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlSslCertsListRequest(): SqlSslCertsListRequest {
  return { instance: "", project: "" };
}

export const SqlSslCertsListRequest: MessageFns<SqlSslCertsListRequest> = {
  encode(message: SqlSslCertsListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlSslCertsListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlSslCertsListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlSslCertsListRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlSslCertsListRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlSslCertsListRequest>): SqlSslCertsListRequest {
    return SqlSslCertsListRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlSslCertsListRequest>): SqlSslCertsListRequest {
    const message = createBaseSqlSslCertsListRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesGetDiskShrinkConfigRequest(): SqlInstancesGetDiskShrinkConfigRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesGetDiskShrinkConfigRequest: MessageFns<SqlInstancesGetDiskShrinkConfigRequest> = {
  encode(message: SqlInstancesGetDiskShrinkConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesGetDiskShrinkConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesGetDiskShrinkConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesGetDiskShrinkConfigRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesGetDiskShrinkConfigRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesGetDiskShrinkConfigRequest>): SqlInstancesGetDiskShrinkConfigRequest {
    return SqlInstancesGetDiskShrinkConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesGetDiskShrinkConfigRequest>): SqlInstancesGetDiskShrinkConfigRequest {
    const message = createBaseSqlInstancesGetDiskShrinkConfigRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesGetLatestRecoveryTimeRequest(): SqlInstancesGetLatestRecoveryTimeRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesGetLatestRecoveryTimeRequest: MessageFns<SqlInstancesGetLatestRecoveryTimeRequest> = {
  encode(message: SqlInstancesGetLatestRecoveryTimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesGetLatestRecoveryTimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesGetLatestRecoveryTimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesGetLatestRecoveryTimeRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesGetLatestRecoveryTimeRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesGetLatestRecoveryTimeRequest>): SqlInstancesGetLatestRecoveryTimeRequest {
    return SqlInstancesGetLatestRecoveryTimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesGetLatestRecoveryTimeRequest>): SqlInstancesGetLatestRecoveryTimeRequest {
    const message = createBaseSqlInstancesGetLatestRecoveryTimeRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesGetLatestRecoveryTimeResponse(): SqlInstancesGetLatestRecoveryTimeResponse {
  return { kind: "", latestRecoveryTime: undefined };
}

export const SqlInstancesGetLatestRecoveryTimeResponse: MessageFns<SqlInstancesGetLatestRecoveryTimeResponse> = {
  encode(message: SqlInstancesGetLatestRecoveryTimeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    if (message.latestRecoveryTime !== undefined) {
      Timestamp.encode(toTimestamp(message.latestRecoveryTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesGetLatestRecoveryTimeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesGetLatestRecoveryTimeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.latestRecoveryTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesGetLatestRecoveryTimeResponse {
    return {
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      latestRecoveryTime: isSet(object.latestRecoveryTime) ? fromJsonTimestamp(object.latestRecoveryTime) : undefined,
    };
  },

  toJSON(message: SqlInstancesGetLatestRecoveryTimeResponse): unknown {
    const obj: any = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.latestRecoveryTime !== undefined) {
      obj.latestRecoveryTime = message.latestRecoveryTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesGetLatestRecoveryTimeResponse>): SqlInstancesGetLatestRecoveryTimeResponse {
    return SqlInstancesGetLatestRecoveryTimeResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SqlInstancesGetLatestRecoveryTimeResponse>,
  ): SqlInstancesGetLatestRecoveryTimeResponse {
    const message = createBaseSqlInstancesGetLatestRecoveryTimeResponse();
    message.kind = object.kind ?? "";
    message.latestRecoveryTime = object.latestRecoveryTime ?? undefined;
    return message;
  },
};

function createBaseSqlInstancesReleaseSsrsLeaseRequest(): SqlInstancesReleaseSsrsLeaseRequest {
  return { instance: "", project: "" };
}

export const SqlInstancesReleaseSsrsLeaseRequest: MessageFns<SqlInstancesReleaseSsrsLeaseRequest> = {
  encode(message: SqlInstancesReleaseSsrsLeaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesReleaseSsrsLeaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesReleaseSsrsLeaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesReleaseSsrsLeaseRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
    };
  },

  toJSON(message: SqlInstancesReleaseSsrsLeaseRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesReleaseSsrsLeaseRequest>): SqlInstancesReleaseSsrsLeaseRequest {
    return SqlInstancesReleaseSsrsLeaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesReleaseSsrsLeaseRequest>): SqlInstancesReleaseSsrsLeaseRequest {
    const message = createBaseSqlInstancesReleaseSsrsLeaseRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    return message;
  },
};

function createBaseSqlInstancesReleaseSsrsLeaseResponse(): SqlInstancesReleaseSsrsLeaseResponse {
  return { operationId: "" };
}

export const SqlInstancesReleaseSsrsLeaseResponse: MessageFns<SqlInstancesReleaseSsrsLeaseResponse> = {
  encode(message: SqlInstancesReleaseSsrsLeaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationId !== "") {
      writer.uint32(10).string(message.operationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesReleaseSsrsLeaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesReleaseSsrsLeaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesReleaseSsrsLeaseResponse {
    return { operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "" };
  },

  toJSON(message: SqlInstancesReleaseSsrsLeaseResponse): unknown {
    const obj: any = {};
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesReleaseSsrsLeaseResponse>): SqlInstancesReleaseSsrsLeaseResponse {
    return SqlInstancesReleaseSsrsLeaseResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesReleaseSsrsLeaseResponse>): SqlInstancesReleaseSsrsLeaseResponse {
    const message = createBaseSqlInstancesReleaseSsrsLeaseResponse();
    message.operationId = object.operationId ?? "";
    return message;
  },
};

function createBaseSqlInstancesAcquireSsrsLeaseRequest(): SqlInstancesAcquireSsrsLeaseRequest {
  return { instance: "", project: "", body: undefined };
}

export const SqlInstancesAcquireSsrsLeaseRequest: MessageFns<SqlInstancesAcquireSsrsLeaseRequest> = {
  encode(message: SqlInstancesAcquireSsrsLeaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instance !== "") {
      writer.uint32(10).string(message.instance);
    }
    if (message.project !== "") {
      writer.uint32(18).string(message.project);
    }
    if (message.body !== undefined) {
      InstancesAcquireSsrsLeaseRequest.encode(message.body, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesAcquireSsrsLeaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesAcquireSsrsLeaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.instance = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.project = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.body = InstancesAcquireSsrsLeaseRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesAcquireSsrsLeaseRequest {
    return {
      instance: isSet(object.instance) ? globalThis.String(object.instance) : "",
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      body: isSet(object.body) ? InstancesAcquireSsrsLeaseRequest.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SqlInstancesAcquireSsrsLeaseRequest): unknown {
    const obj: any = {};
    if (message.instance !== "") {
      obj.instance = message.instance;
    }
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.body !== undefined) {
      obj.body = InstancesAcquireSsrsLeaseRequest.toJSON(message.body);
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesAcquireSsrsLeaseRequest>): SqlInstancesAcquireSsrsLeaseRequest {
    return SqlInstancesAcquireSsrsLeaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesAcquireSsrsLeaseRequest>): SqlInstancesAcquireSsrsLeaseRequest {
    const message = createBaseSqlInstancesAcquireSsrsLeaseRequest();
    message.instance = object.instance ?? "";
    message.project = object.project ?? "";
    message.body = (object.body !== undefined && object.body !== null)
      ? InstancesAcquireSsrsLeaseRequest.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSqlInstancesAcquireSsrsLeaseResponse(): SqlInstancesAcquireSsrsLeaseResponse {
  return { operationId: undefined };
}

export const SqlInstancesAcquireSsrsLeaseResponse: MessageFns<SqlInstancesAcquireSsrsLeaseResponse> = {
  encode(message: SqlInstancesAcquireSsrsLeaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationId !== undefined) {
      writer.uint32(10).string(message.operationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SqlInstancesAcquireSsrsLeaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSqlInstancesAcquireSsrsLeaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SqlInstancesAcquireSsrsLeaseResponse {
    return { operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : undefined };
  },

  toJSON(message: SqlInstancesAcquireSsrsLeaseResponse): unknown {
    const obj: any = {};
    if (message.operationId !== undefined) {
      obj.operationId = message.operationId;
    }
    return obj;
  },

  create(base?: DeepPartial<SqlInstancesAcquireSsrsLeaseResponse>): SqlInstancesAcquireSsrsLeaseResponse {
    return SqlInstancesAcquireSsrsLeaseResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SqlInstancesAcquireSsrsLeaseResponse>): SqlInstancesAcquireSsrsLeaseResponse {
    const message = createBaseSqlInstancesAcquireSsrsLeaseResponse();
    message.operationId = object.operationId ?? undefined;
    return message;
  },
};

export type SqlBackupRunsServiceDefinition = typeof SqlBackupRunsServiceDefinition;
export const SqlBackupRunsServiceDefinition = {
  name: "SqlBackupRunsService",
  fullName: "google.cloud.sql.v1beta4.SqlBackupRunsService",
  methods: {
    /** Deletes the backup taken by a backup run. */
    delete: {
      name: "Delete",
      requestType: SqlBackupRunsDeleteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              70,
              42,
              68,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              82,
              117,
              110,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Retrieves a resource containing information about a backup run. */
    get: {
      name: "Get",
      requestType: SqlBackupRunsGetRequest,
      requestStream: false,
      responseType: BackupRun,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              70,
              18,
              68,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              82,
              117,
              110,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new backup run on demand. */
    insert: {
      name: "Insert",
      requestType: SqlBackupRunsInsertRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              71,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              63,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              82,
              117,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all backup runs associated with the project or a given instance and
     * configuration in the reverse chronological order of the backup initiation
     * time.
     */
    list: {
      name: "List",
      requestType: SqlBackupRunsListRequest,
      requestStream: false,
      responseType: BackupRunsListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              98,
              97,
              99,
              107,
              117,
              112,
              82,
              117,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SqlBackupRunsServiceImplementation<CallContextExt = {}> {
  /** Deletes the backup taken by a backup run. */
  delete(request: SqlBackupRunsDeleteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Retrieves a resource containing information about a backup run. */
  get(request: SqlBackupRunsGetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BackupRun>>;
  /** Creates a new backup run on demand. */
  insert(request: SqlBackupRunsInsertRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Lists all backup runs associated with the project or a given instance and
   * configuration in the reverse chronological order of the backup initiation
   * time.
   */
  list(
    request: SqlBackupRunsListRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BackupRunsListResponse>>;
}

export interface SqlBackupRunsServiceClient<CallOptionsExt = {}> {
  /** Deletes the backup taken by a backup run. */
  delete(request: DeepPartial<SqlBackupRunsDeleteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Retrieves a resource containing information about a backup run. */
  get(request: DeepPartial<SqlBackupRunsGetRequest>, options?: CallOptions & CallOptionsExt): Promise<BackupRun>;
  /** Creates a new backup run on demand. */
  insert(request: DeepPartial<SqlBackupRunsInsertRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Lists all backup runs associated with the project or a given instance and
   * configuration in the reverse chronological order of the backup initiation
   * time.
   */
  list(
    request: DeepPartial<SqlBackupRunsListRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BackupRunsListResponse>;
}

export type SqlDatabasesServiceDefinition = typeof SqlDatabasesServiceDefinition;
export const SqlDatabasesServiceDefinition = {
  name: "SqlDatabasesService",
  fullName: "google.cloud.sql.v1beta4.SqlDatabasesService",
  methods: {
    /** Deletes a database from a Cloud SQL instance. */
    delete: {
      name: "Delete",
      requestType: SqlDatabasesDeleteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              75,
              42,
              73,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves a resource containing information about a database inside a Cloud
     * SQL instance.
     */
    get: {
      name: "Get",
      requestType: SqlDatabasesGetRequest,
      requestStream: false,
      responseType: Database,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              75,
              18,
              73,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Inserts a resource containing information about a database inside a Cloud
     * SQL instance.
     *
     * **Note:** You can't modify the default character set and collation.
     */
    insert: {
      name: "Insert",
      requestType: SqlDatabasesInsertRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              70,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              62,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists databases in the specified Cloud SQL instance. */
    list: {
      name: "List",
      requestType: SqlDatabasesListRequest,
      requestStream: false,
      responseType: DatabasesListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Partially updates a resource containing information about a database inside
     * a Cloud SQL instance. This method supports patch semantics.
     */
    patch: {
      name: "Patch",
      requestType: SqlDatabasesUpdateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              81,
              58,
              4,
              98,
              111,
              100,
              121,
              50,
              73,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a resource containing information about a database inside a Cloud
     * SQL instance.
     */
    update: {
      name: "Update",
      requestType: SqlDatabasesUpdateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              81,
              58,
              4,
              98,
              111,
              100,
              121,
              26,
              73,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              123,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SqlDatabasesServiceImplementation<CallContextExt = {}> {
  /** Deletes a database from a Cloud SQL instance. */
  delete(request: SqlDatabasesDeleteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Retrieves a resource containing information about a database inside a Cloud
   * SQL instance.
   */
  get(request: SqlDatabasesGetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Database>>;
  /**
   * Inserts a resource containing information about a database inside a Cloud
   * SQL instance.
   *
   * **Note:** You can't modify the default character set and collation.
   */
  insert(request: SqlDatabasesInsertRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists databases in the specified Cloud SQL instance. */
  list(
    request: SqlDatabasesListRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DatabasesListResponse>>;
  /**
   * Partially updates a resource containing information about a database inside
   * a Cloud SQL instance. This method supports patch semantics.
   */
  patch(request: SqlDatabasesUpdateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Updates a resource containing information about a database inside a Cloud
   * SQL instance.
   */
  update(request: SqlDatabasesUpdateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface SqlDatabasesServiceClient<CallOptionsExt = {}> {
  /** Deletes a database from a Cloud SQL instance. */
  delete(request: DeepPartial<SqlDatabasesDeleteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Retrieves a resource containing information about a database inside a Cloud
   * SQL instance.
   */
  get(request: DeepPartial<SqlDatabasesGetRequest>, options?: CallOptions & CallOptionsExt): Promise<Database>;
  /**
   * Inserts a resource containing information about a database inside a Cloud
   * SQL instance.
   *
   * **Note:** You can't modify the default character set and collation.
   */
  insert(request: DeepPartial<SqlDatabasesInsertRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists databases in the specified Cloud SQL instance. */
  list(
    request: DeepPartial<SqlDatabasesListRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DatabasesListResponse>;
  /**
   * Partially updates a resource containing information about a database inside
   * a Cloud SQL instance. This method supports patch semantics.
   */
  patch(request: DeepPartial<SqlDatabasesUpdateRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Updates a resource containing information about a database inside a Cloud
   * SQL instance.
   */
  update(request: DeepPartial<SqlDatabasesUpdateRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

export type SqlFlagsServiceDefinition = typeof SqlFlagsServiceDefinition;
export const SqlFlagsServiceDefinition = {
  name: "SqlFlagsService",
  fullName: "google.cloud.sql.v1beta4.SqlFlagsService",
  methods: {
    /** Lists all available database flags for Cloud SQL instances. */
    list: {
      name: "List",
      requestType: SqlFlagsListRequest,
      requestStream: false,
      responseType: FlagsListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([20, 18, 18, 47, 115, 113, 108, 47, 118, 49, 98, 101, 116, 97, 52, 47, 102, 108, 97, 103, 115]),
          ],
        },
      },
    },
  },
} as const;

export interface SqlFlagsServiceImplementation<CallContextExt = {}> {
  /** Lists all available database flags for Cloud SQL instances. */
  list(request: SqlFlagsListRequest, context: CallContext & CallContextExt): Promise<DeepPartial<FlagsListResponse>>;
}

export interface SqlFlagsServiceClient<CallOptionsExt = {}> {
  /** Lists all available database flags for Cloud SQL instances. */
  list(request: DeepPartial<SqlFlagsListRequest>, options?: CallOptions & CallOptionsExt): Promise<FlagsListResponse>;
}

export type SqlInstancesServiceDefinition = typeof SqlInstancesServiceDefinition;
export const SqlInstancesServiceDefinition = {
  name: "SqlInstancesService",
  fullName: "google.cloud.sql.v1beta4.SqlInstancesService",
  methods: {
    /**
     * Add a new trusted Certificate Authority (CA) version for the specified
     * instance. Required to prepare for a certificate rotation. If a CA version
     * was previously added but never used in a certificate rotation, this
     * operation replaces that version. There cannot be more than one CA version
     * waiting to be rotated in.
     */
    addServerCa: {
      name: "AddServerCa",
      requestType: SqlInstancesAddServerCaRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              66,
              34,
              64,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              97,
              100,
              100,
              83,
              101,
              114,
              118,
              101,
              114,
              67,
              97,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a Cloud SQL instance as a clone of the source instance. Using this
     * operation might cause your instance to restart.
     */
    clone: {
      name: "Clone",
      requestType: SqlInstancesCloneRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              66,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              58,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              99,
              108,
              111,
              110,
              101,
            ]),
          ],
        },
      },
    },
    /** Deletes a Cloud SQL instance. */
    delete: {
      name: "Delete",
      requestType: SqlInstancesDeleteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              54,
              42,
              52,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Demotes the stand-alone instance to be a Cloud SQL read replica for an
     * external database server.
     */
    demoteMaster: {
      name: "DemoteMaster",
      requestType: SqlInstancesDemoteMasterRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              73,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              65,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              100,
              101,
              109,
              111,
              116,
              101,
              77,
              97,
              115,
              116,
              101,
              114,
            ]),
          ],
        },
      },
    },
    /**
     * Demotes an existing standalone instance to be a Cloud SQL read replica
     * for an external database server.
     */
    demote: {
      name: "Demote",
      requestType: SqlInstancesDemoteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              67,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              59,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              100,
              101,
              109,
              111,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL
     * dump or CSV file.
     */
    export: {
      name: "Export",
      requestType: SqlInstancesExportRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              67,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              59,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Initiates a manual failover of a high availability (HA) primary instance
     * to a standby instance, which becomes the primary instance. Users are
     * then rerouted to the new primary. For more information, see the
     * [Overview of high
     * availability](https://cloud.google.com/sql/docs/mysql/high-availability)
     * page in the Cloud SQL documentation.
     * If using Legacy HA (MySQL only), this causes the instance to failover to
     * its failover replica instance.
     */
    failover: {
      name: "Failover",
      requestType: SqlInstancesFailoverRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              69,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              61,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              102,
              97,
              105,
              108,
              111,
              118,
              101,
              114,
            ]),
          ],
        },
      },
    },
    /** Reencrypt CMEK instance with latest key version. */
    reencrypt: {
      name: "Reencrypt",
      requestType: SqlInstancesReencryptRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              70,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              62,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              114,
              101,
              101,
              110,
              99,
              114,
              121,
              112,
              116,
            ]),
          ],
        },
      },
    },
    /** Retrieves a resource containing information about a Cloud SQL instance. */
    get: {
      name: "Get",
      requestType: SqlInstancesGetRequest,
      requestStream: false,
      responseType: DatabaseInstance,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Imports data into a Cloud SQL instance from a SQL dump  or CSV file in
     * Cloud Storage.
     */
    import: {
      name: "Import",
      requestType: SqlInstancesImportRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              67,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              59,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Creates a new Cloud SQL instance. */
    insert: {
      name: "Insert",
      requestType: SqlInstancesInsertRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              49,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              41,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists instances under a given project. */
    list: {
      name: "List",
      requestType: SqlInstancesListRequest,
      requestStream: false,
      responseType: InstancesListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              43,
              18,
              41,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all of the trusted Certificate Authorities (CAs) for the specified
     * instance. There can be up to three CAs listed: the CA that was used to sign
     * the certificate that is currently in use, a CA that has been added but not
     * yet used to sign a certificate, and a CA used to sign a certificate that
     * has previously rotated out.
     */
    listServerCas: {
      name: "ListServerCas",
      requestType: SqlInstancesListServerCasRequest,
      requestStream: false,
      responseType: InstancesListServerCasResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              108,
              105,
              115,
              116,
              83,
              101,
              114,
              118,
              101,
              114,
              67,
              97,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Partially updates settings of a Cloud SQL instance by merging the request
     * with the current configuration. This method supports patch semantics.
     */
    patch: {
      name: "Patch",
      requestType: SqlInstancesPatchRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              60,
              58,
              4,
              98,
              111,
              100,
              121,
              50,
              52,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Promotes the read replica instance to be an independent Cloud SQL
     * primary instance.
     * Using this operation might cause your instance to restart.
     */
    promoteReplica: {
      name: "PromoteReplica",
      requestType: SqlInstancesPromoteReplicaRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              69,
              34,
              67,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              112,
              114,
              111,
              109,
              111,
              116,
              101,
              82,
              101,
              112,
              108,
              105,
              99,
              97,
            ]),
          ],
        },
      },
    },
    /**
     * Switches over from the primary instance to the designated DR replica
     * instance.
     */
    switchover: {
      name: "Switchover",
      requestType: SqlInstancesSwitchoverRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              65,
              34,
              63,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              119,
              105,
              116,
              99,
              104,
              111,
              118,
              101,
              114,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes all client certificates and generates a new server SSL certificate
     * for the instance.
     */
    resetSslConfig: {
      name: "ResetSslConfig",
      requestType: SqlInstancesResetSslConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              69,
              34,
              67,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              114,
              101,
              115,
              101,
              116,
              83,
              115,
              108,
              67,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    /** Restarts a Cloud SQL instance. */
    restart: {
      name: "Restart",
      requestType: SqlInstancesRestartRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              62,
              34,
              60,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              114,
              101,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Restores a backup of a Cloud SQL instance. Using this operation might cause
     * your instance to restart.
     */
    restoreBackup: {
      name: "RestoreBackup",
      requestType: SqlInstancesRestoreBackupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              74,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              66,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              66,
              97,
              99,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /**
     * Rotates the server certificate to one signed by the Certificate Authority
     * (CA) version previously added with the addServerCA method.
     */
    rotateServerCa: {
      name: "RotateServerCa",
      requestType: SqlInstancesRotateServerCaRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              75,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              67,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              114,
              111,
              116,
              97,
              116,
              101,
              83,
              101,
              114,
              118,
              101,
              114,
              67,
              97,
            ]),
          ],
        },
      },
    },
    /** Starts the replication in the read replica instance. */
    startReplica: {
      name: "StartReplica",
      requestType: SqlInstancesStartReplicaRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              67,
              34,
              65,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              116,
              97,
              114,
              116,
              82,
              101,
              112,
              108,
              105,
              99,
              97,
            ]),
          ],
        },
      },
    },
    /** Stops the replication in the read replica instance. */
    stopReplica: {
      name: "StopReplica",
      requestType: SqlInstancesStopReplicaRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              66,
              34,
              64,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              116,
              111,
              112,
              82,
              101,
              112,
              108,
              105,
              99,
              97,
            ]),
          ],
        },
      },
    },
    /**
     * Truncate MySQL general and slow query log tables
     * MySQL only.
     */
    truncateLog: {
      name: "TruncateLog",
      requestType: SqlInstancesTruncateLogRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              72,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              64,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              116,
              114,
              117,
              110,
              99,
              97,
              116,
              101,
              76,
              111,
              103,
            ]),
          ],
        },
      },
    },
    /**
     * Updates settings of a Cloud SQL instance. Using this operation might cause
     * your instance to restart.
     */
    update: {
      name: "Update",
      requestType: SqlInstancesUpdateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              60,
              58,
              4,
              98,
              111,
              100,
              121,
              26,
              52,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Generates a short-lived X509 certificate containing the provided public key
     * and signed by a private key specific to the target instance. Users may use
     * the certificate to authenticate as themselves when connecting to the
     * database.
     */
    createEphemeral: {
      name: "CreateEphemeral",
      requestType: SqlInstancesCreateEphemeralCertRequest,
      requestStream: false,
      responseType: SslCert,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              76,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              68,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              99,
              114,
              101,
              97,
              116,
              101,
              69,
              112,
              104,
              101,
              109,
              101,
              114,
              97,
              108,
            ]),
          ],
        },
      },
    },
    /** Reschedules the maintenance on the given instance. */
    rescheduleMaintenance: {
      name: "RescheduleMaintenance",
      requestType: SqlInstancesRescheduleMaintenanceRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              82,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              74,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              114,
              101,
              115,
              99,
              104,
              101,
              100,
              117,
              108,
              101,
              77,
              97,
              105,
              110,
              116,
              101,
              110,
              97,
              110,
              99,
              101,
            ]),
          ],
        },
      },
    },
    /** Verify External primary instance external sync settings. */
    verifyExternalSyncSettings: {
      name: "VerifyExternalSyncSettings",
      requestType: SqlInstancesVerifyExternalSyncSettingsRequest,
      requestStream: false,
      responseType: SqlInstancesVerifyExternalSyncSettingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              84,
              58,
              1,
              42,
              34,
              79,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              83,
              121,
              110,
              99,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Start External primary instance migration. */
    startExternalSync: {
      name: "StartExternalSync",
      requestType: SqlInstancesStartExternalSyncRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              75,
              58,
              1,
              42,
              34,
              70,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              116,
              97,
              114,
              116,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              83,
              121,
              110,
              99,
            ]),
          ],
        },
      },
    },
    /** Perform Disk Shrink on primary instance. */
    performDiskShrink: {
      name: "PerformDiskShrink",
      requestType: SqlInstancesPerformDiskShrinkRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              78,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              70,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              68,
              105,
              115,
              107,
              83,
              104,
              114,
              105,
              110,
              107,
            ]),
          ],
        },
      },
    },
    /** Get Disk Shrink Config for a given instance. */
    getDiskShrinkConfig: {
      name: "GetDiskShrinkConfig",
      requestType: SqlInstancesGetDiskShrinkConfigRequest,
      requestStream: false,
      responseType: SqlInstancesGetDiskShrinkConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              74,
              18,
              72,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              103,
              101,
              116,
              68,
              105,
              115,
              107,
              83,
              104,
              114,
              105,
              110,
              107,
              67,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    /** Reset Replica Size to primary instance disk size. */
    resetReplicaSize: {
      name: "ResetReplicaSize",
      requestType: SqlInstancesResetReplicaSizeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              114,
              101,
              115,
              101,
              116,
              82,
              101,
              112,
              108,
              105,
              99,
              97,
              83,
              105,
              122,
              101,
            ]),
          ],
        },
      },
    },
    /** Get Latest Recovery Time for a given instance. */
    getLatestRecoveryTime: {
      name: "GetLatestRecoveryTime",
      requestType: SqlInstancesGetLatestRecoveryTimeRequest,
      requestStream: false,
      responseType: SqlInstancesGetLatestRecoveryTimeResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              76,
              18,
              74,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              103,
              101,
              116,
              76,
              97,
              116,
              101,
              115,
              116,
              82,
              101,
              99,
              111,
              118,
              101,
              114,
              121,
              84,
              105,
              109,
              101,
            ]),
          ],
        },
      },
    },
    /** Acquire a lease for the setup of SQL Server Reporting Services (SSRS). */
    acquireSsrsLease: {
      name: "AcquireSsrsLease",
      requestType: SqlInstancesAcquireSsrsLeaseRequest,
      requestStream: false,
      responseType: SqlInstancesAcquireSsrsLeaseResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              77,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              69,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              97,
              99,
              113,
              117,
              105,
              114,
              101,
              83,
              115,
              114,
              115,
              76,
              101,
              97,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /** Release a lease for the setup of SQL Server Reporting Services (SSRS). */
    releaseSsrsLease: {
      name: "ReleaseSsrsLease",
      requestType: SqlInstancesReleaseSsrsLeaseRequest,
      requestStream: false,
      responseType: SqlInstancesReleaseSsrsLeaseResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              71,
              34,
              69,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              114,
              101,
              108,
              101,
              97,
              115,
              101,
              83,
              115,
              114,
              115,
              76,
              101,
              97,
              115,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SqlInstancesServiceImplementation<CallContextExt = {}> {
  /**
   * Add a new trusted Certificate Authority (CA) version for the specified
   * instance. Required to prepare for a certificate rotation. If a CA version
   * was previously added but never used in a certificate rotation, this
   * operation replaces that version. There cannot be more than one CA version
   * waiting to be rotated in.
   */
  addServerCa(
    request: SqlInstancesAddServerCaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Creates a Cloud SQL instance as a clone of the source instance. Using this
   * operation might cause your instance to restart.
   */
  clone(request: SqlInstancesCloneRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a Cloud SQL instance. */
  delete(request: SqlInstancesDeleteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Demotes the stand-alone instance to be a Cloud SQL read replica for an
   * external database server.
   */
  demoteMaster(
    request: SqlInstancesDemoteMasterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Demotes an existing standalone instance to be a Cloud SQL read replica
   * for an external database server.
   */
  demote(request: SqlInstancesDemoteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL
   * dump or CSV file.
   */
  export(request: SqlInstancesExportRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Initiates a manual failover of a high availability (HA) primary instance
   * to a standby instance, which becomes the primary instance. Users are
   * then rerouted to the new primary. For more information, see the
   * [Overview of high
   * availability](https://cloud.google.com/sql/docs/mysql/high-availability)
   * page in the Cloud SQL documentation.
   * If using Legacy HA (MySQL only), this causes the instance to failover to
   * its failover replica instance.
   */
  failover(
    request: SqlInstancesFailoverRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Reencrypt CMEK instance with latest key version. */
  reencrypt(
    request: SqlInstancesReencryptRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Retrieves a resource containing information about a Cloud SQL instance. */
  get(request: SqlInstancesGetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DatabaseInstance>>;
  /**
   * Imports data into a Cloud SQL instance from a SQL dump  or CSV file in
   * Cloud Storage.
   */
  import(request: SqlInstancesImportRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Creates a new Cloud SQL instance. */
  insert(request: SqlInstancesInsertRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Lists instances under a given project. */
  list(
    request: SqlInstancesListRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<InstancesListResponse>>;
  /**
   * Lists all of the trusted Certificate Authorities (CAs) for the specified
   * instance. There can be up to three CAs listed: the CA that was used to sign
   * the certificate that is currently in use, a CA that has been added but not
   * yet used to sign a certificate, and a CA used to sign a certificate that
   * has previously rotated out.
   */
  listServerCas(
    request: SqlInstancesListServerCasRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<InstancesListServerCasResponse>>;
  /**
   * Partially updates settings of a Cloud SQL instance by merging the request
   * with the current configuration. This method supports patch semantics.
   */
  patch(request: SqlInstancesPatchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Promotes the read replica instance to be an independent Cloud SQL
   * primary instance.
   * Using this operation might cause your instance to restart.
   */
  promoteReplica(
    request: SqlInstancesPromoteReplicaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Switches over from the primary instance to the designated DR replica
   * instance.
   */
  switchover(
    request: SqlInstancesSwitchoverRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes all client certificates and generates a new server SSL certificate
   * for the instance.
   */
  resetSslConfig(
    request: SqlInstancesResetSslConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Restarts a Cloud SQL instance. */
  restart(request: SqlInstancesRestartRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Restores a backup of a Cloud SQL instance. Using this operation might cause
   * your instance to restart.
   */
  restoreBackup(
    request: SqlInstancesRestoreBackupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Rotates the server certificate to one signed by the Certificate Authority
   * (CA) version previously added with the addServerCA method.
   */
  rotateServerCa(
    request: SqlInstancesRotateServerCaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Starts the replication in the read replica instance. */
  startReplica(
    request: SqlInstancesStartReplicaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Stops the replication in the read replica instance. */
  stopReplica(
    request: SqlInstancesStopReplicaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Truncate MySQL general and slow query log tables
   * MySQL only.
   */
  truncateLog(
    request: SqlInstancesTruncateLogRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates settings of a Cloud SQL instance. Using this operation might cause
   * your instance to restart.
   */
  update(request: SqlInstancesUpdateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Generates a short-lived X509 certificate containing the provided public key
   * and signed by a private key specific to the target instance. Users may use
   * the certificate to authenticate as themselves when connecting to the
   * database.
   */
  createEphemeral(
    request: SqlInstancesCreateEphemeralCertRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SslCert>>;
  /** Reschedules the maintenance on the given instance. */
  rescheduleMaintenance(
    request: SqlInstancesRescheduleMaintenanceRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Verify External primary instance external sync settings. */
  verifyExternalSyncSettings(
    request: SqlInstancesVerifyExternalSyncSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SqlInstancesVerifyExternalSyncSettingsResponse>>;
  /** Start External primary instance migration. */
  startExternalSync(
    request: SqlInstancesStartExternalSyncRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Perform Disk Shrink on primary instance. */
  performDiskShrink(
    request: SqlInstancesPerformDiskShrinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Get Disk Shrink Config for a given instance. */
  getDiskShrinkConfig(
    request: SqlInstancesGetDiskShrinkConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SqlInstancesGetDiskShrinkConfigResponse>>;
  /** Reset Replica Size to primary instance disk size. */
  resetReplicaSize(
    request: SqlInstancesResetReplicaSizeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Get Latest Recovery Time for a given instance. */
  getLatestRecoveryTime(
    request: SqlInstancesGetLatestRecoveryTimeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SqlInstancesGetLatestRecoveryTimeResponse>>;
  /** Acquire a lease for the setup of SQL Server Reporting Services (SSRS). */
  acquireSsrsLease(
    request: SqlInstancesAcquireSsrsLeaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SqlInstancesAcquireSsrsLeaseResponse>>;
  /** Release a lease for the setup of SQL Server Reporting Services (SSRS). */
  releaseSsrsLease(
    request: SqlInstancesReleaseSsrsLeaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SqlInstancesReleaseSsrsLeaseResponse>>;
}

export interface SqlInstancesServiceClient<CallOptionsExt = {}> {
  /**
   * Add a new trusted Certificate Authority (CA) version for the specified
   * instance. Required to prepare for a certificate rotation. If a CA version
   * was previously added but never used in a certificate rotation, this
   * operation replaces that version. There cannot be more than one CA version
   * waiting to be rotated in.
   */
  addServerCa(
    request: DeepPartial<SqlInstancesAddServerCaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Creates a Cloud SQL instance as a clone of the source instance. Using this
   * operation might cause your instance to restart.
   */
  clone(request: DeepPartial<SqlInstancesCloneRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a Cloud SQL instance. */
  delete(request: DeepPartial<SqlInstancesDeleteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Demotes the stand-alone instance to be a Cloud SQL read replica for an
   * external database server.
   */
  demoteMaster(
    request: DeepPartial<SqlInstancesDemoteMasterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Demotes an existing standalone instance to be a Cloud SQL read replica
   * for an external database server.
   */
  demote(request: DeepPartial<SqlInstancesDemoteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL
   * dump or CSV file.
   */
  export(request: DeepPartial<SqlInstancesExportRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Initiates a manual failover of a high availability (HA) primary instance
   * to a standby instance, which becomes the primary instance. Users are
   * then rerouted to the new primary. For more information, see the
   * [Overview of high
   * availability](https://cloud.google.com/sql/docs/mysql/high-availability)
   * page in the Cloud SQL documentation.
   * If using Legacy HA (MySQL only), this causes the instance to failover to
   * its failover replica instance.
   */
  failover(
    request: DeepPartial<SqlInstancesFailoverRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Reencrypt CMEK instance with latest key version. */
  reencrypt(
    request: DeepPartial<SqlInstancesReencryptRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Retrieves a resource containing information about a Cloud SQL instance. */
  get(request: DeepPartial<SqlInstancesGetRequest>, options?: CallOptions & CallOptionsExt): Promise<DatabaseInstance>;
  /**
   * Imports data into a Cloud SQL instance from a SQL dump  or CSV file in
   * Cloud Storage.
   */
  import(request: DeepPartial<SqlInstancesImportRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Creates a new Cloud SQL instance. */
  insert(request: DeepPartial<SqlInstancesInsertRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Lists instances under a given project. */
  list(
    request: DeepPartial<SqlInstancesListRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<InstancesListResponse>;
  /**
   * Lists all of the trusted Certificate Authorities (CAs) for the specified
   * instance. There can be up to three CAs listed: the CA that was used to sign
   * the certificate that is currently in use, a CA that has been added but not
   * yet used to sign a certificate, and a CA used to sign a certificate that
   * has previously rotated out.
   */
  listServerCas(
    request: DeepPartial<SqlInstancesListServerCasRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<InstancesListServerCasResponse>;
  /**
   * Partially updates settings of a Cloud SQL instance by merging the request
   * with the current configuration. This method supports patch semantics.
   */
  patch(request: DeepPartial<SqlInstancesPatchRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Promotes the read replica instance to be an independent Cloud SQL
   * primary instance.
   * Using this operation might cause your instance to restart.
   */
  promoteReplica(
    request: DeepPartial<SqlInstancesPromoteReplicaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Switches over from the primary instance to the designated DR replica
   * instance.
   */
  switchover(
    request: DeepPartial<SqlInstancesSwitchoverRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes all client certificates and generates a new server SSL certificate
   * for the instance.
   */
  resetSslConfig(
    request: DeepPartial<SqlInstancesResetSslConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Restarts a Cloud SQL instance. */
  restart(request: DeepPartial<SqlInstancesRestartRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Restores a backup of a Cloud SQL instance. Using this operation might cause
   * your instance to restart.
   */
  restoreBackup(
    request: DeepPartial<SqlInstancesRestoreBackupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Rotates the server certificate to one signed by the Certificate Authority
   * (CA) version previously added with the addServerCA method.
   */
  rotateServerCa(
    request: DeepPartial<SqlInstancesRotateServerCaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Starts the replication in the read replica instance. */
  startReplica(
    request: DeepPartial<SqlInstancesStartReplicaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Stops the replication in the read replica instance. */
  stopReplica(
    request: DeepPartial<SqlInstancesStopReplicaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Truncate MySQL general and slow query log tables
   * MySQL only.
   */
  truncateLog(
    request: DeepPartial<SqlInstancesTruncateLogRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates settings of a Cloud SQL instance. Using this operation might cause
   * your instance to restart.
   */
  update(request: DeepPartial<SqlInstancesUpdateRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Generates a short-lived X509 certificate containing the provided public key
   * and signed by a private key specific to the target instance. Users may use
   * the certificate to authenticate as themselves when connecting to the
   * database.
   */
  createEphemeral(
    request: DeepPartial<SqlInstancesCreateEphemeralCertRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SslCert>;
  /** Reschedules the maintenance on the given instance. */
  rescheduleMaintenance(
    request: DeepPartial<SqlInstancesRescheduleMaintenanceRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Verify External primary instance external sync settings. */
  verifyExternalSyncSettings(
    request: DeepPartial<SqlInstancesVerifyExternalSyncSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SqlInstancesVerifyExternalSyncSettingsResponse>;
  /** Start External primary instance migration. */
  startExternalSync(
    request: DeepPartial<SqlInstancesStartExternalSyncRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Perform Disk Shrink on primary instance. */
  performDiskShrink(
    request: DeepPartial<SqlInstancesPerformDiskShrinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Get Disk Shrink Config for a given instance. */
  getDiskShrinkConfig(
    request: DeepPartial<SqlInstancesGetDiskShrinkConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SqlInstancesGetDiskShrinkConfigResponse>;
  /** Reset Replica Size to primary instance disk size. */
  resetReplicaSize(
    request: DeepPartial<SqlInstancesResetReplicaSizeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Get Latest Recovery Time for a given instance. */
  getLatestRecoveryTime(
    request: DeepPartial<SqlInstancesGetLatestRecoveryTimeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SqlInstancesGetLatestRecoveryTimeResponse>;
  /** Acquire a lease for the setup of SQL Server Reporting Services (SSRS). */
  acquireSsrsLease(
    request: DeepPartial<SqlInstancesAcquireSsrsLeaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SqlInstancesAcquireSsrsLeaseResponse>;
  /** Release a lease for the setup of SQL Server Reporting Services (SSRS). */
  releaseSsrsLease(
    request: DeepPartial<SqlInstancesReleaseSsrsLeaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SqlInstancesReleaseSsrsLeaseResponse>;
}

export type SqlOperationsServiceDefinition = typeof SqlOperationsServiceDefinition;
export const SqlOperationsServiceDefinition = {
  name: "SqlOperationsService",
  fullName: "google.cloud.sql.v1beta4.SqlOperationsService",
  methods: {
    /** Retrieves an instance operation that has been performed on an instance. */
    get: {
      name: "Get",
      requestType: SqlOperationsGetRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists all instance operations that have been performed on the given Cloud
     * SQL instance in the reverse chronological order of the start time.
     */
    list: {
      name: "List",
      requestType: SqlOperationsListRequest,
      requestStream: false,
      responseType: OperationsListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              44,
              18,
              42,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Cancels an instance operation that has been performed on an instance. */
    cancel: {
      name: "Cancel",
      requestType: SqlOperationsCancelRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              63,
              34,
              61,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              125,
              47,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SqlOperationsServiceImplementation<CallContextExt = {}> {
  /** Retrieves an instance operation that has been performed on an instance. */
  get(request: SqlOperationsGetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Lists all instance operations that have been performed on the given Cloud
   * SQL instance in the reverse chronological order of the start time.
   */
  list(
    request: SqlOperationsListRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<OperationsListResponse>>;
  /** Cancels an instance operation that has been performed on an instance. */
  cancel(request: SqlOperationsCancelRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface SqlOperationsServiceClient<CallOptionsExt = {}> {
  /** Retrieves an instance operation that has been performed on an instance. */
  get(request: DeepPartial<SqlOperationsGetRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Lists all instance operations that have been performed on the given Cloud
   * SQL instance in the reverse chronological order of the start time.
   */
  list(
    request: DeepPartial<SqlOperationsListRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<OperationsListResponse>;
  /** Cancels an instance operation that has been performed on an instance. */
  cancel(request: DeepPartial<SqlOperationsCancelRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

export type SqlSslCertsServiceDefinition = typeof SqlSslCertsServiceDefinition;
export const SqlSslCertsServiceDefinition = {
  name: "SqlSslCertsService",
  fullName: "google.cloud.sql.v1beta4.SqlSslCertsService",
  methods: {
    /**
     * Deletes the SSL certificate. For First Generation instances, the
     * certificate remains valid until the instance is restarted.
     */
    delete: {
      name: "Delete",
      requestType: SqlSslCertsDeleteRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              82,
              42,
              80,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              115,
              108,
              67,
              101,
              114,
              116,
              115,
              47,
              123,
              115,
              104,
              97,
              49,
              95,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves a particular SSL certificate.  Does not include the private key
     * (required for usage).  The private key must be saved from the response to
     * initial creation.
     */
    get: {
      name: "Get",
      requestType: SqlSslCertsGetRequest,
      requestStream: false,
      responseType: SslCert,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              82,
              18,
              80,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              115,
              108,
              67,
              101,
              114,
              116,
              115,
              47,
              123,
              115,
              104,
              97,
              49,
              95,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an SSL certificate and returns it along with the private key and
     * server certificate authority.  The new certificate will not be usable until
     * the instance is restarted.
     */
    insert: {
      name: "Insert",
      requestType: SqlSslCertsInsertRequest,
      requestStream: false,
      responseType: SslCertsInsertResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              69,
              58,
              4,
              98,
              111,
              100,
              121,
              34,
              61,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              115,
              108,
              67,
              101,
              114,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists all of the current SSL certificates for the instance. */
    list: {
      name: "List",
      requestType: SqlSslCertsListRequest,
      requestStream: false,
      responseType: SslCertsListResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              63,
              18,
              61,
              47,
              115,
              113,
              108,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              125,
              47,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              123,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              125,
              47,
              115,
              115,
              108,
              67,
              101,
              114,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SqlSslCertsServiceImplementation<CallContextExt = {}> {
  /**
   * Deletes the SSL certificate. For First Generation instances, the
   * certificate remains valid until the instance is restarted.
   */
  delete(request: SqlSslCertsDeleteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Retrieves a particular SSL certificate.  Does not include the private key
   * (required for usage).  The private key must be saved from the response to
   * initial creation.
   */
  get(request: SqlSslCertsGetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SslCert>>;
  /**
   * Creates an SSL certificate and returns it along with the private key and
   * server certificate authority.  The new certificate will not be usable until
   * the instance is restarted.
   */
  insert(
    request: SqlSslCertsInsertRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SslCertsInsertResponse>>;
  /** Lists all of the current SSL certificates for the instance. */
  list(
    request: SqlSslCertsListRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SslCertsListResponse>>;
}

export interface SqlSslCertsServiceClient<CallOptionsExt = {}> {
  /**
   * Deletes the SSL certificate. For First Generation instances, the
   * certificate remains valid until the instance is restarted.
   */
  delete(request: DeepPartial<SqlSslCertsDeleteRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Retrieves a particular SSL certificate.  Does not include the private key
   * (required for usage).  The private key must be saved from the response to
   * initial creation.
   */
  get(request: DeepPartial<SqlSslCertsGetRequest>, options?: CallOptions & CallOptionsExt): Promise<SslCert>;
  /**
   * Creates an SSL certificate and returns it along with the private key and
   * server certificate authority.  The new certificate will not be usable until
   * the instance is restarted.
   */
  insert(
    request: DeepPartial<SqlSslCertsInsertRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SslCertsInsertResponse>;
  /** Lists all of the current SSL certificates for the instance. */
  list(
    request: DeepPartial<SqlSslCertsListRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SslCertsListResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
