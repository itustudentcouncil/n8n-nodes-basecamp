// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/contentwarehouse/v1/pipeline_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { RequestMetadata } from "./common.js";
import {
  ExportToCdwPipeline,
  GcsIngestPipeline,
  GcsIngestWithDocAiProcessorsPipeline,
  ProcessWithDocAiPipeline,
} from "./pipelines.js";

export const protobufPackage = "google.cloud.contentwarehouse.v1";

/** Request message for DocumentService.RunPipeline. */
export interface RunPipelineRequest {
  /**
   * Required. The resource name which owns the resources of the pipeline.
   * Format: projects/{project_number}/locations/{location}.
   */
  name: string;
  /** Cloud Storage ingestion pipeline. */
  gcsIngestPipeline?:
    | GcsIngestPipeline
    | undefined;
  /**
   * Use DocAI processors to process documents in Cloud Storage and ingest
   * them to Document Warehouse.
   */
  gcsIngestWithDocAiProcessorsPipeline?:
    | GcsIngestWithDocAiProcessorsPipeline
    | undefined;
  /** Export docuemnts from Document Warehouse to CDW for training purpose. */
  exportCdwPipeline?:
    | ExportToCdwPipeline
    | undefined;
  /**
   * Use a DocAI processor to process documents in Document Warehouse, and
   * re-ingest the updated results into Document Warehouse.
   */
  processWithDocAiPipeline?:
    | ProcessWithDocAiPipeline
    | undefined;
  /**
   * The meta information collected about the end user, used to enforce access
   * control for the service.
   */
  requestMetadata: RequestMetadata | undefined;
}

function createBaseRunPipelineRequest(): RunPipelineRequest {
  return {
    name: "",
    gcsIngestPipeline: undefined,
    gcsIngestWithDocAiProcessorsPipeline: undefined,
    exportCdwPipeline: undefined,
    processWithDocAiPipeline: undefined,
    requestMetadata: undefined,
  };
}

export const RunPipelineRequest: MessageFns<RunPipelineRequest> = {
  encode(message: RunPipelineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.gcsIngestPipeline !== undefined) {
      GcsIngestPipeline.encode(message.gcsIngestPipeline, writer.uint32(18).fork()).join();
    }
    if (message.gcsIngestWithDocAiProcessorsPipeline !== undefined) {
      GcsIngestWithDocAiProcessorsPipeline.encode(
        message.gcsIngestWithDocAiProcessorsPipeline,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.exportCdwPipeline !== undefined) {
      ExportToCdwPipeline.encode(message.exportCdwPipeline, writer.uint32(34).fork()).join();
    }
    if (message.processWithDocAiPipeline !== undefined) {
      ProcessWithDocAiPipeline.encode(message.processWithDocAiPipeline, writer.uint32(42).fork()).join();
    }
    if (message.requestMetadata !== undefined) {
      RequestMetadata.encode(message.requestMetadata, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunPipelineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunPipelineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsIngestPipeline = GcsIngestPipeline.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gcsIngestWithDocAiProcessorsPipeline = GcsIngestWithDocAiProcessorsPipeline.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.exportCdwPipeline = ExportToCdwPipeline.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.processWithDocAiPipeline = ProcessWithDocAiPipeline.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.requestMetadata = RequestMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunPipelineRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      gcsIngestPipeline: isSet(object.gcsIngestPipeline)
        ? GcsIngestPipeline.fromJSON(object.gcsIngestPipeline)
        : undefined,
      gcsIngestWithDocAiProcessorsPipeline: isSet(object.gcsIngestWithDocAiProcessorsPipeline)
        ? GcsIngestWithDocAiProcessorsPipeline.fromJSON(object.gcsIngestWithDocAiProcessorsPipeline)
        : undefined,
      exportCdwPipeline: isSet(object.exportCdwPipeline)
        ? ExportToCdwPipeline.fromJSON(object.exportCdwPipeline)
        : undefined,
      processWithDocAiPipeline: isSet(object.processWithDocAiPipeline)
        ? ProcessWithDocAiPipeline.fromJSON(object.processWithDocAiPipeline)
        : undefined,
      requestMetadata: isSet(object.requestMetadata) ? RequestMetadata.fromJSON(object.requestMetadata) : undefined,
    };
  },

  toJSON(message: RunPipelineRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.gcsIngestPipeline !== undefined) {
      obj.gcsIngestPipeline = GcsIngestPipeline.toJSON(message.gcsIngestPipeline);
    }
    if (message.gcsIngestWithDocAiProcessorsPipeline !== undefined) {
      obj.gcsIngestWithDocAiProcessorsPipeline = GcsIngestWithDocAiProcessorsPipeline.toJSON(
        message.gcsIngestWithDocAiProcessorsPipeline,
      );
    }
    if (message.exportCdwPipeline !== undefined) {
      obj.exportCdwPipeline = ExportToCdwPipeline.toJSON(message.exportCdwPipeline);
    }
    if (message.processWithDocAiPipeline !== undefined) {
      obj.processWithDocAiPipeline = ProcessWithDocAiPipeline.toJSON(message.processWithDocAiPipeline);
    }
    if (message.requestMetadata !== undefined) {
      obj.requestMetadata = RequestMetadata.toJSON(message.requestMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<RunPipelineRequest>): RunPipelineRequest {
    return RunPipelineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunPipelineRequest>): RunPipelineRequest {
    const message = createBaseRunPipelineRequest();
    message.name = object.name ?? "";
    message.gcsIngestPipeline = (object.gcsIngestPipeline !== undefined && object.gcsIngestPipeline !== null)
      ? GcsIngestPipeline.fromPartial(object.gcsIngestPipeline)
      : undefined;
    message.gcsIngestWithDocAiProcessorsPipeline =
      (object.gcsIngestWithDocAiProcessorsPipeline !== undefined &&
          object.gcsIngestWithDocAiProcessorsPipeline !== null)
        ? GcsIngestWithDocAiProcessorsPipeline.fromPartial(object.gcsIngestWithDocAiProcessorsPipeline)
        : undefined;
    message.exportCdwPipeline = (object.exportCdwPipeline !== undefined && object.exportCdwPipeline !== null)
      ? ExportToCdwPipeline.fromPartial(object.exportCdwPipeline)
      : undefined;
    message.processWithDocAiPipeline =
      (object.processWithDocAiPipeline !== undefined && object.processWithDocAiPipeline !== null)
        ? ProcessWithDocAiPipeline.fromPartial(object.processWithDocAiPipeline)
        : undefined;
    message.requestMetadata = (object.requestMetadata !== undefined && object.requestMetadata !== null)
      ? RequestMetadata.fromPartial(object.requestMetadata)
      : undefined;
    return message;
  },
};

/** This service lets you manage pipelines. */
export type PipelineServiceDefinition = typeof PipelineServiceDefinition;
export const PipelineServiceDefinition = {
  name: "PipelineService",
  fullName: "google.cloud.contentwarehouse.v1.PipelineService",
  methods: {
    /** Run a predefined pipeline. */
    runPipeline: {
      name: "RunPipeline",
      requestType: RunPipelineRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              19,
              82,
              117,
              110,
              80,
              105,
              112,
              101,
              108,
              105,
              110,
              101,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              19,
              82,
              117,
              110,
              80,
              105,
              112,
              101,
              108,
              105,
              110,
              101,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              58,
              1,
              42,
              34,
              45,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              114,
              117,
              110,
              80,
              105,
              112,
              101,
              108,
              105,
              110,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PipelineServiceImplementation<CallContextExt = {}> {
  /** Run a predefined pipeline. */
  runPipeline(request: RunPipelineRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface PipelineServiceClient<CallOptionsExt = {}> {
  /** Run a predefined pipeline. */
  runPipeline(request: DeepPartial<RunPipelineRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
