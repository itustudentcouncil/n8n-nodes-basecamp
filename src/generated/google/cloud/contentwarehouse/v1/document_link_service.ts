// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/contentwarehouse/v1/document_link_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { RequestMetadata } from "./common.js";
import { DocumentReference } from "./document.js";

export const protobufPackage = "google.cloud.contentwarehouse.v1";

/** Response message for DocumentLinkService.ListLinkedTargets. */
export interface ListLinkedTargetsResponse {
  /** Target document-links. */
  documentLinks: DocumentLink[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Request message for DocumentLinkService.ListLinkedTargets. */
export interface ListLinkedTargetsRequest {
  /**
   * Required. The name of the document, for which all target links are
   * returned. Format:
   * projects/{project_number}/locations/{location}/documents/{target_document_id}.
   */
  parent: string;
  /**
   * The meta information collected about the document creator, used to enforce
   * access control for the service.
   */
  requestMetadata: RequestMetadata | undefined;
}

/** Response message for DocumentLinkService.ListLinkedSources. */
export interface ListLinkedSourcesResponse {
  /** Source document-links. */
  documentLinks: DocumentLink[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/** Response message for DocumentLinkService.ListLinkedSources. */
export interface ListLinkedSourcesRequest {
  /**
   * Required. The name of the document, for which all source links are
   * returned. Format:
   * projects/{project_number}/locations/{location}/documents/{source_document_id}.
   */
  parent: string;
  /**
   * The maximum number of document-links to return. The service may return
   * fewer than this value.
   *
   * If unspecified, at most 50 document-links will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListLinkedSources` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListLinkedSources`
   * must match the call that provided the page token.
   */
  pageToken: string;
  /**
   * The meta information collected about the document creator, used to enforce
   * access control for the service.
   */
  requestMetadata: RequestMetadata | undefined;
}

/** A document-link between source and target document. */
export interface DocumentLink {
  /**
   * Name of this document-link.
   * It is required that the parent derived form the name to be consistent with
   * the source document reference. Otherwise an exception will be thrown.
   * Format:
   * projects/{project_number}/locations/{location}/documents/{source_document_id}/documentLinks/{document_link_id}.
   */
  name: string;
  /** Document references of the source document. */
  sourceDocumentReference:
    | DocumentReference
    | undefined;
  /** Document references of the target document. */
  targetDocumentReference:
    | DocumentReference
    | undefined;
  /** Description of this document-link. */
  description: string;
  /** Output only. The time when the documentLink is last updated. */
  updateTime:
    | Date
    | undefined;
  /** Output only. The time when the documentLink is created. */
  createTime:
    | Date
    | undefined;
  /**
   * The state of the documentlink. If target node has been deleted, the
   * link is marked as invalid. Removing a source node will result in removal
   * of all associated links.
   */
  state: DocumentLink_State;
}

/** The state of a document-link. */
export enum DocumentLink_State {
  /** STATE_UNSPECIFIED - Unknown state of documentlink. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The documentlink has both source and target documents detected. */
  ACTIVE = 1,
  /** SOFT_DELETED - Target document is deleted, and mark the documentlink as soft-deleted. */
  SOFT_DELETED = 2,
  UNRECOGNIZED = -1,
}

export function documentLink_StateFromJSON(object: any): DocumentLink_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return DocumentLink_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return DocumentLink_State.ACTIVE;
    case 2:
    case "SOFT_DELETED":
      return DocumentLink_State.SOFT_DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DocumentLink_State.UNRECOGNIZED;
  }
}

export function documentLink_StateToJSON(object: DocumentLink_State): string {
  switch (object) {
    case DocumentLink_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case DocumentLink_State.ACTIVE:
      return "ACTIVE";
    case DocumentLink_State.SOFT_DELETED:
      return "SOFT_DELETED";
    case DocumentLink_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for DocumentLinkService.CreateDocumentLink. */
export interface CreateDocumentLinkRequest {
  /**
   * Required. Parent of the document-link to be created.
   * parent of document-link should be a document.
   * Format:
   * projects/{project_number}/locations/{location}/documents/{source_document_id}.
   */
  parent: string;
  /**
   * Required. Document links associated with the source documents
   * (source_document_id).
   */
  documentLink:
    | DocumentLink
    | undefined;
  /**
   * The meta information collected about the document creator, used to enforce
   * access control for the service.
   */
  requestMetadata: RequestMetadata | undefined;
}

/** Request message for DocumentLinkService.DeleteDocumentLink. */
export interface DeleteDocumentLinkRequest {
  /**
   * Required. The name of the document-link to be deleted.
   * Format:
   * projects/{project_number}/locations/{location}/documents/{source_document_id}/documentLinks/{document_link_id}.
   */
  name: string;
  /**
   * The meta information collected about the document creator, used to enforce
   * access control for the service.
   */
  requestMetadata: RequestMetadata | undefined;
}

function createBaseListLinkedTargetsResponse(): ListLinkedTargetsResponse {
  return { documentLinks: [], nextPageToken: "" };
}

export const ListLinkedTargetsResponse: MessageFns<ListLinkedTargetsResponse> = {
  encode(message: ListLinkedTargetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.documentLinks) {
      DocumentLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLinkedTargetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLinkedTargetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.documentLinks.push(DocumentLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLinkedTargetsResponse {
    return {
      documentLinks: globalThis.Array.isArray(object?.documentLinks)
        ? object.documentLinks.map((e: any) => DocumentLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListLinkedTargetsResponse): unknown {
    const obj: any = {};
    if (message.documentLinks?.length) {
      obj.documentLinks = message.documentLinks.map((e) => DocumentLink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLinkedTargetsResponse>): ListLinkedTargetsResponse {
    return ListLinkedTargetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLinkedTargetsResponse>): ListLinkedTargetsResponse {
    const message = createBaseListLinkedTargetsResponse();
    message.documentLinks = object.documentLinks?.map((e) => DocumentLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListLinkedTargetsRequest(): ListLinkedTargetsRequest {
  return { parent: "", requestMetadata: undefined };
}

export const ListLinkedTargetsRequest: MessageFns<ListLinkedTargetsRequest> = {
  encode(message: ListLinkedTargetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.requestMetadata !== undefined) {
      RequestMetadata.encode(message.requestMetadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLinkedTargetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLinkedTargetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestMetadata = RequestMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLinkedTargetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requestMetadata: isSet(object.requestMetadata) ? RequestMetadata.fromJSON(object.requestMetadata) : undefined,
    };
  },

  toJSON(message: ListLinkedTargetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requestMetadata !== undefined) {
      obj.requestMetadata = RequestMetadata.toJSON(message.requestMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<ListLinkedTargetsRequest>): ListLinkedTargetsRequest {
    return ListLinkedTargetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLinkedTargetsRequest>): ListLinkedTargetsRequest {
    const message = createBaseListLinkedTargetsRequest();
    message.parent = object.parent ?? "";
    message.requestMetadata = (object.requestMetadata !== undefined && object.requestMetadata !== null)
      ? RequestMetadata.fromPartial(object.requestMetadata)
      : undefined;
    return message;
  },
};

function createBaseListLinkedSourcesResponse(): ListLinkedSourcesResponse {
  return { documentLinks: [], nextPageToken: "" };
}

export const ListLinkedSourcesResponse: MessageFns<ListLinkedSourcesResponse> = {
  encode(message: ListLinkedSourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.documentLinks) {
      DocumentLink.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLinkedSourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLinkedSourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.documentLinks.push(DocumentLink.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLinkedSourcesResponse {
    return {
      documentLinks: globalThis.Array.isArray(object?.documentLinks)
        ? object.documentLinks.map((e: any) => DocumentLink.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListLinkedSourcesResponse): unknown {
    const obj: any = {};
    if (message.documentLinks?.length) {
      obj.documentLinks = message.documentLinks.map((e) => DocumentLink.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListLinkedSourcesResponse>): ListLinkedSourcesResponse {
    return ListLinkedSourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLinkedSourcesResponse>): ListLinkedSourcesResponse {
    const message = createBaseListLinkedSourcesResponse();
    message.documentLinks = object.documentLinks?.map((e) => DocumentLink.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseListLinkedSourcesRequest(): ListLinkedSourcesRequest {
  return { parent: "", pageSize: 0, pageToken: "", requestMetadata: undefined };
}

export const ListLinkedSourcesRequest: MessageFns<ListLinkedSourcesRequest> = {
  encode(message: ListLinkedSourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.requestMetadata !== undefined) {
      RequestMetadata.encode(message.requestMetadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLinkedSourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLinkedSourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestMetadata = RequestMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLinkedSourcesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      requestMetadata: isSet(object.requestMetadata) ? RequestMetadata.fromJSON(object.requestMetadata) : undefined,
    };
  },

  toJSON(message: ListLinkedSourcesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.requestMetadata !== undefined) {
      obj.requestMetadata = RequestMetadata.toJSON(message.requestMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<ListLinkedSourcesRequest>): ListLinkedSourcesRequest {
    return ListLinkedSourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLinkedSourcesRequest>): ListLinkedSourcesRequest {
    const message = createBaseListLinkedSourcesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.requestMetadata = (object.requestMetadata !== undefined && object.requestMetadata !== null)
      ? RequestMetadata.fromPartial(object.requestMetadata)
      : undefined;
    return message;
  },
};

function createBaseDocumentLink(): DocumentLink {
  return {
    name: "",
    sourceDocumentReference: undefined,
    targetDocumentReference: undefined,
    description: "",
    updateTime: undefined,
    createTime: undefined,
    state: 0,
  };
}

export const DocumentLink: MessageFns<DocumentLink> = {
  encode(message: DocumentLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.sourceDocumentReference !== undefined) {
      DocumentReference.encode(message.sourceDocumentReference, writer.uint32(18).fork()).join();
    }
    if (message.targetDocumentReference !== undefined) {
      DocumentReference.encode(message.targetDocumentReference, writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sourceDocumentReference = DocumentReference.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targetDocumentReference = DocumentReference.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentLink {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      sourceDocumentReference: isSet(object.sourceDocumentReference)
        ? DocumentReference.fromJSON(object.sourceDocumentReference)
        : undefined,
      targetDocumentReference: isSet(object.targetDocumentReference)
        ? DocumentReference.fromJSON(object.targetDocumentReference)
        : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      state: isSet(object.state) ? documentLink_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: DocumentLink): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.sourceDocumentReference !== undefined) {
      obj.sourceDocumentReference = DocumentReference.toJSON(message.sourceDocumentReference);
    }
    if (message.targetDocumentReference !== undefined) {
      obj.targetDocumentReference = DocumentReference.toJSON(message.targetDocumentReference);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = documentLink_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentLink>): DocumentLink {
    return DocumentLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentLink>): DocumentLink {
    const message = createBaseDocumentLink();
    message.name = object.name ?? "";
    message.sourceDocumentReference =
      (object.sourceDocumentReference !== undefined && object.sourceDocumentReference !== null)
        ? DocumentReference.fromPartial(object.sourceDocumentReference)
        : undefined;
    message.targetDocumentReference =
      (object.targetDocumentReference !== undefined && object.targetDocumentReference !== null)
        ? DocumentReference.fromPartial(object.targetDocumentReference)
        : undefined;
    message.description = object.description ?? "";
    message.updateTime = object.updateTime ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseCreateDocumentLinkRequest(): CreateDocumentLinkRequest {
  return { parent: "", documentLink: undefined, requestMetadata: undefined };
}

export const CreateDocumentLinkRequest: MessageFns<CreateDocumentLinkRequest> = {
  encode(message: CreateDocumentLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.documentLink !== undefined) {
      DocumentLink.encode(message.documentLink, writer.uint32(18).fork()).join();
    }
    if (message.requestMetadata !== undefined) {
      RequestMetadata.encode(message.requestMetadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDocumentLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDocumentLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.documentLink = DocumentLink.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestMetadata = RequestMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDocumentLinkRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      documentLink: isSet(object.documentLink) ? DocumentLink.fromJSON(object.documentLink) : undefined,
      requestMetadata: isSet(object.requestMetadata) ? RequestMetadata.fromJSON(object.requestMetadata) : undefined,
    };
  },

  toJSON(message: CreateDocumentLinkRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.documentLink !== undefined) {
      obj.documentLink = DocumentLink.toJSON(message.documentLink);
    }
    if (message.requestMetadata !== undefined) {
      obj.requestMetadata = RequestMetadata.toJSON(message.requestMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDocumentLinkRequest>): CreateDocumentLinkRequest {
    return CreateDocumentLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDocumentLinkRequest>): CreateDocumentLinkRequest {
    const message = createBaseCreateDocumentLinkRequest();
    message.parent = object.parent ?? "";
    message.documentLink = (object.documentLink !== undefined && object.documentLink !== null)
      ? DocumentLink.fromPartial(object.documentLink)
      : undefined;
    message.requestMetadata = (object.requestMetadata !== undefined && object.requestMetadata !== null)
      ? RequestMetadata.fromPartial(object.requestMetadata)
      : undefined;
    return message;
  },
};

function createBaseDeleteDocumentLinkRequest(): DeleteDocumentLinkRequest {
  return { name: "", requestMetadata: undefined };
}

export const DeleteDocumentLinkRequest: MessageFns<DeleteDocumentLinkRequest> = {
  encode(message: DeleteDocumentLinkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestMetadata !== undefined) {
      RequestMetadata.encode(message.requestMetadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDocumentLinkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDocumentLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestMetadata = RequestMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDocumentLinkRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestMetadata: isSet(object.requestMetadata) ? RequestMetadata.fromJSON(object.requestMetadata) : undefined,
    };
  },

  toJSON(message: DeleteDocumentLinkRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestMetadata !== undefined) {
      obj.requestMetadata = RequestMetadata.toJSON(message.requestMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDocumentLinkRequest>): DeleteDocumentLinkRequest {
    return DeleteDocumentLinkRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDocumentLinkRequest>): DeleteDocumentLinkRequest {
    const message = createBaseDeleteDocumentLinkRequest();
    message.name = object.name ?? "";
    message.requestMetadata = (object.requestMetadata !== undefined && object.requestMetadata !== null)
      ? RequestMetadata.fromPartial(object.requestMetadata)
      : undefined;
    return message;
  },
};

/**
 * This service lets you manage document-links.
 * Document-Links are treated as sub-resources under source documents.
 */
export type DocumentLinkServiceDefinition = typeof DocumentLinkServiceDefinition;
export const DocumentLinkServiceDefinition = {
  name: "DocumentLinkService",
  fullName: "google.cloud.contentwarehouse.v1.DocumentLinkService",
  methods: {
    /** Return all target document-links from the document. */
    listLinkedTargets: {
      name: "ListLinkedTargets",
      requestType: ListLinkedTargetsRequest,
      requestStream: false,
      responseType: ListLinkedTargetsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              101,
              100,
              84,
              97,
              114,
              103,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Return all source document-links from the document. */
    listLinkedSources: {
      name: "ListLinkedSources",
      requestType: ListLinkedSourcesRequest,
      requestStream: false,
      responseType: ListLinkedSourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              108,
              105,
              110,
              107,
              101,
              100,
              83,
              111,
              117,
              114,
              99,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Create a link between a source document and a target document. */
    createDocumentLink: {
      name: "CreateDocumentLink",
      requestType: CreateDocumentLinkRequest,
      requestStream: false,
      responseType: DocumentLink,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              76,
              105,
              110,
              107,
              115,
            ]),
          ],
        },
      },
    },
    /** Remove the link between the source and target documents. */
    deleteDocumentLink: {
      name: "DeleteDocumentLink",
      requestType: DeleteDocumentLinkRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              73,
              58,
              1,
              42,
              34,
              68,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              76,
              105,
              110,
              107,
              115,
              47,
              42,
              125,
              58,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DocumentLinkServiceImplementation<CallContextExt = {}> {
  /** Return all target document-links from the document. */
  listLinkedTargets(
    request: ListLinkedTargetsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLinkedTargetsResponse>>;
  /** Return all source document-links from the document. */
  listLinkedSources(
    request: ListLinkedSourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLinkedSourcesResponse>>;
  /** Create a link between a source document and a target document. */
  createDocumentLink(
    request: CreateDocumentLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DocumentLink>>;
  /** Remove the link between the source and target documents. */
  deleteDocumentLink(
    request: DeleteDocumentLinkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface DocumentLinkServiceClient<CallOptionsExt = {}> {
  /** Return all target document-links from the document. */
  listLinkedTargets(
    request: DeepPartial<ListLinkedTargetsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLinkedTargetsResponse>;
  /** Return all source document-links from the document. */
  listLinkedSources(
    request: DeepPartial<ListLinkedSourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLinkedSourcesResponse>;
  /** Create a link between a source document and a target document. */
  createDocumentLink(
    request: DeepPartial<CreateDocumentLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DocumentLink>;
  /** Remove the link between the source and target documents. */
  deleteDocumentLink(
    request: DeepPartial<DeleteDocumentLinkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
