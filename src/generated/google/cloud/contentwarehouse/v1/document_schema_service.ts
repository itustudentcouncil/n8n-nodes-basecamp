// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/contentwarehouse/v1/document_schema_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { DocumentSchema } from "./document_schema.js";

export const protobufPackage = "google.cloud.contentwarehouse.v1";

/** Request message for DocumentSchemaService.CreateDocumentSchema. */
export interface CreateDocumentSchemaRequest {
  /** Required. The parent name. */
  parent: string;
  /** Required. The document schema to create. */
  documentSchema: DocumentSchema | undefined;
}

/** Request message for DocumentSchemaService.GetDocumentSchema. */
export interface GetDocumentSchemaRequest {
  /** Required. The name of the document schema to retrieve. */
  name: string;
}

/** Request message for DocumentSchemaService.UpdateDocumentSchema. */
export interface UpdateDocumentSchemaRequest {
  /**
   * Required. The name of the document schema to update.
   * Format:
   * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
   */
  name: string;
  /** Required. The document schema to update with. */
  documentSchema: DocumentSchema | undefined;
}

/** Request message for DocumentSchemaService.DeleteDocumentSchema. */
export interface DeleteDocumentSchemaRequest {
  /** Required. The name of the document schema to delete. */
  name: string;
}

/** Request message for DocumentSchemaService.ListDocumentSchemas. */
export interface ListDocumentSchemasRequest {
  /**
   * Required. The parent, which owns this collection of document schemas.
   * Format: projects/{project_number}/locations/{location}.
   */
  parent: string;
  /**
   * The maximum number of document schemas to return. The service may return
   * fewer than this value.
   * If unspecified, at most 50 document schemas will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListDocumentSchemas` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListDocumentSchemas`
   * must match the call that provided the page token.
   */
  pageToken: string;
}

/** Response message for DocumentSchemaService.ListDocumentSchemas. */
export interface ListDocumentSchemasResponse {
  /** The document schemas from the specified parent. */
  documentSchemas: DocumentSchema[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

function createBaseCreateDocumentSchemaRequest(): CreateDocumentSchemaRequest {
  return { parent: "", documentSchema: undefined };
}

export const CreateDocumentSchemaRequest: MessageFns<CreateDocumentSchemaRequest> = {
  encode(message: CreateDocumentSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.documentSchema !== undefined) {
      DocumentSchema.encode(message.documentSchema, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDocumentSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDocumentSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.documentSchema = DocumentSchema.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDocumentSchemaRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      documentSchema: isSet(object.documentSchema) ? DocumentSchema.fromJSON(object.documentSchema) : undefined,
    };
  },

  toJSON(message: CreateDocumentSchemaRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.documentSchema !== undefined) {
      obj.documentSchema = DocumentSchema.toJSON(message.documentSchema);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDocumentSchemaRequest>): CreateDocumentSchemaRequest {
    return CreateDocumentSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDocumentSchemaRequest>): CreateDocumentSchemaRequest {
    const message = createBaseCreateDocumentSchemaRequest();
    message.parent = object.parent ?? "";
    message.documentSchema = (object.documentSchema !== undefined && object.documentSchema !== null)
      ? DocumentSchema.fromPartial(object.documentSchema)
      : undefined;
    return message;
  },
};

function createBaseGetDocumentSchemaRequest(): GetDocumentSchemaRequest {
  return { name: "" };
}

export const GetDocumentSchemaRequest: MessageFns<GetDocumentSchemaRequest> = {
  encode(message: GetDocumentSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDocumentSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDocumentSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDocumentSchemaRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDocumentSchemaRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDocumentSchemaRequest>): GetDocumentSchemaRequest {
    return GetDocumentSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDocumentSchemaRequest>): GetDocumentSchemaRequest {
    const message = createBaseGetDocumentSchemaRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDocumentSchemaRequest(): UpdateDocumentSchemaRequest {
  return { name: "", documentSchema: undefined };
}

export const UpdateDocumentSchemaRequest: MessageFns<UpdateDocumentSchemaRequest> = {
  encode(message: UpdateDocumentSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.documentSchema !== undefined) {
      DocumentSchema.encode(message.documentSchema, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDocumentSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDocumentSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.documentSchema = DocumentSchema.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDocumentSchemaRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      documentSchema: isSet(object.documentSchema) ? DocumentSchema.fromJSON(object.documentSchema) : undefined,
    };
  },

  toJSON(message: UpdateDocumentSchemaRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.documentSchema !== undefined) {
      obj.documentSchema = DocumentSchema.toJSON(message.documentSchema);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDocumentSchemaRequest>): UpdateDocumentSchemaRequest {
    return UpdateDocumentSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDocumentSchemaRequest>): UpdateDocumentSchemaRequest {
    const message = createBaseUpdateDocumentSchemaRequest();
    message.name = object.name ?? "";
    message.documentSchema = (object.documentSchema !== undefined && object.documentSchema !== null)
      ? DocumentSchema.fromPartial(object.documentSchema)
      : undefined;
    return message;
  },
};

function createBaseDeleteDocumentSchemaRequest(): DeleteDocumentSchemaRequest {
  return { name: "" };
}

export const DeleteDocumentSchemaRequest: MessageFns<DeleteDocumentSchemaRequest> = {
  encode(message: DeleteDocumentSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDocumentSchemaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDocumentSchemaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDocumentSchemaRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDocumentSchemaRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDocumentSchemaRequest>): DeleteDocumentSchemaRequest {
    return DeleteDocumentSchemaRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDocumentSchemaRequest>): DeleteDocumentSchemaRequest {
    const message = createBaseDeleteDocumentSchemaRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDocumentSchemasRequest(): ListDocumentSchemasRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListDocumentSchemasRequest: MessageFns<ListDocumentSchemasRequest> = {
  encode(message: ListDocumentSchemasRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDocumentSchemasRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDocumentSchemasRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDocumentSchemasRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListDocumentSchemasRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDocumentSchemasRequest>): ListDocumentSchemasRequest {
    return ListDocumentSchemasRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDocumentSchemasRequest>): ListDocumentSchemasRequest {
    const message = createBaseListDocumentSchemasRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListDocumentSchemasResponse(): ListDocumentSchemasResponse {
  return { documentSchemas: [], nextPageToken: "" };
}

export const ListDocumentSchemasResponse: MessageFns<ListDocumentSchemasResponse> = {
  encode(message: ListDocumentSchemasResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.documentSchemas) {
      DocumentSchema.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDocumentSchemasResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDocumentSchemasResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.documentSchemas.push(DocumentSchema.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDocumentSchemasResponse {
    return {
      documentSchemas: globalThis.Array.isArray(object?.documentSchemas)
        ? object.documentSchemas.map((e: any) => DocumentSchema.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDocumentSchemasResponse): unknown {
    const obj: any = {};
    if (message.documentSchemas?.length) {
      obj.documentSchemas = message.documentSchemas.map((e) => DocumentSchema.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDocumentSchemasResponse>): ListDocumentSchemasResponse {
    return ListDocumentSchemasResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDocumentSchemasResponse>): ListDocumentSchemasResponse {
    const message = createBaseListDocumentSchemasResponse();
    message.documentSchemas = object.documentSchemas?.map((e) => DocumentSchema.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** This service lets you manage document schema. */
export type DocumentSchemaServiceDefinition = typeof DocumentSchemaServiceDefinition;
export const DocumentSchemaServiceDefinition = {
  name: "DocumentSchemaService",
  fullName: "google.cloud.contentwarehouse.v1.DocumentSchemaService",
  methods: {
    /** Creates a document schema. */
    createDocumentSchema: {
      name: "CreateDocumentSchema",
      requestType: CreateDocumentSchemaRequest,
      requestStream: false,
      responseType: DocumentSchema,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              22,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              15,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              83,
              99,
              104,
              101,
              109,
              97,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates a Document Schema. Returns INVALID_ARGUMENT if the name of the
     * Document Schema is non-empty and does not equal the existing name.
     * Supports only appending new properties, adding new ENUM possible values,
     * and updating the
     * [EnumTypeOptions.validation_check_disabled][google.cloud.contentwarehouse.v1.EnumTypeOptions.validation_check_disabled]
     * flag for ENUM possible values. Updating existing properties will result
     * into INVALID_ARGUMENT.
     */
    updateDocumentSchema: {
      name: "UpdateDocumentSchema",
      requestType: UpdateDocumentSchemaRequest,
      requestStream: false,
      responseType: DocumentSchema,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              110,
              97,
              109,
              101,
              44,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              95,
              115,
              99,
              104,
              101,
              109,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              50,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              83,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets a document schema. Returns NOT_FOUND if the document schema does not
     * exist.
     */
    getDocumentSchema: {
      name: "GetDocumentSchema",
      requestType: GetDocumentSchemaRequest,
      requestStream: false,
      responseType: DocumentSchema,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              83,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a document schema. Returns NOT_FOUND if the document schema does
     * not exist. Returns BAD_REQUEST if the document schema has documents
     * depending on it.
     */
    deleteDocumentSchema: {
      name: "DeleteDocumentSchema",
      requestType: DeleteDocumentSchemaRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              83,
              99,
              104,
              101,
              109,
              97,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists document schemas. */
    listDocumentSchemas: {
      name: "ListDocumentSchemas",
      requestType: ListDocumentSchemasRequest,
      requestStream: false,
      responseType: ListDocumentSchemasResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              83,
              99,
              104,
              101,
              109,
              97,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DocumentSchemaServiceImplementation<CallContextExt = {}> {
  /** Creates a document schema. */
  createDocumentSchema(
    request: CreateDocumentSchemaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DocumentSchema>>;
  /**
   * Updates a Document Schema. Returns INVALID_ARGUMENT if the name of the
   * Document Schema is non-empty and does not equal the existing name.
   * Supports only appending new properties, adding new ENUM possible values,
   * and updating the
   * [EnumTypeOptions.validation_check_disabled][google.cloud.contentwarehouse.v1.EnumTypeOptions.validation_check_disabled]
   * flag for ENUM possible values. Updating existing properties will result
   * into INVALID_ARGUMENT.
   */
  updateDocumentSchema(
    request: UpdateDocumentSchemaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DocumentSchema>>;
  /**
   * Gets a document schema. Returns NOT_FOUND if the document schema does not
   * exist.
   */
  getDocumentSchema(
    request: GetDocumentSchemaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DocumentSchema>>;
  /**
   * Deletes a document schema. Returns NOT_FOUND if the document schema does
   * not exist. Returns BAD_REQUEST if the document schema has documents
   * depending on it.
   */
  deleteDocumentSchema(
    request: DeleteDocumentSchemaRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lists document schemas. */
  listDocumentSchemas(
    request: ListDocumentSchemasRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDocumentSchemasResponse>>;
}

export interface DocumentSchemaServiceClient<CallOptionsExt = {}> {
  /** Creates a document schema. */
  createDocumentSchema(
    request: DeepPartial<CreateDocumentSchemaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DocumentSchema>;
  /**
   * Updates a Document Schema. Returns INVALID_ARGUMENT if the name of the
   * Document Schema is non-empty and does not equal the existing name.
   * Supports only appending new properties, adding new ENUM possible values,
   * and updating the
   * [EnumTypeOptions.validation_check_disabled][google.cloud.contentwarehouse.v1.EnumTypeOptions.validation_check_disabled]
   * flag for ENUM possible values. Updating existing properties will result
   * into INVALID_ARGUMENT.
   */
  updateDocumentSchema(
    request: DeepPartial<UpdateDocumentSchemaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DocumentSchema>;
  /**
   * Gets a document schema. Returns NOT_FOUND if the document schema does not
   * exist.
   */
  getDocumentSchema(
    request: DeepPartial<GetDocumentSchemaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DocumentSchema>;
  /**
   * Deletes a document schema. Returns NOT_FOUND if the document schema does
   * not exist. Returns BAD_REQUEST if the document schema has documents
   * depending on it.
   */
  deleteDocumentSchema(
    request: DeepPartial<DeleteDocumentSchemaRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lists document schemas. */
  listDocumentSchemas(
    request: DeepPartial<ListDocumentSchemasRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDocumentSchemasResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
