// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/apigateway/v1/apigateway.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.apigateway.v1";

/** An API that can be served by one or more Gateways. */
export interface Api {
  /**
   * Output only. Resource name of the API.
   * Format: projects/{project}/locations/global/apis/{api}
   */
  name: string;
  /** Output only. Created time. */
  createTime:
    | Date
    | undefined;
  /** Output only. Updated time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Resource labels to represent user-provided metadata.
   * Refer to cloud documentation on labels for more details.
   * https://cloud.google.com/compute/docs/labeling-resources
   */
  labels: { [key: string]: string };
  /** Optional. Display name. */
  displayName: string;
  /**
   * Optional. Immutable. The name of a Google Managed Service (
   * https://cloud.google.com/service-infrastructure/docs/glossary#managed). If
   * not specified, a new Service will automatically be created in the same
   * project as this API.
   */
  managedService: string;
  /** Output only. State of the API. */
  state: Api_State;
}

/** All the possible API states. */
export enum Api_State {
  /** STATE_UNSPECIFIED - API does not have a state yet. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - API is being created. */
  CREATING = 1,
  /** ACTIVE - API is active. */
  ACTIVE = 2,
  /** FAILED - API creation failed. */
  FAILED = 3,
  /** DELETING - API is being deleted. */
  DELETING = 4,
  /** UPDATING - API is being updated. */
  UPDATING = 5,
  UNRECOGNIZED = -1,
}

export function api_StateFromJSON(object: any): Api_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Api_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Api_State.CREATING;
    case 2:
    case "ACTIVE":
      return Api_State.ACTIVE;
    case 3:
    case "FAILED":
      return Api_State.FAILED;
    case 4:
    case "DELETING":
      return Api_State.DELETING;
    case 5:
    case "UPDATING":
      return Api_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Api_State.UNRECOGNIZED;
  }
}

export function api_StateToJSON(object: Api_State): string {
  switch (object) {
    case Api_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Api_State.CREATING:
      return "CREATING";
    case Api_State.ACTIVE:
      return "ACTIVE";
    case Api_State.FAILED:
      return "FAILED";
    case Api_State.DELETING:
      return "DELETING";
    case Api_State.UPDATING:
      return "UPDATING";
    case Api_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Api_LabelsEntry {
  key: string;
  value: string;
}

/**
 * An API Configuration is a combination of settings for both the Managed
 * Service and Gateways serving this API Config.
 */
export interface ApiConfig {
  /**
   * Output only. Resource name of the API Config.
   * Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}
   */
  name: string;
  /** Output only. Created time. */
  createTime:
    | Date
    | undefined;
  /** Output only. Updated time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Resource labels to represent user-provided metadata.
   * Refer to cloud documentation on labels for more details.
   * https://cloud.google.com/compute/docs/labeling-resources
   */
  labels: { [key: string]: string };
  /** Optional. Display name. */
  displayName: string;
  /**
   * Immutable. The Google Cloud IAM Service Account that Gateways serving this config
   * should use to authenticate to other services. This may either be the
   * Service Account's email
   * (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource
   * name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used
   * when the service is a GCP resource such as a Cloud Run Service or an
   * IAP-secured service.
   */
  gatewayServiceAccount: string;
  /**
   * Output only. The ID of the associated Service Config (
   * https://cloud.google.com/service-infrastructure/docs/glossary#config).
   */
  serviceConfigId: string;
  /** Output only. State of the API Config. */
  state: ApiConfig_State;
  /**
   * Optional. OpenAPI specification documents. If specified, grpc_services and
   * managed_service_configs must not be included.
   */
  openapiDocuments: ApiConfig_OpenApiDocument[];
  /**
   * Optional. gRPC service definition files. If specified, openapi_documents must
   * not be included.
   */
  grpcServices: ApiConfig_GrpcServiceDefinition[];
  /**
   * Optional. Service Configuration files. At least one must be included when using gRPC
   * service definitions. See
   * https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview
   * for the expected file contents.
   *
   * If multiple files are specified, the files are merged with the following
   * rules:
   * * All singular scalar fields are merged using "last one wins" semantics in
   * the order of the files uploaded.
   * * Repeated fields are concatenated.
   * * Singular embedded messages are merged using these rules for nested
   * fields.
   */
  managedServiceConfigs: ApiConfig_File[];
}

/** All the possible API Config states. */
export enum ApiConfig_State {
  /** STATE_UNSPECIFIED - API Config does not have a state yet. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - API Config is being created and deployed to the API Controller. */
  CREATING = 1,
  /** ACTIVE - API Config is ready for use by Gateways. */
  ACTIVE = 2,
  /** FAILED - API Config creation failed. */
  FAILED = 3,
  /** DELETING - API Config is being deleted. */
  DELETING = 4,
  /** UPDATING - API Config is being updated. */
  UPDATING = 5,
  /**
   * ACTIVATING - API Config settings are being activated in downstream systems.
   * API Configs in this state cannot be used by Gateways.
   */
  ACTIVATING = 6,
  UNRECOGNIZED = -1,
}

export function apiConfig_StateFromJSON(object: any): ApiConfig_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ApiConfig_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return ApiConfig_State.CREATING;
    case 2:
    case "ACTIVE":
      return ApiConfig_State.ACTIVE;
    case 3:
    case "FAILED":
      return ApiConfig_State.FAILED;
    case 4:
    case "DELETING":
      return ApiConfig_State.DELETING;
    case 5:
    case "UPDATING":
      return ApiConfig_State.UPDATING;
    case 6:
    case "ACTIVATING":
      return ApiConfig_State.ACTIVATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApiConfig_State.UNRECOGNIZED;
  }
}

export function apiConfig_StateToJSON(object: ApiConfig_State): string {
  switch (object) {
    case ApiConfig_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ApiConfig_State.CREATING:
      return "CREATING";
    case ApiConfig_State.ACTIVE:
      return "ACTIVE";
    case ApiConfig_State.FAILED:
      return "FAILED";
    case ApiConfig_State.DELETING:
      return "DELETING";
    case ApiConfig_State.UPDATING:
      return "UPDATING";
    case ApiConfig_State.ACTIVATING:
      return "ACTIVATING";
    case ApiConfig_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A lightweight description of a file. */
export interface ApiConfig_File {
  /**
   * The file path (full or relative path). This is typically the path of the
   * file when it is uploaded.
   */
  path: string;
  /** The bytes that constitute the file. */
  contents: Buffer;
}

/** An OpenAPI Specification Document describing an API. */
export interface ApiConfig_OpenApiDocument {
  /** The OpenAPI Specification document file. */
  document: ApiConfig_File | undefined;
}

/** A gRPC service definition. */
export interface ApiConfig_GrpcServiceDefinition {
  /**
   * Input only. File descriptor set, generated by protoc.
   *
   * To generate, use protoc with imports and source info included.
   * For an example test.proto file, the following command would put the value
   * in a new file named out.pb.
   *
   * $ protoc --include_imports --include_source_info test.proto -o out.pb
   */
  fileDescriptorSet:
    | ApiConfig_File
    | undefined;
  /**
   * Optional. Uncompiled proto files associated with the descriptor set, used for
   * display purposes (server-side compilation is not supported). These
   * should match the inputs to 'protoc' command used to generate
   * file_descriptor_set.
   */
  source: ApiConfig_File[];
}

export interface ApiConfig_LabelsEntry {
  key: string;
  value: string;
}

/**
 * A Gateway is an API-aware HTTP proxy. It performs API-Method and/or
 * API-Consumer specific actions based on an API Config such as authentication,
 * policy enforcement, and backend selection.
 */
export interface Gateway {
  /**
   * Output only. Resource name of the Gateway.
   * Format: projects/{project}/locations/{location}/gateways/{gateway}
   */
  name: string;
  /** Output only. Created time. */
  createTime:
    | Date
    | undefined;
  /** Output only. Updated time. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Resource labels to represent user-provided metadata.
   * Refer to cloud documentation on labels for more details.
   * https://cloud.google.com/compute/docs/labeling-resources
   */
  labels: { [key: string]: string };
  /** Optional. Display name. */
  displayName: string;
  /**
   * Required. Resource name of the API Config for this Gateway.
   * Format: projects/{project}/locations/global/apis/{api}/configs/{apiConfig}
   */
  apiConfig: string;
  /** Output only. The current state of the Gateway. */
  state: Gateway_State;
  /**
   * Output only. The default API Gateway host name of the form
   * `{gateway_id}-{hash}.{region_code}.gateway.dev`.
   */
  defaultHostname: string;
}

/** All the possible Gateway states. */
export enum Gateway_State {
  /** STATE_UNSPECIFIED - Gateway does not have a state yet. */
  STATE_UNSPECIFIED = 0,
  /** CREATING - Gateway is being created. */
  CREATING = 1,
  /** ACTIVE - Gateway is running and ready for requests. */
  ACTIVE = 2,
  /** FAILED - Gateway creation failed. */
  FAILED = 3,
  /** DELETING - Gateway is being deleted. */
  DELETING = 4,
  /** UPDATING - Gateway is being updated. */
  UPDATING = 5,
  UNRECOGNIZED = -1,
}

export function gateway_StateFromJSON(object: any): Gateway_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Gateway_State.STATE_UNSPECIFIED;
    case 1:
    case "CREATING":
      return Gateway_State.CREATING;
    case 2:
    case "ACTIVE":
      return Gateway_State.ACTIVE;
    case 3:
    case "FAILED":
      return Gateway_State.FAILED;
    case 4:
    case "DELETING":
      return Gateway_State.DELETING;
    case 5:
    case "UPDATING":
      return Gateway_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Gateway_State.UNRECOGNIZED;
  }
}

export function gateway_StateToJSON(object: Gateway_State): string {
  switch (object) {
    case Gateway_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Gateway_State.CREATING:
      return "CREATING";
    case Gateway_State.ACTIVE:
      return "ACTIVE";
    case Gateway_State.FAILED:
      return "FAILED";
    case Gateway_State.DELETING:
      return "DELETING";
    case Gateway_State.UPDATING:
      return "UPDATING";
    case Gateway_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Gateway_LabelsEntry {
  key: string;
  value: string;
}

/** Request message for ApiGatewayService.ListGateways */
export interface ListGatewaysRequest {
  /**
   * Required. Parent resource of the Gateway, of the form:
   * `projects/* /locations/*`
   */
  parent: string;
  /** Page size. */
  pageSize: number;
  /** Page token. */
  pageToken: string;
  /** Filter. */
  filter: string;
  /** Order by parameters. */
  orderBy: string;
}

/** Response message for ApiGatewayService.ListGateways */
export interface ListGatewaysResponse {
  /** Gateways. */
  gateways: Gateway[];
  /** Next page token. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachableLocations: string[];
}

/** Request message for ApiGatewayService.GetGateway */
export interface GetGatewayRequest {
  /**
   * Required. Resource name of the form:
   * `projects/* /locations/* /gateways/*`
   */
  name: string;
}

/** Request message for ApiGatewayService.CreateGateway */
export interface CreateGatewayRequest {
  /**
   * Required. Parent resource of the Gateway, of the form:
   * `projects/* /locations/*`
   */
  parent: string;
  /**
   * Required. Identifier to assign to the Gateway. Must be unique within scope of
   * the parent resource.
   */
  gatewayId: string;
  /** Required. Gateway resource. */
  gateway: Gateway | undefined;
}

/** Request message for ApiGatewayService.UpdateGateway */
export interface UpdateGatewayRequest {
  /**
   * Field mask is used to specify the fields to be overwritten in the
   * Gateway resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Gateway resource. */
  gateway: Gateway | undefined;
}

/** Request message for ApiGatewayService.DeleteGateway */
export interface DeleteGatewayRequest {
  /**
   * Required. Resource name of the form:
   * `projects/* /locations/* /gateways/*`
   */
  name: string;
}

/** Request message for ApiGatewayService.ListApis */
export interface ListApisRequest {
  /**
   * Required. Parent resource of the API, of the form:
   * `projects/* /locations/global`
   */
  parent: string;
  /** Page size. */
  pageSize: number;
  /** Page token. */
  pageToken: string;
  /** Filter. */
  filter: string;
  /** Order by parameters. */
  orderBy: string;
}

/** Response message for ApiGatewayService.ListApis */
export interface ListApisResponse {
  /** APIs. */
  apis: Api[];
  /** Next page token. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachableLocations: string[];
}

/** Request message for ApiGatewayService.GetApi */
export interface GetApiRequest {
  /**
   * Required. Resource name of the form:
   * `projects/* /locations/global/apis/*`
   */
  name: string;
}

/** Request message for ApiGatewayService.CreateApi */
export interface CreateApiRequest {
  /**
   * Required. Parent resource of the API, of the form:
   * `projects/* /locations/global`
   */
  parent: string;
  /**
   * Required. Identifier to assign to the API. Must be unique within scope of
   * the parent resource.
   */
  apiId: string;
  /** Required. API resource. */
  api: Api | undefined;
}

/** Request message for ApiGatewayService.UpdateApi */
export interface UpdateApiRequest {
  /**
   * Field mask is used to specify the fields to be overwritten in the
   * Api resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. API resource. */
  api: Api | undefined;
}

/** Request message for ApiGatewayService.DeleteApi */
export interface DeleteApiRequest {
  /**
   * Required. Resource name of the form:
   * `projects/* /locations/global/apis/*`
   */
  name: string;
}

/** Request message for ApiGatewayService.ListApiConfigs */
export interface ListApiConfigsRequest {
  /**
   * Required. Parent resource of the API Config, of the form:
   * `projects/* /locations/global/apis/*`
   */
  parent: string;
  /** Page size. */
  pageSize: number;
  /** Page token. */
  pageToken: string;
  /** Filter. */
  filter: string;
  /** Order by parameters. */
  orderBy: string;
}

/** Response message for ApiGatewayService.ListApiConfigs */
export interface ListApiConfigsResponse {
  /** API Configs. */
  apiConfigs: ApiConfig[];
  /** Next page token. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachableLocations: string[];
}

/** Request message for ApiGatewayService.GetApiConfig */
export interface GetApiConfigRequest {
  /**
   * Required. Resource name of the form:
   * `projects/* /locations/global/apis/* /configs/*`
   */
  name: string;
  /**
   * Specifies which fields of the API Config are returned in the response.
   * Defaults to `BASIC` view.
   */
  view: GetApiConfigRequest_ConfigView;
}

/** Enum to control which fields should be included in the response. */
export enum GetApiConfigRequest_ConfigView {
  CONFIG_VIEW_UNSPECIFIED = 0,
  /** BASIC - Do not include configuration source files. */
  BASIC = 1,
  /** FULL - Include configuration source files. */
  FULL = 2,
  UNRECOGNIZED = -1,
}

export function getApiConfigRequest_ConfigViewFromJSON(object: any): GetApiConfigRequest_ConfigView {
  switch (object) {
    case 0:
    case "CONFIG_VIEW_UNSPECIFIED":
      return GetApiConfigRequest_ConfigView.CONFIG_VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return GetApiConfigRequest_ConfigView.BASIC;
    case 2:
    case "FULL":
      return GetApiConfigRequest_ConfigView.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GetApiConfigRequest_ConfigView.UNRECOGNIZED;
  }
}

export function getApiConfigRequest_ConfigViewToJSON(object: GetApiConfigRequest_ConfigView): string {
  switch (object) {
    case GetApiConfigRequest_ConfigView.CONFIG_VIEW_UNSPECIFIED:
      return "CONFIG_VIEW_UNSPECIFIED";
    case GetApiConfigRequest_ConfigView.BASIC:
      return "BASIC";
    case GetApiConfigRequest_ConfigView.FULL:
      return "FULL";
    case GetApiConfigRequest_ConfigView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Request message for ApiGatewayService.CreateApiConfig */
export interface CreateApiConfigRequest {
  /**
   * Required. Parent resource of the API Config, of the form:
   * `projects/* /locations/global/apis/*`
   */
  parent: string;
  /**
   * Required. Identifier to assign to the API Config. Must be unique within scope of
   * the parent resource.
   */
  apiConfigId: string;
  /** Required. API resource. */
  apiConfig: ApiConfig | undefined;
}

/** Request message for ApiGatewayService.UpdateApiConfig */
export interface UpdateApiConfigRequest {
  /**
   * Field mask is used to specify the fields to be overwritten in the
   * ApiConfig resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. API Config resource. */
  apiConfig: ApiConfig | undefined;
}

/** Request message for ApiGatewayService.DeleteApiConfig */
export interface DeleteApiConfigRequest {
  /**
   * Required. Resource name of the form:
   * `projects/* /locations/global/apis/* /configs/*`
   */
  name: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
  /** Output only. Diagnostics generated during processing of configuration source files. */
  diagnostics: OperationMetadata_Diagnostic[];
}

/** Diagnostic information from configuration processing. */
export interface OperationMetadata_Diagnostic {
  /** Location of the diagnostic. */
  location: string;
  /** The diagnostic message. */
  message: string;
}

function createBaseApi(): Api {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    managedService: "",
    state: 0,
  };
}

export const Api: MessageFns<Api> = {
  encode(message: Api, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Api_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.managedService !== "") {
      writer.uint32(58).string(message.managedService);
    }
    if (message.state !== 0) {
      writer.uint32(96).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Api {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApi();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Api_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.managedService = reader.string();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Api {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      managedService: isSet(object.managedService) ? globalThis.String(object.managedService) : "",
      state: isSet(object.state) ? api_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: Api): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.managedService !== "") {
      obj.managedService = message.managedService;
    }
    if (message.state !== 0) {
      obj.state = api_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Api>): Api {
    return Api.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Api>): Api {
    const message = createBaseApi();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.managedService = object.managedService ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseApi_LabelsEntry(): Api_LabelsEntry {
  return { key: "", value: "" };
}

export const Api_LabelsEntry: MessageFns<Api_LabelsEntry> = {
  encode(message: Api_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Api_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApi_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Api_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Api_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Api_LabelsEntry>): Api_LabelsEntry {
    return Api_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Api_LabelsEntry>): Api_LabelsEntry {
    const message = createBaseApi_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseApiConfig(): ApiConfig {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    gatewayServiceAccount: "",
    serviceConfigId: "",
    state: 0,
    openapiDocuments: [],
    grpcServices: [],
    managedServiceConfigs: [],
  };
}

export const ApiConfig: MessageFns<ApiConfig> = {
  encode(message: ApiConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ApiConfig_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.gatewayServiceAccount !== "") {
      writer.uint32(114).string(message.gatewayServiceAccount);
    }
    if (message.serviceConfigId !== "") {
      writer.uint32(98).string(message.serviceConfigId);
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    for (const v of message.openapiDocuments) {
      ApiConfig_OpenApiDocument.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.grpcServices) {
      ApiConfig_GrpcServiceDefinition.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.managedServiceConfigs) {
      ApiConfig_File.encode(v!, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = ApiConfig_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.gatewayServiceAccount = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.serviceConfigId = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.openapiDocuments.push(ApiConfig_OpenApiDocument.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.grpcServices.push(ApiConfig_GrpcServiceDefinition.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.managedServiceConfigs.push(ApiConfig_File.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      gatewayServiceAccount: isSet(object.gatewayServiceAccount) ? globalThis.String(object.gatewayServiceAccount) : "",
      serviceConfigId: isSet(object.serviceConfigId) ? globalThis.String(object.serviceConfigId) : "",
      state: isSet(object.state) ? apiConfig_StateFromJSON(object.state) : 0,
      openapiDocuments: globalThis.Array.isArray(object?.openapiDocuments)
        ? object.openapiDocuments.map((e: any) => ApiConfig_OpenApiDocument.fromJSON(e))
        : [],
      grpcServices: globalThis.Array.isArray(object?.grpcServices)
        ? object.grpcServices.map((e: any) => ApiConfig_GrpcServiceDefinition.fromJSON(e))
        : [],
      managedServiceConfigs: globalThis.Array.isArray(object?.managedServiceConfigs)
        ? object.managedServiceConfigs.map((e: any) => ApiConfig_File.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ApiConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.gatewayServiceAccount !== "") {
      obj.gatewayServiceAccount = message.gatewayServiceAccount;
    }
    if (message.serviceConfigId !== "") {
      obj.serviceConfigId = message.serviceConfigId;
    }
    if (message.state !== 0) {
      obj.state = apiConfig_StateToJSON(message.state);
    }
    if (message.openapiDocuments?.length) {
      obj.openapiDocuments = message.openapiDocuments.map((e) => ApiConfig_OpenApiDocument.toJSON(e));
    }
    if (message.grpcServices?.length) {
      obj.grpcServices = message.grpcServices.map((e) => ApiConfig_GrpcServiceDefinition.toJSON(e));
    }
    if (message.managedServiceConfigs?.length) {
      obj.managedServiceConfigs = message.managedServiceConfigs.map((e) => ApiConfig_File.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ApiConfig>): ApiConfig {
    return ApiConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApiConfig>): ApiConfig {
    const message = createBaseApiConfig();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.gatewayServiceAccount = object.gatewayServiceAccount ?? "";
    message.serviceConfigId = object.serviceConfigId ?? "";
    message.state = object.state ?? 0;
    message.openapiDocuments = object.openapiDocuments?.map((e) => ApiConfig_OpenApiDocument.fromPartial(e)) || [];
    message.grpcServices = object.grpcServices?.map((e) => ApiConfig_GrpcServiceDefinition.fromPartial(e)) || [];
    message.managedServiceConfigs = object.managedServiceConfigs?.map((e) => ApiConfig_File.fromPartial(e)) || [];
    return message;
  },
};

function createBaseApiConfig_File(): ApiConfig_File {
  return { path: "", contents: Buffer.alloc(0) };
}

export const ApiConfig_File: MessageFns<ApiConfig_File> = {
  encode(message: ApiConfig_File, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.contents.length !== 0) {
      writer.uint32(18).bytes(message.contents);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfig_File {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfig_File();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.contents = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfig_File {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      contents: isSet(object.contents) ? Buffer.from(bytesFromBase64(object.contents)) : Buffer.alloc(0),
    };
  },

  toJSON(message: ApiConfig_File): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.contents.length !== 0) {
      obj.contents = base64FromBytes(message.contents);
    }
    return obj;
  },

  create(base?: DeepPartial<ApiConfig_File>): ApiConfig_File {
    return ApiConfig_File.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApiConfig_File>): ApiConfig_File {
    const message = createBaseApiConfig_File();
    message.path = object.path ?? "";
    message.contents = object.contents ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseApiConfig_OpenApiDocument(): ApiConfig_OpenApiDocument {
  return { document: undefined };
}

export const ApiConfig_OpenApiDocument: MessageFns<ApiConfig_OpenApiDocument> = {
  encode(message: ApiConfig_OpenApiDocument, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.document !== undefined) {
      ApiConfig_File.encode(message.document, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfig_OpenApiDocument {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfig_OpenApiDocument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.document = ApiConfig_File.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfig_OpenApiDocument {
    return { document: isSet(object.document) ? ApiConfig_File.fromJSON(object.document) : undefined };
  },

  toJSON(message: ApiConfig_OpenApiDocument): unknown {
    const obj: any = {};
    if (message.document !== undefined) {
      obj.document = ApiConfig_File.toJSON(message.document);
    }
    return obj;
  },

  create(base?: DeepPartial<ApiConfig_OpenApiDocument>): ApiConfig_OpenApiDocument {
    return ApiConfig_OpenApiDocument.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApiConfig_OpenApiDocument>): ApiConfig_OpenApiDocument {
    const message = createBaseApiConfig_OpenApiDocument();
    message.document = (object.document !== undefined && object.document !== null)
      ? ApiConfig_File.fromPartial(object.document)
      : undefined;
    return message;
  },
};

function createBaseApiConfig_GrpcServiceDefinition(): ApiConfig_GrpcServiceDefinition {
  return { fileDescriptorSet: undefined, source: [] };
}

export const ApiConfig_GrpcServiceDefinition: MessageFns<ApiConfig_GrpcServiceDefinition> = {
  encode(message: ApiConfig_GrpcServiceDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileDescriptorSet !== undefined) {
      ApiConfig_File.encode(message.fileDescriptorSet, writer.uint32(10).fork()).join();
    }
    for (const v of message.source) {
      ApiConfig_File.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfig_GrpcServiceDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfig_GrpcServiceDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fileDescriptorSet = ApiConfig_File.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.source.push(ApiConfig_File.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfig_GrpcServiceDefinition {
    return {
      fileDescriptorSet: isSet(object.fileDescriptorSet)
        ? ApiConfig_File.fromJSON(object.fileDescriptorSet)
        : undefined,
      source: globalThis.Array.isArray(object?.source) ? object.source.map((e: any) => ApiConfig_File.fromJSON(e)) : [],
    };
  },

  toJSON(message: ApiConfig_GrpcServiceDefinition): unknown {
    const obj: any = {};
    if (message.fileDescriptorSet !== undefined) {
      obj.fileDescriptorSet = ApiConfig_File.toJSON(message.fileDescriptorSet);
    }
    if (message.source?.length) {
      obj.source = message.source.map((e) => ApiConfig_File.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ApiConfig_GrpcServiceDefinition>): ApiConfig_GrpcServiceDefinition {
    return ApiConfig_GrpcServiceDefinition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApiConfig_GrpcServiceDefinition>): ApiConfig_GrpcServiceDefinition {
    const message = createBaseApiConfig_GrpcServiceDefinition();
    message.fileDescriptorSet = (object.fileDescriptorSet !== undefined && object.fileDescriptorSet !== null)
      ? ApiConfig_File.fromPartial(object.fileDescriptorSet)
      : undefined;
    message.source = object.source?.map((e) => ApiConfig_File.fromPartial(e)) || [];
    return message;
  },
};

function createBaseApiConfig_LabelsEntry(): ApiConfig_LabelsEntry {
  return { key: "", value: "" };
}

export const ApiConfig_LabelsEntry: MessageFns<ApiConfig_LabelsEntry> = {
  encode(message: ApiConfig_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfig_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfig_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfig_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ApiConfig_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ApiConfig_LabelsEntry>): ApiConfig_LabelsEntry {
    return ApiConfig_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApiConfig_LabelsEntry>): ApiConfig_LabelsEntry {
    const message = createBaseApiConfig_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGateway(): Gateway {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    labels: {},
    displayName: "",
    apiConfig: "",
    state: 0,
    defaultHostname: "",
  };
}

export const Gateway: MessageFns<Gateway> = {
  encode(message: Gateway, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Gateway_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.apiConfig !== "") {
      writer.uint32(50).string(message.apiConfig);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.defaultHostname !== "") {
      writer.uint32(74).string(message.defaultHostname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gateway {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGateway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Gateway_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.apiConfig = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.defaultHostname = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gateway {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      apiConfig: isSet(object.apiConfig) ? globalThis.String(object.apiConfig) : "",
      state: isSet(object.state) ? gateway_StateFromJSON(object.state) : 0,
      defaultHostname: isSet(object.defaultHostname) ? globalThis.String(object.defaultHostname) : "",
    };
  },

  toJSON(message: Gateway): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.apiConfig !== "") {
      obj.apiConfig = message.apiConfig;
    }
    if (message.state !== 0) {
      obj.state = gateway_StateToJSON(message.state);
    }
    if (message.defaultHostname !== "") {
      obj.defaultHostname = message.defaultHostname;
    }
    return obj;
  },

  create(base?: DeepPartial<Gateway>): Gateway {
    return Gateway.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Gateway>): Gateway {
    const message = createBaseGateway();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    message.apiConfig = object.apiConfig ?? "";
    message.state = object.state ?? 0;
    message.defaultHostname = object.defaultHostname ?? "";
    return message;
  },
};

function createBaseGateway_LabelsEntry(): Gateway_LabelsEntry {
  return { key: "", value: "" };
}

export const Gateway_LabelsEntry: MessageFns<Gateway_LabelsEntry> = {
  encode(message: Gateway_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gateway_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGateway_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gateway_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Gateway_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Gateway_LabelsEntry>): Gateway_LabelsEntry {
    return Gateway_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Gateway_LabelsEntry>): Gateway_LabelsEntry {
    const message = createBaseGateway_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListGatewaysRequest(): ListGatewaysRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListGatewaysRequest: MessageFns<ListGatewaysRequest> = {
  encode(message: ListGatewaysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGatewaysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGatewaysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGatewaysRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListGatewaysRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGatewaysRequest>): ListGatewaysRequest {
    return ListGatewaysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGatewaysRequest>): ListGatewaysRequest {
    const message = createBaseListGatewaysRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListGatewaysResponse(): ListGatewaysResponse {
  return { gateways: [], nextPageToken: "", unreachableLocations: [] };
}

export const ListGatewaysResponse: MessageFns<ListGatewaysResponse> = {
  encode(message: ListGatewaysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gateways) {
      Gateway.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachableLocations) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGatewaysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGatewaysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gateways.push(Gateway.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachableLocations.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListGatewaysResponse {
    return {
      gateways: globalThis.Array.isArray(object?.gateways) ? object.gateways.map((e: any) => Gateway.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachableLocations: globalThis.Array.isArray(object?.unreachableLocations)
        ? object.unreachableLocations.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListGatewaysResponse): unknown {
    const obj: any = {};
    if (message.gateways?.length) {
      obj.gateways = message.gateways.map((e) => Gateway.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachableLocations?.length) {
      obj.unreachableLocations = message.unreachableLocations;
    }
    return obj;
  },

  create(base?: DeepPartial<ListGatewaysResponse>): ListGatewaysResponse {
    return ListGatewaysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGatewaysResponse>): ListGatewaysResponse {
    const message = createBaseListGatewaysResponse();
    message.gateways = object.gateways?.map((e) => Gateway.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachableLocations = object.unreachableLocations?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetGatewayRequest(): GetGatewayRequest {
  return { name: "" };
}

export const GetGatewayRequest: MessageFns<GetGatewayRequest> = {
  encode(message: GetGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGatewayRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetGatewayRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetGatewayRequest>): GetGatewayRequest {
    return GetGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGatewayRequest>): GetGatewayRequest {
    const message = createBaseGetGatewayRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateGatewayRequest(): CreateGatewayRequest {
  return { parent: "", gatewayId: "", gateway: undefined };
}

export const CreateGatewayRequest: MessageFns<CreateGatewayRequest> = {
  encode(message: CreateGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.gatewayId !== "") {
      writer.uint32(18).string(message.gatewayId);
    }
    if (message.gateway !== undefined) {
      Gateway.encode(message.gateway, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gatewayId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gateway = Gateway.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGatewayRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      gatewayId: isSet(object.gatewayId) ? globalThis.String(object.gatewayId) : "",
      gateway: isSet(object.gateway) ? Gateway.fromJSON(object.gateway) : undefined,
    };
  },

  toJSON(message: CreateGatewayRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.gatewayId !== "") {
      obj.gatewayId = message.gatewayId;
    }
    if (message.gateway !== undefined) {
      obj.gateway = Gateway.toJSON(message.gateway);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateGatewayRequest>): CreateGatewayRequest {
    return CreateGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateGatewayRequest>): CreateGatewayRequest {
    const message = createBaseCreateGatewayRequest();
    message.parent = object.parent ?? "";
    message.gatewayId = object.gatewayId ?? "";
    message.gateway = (object.gateway !== undefined && object.gateway !== null)
      ? Gateway.fromPartial(object.gateway)
      : undefined;
    return message;
  },
};

function createBaseUpdateGatewayRequest(): UpdateGatewayRequest {
  return { updateMask: undefined, gateway: undefined };
}

export const UpdateGatewayRequest: MessageFns<UpdateGatewayRequest> = {
  encode(message: UpdateGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.gateway !== undefined) {
      Gateway.encode(message.gateway, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gateway = Gateway.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGatewayRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      gateway: isSet(object.gateway) ? Gateway.fromJSON(object.gateway) : undefined,
    };
  },

  toJSON(message: UpdateGatewayRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.gateway !== undefined) {
      obj.gateway = Gateway.toJSON(message.gateway);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateGatewayRequest>): UpdateGatewayRequest {
    return UpdateGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGatewayRequest>): UpdateGatewayRequest {
    const message = createBaseUpdateGatewayRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.gateway = (object.gateway !== undefined && object.gateway !== null)
      ? Gateway.fromPartial(object.gateway)
      : undefined;
    return message;
  },
};

function createBaseDeleteGatewayRequest(): DeleteGatewayRequest {
  return { name: "" };
}

export const DeleteGatewayRequest: MessageFns<DeleteGatewayRequest> = {
  encode(message: DeleteGatewayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteGatewayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGatewayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGatewayRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteGatewayRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteGatewayRequest>): DeleteGatewayRequest {
    return DeleteGatewayRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteGatewayRequest>): DeleteGatewayRequest {
    const message = createBaseDeleteGatewayRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListApisRequest(): ListApisRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListApisRequest: MessageFns<ListApisRequest> = {
  encode(message: ListApisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApisRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListApisRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApisRequest>): ListApisRequest {
    return ListApisRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApisRequest>): ListApisRequest {
    const message = createBaseListApisRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListApisResponse(): ListApisResponse {
  return { apis: [], nextPageToken: "", unreachableLocations: [] };
}

export const ListApisResponse: MessageFns<ListApisResponse> = {
  encode(message: ListApisResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apis) {
      Api.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachableLocations) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApisResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApisResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apis.push(Api.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachableLocations.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApisResponse {
    return {
      apis: globalThis.Array.isArray(object?.apis) ? object.apis.map((e: any) => Api.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachableLocations: globalThis.Array.isArray(object?.unreachableLocations)
        ? object.unreachableLocations.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListApisResponse): unknown {
    const obj: any = {};
    if (message.apis?.length) {
      obj.apis = message.apis.map((e) => Api.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachableLocations?.length) {
      obj.unreachableLocations = message.unreachableLocations;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApisResponse>): ListApisResponse {
    return ListApisResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApisResponse>): ListApisResponse {
    const message = createBaseListApisResponse();
    message.apis = object.apis?.map((e) => Api.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachableLocations = object.unreachableLocations?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetApiRequest(): GetApiRequest {
  return { name: "" };
}

export const GetApiRequest: MessageFns<GetApiRequest> = {
  encode(message: GetApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApiRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetApiRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetApiRequest>): GetApiRequest {
    return GetApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApiRequest>): GetApiRequest {
    const message = createBaseGetApiRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateApiRequest(): CreateApiRequest {
  return { parent: "", apiId: "", api: undefined };
}

export const CreateApiRequest: MessageFns<CreateApiRequest> = {
  encode(message: CreateApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.apiId !== "") {
      writer.uint32(18).string(message.apiId);
    }
    if (message.api !== undefined) {
      Api.encode(message.api, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.api = Api.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApiRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      apiId: isSet(object.apiId) ? globalThis.String(object.apiId) : "",
      api: isSet(object.api) ? Api.fromJSON(object.api) : undefined,
    };
  },

  toJSON(message: CreateApiRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.apiId !== "") {
      obj.apiId = message.apiId;
    }
    if (message.api !== undefined) {
      obj.api = Api.toJSON(message.api);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateApiRequest>): CreateApiRequest {
    return CreateApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateApiRequest>): CreateApiRequest {
    const message = createBaseCreateApiRequest();
    message.parent = object.parent ?? "";
    message.apiId = object.apiId ?? "";
    message.api = (object.api !== undefined && object.api !== null) ? Api.fromPartial(object.api) : undefined;
    return message;
  },
};

function createBaseUpdateApiRequest(): UpdateApiRequest {
  return { updateMask: undefined, api: undefined };
}

export const UpdateApiRequest: MessageFns<UpdateApiRequest> = {
  encode(message: UpdateApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.api !== undefined) {
      Api.encode(message.api, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.api = Api.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateApiRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      api: isSet(object.api) ? Api.fromJSON(object.api) : undefined,
    };
  },

  toJSON(message: UpdateApiRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.api !== undefined) {
      obj.api = Api.toJSON(message.api);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateApiRequest>): UpdateApiRequest {
    return UpdateApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateApiRequest>): UpdateApiRequest {
    const message = createBaseUpdateApiRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.api = (object.api !== undefined && object.api !== null) ? Api.fromPartial(object.api) : undefined;
    return message;
  },
};

function createBaseDeleteApiRequest(): DeleteApiRequest {
  return { name: "" };
}

export const DeleteApiRequest: MessageFns<DeleteApiRequest> = {
  encode(message: DeleteApiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApiRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteApiRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteApiRequest>): DeleteApiRequest {
    return DeleteApiRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteApiRequest>): DeleteApiRequest {
    const message = createBaseDeleteApiRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListApiConfigsRequest(): ListApiConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListApiConfigsRequest: MessageFns<ListApiConfigsRequest> = {
  encode(message: ListApiConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListApiConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiConfigsRequest>): ListApiConfigsRequest {
    return ListApiConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiConfigsRequest>): ListApiConfigsRequest {
    const message = createBaseListApiConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListApiConfigsResponse(): ListApiConfigsResponse {
  return { apiConfigs: [], nextPageToken: "", unreachableLocations: [] };
}

export const ListApiConfigsResponse: MessageFns<ListApiConfigsResponse> = {
  encode(message: ListApiConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.apiConfigs) {
      ApiConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachableLocations) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListApiConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListApiConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiConfigs.push(ApiConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachableLocations.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListApiConfigsResponse {
    return {
      apiConfigs: globalThis.Array.isArray(object?.apiConfigs)
        ? object.apiConfigs.map((e: any) => ApiConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachableLocations: globalThis.Array.isArray(object?.unreachableLocations)
        ? object.unreachableLocations.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListApiConfigsResponse): unknown {
    const obj: any = {};
    if (message.apiConfigs?.length) {
      obj.apiConfigs = message.apiConfigs.map((e) => ApiConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachableLocations?.length) {
      obj.unreachableLocations = message.unreachableLocations;
    }
    return obj;
  },

  create(base?: DeepPartial<ListApiConfigsResponse>): ListApiConfigsResponse {
    return ListApiConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListApiConfigsResponse>): ListApiConfigsResponse {
    const message = createBaseListApiConfigsResponse();
    message.apiConfigs = object.apiConfigs?.map((e) => ApiConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachableLocations = object.unreachableLocations?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetApiConfigRequest(): GetApiConfigRequest {
  return { name: "", view: 0 };
}

export const GetApiConfigRequest: MessageFns<GetApiConfigRequest> = {
  encode(message: GetApiConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(24).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetApiConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetApiConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetApiConfigRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? getApiConfigRequest_ConfigViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetApiConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = getApiConfigRequest_ConfigViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetApiConfigRequest>): GetApiConfigRequest {
    return GetApiConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetApiConfigRequest>): GetApiConfigRequest {
    const message = createBaseGetApiConfigRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseCreateApiConfigRequest(): CreateApiConfigRequest {
  return { parent: "", apiConfigId: "", apiConfig: undefined };
}

export const CreateApiConfigRequest: MessageFns<CreateApiConfigRequest> = {
  encode(message: CreateApiConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.apiConfigId !== "") {
      writer.uint32(18).string(message.apiConfigId);
    }
    if (message.apiConfig !== undefined) {
      ApiConfig.encode(message.apiConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApiConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApiConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiConfigId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.apiConfig = ApiConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApiConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      apiConfigId: isSet(object.apiConfigId) ? globalThis.String(object.apiConfigId) : "",
      apiConfig: isSet(object.apiConfig) ? ApiConfig.fromJSON(object.apiConfig) : undefined,
    };
  },

  toJSON(message: CreateApiConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.apiConfigId !== "") {
      obj.apiConfigId = message.apiConfigId;
    }
    if (message.apiConfig !== undefined) {
      obj.apiConfig = ApiConfig.toJSON(message.apiConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateApiConfigRequest>): CreateApiConfigRequest {
    return CreateApiConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateApiConfigRequest>): CreateApiConfigRequest {
    const message = createBaseCreateApiConfigRequest();
    message.parent = object.parent ?? "";
    message.apiConfigId = object.apiConfigId ?? "";
    message.apiConfig = (object.apiConfig !== undefined && object.apiConfig !== null)
      ? ApiConfig.fromPartial(object.apiConfig)
      : undefined;
    return message;
  },
};

function createBaseUpdateApiConfigRequest(): UpdateApiConfigRequest {
  return { updateMask: undefined, apiConfig: undefined };
}

export const UpdateApiConfigRequest: MessageFns<UpdateApiConfigRequest> = {
  encode(message: UpdateApiConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.apiConfig !== undefined) {
      ApiConfig.encode(message.apiConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateApiConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateApiConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiConfig = ApiConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateApiConfigRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      apiConfig: isSet(object.apiConfig) ? ApiConfig.fromJSON(object.apiConfig) : undefined,
    };
  },

  toJSON(message: UpdateApiConfigRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.apiConfig !== undefined) {
      obj.apiConfig = ApiConfig.toJSON(message.apiConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateApiConfigRequest>): UpdateApiConfigRequest {
    return UpdateApiConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateApiConfigRequest>): UpdateApiConfigRequest {
    const message = createBaseUpdateApiConfigRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.apiConfig = (object.apiConfig !== undefined && object.apiConfig !== null)
      ? ApiConfig.fromPartial(object.apiConfig)
      : undefined;
    return message;
  },
};

function createBaseDeleteApiConfigRequest(): DeleteApiConfigRequest {
  return { name: "" };
}

export const DeleteApiConfigRequest: MessageFns<DeleteApiConfigRequest> = {
  encode(message: DeleteApiConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApiConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApiConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApiConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteApiConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteApiConfigRequest>): DeleteApiConfigRequest {
    return DeleteApiConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteApiConfigRequest>): DeleteApiConfigRequest {
    const message = createBaseDeleteApiConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
    diagnostics: [],
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    for (const v of message.diagnostics) {
      OperationMetadata_Diagnostic.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.diagnostics.push(OperationMetadata_Diagnostic.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
      diagnostics: globalThis.Array.isArray(object?.diagnostics)
        ? object.diagnostics.map((e: any) => OperationMetadata_Diagnostic.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    if (message.diagnostics?.length) {
      obj.diagnostics = message.diagnostics.map((e) => OperationMetadata_Diagnostic.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    message.diagnostics = object.diagnostics?.map((e) => OperationMetadata_Diagnostic.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOperationMetadata_Diagnostic(): OperationMetadata_Diagnostic {
  return { location: "", message: "" };
}

export const OperationMetadata_Diagnostic: MessageFns<OperationMetadata_Diagnostic> = {
  encode(message: OperationMetadata_Diagnostic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== "") {
      writer.uint32(10).string(message.location);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata_Diagnostic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata_Diagnostic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata_Diagnostic {
    return {
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: OperationMetadata_Diagnostic): unknown {
    const obj: any = {};
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata_Diagnostic>): OperationMetadata_Diagnostic {
    return OperationMetadata_Diagnostic.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata_Diagnostic>): OperationMetadata_Diagnostic {
    const message = createBaseOperationMetadata_Diagnostic();
    message.location = object.location ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
