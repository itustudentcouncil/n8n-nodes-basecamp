// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkmanagement/v1/reachability.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ConnectivityTest } from "./connectivity_test.js";

export const protobufPackage = "google.cloud.networkmanagement.v1";

/** Request for the `ListConnectivityTests` method. */
export interface ListConnectivityTestsRequest {
  /**
   * Required. The parent resource of the Connectivity Tests:
   *     `projects/{project_id}/locations/global`
   */
  parent: string;
  /** Number of `ConnectivityTests` to return. */
  pageSize: number;
  /** Page token from an earlier query, as returned in `next_page_token`. */
  pageToken: string;
  /**
   * Lists the `ConnectivityTests` that match the filter expression. A filter
   * expression filters the resources listed in the response. The expression
   * must be of the form `<field> <operator> <value>` where operators: `<`, `>`,
   * `<=`,
   * `>=`,
   * `!=`, `=`, `:` are supported (colon `:` represents a HAS operator which is
   * roughly synonymous with equality). <field> can refer to a proto or JSON
   * field, or a synthetic field. Field names can be camelCase or snake_case.
   *
   * Examples:
   * - Filter by name:
   *   name = "projects/proj-1/locations/global/connectivityTests/test-1
   *
   * - Filter by labels:
   *   - Resources that have a key called `foo`
   *     labels.foo:*
   *   - Resources that have a key called `foo` whose value is `bar`
   *     labels.foo = bar
   */
  filter: string;
  /** Field to use to sort the list. */
  orderBy: string;
}

/** Response for the `ListConnectivityTests` method. */
export interface ListConnectivityTestsResponse {
  /** List of Connectivity Tests. */
  resources: ConnectivityTest[];
  /** Page token to fetch the next set of Connectivity Tests. */
  nextPageToken: string;
  /** Locations that could not be reached (when querying all locations with `-`). */
  unreachable: string[];
}

/** Request for the `GetConnectivityTest` method. */
export interface GetConnectivityTestRequest {
  /**
   * Required. `ConnectivityTest` resource name using the form:
   *     `projects/{project_id}/locations/global/connectivityTests/{test_id}`
   */
  name: string;
}

/** Request for the `CreateConnectivityTest` method. */
export interface CreateConnectivityTestRequest {
  /**
   * Required. The parent resource of the Connectivity Test to create:
   *     `projects/{project_id}/locations/global`
   */
  parent: string;
  /**
   * Required. The logical name of the Connectivity Test in your project
   * with the following restrictions:
   *
   * * Must contain only lowercase letters, numbers, and hyphens.
   * * Must start with a letter.
   * * Must be between 1-40 characters.
   * * Must end with a number or a letter.
   * * Must be unique within the customer project
   */
  testId: string;
  /** Required. A `ConnectivityTest` resource */
  resource: ConnectivityTest | undefined;
}

/** Request for the `UpdateConnectivityTest` method. */
export interface UpdateConnectivityTestRequest {
  /**
   * Required. Mask of fields to update. At least one path must be supplied in
   * this field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Only fields specified in update_mask are updated. */
  resource: ConnectivityTest | undefined;
}

/** Request for the `DeleteConnectivityTest` method. */
export interface DeleteConnectivityTestRequest {
  /**
   * Required. Connectivity Test resource name using the form:
   *     `projects/{project_id}/locations/global/connectivityTests/{test_id}`
   */
  name: string;
}

/** Request for the `RerunConnectivityTest` method. */
export interface RerunConnectivityTestRequest {
  /**
   * Required. Connectivity Test resource name using the form:
   *     `projects/{project_id}/locations/global/connectivityTests/{test_id}`
   */
  name: string;
}

/** Metadata describing an [Operation][google.longrunning.Operation] */
export interface OperationMetadata {
  /** The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /**
   * Target of the operation - for example
   * projects/project-1/locations/global/connectivityTests/test-1
   */
  target: string;
  /** Name of the verb executed by the operation. */
  verb: string;
  /** Human-readable status of the operation, if any. */
  statusDetail: string;
  /** Specifies if cancellation was requested for the operation. */
  cancelRequested: boolean;
  /** API version. */
  apiVersion: string;
}

function createBaseListConnectivityTestsRequest(): ListConnectivityTestsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListConnectivityTestsRequest: MessageFns<ListConnectivityTestsRequest> = {
  encode(message: ListConnectivityTestsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectivityTestsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectivityTestsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectivityTestsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListConnectivityTestsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectivityTestsRequest>): ListConnectivityTestsRequest {
    return ListConnectivityTestsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectivityTestsRequest>): ListConnectivityTestsRequest {
    const message = createBaseListConnectivityTestsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListConnectivityTestsResponse(): ListConnectivityTestsResponse {
  return { resources: [], nextPageToken: "", unreachable: [] };
}

export const ListConnectivityTestsResponse: MessageFns<ListConnectivityTestsResponse> = {
  encode(message: ListConnectivityTestsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resources) {
      ConnectivityTest.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConnectivityTestsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConnectivityTestsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resources.push(ConnectivityTest.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConnectivityTestsResponse {
    return {
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => ConnectivityTest.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListConnectivityTestsResponse): unknown {
    const obj: any = {};
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => ConnectivityTest.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListConnectivityTestsResponse>): ListConnectivityTestsResponse {
    return ListConnectivityTestsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListConnectivityTestsResponse>): ListConnectivityTestsResponse {
    const message = createBaseListConnectivityTestsResponse();
    message.resources = object.resources?.map((e) => ConnectivityTest.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetConnectivityTestRequest(): GetConnectivityTestRequest {
  return { name: "" };
}

export const GetConnectivityTestRequest: MessageFns<GetConnectivityTestRequest> = {
  encode(message: GetConnectivityTestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConnectivityTestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConnectivityTestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConnectivityTestRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetConnectivityTestRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetConnectivityTestRequest>): GetConnectivityTestRequest {
    return GetConnectivityTestRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetConnectivityTestRequest>): GetConnectivityTestRequest {
    const message = createBaseGetConnectivityTestRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateConnectivityTestRequest(): CreateConnectivityTestRequest {
  return { parent: "", testId: "", resource: undefined };
}

export const CreateConnectivityTestRequest: MessageFns<CreateConnectivityTestRequest> = {
  encode(message: CreateConnectivityTestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.testId !== "") {
      writer.uint32(18).string(message.testId);
    }
    if (message.resource !== undefined) {
      ConnectivityTest.encode(message.resource, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConnectivityTestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConnectivityTestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.testId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = ConnectivityTest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateConnectivityTestRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      testId: isSet(object.testId) ? globalThis.String(object.testId) : "",
      resource: isSet(object.resource) ? ConnectivityTest.fromJSON(object.resource) : undefined,
    };
  },

  toJSON(message: CreateConnectivityTestRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.testId !== "") {
      obj.testId = message.testId;
    }
    if (message.resource !== undefined) {
      obj.resource = ConnectivityTest.toJSON(message.resource);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateConnectivityTestRequest>): CreateConnectivityTestRequest {
    return CreateConnectivityTestRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConnectivityTestRequest>): CreateConnectivityTestRequest {
    const message = createBaseCreateConnectivityTestRequest();
    message.parent = object.parent ?? "";
    message.testId = object.testId ?? "";
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? ConnectivityTest.fromPartial(object.resource)
      : undefined;
    return message;
  },
};

function createBaseUpdateConnectivityTestRequest(): UpdateConnectivityTestRequest {
  return { updateMask: undefined, resource: undefined };
}

export const UpdateConnectivityTestRequest: MessageFns<UpdateConnectivityTestRequest> = {
  encode(message: UpdateConnectivityTestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.resource !== undefined) {
      ConnectivityTest.encode(message.resource, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateConnectivityTestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateConnectivityTestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.resource = ConnectivityTest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateConnectivityTestRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      resource: isSet(object.resource) ? ConnectivityTest.fromJSON(object.resource) : undefined,
    };
  },

  toJSON(message: UpdateConnectivityTestRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.resource !== undefined) {
      obj.resource = ConnectivityTest.toJSON(message.resource);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateConnectivityTestRequest>): UpdateConnectivityTestRequest {
    return UpdateConnectivityTestRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateConnectivityTestRequest>): UpdateConnectivityTestRequest {
    const message = createBaseUpdateConnectivityTestRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? ConnectivityTest.fromPartial(object.resource)
      : undefined;
    return message;
  },
};

function createBaseDeleteConnectivityTestRequest(): DeleteConnectivityTestRequest {
  return { name: "" };
}

export const DeleteConnectivityTestRequest: MessageFns<DeleteConnectivityTestRequest> = {
  encode(message: DeleteConnectivityTestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConnectivityTestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConnectivityTestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConnectivityTestRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteConnectivityTestRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteConnectivityTestRequest>): DeleteConnectivityTestRequest {
    return DeleteConnectivityTestRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConnectivityTestRequest>): DeleteConnectivityTestRequest {
    const message = createBaseDeleteConnectivityTestRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseRerunConnectivityTestRequest(): RerunConnectivityTestRequest {
  return { name: "" };
}

export const RerunConnectivityTestRequest: MessageFns<RerunConnectivityTestRequest> = {
  encode(message: RerunConnectivityTestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RerunConnectivityTestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRerunConnectivityTestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RerunConnectivityTestRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: RerunConnectivityTestRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<RerunConnectivityTestRequest>): RerunConnectivityTestRequest {
    return RerunConnectivityTestRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RerunConnectivityTestRequest>): RerunConnectivityTestRequest {
    const message = createBaseRerunConnectivityTestRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusDetail: "",
    cancelRequested: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusDetail !== "") {
      writer.uint32(42).string(message.statusDetail);
    }
    if (message.cancelRequested !== false) {
      writer.uint32(48).bool(message.cancelRequested);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusDetail = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.cancelRequested = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusDetail: isSet(object.statusDetail) ? globalThis.String(object.statusDetail) : "",
      cancelRequested: isSet(object.cancelRequested) ? globalThis.Boolean(object.cancelRequested) : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusDetail !== "") {
      obj.statusDetail = message.statusDetail;
    }
    if (message.cancelRequested !== false) {
      obj.cancelRequested = message.cancelRequested;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusDetail = object.statusDetail ?? "";
    message.cancelRequested = object.cancelRequested ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * The Reachability service in the Google Cloud Network Management API provides
 * services that analyze the reachability within a single Google Virtual Private
 * Cloud (VPC) network, between peered VPC networks, between VPC and on-premises
 * networks, or between VPC networks and internet hosts. A reachability analysis
 * is based on Google Cloud network configurations.
 *
 * You can use the analysis results to verify these configurations and
 * to troubleshoot connectivity issues.
 */
export type ReachabilityServiceDefinition = typeof ReachabilityServiceDefinition;
export const ReachabilityServiceDefinition = {
  name: "ReachabilityService",
  fullName: "google.cloud.networkmanagement.v1.ReachabilityService",
  methods: {
    /** Lists all Connectivity Tests owned by a project. */
    listConnectivityTests: {
      name: "ListConnectivityTests",
      requestType: ListConnectivityTestsRequest,
      requestStream: false,
      responseType: ListConnectivityTestsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              84,
              101,
              115,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the details of a specific Connectivity Test. */
    getConnectivityTest: {
      name: "GetConnectivityTest",
      requestType: GetConnectivityTestRequest,
      requestStream: false,
      responseType: ConnectivityTest,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              18,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              84,
              101,
              115,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new Connectivity Test.
     * After you create a test, the reachability analysis is performed as part
     * of the long running operation, which completes when the analysis completes.
     *
     * If the endpoint specifications in `ConnectivityTest` are invalid
     * (for example, containing non-existent resources in the network, or you
     * don't have read permissions to the network configurations of listed
     * projects), then the reachability result returns a value of `UNKNOWN`.
     *
     * If the endpoint specifications in `ConnectivityTest` are
     * incomplete, the reachability result returns a value of
     * <code>AMBIGUOUS</code>. For more information,
     * see the Connectivity Test documentation.
     */
    createConnectivityTest: {
      name: "CreateConnectivityTest",
      requestType: CreateConnectivityTestRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              71,
              10,
              50,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              84,
              101,
              115,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              101,
              115,
              116,
              95,
              105,
              100,
              44,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              8,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              125,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              84,
              101,
              115,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the configuration of an existing `ConnectivityTest`.
     * After you update a test, the reachability analysis is performed as part
     * of the long running operation, which completes when the analysis completes.
     * The Reachability state in the test resource is updated with the new result.
     *
     * If the endpoint specifications in `ConnectivityTest` are invalid
     * (for example, they contain non-existent resources in the network, or the
     * user does not have read permissions to the network configurations of
     * listed projects), then the reachability result returns a value of
     * <code>UNKNOWN</code>.
     *
     * If the endpoint specifications in `ConnectivityTest` are incomplete, the
     * reachability result returns a value of `AMBIGUOUS`. See the documentation
     * in `ConnectivityTest` for for more details.
     */
    updateConnectivityTest: {
      name: "UpdateConnectivityTest",
      requestType: UpdateConnectivityTestRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              71,
              10,
              50,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              84,
              101,
              115,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
              44,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              8,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              50,
              67,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              84,
              101,
              115,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Rerun an existing `ConnectivityTest`.
     * After the user triggers the rerun, the reachability analysis is performed
     * as part of the long running operation, which completes when the analysis
     * completes.
     *
     * Even though the test configuration remains the same, the reachability
     * result may change due to underlying network configuration changes.
     *
     * If the endpoint specifications in `ConnectivityTest` become invalid (for
     * example, specified resources are deleted in the network, or you lost
     * read permissions to the network configurations of listed projects), then
     * the reachability result returns a value of `UNKNOWN`.
     */
    rerunConnectivityTest: {
      name: "RerunConnectivityTest",
      requestType: RerunConnectivityTestRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              71,
              10,
              50,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              46,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              84,
              101,
              115,
              116,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              84,
              101,
              115,
              116,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              114,
              117,
              110,
            ]),
          ],
        },
      },
    },
    /** Deletes a specific `ConnectivityTest`. */
    deleteConnectivityTest: {
      name: "DeleteConnectivityTest",
      requestType: DeleteConnectivityTestRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              42,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              84,
              101,
              115,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ReachabilityServiceImplementation<CallContextExt = {}> {
  /** Lists all Connectivity Tests owned by a project. */
  listConnectivityTests(
    request: ListConnectivityTestsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListConnectivityTestsResponse>>;
  /** Gets the details of a specific Connectivity Test. */
  getConnectivityTest(
    request: GetConnectivityTestRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ConnectivityTest>>;
  /**
   * Creates a new Connectivity Test.
   * After you create a test, the reachability analysis is performed as part
   * of the long running operation, which completes when the analysis completes.
   *
   * If the endpoint specifications in `ConnectivityTest` are invalid
   * (for example, containing non-existent resources in the network, or you
   * don't have read permissions to the network configurations of listed
   * projects), then the reachability result returns a value of `UNKNOWN`.
   *
   * If the endpoint specifications in `ConnectivityTest` are
   * incomplete, the reachability result returns a value of
   * <code>AMBIGUOUS</code>. For more information,
   * see the Connectivity Test documentation.
   */
  createConnectivityTest(
    request: CreateConnectivityTestRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates the configuration of an existing `ConnectivityTest`.
   * After you update a test, the reachability analysis is performed as part
   * of the long running operation, which completes when the analysis completes.
   * The Reachability state in the test resource is updated with the new result.
   *
   * If the endpoint specifications in `ConnectivityTest` are invalid
   * (for example, they contain non-existent resources in the network, or the
   * user does not have read permissions to the network configurations of
   * listed projects), then the reachability result returns a value of
   * <code>UNKNOWN</code>.
   *
   * If the endpoint specifications in `ConnectivityTest` are incomplete, the
   * reachability result returns a value of `AMBIGUOUS`. See the documentation
   * in `ConnectivityTest` for for more details.
   */
  updateConnectivityTest(
    request: UpdateConnectivityTestRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Rerun an existing `ConnectivityTest`.
   * After the user triggers the rerun, the reachability analysis is performed
   * as part of the long running operation, which completes when the analysis
   * completes.
   *
   * Even though the test configuration remains the same, the reachability
   * result may change due to underlying network configuration changes.
   *
   * If the endpoint specifications in `ConnectivityTest` become invalid (for
   * example, specified resources are deleted in the network, or you lost
   * read permissions to the network configurations of listed projects), then
   * the reachability result returns a value of `UNKNOWN`.
   */
  rerunConnectivityTest(
    request: RerunConnectivityTestRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a specific `ConnectivityTest`. */
  deleteConnectivityTest(
    request: DeleteConnectivityTestRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ReachabilityServiceClient<CallOptionsExt = {}> {
  /** Lists all Connectivity Tests owned by a project. */
  listConnectivityTests(
    request: DeepPartial<ListConnectivityTestsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListConnectivityTestsResponse>;
  /** Gets the details of a specific Connectivity Test. */
  getConnectivityTest(
    request: DeepPartial<GetConnectivityTestRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ConnectivityTest>;
  /**
   * Creates a new Connectivity Test.
   * After you create a test, the reachability analysis is performed as part
   * of the long running operation, which completes when the analysis completes.
   *
   * If the endpoint specifications in `ConnectivityTest` are invalid
   * (for example, containing non-existent resources in the network, or you
   * don't have read permissions to the network configurations of listed
   * projects), then the reachability result returns a value of `UNKNOWN`.
   *
   * If the endpoint specifications in `ConnectivityTest` are
   * incomplete, the reachability result returns a value of
   * <code>AMBIGUOUS</code>. For more information,
   * see the Connectivity Test documentation.
   */
  createConnectivityTest(
    request: DeepPartial<CreateConnectivityTestRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates the configuration of an existing `ConnectivityTest`.
   * After you update a test, the reachability analysis is performed as part
   * of the long running operation, which completes when the analysis completes.
   * The Reachability state in the test resource is updated with the new result.
   *
   * If the endpoint specifications in `ConnectivityTest` are invalid
   * (for example, they contain non-existent resources in the network, or the
   * user does not have read permissions to the network configurations of
   * listed projects), then the reachability result returns a value of
   * <code>UNKNOWN</code>.
   *
   * If the endpoint specifications in `ConnectivityTest` are incomplete, the
   * reachability result returns a value of `AMBIGUOUS`. See the documentation
   * in `ConnectivityTest` for for more details.
   */
  updateConnectivityTest(
    request: DeepPartial<UpdateConnectivityTestRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Rerun an existing `ConnectivityTest`.
   * After the user triggers the rerun, the reachability analysis is performed
   * as part of the long running operation, which completes when the analysis
   * completes.
   *
   * Even though the test configuration remains the same, the reachability
   * result may change due to underlying network configuration changes.
   *
   * If the endpoint specifications in `ConnectivityTest` become invalid (for
   * example, specified resources are deleted in the network, or you lost
   * read permissions to the network configurations of listed projects), then
   * the reachability result returns a value of `UNKNOWN`.
   */
  rerunConnectivityTest(
    request: DeepPartial<RerunConnectivityTestRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a specific `ConnectivityTest`. */
  deleteConnectivityTest(
    request: DeepPartial<DeleteConnectivityTestRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
