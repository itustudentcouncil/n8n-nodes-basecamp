// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/networkmanagement/v1beta1/vpc_flow_logs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { VpcFlowLogsConfig } from "./vpc_flow_logs_config.js";

export const protobufPackage = "google.cloud.networkmanagement.v1beta1";

/** Request for the `ListVpcFlowLogsConfigs` method. */
export interface ListVpcFlowLogsConfigsRequest {
  /**
   * Required. The parent resource of the VpcFlowLogsConfig:
   *     `projects/{project_id}/locations/global`
   */
  parent: string;
  /** Optional. Number of `VpcFlowLogsConfigs` to return. */
  pageSize: number;
  /**
   * Optional. Page token from an earlier query, as returned in
   * `next_page_token`.
   */
  pageToken: string;
  /**
   * Optional. Lists the `VpcFlowLogsConfigs` that match the filter expression.
   * A filter expression must use the supported [CEL logic operators]
   * (https://cloud.google.com/vpc/docs/about-flow-logs-records#supported_cel_logic_operators).
   */
  filter: string;
  /** Optional. Field to use to sort the list. */
  orderBy: string;
}

/** Response for the `ListVpcFlowLogsConfigs` method. */
export interface ListVpcFlowLogsConfigsResponse {
  /** List of VPC Flow Log configurations. */
  vpcFlowLogsConfigs: VpcFlowLogsConfig[];
  /** Page token to fetch the next set of configurations. */
  nextPageToken: string;
  /** Locations that could not be reached (when querying all locations with `-`). */
  unreachable: string[];
}

/** Request for the `GetVpcFlowLogsConfig` method. */
export interface GetVpcFlowLogsConfigRequest {
  /**
   * Required. `VpcFlowLogsConfig` resource name using the form:
   *     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config}`
   */
  name: string;
}

/** Request for the `CreateVpcFlowLogsConfig` method. */
export interface CreateVpcFlowLogsConfigRequest {
  /**
   * Required. The parent resource of the VPC Flow Logs configuration to create:
   *     `projects/{project_id}/locations/global`
   */
  parent: string;
  /** Required. ID of the `VpcFlowLogsConfig`. */
  vpcFlowLogsConfigId: string;
  /** Required. A `VpcFlowLogsConfig` resource */
  vpcFlowLogsConfig: VpcFlowLogsConfig | undefined;
}

/** Request for the `UpdateVpcFlowLogsConfig` method. */
export interface UpdateVpcFlowLogsConfigRequest {
  /**
   * Required. Mask of fields to update. At least one path must be supplied in
   * this field.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. Only fields specified in update_mask are updated. */
  vpcFlowLogsConfig: VpcFlowLogsConfig | undefined;
}

/** Request for the `DeleteVpcFlowLogsConfig` method. */
export interface DeleteVpcFlowLogsConfigRequest {
  /**
   * Required. `VpcFlowLogsConfig` resource name using the form:
   *     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config}`
   */
  name: string;
}

function createBaseListVpcFlowLogsConfigsRequest(): ListVpcFlowLogsConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListVpcFlowLogsConfigsRequest: MessageFns<ListVpcFlowLogsConfigsRequest> = {
  encode(message: ListVpcFlowLogsConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVpcFlowLogsConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVpcFlowLogsConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVpcFlowLogsConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListVpcFlowLogsConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVpcFlowLogsConfigsRequest>): ListVpcFlowLogsConfigsRequest {
    return ListVpcFlowLogsConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVpcFlowLogsConfigsRequest>): ListVpcFlowLogsConfigsRequest {
    const message = createBaseListVpcFlowLogsConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListVpcFlowLogsConfigsResponse(): ListVpcFlowLogsConfigsResponse {
  return { vpcFlowLogsConfigs: [], nextPageToken: "", unreachable: [] };
}

export const ListVpcFlowLogsConfigsResponse: MessageFns<ListVpcFlowLogsConfigsResponse> = {
  encode(message: ListVpcFlowLogsConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.vpcFlowLogsConfigs) {
      VpcFlowLogsConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVpcFlowLogsConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVpcFlowLogsConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vpcFlowLogsConfigs.push(VpcFlowLogsConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVpcFlowLogsConfigsResponse {
    return {
      vpcFlowLogsConfigs: globalThis.Array.isArray(object?.vpcFlowLogsConfigs)
        ? object.vpcFlowLogsConfigs.map((e: any) => VpcFlowLogsConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListVpcFlowLogsConfigsResponse): unknown {
    const obj: any = {};
    if (message.vpcFlowLogsConfigs?.length) {
      obj.vpcFlowLogsConfigs = message.vpcFlowLogsConfigs.map((e) => VpcFlowLogsConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVpcFlowLogsConfigsResponse>): ListVpcFlowLogsConfigsResponse {
    return ListVpcFlowLogsConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVpcFlowLogsConfigsResponse>): ListVpcFlowLogsConfigsResponse {
    const message = createBaseListVpcFlowLogsConfigsResponse();
    message.vpcFlowLogsConfigs = object.vpcFlowLogsConfigs?.map((e) => VpcFlowLogsConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetVpcFlowLogsConfigRequest(): GetVpcFlowLogsConfigRequest {
  return { name: "" };
}

export const GetVpcFlowLogsConfigRequest: MessageFns<GetVpcFlowLogsConfigRequest> = {
  encode(message: GetVpcFlowLogsConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVpcFlowLogsConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVpcFlowLogsConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVpcFlowLogsConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVpcFlowLogsConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVpcFlowLogsConfigRequest>): GetVpcFlowLogsConfigRequest {
    return GetVpcFlowLogsConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVpcFlowLogsConfigRequest>): GetVpcFlowLogsConfigRequest {
    const message = createBaseGetVpcFlowLogsConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateVpcFlowLogsConfigRequest(): CreateVpcFlowLogsConfigRequest {
  return { parent: "", vpcFlowLogsConfigId: "", vpcFlowLogsConfig: undefined };
}

export const CreateVpcFlowLogsConfigRequest: MessageFns<CreateVpcFlowLogsConfigRequest> = {
  encode(message: CreateVpcFlowLogsConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.vpcFlowLogsConfigId !== "") {
      writer.uint32(18).string(message.vpcFlowLogsConfigId);
    }
    if (message.vpcFlowLogsConfig !== undefined) {
      VpcFlowLogsConfig.encode(message.vpcFlowLogsConfig, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVpcFlowLogsConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVpcFlowLogsConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vpcFlowLogsConfigId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vpcFlowLogsConfig = VpcFlowLogsConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVpcFlowLogsConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      vpcFlowLogsConfigId: isSet(object.vpcFlowLogsConfigId) ? globalThis.String(object.vpcFlowLogsConfigId) : "",
      vpcFlowLogsConfig: isSet(object.vpcFlowLogsConfig)
        ? VpcFlowLogsConfig.fromJSON(object.vpcFlowLogsConfig)
        : undefined,
    };
  },

  toJSON(message: CreateVpcFlowLogsConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.vpcFlowLogsConfigId !== "") {
      obj.vpcFlowLogsConfigId = message.vpcFlowLogsConfigId;
    }
    if (message.vpcFlowLogsConfig !== undefined) {
      obj.vpcFlowLogsConfig = VpcFlowLogsConfig.toJSON(message.vpcFlowLogsConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVpcFlowLogsConfigRequest>): CreateVpcFlowLogsConfigRequest {
    return CreateVpcFlowLogsConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVpcFlowLogsConfigRequest>): CreateVpcFlowLogsConfigRequest {
    const message = createBaseCreateVpcFlowLogsConfigRequest();
    message.parent = object.parent ?? "";
    message.vpcFlowLogsConfigId = object.vpcFlowLogsConfigId ?? "";
    message.vpcFlowLogsConfig = (object.vpcFlowLogsConfig !== undefined && object.vpcFlowLogsConfig !== null)
      ? VpcFlowLogsConfig.fromPartial(object.vpcFlowLogsConfig)
      : undefined;
    return message;
  },
};

function createBaseUpdateVpcFlowLogsConfigRequest(): UpdateVpcFlowLogsConfigRequest {
  return { updateMask: undefined, vpcFlowLogsConfig: undefined };
}

export const UpdateVpcFlowLogsConfigRequest: MessageFns<UpdateVpcFlowLogsConfigRequest> = {
  encode(message: UpdateVpcFlowLogsConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.vpcFlowLogsConfig !== undefined) {
      VpcFlowLogsConfig.encode(message.vpcFlowLogsConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateVpcFlowLogsConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateVpcFlowLogsConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vpcFlowLogsConfig = VpcFlowLogsConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateVpcFlowLogsConfigRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      vpcFlowLogsConfig: isSet(object.vpcFlowLogsConfig)
        ? VpcFlowLogsConfig.fromJSON(object.vpcFlowLogsConfig)
        : undefined,
    };
  },

  toJSON(message: UpdateVpcFlowLogsConfigRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.vpcFlowLogsConfig !== undefined) {
      obj.vpcFlowLogsConfig = VpcFlowLogsConfig.toJSON(message.vpcFlowLogsConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateVpcFlowLogsConfigRequest>): UpdateVpcFlowLogsConfigRequest {
    return UpdateVpcFlowLogsConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateVpcFlowLogsConfigRequest>): UpdateVpcFlowLogsConfigRequest {
    const message = createBaseUpdateVpcFlowLogsConfigRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.vpcFlowLogsConfig = (object.vpcFlowLogsConfig !== undefined && object.vpcFlowLogsConfig !== null)
      ? VpcFlowLogsConfig.fromPartial(object.vpcFlowLogsConfig)
      : undefined;
    return message;
  },
};

function createBaseDeleteVpcFlowLogsConfigRequest(): DeleteVpcFlowLogsConfigRequest {
  return { name: "" };
}

export const DeleteVpcFlowLogsConfigRequest: MessageFns<DeleteVpcFlowLogsConfigRequest> = {
  encode(message: DeleteVpcFlowLogsConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteVpcFlowLogsConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteVpcFlowLogsConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteVpcFlowLogsConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteVpcFlowLogsConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteVpcFlowLogsConfigRequest>): DeleteVpcFlowLogsConfigRequest {
    return DeleteVpcFlowLogsConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteVpcFlowLogsConfigRequest>): DeleteVpcFlowLogsConfigRequest {
    const message = createBaseDeleteVpcFlowLogsConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * The VPC Flow Logs service in the Google Cloud Network Management API provides
 * configurations that generate Flow Logs. The service and the configuration
 * resources created using this service are global.
 */
export type VpcFlowLogsServiceDefinition = typeof VpcFlowLogsServiceDefinition;
export const VpcFlowLogsServiceDefinition = {
  name: "VpcFlowLogsService",
  fullName: "google.cloud.networkmanagement.v1beta1.VpcFlowLogsService",
  methods: {
    /** Lists all `VpcFlowLogsConfigs` in a given project. */
    listVpcFlowLogsConfigs: {
      name: "ListVpcFlowLogsConfigs",
      requestType: ListVpcFlowLogsConfigsRequest,
      requestStream: false,
      responseType: ListVpcFlowLogsConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              112,
              99,
              70,
              108,
              111,
              119,
              76,
              111,
              103,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the details of a specific `VpcFlowLogsConfig`. */
    getVpcFlowLogsConfig: {
      name: "GetVpcFlowLogsConfig",
      requestType: GetVpcFlowLogsConfigRequest,
      requestStream: false,
      responseType: VpcFlowLogsConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              112,
              99,
              70,
              108,
              111,
              119,
              76,
              111,
              103,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new `VpcFlowLogsConfig`.
     * If a configuration with the exact same settings already exists (even if the
     * ID is different), the creation fails.
     * Notes:
     * 1. Creating a configuration with state=DISABLED will fail.
     * 2. The following fields are not considrered as `settings` for the purpose
     * of the check mentioned above, therefore - creating another configuration
     * with the same fields but different values for the following fields will
     * fail as well:
     *   - name
     *   - create_time
     *   - update_time
     *   - labels
     *   - description
     */
    createVpcFlowLogsConfig: {
      name: "CreateVpcFlowLogsConfig",
      requestType: CreateVpcFlowLogsConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              77,
              10,
              17,
              86,
              112,
              99,
              70,
              108,
              111,
              119,
              76,
              111,
              103,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              51,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              118,
              112,
              99,
              95,
              102,
              108,
              111,
              119,
              95,
              108,
              111,
              103,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              118,
              112,
              99,
              95,
              102,
              108,
              111,
              119,
              95,
              108,
              111,
              103,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              20,
              118,
              112,
              99,
              95,
              102,
              108,
              111,
              119,
              95,
              108,
              111,
              103,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              112,
              99,
              70,
              108,
              111,
              119,
              76,
              111,
              103,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates an existing `VpcFlowLogsConfig`.
     * If a configuration with the exact same settings already exists (even if the
     * ID is different), the creation fails.
     * Notes:
     * 1. The following fields are not considrered as `settings` for the purpose
     * of the check mentioned above, therefore - updating another configuration
     * with the same fields but different values for the following fields will
     * fail as well:
     *   - name
     *   - create_time
     *   - update_time
     *   - labels
     *   - description
     */
    updateVpcFlowLogsConfig: {
      name: "UpdateVpcFlowLogsConfig",
      requestType: UpdateVpcFlowLogsConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              77,
              10,
              17,
              86,
              112,
              99,
              70,
              108,
              111,
              119,
              76,
              111,
              103,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              32,
              118,
              112,
              99,
              95,
              102,
              108,
              111,
              119,
              95,
              108,
              111,
              103,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              104,
              58,
              20,
              118,
              112,
              99,
              95,
              102,
              108,
              111,
              119,
              95,
              108,
              111,
              103,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              80,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              118,
              112,
              99,
              95,
              102,
              108,
              111,
              119,
              95,
              108,
              111,
              103,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              112,
              99,
              70,
              108,
              111,
              119,
              76,
              111,
              103,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a specific `VpcFlowLogsConfig`. */
    deleteVpcFlowLogsConfig: {
      name: "DeleteVpcFlowLogsConfig",
      requestType: DeleteVpcFlowLogsConfigRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              81,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              110,
              101,
              116,
              119,
              111,
              114,
              107,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              46,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              118,
              112,
              99,
              70,
              108,
              111,
              119,
              76,
              111,
              103,
              115,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VpcFlowLogsServiceImplementation<CallContextExt = {}> {
  /** Lists all `VpcFlowLogsConfigs` in a given project. */
  listVpcFlowLogsConfigs(
    request: ListVpcFlowLogsConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVpcFlowLogsConfigsResponse>>;
  /** Gets the details of a specific `VpcFlowLogsConfig`. */
  getVpcFlowLogsConfig(
    request: GetVpcFlowLogsConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<VpcFlowLogsConfig>>;
  /**
   * Creates a new `VpcFlowLogsConfig`.
   * If a configuration with the exact same settings already exists (even if the
   * ID is different), the creation fails.
   * Notes:
   * 1. Creating a configuration with state=DISABLED will fail.
   * 2. The following fields are not considrered as `settings` for the purpose
   * of the check mentioned above, therefore - creating another configuration
   * with the same fields but different values for the following fields will
   * fail as well:
   *   - name
   *   - create_time
   *   - update_time
   *   - labels
   *   - description
   */
  createVpcFlowLogsConfig(
    request: CreateVpcFlowLogsConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Updates an existing `VpcFlowLogsConfig`.
   * If a configuration with the exact same settings already exists (even if the
   * ID is different), the creation fails.
   * Notes:
   * 1. The following fields are not considrered as `settings` for the purpose
   * of the check mentioned above, therefore - updating another configuration
   * with the same fields but different values for the following fields will
   * fail as well:
   *   - name
   *   - create_time
   *   - update_time
   *   - labels
   *   - description
   */
  updateVpcFlowLogsConfig(
    request: UpdateVpcFlowLogsConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a specific `VpcFlowLogsConfig`. */
  deleteVpcFlowLogsConfig(
    request: DeleteVpcFlowLogsConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface VpcFlowLogsServiceClient<CallOptionsExt = {}> {
  /** Lists all `VpcFlowLogsConfigs` in a given project. */
  listVpcFlowLogsConfigs(
    request: DeepPartial<ListVpcFlowLogsConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVpcFlowLogsConfigsResponse>;
  /** Gets the details of a specific `VpcFlowLogsConfig`. */
  getVpcFlowLogsConfig(
    request: DeepPartial<GetVpcFlowLogsConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<VpcFlowLogsConfig>;
  /**
   * Creates a new `VpcFlowLogsConfig`.
   * If a configuration with the exact same settings already exists (even if the
   * ID is different), the creation fails.
   * Notes:
   * 1. Creating a configuration with state=DISABLED will fail.
   * 2. The following fields are not considrered as `settings` for the purpose
   * of the check mentioned above, therefore - creating another configuration
   * with the same fields but different values for the following fields will
   * fail as well:
   *   - name
   *   - create_time
   *   - update_time
   *   - labels
   *   - description
   */
  createVpcFlowLogsConfig(
    request: DeepPartial<CreateVpcFlowLogsConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Updates an existing `VpcFlowLogsConfig`.
   * If a configuration with the exact same settings already exists (even if the
   * ID is different), the creation fails.
   * Notes:
   * 1. The following fields are not considrered as `settings` for the purpose
   * of the check mentioned above, therefore - updating another configuration
   * with the same fields but different values for the following fields will
   * fail as well:
   *   - name
   *   - create_time
   *   - update_time
   *   - labels
   *   - description
   */
  updateVpcFlowLogsConfig(
    request: DeepPartial<UpdateVpcFlowLogsConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a specific `VpcFlowLogsConfig`. */
  deleteVpcFlowLogsConfig(
    request: DeepPartial<DeleteVpcFlowLogsConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
