// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/recommendationengine/v1beta1/prediction_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Value } from "../../../protobuf/struct.js";
import { UserEvent } from "./user_event.js";

export const protobufPackage = "google.cloud.recommendationengine.v1beta1";

/** Request message for Predict method. */
export interface PredictRequest {
  /**
   * Required. Full resource name of the format:
   * `{name=projects/* /locations/global/catalogs/default_catalog/eventStores/default_event_store/placements/*}`
   * The id of the recommendation engine placement. This id is used to identify
   * the set of models that will be used to make the prediction.
   *
   * We currently support three placements with the following IDs by default:
   *
   * * `shopping_cart`: Predicts items frequently bought together with one or
   *   more catalog items in the same shopping session. Commonly displayed after
   *   `add-to-cart` events, on product detail pages, or on the shopping cart
   *   page.
   *
   * * `home_page`: Predicts the next product that a user will most likely
   *   engage with or purchase based on the shopping or viewing history of the
   *   specified `userId` or `visitorId`. For example - Recommendations for you.
   *
   * * `product_detail`: Predicts the next product that a user will most likely
   *   engage with or purchase. The prediction is based on the shopping or
   *   viewing history of the specified `userId` or `visitorId` and its
   *   relevance to a specified `CatalogItem`. Typically used on product detail
   *   pages. For example - More items like this.
   *
   * * `recently_viewed_default`: Returns up to 75 items recently viewed by the
   *   specified `userId` or `visitorId`, most recent ones first. Returns
   *   nothing if neither of them has viewed any items yet. For example -
   *   Recently viewed.
   *
   * The full list of available placements can be seen at
   * https://console.cloud.google.com/recommendation/datafeeds/default_catalog/dashboard
   */
  name: string;
  /**
   * Required. Context about the user, what they are looking at and what action
   * they took to trigger the predict request. Note that this user event detail
   * won't be ingested to userEvent logs. Thus, a separate userEvent write
   * request is required for event logging.
   */
  userEvent:
    | UserEvent
    | undefined;
  /**
   * Optional. Maximum number of results to return per page. Set this property
   * to the number of prediction results required. If zero, the service will
   * choose a reasonable default.
   */
  pageSize: number;
  /** Optional. The previous PredictResponse.next_page_token. */
  pageToken: string;
  /**
   * Optional. Filter for restricting prediction results. Accepts values for
   * tags and the `filterOutOfStockItems` flag.
   *
   *  * Tag expressions. Restricts predictions to items that match all of the
   *    specified tags. Boolean operators `OR` and `NOT` are supported if the
   *    expression is enclosed in parentheses, and must be separated from the
   *    tag values by a space. `-"tagA"` is also supported and is equivalent to
   *    `NOT "tagA"`. Tag values must be double quoted UTF-8 encoded strings
   *    with a size limit of 1 KiB.
   *
   *  * filterOutOfStockItems. Restricts predictions to items that do not have a
   *    stockState value of OUT_OF_STOCK.
   *
   * Examples:
   *
   *  * tag=("Red" OR "Blue") tag="New-Arrival" tag=(NOT "promotional")
   *  * filterOutOfStockItems  tag=(-"promotional")
   *  * filterOutOfStockItems
   */
  filter: string;
  /**
   * Optional. Use dryRun mode for this prediction query. If set to true, a
   * dummy model will be used that returns arbitrary catalog items.
   * Note that the dryRun mode should only be used for testing the API, or if
   * the model is not ready.
   */
  dryRun: boolean;
  /**
   * Optional. Additional domain specific parameters for the predictions.
   *
   * Allowed values:
   *
   * * `returnCatalogItem`: Boolean. If set to true, the associated catalogItem
   *    object will be returned in the
   *   `PredictResponse.PredictionResult.itemMetadata` object in the method
   *    response.
   * * `returnItemScore`: Boolean. If set to true, the prediction 'score'
   *    corresponding to each returned item will be set in the `metadata`
   *    field in the prediction response. The given 'score' indicates the
   *    probability of an item being clicked/purchased given the user's context
   *    and history.
   */
  params: { [key: string]: any | undefined };
  /**
   * Optional. The labels for the predict request.
   *
   *  * Label keys can contain lowercase letters, digits and hyphens, must start
   *    with a letter, and must end with a letter or digit.
   *  * Non-zero label values can contain lowercase letters, digits and hyphens,
   *    must start with a letter, and must end with a letter or digit.
   *  * No more than 64 labels can be associated with a given request.
   *
   * See https://goo.gl/xmQnxf for more information on and examples of labels.
   */
  labels: { [key: string]: string };
}

export interface PredictRequest_ParamsEntry {
  key: string;
  value: any | undefined;
}

export interface PredictRequest_LabelsEntry {
  key: string;
  value: string;
}

/** Response message for predict method. */
export interface PredictResponse {
  /**
   * A list of recommended items. The order represents the ranking (from the
   * most relevant item to the least).
   */
  results: PredictResponse_PredictionResult[];
  /**
   * A unique recommendation token. This should be included in the user event
   * logs resulting from this recommendation, which enables accurate attribution
   * of recommendation model performance.
   */
  recommendationToken: string;
  /** IDs of items in the request that were missing from the catalog. */
  itemsMissingInCatalog: string[];
  /** True if the dryRun property was set in the request. */
  dryRun: boolean;
  /** Additional domain specific prediction response metadata. */
  metadata: { [key: string]: any | undefined };
  /**
   * If empty, the list is complete. If nonempty, the token to pass to the next
   * request's PredictRequest.page_token.
   */
  nextPageToken: string;
}

/** PredictionResult represents the recommendation prediction results. */
export interface PredictResponse_PredictionResult {
  /** ID of the recommended catalog item */
  id: string;
  /**
   * Additional item metadata / annotations.
   *
   * Possible values:
   *
   * * `catalogItem`: JSON representation of the catalogItem. Will be set if
   *   `returnCatalogItem` is set to true in `PredictRequest.params`.
   * * `score`: Prediction score in double value. Will be set if
   *   `returnItemScore` is set to true in `PredictRequest.params`.
   */
  itemMetadata: { [key: string]: any | undefined };
}

export interface PredictResponse_PredictionResult_ItemMetadataEntry {
  key: string;
  value: any | undefined;
}

export interface PredictResponse_MetadataEntry {
  key: string;
  value: any | undefined;
}

function createBasePredictRequest(): PredictRequest {
  return {
    name: "",
    userEvent: undefined,
    pageSize: 0,
    pageToken: "",
    filter: "",
    dryRun: false,
    params: {},
    labels: {},
  };
}

export const PredictRequest: MessageFns<PredictRequest> = {
  encode(message: PredictRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.userEvent !== undefined) {
      UserEvent.encode(message.userEvent, writer.uint32(18).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(56).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(66).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    if (message.dryRun !== false) {
      writer.uint32(32).bool(message.dryRun);
    }
    Object.entries(message.params).forEach(([key, value]) => {
      if (value !== undefined) {
        PredictRequest_ParamsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
      }
    });
    Object.entries(message.labels).forEach(([key, value]) => {
      PredictRequest_LabelsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userEvent = UserEvent.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.dryRun = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = PredictRequest_ParamsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.params[entry6.key] = entry6.value;
          }
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = PredictRequest_LabelsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.labels[entry9.key] = entry9.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      userEvent: isSet(object.userEvent) ? UserEvent.fromJSON(object.userEvent) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      dryRun: isSet(object.dryRun) ? globalThis.Boolean(object.dryRun) : false,
      params: isObject(object.params)
        ? Object.entries(object.params).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: PredictRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.userEvent !== undefined) {
      obj.userEvent = UserEvent.toJSON(message.userEvent);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.dryRun !== false) {
      obj.dryRun = message.dryRun;
    }
    if (message.params) {
      const entries = Object.entries(message.params);
      if (entries.length > 0) {
        obj.params = {};
        entries.forEach(([k, v]) => {
          obj.params[k] = v;
        });
      }
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<PredictRequest>): PredictRequest {
    return PredictRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictRequest>): PredictRequest {
    const message = createBasePredictRequest();
    message.name = object.name ?? "";
    message.userEvent = (object.userEvent !== undefined && object.userEvent !== null)
      ? UserEvent.fromPartial(object.userEvent)
      : undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.dryRun = object.dryRun ?? false;
    message.params = Object.entries(object.params ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBasePredictRequest_ParamsEntry(): PredictRequest_ParamsEntry {
  return { key: "", value: undefined };
}

export const PredictRequest_ParamsEntry: MessageFns<PredictRequest_ParamsEntry> = {
  encode(message: PredictRequest_ParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictRequest_ParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictRequest_ParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictRequest_ParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: PredictRequest_ParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<PredictRequest_ParamsEntry>): PredictRequest_ParamsEntry {
    return PredictRequest_ParamsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictRequest_ParamsEntry>): PredictRequest_ParamsEntry {
    const message = createBasePredictRequest_ParamsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBasePredictRequest_LabelsEntry(): PredictRequest_LabelsEntry {
  return { key: "", value: "" };
}

export const PredictRequest_LabelsEntry: MessageFns<PredictRequest_LabelsEntry> = {
  encode(message: PredictRequest_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictRequest_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictRequest_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictRequest_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: PredictRequest_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<PredictRequest_LabelsEntry>): PredictRequest_LabelsEntry {
    return PredictRequest_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictRequest_LabelsEntry>): PredictRequest_LabelsEntry {
    const message = createBasePredictRequest_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBasePredictResponse(): PredictResponse {
  return {
    results: [],
    recommendationToken: "",
    itemsMissingInCatalog: [],
    dryRun: false,
    metadata: {},
    nextPageToken: "",
  };
}

export const PredictResponse: MessageFns<PredictResponse> = {
  encode(message: PredictResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      PredictResponse_PredictionResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.recommendationToken !== "") {
      writer.uint32(18).string(message.recommendationToken);
    }
    for (const v of message.itemsMissingInCatalog) {
      writer.uint32(26).string(v!);
    }
    if (message.dryRun !== false) {
      writer.uint32(32).bool(message.dryRun);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      if (value !== undefined) {
        PredictResponse_MetadataEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
      }
    });
    if (message.nextPageToken !== "") {
      writer.uint32(50).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.results.push(PredictResponse_PredictionResult.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.recommendationToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.itemsMissingInCatalog.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.dryRun = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = PredictResponse_MetadataEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.metadata[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => PredictResponse_PredictionResult.fromJSON(e))
        : [],
      recommendationToken: isSet(object.recommendationToken) ? globalThis.String(object.recommendationToken) : "",
      itemsMissingInCatalog: globalThis.Array.isArray(object?.itemsMissingInCatalog)
        ? object.itemsMissingInCatalog.map((e: any) => globalThis.String(e))
        : [],
      dryRun: isSet(object.dryRun) ? globalThis.Boolean(object.dryRun) : false,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: PredictResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => PredictResponse_PredictionResult.toJSON(e));
    }
    if (message.recommendationToken !== "") {
      obj.recommendationToken = message.recommendationToken;
    }
    if (message.itemsMissingInCatalog?.length) {
      obj.itemsMissingInCatalog = message.itemsMissingInCatalog;
    }
    if (message.dryRun !== false) {
      obj.dryRun = message.dryRun;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<PredictResponse>): PredictResponse {
    return PredictResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictResponse>): PredictResponse {
    const message = createBasePredictResponse();
    message.results = object.results?.map((e) => PredictResponse_PredictionResult.fromPartial(e)) || [];
    message.recommendationToken = object.recommendationToken ?? "";
    message.itemsMissingInCatalog = object.itemsMissingInCatalog?.map((e) => e) || [];
    message.dryRun = object.dryRun ?? false;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBasePredictResponse_PredictionResult(): PredictResponse_PredictionResult {
  return { id: "", itemMetadata: {} };
}

export const PredictResponse_PredictionResult: MessageFns<PredictResponse_PredictionResult> = {
  encode(message: PredictResponse_PredictionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    Object.entries(message.itemMetadata).forEach(([key, value]) => {
      if (value !== undefined) {
        PredictResponse_PredictionResult_ItemMetadataEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
          .join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictResponse_PredictionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictResponse_PredictionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = PredictResponse_PredictionResult_ItemMetadataEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.itemMetadata[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictResponse_PredictionResult {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      itemMetadata: isObject(object.itemMetadata)
        ? Object.entries(object.itemMetadata).reduce<{ [key: string]: any | undefined }>((acc, [key, value]) => {
          acc[key] = value as any | undefined;
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: PredictResponse_PredictionResult): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.itemMetadata) {
      const entries = Object.entries(message.itemMetadata);
      if (entries.length > 0) {
        obj.itemMetadata = {};
        entries.forEach(([k, v]) => {
          obj.itemMetadata[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<PredictResponse_PredictionResult>): PredictResponse_PredictionResult {
    return PredictResponse_PredictionResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictResponse_PredictionResult>): PredictResponse_PredictionResult {
    const message = createBasePredictResponse_PredictionResult();
    message.id = object.id ?? "";
    message.itemMetadata = Object.entries(object.itemMetadata ?? {}).reduce<{ [key: string]: any | undefined }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBasePredictResponse_PredictionResult_ItemMetadataEntry(): PredictResponse_PredictionResult_ItemMetadataEntry {
  return { key: "", value: undefined };
}

export const PredictResponse_PredictionResult_ItemMetadataEntry: MessageFns<
  PredictResponse_PredictionResult_ItemMetadataEntry
> = {
  encode(
    message: PredictResponse_PredictionResult_ItemMetadataEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictResponse_PredictionResult_ItemMetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictResponse_PredictionResult_ItemMetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictResponse_PredictionResult_ItemMetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: PredictResponse_PredictionResult_ItemMetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<PredictResponse_PredictionResult_ItemMetadataEntry>,
  ): PredictResponse_PredictionResult_ItemMetadataEntry {
    return PredictResponse_PredictionResult_ItemMetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<PredictResponse_PredictionResult_ItemMetadataEntry>,
  ): PredictResponse_PredictionResult_ItemMetadataEntry {
    const message = createBasePredictResponse_PredictionResult_ItemMetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBasePredictResponse_MetadataEntry(): PredictResponse_MetadataEntry {
  return { key: "", value: undefined };
}

export const PredictResponse_MetadataEntry: MessageFns<PredictResponse_MetadataEntry> = {
  encode(message: PredictResponse_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PredictResponse_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePredictResponse_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PredictResponse_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object?.value) ? object.value : undefined,
    };
  },

  toJSON(message: PredictResponse_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<PredictResponse_MetadataEntry>): PredictResponse_MetadataEntry {
    return PredictResponse_MetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PredictResponse_MetadataEntry>): PredictResponse_MetadataEntry {
    const message = createBasePredictResponse_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

/** Service for making recommendation prediction. */
export type PredictionServiceDefinition = typeof PredictionServiceDefinition;
export const PredictionServiceDefinition = {
  name: "PredictionService",
  fullName: "google.cloud.recommendationengine.v1beta1.PredictionService",
  methods: {
    /**
     * Makes a recommendation prediction. If using API Key based authentication,
     * the API Key must be registered using the
     * [PredictionApiKeyRegistry][google.cloud.recommendationengine.v1beta1.PredictionApiKeyRegistry]
     * service. [Learn more](/recommendations-ai/docs/setting-up#register-key).
     */
    predict: {
      name: "Predict",
      requestType: PredictRequest,
      requestStream: false,
      responseType: PredictResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 110, 97, 109, 101, 44, 117, 115, 101, 114, 95, 101, 118, 101, 110, 116])],
          578365826: [
            Buffer.from([
              89,
              58,
              1,
              42,
              34,
              84,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              112,
              108,
              97,
              99,
              101,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              112,
              114,
              101,
              100,
              105,
              99,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PredictionServiceImplementation<CallContextExt = {}> {
  /**
   * Makes a recommendation prediction. If using API Key based authentication,
   * the API Key must be registered using the
   * [PredictionApiKeyRegistry][google.cloud.recommendationengine.v1beta1.PredictionApiKeyRegistry]
   * service. [Learn more](/recommendations-ai/docs/setting-up#register-key).
   */
  predict(request: PredictRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PredictResponse>>;
}

export interface PredictionServiceClient<CallOptionsExt = {}> {
  /**
   * Makes a recommendation prediction. If using API Key based authentication,
   * the API Key must be registered using the
   * [PredictionApiKeyRegistry][google.cloud.recommendationengine.v1beta1.PredictionApiKeyRegistry]
   * service. [Learn more](/recommendations-ai/docs/setting-up#register-key).
   */
  predict(request: DeepPartial<PredictRequest>, options?: CallOptions & CallOptionsExt): Promise<PredictResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
