// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/recommendationengine/v1beta1/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.recommendationengine.v1beta1";

/**
 * FeatureMap represents extra features that customers want to include in the
 * recommendation model for catalogs/user events as categorical/numerical
 * features.
 */
export interface FeatureMap {
  /**
   * Categorical features that can take on one of a limited number of possible
   * values. Some examples would be the brand/maker of a product, or country of
   * a customer.
   *
   * Feature names and values must be UTF-8 encoded strings.
   *
   * For example: `{ "colors": {"value": ["yellow", "green"]},
   *                 "sizes": {"value":["S", "M"]}`
   */
  categoricalFeatures: { [key: string]: FeatureMap_StringList };
  /**
   * Numerical features. Some examples would be the height/weight of a product,
   * or age of a customer.
   *
   * Feature names must be UTF-8 encoded strings.
   *
   * For example: `{ "lengths_cm": {"value":[2.3, 15.4]},
   *                 "heights_cm": {"value":[8.1, 6.4]} }`
   */
  numericalFeatures: { [key: string]: FeatureMap_FloatList };
}

/** A list of string features. */
export interface FeatureMap_StringList {
  /** String feature value with a length limit of 128 bytes. */
  value: string[];
}

/** A list of float features. */
export interface FeatureMap_FloatList {
  /** Float feature value. */
  value: number[];
}

export interface FeatureMap_CategoricalFeaturesEntry {
  key: string;
  value: FeatureMap_StringList | undefined;
}

export interface FeatureMap_NumericalFeaturesEntry {
  key: string;
  value: FeatureMap_FloatList | undefined;
}

function createBaseFeatureMap(): FeatureMap {
  return { categoricalFeatures: {}, numericalFeatures: {} };
}

export const FeatureMap: MessageFns<FeatureMap> = {
  encode(message: FeatureMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.categoricalFeatures).forEach(([key, value]) => {
      FeatureMap_CategoricalFeaturesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    Object.entries(message.numericalFeatures).forEach(([key, value]) => {
      FeatureMap_NumericalFeaturesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = FeatureMap_CategoricalFeaturesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.categoricalFeatures[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = FeatureMap_NumericalFeaturesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.numericalFeatures[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureMap {
    return {
      categoricalFeatures: isObject(object.categoricalFeatures)
        ? Object.entries(object.categoricalFeatures).reduce<{ [key: string]: FeatureMap_StringList }>(
          (acc, [key, value]) => {
            acc[key] = FeatureMap_StringList.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      numericalFeatures: isObject(object.numericalFeatures)
        ? Object.entries(object.numericalFeatures).reduce<{ [key: string]: FeatureMap_FloatList }>(
          (acc, [key, value]) => {
            acc[key] = FeatureMap_FloatList.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: FeatureMap): unknown {
    const obj: any = {};
    if (message.categoricalFeatures) {
      const entries = Object.entries(message.categoricalFeatures);
      if (entries.length > 0) {
        obj.categoricalFeatures = {};
        entries.forEach(([k, v]) => {
          obj.categoricalFeatures[k] = FeatureMap_StringList.toJSON(v);
        });
      }
    }
    if (message.numericalFeatures) {
      const entries = Object.entries(message.numericalFeatures);
      if (entries.length > 0) {
        obj.numericalFeatures = {};
        entries.forEach(([k, v]) => {
          obj.numericalFeatures[k] = FeatureMap_FloatList.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureMap>): FeatureMap {
    return FeatureMap.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureMap>): FeatureMap {
    const message = createBaseFeatureMap();
    message.categoricalFeatures = Object.entries(object.categoricalFeatures ?? {}).reduce<
      { [key: string]: FeatureMap_StringList }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = FeatureMap_StringList.fromPartial(value);
      }
      return acc;
    }, {});
    message.numericalFeatures = Object.entries(object.numericalFeatures ?? {}).reduce<
      { [key: string]: FeatureMap_FloatList }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = FeatureMap_FloatList.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseFeatureMap_StringList(): FeatureMap_StringList {
  return { value: [] };
}

export const FeatureMap_StringList: MessageFns<FeatureMap_StringList> = {
  encode(message: FeatureMap_StringList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.value) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureMap_StringList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureMap_StringList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureMap_StringList {
    return { value: globalThis.Array.isArray(object?.value) ? object.value.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: FeatureMap_StringList): unknown {
    const obj: any = {};
    if (message.value?.length) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureMap_StringList>): FeatureMap_StringList {
    return FeatureMap_StringList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureMap_StringList>): FeatureMap_StringList {
    const message = createBaseFeatureMap_StringList();
    message.value = object.value?.map((e) => e) || [];
    return message;
  },
};

function createBaseFeatureMap_FloatList(): FeatureMap_FloatList {
  return { value: [] };
}

export const FeatureMap_FloatList: MessageFns<FeatureMap_FloatList> = {
  encode(message: FeatureMap_FloatList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.value) {
      writer.float(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureMap_FloatList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureMap_FloatList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.value.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.value.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureMap_FloatList {
    return { value: globalThis.Array.isArray(object?.value) ? object.value.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: FeatureMap_FloatList): unknown {
    const obj: any = {};
    if (message.value?.length) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureMap_FloatList>): FeatureMap_FloatList {
    return FeatureMap_FloatList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureMap_FloatList>): FeatureMap_FloatList {
    const message = createBaseFeatureMap_FloatList();
    message.value = object.value?.map((e) => e) || [];
    return message;
  },
};

function createBaseFeatureMap_CategoricalFeaturesEntry(): FeatureMap_CategoricalFeaturesEntry {
  return { key: "", value: undefined };
}

export const FeatureMap_CategoricalFeaturesEntry: MessageFns<FeatureMap_CategoricalFeaturesEntry> = {
  encode(message: FeatureMap_CategoricalFeaturesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      FeatureMap_StringList.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureMap_CategoricalFeaturesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureMap_CategoricalFeaturesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = FeatureMap_StringList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureMap_CategoricalFeaturesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? FeatureMap_StringList.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: FeatureMap_CategoricalFeaturesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = FeatureMap_StringList.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureMap_CategoricalFeaturesEntry>): FeatureMap_CategoricalFeaturesEntry {
    return FeatureMap_CategoricalFeaturesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureMap_CategoricalFeaturesEntry>): FeatureMap_CategoricalFeaturesEntry {
    const message = createBaseFeatureMap_CategoricalFeaturesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? FeatureMap_StringList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseFeatureMap_NumericalFeaturesEntry(): FeatureMap_NumericalFeaturesEntry {
  return { key: "", value: undefined };
}

export const FeatureMap_NumericalFeaturesEntry: MessageFns<FeatureMap_NumericalFeaturesEntry> = {
  encode(message: FeatureMap_NumericalFeaturesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      FeatureMap_FloatList.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureMap_NumericalFeaturesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureMap_NumericalFeaturesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = FeatureMap_FloatList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureMap_NumericalFeaturesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? FeatureMap_FloatList.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: FeatureMap_NumericalFeaturesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = FeatureMap_FloatList.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureMap_NumericalFeaturesEntry>): FeatureMap_NumericalFeaturesEntry {
    return FeatureMap_NumericalFeaturesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureMap_NumericalFeaturesEntry>): FeatureMap_NumericalFeaturesEntry {
    const message = createBaseFeatureMap_NumericalFeaturesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? FeatureMap_FloatList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
