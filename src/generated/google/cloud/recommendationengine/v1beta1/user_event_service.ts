// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/recommendationengine/v1beta1/user_event_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { HttpBody } from "../../../api/httpbody.js";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { ImportUserEventsRequest } from "./import.js";
import { UserEvent } from "./user_event.js";

export const protobufPackage = "google.cloud.recommendationengine.v1beta1";

/** Request message for PurgeUserEvents method. */
export interface PurgeUserEventsRequest {
  /**
   * Required. The resource name of the event_store under which the events are
   * created. The format is
   * `projects/${projectId}/locations/global/catalogs/${catalogId}/eventStores/${eventStoreId}`
   */
  parent: string;
  /**
   * Required. The filter string to specify the events to be deleted. Empty
   * string filter is not allowed. This filter can also be used with
   * ListUserEvents API to list events that will be deleted. The eligible fields
   * for filtering are:
   * * eventType - UserEvent.eventType field of type string.
   * * eventTime - in ISO 8601 "zulu" format.
   * * visitorId - field of type string. Specifying this will delete all events
   * associated with a visitor.
   * * userId - field of type string. Specifying this will delete all events
   * associated with a user.
   * Example 1: Deleting all events in a time range.
   * `eventTime > "2012-04-23T18:25:43.511Z" eventTime <
   * "2012-04-23T18:30:43.511Z"`
   * Example 2: Deleting specific eventType in time range.
   * `eventTime > "2012-04-23T18:25:43.511Z" eventType = "detail-page-view"`
   * Example 3: Deleting all events for a specific visitor
   * `visitorId = visitor1024`
   * The filtering fields are assumed to have an implicit AND.
   */
  filter: string;
  /**
   * Optional. The default value is false. Override this flag to true to
   * actually perform the purge. If the field is not set to true, a sampling of
   * events to be deleted will be returned.
   */
  force: boolean;
}

/**
 * Metadata related to the progress of the PurgeUserEvents operation.
 * This will be returned by the google.longrunning.Operation.metadata field.
 */
export interface PurgeUserEventsMetadata {
  /** The ID of the request / operation. */
  operationName: string;
  /** Operation create time. */
  createTime: Date | undefined;
}

/**
 * Response of the PurgeUserEventsRequest. If the long running operation is
 * successfully done, then this message is returned by the
 * google.longrunning.Operations.response field.
 */
export interface PurgeUserEventsResponse {
  /** The total count of events purged as a result of the operation. */
  purgedEventsCount: Long;
  /**
   * A sampling of events deleted (or will be deleted) depending on the `force`
   * property in the request. Max of 500 items will be returned.
   */
  userEventsSample: UserEvent[];
}

/** Request message for WriteUserEvent method. */
export interface WriteUserEventRequest {
  /**
   * Required. The parent eventStore resource name, such as
   * `projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store`.
   */
  parent: string;
  /** Required. User event to write. */
  userEvent: UserEvent | undefined;
}

/** Request message for CollectUserEvent method. */
export interface CollectUserEventRequest {
  /**
   * Required. The parent eventStore name, such as
   * `projects/1234/locations/global/catalogs/default_catalog/eventStores/default_event_store`.
   */
  parent: string;
  /** Required. URL encoded UserEvent proto. */
  userEvent: string;
  /**
   * Optional. The url including cgi-parameters but excluding the hash fragment.
   * The URL must be truncated to 1.5K bytes to conservatively be under the 2K
   * bytes. This is often more useful than the referer url, because many
   * browsers only send the domain for 3rd party requests.
   */
  uri: string;
  /**
   * Optional. The event timestamp in milliseconds. This prevents browser
   * caching of otherwise identical get requests. The name is abbreviated to
   * reduce the payload bytes.
   */
  ets: Long;
}

/** Request message for ListUserEvents method. */
export interface ListUserEventsRequest {
  /**
   * Required. The parent eventStore resource name, such as
   * `projects/* /locations/* /catalogs/default_catalog/eventStores/default_event_store`.
   */
  parent: string;
  /**
   * Optional. Maximum number of results to return per page. If zero, the
   * service will choose a reasonable default.
   */
  pageSize: number;
  /** Optional. The previous ListUserEventsResponse.next_page_token. */
  pageToken: string;
  /**
   * Optional. Filtering expression to specify restrictions over
   * returned events. This is a sequence of terms, where each term applies some
   * kind of a restriction to the returned user events. Use this expression to
   * restrict results to a specific time range, or filter events by eventType.
   *    eg: eventTime > "2012-04-23T18:25:43.511Z" eventsMissingCatalogItems
   *    eventTime<"2012-04-23T18:25:43.511Z" eventType=search
   *
   *   We expect only 3 types of fields:
   *
   *    * eventTime: this can be specified a maximum of 2 times, once with a
   *      less than operator and once with a greater than operator. The
   *      eventTime restrict should result in one contiguous valid eventTime
   *      range.
   *
   *    * eventType: only 1 eventType restriction can be specified.
   *
   *    * eventsMissingCatalogItems: specififying this will restrict results
   *      to events for which catalog items were not found in the catalog. The
   *      default behavior is to return only those events for which catalog
   *      items were found.
   *
   *   Some examples of valid filters expressions:
   *
   *   * Example 1: eventTime > "2012-04-23T18:25:43.511Z"
   *             eventTime < "2012-04-23T18:30:43.511Z"
   *   * Example 2: eventTime > "2012-04-23T18:25:43.511Z"
   *             eventType = detail-page-view
   *   * Example 3: eventsMissingCatalogItems
   *             eventType = search eventTime < "2018-04-23T18:30:43.511Z"
   *   * Example 4: eventTime > "2012-04-23T18:25:43.511Z"
   *   * Example 5: eventType = search
   *   * Example 6: eventsMissingCatalogItems
   */
  filter: string;
}

/** Response message for ListUserEvents method. */
export interface ListUserEventsResponse {
  /** The user events. */
  userEvents: UserEvent[];
  /**
   * If empty, the list is complete. If nonempty, the token to pass to the next
   * request's ListUserEvents.page_token.
   */
  nextPageToken: string;
}

function createBasePurgeUserEventsRequest(): PurgeUserEventsRequest {
  return { parent: "", filter: "", force: false };
}

export const PurgeUserEventsRequest: MessageFns<PurgeUserEventsRequest> = {
  encode(message: PurgeUserEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeUserEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeUserEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeUserEventsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: PurgeUserEventsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeUserEventsRequest>): PurgeUserEventsRequest {
    return PurgeUserEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeUserEventsRequest>): PurgeUserEventsRequest {
    const message = createBasePurgeUserEventsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBasePurgeUserEventsMetadata(): PurgeUserEventsMetadata {
  return { operationName: "", createTime: undefined };
}

export const PurgeUserEventsMetadata: MessageFns<PurgeUserEventsMetadata> = {
  encode(message: PurgeUserEventsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationName !== "") {
      writer.uint32(10).string(message.operationName);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeUserEventsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeUserEventsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operationName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeUserEventsMetadata {
    return {
      operationName: isSet(object.operationName) ? globalThis.String(object.operationName) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: PurgeUserEventsMetadata): unknown {
    const obj: any = {};
    if (message.operationName !== "") {
      obj.operationName = message.operationName;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeUserEventsMetadata>): PurgeUserEventsMetadata {
    return PurgeUserEventsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeUserEventsMetadata>): PurgeUserEventsMetadata {
    const message = createBasePurgeUserEventsMetadata();
    message.operationName = object.operationName ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBasePurgeUserEventsResponse(): PurgeUserEventsResponse {
  return { purgedEventsCount: Long.ZERO, userEventsSample: [] };
}

export const PurgeUserEventsResponse: MessageFns<PurgeUserEventsResponse> = {
  encode(message: PurgeUserEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.purgedEventsCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.purgedEventsCount.toString());
    }
    for (const v of message.userEventsSample) {
      UserEvent.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurgeUserEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurgeUserEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.purgedEventsCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userEventsSample.push(UserEvent.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurgeUserEventsResponse {
    return {
      purgedEventsCount: isSet(object.purgedEventsCount) ? Long.fromValue(object.purgedEventsCount) : Long.ZERO,
      userEventsSample: globalThis.Array.isArray(object?.userEventsSample)
        ? object.userEventsSample.map((e: any) => UserEvent.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PurgeUserEventsResponse): unknown {
    const obj: any = {};
    if (!message.purgedEventsCount.equals(Long.ZERO)) {
      obj.purgedEventsCount = (message.purgedEventsCount || Long.ZERO).toString();
    }
    if (message.userEventsSample?.length) {
      obj.userEventsSample = message.userEventsSample.map((e) => UserEvent.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PurgeUserEventsResponse>): PurgeUserEventsResponse {
    return PurgeUserEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PurgeUserEventsResponse>): PurgeUserEventsResponse {
    const message = createBasePurgeUserEventsResponse();
    message.purgedEventsCount = (object.purgedEventsCount !== undefined && object.purgedEventsCount !== null)
      ? Long.fromValue(object.purgedEventsCount)
      : Long.ZERO;
    message.userEventsSample = object.userEventsSample?.map((e) => UserEvent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWriteUserEventRequest(): WriteUserEventRequest {
  return { parent: "", userEvent: undefined };
}

export const WriteUserEventRequest: MessageFns<WriteUserEventRequest> = {
  encode(message: WriteUserEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.userEvent !== undefined) {
      UserEvent.encode(message.userEvent, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteUserEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteUserEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userEvent = UserEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WriteUserEventRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      userEvent: isSet(object.userEvent) ? UserEvent.fromJSON(object.userEvent) : undefined,
    };
  },

  toJSON(message: WriteUserEventRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.userEvent !== undefined) {
      obj.userEvent = UserEvent.toJSON(message.userEvent);
    }
    return obj;
  },

  create(base?: DeepPartial<WriteUserEventRequest>): WriteUserEventRequest {
    return WriteUserEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WriteUserEventRequest>): WriteUserEventRequest {
    const message = createBaseWriteUserEventRequest();
    message.parent = object.parent ?? "";
    message.userEvent = (object.userEvent !== undefined && object.userEvent !== null)
      ? UserEvent.fromPartial(object.userEvent)
      : undefined;
    return message;
  },
};

function createBaseCollectUserEventRequest(): CollectUserEventRequest {
  return { parent: "", userEvent: "", uri: "", ets: Long.ZERO };
}

export const CollectUserEventRequest: MessageFns<CollectUserEventRequest> = {
  encode(message: CollectUserEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.userEvent !== "") {
      writer.uint32(18).string(message.userEvent);
    }
    if (message.uri !== "") {
      writer.uint32(26).string(message.uri);
    }
    if (!message.ets.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.ets.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectUserEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectUserEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userEvent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.ets = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollectUserEventRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      userEvent: isSet(object.userEvent) ? globalThis.String(object.userEvent) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      ets: isSet(object.ets) ? Long.fromValue(object.ets) : Long.ZERO,
    };
  },

  toJSON(message: CollectUserEventRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.userEvent !== "") {
      obj.userEvent = message.userEvent;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (!message.ets.equals(Long.ZERO)) {
      obj.ets = (message.ets || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<CollectUserEventRequest>): CollectUserEventRequest {
    return CollectUserEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CollectUserEventRequest>): CollectUserEventRequest {
    const message = createBaseCollectUserEventRequest();
    message.parent = object.parent ?? "";
    message.userEvent = object.userEvent ?? "";
    message.uri = object.uri ?? "";
    message.ets = (object.ets !== undefined && object.ets !== null) ? Long.fromValue(object.ets) : Long.ZERO;
    return message;
  },
};

function createBaseListUserEventsRequest(): ListUserEventsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListUserEventsRequest: MessageFns<ListUserEventsRequest> = {
  encode(message: ListUserEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUserEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserEventsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListUserEventsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListUserEventsRequest>): ListUserEventsRequest {
    return ListUserEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUserEventsRequest>): ListUserEventsRequest {
    const message = createBaseListUserEventsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListUserEventsResponse(): ListUserEventsResponse {
  return { userEvents: [], nextPageToken: "" };
}

export const ListUserEventsResponse: MessageFns<ListUserEventsResponse> = {
  encode(message: ListUserEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userEvents) {
      UserEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUserEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userEvents.push(UserEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserEventsResponse {
    return {
      userEvents: globalThis.Array.isArray(object?.userEvents)
        ? object.userEvents.map((e: any) => UserEvent.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListUserEventsResponse): unknown {
    const obj: any = {};
    if (message.userEvents?.length) {
      obj.userEvents = message.userEvents.map((e) => UserEvent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListUserEventsResponse>): ListUserEventsResponse {
    return ListUserEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUserEventsResponse>): ListUserEventsResponse {
    const message = createBaseListUserEventsResponse();
    message.userEvents = object.userEvents?.map((e) => UserEvent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** Service for ingesting end user actions on the customer website. */
export type UserEventServiceDefinition = typeof UserEventServiceDefinition;
export const UserEventServiceDefinition = {
  name: "UserEventService",
  fullName: "google.cloud.recommendationengine.v1beta1.UserEventService",
  methods: {
    /** Writes a single user event. */
    writeUserEvent: {
      name: "WriteUserEvent",
      requestType: WriteUserEventRequest,
      requestStream: false,
      responseType: UserEvent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 117, 115, 101, 114, 95, 101, 118, 101, 110, 116])],
          578365826: [
            Buffer.from([
              96,
              58,
              10,
              117,
              115,
              101,
              114,
              95,
              101,
              118,
              101,
              110,
              116,
              34,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Writes a single user event from the browser. This uses a GET request to
     * due to browser restriction of POST-ing to a 3rd party domain.
     *
     * This method is used only by the Recommendations AI JavaScript pixel.
     * Users should not call this method directly.
     */
    collectUserEvent: {
      name: "CollectUserEvent",
      requestType: CollectUserEventRequest,
      requestStream: false,
      responseType: HttpBody,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              117,
              115,
              101,
              114,
              95,
              101,
              118,
              101,
              110,
              116,
              44,
              117,
              114,
              105,
              44,
              101,
              116,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              86,
              18,
              84,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
            ]),
          ],
        },
      },
    },
    /** Gets a list of user events within a time range, with potential filtering. */
    listUserEvents: {
      name: "ListUserEvents",
      requestType: ListUserEventsRequest,
      requestStream: false,
      responseType: ListUserEventsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 112, 97, 114, 101, 110, 116, 44, 102, 105, 108, 116, 101, 114])],
          578365826: [
            Buffer.from([
              78,
              18,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes permanently all user events specified by the filter provided.
     * Depending on the number of events specified by the filter, this operation
     * could take hours or days to complete. To test a filter, use the list
     * command first.
     */
    purgeUserEvents: {
      name: "PurgeUserEvents",
      requestType: PurgeUserEventsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              134,
              1,
              10,
              65,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              46,
              80,
              117,
              114,
              103,
              101,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              65,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              46,
              80,
              117,
              114,
              103,
              101,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              19,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              102,
              105,
              108,
              116,
              101,
              114,
              44,
              102,
              111,
              114,
              99,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              87,
              58,
              1,
              42,
              34,
              82,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              112,
              117,
              114,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Bulk import of User events. Request processing might be
     * synchronous. Events that already exist are skipped.
     * Use this method for backfilling historical user events.
     *
     * Operation.response is of type ImportResponse. Note that it is
     * possible for a subset of the items to be successfully inserted.
     * Operation.metadata is of type ImportMetadata.
     */
    importUserEvents: {
      name: "ImportUserEvents",
      requestType: ImportUserEventsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              126,
              10,
              66,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              85,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              101,
              110,
              103,
              105,
              110,
              101,
              46,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              46,
              73,
              109,
              112,
              111,
              114,
              116,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              44,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              105,
              100,
              44,
              105,
              110,
              112,
              117,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              101,
              114,
              114,
              111,
              114,
              115,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              88,
              58,
              1,
              42,
              34,
              83,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              47,
              42,
              47,
              101,
              118,
              101,
              110,
              116,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              117,
              115,
              101,
              114,
              69,
              118,
              101,
              110,
              116,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface UserEventServiceImplementation<CallContextExt = {}> {
  /** Writes a single user event. */
  writeUserEvent(
    request: WriteUserEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UserEvent>>;
  /**
   * Writes a single user event from the browser. This uses a GET request to
   * due to browser restriction of POST-ing to a 3rd party domain.
   *
   * This method is used only by the Recommendations AI JavaScript pixel.
   * Users should not call this method directly.
   */
  collectUserEvent(
    request: CollectUserEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HttpBody>>;
  /** Gets a list of user events within a time range, with potential filtering. */
  listUserEvents(
    request: ListUserEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListUserEventsResponse>>;
  /**
   * Deletes permanently all user events specified by the filter provided.
   * Depending on the number of events specified by the filter, this operation
   * could take hours or days to complete. To test a filter, use the list
   * command first.
   */
  purgeUserEvents(
    request: PurgeUserEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Bulk import of User events. Request processing might be
   * synchronous. Events that already exist are skipped.
   * Use this method for backfilling historical user events.
   *
   * Operation.response is of type ImportResponse. Note that it is
   * possible for a subset of the items to be successfully inserted.
   * Operation.metadata is of type ImportMetadata.
   */
  importUserEvents(
    request: ImportUserEventsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface UserEventServiceClient<CallOptionsExt = {}> {
  /** Writes a single user event. */
  writeUserEvent(
    request: DeepPartial<WriteUserEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UserEvent>;
  /**
   * Writes a single user event from the browser. This uses a GET request to
   * due to browser restriction of POST-ing to a 3rd party domain.
   *
   * This method is used only by the Recommendations AI JavaScript pixel.
   * Users should not call this method directly.
   */
  collectUserEvent(
    request: DeepPartial<CollectUserEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HttpBody>;
  /** Gets a list of user events within a time range, with potential filtering. */
  listUserEvents(
    request: DeepPartial<ListUserEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListUserEventsResponse>;
  /**
   * Deletes permanently all user events specified by the filter provided.
   * Depending on the number of events specified by the filter, this operation
   * could take hours or days to complete. To test a filter, use the list
   * command first.
   */
  purgeUserEvents(
    request: DeepPartial<PurgeUserEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Bulk import of User events. Request processing might be
   * synchronous. Events that already exist are skipped.
   * Use this method for backfilling historical user events.
   *
   * Operation.response is of type ImportResponse. Note that it is
   * possible for a subset of the items to be successfully inserted.
   * Operation.metadata is of type ImportMetadata.
   */
  importUserEvents(
    request: DeepPartial<ImportUserEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
