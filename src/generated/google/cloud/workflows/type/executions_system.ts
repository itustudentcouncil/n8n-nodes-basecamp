// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/workflows/type/executions_system.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.workflows.type";

/** Logged during the lifetime of Workflow Execution. */
export interface ExecutionsSystemLog {
  /** Human readable contents of the log in English. The size limit is 5 kB. */
  message: string;
  /** The absolute point in time when the activity happened. */
  activityTime:
    | Date
    | undefined;
  /** State of the execution when the log was created. */
  state: ExecutionsSystemLog_State;
  /** Appears only in the log created when the execution has started. */
  start?:
    | ExecutionsSystemLog_Start
    | undefined;
  /**
   * Appears only in the log created when the execution has finished
   * successfully.
   */
  success?:
    | ExecutionsSystemLog_Success
    | undefined;
  /** Appears only in the log created when the execution has failed. */
  failure?: ExecutionsSystemLog_Failure | undefined;
}

/** Possible states of the execution. There could be more states in the future. */
export enum ExecutionsSystemLog_State {
  /** STATE_UNSPECIFIED - Invalid state. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The Workflow Execution is in progress. */
  ACTIVE = 1,
  /** SUCCEEDED - The Workflow Execution has finished successfully. */
  SUCCEEDED = 2,
  /** FAILED - The Workflow Execution failed with an error. */
  FAILED = 3,
  /** CANCELLED - The Workflow Execution has been stopped intentionally. */
  CANCELLED = 4,
  UNRECOGNIZED = -1,
}

export function executionsSystemLog_StateFromJSON(object: any): ExecutionsSystemLog_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return ExecutionsSystemLog_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return ExecutionsSystemLog_State.ACTIVE;
    case 2:
    case "SUCCEEDED":
      return ExecutionsSystemLog_State.SUCCEEDED;
    case 3:
    case "FAILED":
      return ExecutionsSystemLog_State.FAILED;
    case 4:
    case "CANCELLED":
      return ExecutionsSystemLog_State.CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExecutionsSystemLog_State.UNRECOGNIZED;
  }
}

export function executionsSystemLog_StateToJSON(object: ExecutionsSystemLog_State): string {
  switch (object) {
    case ExecutionsSystemLog_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case ExecutionsSystemLog_State.ACTIVE:
      return "ACTIVE";
    case ExecutionsSystemLog_State.SUCCEEDED:
      return "SUCCEEDED";
    case ExecutionsSystemLog_State.FAILED:
      return "FAILED";
    case ExecutionsSystemLog_State.CANCELLED:
      return "CANCELLED";
    case ExecutionsSystemLog_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Detailed information about the start of the execution. */
export interface ExecutionsSystemLog_Start {
  /** The execution input argument. */
  argument: string;
}

/** Detailed information about the successful finish of the execution. */
export interface ExecutionsSystemLog_Success {
  /** The final result of the execution. */
  result: string;
}

/** Detailed information about the execution failure. */
export interface ExecutionsSystemLog_Failure {
  /** The exception message, e.g. "division by zero". The size limit is 1 kB. */
  exception: string;
  /**
   * The code location of the statement that has created the log. For example,
   * a log created in subworkflow 'Foo' in step 'bar' will have its source
   * equal to 'Foo.bar'. The size limit is 1 kB.
   */
  source: string;
}

function createBaseExecutionsSystemLog(): ExecutionsSystemLog {
  return { message: "", activityTime: undefined, state: 0, start: undefined, success: undefined, failure: undefined };
}

export const ExecutionsSystemLog: MessageFns<ExecutionsSystemLog> = {
  encode(message: ExecutionsSystemLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.activityTime !== undefined) {
      Timestamp.encode(toTimestamp(message.activityTime), writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.start !== undefined) {
      ExecutionsSystemLog_Start.encode(message.start, writer.uint32(34).fork()).join();
    }
    if (message.success !== undefined) {
      ExecutionsSystemLog_Success.encode(message.success, writer.uint32(42).fork()).join();
    }
    if (message.failure !== undefined) {
      ExecutionsSystemLog_Failure.encode(message.failure, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionsSystemLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionsSystemLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.activityTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.start = ExecutionsSystemLog_Start.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.success = ExecutionsSystemLog_Success.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.failure = ExecutionsSystemLog_Failure.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionsSystemLog {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      activityTime: isSet(object.activityTime) ? fromJsonTimestamp(object.activityTime) : undefined,
      state: isSet(object.state) ? executionsSystemLog_StateFromJSON(object.state) : 0,
      start: isSet(object.start) ? ExecutionsSystemLog_Start.fromJSON(object.start) : undefined,
      success: isSet(object.success) ? ExecutionsSystemLog_Success.fromJSON(object.success) : undefined,
      failure: isSet(object.failure) ? ExecutionsSystemLog_Failure.fromJSON(object.failure) : undefined,
    };
  },

  toJSON(message: ExecutionsSystemLog): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.activityTime !== undefined) {
      obj.activityTime = message.activityTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = executionsSystemLog_StateToJSON(message.state);
    }
    if (message.start !== undefined) {
      obj.start = ExecutionsSystemLog_Start.toJSON(message.start);
    }
    if (message.success !== undefined) {
      obj.success = ExecutionsSystemLog_Success.toJSON(message.success);
    }
    if (message.failure !== undefined) {
      obj.failure = ExecutionsSystemLog_Failure.toJSON(message.failure);
    }
    return obj;
  },

  create(base?: DeepPartial<ExecutionsSystemLog>): ExecutionsSystemLog {
    return ExecutionsSystemLog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecutionsSystemLog>): ExecutionsSystemLog {
    const message = createBaseExecutionsSystemLog();
    message.message = object.message ?? "";
    message.activityTime = object.activityTime ?? undefined;
    message.state = object.state ?? 0;
    message.start = (object.start !== undefined && object.start !== null)
      ? ExecutionsSystemLog_Start.fromPartial(object.start)
      : undefined;
    message.success = (object.success !== undefined && object.success !== null)
      ? ExecutionsSystemLog_Success.fromPartial(object.success)
      : undefined;
    message.failure = (object.failure !== undefined && object.failure !== null)
      ? ExecutionsSystemLog_Failure.fromPartial(object.failure)
      : undefined;
    return message;
  },
};

function createBaseExecutionsSystemLog_Start(): ExecutionsSystemLog_Start {
  return { argument: "" };
}

export const ExecutionsSystemLog_Start: MessageFns<ExecutionsSystemLog_Start> = {
  encode(message: ExecutionsSystemLog_Start, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.argument !== "") {
      writer.uint32(18).string(message.argument);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionsSystemLog_Start {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionsSystemLog_Start();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.argument = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionsSystemLog_Start {
    return { argument: isSet(object.argument) ? globalThis.String(object.argument) : "" };
  },

  toJSON(message: ExecutionsSystemLog_Start): unknown {
    const obj: any = {};
    if (message.argument !== "") {
      obj.argument = message.argument;
    }
    return obj;
  },

  create(base?: DeepPartial<ExecutionsSystemLog_Start>): ExecutionsSystemLog_Start {
    return ExecutionsSystemLog_Start.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecutionsSystemLog_Start>): ExecutionsSystemLog_Start {
    const message = createBaseExecutionsSystemLog_Start();
    message.argument = object.argument ?? "";
    return message;
  },
};

function createBaseExecutionsSystemLog_Success(): ExecutionsSystemLog_Success {
  return { result: "" };
}

export const ExecutionsSystemLog_Success: MessageFns<ExecutionsSystemLog_Success> = {
  encode(message: ExecutionsSystemLog_Success, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== "") {
      writer.uint32(18).string(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionsSystemLog_Success {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionsSystemLog_Success();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionsSystemLog_Success {
    return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
  },

  toJSON(message: ExecutionsSystemLog_Success): unknown {
    const obj: any = {};
    if (message.result !== "") {
      obj.result = message.result;
    }
    return obj;
  },

  create(base?: DeepPartial<ExecutionsSystemLog_Success>): ExecutionsSystemLog_Success {
    return ExecutionsSystemLog_Success.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecutionsSystemLog_Success>): ExecutionsSystemLog_Success {
    const message = createBaseExecutionsSystemLog_Success();
    message.result = object.result ?? "";
    return message;
  },
};

function createBaseExecutionsSystemLog_Failure(): ExecutionsSystemLog_Failure {
  return { exception: "", source: "" };
}

export const ExecutionsSystemLog_Failure: MessageFns<ExecutionsSystemLog_Failure> = {
  encode(message: ExecutionsSystemLog_Failure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.exception !== "") {
      writer.uint32(10).string(message.exception);
    }
    if (message.source !== "") {
      writer.uint32(18).string(message.source);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionsSystemLog_Failure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecutionsSystemLog_Failure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.exception = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.source = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecutionsSystemLog_Failure {
    return {
      exception: isSet(object.exception) ? globalThis.String(object.exception) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
    };
  },

  toJSON(message: ExecutionsSystemLog_Failure): unknown {
    const obj: any = {};
    if (message.exception !== "") {
      obj.exception = message.exception;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    return obj;
  },

  create(base?: DeepPartial<ExecutionsSystemLog_Failure>): ExecutionsSystemLog_Failure {
    return ExecutionsSystemLog_Failure.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExecutionsSystemLog_Failure>): ExecutionsSystemLog_Failure {
    const message = createBaseExecutionsSystemLog_Failure();
    message.exception = object.exception ?? "";
    message.source = object.source ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
