// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/sensitiveaction/logging/v1/sensitive_action_payload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";
import { Access } from "../../../securitycenter/v1/access.js";

export const protobufPackage = "google.cloud.sensitiveaction.logging.v1";

/**
 * Payload proto for sensitiveaction.googleapis.com/action
 * Platform Log event that describes a sensitive action
 */
export interface SensitiveAction {
  /** The type of action (eg. "change_organization_policy"). */
  actionType: string;
  /** The time this action was detected. */
  actionTime:
    | Date
    | undefined;
  /** GCP resources that are involved in the action. */
  affectedResources: string[];
  /** Cloud Logging entries that were used to identify the action. */
  sourceLogIds: SensitiveAction_SourceLogId[];
  /** Link to documentation where you can learn more about sensitive actions. */
  learnMoreUri: string;
  /** Access details associated to the sensitive action. */
  access: Access | undefined;
}

/** Used to reference a specific Cloud Logging LogEntry. */
export interface SensitiveAction_SourceLogId {
  /**
   * The GCP resource (organization, folder, or project) that the LogEntry
   * came from.
   */
  resourceContainer: string;
  /** The timestamp of the LogEntry. */
  logTime:
    | Date
    | undefined;
  /** The insert_id of the LogEntry. */
  insertId: string;
  /** A link to the Cloud Logging dashboard with a query for the LogEntry. */
  queryUri: string;
}

function createBaseSensitiveAction(): SensitiveAction {
  return {
    actionType: "",
    actionTime: undefined,
    affectedResources: [],
    sourceLogIds: [],
    learnMoreUri: "",
    access: undefined,
  };
}

export const SensitiveAction: MessageFns<SensitiveAction> = {
  encode(message: SensitiveAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actionType !== "") {
      writer.uint32(10).string(message.actionType);
    }
    if (message.actionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.actionTime), writer.uint32(18).fork()).join();
    }
    for (const v of message.affectedResources) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.sourceLogIds) {
      SensitiveAction_SourceLogId.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.learnMoreUri !== "") {
      writer.uint32(42).string(message.learnMoreUri);
    }
    if (message.access !== undefined) {
      Access.encode(message.access, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SensitiveAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSensitiveAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actionType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.affectedResources.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sourceLogIds.push(SensitiveAction_SourceLogId.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.learnMoreUri = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.access = Access.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SensitiveAction {
    return {
      actionType: isSet(object.actionType) ? globalThis.String(object.actionType) : "",
      actionTime: isSet(object.actionTime) ? fromJsonTimestamp(object.actionTime) : undefined,
      affectedResources: globalThis.Array.isArray(object?.affectedResources)
        ? object.affectedResources.map((e: any) => globalThis.String(e))
        : [],
      sourceLogIds: globalThis.Array.isArray(object?.sourceLogIds)
        ? object.sourceLogIds.map((e: any) => SensitiveAction_SourceLogId.fromJSON(e))
        : [],
      learnMoreUri: isSet(object.learnMoreUri) ? globalThis.String(object.learnMoreUri) : "",
      access: isSet(object.access) ? Access.fromJSON(object.access) : undefined,
    };
  },

  toJSON(message: SensitiveAction): unknown {
    const obj: any = {};
    if (message.actionType !== "") {
      obj.actionType = message.actionType;
    }
    if (message.actionTime !== undefined) {
      obj.actionTime = message.actionTime.toISOString();
    }
    if (message.affectedResources?.length) {
      obj.affectedResources = message.affectedResources;
    }
    if (message.sourceLogIds?.length) {
      obj.sourceLogIds = message.sourceLogIds.map((e) => SensitiveAction_SourceLogId.toJSON(e));
    }
    if (message.learnMoreUri !== "") {
      obj.learnMoreUri = message.learnMoreUri;
    }
    if (message.access !== undefined) {
      obj.access = Access.toJSON(message.access);
    }
    return obj;
  },

  create(base?: DeepPartial<SensitiveAction>): SensitiveAction {
    return SensitiveAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SensitiveAction>): SensitiveAction {
    const message = createBaseSensitiveAction();
    message.actionType = object.actionType ?? "";
    message.actionTime = object.actionTime ?? undefined;
    message.affectedResources = object.affectedResources?.map((e) => e) || [];
    message.sourceLogIds = object.sourceLogIds?.map((e) => SensitiveAction_SourceLogId.fromPartial(e)) || [];
    message.learnMoreUri = object.learnMoreUri ?? "";
    message.access = (object.access !== undefined && object.access !== null)
      ? Access.fromPartial(object.access)
      : undefined;
    return message;
  },
};

function createBaseSensitiveAction_SourceLogId(): SensitiveAction_SourceLogId {
  return { resourceContainer: "", logTime: undefined, insertId: "", queryUri: "" };
}

export const SensitiveAction_SourceLogId: MessageFns<SensitiveAction_SourceLogId> = {
  encode(message: SensitiveAction_SourceLogId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceContainer !== "") {
      writer.uint32(10).string(message.resourceContainer);
    }
    if (message.logTime !== undefined) {
      Timestamp.encode(toTimestamp(message.logTime), writer.uint32(18).fork()).join();
    }
    if (message.insertId !== "") {
      writer.uint32(26).string(message.insertId);
    }
    if (message.queryUri !== "") {
      writer.uint32(34).string(message.queryUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SensitiveAction_SourceLogId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSensitiveAction_SourceLogId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resourceContainer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.logTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.insertId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.queryUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SensitiveAction_SourceLogId {
    return {
      resourceContainer: isSet(object.resourceContainer) ? globalThis.String(object.resourceContainer) : "",
      logTime: isSet(object.logTime) ? fromJsonTimestamp(object.logTime) : undefined,
      insertId: isSet(object.insertId) ? globalThis.String(object.insertId) : "",
      queryUri: isSet(object.queryUri) ? globalThis.String(object.queryUri) : "",
    };
  },

  toJSON(message: SensitiveAction_SourceLogId): unknown {
    const obj: any = {};
    if (message.resourceContainer !== "") {
      obj.resourceContainer = message.resourceContainer;
    }
    if (message.logTime !== undefined) {
      obj.logTime = message.logTime.toISOString();
    }
    if (message.insertId !== "") {
      obj.insertId = message.insertId;
    }
    if (message.queryUri !== "") {
      obj.queryUri = message.queryUri;
    }
    return obj;
  },

  create(base?: DeepPartial<SensitiveAction_SourceLogId>): SensitiveAction_SourceLogId {
    return SensitiveAction_SourceLogId.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SensitiveAction_SourceLogId>): SensitiveAction_SourceLogId {
    const message = createBaseSensitiveAction_SourceLogId();
    message.resourceContainer = object.resourceContainer ?? "";
    message.logTime = object.logTime ?? undefined;
    message.insertId = object.insertId ?? "";
    message.queryUri = object.queryUri ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
