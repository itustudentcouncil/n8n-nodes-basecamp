// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/logging/prediction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Status } from "../../../rpc/status.js";

export const protobufPackage = "google.cloud.aiplatform.logging";

/** The access log entry definition of online prediction. */
export interface OnlinePredictionLogEntry {
  /**
   * The resource name of the endpoint as referred to in the original request.
   * For example, projects/12323/locations/us-central1/endpoints/123.
   */
  endpoint: string;
  /** The ID of the deployed model used to serve this predict request. */
  deployedModelId: string;
  /** The number of instances in the prediction request. */
  instanceCount: Long;
  /**
   * The number of successfully predicted instances in the response.
   * Populated when prediction succeeds.
   */
  predictionCount: Long;
  /**
   * The error code and message.
   * Populated when prediction fails.
   */
  error: Status | undefined;
}

function createBaseOnlinePredictionLogEntry(): OnlinePredictionLogEntry {
  return { endpoint: "", deployedModelId: "", instanceCount: Long.ZERO, predictionCount: Long.ZERO, error: undefined };
}

export const OnlinePredictionLogEntry: MessageFns<OnlinePredictionLogEntry> = {
  encode(message: OnlinePredictionLogEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.deployedModelId !== "") {
      writer.uint32(18).string(message.deployedModelId);
    }
    if (!message.instanceCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.instanceCount.toString());
    }
    if (!message.predictionCount.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.predictionCount.toString());
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlinePredictionLogEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlinePredictionLogEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedModelId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.instanceCount = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.predictionCount = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlinePredictionLogEntry {
    return {
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      deployedModelId: isSet(object.deployedModelId) ? globalThis.String(object.deployedModelId) : "",
      instanceCount: isSet(object.instanceCount) ? Long.fromValue(object.instanceCount) : Long.ZERO,
      predictionCount: isSet(object.predictionCount) ? Long.fromValue(object.predictionCount) : Long.ZERO,
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: OnlinePredictionLogEntry): unknown {
    const obj: any = {};
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.deployedModelId !== "") {
      obj.deployedModelId = message.deployedModelId;
    }
    if (!message.instanceCount.equals(Long.ZERO)) {
      obj.instanceCount = (message.instanceCount || Long.ZERO).toString();
    }
    if (!message.predictionCount.equals(Long.ZERO)) {
      obj.predictionCount = (message.predictionCount || Long.ZERO).toString();
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    return obj;
  },

  create(base?: DeepPartial<OnlinePredictionLogEntry>): OnlinePredictionLogEntry {
    return OnlinePredictionLogEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OnlinePredictionLogEntry>): OnlinePredictionLogEntry {
    const message = createBaseOnlinePredictionLogEntry();
    message.endpoint = object.endpoint ?? "";
    message.deployedModelId = object.deployedModelId ?? "";
    message.instanceCount = (object.instanceCount !== undefined && object.instanceCount !== null)
      ? Long.fromValue(object.instanceCount)
      : Long.ZERO;
    message.predictionCount = (object.predictionCount !== undefined && object.predictionCount !== null)
      ? Long.fromValue(object.predictionCount)
      : Long.ZERO;
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
