// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/artifact.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/** Instance of a general artifact. */
export interface Artifact {
  /** Output only. The resource name of the Artifact. */
  name: string;
  /**
   * User provided display name of the Artifact.
   * May be up to 128 Unicode characters.
   */
  displayName: string;
  /**
   * The uniform resource identifier of the artifact file.
   * May be empty if there is no actual artifact file.
   */
  uri: string;
  /**
   * An eTag used to perform consistent read-modify-write updates. If not set, a
   * blind "overwrite" update happens.
   */
  etag: string;
  /**
   * The labels with user-defined metadata to organize your Artifacts.
   *
   * Label keys and values can be no longer than 64 characters
   * (Unicode codepoints), can only contain lowercase letters, numeric
   * characters, underscores and dashes. International characters are allowed.
   * No more than 64 user labels can be associated with one Artifact (System
   * labels are excluded).
   */
  labels: { [key: string]: string };
  /** Output only. Timestamp when this Artifact was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when this Artifact was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * The state of this Artifact. This is a property of the Artifact, and does
   * not imply or capture any ongoing process. This property is managed by
   * clients (such as Vertex AI Pipelines), and the system does not prescribe
   * or check the validity of state transitions.
   */
  state: Artifact_State;
  /**
   * The title of the schema describing the metadata.
   *
   * Schema title and version is expected to be registered in earlier Create
   * Schema calls. And both are used together as unique identifiers to identify
   * schemas within the local metadata store.
   */
  schemaTitle: string;
  /**
   * The version of the schema in schema_name to use.
   *
   * Schema title and version is expected to be registered in earlier Create
   * Schema calls. And both are used together as unique identifiers to identify
   * schemas within the local metadata store.
   */
  schemaVersion: string;
  /**
   * Properties of the Artifact.
   * Top level metadata keys' heading and trailing spaces will be trimmed.
   * The size of this field should not exceed 200KB.
   */
  metadata:
    | { [key: string]: any }
    | undefined;
  /** Description of the Artifact */
  description: string;
}

/** Describes the state of the Artifact. */
export enum Artifact_State {
  /** STATE_UNSPECIFIED - Unspecified state for the Artifact. */
  STATE_UNSPECIFIED = 0,
  /**
   * PENDING - A state used by systems like Vertex AI Pipelines to indicate that the
   * underlying data item represented by this Artifact is being created.
   */
  PENDING = 1,
  /**
   * LIVE - A state indicating that the Artifact should exist, unless something
   * external to the system deletes it.
   */
  LIVE = 2,
  UNRECOGNIZED = -1,
}

export function artifact_StateFromJSON(object: any): Artifact_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Artifact_State.STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return Artifact_State.PENDING;
    case 2:
    case "LIVE":
      return Artifact_State.LIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Artifact_State.UNRECOGNIZED;
  }
}

export function artifact_StateToJSON(object: Artifact_State): string {
  switch (object) {
    case Artifact_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Artifact_State.PENDING:
      return "PENDING";
    case Artifact_State.LIVE:
      return "LIVE";
    case Artifact_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Artifact_LabelsEntry {
  key: string;
  value: string;
}

function createBaseArtifact(): Artifact {
  return {
    name: "",
    displayName: "",
    uri: "",
    etag: "",
    labels: {},
    createTime: undefined,
    updateTime: undefined,
    state: 0,
    schemaTitle: "",
    schemaVersion: "",
    metadata: undefined,
    description: "",
  };
}

export const Artifact: MessageFns<Artifact> = {
  encode(message: Artifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.uri !== "") {
      writer.uint32(50).string(message.uri);
    }
    if (message.etag !== "") {
      writer.uint32(74).string(message.etag);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Artifact_LabelsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(90).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(98).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(104).int32(message.state);
    }
    if (message.schemaTitle !== "") {
      writer.uint32(114).string(message.schemaTitle);
    }
    if (message.schemaVersion !== "") {
      writer.uint32(122).string(message.schemaVersion);
    }
    if (message.metadata !== undefined) {
      Struct.encode(Struct.wrap(message.metadata), writer.uint32(130).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(138).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Artifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArtifact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          const entry10 = Artifact_LabelsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.labels[entry10.key] = entry10.value;
          }
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.schemaTitle = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Artifact {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      state: isSet(object.state) ? artifact_StateFromJSON(object.state) : 0,
      schemaTitle: isSet(object.schemaTitle) ? globalThis.String(object.schemaTitle) : "",
      schemaVersion: isSet(object.schemaVersion) ? globalThis.String(object.schemaVersion) : "",
      metadata: isObject(object.metadata) ? object.metadata : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Artifact): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = artifact_StateToJSON(message.state);
    }
    if (message.schemaTitle !== "") {
      obj.schemaTitle = message.schemaTitle;
    }
    if (message.schemaVersion !== "") {
      obj.schemaVersion = message.schemaVersion;
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<Artifact>): Artifact {
    return Artifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Artifact>): Artifact {
    const message = createBaseArtifact();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.uri = object.uri ?? "";
    message.etag = object.etag ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.state = object.state ?? 0;
    message.schemaTitle = object.schemaTitle ?? "";
    message.schemaVersion = object.schemaVersion ?? "";
    message.metadata = object.metadata ?? undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseArtifact_LabelsEntry(): Artifact_LabelsEntry {
  return { key: "", value: "" };
}

export const Artifact_LabelsEntry: MessageFns<Artifact_LabelsEntry> = {
  encode(message: Artifact_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Artifact_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArtifact_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Artifact_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Artifact_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Artifact_LabelsEntry>): Artifact_LabelsEntry {
    return Artifact_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Artifact_LabelsEntry>): Artifact_LabelsEntry {
    const message = createBaseArtifact_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
