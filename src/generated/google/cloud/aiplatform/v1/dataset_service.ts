// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/dataset_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Annotation } from "./annotation.js";
import { AnnotationSpec } from "./annotation_spec.js";
import { DataItem } from "./data_item.js";
import { Dataset, ExportDataConfig, ImportDataConfig } from "./dataset.js";
import { DatasetVersion } from "./dataset_version.js";
import { Model_DataStats } from "./model.js";
import { GenericOperationMetadata } from "./operation.js";
import { SavedQuery } from "./saved_query.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Request message for
 * [DatasetService.CreateDataset][google.cloud.aiplatform.v1.DatasetService.CreateDataset].
 */
export interface CreateDatasetRequest {
  /**
   * Required. The resource name of the Location to create the Dataset in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The Dataset to create. */
  dataset: Dataset | undefined;
}

/**
 * Runtime operation information for
 * [DatasetService.CreateDataset][google.cloud.aiplatform.v1.DatasetService.CreateDataset].
 */
export interface CreateDatasetOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [DatasetService.GetDataset][google.cloud.aiplatform.v1.DatasetService.GetDataset].
 */
export interface GetDatasetRequest {
  /** Required. The name of the Dataset resource. */
  name: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Request message for
 * [DatasetService.UpdateDataset][google.cloud.aiplatform.v1.DatasetService.UpdateDataset].
 */
export interface UpdateDatasetRequest {
  /** Required. The Dataset which replaces the resource on the server. */
  dataset:
    | Dataset
    | undefined;
  /**
   * Required. The update mask applies to the resource.
   * For the `FieldMask` definition, see
   * [google.protobuf.FieldMask][google.protobuf.FieldMask]. Updatable fields:
   *
   *   * `display_name`
   *   * `description`
   *   * `labels`
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [DatasetService.UpdateDatasetVersion][google.cloud.aiplatform.v1.DatasetService.UpdateDatasetVersion].
 */
export interface UpdateDatasetVersionRequest {
  /** Required. The DatasetVersion which replaces the resource on the server. */
  datasetVersion:
    | DatasetVersion
    | undefined;
  /**
   * Required. The update mask applies to the resource.
   * For the `FieldMask` definition, see
   * [google.protobuf.FieldMask][google.protobuf.FieldMask]. Updatable fields:
   *
   *   * `display_name`
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [DatasetService.ListDatasets][google.cloud.aiplatform.v1.DatasetService.ListDatasets].
 */
export interface ListDatasetsRequest {
  /**
   * Required. The name of the Dataset's parent resource.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * An expression for filtering the results of the request. For field names
   * both snake_case and camelCase are supported.
   *
   *   * `display_name`: supports = and !=
   *   * `metadata_schema_uri`: supports = and !=
   *   * `labels` supports general map functions that is:
   *     * `labels.key=value` - key:value equality
   *     * `labels.key:* or labels:key - key existence
   *     * A key including a space must be quoted. `labels."a key"`.
   *
   * Some examples:
   *
   *   * `displayName="myDisplayName"`
   *   * `labels.myKey="myValue"`
   */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /** The standard list page token. */
  pageToken: string;
  /** Mask specifying which fields to read. */
  readMask:
    | string[]
    | undefined;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   * Supported fields:
   *
   *   * `display_name`
   *   * `create_time`
   *   * `update_time`
   */
  orderBy: string;
}

/**
 * Response message for
 * [DatasetService.ListDatasets][google.cloud.aiplatform.v1.DatasetService.ListDatasets].
 */
export interface ListDatasetsResponse {
  /** A list of Datasets that matches the specified filter in the request. */
  datasets: Dataset[];
  /** The standard List next-page token. */
  nextPageToken: string;
}

/**
 * Request message for
 * [DatasetService.DeleteDataset][google.cloud.aiplatform.v1.DatasetService.DeleteDataset].
 */
export interface DeleteDatasetRequest {
  /**
   * Required. The resource name of the Dataset to delete.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}`
   */
  name: string;
}

/**
 * Request message for
 * [DatasetService.ImportData][google.cloud.aiplatform.v1.DatasetService.ImportData].
 */
export interface ImportDataRequest {
  /**
   * Required. The name of the Dataset resource.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}`
   */
  name: string;
  /**
   * Required. The desired input locations. The contents of all input locations
   * will be imported in one batch.
   */
  importConfigs: ImportDataConfig[];
}

/**
 * Response message for
 * [DatasetService.ImportData][google.cloud.aiplatform.v1.DatasetService.ImportData].
 */
export interface ImportDataResponse {
}

/**
 * Runtime operation information for
 * [DatasetService.ImportData][google.cloud.aiplatform.v1.DatasetService.ImportData].
 */
export interface ImportDataOperationMetadata {
  /** The common part of the operation metadata. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [DatasetService.ExportData][google.cloud.aiplatform.v1.DatasetService.ExportData].
 */
export interface ExportDataRequest {
  /**
   * Required. The name of the Dataset resource.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}`
   */
  name: string;
  /** Required. The desired output location. */
  exportConfig: ExportDataConfig | undefined;
}

/**
 * Response message for
 * [DatasetService.ExportData][google.cloud.aiplatform.v1.DatasetService.ExportData].
 */
export interface ExportDataResponse {
  /**
   * All of the files that are exported in this export operation. For custom
   * code training export, only three (training, validation and test)
   * Cloud Storage paths in wildcard format are populated
   * (for example, gs://.../training-*).
   */
  exportedFiles: string[];
  /**
   * Only present for custom code training export use case. Records data stats,
   * i.e., train/validation/test item/annotation counts calculated during
   * the export operation.
   */
  dataStats: Model_DataStats | undefined;
}

/**
 * Runtime operation information for
 * [DatasetService.ExportData][google.cloud.aiplatform.v1.DatasetService.ExportData].
 */
export interface ExportDataOperationMetadata {
  /** The common part of the operation metadata. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /**
   * A Google Cloud Storage directory which path ends with '/'. The exported
   * data is stored in the directory.
   */
  gcsOutputDirectory: string;
}

/**
 * Request message for
 * [DatasetService.CreateDatasetVersion][google.cloud.aiplatform.v1.DatasetService.CreateDatasetVersion].
 */
export interface CreateDatasetVersionRequest {
  /**
   * Required. The name of the Dataset resource.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}`
   */
  parent: string;
  /**
   * Required. The version to be created. The same CMEK policies with the
   * original Dataset will be applied the dataset version. So here we don't need
   * to specify the EncryptionSpecType here.
   */
  datasetVersion: DatasetVersion | undefined;
}

/**
 * Runtime operation information for
 * [DatasetService.CreateDatasetVersion][google.cloud.aiplatform.v1.DatasetService.CreateDatasetVersion].
 */
export interface CreateDatasetVersionOperationMetadata {
  /** The common part of the operation metadata. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [DatasetService.DeleteDatasetVersion][google.cloud.aiplatform.v1.DatasetService.DeleteDatasetVersion].
 */
export interface DeleteDatasetVersionRequest {
  /**
   * Required. The resource name of the Dataset version to delete.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}/datasetVersions/{dataset_version}`
   */
  name: string;
}

/**
 * Request message for
 * [DatasetService.GetDatasetVersion][google.cloud.aiplatform.v1.DatasetService.GetDatasetVersion].
 */
export interface GetDatasetVersionRequest {
  /**
   * Required. The resource name of the Dataset version to delete.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}/datasetVersions/{dataset_version}`
   */
  name: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Request message for
 * [DatasetService.ListDatasetVersions][google.cloud.aiplatform.v1.DatasetService.ListDatasetVersions].
 */
export interface ListDatasetVersionsRequest {
  /**
   * Required. The resource name of the Dataset to list DatasetVersions from.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}`
   */
  parent: string;
  /** Optional. The standard list filter. */
  filter: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /** Optional. The standard list page token. */
  pageToken: string;
  /** Optional. Mask specifying which fields to read. */
  readMask:
    | string[]
    | undefined;
  /**
   * Optional. A comma-separated list of fields to order by, sorted in ascending
   * order. Use "desc" after a field name for descending.
   */
  orderBy: string;
}

/**
 * Response message for
 * [DatasetService.ListDatasetVersions][google.cloud.aiplatform.v1.DatasetService.ListDatasetVersions].
 */
export interface ListDatasetVersionsResponse {
  /** A list of DatasetVersions that matches the specified filter in the request. */
  datasetVersions: DatasetVersion[];
  /** The standard List next-page token. */
  nextPageToken: string;
}

/**
 * Request message for
 * [DatasetService.RestoreDatasetVersion][google.cloud.aiplatform.v1.DatasetService.RestoreDatasetVersion].
 */
export interface RestoreDatasetVersionRequest {
  /**
   * Required. The name of the DatasetVersion resource.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}/datasetVersions/{dataset_version}`
   */
  name: string;
}

/**
 * Runtime operation information for
 * [DatasetService.RestoreDatasetVersion][google.cloud.aiplatform.v1.DatasetService.RestoreDatasetVersion].
 */
export interface RestoreDatasetVersionOperationMetadata {
  /** The common part of the operation metadata. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [DatasetService.ListDataItems][google.cloud.aiplatform.v1.DatasetService.ListDataItems].
 */
export interface ListDataItemsRequest {
  /**
   * Required. The resource name of the Dataset to list DataItems from.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}`
   */
  parent: string;
  /** The standard list filter. */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /** The standard list page token. */
  pageToken: string;
  /** Mask specifying which fields to read. */
  readMask:
    | string[]
    | undefined;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   */
  orderBy: string;
}

/**
 * Response message for
 * [DatasetService.ListDataItems][google.cloud.aiplatform.v1.DatasetService.ListDataItems].
 */
export interface ListDataItemsResponse {
  /** A list of DataItems that matches the specified filter in the request. */
  dataItems: DataItem[];
  /** The standard List next-page token. */
  nextPageToken: string;
}

/**
 * Request message for
 * [DatasetService.SearchDataItems][google.cloud.aiplatform.v1.DatasetService.SearchDataItems].
 */
export interface SearchDataItemsRequest {
  /**
   * A comma-separated list of data item fields to order by, sorted in
   * ascending order. Use "desc" after a field name for descending.
   */
  orderByDataItem?:
    | string
    | undefined;
  /** Expression that allows ranking results based on annotation's property. */
  orderByAnnotation?:
    | SearchDataItemsRequest_OrderByAnnotation
    | undefined;
  /**
   * Required. The resource name of the Dataset from which to search DataItems.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}`
   */
  dataset: string;
  /**
   * The resource name of a SavedQuery(annotation set in UI).
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}/savedQueries/{saved_query}`
   * All of the search will be done in the context of this SavedQuery.
   *
   * @deprecated
   */
  savedQuery: string;
  /**
   * The resource name of a DataLabelingJob.
   * Format:
   * `projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}`
   * If this field is set, all of the search will be done in the context of
   * this DataLabelingJob.
   */
  dataLabelingJob: string;
  /**
   * An expression for filtering the DataItem that will be returned.
   *
   *   * `data_item_id` - for = or !=.
   *   * `labeled` - for = or !=.
   *   * `has_annotation(ANNOTATION_SPEC_ID)` - true only for DataItem that
   *     have at least one annotation with annotation_spec_id =
   *     `ANNOTATION_SPEC_ID` in the context of SavedQuery or DataLabelingJob.
   *
   * For example:
   *
   * * `data_item=1`
   * * `has_annotation(5)`
   */
  dataItemFilter: string;
  /**
   * An expression for filtering the Annotations that will be returned per
   * DataItem.
   *   * `annotation_spec_id` - for = or !=.
   *
   * @deprecated
   */
  annotationsFilter: string;
  /**
   * An expression that specifies what Annotations will be returned per
   * DataItem. Annotations satisfied either of the conditions will be returned.
   *   * `annotation_spec_id` - for = or !=.
   * Must specify `saved_query_id=` - saved query id that annotations should
   * belong to.
   */
  annotationFilters: string[];
  /**
   * Mask specifying which fields of
   * [DataItemView][google.cloud.aiplatform.v1.DataItemView] to read.
   */
  fieldMask:
    | string[]
    | undefined;
  /**
   * If set, only up to this many of Annotations will be returned per
   * DataItemView. The maximum value is 1000. If not set, the maximum value will
   * be used.
   */
  annotationsLimit: number;
  /**
   * Requested page size. Server may return fewer results than requested.
   * Default and maximum page size is 100.
   */
  pageSize: number;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   *
   * @deprecated
   */
  orderBy: string;
  /**
   * A token identifying a page of results for the server to return
   * Typically obtained via
   * [SearchDataItemsResponse.next_page_token][google.cloud.aiplatform.v1.SearchDataItemsResponse.next_page_token]
   * of the previous
   * [DatasetService.SearchDataItems][google.cloud.aiplatform.v1.DatasetService.SearchDataItems]
   * call.
   */
  pageToken: string;
}

/** Expression that allows ranking results based on annotation's property. */
export interface SearchDataItemsRequest_OrderByAnnotation {
  /**
   * Required. Saved query of the Annotation. Only Annotations belong to this
   * saved query will be considered for ordering.
   */
  savedQuery: string;
  /**
   * A comma-separated list of annotation fields to order by, sorted in
   * ascending order. Use "desc" after a field name for descending. Must also
   * specify saved_query.
   */
  orderBy: string;
}

/**
 * Response message for
 * [DatasetService.SearchDataItems][google.cloud.aiplatform.v1.DatasetService.SearchDataItems].
 */
export interface SearchDataItemsResponse {
  /** The DataItemViews read. */
  dataItemViews: DataItemView[];
  /**
   * A token to retrieve next page of results.
   * Pass to
   * [SearchDataItemsRequest.page_token][google.cloud.aiplatform.v1.SearchDataItemsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/** A container for a single DataItem and Annotations on it. */
export interface DataItemView {
  /** The DataItem. */
  dataItem:
    | DataItem
    | undefined;
  /**
   * The Annotations on the DataItem. If too many Annotations should be returned
   * for the DataItem, this field will be truncated per annotations_limit in
   * request. If it was, then the has_truncated_annotations will be set to true.
   */
  annotations: Annotation[];
  /**
   * True if and only if the Annotations field has been truncated. It happens if
   * more Annotations for this DataItem met the request's annotation_filter than
   * are allowed to be returned by annotations_limit.
   * Note that if Annotations field is not being returned due to field mask,
   * then this field will not be set to true no matter how many Annotations are
   * there.
   */
  hasTruncatedAnnotations: boolean;
}

/**
 * Request message for
 * [DatasetService.ListSavedQueries][google.cloud.aiplatform.v1.DatasetService.ListSavedQueries].
 */
export interface ListSavedQueriesRequest {
  /**
   * Required. The resource name of the Dataset to list SavedQueries from.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}`
   */
  parent: string;
  /** The standard list filter. */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /** The standard list page token. */
  pageToken: string;
  /** Mask specifying which fields to read. */
  readMask:
    | string[]
    | undefined;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   */
  orderBy: string;
}

/**
 * Response message for
 * [DatasetService.ListSavedQueries][google.cloud.aiplatform.v1.DatasetService.ListSavedQueries].
 */
export interface ListSavedQueriesResponse {
  /** A list of SavedQueries that match the specified filter in the request. */
  savedQueries: SavedQuery[];
  /** The standard List next-page token. */
  nextPageToken: string;
}

/**
 * Request message for
 * [DatasetService.DeleteSavedQuery][google.cloud.aiplatform.v1.DatasetService.DeleteSavedQuery].
 */
export interface DeleteSavedQueryRequest {
  /**
   * Required. The resource name of the SavedQuery to delete.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}/savedQueries/{saved_query}`
   */
  name: string;
}

/**
 * Request message for
 * [DatasetService.GetAnnotationSpec][google.cloud.aiplatform.v1.DatasetService.GetAnnotationSpec].
 */
export interface GetAnnotationSpecRequest {
  /**
   * Required. The name of the AnnotationSpec resource.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}`
   */
  name: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Request message for
 * [DatasetService.ListAnnotations][google.cloud.aiplatform.v1.DatasetService.ListAnnotations].
 */
export interface ListAnnotationsRequest {
  /**
   * Required. The resource name of the DataItem to list Annotations from.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}`
   */
  parent: string;
  /** The standard list filter. */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /** The standard list page token. */
  pageToken: string;
  /** Mask specifying which fields to read. */
  readMask:
    | string[]
    | undefined;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   */
  orderBy: string;
}

/**
 * Response message for
 * [DatasetService.ListAnnotations][google.cloud.aiplatform.v1.DatasetService.ListAnnotations].
 */
export interface ListAnnotationsResponse {
  /** A list of Annotations that matches the specified filter in the request. */
  annotations: Annotation[];
  /** The standard List next-page token. */
  nextPageToken: string;
}

function createBaseCreateDatasetRequest(): CreateDatasetRequest {
  return { parent: "", dataset: undefined };
}

export const CreateDatasetRequest: MessageFns<CreateDatasetRequest> = {
  encode(message: CreateDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataset !== undefined) {
      Dataset.encode(message.dataset, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataset = Dataset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDatasetRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataset: isSet(object.dataset) ? Dataset.fromJSON(object.dataset) : undefined,
    };
  },

  toJSON(message: CreateDatasetRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataset !== undefined) {
      obj.dataset = Dataset.toJSON(message.dataset);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDatasetRequest>): CreateDatasetRequest {
    return CreateDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDatasetRequest>): CreateDatasetRequest {
    const message = createBaseCreateDatasetRequest();
    message.parent = object.parent ?? "";
    message.dataset = (object.dataset !== undefined && object.dataset !== null)
      ? Dataset.fromPartial(object.dataset)
      : undefined;
    return message;
  },
};

function createBaseCreateDatasetOperationMetadata(): CreateDatasetOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateDatasetOperationMetadata: MessageFns<CreateDatasetOperationMetadata> = {
  encode(message: CreateDatasetOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDatasetOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDatasetOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDatasetOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateDatasetOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDatasetOperationMetadata>): CreateDatasetOperationMetadata {
    return CreateDatasetOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDatasetOperationMetadata>): CreateDatasetOperationMetadata {
    const message = createBaseCreateDatasetOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseGetDatasetRequest(): GetDatasetRequest {
  return { name: "", readMask: undefined };
}

export const GetDatasetRequest: MessageFns<GetDatasetRequest> = {
  encode(message: GetDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDatasetRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: GetDatasetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<GetDatasetRequest>): GetDatasetRequest {
    return GetDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDatasetRequest>): GetDatasetRequest {
    const message = createBaseGetDatasetRequest();
    message.name = object.name ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseUpdateDatasetRequest(): UpdateDatasetRequest {
  return { dataset: undefined, updateMask: undefined };
}

export const UpdateDatasetRequest: MessageFns<UpdateDatasetRequest> = {
  encode(message: UpdateDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataset !== undefined) {
      Dataset.encode(message.dataset, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = Dataset.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDatasetRequest {
    return {
      dataset: isSet(object.dataset) ? Dataset.fromJSON(object.dataset) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDatasetRequest): unknown {
    const obj: any = {};
    if (message.dataset !== undefined) {
      obj.dataset = Dataset.toJSON(message.dataset);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDatasetRequest>): UpdateDatasetRequest {
    return UpdateDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDatasetRequest>): UpdateDatasetRequest {
    const message = createBaseUpdateDatasetRequest();
    message.dataset = (object.dataset !== undefined && object.dataset !== null)
      ? Dataset.fromPartial(object.dataset)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateDatasetVersionRequest(): UpdateDatasetVersionRequest {
  return { datasetVersion: undefined, updateMask: undefined };
}

export const UpdateDatasetVersionRequest: MessageFns<UpdateDatasetVersionRequest> = {
  encode(message: UpdateDatasetVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.datasetVersion !== undefined) {
      DatasetVersion.encode(message.datasetVersion, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDatasetVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDatasetVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasetVersion = DatasetVersion.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDatasetVersionRequest {
    return {
      datasetVersion: isSet(object.datasetVersion) ? DatasetVersion.fromJSON(object.datasetVersion) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDatasetVersionRequest): unknown {
    const obj: any = {};
    if (message.datasetVersion !== undefined) {
      obj.datasetVersion = DatasetVersion.toJSON(message.datasetVersion);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDatasetVersionRequest>): UpdateDatasetVersionRequest {
    return UpdateDatasetVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDatasetVersionRequest>): UpdateDatasetVersionRequest {
    const message = createBaseUpdateDatasetVersionRequest();
    message.datasetVersion = (object.datasetVersion !== undefined && object.datasetVersion !== null)
      ? DatasetVersion.fromPartial(object.datasetVersion)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListDatasetsRequest(): ListDatasetsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined, orderBy: "" };
}

export const ListDatasetsRequest: MessageFns<ListDatasetsRequest> = {
  encode(message: ListDatasetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDatasetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDatasetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDatasetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDatasetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDatasetsRequest>): ListDatasetsRequest {
    return ListDatasetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDatasetsRequest>): ListDatasetsRequest {
    const message = createBaseListDatasetsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDatasetsResponse(): ListDatasetsResponse {
  return { datasets: [], nextPageToken: "" };
}

export const ListDatasetsResponse: MessageFns<ListDatasetsResponse> = {
  encode(message: ListDatasetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.datasets) {
      Dataset.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDatasetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDatasetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasets.push(Dataset.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDatasetsResponse {
    return {
      datasets: globalThis.Array.isArray(object?.datasets) ? object.datasets.map((e: any) => Dataset.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDatasetsResponse): unknown {
    const obj: any = {};
    if (message.datasets?.length) {
      obj.datasets = message.datasets.map((e) => Dataset.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDatasetsResponse>): ListDatasetsResponse {
    return ListDatasetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDatasetsResponse>): ListDatasetsResponse {
    const message = createBaseListDatasetsResponse();
    message.datasets = object.datasets?.map((e) => Dataset.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteDatasetRequest(): DeleteDatasetRequest {
  return { name: "" };
}

export const DeleteDatasetRequest: MessageFns<DeleteDatasetRequest> = {
  encode(message: DeleteDatasetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDatasetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDatasetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDatasetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDatasetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDatasetRequest>): DeleteDatasetRequest {
    return DeleteDatasetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDatasetRequest>): DeleteDatasetRequest {
    const message = createBaseDeleteDatasetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseImportDataRequest(): ImportDataRequest {
  return { name: "", importConfigs: [] };
}

export const ImportDataRequest: MessageFns<ImportDataRequest> = {
  encode(message: ImportDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.importConfigs) {
      ImportDataConfig.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.importConfigs.push(ImportDataConfig.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      importConfigs: globalThis.Array.isArray(object?.importConfigs)
        ? object.importConfigs.map((e: any) => ImportDataConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ImportDataRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.importConfigs?.length) {
      obj.importConfigs = message.importConfigs.map((e) => ImportDataConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataRequest>): ImportDataRequest {
    return ImportDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataRequest>): ImportDataRequest {
    const message = createBaseImportDataRequest();
    message.name = object.name ?? "";
    message.importConfigs = object.importConfigs?.map((e) => ImportDataConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportDataResponse(): ImportDataResponse {
  return {};
}

export const ImportDataResponse: MessageFns<ImportDataResponse> = {
  encode(_: ImportDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ImportDataResponse {
    return {};
  },

  toJSON(_: ImportDataResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ImportDataResponse>): ImportDataResponse {
    return ImportDataResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ImportDataResponse>): ImportDataResponse {
    const message = createBaseImportDataResponse();
    return message;
  },
};

function createBaseImportDataOperationMetadata(): ImportDataOperationMetadata {
  return { genericMetadata: undefined };
}

export const ImportDataOperationMetadata: MessageFns<ImportDataOperationMetadata> = {
  encode(message: ImportDataOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportDataOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportDataOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportDataOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: ImportDataOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportDataOperationMetadata>): ImportDataOperationMetadata {
    return ImportDataOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportDataOperationMetadata>): ImportDataOperationMetadata {
    const message = createBaseImportDataOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseExportDataRequest(): ExportDataRequest {
  return { name: "", exportConfig: undefined };
}

export const ExportDataRequest: MessageFns<ExportDataRequest> = {
  encode(message: ExportDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.exportConfig !== undefined) {
      ExportDataConfig.encode(message.exportConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.exportConfig = ExportDataConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      exportConfig: isSet(object.exportConfig) ? ExportDataConfig.fromJSON(object.exportConfig) : undefined,
    };
  },

  toJSON(message: ExportDataRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.exportConfig !== undefined) {
      obj.exportConfig = ExportDataConfig.toJSON(message.exportConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataRequest>): ExportDataRequest {
    return ExportDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataRequest>): ExportDataRequest {
    const message = createBaseExportDataRequest();
    message.name = object.name ?? "";
    message.exportConfig = (object.exportConfig !== undefined && object.exportConfig !== null)
      ? ExportDataConfig.fromPartial(object.exportConfig)
      : undefined;
    return message;
  },
};

function createBaseExportDataResponse(): ExportDataResponse {
  return { exportedFiles: [], dataStats: undefined };
}

export const ExportDataResponse: MessageFns<ExportDataResponse> = {
  encode(message: ExportDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.exportedFiles) {
      writer.uint32(10).string(v!);
    }
    if (message.dataStats !== undefined) {
      Model_DataStats.encode(message.dataStats, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.exportedFiles.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataStats = Model_DataStats.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataResponse {
    return {
      exportedFiles: globalThis.Array.isArray(object?.exportedFiles)
        ? object.exportedFiles.map((e: any) => globalThis.String(e))
        : [],
      dataStats: isSet(object.dataStats) ? Model_DataStats.fromJSON(object.dataStats) : undefined,
    };
  },

  toJSON(message: ExportDataResponse): unknown {
    const obj: any = {};
    if (message.exportedFiles?.length) {
      obj.exportedFiles = message.exportedFiles;
    }
    if (message.dataStats !== undefined) {
      obj.dataStats = Model_DataStats.toJSON(message.dataStats);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataResponse>): ExportDataResponse {
    return ExportDataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataResponse>): ExportDataResponse {
    const message = createBaseExportDataResponse();
    message.exportedFiles = object.exportedFiles?.map((e) => e) || [];
    message.dataStats = (object.dataStats !== undefined && object.dataStats !== null)
      ? Model_DataStats.fromPartial(object.dataStats)
      : undefined;
    return message;
  },
};

function createBaseExportDataOperationMetadata(): ExportDataOperationMetadata {
  return { genericMetadata: undefined, gcsOutputDirectory: "" };
}

export const ExportDataOperationMetadata: MessageFns<ExportDataOperationMetadata> = {
  encode(message: ExportDataOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    if (message.gcsOutputDirectory !== "") {
      writer.uint32(18).string(message.gcsOutputDirectory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportDataOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportDataOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gcsOutputDirectory = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportDataOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      gcsOutputDirectory: isSet(object.gcsOutputDirectory) ? globalThis.String(object.gcsOutputDirectory) : "",
    };
  },

  toJSON(message: ExportDataOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (message.gcsOutputDirectory !== "") {
      obj.gcsOutputDirectory = message.gcsOutputDirectory;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportDataOperationMetadata>): ExportDataOperationMetadata {
    return ExportDataOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportDataOperationMetadata>): ExportDataOperationMetadata {
    const message = createBaseExportDataOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.gcsOutputDirectory = object.gcsOutputDirectory ?? "";
    return message;
  },
};

function createBaseCreateDatasetVersionRequest(): CreateDatasetVersionRequest {
  return { parent: "", datasetVersion: undefined };
}

export const CreateDatasetVersionRequest: MessageFns<CreateDatasetVersionRequest> = {
  encode(message: CreateDatasetVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.datasetVersion !== undefined) {
      DatasetVersion.encode(message.datasetVersion, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDatasetVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDatasetVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetVersion = DatasetVersion.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDatasetVersionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      datasetVersion: isSet(object.datasetVersion) ? DatasetVersion.fromJSON(object.datasetVersion) : undefined,
    };
  },

  toJSON(message: CreateDatasetVersionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.datasetVersion !== undefined) {
      obj.datasetVersion = DatasetVersion.toJSON(message.datasetVersion);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDatasetVersionRequest>): CreateDatasetVersionRequest {
    return CreateDatasetVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDatasetVersionRequest>): CreateDatasetVersionRequest {
    const message = createBaseCreateDatasetVersionRequest();
    message.parent = object.parent ?? "";
    message.datasetVersion = (object.datasetVersion !== undefined && object.datasetVersion !== null)
      ? DatasetVersion.fromPartial(object.datasetVersion)
      : undefined;
    return message;
  },
};

function createBaseCreateDatasetVersionOperationMetadata(): CreateDatasetVersionOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateDatasetVersionOperationMetadata: MessageFns<CreateDatasetVersionOperationMetadata> = {
  encode(message: CreateDatasetVersionOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDatasetVersionOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDatasetVersionOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDatasetVersionOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateDatasetVersionOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDatasetVersionOperationMetadata>): CreateDatasetVersionOperationMetadata {
    return CreateDatasetVersionOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDatasetVersionOperationMetadata>): CreateDatasetVersionOperationMetadata {
    const message = createBaseCreateDatasetVersionOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseDeleteDatasetVersionRequest(): DeleteDatasetVersionRequest {
  return { name: "" };
}

export const DeleteDatasetVersionRequest: MessageFns<DeleteDatasetVersionRequest> = {
  encode(message: DeleteDatasetVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDatasetVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDatasetVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDatasetVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDatasetVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDatasetVersionRequest>): DeleteDatasetVersionRequest {
    return DeleteDatasetVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDatasetVersionRequest>): DeleteDatasetVersionRequest {
    const message = createBaseDeleteDatasetVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetDatasetVersionRequest(): GetDatasetVersionRequest {
  return { name: "", readMask: undefined };
}

export const GetDatasetVersionRequest: MessageFns<GetDatasetVersionRequest> = {
  encode(message: GetDatasetVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDatasetVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDatasetVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDatasetVersionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: GetDatasetVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<GetDatasetVersionRequest>): GetDatasetVersionRequest {
    return GetDatasetVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDatasetVersionRequest>): GetDatasetVersionRequest {
    const message = createBaseGetDatasetVersionRequest();
    message.name = object.name ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListDatasetVersionsRequest(): ListDatasetVersionsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined, orderBy: "" };
}

export const ListDatasetVersionsRequest: MessageFns<ListDatasetVersionsRequest> = {
  encode(message: ListDatasetVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDatasetVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDatasetVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDatasetVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDatasetVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDatasetVersionsRequest>): ListDatasetVersionsRequest {
    return ListDatasetVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDatasetVersionsRequest>): ListDatasetVersionsRequest {
    const message = createBaseListDatasetVersionsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDatasetVersionsResponse(): ListDatasetVersionsResponse {
  return { datasetVersions: [], nextPageToken: "" };
}

export const ListDatasetVersionsResponse: MessageFns<ListDatasetVersionsResponse> = {
  encode(message: ListDatasetVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.datasetVersions) {
      DatasetVersion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDatasetVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDatasetVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datasetVersions.push(DatasetVersion.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDatasetVersionsResponse {
    return {
      datasetVersions: globalThis.Array.isArray(object?.datasetVersions)
        ? object.datasetVersions.map((e: any) => DatasetVersion.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDatasetVersionsResponse): unknown {
    const obj: any = {};
    if (message.datasetVersions?.length) {
      obj.datasetVersions = message.datasetVersions.map((e) => DatasetVersion.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDatasetVersionsResponse>): ListDatasetVersionsResponse {
    return ListDatasetVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDatasetVersionsResponse>): ListDatasetVersionsResponse {
    const message = createBaseListDatasetVersionsResponse();
    message.datasetVersions = object.datasetVersions?.map((e) => DatasetVersion.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseRestoreDatasetVersionRequest(): RestoreDatasetVersionRequest {
  return { name: "" };
}

export const RestoreDatasetVersionRequest: MessageFns<RestoreDatasetVersionRequest> = {
  encode(message: RestoreDatasetVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreDatasetVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreDatasetVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreDatasetVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: RestoreDatasetVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreDatasetVersionRequest>): RestoreDatasetVersionRequest {
    return RestoreDatasetVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreDatasetVersionRequest>): RestoreDatasetVersionRequest {
    const message = createBaseRestoreDatasetVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseRestoreDatasetVersionOperationMetadata(): RestoreDatasetVersionOperationMetadata {
  return { genericMetadata: undefined };
}

export const RestoreDatasetVersionOperationMetadata: MessageFns<RestoreDatasetVersionOperationMetadata> = {
  encode(message: RestoreDatasetVersionOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreDatasetVersionOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreDatasetVersionOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreDatasetVersionOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: RestoreDatasetVersionOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreDatasetVersionOperationMetadata>): RestoreDatasetVersionOperationMetadata {
    return RestoreDatasetVersionOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreDatasetVersionOperationMetadata>): RestoreDatasetVersionOperationMetadata {
    const message = createBaseRestoreDatasetVersionOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseListDataItemsRequest(): ListDataItemsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined, orderBy: "" };
}

export const ListDataItemsRequest: MessageFns<ListDataItemsRequest> = {
  encode(message: ListDataItemsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataItemsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataItemsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataItemsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDataItemsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataItemsRequest>): ListDataItemsRequest {
    return ListDataItemsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataItemsRequest>): ListDataItemsRequest {
    const message = createBaseListDataItemsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDataItemsResponse(): ListDataItemsResponse {
  return { dataItems: [], nextPageToken: "" };
}

export const ListDataItemsResponse: MessageFns<ListDataItemsResponse> = {
  encode(message: ListDataItemsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataItems) {
      DataItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataItemsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataItemsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataItems.push(DataItem.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataItemsResponse {
    return {
      dataItems: globalThis.Array.isArray(object?.dataItems)
        ? object.dataItems.map((e: any) => DataItem.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDataItemsResponse): unknown {
    const obj: any = {};
    if (message.dataItems?.length) {
      obj.dataItems = message.dataItems.map((e) => DataItem.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataItemsResponse>): ListDataItemsResponse {
    return ListDataItemsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataItemsResponse>): ListDataItemsResponse {
    const message = createBaseListDataItemsResponse();
    message.dataItems = object.dataItems?.map((e) => DataItem.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchDataItemsRequest(): SearchDataItemsRequest {
  return {
    orderByDataItem: undefined,
    orderByAnnotation: undefined,
    dataset: "",
    savedQuery: "",
    dataLabelingJob: "",
    dataItemFilter: "",
    annotationsFilter: "",
    annotationFilters: [],
    fieldMask: undefined,
    annotationsLimit: 0,
    pageSize: 0,
    orderBy: "",
    pageToken: "",
  };
}

export const SearchDataItemsRequest: MessageFns<SearchDataItemsRequest> = {
  encode(message: SearchDataItemsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderByDataItem !== undefined) {
      writer.uint32(98).string(message.orderByDataItem);
    }
    if (message.orderByAnnotation !== undefined) {
      SearchDataItemsRequest_OrderByAnnotation.encode(message.orderByAnnotation, writer.uint32(106).fork()).join();
    }
    if (message.dataset !== "") {
      writer.uint32(10).string(message.dataset);
    }
    if (message.savedQuery !== "") {
      writer.uint32(18).string(message.savedQuery);
    }
    if (message.dataLabelingJob !== "") {
      writer.uint32(26).string(message.dataLabelingJob);
    }
    if (message.dataItemFilter !== "") {
      writer.uint32(34).string(message.dataItemFilter);
    }
    if (message.annotationsFilter !== "") {
      writer.uint32(42).string(message.annotationsFilter);
    }
    for (const v of message.annotationFilters) {
      writer.uint32(90).string(v!);
    }
    if (message.fieldMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.fieldMask), writer.uint32(50).fork()).join();
    }
    if (message.annotationsLimit !== 0) {
      writer.uint32(56).int32(message.annotationsLimit);
    }
    if (message.pageSize !== 0) {
      writer.uint32(64).int32(message.pageSize);
    }
    if (message.orderBy !== "") {
      writer.uint32(74).string(message.orderBy);
    }
    if (message.pageToken !== "") {
      writer.uint32(82).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchDataItemsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchDataItemsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 12:
          if (tag !== 98) {
            break;
          }

          message.orderByDataItem = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.orderByAnnotation = SearchDataItemsRequest_OrderByAnnotation.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.savedQuery = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataLabelingJob = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataItemFilter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.annotationsFilter = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.annotationFilters.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.fieldMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.annotationsLimit = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchDataItemsRequest {
    return {
      orderByDataItem: isSet(object.orderByDataItem) ? globalThis.String(object.orderByDataItem) : undefined,
      orderByAnnotation: isSet(object.orderByAnnotation)
        ? SearchDataItemsRequest_OrderByAnnotation.fromJSON(object.orderByAnnotation)
        : undefined,
      dataset: isSet(object.dataset) ? globalThis.String(object.dataset) : "",
      savedQuery: isSet(object.savedQuery) ? globalThis.String(object.savedQuery) : "",
      dataLabelingJob: isSet(object.dataLabelingJob) ? globalThis.String(object.dataLabelingJob) : "",
      dataItemFilter: isSet(object.dataItemFilter) ? globalThis.String(object.dataItemFilter) : "",
      annotationsFilter: isSet(object.annotationsFilter) ? globalThis.String(object.annotationsFilter) : "",
      annotationFilters: globalThis.Array.isArray(object?.annotationFilters)
        ? object.annotationFilters.map((e: any) => globalThis.String(e))
        : [],
      fieldMask: isSet(object.fieldMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.fieldMask)) : undefined,
      annotationsLimit: isSet(object.annotationsLimit) ? globalThis.Number(object.annotationsLimit) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchDataItemsRequest): unknown {
    const obj: any = {};
    if (message.orderByDataItem !== undefined) {
      obj.orderByDataItem = message.orderByDataItem;
    }
    if (message.orderByAnnotation !== undefined) {
      obj.orderByAnnotation = SearchDataItemsRequest_OrderByAnnotation.toJSON(message.orderByAnnotation);
    }
    if (message.dataset !== "") {
      obj.dataset = message.dataset;
    }
    if (message.savedQuery !== "") {
      obj.savedQuery = message.savedQuery;
    }
    if (message.dataLabelingJob !== "") {
      obj.dataLabelingJob = message.dataLabelingJob;
    }
    if (message.dataItemFilter !== "") {
      obj.dataItemFilter = message.dataItemFilter;
    }
    if (message.annotationsFilter !== "") {
      obj.annotationsFilter = message.annotationsFilter;
    }
    if (message.annotationFilters?.length) {
      obj.annotationFilters = message.annotationFilters;
    }
    if (message.fieldMask !== undefined) {
      obj.fieldMask = FieldMask.toJSON(FieldMask.wrap(message.fieldMask));
    }
    if (message.annotationsLimit !== 0) {
      obj.annotationsLimit = Math.round(message.annotationsLimit);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchDataItemsRequest>): SearchDataItemsRequest {
    return SearchDataItemsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchDataItemsRequest>): SearchDataItemsRequest {
    const message = createBaseSearchDataItemsRequest();
    message.orderByDataItem = object.orderByDataItem ?? undefined;
    message.orderByAnnotation = (object.orderByAnnotation !== undefined && object.orderByAnnotation !== null)
      ? SearchDataItemsRequest_OrderByAnnotation.fromPartial(object.orderByAnnotation)
      : undefined;
    message.dataset = object.dataset ?? "";
    message.savedQuery = object.savedQuery ?? "";
    message.dataLabelingJob = object.dataLabelingJob ?? "";
    message.dataItemFilter = object.dataItemFilter ?? "";
    message.annotationsFilter = object.annotationsFilter ?? "";
    message.annotationFilters = object.annotationFilters?.map((e) => e) || [];
    message.fieldMask = object.fieldMask ?? undefined;
    message.annotationsLimit = object.annotationsLimit ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.orderBy = object.orderBy ?? "";
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchDataItemsRequest_OrderByAnnotation(): SearchDataItemsRequest_OrderByAnnotation {
  return { savedQuery: "", orderBy: "" };
}

export const SearchDataItemsRequest_OrderByAnnotation: MessageFns<SearchDataItemsRequest_OrderByAnnotation> = {
  encode(message: SearchDataItemsRequest_OrderByAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.savedQuery !== "") {
      writer.uint32(10).string(message.savedQuery);
    }
    if (message.orderBy !== "") {
      writer.uint32(18).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchDataItemsRequest_OrderByAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchDataItemsRequest_OrderByAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.savedQuery = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchDataItemsRequest_OrderByAnnotation {
    return {
      savedQuery: isSet(object.savedQuery) ? globalThis.String(object.savedQuery) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: SearchDataItemsRequest_OrderByAnnotation): unknown {
    const obj: any = {};
    if (message.savedQuery !== "") {
      obj.savedQuery = message.savedQuery;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchDataItemsRequest_OrderByAnnotation>): SearchDataItemsRequest_OrderByAnnotation {
    return SearchDataItemsRequest_OrderByAnnotation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchDataItemsRequest_OrderByAnnotation>): SearchDataItemsRequest_OrderByAnnotation {
    const message = createBaseSearchDataItemsRequest_OrderByAnnotation();
    message.savedQuery = object.savedQuery ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseSearchDataItemsResponse(): SearchDataItemsResponse {
  return { dataItemViews: [], nextPageToken: "" };
}

export const SearchDataItemsResponse: MessageFns<SearchDataItemsResponse> = {
  encode(message: SearchDataItemsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataItemViews) {
      DataItemView.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchDataItemsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchDataItemsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataItemViews.push(DataItemView.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchDataItemsResponse {
    return {
      dataItemViews: globalThis.Array.isArray(object?.dataItemViews)
        ? object.dataItemViews.map((e: any) => DataItemView.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchDataItemsResponse): unknown {
    const obj: any = {};
    if (message.dataItemViews?.length) {
      obj.dataItemViews = message.dataItemViews.map((e) => DataItemView.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchDataItemsResponse>): SearchDataItemsResponse {
    return SearchDataItemsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchDataItemsResponse>): SearchDataItemsResponse {
    const message = createBaseSearchDataItemsResponse();
    message.dataItemViews = object.dataItemViews?.map((e) => DataItemView.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDataItemView(): DataItemView {
  return { dataItem: undefined, annotations: [], hasTruncatedAnnotations: false };
}

export const DataItemView: MessageFns<DataItemView> = {
  encode(message: DataItemView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataItem !== undefined) {
      DataItem.encode(message.dataItem, writer.uint32(10).fork()).join();
    }
    for (const v of message.annotations) {
      Annotation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.hasTruncatedAnnotations !== false) {
      writer.uint32(24).bool(message.hasTruncatedAnnotations);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataItemView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataItemView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataItem = DataItem.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.annotations.push(Annotation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasTruncatedAnnotations = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataItemView {
    return {
      dataItem: isSet(object.dataItem) ? DataItem.fromJSON(object.dataItem) : undefined,
      annotations: globalThis.Array.isArray(object?.annotations)
        ? object.annotations.map((e: any) => Annotation.fromJSON(e))
        : [],
      hasTruncatedAnnotations: isSet(object.hasTruncatedAnnotations)
        ? globalThis.Boolean(object.hasTruncatedAnnotations)
        : false,
    };
  },

  toJSON(message: DataItemView): unknown {
    const obj: any = {};
    if (message.dataItem !== undefined) {
      obj.dataItem = DataItem.toJSON(message.dataItem);
    }
    if (message.annotations?.length) {
      obj.annotations = message.annotations.map((e) => Annotation.toJSON(e));
    }
    if (message.hasTruncatedAnnotations !== false) {
      obj.hasTruncatedAnnotations = message.hasTruncatedAnnotations;
    }
    return obj;
  },

  create(base?: DeepPartial<DataItemView>): DataItemView {
    return DataItemView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataItemView>): DataItemView {
    const message = createBaseDataItemView();
    message.dataItem = (object.dataItem !== undefined && object.dataItem !== null)
      ? DataItem.fromPartial(object.dataItem)
      : undefined;
    message.annotations = object.annotations?.map((e) => Annotation.fromPartial(e)) || [];
    message.hasTruncatedAnnotations = object.hasTruncatedAnnotations ?? false;
    return message;
  },
};

function createBaseListSavedQueriesRequest(): ListSavedQueriesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined, orderBy: "" };
}

export const ListSavedQueriesRequest: MessageFns<ListSavedQueriesRequest> = {
  encode(message: ListSavedQueriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSavedQueriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSavedQueriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSavedQueriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListSavedQueriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSavedQueriesRequest>): ListSavedQueriesRequest {
    return ListSavedQueriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSavedQueriesRequest>): ListSavedQueriesRequest {
    const message = createBaseListSavedQueriesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListSavedQueriesResponse(): ListSavedQueriesResponse {
  return { savedQueries: [], nextPageToken: "" };
}

export const ListSavedQueriesResponse: MessageFns<ListSavedQueriesResponse> = {
  encode(message: ListSavedQueriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.savedQueries) {
      SavedQuery.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSavedQueriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSavedQueriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.savedQueries.push(SavedQuery.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSavedQueriesResponse {
    return {
      savedQueries: globalThis.Array.isArray(object?.savedQueries)
        ? object.savedQueries.map((e: any) => SavedQuery.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSavedQueriesResponse): unknown {
    const obj: any = {};
    if (message.savedQueries?.length) {
      obj.savedQueries = message.savedQueries.map((e) => SavedQuery.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSavedQueriesResponse>): ListSavedQueriesResponse {
    return ListSavedQueriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSavedQueriesResponse>): ListSavedQueriesResponse {
    const message = createBaseListSavedQueriesResponse();
    message.savedQueries = object.savedQueries?.map((e) => SavedQuery.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteSavedQueryRequest(): DeleteSavedQueryRequest {
  return { name: "" };
}

export const DeleteSavedQueryRequest: MessageFns<DeleteSavedQueryRequest> = {
  encode(message: DeleteSavedQueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSavedQueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSavedQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSavedQueryRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSavedQueryRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSavedQueryRequest>): DeleteSavedQueryRequest {
    return DeleteSavedQueryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSavedQueryRequest>): DeleteSavedQueryRequest {
    const message = createBaseDeleteSavedQueryRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetAnnotationSpecRequest(): GetAnnotationSpecRequest {
  return { name: "", readMask: undefined };
}

export const GetAnnotationSpecRequest: MessageFns<GetAnnotationSpecRequest> = {
  encode(message: GetAnnotationSpecRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAnnotationSpecRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAnnotationSpecRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAnnotationSpecRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: GetAnnotationSpecRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<GetAnnotationSpecRequest>): GetAnnotationSpecRequest {
    return GetAnnotationSpecRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAnnotationSpecRequest>): GetAnnotationSpecRequest {
    const message = createBaseGetAnnotationSpecRequest();
    message.name = object.name ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListAnnotationsRequest(): ListAnnotationsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined, orderBy: "" };
}

export const ListAnnotationsRequest: MessageFns<ListAnnotationsRequest> = {
  encode(message: ListAnnotationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnnotationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnnotationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnnotationsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListAnnotationsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnnotationsRequest>): ListAnnotationsRequest {
    return ListAnnotationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnnotationsRequest>): ListAnnotationsRequest {
    const message = createBaseListAnnotationsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListAnnotationsResponse(): ListAnnotationsResponse {
  return { annotations: [], nextPageToken: "" };
}

export const ListAnnotationsResponse: MessageFns<ListAnnotationsResponse> = {
  encode(message: ListAnnotationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.annotations) {
      Annotation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAnnotationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAnnotationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.annotations.push(Annotation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAnnotationsResponse {
    return {
      annotations: globalThis.Array.isArray(object?.annotations)
        ? object.annotations.map((e: any) => Annotation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAnnotationsResponse): unknown {
    const obj: any = {};
    if (message.annotations?.length) {
      obj.annotations = message.annotations.map((e) => Annotation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAnnotationsResponse>): ListAnnotationsResponse {
    return ListAnnotationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAnnotationsResponse>): ListAnnotationsResponse {
    const message = createBaseListAnnotationsResponse();
    message.annotations = object.annotations?.map((e) => Annotation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/** The service that manages Vertex AI Dataset and its child resources. */
export type DatasetServiceDefinition = typeof DatasetServiceDefinition;
export const DatasetServiceDefinition = {
  name: "DatasetService",
  fullName: "google.cloud.aiplatform.v1.DatasetService",
  methods: {
    /** Creates a Dataset. */
    createDataset: {
      name: "CreateDataset",
      requestType: CreateDatasetRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              7,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              18,
              30,
              67,
              114,
              101,
              97,
              116,
              101,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 100, 97, 116, 97, 115, 101, 116])],
          578365826: [
            Buffer.from([
              80,
              58,
              7,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              90,
              23,
              58,
              7,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              34,
              12,
              47,
              118,
              49,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a Dataset. */
    getDataset: {
      name: "GetDataset",
      requestType: GetDatasetRequest,
      requestStream: false,
      responseType: Dataset,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              71,
              90,
              23,
              18,
              21,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a Dataset. */
    updateDataset: {
      name: "UpdateDataset",
      requestType: UpdateDatasetRequest,
      requestStream: false,
      responseType: Dataset,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 100, 97, 116, 97, 115, 101, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              105,
              58,
              7,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              90,
              40,
              58,
              7,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              50,
              29,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              50,
              52,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Datasets in a Location. */
    listDatasets: {
      name: "ListDatasets",
      requestType: ListDatasetsRequest,
      requestStream: false,
      responseType: ListDatasetsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              90,
              14,
              18,
              12,
              47,
              118,
              49,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a Dataset. */
    deleteDataset: {
      name: "DeleteDataset",
      requestType: DeleteDatasetRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              71,
              90,
              23,
              42,
              21,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              42,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Imports data into a Dataset. */
    importData: {
      name: "ImportData",
      requestType: ImportDataRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              49,
              10,
              18,
              73,
              109,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              27,
              73,
              109,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              19,
              110,
              97,
              109,
              101,
              44,
              105,
              109,
              112,
              111,
              114,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Exports data from a Dataset. */
    exportData: {
      name: "ExportData",
      requestType: ExportDataRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              49,
              10,
              18,
              69,
              120,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              27,
              69,
              120,
              112,
              111,
              114,
              116,
              68,
              97,
              116,
              97,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 110, 97, 109, 101, 44, 101, 120, 112, 111, 114, 116, 95, 99, 111, 110, 102, 105, 103]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              1,
              42,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Create a version from a Dataset. */
    createDatasetVersion: {
      name: "CreateDatasetVersion",
      requestType: CreateDatasetVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              55,
              10,
              14,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              18,
              37,
              67,
              114,
              101,
              97,
              116,
              101,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              22,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
            ]),
          ],
          578365826: [
            Buffer.from([
              141,
              1,
              58,
              15,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              90,
              58,
              58,
              15,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              39,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a DatasetVersion. */
    updateDatasetVersion: {
      name: "UpdateDatasetVersion",
      requestType: UpdateDatasetVersionRequest,
      requestStream: false,
      responseType: DatasetVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              173,
              1,
              58,
              15,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              90,
              74,
              58,
              15,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              50,
              55,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              50,
              78,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              95,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a Dataset version. */
    deleteDatasetVersion: {
      name: "DeleteDatasetVersion",
      requestType: DeleteDatasetVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              107,
              90,
              41,
              42,
              39,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              42,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a Dataset version. */
    getDatasetVersion: {
      name: "GetDatasetVersion",
      requestType: GetDatasetVersionRequest,
      requestStream: false,
      responseType: DatasetVersion,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              107,
              90,
              41,
              18,
              39,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists DatasetVersions in a Dataset. */
    listDatasetVersions: {
      name: "ListDatasetVersions",
      requestType: ListDatasetVersionsRequest,
      requestStream: false,
      responseType: ListDatasetVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              107,
              90,
              41,
              18,
              39,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Restores a dataset version. */
    restoreDatasetVersion: {
      name: "RestoreDatasetVersion",
      requestType: RestoreDatasetVersionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              56,
              10,
              14,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              18,
              38,
              82,
              101,
              115,
              116,
              111,
              114,
              101,
              68,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              123,
              90,
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              18,
              70,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
            ]),
          ],
        },
      },
    },
    /** Lists DataItems in a Dataset. */
    listDataItems: {
      name: "ListDataItems",
      requestType: ListDataItemsRequest,
      requestStream: false,
      responseType: ListDataItemsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              58,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              73,
              116,
              101,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Searches DataItems in a Dataset. */
    searchDataItems: {
      name: "SearchDataItems",
      requestType: SearchDataItemsRequest,
      requestStream: false,
      responseType: SearchDataItemsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              68,
              97,
              116,
              97,
              73,
              116,
              101,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists SavedQueries in a Dataset. */
    listSavedQueries: {
      name: "ListSavedQueries",
      requestType: ListSavedQueriesRequest,
      requestStream: false,
      responseType: ListSavedQueriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              61,
              18,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              97,
              118,
              101,
              100,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a SavedQuery. */
    deleteSavedQuery: {
      name: "DeleteSavedQuery",
      requestType: DeleteSavedQueryRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              61,
              42,
              59,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              115,
              97,
              118,
              101,
              100,
              81,
              117,
              101,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets an AnnotationSpec. */
    getAnnotationSpec: {
      name: "GetAnnotationSpec",
      requestType: GetAnnotationSpecRequest,
      requestStream: false,
      responseType: AnnotationSpec,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              64,
              18,
              62,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              105,
              111,
              110,
              83,
              112,
              101,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Annotations belongs to a dataitem */
    listAnnotations: {
      name: "ListAnnotations",
      requestType: ListAnnotationsRequest,
      requestStream: false,
      responseType: ListAnnotationsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              115,
              101,
              116,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              73,
              116,
              101,
              109,
              115,
              47,
              42,
              125,
              47,
              97,
              110,
              110,
              111,
              116,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DatasetServiceImplementation<CallContextExt = {}> {
  /** Creates a Dataset. */
  createDataset(request: CreateDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets a Dataset. */
  getDataset(request: GetDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Dataset>>;
  /** Updates a Dataset. */
  updateDataset(request: UpdateDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Dataset>>;
  /** Lists Datasets in a Location. */
  listDatasets(
    request: ListDatasetsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDatasetsResponse>>;
  /** Deletes a Dataset. */
  deleteDataset(request: DeleteDatasetRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Imports data into a Dataset. */
  importData(request: ImportDataRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Exports data from a Dataset. */
  exportData(request: ExportDataRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Create a version from a Dataset. */
  createDatasetVersion(
    request: CreateDatasetVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a DatasetVersion. */
  updateDatasetVersion(
    request: UpdateDatasetVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DatasetVersion>>;
  /** Deletes a Dataset version. */
  deleteDatasetVersion(
    request: DeleteDatasetVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a Dataset version. */
  getDatasetVersion(
    request: GetDatasetVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DatasetVersion>>;
  /** Lists DatasetVersions in a Dataset. */
  listDatasetVersions(
    request: ListDatasetVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDatasetVersionsResponse>>;
  /** Restores a dataset version. */
  restoreDatasetVersion(
    request: RestoreDatasetVersionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists DataItems in a Dataset. */
  listDataItems(
    request: ListDataItemsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataItemsResponse>>;
  /** Searches DataItems in a Dataset. */
  searchDataItems(
    request: SearchDataItemsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchDataItemsResponse>>;
  /** Lists SavedQueries in a Dataset. */
  listSavedQueries(
    request: ListSavedQueriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSavedQueriesResponse>>;
  /** Deletes a SavedQuery. */
  deleteSavedQuery(
    request: DeleteSavedQueryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets an AnnotationSpec. */
  getAnnotationSpec(
    request: GetAnnotationSpecRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AnnotationSpec>>;
  /** Lists Annotations belongs to a dataitem */
  listAnnotations(
    request: ListAnnotationsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAnnotationsResponse>>;
}

export interface DatasetServiceClient<CallOptionsExt = {}> {
  /** Creates a Dataset. */
  createDataset(request: DeepPartial<CreateDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets a Dataset. */
  getDataset(request: DeepPartial<GetDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Dataset>;
  /** Updates a Dataset. */
  updateDataset(request: DeepPartial<UpdateDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Dataset>;
  /** Lists Datasets in a Location. */
  listDatasets(
    request: DeepPartial<ListDatasetsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDatasetsResponse>;
  /** Deletes a Dataset. */
  deleteDataset(request: DeepPartial<DeleteDatasetRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Imports data into a Dataset. */
  importData(request: DeepPartial<ImportDataRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Exports data from a Dataset. */
  exportData(request: DeepPartial<ExportDataRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Create a version from a Dataset. */
  createDatasetVersion(
    request: DeepPartial<CreateDatasetVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a DatasetVersion. */
  updateDatasetVersion(
    request: DeepPartial<UpdateDatasetVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DatasetVersion>;
  /** Deletes a Dataset version. */
  deleteDatasetVersion(
    request: DeepPartial<DeleteDatasetVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a Dataset version. */
  getDatasetVersion(
    request: DeepPartial<GetDatasetVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DatasetVersion>;
  /** Lists DatasetVersions in a Dataset. */
  listDatasetVersions(
    request: DeepPartial<ListDatasetVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDatasetVersionsResponse>;
  /** Restores a dataset version. */
  restoreDatasetVersion(
    request: DeepPartial<RestoreDatasetVersionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists DataItems in a Dataset. */
  listDataItems(
    request: DeepPartial<ListDataItemsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataItemsResponse>;
  /** Searches DataItems in a Dataset. */
  searchDataItems(
    request: DeepPartial<SearchDataItemsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchDataItemsResponse>;
  /** Lists SavedQueries in a Dataset. */
  listSavedQueries(
    request: DeepPartial<ListSavedQueriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSavedQueriesResponse>;
  /** Deletes a SavedQuery. */
  deleteSavedQuery(
    request: DeepPartial<DeleteSavedQueryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets an AnnotationSpec. */
  getAnnotationSpec(
    request: DeepPartial<GetAnnotationSpecRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AnnotationSpec>;
  /** Lists Annotations belongs to a dataitem */
  listAnnotations(
    request: DeepPartial<ListAnnotationsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAnnotationsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
