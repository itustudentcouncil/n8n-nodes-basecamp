// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/feature_view_sync.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { Interval } from "../../../type/interval.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * FeatureViewSync is a representation of sync operation which copies data from
 * data source to Feature View in Online Store.
 */
export interface FeatureViewSync {
  /**
   * Identifier. Name of the FeatureViewSync. Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}/featureViewSyncs/{feature_view_sync}`
   */
  name: string;
  /**
   * Output only. Time when this FeatureViewSync is created. Creation of a
   * FeatureViewSync means that the job is pending / waiting for sufficient
   * resources but may not have started the actual data transfer yet.
   */
  createTime:
    | Date
    | undefined;
  /** Output only. Time when this FeatureViewSync is finished. */
  runTime:
    | Interval
    | undefined;
  /** Output only. Final status of the FeatureViewSync. */
  finalStatus:
    | Status
    | undefined;
  /** Output only. Summary of the sync job. */
  syncSummary:
    | FeatureViewSync_SyncSummary
    | undefined;
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /** Output only. Reserved for future use. */
  satisfiesPzi: boolean;
}

/**
 * Summary from the Sync job. For continuous syncs, the summary is updated
 * periodically. For batch syncs, it gets updated on completion of the sync.
 */
export interface FeatureViewSync_SyncSummary {
  /** Output only. Total number of rows synced. */
  rowSynced: Long;
  /** Output only. BigQuery slot milliseconds consumed for the sync job. */
  totalSlot: Long;
  /**
   * Lower bound of the system time watermark for the sync job. This is only
   * set for continuously syncing feature views.
   */
  systemWatermarkTime: Date | undefined;
}

function createBaseFeatureViewSync(): FeatureViewSync {
  return {
    name: "",
    createTime: undefined,
    runTime: undefined,
    finalStatus: undefined,
    syncSummary: undefined,
    satisfiesPzs: false,
    satisfiesPzi: false,
  };
}

export const FeatureViewSync: MessageFns<FeatureViewSync> = {
  encode(message: FeatureViewSync, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.runTime !== undefined) {
      Interval.encode(message.runTime, writer.uint32(42).fork()).join();
    }
    if (message.finalStatus !== undefined) {
      Status.encode(message.finalStatus, writer.uint32(34).fork()).join();
    }
    if (message.syncSummary !== undefined) {
      FeatureViewSync_SyncSummary.encode(message.syncSummary, writer.uint32(50).fork()).join();
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(56).bool(message.satisfiesPzs);
    }
    if (message.satisfiesPzi !== false) {
      writer.uint32(64).bool(message.satisfiesPzi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureViewSync {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureViewSync();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.runTime = Interval.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.finalStatus = Status.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.syncSummary = FeatureViewSync_SyncSummary.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.satisfiesPzi = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureViewSync {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      runTime: isSet(object.runTime) ? Interval.fromJSON(object.runTime) : undefined,
      finalStatus: isSet(object.finalStatus) ? Status.fromJSON(object.finalStatus) : undefined,
      syncSummary: isSet(object.syncSummary) ? FeatureViewSync_SyncSummary.fromJSON(object.syncSummary) : undefined,
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      satisfiesPzi: isSet(object.satisfiesPzi) ? globalThis.Boolean(object.satisfiesPzi) : false,
    };
  },

  toJSON(message: FeatureViewSync): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.runTime !== undefined) {
      obj.runTime = Interval.toJSON(message.runTime);
    }
    if (message.finalStatus !== undefined) {
      obj.finalStatus = Status.toJSON(message.finalStatus);
    }
    if (message.syncSummary !== undefined) {
      obj.syncSummary = FeatureViewSync_SyncSummary.toJSON(message.syncSummary);
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.satisfiesPzi !== false) {
      obj.satisfiesPzi = message.satisfiesPzi;
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureViewSync>): FeatureViewSync {
    return FeatureViewSync.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureViewSync>): FeatureViewSync {
    const message = createBaseFeatureViewSync();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.runTime = (object.runTime !== undefined && object.runTime !== null)
      ? Interval.fromPartial(object.runTime)
      : undefined;
    message.finalStatus = (object.finalStatus !== undefined && object.finalStatus !== null)
      ? Status.fromPartial(object.finalStatus)
      : undefined;
    message.syncSummary = (object.syncSummary !== undefined && object.syncSummary !== null)
      ? FeatureViewSync_SyncSummary.fromPartial(object.syncSummary)
      : undefined;
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.satisfiesPzi = object.satisfiesPzi ?? false;
    return message;
  },
};

function createBaseFeatureViewSync_SyncSummary(): FeatureViewSync_SyncSummary {
  return { rowSynced: Long.ZERO, totalSlot: Long.ZERO, systemWatermarkTime: undefined };
}

export const FeatureViewSync_SyncSummary: MessageFns<FeatureViewSync_SyncSummary> = {
  encode(message: FeatureViewSync_SyncSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.rowSynced.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.rowSynced.toString());
    }
    if (!message.totalSlot.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.totalSlot.toString());
    }
    if (message.systemWatermarkTime !== undefined) {
      Timestamp.encode(toTimestamp(message.systemWatermarkTime), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureViewSync_SyncSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureViewSync_SyncSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.rowSynced = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.totalSlot = Long.fromString(reader.int64().toString());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.systemWatermarkTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureViewSync_SyncSummary {
    return {
      rowSynced: isSet(object.rowSynced) ? Long.fromValue(object.rowSynced) : Long.ZERO,
      totalSlot: isSet(object.totalSlot) ? Long.fromValue(object.totalSlot) : Long.ZERO,
      systemWatermarkTime: isSet(object.systemWatermarkTime)
        ? fromJsonTimestamp(object.systemWatermarkTime)
        : undefined,
    };
  },

  toJSON(message: FeatureViewSync_SyncSummary): unknown {
    const obj: any = {};
    if (!message.rowSynced.equals(Long.ZERO)) {
      obj.rowSynced = (message.rowSynced || Long.ZERO).toString();
    }
    if (!message.totalSlot.equals(Long.ZERO)) {
      obj.totalSlot = (message.totalSlot || Long.ZERO).toString();
    }
    if (message.systemWatermarkTime !== undefined) {
      obj.systemWatermarkTime = message.systemWatermarkTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureViewSync_SyncSummary>): FeatureViewSync_SyncSummary {
    return FeatureViewSync_SyncSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureViewSync_SyncSummary>): FeatureViewSync_SyncSummary {
    const message = createBaseFeatureViewSync_SyncSummary();
    message.rowSynced = (object.rowSynced !== undefined && object.rowSynced !== null)
      ? Long.fromValue(object.rowSynced)
      : Long.ZERO;
    message.totalSlot = (object.totalSlot !== undefined && object.totalSlot !== null)
      ? Long.fromValue(object.totalSlot)
      : Long.ZERO;
    message.systemWatermarkTime = object.systemWatermarkTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
