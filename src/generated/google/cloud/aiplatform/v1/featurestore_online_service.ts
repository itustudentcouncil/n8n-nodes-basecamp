// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/featurestore_online_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { FeatureSelector } from "./feature_selector.js";
import { BoolArray, DoubleArray, Int64Array, StringArray } from "./types.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Request message for
 * [FeaturestoreOnlineServingService.WriteFeatureValues][google.cloud.aiplatform.v1.FeaturestoreOnlineServingService.WriteFeatureValues].
 */
export interface WriteFeatureValuesRequest {
  /**
   * Required. The resource name of the EntityType for the entities being
   * written. Value format:
   * `projects/{project}/locations/{location}/featurestores/
   * {featurestore}/entityTypes/{entityType}`. For example,
   * for a machine learning model predicting user clicks on a website, an
   * EntityType ID could be `user`.
   */
  entityType: string;
  /**
   * Required. The entities to be written. Up to 100,000 feature values can be
   * written across all `payloads`.
   */
  payloads: WriteFeatureValuesPayload[];
}

/** Contains Feature values to be written for a specific entity. */
export interface WriteFeatureValuesPayload {
  /** Required. The ID of the entity. */
  entityId: string;
  /**
   * Required. Feature values to be written, mapping from Feature ID to value.
   * Up to 100,000 `feature_values` entries may be written across all payloads.
   * The feature generation time, aligned by days, must be no older than five
   * years (1825 days) and no later than one year (366 days) in the future.
   */
  featureValues: { [key: string]: FeatureValue };
}

export interface WriteFeatureValuesPayload_FeatureValuesEntry {
  key: string;
  value: FeatureValue | undefined;
}

/**
 * Response message for
 * [FeaturestoreOnlineServingService.WriteFeatureValues][google.cloud.aiplatform.v1.FeaturestoreOnlineServingService.WriteFeatureValues].
 */
export interface WriteFeatureValuesResponse {
}

/**
 * Request message for
 * [FeaturestoreOnlineServingService.ReadFeatureValues][google.cloud.aiplatform.v1.FeaturestoreOnlineServingService.ReadFeatureValues].
 */
export interface ReadFeatureValuesRequest {
  /**
   * Required. The resource name of the EntityType for the entity being read.
   * Value format:
   * `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entityType}`.
   * For example, for a machine learning model predicting user clicks on a
   * website, an EntityType ID could be `user`.
   */
  entityType: string;
  /**
   * Required. ID for a specific entity. For example,
   * for a machine learning model predicting user clicks on a website, an entity
   * ID could be `user_123`.
   */
  entityId: string;
  /** Required. Selector choosing Features of the target EntityType. */
  featureSelector: FeatureSelector | undefined;
}

/**
 * Response message for
 * [FeaturestoreOnlineServingService.ReadFeatureValues][google.cloud.aiplatform.v1.FeaturestoreOnlineServingService.ReadFeatureValues].
 */
export interface ReadFeatureValuesResponse {
  /** Response header. */
  header:
    | ReadFeatureValuesResponse_Header
    | undefined;
  /**
   * Entity view with Feature values. This may be the entity in the
   * Featurestore if values for all Features were requested, or a projection
   * of the entity in the Featurestore if values for only some Features were
   * requested.
   */
  entityView: ReadFeatureValuesResponse_EntityView | undefined;
}

/** Metadata for requested Features. */
export interface ReadFeatureValuesResponse_FeatureDescriptor {
  /** Feature ID. */
  id: string;
}

/**
 * Response header with metadata for the requested
 * [ReadFeatureValuesRequest.entity_type][google.cloud.aiplatform.v1.ReadFeatureValuesRequest.entity_type]
 * and Features.
 */
export interface ReadFeatureValuesResponse_Header {
  /**
   * The resource name of the EntityType from the
   * [ReadFeatureValuesRequest][google.cloud.aiplatform.v1.ReadFeatureValuesRequest].
   * Value format:
   * `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entityType}`.
   */
  entityType: string;
  /**
   * List of Feature metadata corresponding to each piece of
   * [ReadFeatureValuesResponse.EntityView.data][google.cloud.aiplatform.v1.ReadFeatureValuesResponse.EntityView.data].
   */
  featureDescriptors: ReadFeatureValuesResponse_FeatureDescriptor[];
}

/** Entity view with Feature values. */
export interface ReadFeatureValuesResponse_EntityView {
  /** ID of the requested entity. */
  entityId: string;
  /**
   * Each piece of data holds the k
   * requested values for one requested Feature. If no values
   * for the requested Feature exist, the corresponding cell will be empty.
   * This has the same size and is in the same order as the features from the
   * header
   * [ReadFeatureValuesResponse.header][google.cloud.aiplatform.v1.ReadFeatureValuesResponse.header].
   */
  data: ReadFeatureValuesResponse_EntityView_Data[];
}

/**
 * Container to hold value(s), successive in time, for one Feature from the
 * request.
 */
export interface ReadFeatureValuesResponse_EntityView_Data {
  /** Feature value if a single value is requested. */
  value?:
    | FeatureValue
    | undefined;
  /**
   * Feature values list if values, successive in time, are requested.
   * If the requested number of values is greater than the number of
   * existing Feature values, nonexistent values are omitted instead of
   * being returned as empty.
   */
  values?: FeatureValueList | undefined;
}

/**
 * Request message for
 * [FeaturestoreOnlineServingService.StreamingFeatureValuesRead][].
 */
export interface StreamingReadFeatureValuesRequest {
  /**
   * Required. The resource name of the entities' type.
   * Value format:
   * `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entityType}`.
   * For example,
   * for a machine learning model predicting user clicks on a website, an
   * EntityType ID could be `user`.
   */
  entityType: string;
  /**
   * Required. IDs of entities to read Feature values of. The maximum number of
   * IDs is 100. For example, for a machine learning model predicting user
   * clicks on a website, an entity ID could be `user_123`.
   */
  entityIds: string[];
  /**
   * Required. Selector choosing Features of the target EntityType. Feature IDs
   * will be deduplicated.
   */
  featureSelector: FeatureSelector | undefined;
}

/** Value for a feature. */
export interface FeatureValue {
  /** Bool type feature value. */
  boolValue?:
    | boolean
    | undefined;
  /** Double type feature value. */
  doubleValue?:
    | number
    | undefined;
  /** Int64 feature value. */
  int64Value?:
    | Long
    | undefined;
  /** String feature value. */
  stringValue?:
    | string
    | undefined;
  /** A list of bool type feature value. */
  boolArrayValue?:
    | BoolArray
    | undefined;
  /** A list of double type feature value. */
  doubleArrayValue?:
    | DoubleArray
    | undefined;
  /** A list of int64 type feature value. */
  int64ArrayValue?:
    | Int64Array
    | undefined;
  /** A list of string type feature value. */
  stringArrayValue?:
    | StringArray
    | undefined;
  /** Bytes feature value. */
  bytesValue?:
    | Buffer
    | undefined;
  /** A struct type feature value. */
  structValue?:
    | StructValue
    | undefined;
  /** Metadata of feature value. */
  metadata: FeatureValue_Metadata | undefined;
}

/** Metadata of feature value. */
export interface FeatureValue_Metadata {
  /**
   * Feature generation timestamp. Typically, it is provided by user at
   * feature ingestion time. If not, feature store
   * will use the system timestamp when the data is ingested into feature
   * store. For streaming ingestion, the time, aligned by days, must be no
   * older than five years (1825 days) and no later than one year (366 days)
   * in the future.
   */
  generateTime: Date | undefined;
}

/** Struct (or object) type feature value. */
export interface StructValue {
  /** A list of field values. */
  values: StructFieldValue[];
}

/** One field of a Struct (or object) type feature value. */
export interface StructFieldValue {
  /** Name of the field in the struct feature. */
  name: string;
  /** The value for this field. */
  value: FeatureValue | undefined;
}

/** Container for list of values. */
export interface FeatureValueList {
  /** A list of feature values. All of them should be the same data type. */
  values: FeatureValue[];
}

function createBaseWriteFeatureValuesRequest(): WriteFeatureValuesRequest {
  return { entityType: "", payloads: [] };
}

export const WriteFeatureValuesRequest: MessageFns<WriteFeatureValuesRequest> = {
  encode(message: WriteFeatureValuesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityType !== "") {
      writer.uint32(10).string(message.entityType);
    }
    for (const v of message.payloads) {
      WriteFeatureValuesPayload.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteFeatureValuesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteFeatureValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payloads.push(WriteFeatureValuesPayload.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WriteFeatureValuesRequest {
    return {
      entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
      payloads: globalThis.Array.isArray(object?.payloads)
        ? object.payloads.map((e: any) => WriteFeatureValuesPayload.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WriteFeatureValuesRequest): unknown {
    const obj: any = {};
    if (message.entityType !== "") {
      obj.entityType = message.entityType;
    }
    if (message.payloads?.length) {
      obj.payloads = message.payloads.map((e) => WriteFeatureValuesPayload.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<WriteFeatureValuesRequest>): WriteFeatureValuesRequest {
    return WriteFeatureValuesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WriteFeatureValuesRequest>): WriteFeatureValuesRequest {
    const message = createBaseWriteFeatureValuesRequest();
    message.entityType = object.entityType ?? "";
    message.payloads = object.payloads?.map((e) => WriteFeatureValuesPayload.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWriteFeatureValuesPayload(): WriteFeatureValuesPayload {
  return { entityId: "", featureValues: {} };
}

export const WriteFeatureValuesPayload: MessageFns<WriteFeatureValuesPayload> = {
  encode(message: WriteFeatureValuesPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityId !== "") {
      writer.uint32(10).string(message.entityId);
    }
    Object.entries(message.featureValues).forEach(([key, value]) => {
      WriteFeatureValuesPayload_FeatureValuesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteFeatureValuesPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteFeatureValuesPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = WriteFeatureValuesPayload_FeatureValuesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.featureValues[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WriteFeatureValuesPayload {
    return {
      entityId: isSet(object.entityId) ? globalThis.String(object.entityId) : "",
      featureValues: isObject(object.featureValues)
        ? Object.entries(object.featureValues).reduce<{ [key: string]: FeatureValue }>((acc, [key, value]) => {
          acc[key] = FeatureValue.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: WriteFeatureValuesPayload): unknown {
    const obj: any = {};
    if (message.entityId !== "") {
      obj.entityId = message.entityId;
    }
    if (message.featureValues) {
      const entries = Object.entries(message.featureValues);
      if (entries.length > 0) {
        obj.featureValues = {};
        entries.forEach(([k, v]) => {
          obj.featureValues[k] = FeatureValue.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<WriteFeatureValuesPayload>): WriteFeatureValuesPayload {
    return WriteFeatureValuesPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WriteFeatureValuesPayload>): WriteFeatureValuesPayload {
    const message = createBaseWriteFeatureValuesPayload();
    message.entityId = object.entityId ?? "";
    message.featureValues = Object.entries(object.featureValues ?? {}).reduce<{ [key: string]: FeatureValue }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = FeatureValue.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseWriteFeatureValuesPayload_FeatureValuesEntry(): WriteFeatureValuesPayload_FeatureValuesEntry {
  return { key: "", value: undefined };
}

export const WriteFeatureValuesPayload_FeatureValuesEntry: MessageFns<WriteFeatureValuesPayload_FeatureValuesEntry> = {
  encode(
    message: WriteFeatureValuesPayload_FeatureValuesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      FeatureValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteFeatureValuesPayload_FeatureValuesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteFeatureValuesPayload_FeatureValuesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = FeatureValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WriteFeatureValuesPayload_FeatureValuesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? FeatureValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: WriteFeatureValuesPayload_FeatureValuesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = FeatureValue.toJSON(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<WriteFeatureValuesPayload_FeatureValuesEntry>,
  ): WriteFeatureValuesPayload_FeatureValuesEntry {
    return WriteFeatureValuesPayload_FeatureValuesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<WriteFeatureValuesPayload_FeatureValuesEntry>,
  ): WriteFeatureValuesPayload_FeatureValuesEntry {
    const message = createBaseWriteFeatureValuesPayload_FeatureValuesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? FeatureValue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseWriteFeatureValuesResponse(): WriteFeatureValuesResponse {
  return {};
}

export const WriteFeatureValuesResponse: MessageFns<WriteFeatureValuesResponse> = {
  encode(_: WriteFeatureValuesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteFeatureValuesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteFeatureValuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): WriteFeatureValuesResponse {
    return {};
  },

  toJSON(_: WriteFeatureValuesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<WriteFeatureValuesResponse>): WriteFeatureValuesResponse {
    return WriteFeatureValuesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<WriteFeatureValuesResponse>): WriteFeatureValuesResponse {
    const message = createBaseWriteFeatureValuesResponse();
    return message;
  },
};

function createBaseReadFeatureValuesRequest(): ReadFeatureValuesRequest {
  return { entityType: "", entityId: "", featureSelector: undefined };
}

export const ReadFeatureValuesRequest: MessageFns<ReadFeatureValuesRequest> = {
  encode(message: ReadFeatureValuesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityType !== "") {
      writer.uint32(10).string(message.entityType);
    }
    if (message.entityId !== "") {
      writer.uint32(18).string(message.entityId);
    }
    if (message.featureSelector !== undefined) {
      FeatureSelector.encode(message.featureSelector, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadFeatureValuesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadFeatureValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entityId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.featureSelector = FeatureSelector.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadFeatureValuesRequest {
    return {
      entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
      entityId: isSet(object.entityId) ? globalThis.String(object.entityId) : "",
      featureSelector: isSet(object.featureSelector) ? FeatureSelector.fromJSON(object.featureSelector) : undefined,
    };
  },

  toJSON(message: ReadFeatureValuesRequest): unknown {
    const obj: any = {};
    if (message.entityType !== "") {
      obj.entityType = message.entityType;
    }
    if (message.entityId !== "") {
      obj.entityId = message.entityId;
    }
    if (message.featureSelector !== undefined) {
      obj.featureSelector = FeatureSelector.toJSON(message.featureSelector);
    }
    return obj;
  },

  create(base?: DeepPartial<ReadFeatureValuesRequest>): ReadFeatureValuesRequest {
    return ReadFeatureValuesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadFeatureValuesRequest>): ReadFeatureValuesRequest {
    const message = createBaseReadFeatureValuesRequest();
    message.entityType = object.entityType ?? "";
    message.entityId = object.entityId ?? "";
    message.featureSelector = (object.featureSelector !== undefined && object.featureSelector !== null)
      ? FeatureSelector.fromPartial(object.featureSelector)
      : undefined;
    return message;
  },
};

function createBaseReadFeatureValuesResponse(): ReadFeatureValuesResponse {
  return { header: undefined, entityView: undefined };
}

export const ReadFeatureValuesResponse: MessageFns<ReadFeatureValuesResponse> = {
  encode(message: ReadFeatureValuesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      ReadFeatureValuesResponse_Header.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.entityView !== undefined) {
      ReadFeatureValuesResponse_EntityView.encode(message.entityView, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadFeatureValuesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadFeatureValuesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = ReadFeatureValuesResponse_Header.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entityView = ReadFeatureValuesResponse_EntityView.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadFeatureValuesResponse {
    return {
      header: isSet(object.header) ? ReadFeatureValuesResponse_Header.fromJSON(object.header) : undefined,
      entityView: isSet(object.entityView)
        ? ReadFeatureValuesResponse_EntityView.fromJSON(object.entityView)
        : undefined,
    };
  },

  toJSON(message: ReadFeatureValuesResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = ReadFeatureValuesResponse_Header.toJSON(message.header);
    }
    if (message.entityView !== undefined) {
      obj.entityView = ReadFeatureValuesResponse_EntityView.toJSON(message.entityView);
    }
    return obj;
  },

  create(base?: DeepPartial<ReadFeatureValuesResponse>): ReadFeatureValuesResponse {
    return ReadFeatureValuesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadFeatureValuesResponse>): ReadFeatureValuesResponse {
    const message = createBaseReadFeatureValuesResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? ReadFeatureValuesResponse_Header.fromPartial(object.header)
      : undefined;
    message.entityView = (object.entityView !== undefined && object.entityView !== null)
      ? ReadFeatureValuesResponse_EntityView.fromPartial(object.entityView)
      : undefined;
    return message;
  },
};

function createBaseReadFeatureValuesResponse_FeatureDescriptor(): ReadFeatureValuesResponse_FeatureDescriptor {
  return { id: "" };
}

export const ReadFeatureValuesResponse_FeatureDescriptor: MessageFns<ReadFeatureValuesResponse_FeatureDescriptor> = {
  encode(
    message: ReadFeatureValuesResponse_FeatureDescriptor,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadFeatureValuesResponse_FeatureDescriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadFeatureValuesResponse_FeatureDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadFeatureValuesResponse_FeatureDescriptor {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: ReadFeatureValuesResponse_FeatureDescriptor): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<ReadFeatureValuesResponse_FeatureDescriptor>): ReadFeatureValuesResponse_FeatureDescriptor {
    return ReadFeatureValuesResponse_FeatureDescriptor.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ReadFeatureValuesResponse_FeatureDescriptor>,
  ): ReadFeatureValuesResponse_FeatureDescriptor {
    const message = createBaseReadFeatureValuesResponse_FeatureDescriptor();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseReadFeatureValuesResponse_Header(): ReadFeatureValuesResponse_Header {
  return { entityType: "", featureDescriptors: [] };
}

export const ReadFeatureValuesResponse_Header: MessageFns<ReadFeatureValuesResponse_Header> = {
  encode(message: ReadFeatureValuesResponse_Header, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityType !== "") {
      writer.uint32(10).string(message.entityType);
    }
    for (const v of message.featureDescriptors) {
      ReadFeatureValuesResponse_FeatureDescriptor.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadFeatureValuesResponse_Header {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadFeatureValuesResponse_Header();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.featureDescriptors.push(ReadFeatureValuesResponse_FeatureDescriptor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadFeatureValuesResponse_Header {
    return {
      entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
      featureDescriptors: globalThis.Array.isArray(object?.featureDescriptors)
        ? object.featureDescriptors.map((e: any) => ReadFeatureValuesResponse_FeatureDescriptor.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReadFeatureValuesResponse_Header): unknown {
    const obj: any = {};
    if (message.entityType !== "") {
      obj.entityType = message.entityType;
    }
    if (message.featureDescriptors?.length) {
      obj.featureDescriptors = message.featureDescriptors.map((e) =>
        ReadFeatureValuesResponse_FeatureDescriptor.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<ReadFeatureValuesResponse_Header>): ReadFeatureValuesResponse_Header {
    return ReadFeatureValuesResponse_Header.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadFeatureValuesResponse_Header>): ReadFeatureValuesResponse_Header {
    const message = createBaseReadFeatureValuesResponse_Header();
    message.entityType = object.entityType ?? "";
    message.featureDescriptors =
      object.featureDescriptors?.map((e) => ReadFeatureValuesResponse_FeatureDescriptor.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReadFeatureValuesResponse_EntityView(): ReadFeatureValuesResponse_EntityView {
  return { entityId: "", data: [] };
}

export const ReadFeatureValuesResponse_EntityView: MessageFns<ReadFeatureValuesResponse_EntityView> = {
  encode(message: ReadFeatureValuesResponse_EntityView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityId !== "") {
      writer.uint32(10).string(message.entityId);
    }
    for (const v of message.data) {
      ReadFeatureValuesResponse_EntityView_Data.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadFeatureValuesResponse_EntityView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadFeatureValuesResponse_EntityView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data.push(ReadFeatureValuesResponse_EntityView_Data.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadFeatureValuesResponse_EntityView {
    return {
      entityId: isSet(object.entityId) ? globalThis.String(object.entityId) : "",
      data: globalThis.Array.isArray(object?.data)
        ? object.data.map((e: any) => ReadFeatureValuesResponse_EntityView_Data.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReadFeatureValuesResponse_EntityView): unknown {
    const obj: any = {};
    if (message.entityId !== "") {
      obj.entityId = message.entityId;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => ReadFeatureValuesResponse_EntityView_Data.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ReadFeatureValuesResponse_EntityView>): ReadFeatureValuesResponse_EntityView {
    return ReadFeatureValuesResponse_EntityView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadFeatureValuesResponse_EntityView>): ReadFeatureValuesResponse_EntityView {
    const message = createBaseReadFeatureValuesResponse_EntityView();
    message.entityId = object.entityId ?? "";
    message.data = object.data?.map((e) => ReadFeatureValuesResponse_EntityView_Data.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReadFeatureValuesResponse_EntityView_Data(): ReadFeatureValuesResponse_EntityView_Data {
  return { value: undefined, values: undefined };
}

export const ReadFeatureValuesResponse_EntityView_Data: MessageFns<ReadFeatureValuesResponse_EntityView_Data> = {
  encode(message: ReadFeatureValuesResponse_EntityView_Data, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      FeatureValue.encode(message.value, writer.uint32(10).fork()).join();
    }
    if (message.values !== undefined) {
      FeatureValueList.encode(message.values, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadFeatureValuesResponse_EntityView_Data {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadFeatureValuesResponse_EntityView_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = FeatureValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.values = FeatureValueList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadFeatureValuesResponse_EntityView_Data {
    return {
      value: isSet(object.value) ? FeatureValue.fromJSON(object.value) : undefined,
      values: isSet(object.values) ? FeatureValueList.fromJSON(object.values) : undefined,
    };
  },

  toJSON(message: ReadFeatureValuesResponse_EntityView_Data): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = FeatureValue.toJSON(message.value);
    }
    if (message.values !== undefined) {
      obj.values = FeatureValueList.toJSON(message.values);
    }
    return obj;
  },

  create(base?: DeepPartial<ReadFeatureValuesResponse_EntityView_Data>): ReadFeatureValuesResponse_EntityView_Data {
    return ReadFeatureValuesResponse_EntityView_Data.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ReadFeatureValuesResponse_EntityView_Data>,
  ): ReadFeatureValuesResponse_EntityView_Data {
    const message = createBaseReadFeatureValuesResponse_EntityView_Data();
    message.value = (object.value !== undefined && object.value !== null)
      ? FeatureValue.fromPartial(object.value)
      : undefined;
    message.values = (object.values !== undefined && object.values !== null)
      ? FeatureValueList.fromPartial(object.values)
      : undefined;
    return message;
  },
};

function createBaseStreamingReadFeatureValuesRequest(): StreamingReadFeatureValuesRequest {
  return { entityType: "", entityIds: [], featureSelector: undefined };
}

export const StreamingReadFeatureValuesRequest: MessageFns<StreamingReadFeatureValuesRequest> = {
  encode(message: StreamingReadFeatureValuesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityType !== "") {
      writer.uint32(10).string(message.entityType);
    }
    for (const v of message.entityIds) {
      writer.uint32(18).string(v!);
    }
    if (message.featureSelector !== undefined) {
      FeatureSelector.encode(message.featureSelector, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingReadFeatureValuesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingReadFeatureValuesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entityType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entityIds.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.featureSelector = FeatureSelector.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingReadFeatureValuesRequest {
    return {
      entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
      entityIds: globalThis.Array.isArray(object?.entityIds)
        ? object.entityIds.map((e: any) => globalThis.String(e))
        : [],
      featureSelector: isSet(object.featureSelector) ? FeatureSelector.fromJSON(object.featureSelector) : undefined,
    };
  },

  toJSON(message: StreamingReadFeatureValuesRequest): unknown {
    const obj: any = {};
    if (message.entityType !== "") {
      obj.entityType = message.entityType;
    }
    if (message.entityIds?.length) {
      obj.entityIds = message.entityIds;
    }
    if (message.featureSelector !== undefined) {
      obj.featureSelector = FeatureSelector.toJSON(message.featureSelector);
    }
    return obj;
  },

  create(base?: DeepPartial<StreamingReadFeatureValuesRequest>): StreamingReadFeatureValuesRequest {
    return StreamingReadFeatureValuesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamingReadFeatureValuesRequest>): StreamingReadFeatureValuesRequest {
    const message = createBaseStreamingReadFeatureValuesRequest();
    message.entityType = object.entityType ?? "";
    message.entityIds = object.entityIds?.map((e) => e) || [];
    message.featureSelector = (object.featureSelector !== undefined && object.featureSelector !== null)
      ? FeatureSelector.fromPartial(object.featureSelector)
      : undefined;
    return message;
  },
};

function createBaseFeatureValue(): FeatureValue {
  return {
    boolValue: undefined,
    doubleValue: undefined,
    int64Value: undefined,
    stringValue: undefined,
    boolArrayValue: undefined,
    doubleArrayValue: undefined,
    int64ArrayValue: undefined,
    stringArrayValue: undefined,
    bytesValue: undefined,
    structValue: undefined,
    metadata: undefined,
  };
}

export const FeatureValue: MessageFns<FeatureValue> = {
  encode(message: FeatureValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.boolValue !== undefined) {
      writer.uint32(8).bool(message.boolValue);
    }
    if (message.doubleValue !== undefined) {
      writer.uint32(17).double(message.doubleValue);
    }
    if (message.int64Value !== undefined) {
      writer.uint32(40).int64(message.int64Value.toString());
    }
    if (message.stringValue !== undefined) {
      writer.uint32(50).string(message.stringValue);
    }
    if (message.boolArrayValue !== undefined) {
      BoolArray.encode(message.boolArrayValue, writer.uint32(58).fork()).join();
    }
    if (message.doubleArrayValue !== undefined) {
      DoubleArray.encode(message.doubleArrayValue, writer.uint32(66).fork()).join();
    }
    if (message.int64ArrayValue !== undefined) {
      Int64Array.encode(message.int64ArrayValue, writer.uint32(90).fork()).join();
    }
    if (message.stringArrayValue !== undefined) {
      StringArray.encode(message.stringArrayValue, writer.uint32(98).fork()).join();
    }
    if (message.bytesValue !== undefined) {
      writer.uint32(106).bytes(message.bytesValue);
    }
    if (message.structValue !== undefined) {
      StructValue.encode(message.structValue, writer.uint32(122).fork()).join();
    }
    if (message.metadata !== undefined) {
      FeatureValue_Metadata.encode(message.metadata, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.boolValue = reader.bool();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.doubleValue = reader.double();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.int64Value = Long.fromString(reader.int64().toString());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.boolArrayValue = BoolArray.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.doubleArrayValue = DoubleArray.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.int64ArrayValue = Int64Array.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.stringArrayValue = StringArray.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.bytesValue = Buffer.from(reader.bytes());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.structValue = StructValue.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.metadata = FeatureValue_Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureValue {
    return {
      boolValue: isSet(object.boolValue) ? globalThis.Boolean(object.boolValue) : undefined,
      doubleValue: isSet(object.doubleValue) ? globalThis.Number(object.doubleValue) : undefined,
      int64Value: isSet(object.int64Value) ? Long.fromValue(object.int64Value) : undefined,
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      boolArrayValue: isSet(object.boolArrayValue) ? BoolArray.fromJSON(object.boolArrayValue) : undefined,
      doubleArrayValue: isSet(object.doubleArrayValue) ? DoubleArray.fromJSON(object.doubleArrayValue) : undefined,
      int64ArrayValue: isSet(object.int64ArrayValue) ? Int64Array.fromJSON(object.int64ArrayValue) : undefined,
      stringArrayValue: isSet(object.stringArrayValue) ? StringArray.fromJSON(object.stringArrayValue) : undefined,
      bytesValue: isSet(object.bytesValue) ? Buffer.from(bytesFromBase64(object.bytesValue)) : undefined,
      structValue: isSet(object.structValue) ? StructValue.fromJSON(object.structValue) : undefined,
      metadata: isSet(object.metadata) ? FeatureValue_Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: FeatureValue): unknown {
    const obj: any = {};
    if (message.boolValue !== undefined) {
      obj.boolValue = message.boolValue;
    }
    if (message.doubleValue !== undefined) {
      obj.doubleValue = message.doubleValue;
    }
    if (message.int64Value !== undefined) {
      obj.int64Value = (message.int64Value || Long.ZERO).toString();
    }
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.boolArrayValue !== undefined) {
      obj.boolArrayValue = BoolArray.toJSON(message.boolArrayValue);
    }
    if (message.doubleArrayValue !== undefined) {
      obj.doubleArrayValue = DoubleArray.toJSON(message.doubleArrayValue);
    }
    if (message.int64ArrayValue !== undefined) {
      obj.int64ArrayValue = Int64Array.toJSON(message.int64ArrayValue);
    }
    if (message.stringArrayValue !== undefined) {
      obj.stringArrayValue = StringArray.toJSON(message.stringArrayValue);
    }
    if (message.bytesValue !== undefined) {
      obj.bytesValue = base64FromBytes(message.bytesValue);
    }
    if (message.structValue !== undefined) {
      obj.structValue = StructValue.toJSON(message.structValue);
    }
    if (message.metadata !== undefined) {
      obj.metadata = FeatureValue_Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureValue>): FeatureValue {
    return FeatureValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureValue>): FeatureValue {
    const message = createBaseFeatureValue();
    message.boolValue = object.boolValue ?? undefined;
    message.doubleValue = object.doubleValue ?? undefined;
    message.int64Value = (object.int64Value !== undefined && object.int64Value !== null)
      ? Long.fromValue(object.int64Value)
      : undefined;
    message.stringValue = object.stringValue ?? undefined;
    message.boolArrayValue = (object.boolArrayValue !== undefined && object.boolArrayValue !== null)
      ? BoolArray.fromPartial(object.boolArrayValue)
      : undefined;
    message.doubleArrayValue = (object.doubleArrayValue !== undefined && object.doubleArrayValue !== null)
      ? DoubleArray.fromPartial(object.doubleArrayValue)
      : undefined;
    message.int64ArrayValue = (object.int64ArrayValue !== undefined && object.int64ArrayValue !== null)
      ? Int64Array.fromPartial(object.int64ArrayValue)
      : undefined;
    message.stringArrayValue = (object.stringArrayValue !== undefined && object.stringArrayValue !== null)
      ? StringArray.fromPartial(object.stringArrayValue)
      : undefined;
    message.bytesValue = object.bytesValue ?? undefined;
    message.structValue = (object.structValue !== undefined && object.structValue !== null)
      ? StructValue.fromPartial(object.structValue)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? FeatureValue_Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseFeatureValue_Metadata(): FeatureValue_Metadata {
  return { generateTime: undefined };
}

export const FeatureValue_Metadata: MessageFns<FeatureValue_Metadata> = {
  encode(message: FeatureValue_Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.generateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.generateTime), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureValue_Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureValue_Metadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.generateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureValue_Metadata {
    return { generateTime: isSet(object.generateTime) ? fromJsonTimestamp(object.generateTime) : undefined };
  },

  toJSON(message: FeatureValue_Metadata): unknown {
    const obj: any = {};
    if (message.generateTime !== undefined) {
      obj.generateTime = message.generateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureValue_Metadata>): FeatureValue_Metadata {
    return FeatureValue_Metadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureValue_Metadata>): FeatureValue_Metadata {
    const message = createBaseFeatureValue_Metadata();
    message.generateTime = object.generateTime ?? undefined;
    return message;
  },
};

function createBaseStructValue(): StructValue {
  return { values: [] };
}

export const StructValue: MessageFns<StructValue> = {
  encode(message: StructValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      StructFieldValue.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(StructFieldValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructValue {
    return {
      values: globalThis.Array.isArray(object?.values)
        ? object.values.map((e: any) => StructFieldValue.fromJSON(e))
        : [],
    };
  },

  toJSON(message: StructValue): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) => StructFieldValue.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<StructValue>): StructValue {
    return StructValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StructValue>): StructValue {
    const message = createBaseStructValue();
    message.values = object.values?.map((e) => StructFieldValue.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStructFieldValue(): StructFieldValue {
  return { name: "", value: undefined };
}

export const StructFieldValue: MessageFns<StructFieldValue> = {
  encode(message: StructFieldValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== undefined) {
      FeatureValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructFieldValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructFieldValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = FeatureValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructFieldValue {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? FeatureValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: StructFieldValue): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== undefined) {
      obj.value = FeatureValue.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<StructFieldValue>): StructFieldValue {
    return StructFieldValue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StructFieldValue>): StructFieldValue {
    const message = createBaseStructFieldValue();
    message.name = object.name ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? FeatureValue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseFeatureValueList(): FeatureValueList {
  return { values: [] };
}

export const FeatureValueList: MessageFns<FeatureValueList> = {
  encode(message: FeatureValueList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      FeatureValue.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureValueList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureValueList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(FeatureValue.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureValueList {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => FeatureValue.fromJSON(e)) : [],
    };
  },

  toJSON(message: FeatureValueList): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) => FeatureValue.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureValueList>): FeatureValueList {
    return FeatureValueList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureValueList>): FeatureValueList {
    const message = createBaseFeatureValueList();
    message.values = object.values?.map((e) => FeatureValue.fromPartial(e)) || [];
    return message;
  },
};

/** A service for serving online feature values. */
export type FeaturestoreOnlineServingServiceDefinition = typeof FeaturestoreOnlineServingServiceDefinition;
export const FeaturestoreOnlineServingServiceDefinition = {
  name: "FeaturestoreOnlineServingService",
  fullName: "google.cloud.aiplatform.v1.FeaturestoreOnlineServingService",
  methods: {
    /**
     * Reads Feature values of a specific entity of an EntityType. For reading
     * feature values of multiple entities of an EntityType, please use
     * StreamingReadFeatureValues.
     */
    readFeatureValues: {
      name: "ReadFeatureValues",
      requestType: ReadFeatureValuesRequest,
      requestStream: false,
      responseType: ReadFeatureValuesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 101, 110, 116, 105, 116, 121, 95, 116, 121, 112, 101])],
          578365826: [
            Buffer.from([
              93,
              58,
              1,
              42,
              34,
              88,
              47,
              118,
              49,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              97,
              100,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              97,
              108,
              117,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Reads Feature values for multiple entities. Depending on their size, data
     * for different entities may be broken
     * up across multiple responses.
     */
    streamingReadFeatureValues: {
      name: "StreamingReadFeatureValues",
      requestType: StreamingReadFeatureValuesRequest,
      requestStream: false,
      responseType: ReadFeatureValuesResponse,
      responseStream: true,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 101, 110, 116, 105, 116, 121, 95, 116, 121, 112, 101])],
          578365826: [
            Buffer.from([
              102,
              58,
              1,
              42,
              34,
              97,
              47,
              118,
              49,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              114,
              101,
              97,
              109,
              105,
              110,
              103,
              82,
              101,
              97,
              100,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              97,
              108,
              117,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Writes Feature values of one or more entities of an EntityType.
     *
     * The Feature values are merged into existing entities if any. The Feature
     * values to be written must have timestamp within the online storage
     * retention.
     */
    writeFeatureValues: {
      name: "WriteFeatureValues",
      requestType: WriteFeatureValuesRequest,
      requestStream: false,
      responseType: WriteFeatureValuesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              44,
              112,
              97,
              121,
              108,
              111,
              97,
              100,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              94,
              58,
              1,
              42,
              34,
              89,
              47,
              118,
              49,
              47,
              123,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              58,
              119,
              114,
              105,
              116,
              101,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              97,
              108,
              117,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface FeaturestoreOnlineServingServiceImplementation<CallContextExt = {}> {
  /**
   * Reads Feature values of a specific entity of an EntityType. For reading
   * feature values of multiple entities of an EntityType, please use
   * StreamingReadFeatureValues.
   */
  readFeatureValues(
    request: ReadFeatureValuesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReadFeatureValuesResponse>>;
  /**
   * Reads Feature values for multiple entities. Depending on their size, data
   * for different entities may be broken
   * up across multiple responses.
   */
  streamingReadFeatureValues(
    request: StreamingReadFeatureValuesRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<ReadFeatureValuesResponse>>;
  /**
   * Writes Feature values of one or more entities of an EntityType.
   *
   * The Feature values are merged into existing entities if any. The Feature
   * values to be written must have timestamp within the online storage
   * retention.
   */
  writeFeatureValues(
    request: WriteFeatureValuesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<WriteFeatureValuesResponse>>;
}

export interface FeaturestoreOnlineServingServiceClient<CallOptionsExt = {}> {
  /**
   * Reads Feature values of a specific entity of an EntityType. For reading
   * feature values of multiple entities of an EntityType, please use
   * StreamingReadFeatureValues.
   */
  readFeatureValues(
    request: DeepPartial<ReadFeatureValuesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReadFeatureValuesResponse>;
  /**
   * Reads Feature values for multiple entities. Depending on their size, data
   * for different entities may be broken
   * up across multiple responses.
   */
  streamingReadFeatureValues(
    request: DeepPartial<StreamingReadFeatureValuesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<ReadFeatureValuesResponse>;
  /**
   * Writes Feature values of one or more entities of an EntityType.
   *
   * The Feature values are merged into existing entities if any. The Feature
   * values to be written must have timestamp within the online storage
   * retention.
   */
  writeFeatureValues(
    request: DeepPartial<WriteFeatureValuesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<WriteFeatureValuesResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
