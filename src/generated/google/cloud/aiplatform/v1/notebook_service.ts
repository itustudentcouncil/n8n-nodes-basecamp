// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/notebook_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { NotebookExecutionJob } from "./notebook_execution_job.js";
import { NotebookRuntime, NotebookRuntimeTemplate } from "./notebook_runtime.js";
import { GenericOperationMetadata } from "./operation.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/** Views for Get/List NotebookExecutionJob */
export enum NotebookExecutionJobView {
  /** NOTEBOOK_EXECUTION_JOB_VIEW_UNSPECIFIED - When unspecified, the API defaults to the BASIC view. */
  NOTEBOOK_EXECUTION_JOB_VIEW_UNSPECIFIED = 0,
  /** NOTEBOOK_EXECUTION_JOB_VIEW_BASIC - Includes all fields except for direct notebook inputs. */
  NOTEBOOK_EXECUTION_JOB_VIEW_BASIC = 1,
  /** NOTEBOOK_EXECUTION_JOB_VIEW_FULL - Includes all fields. */
  NOTEBOOK_EXECUTION_JOB_VIEW_FULL = 2,
  UNRECOGNIZED = -1,
}

export function notebookExecutionJobViewFromJSON(object: any): NotebookExecutionJobView {
  switch (object) {
    case 0:
    case "NOTEBOOK_EXECUTION_JOB_VIEW_UNSPECIFIED":
      return NotebookExecutionJobView.NOTEBOOK_EXECUTION_JOB_VIEW_UNSPECIFIED;
    case 1:
    case "NOTEBOOK_EXECUTION_JOB_VIEW_BASIC":
      return NotebookExecutionJobView.NOTEBOOK_EXECUTION_JOB_VIEW_BASIC;
    case 2:
    case "NOTEBOOK_EXECUTION_JOB_VIEW_FULL":
      return NotebookExecutionJobView.NOTEBOOK_EXECUTION_JOB_VIEW_FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NotebookExecutionJobView.UNRECOGNIZED;
  }
}

export function notebookExecutionJobViewToJSON(object: NotebookExecutionJobView): string {
  switch (object) {
    case NotebookExecutionJobView.NOTEBOOK_EXECUTION_JOB_VIEW_UNSPECIFIED:
      return "NOTEBOOK_EXECUTION_JOB_VIEW_UNSPECIFIED";
    case NotebookExecutionJobView.NOTEBOOK_EXECUTION_JOB_VIEW_BASIC:
      return "NOTEBOOK_EXECUTION_JOB_VIEW_BASIC";
    case NotebookExecutionJobView.NOTEBOOK_EXECUTION_JOB_VIEW_FULL:
      return "NOTEBOOK_EXECUTION_JOB_VIEW_FULL";
    case NotebookExecutionJobView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Request message for
 * [NotebookService.CreateNotebookRuntimeTemplate][google.cloud.aiplatform.v1.NotebookService.CreateNotebookRuntimeTemplate].
 */
export interface CreateNotebookRuntimeTemplateRequest {
  /**
   * Required. The resource name of the Location to create the
   * NotebookRuntimeTemplate. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The NotebookRuntimeTemplate to create. */
  notebookRuntimeTemplate:
    | NotebookRuntimeTemplate
    | undefined;
  /** Optional. User specified ID for the notebook runtime template. */
  notebookRuntimeTemplateId: string;
}

/**
 * Metadata information for
 * [NotebookService.CreateNotebookRuntimeTemplate][google.cloud.aiplatform.v1.NotebookService.CreateNotebookRuntimeTemplate].
 */
export interface CreateNotebookRuntimeTemplateOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [NotebookService.GetNotebookRuntimeTemplate][google.cloud.aiplatform.v1.NotebookService.GetNotebookRuntimeTemplate]
 */
export interface GetNotebookRuntimeTemplateRequest {
  /**
   * Required. The name of the NotebookRuntimeTemplate resource.
   * Format:
   * `projects/{project}/locations/{location}/notebookRuntimeTemplates/{notebook_runtime_template}`
   */
  name: string;
}

/**
 * Request message for
 * [NotebookService.ListNotebookRuntimeTemplates][google.cloud.aiplatform.v1.NotebookService.ListNotebookRuntimeTemplates].
 */
export interface ListNotebookRuntimeTemplatesRequest {
  /**
   * Required. The resource name of the Location from which to list the
   * NotebookRuntimeTemplates.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. An expression for filtering the results of the request. For field
   * names both snake_case and camelCase are supported.
   *
   *   * `notebookRuntimeTemplate` supports = and !=. `notebookRuntimeTemplate`
   *     represents the NotebookRuntimeTemplate ID,
   *     i.e. the last segment of the NotebookRuntimeTemplate's [resource name]
   *     [google.cloud.aiplatform.v1.NotebookRuntimeTemplate.name].
   *   * `display_name` supports = and !=
   *   * `labels` supports general map functions that is:
   *     * `labels.key=value` - key:value equality
   *     * `labels.key:* or labels:key - key existence
   *     * A key including a space must be quoted. `labels."a key"`.
   *   * `notebookRuntimeType` supports = and !=. notebookRuntimeType enum:
   *   [USER_DEFINED, ONE_CLICK].
   *
   * Some examples:
   *
   *   * `notebookRuntimeTemplate=notebookRuntimeTemplate123`
   *   * `displayName="myDisplayName"`
   *   * `labels.myKey="myValue"`
   *   * `notebookRuntimeType=USER_DEFINED`
   */
  filter: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /**
   * Optional. The standard list page token.
   * Typically obtained via
   * [ListNotebookRuntimeTemplatesResponse.next_page_token][google.cloud.aiplatform.v1.ListNotebookRuntimeTemplatesResponse.next_page_token]
   * of the previous
   * [NotebookService.ListNotebookRuntimeTemplates][google.cloud.aiplatform.v1.NotebookService.ListNotebookRuntimeTemplates]
   * call.
   */
  pageToken: string;
  /** Optional. Mask specifying which fields to read. */
  readMask:
    | string[]
    | undefined;
  /**
   * Optional. A comma-separated list of fields to order by, sorted in ascending
   * order. Use "desc" after a field name for descending. Supported fields:
   *
   *   * `display_name`
   *   * `create_time`
   *   * `update_time`
   *
   * Example: `display_name, create_time desc`.
   */
  orderBy: string;
}

/**
 * Response message for
 * [NotebookService.ListNotebookRuntimeTemplates][google.cloud.aiplatform.v1.NotebookService.ListNotebookRuntimeTemplates].
 */
export interface ListNotebookRuntimeTemplatesResponse {
  /** List of NotebookRuntimeTemplates in the requested page. */
  notebookRuntimeTemplates: NotebookRuntimeTemplate[];
  /**
   * A token to retrieve next page of results.
   * Pass to
   * [ListNotebookRuntimeTemplatesRequest.page_token][google.cloud.aiplatform.v1.ListNotebookRuntimeTemplatesRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [NotebookService.DeleteNotebookRuntimeTemplate][google.cloud.aiplatform.v1.NotebookService.DeleteNotebookRuntimeTemplate].
 */
export interface DeleteNotebookRuntimeTemplateRequest {
  /**
   * Required. The name of the NotebookRuntimeTemplate resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/notebookRuntimeTemplates/{notebook_runtime_template}`
   */
  name: string;
}

/**
 * Request message for
 * [NotebookService.UpdateNotebookRuntimeTemplate][google.cloud.aiplatform.v1.NotebookService.UpdateNotebookRuntimeTemplate].
 */
export interface UpdateNotebookRuntimeTemplateRequest {
  /** Required. The NotebookRuntimeTemplate to update. */
  notebookRuntimeTemplate:
    | NotebookRuntimeTemplate
    | undefined;
  /**
   * Required. The update mask applies to the resource.
   * For the `FieldMask` definition, see
   * [google.protobuf.FieldMask][google.protobuf.FieldMask]. Input format:
   * `{paths: "${updated_filed}"}` Updatable fields:
   *
   *   * `encryption_spec.kms_key_name`
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [NotebookService.AssignNotebookRuntime][google.cloud.aiplatform.v1.NotebookService.AssignNotebookRuntime].
 */
export interface AssignNotebookRuntimeRequest {
  /**
   * Required. The resource name of the Location to get the NotebookRuntime
   * assignment. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Required. The resource name of the NotebookRuntimeTemplate based on which a
   * NotebookRuntime will be assigned (reuse or create a new one).
   */
  notebookRuntimeTemplate: string;
  /**
   * Required. Provide runtime specific information (e.g. runtime owner,
   * notebook id) used for NotebookRuntime assignment.
   */
  notebookRuntime:
    | NotebookRuntime
    | undefined;
  /** Optional. User specified ID for the notebook runtime. */
  notebookRuntimeId: string;
}

/**
 * Metadata information for
 * [NotebookService.AssignNotebookRuntime][google.cloud.aiplatform.v1.NotebookService.AssignNotebookRuntime].
 */
export interface AssignNotebookRuntimeOperationMetadata {
  /** The operation generic information. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /**
   * A human-readable message that shows the intermediate progress details of
   * NotebookRuntime.
   */
  progressMessage: string;
}

/**
 * Request message for
 * [NotebookService.GetNotebookRuntime][google.cloud.aiplatform.v1.NotebookService.GetNotebookRuntime]
 */
export interface GetNotebookRuntimeRequest {
  /**
   * Required. The name of the NotebookRuntime resource.
   * Instead of checking whether the name is in valid NotebookRuntime resource
   * name format, directly throw NotFound exception if there is no such
   * NotebookRuntime in spanner.
   */
  name: string;
}

/**
 * Request message for
 * [NotebookService.ListNotebookRuntimes][google.cloud.aiplatform.v1.NotebookService.ListNotebookRuntimes].
 */
export interface ListNotebookRuntimesRequest {
  /**
   * Required. The resource name of the Location from which to list the
   * NotebookRuntimes.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. An expression for filtering the results of the request. For field
   * names both snake_case and camelCase are supported.
   *
   *   * `notebookRuntime` supports = and !=. `notebookRuntime` represents the
   *     NotebookRuntime ID,
   *     i.e. the last segment of the NotebookRuntime's [resource name]
   *     [google.cloud.aiplatform.v1.NotebookRuntime.name].
   *   * `displayName` supports = and != and regex.
   *   * `notebookRuntimeTemplate` supports = and !=. `notebookRuntimeTemplate`
   *     represents the NotebookRuntimeTemplate ID,
   *     i.e. the last segment of the NotebookRuntimeTemplate's [resource name]
   *     [google.cloud.aiplatform.v1.NotebookRuntimeTemplate.name].
   *   * `healthState` supports = and !=. healthState enum: [HEALTHY, UNHEALTHY,
   *   HEALTH_STATE_UNSPECIFIED].
   *   * `runtimeState` supports = and !=. runtimeState enum:
   *   [RUNTIME_STATE_UNSPECIFIED, RUNNING, BEING_STARTED, BEING_STOPPED,
   *   STOPPED, BEING_UPGRADED, ERROR, INVALID].
   *   * `runtimeUser` supports = and !=.
   *   * API version is UI only: `uiState` supports = and !=. uiState enum:
   *   [UI_RESOURCE_STATE_UNSPECIFIED, UI_RESOURCE_STATE_BEING_CREATED,
   *   UI_RESOURCE_STATE_ACTIVE, UI_RESOURCE_STATE_BEING_DELETED,
   *   UI_RESOURCE_STATE_CREATION_FAILED].
   *   * `notebookRuntimeType` supports = and !=. notebookRuntimeType enum:
   *   [USER_DEFINED, ONE_CLICK].
   *
   * Some examples:
   *
   *   * `notebookRuntime="notebookRuntime123"`
   *   * `displayName="myDisplayName"` and `displayName=~"myDisplayNameRegex"`
   *   * `notebookRuntimeTemplate="notebookRuntimeTemplate321"`
   *   * `healthState=HEALTHY`
   *   * `runtimeState=RUNNING`
   *   * `runtimeUser="test@google.com"`
   *   * `uiState=UI_RESOURCE_STATE_BEING_DELETED`
   *   * `notebookRuntimeType=USER_DEFINED`
   */
  filter: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /**
   * Optional. The standard list page token.
   * Typically obtained via
   * [ListNotebookRuntimesResponse.next_page_token][google.cloud.aiplatform.v1.ListNotebookRuntimesResponse.next_page_token]
   * of the previous
   * [NotebookService.ListNotebookRuntimes][google.cloud.aiplatform.v1.NotebookService.ListNotebookRuntimes]
   * call.
   */
  pageToken: string;
  /** Optional. Mask specifying which fields to read. */
  readMask:
    | string[]
    | undefined;
  /**
   * Optional. A comma-separated list of fields to order by, sorted in ascending
   * order. Use "desc" after a field name for descending. Supported fields:
   *
   *   * `display_name`
   *   * `create_time`
   *   * `update_time`
   *
   * Example: `display_name, create_time desc`.
   */
  orderBy: string;
}

/**
 * Response message for
 * [NotebookService.ListNotebookRuntimes][google.cloud.aiplatform.v1.NotebookService.ListNotebookRuntimes].
 */
export interface ListNotebookRuntimesResponse {
  /** List of NotebookRuntimes in the requested page. */
  notebookRuntimes: NotebookRuntime[];
  /**
   * A token to retrieve next page of results.
   * Pass to
   * [ListNotebookRuntimesRequest.page_token][google.cloud.aiplatform.v1.ListNotebookRuntimesRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [NotebookService.DeleteNotebookRuntime][google.cloud.aiplatform.v1.NotebookService.DeleteNotebookRuntime].
 */
export interface DeleteNotebookRuntimeRequest {
  /**
   * Required. The name of the NotebookRuntime resource to be deleted.
   * Instead of checking whether the name is in valid NotebookRuntime resource
   * name format, directly throw NotFound exception if there is no such
   * NotebookRuntime in spanner.
   */
  name: string;
}

/**
 * Request message for
 * [NotebookService.UpgradeNotebookRuntime][google.cloud.aiplatform.v1.NotebookService.UpgradeNotebookRuntime].
 */
export interface UpgradeNotebookRuntimeRequest {
  /**
   * Required. The name of the NotebookRuntime resource to be upgrade.
   * Instead of checking whether the name is in valid NotebookRuntime resource
   * name format, directly throw NotFound exception if there is no such
   * NotebookRuntime in spanner.
   */
  name: string;
}

/**
 * Metadata information for
 * [NotebookService.UpgradeNotebookRuntime][google.cloud.aiplatform.v1.NotebookService.UpgradeNotebookRuntime].
 */
export interface UpgradeNotebookRuntimeOperationMetadata {
  /** The operation generic information. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /**
   * A human-readable message that shows the intermediate progress details of
   * NotebookRuntime.
   */
  progressMessage: string;
}

/**
 * Response message for
 * [NotebookService.UpgradeNotebookRuntime][google.cloud.aiplatform.v1.NotebookService.UpgradeNotebookRuntime].
 */
export interface UpgradeNotebookRuntimeResponse {
}

/**
 * Request message for
 * [NotebookService.StartNotebookRuntime][google.cloud.aiplatform.v1.NotebookService.StartNotebookRuntime].
 */
export interface StartNotebookRuntimeRequest {
  /**
   * Required. The name of the NotebookRuntime resource to be started.
   * Instead of checking whether the name is in valid NotebookRuntime resource
   * name format, directly throw NotFound exception if there is no such
   * NotebookRuntime in spanner.
   */
  name: string;
}

/**
 * Metadata information for
 * [NotebookService.StartNotebookRuntime][google.cloud.aiplatform.v1.NotebookService.StartNotebookRuntime].
 */
export interface StartNotebookRuntimeOperationMetadata {
  /** The operation generic information. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /**
   * A human-readable message that shows the intermediate progress details of
   * NotebookRuntime.
   */
  progressMessage: string;
}

/**
 * Response message for
 * [NotebookService.StartNotebookRuntime][google.cloud.aiplatform.v1.NotebookService.StartNotebookRuntime].
 */
export interface StartNotebookRuntimeResponse {
}

/** Request message for [NotebookService.CreateNotebookExecutionJob] */
export interface CreateNotebookExecutionJobRequest {
  /**
   * Required. The resource name of the Location to create the
   * NotebookExecutionJob. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The NotebookExecutionJob to create. */
  notebookExecutionJob:
    | NotebookExecutionJob
    | undefined;
  /** Optional. User specified ID for the NotebookExecutionJob. */
  notebookExecutionJobId: string;
}

/**
 * Metadata information for
 * [NotebookService.CreateNotebookExecutionJob][google.cloud.aiplatform.v1.NotebookService.CreateNotebookExecutionJob].
 */
export interface CreateNotebookExecutionJobOperationMetadata {
  /** The operation generic information. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /**
   * A human-readable message that shows the intermediate progress details of
   * NotebookRuntime.
   */
  progressMessage: string;
}

/** Request message for [NotebookService.GetNotebookExecutionJob] */
export interface GetNotebookExecutionJobRequest {
  /** Required. The name of the NotebookExecutionJob resource. */
  name: string;
  /** Optional. The NotebookExecutionJob view. Defaults to BASIC. */
  view: NotebookExecutionJobView;
}

/** Request message for [NotebookService.ListNotebookExecutionJobs] */
export interface ListNotebookExecutionJobsRequest {
  /**
   * Required. The resource name of the Location from which to list the
   * NotebookExecutionJobs.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. An expression for filtering the results of the request. For field
   * names both snake_case and camelCase are supported.
   *
   *   * `notebookExecutionJob` supports = and !=. `notebookExecutionJob`
   *   represents the NotebookExecutionJob ID.
   *   * `displayName` supports = and != and regex.
   *   * `schedule` supports = and != and regex.
   *
   * Some examples:
   *   * `notebookExecutionJob="123"`
   *   * `notebookExecutionJob="my-execution-job"`
   *   * `displayName="myDisplayName"` and `displayName=~"myDisplayNameRegex"`
   */
  filter: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /**
   * Optional. The standard list page token.
   * Typically obtained via
   * [ListNotebookExecutionJobs.next_page_token][] of the previous
   * [NotebookService.ListNotebookExecutionJobs][google.cloud.aiplatform.v1.NotebookService.ListNotebookExecutionJobs]
   * call.
   */
  pageToken: string;
  /**
   * Optional. A comma-separated list of fields to order by, sorted in ascending
   * order. Use "desc" after a field name for descending. Supported fields:
   *
   *   * `display_name`
   *   * `create_time`
   *   * `update_time`
   *
   * Example: `display_name, create_time desc`.
   */
  orderBy: string;
  /** Optional. The NotebookExecutionJob view. Defaults to BASIC. */
  view: NotebookExecutionJobView;
}

/** Response message for [NotebookService.CreateNotebookExecutionJob] */
export interface ListNotebookExecutionJobsResponse {
  /** List of NotebookExecutionJobs in the requested page. */
  notebookExecutionJobs: NotebookExecutionJob[];
  /**
   * A token to retrieve next page of results.
   * Pass to [ListNotebookExecutionJobs.page_token][] to obtain that
   * page.
   */
  nextPageToken: string;
}

/** Request message for [NotebookService.DeleteNotebookExecutionJob] */
export interface DeleteNotebookExecutionJobRequest {
  /** Required. The name of the NotebookExecutionJob resource to be deleted. */
  name: string;
}

function createBaseCreateNotebookRuntimeTemplateRequest(): CreateNotebookRuntimeTemplateRequest {
  return { parent: "", notebookRuntimeTemplate: undefined, notebookRuntimeTemplateId: "" };
}

export const CreateNotebookRuntimeTemplateRequest: MessageFns<CreateNotebookRuntimeTemplateRequest> = {
  encode(message: CreateNotebookRuntimeTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.notebookRuntimeTemplate !== undefined) {
      NotebookRuntimeTemplate.encode(message.notebookRuntimeTemplate, writer.uint32(18).fork()).join();
    }
    if (message.notebookRuntimeTemplateId !== "") {
      writer.uint32(26).string(message.notebookRuntimeTemplateId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNotebookRuntimeTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNotebookRuntimeTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notebookRuntimeTemplate = NotebookRuntimeTemplate.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notebookRuntimeTemplateId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNotebookRuntimeTemplateRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      notebookRuntimeTemplate: isSet(object.notebookRuntimeTemplate)
        ? NotebookRuntimeTemplate.fromJSON(object.notebookRuntimeTemplate)
        : undefined,
      notebookRuntimeTemplateId: isSet(object.notebookRuntimeTemplateId)
        ? globalThis.String(object.notebookRuntimeTemplateId)
        : "",
    };
  },

  toJSON(message: CreateNotebookRuntimeTemplateRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.notebookRuntimeTemplate !== undefined) {
      obj.notebookRuntimeTemplate = NotebookRuntimeTemplate.toJSON(message.notebookRuntimeTemplate);
    }
    if (message.notebookRuntimeTemplateId !== "") {
      obj.notebookRuntimeTemplateId = message.notebookRuntimeTemplateId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateNotebookRuntimeTemplateRequest>): CreateNotebookRuntimeTemplateRequest {
    return CreateNotebookRuntimeTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateNotebookRuntimeTemplateRequest>): CreateNotebookRuntimeTemplateRequest {
    const message = createBaseCreateNotebookRuntimeTemplateRequest();
    message.parent = object.parent ?? "";
    message.notebookRuntimeTemplate =
      (object.notebookRuntimeTemplate !== undefined && object.notebookRuntimeTemplate !== null)
        ? NotebookRuntimeTemplate.fromPartial(object.notebookRuntimeTemplate)
        : undefined;
    message.notebookRuntimeTemplateId = object.notebookRuntimeTemplateId ?? "";
    return message;
  },
};

function createBaseCreateNotebookRuntimeTemplateOperationMetadata(): CreateNotebookRuntimeTemplateOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateNotebookRuntimeTemplateOperationMetadata: MessageFns<
  CreateNotebookRuntimeTemplateOperationMetadata
> = {
  encode(
    message: CreateNotebookRuntimeTemplateOperationMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNotebookRuntimeTemplateOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNotebookRuntimeTemplateOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNotebookRuntimeTemplateOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateNotebookRuntimeTemplateOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CreateNotebookRuntimeTemplateOperationMetadata>,
  ): CreateNotebookRuntimeTemplateOperationMetadata {
    return CreateNotebookRuntimeTemplateOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreateNotebookRuntimeTemplateOperationMetadata>,
  ): CreateNotebookRuntimeTemplateOperationMetadata {
    const message = createBaseCreateNotebookRuntimeTemplateOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseGetNotebookRuntimeTemplateRequest(): GetNotebookRuntimeTemplateRequest {
  return { name: "" };
}

export const GetNotebookRuntimeTemplateRequest: MessageFns<GetNotebookRuntimeTemplateRequest> = {
  encode(message: GetNotebookRuntimeTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotebookRuntimeTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotebookRuntimeTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNotebookRuntimeTemplateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNotebookRuntimeTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNotebookRuntimeTemplateRequest>): GetNotebookRuntimeTemplateRequest {
    return GetNotebookRuntimeTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNotebookRuntimeTemplateRequest>): GetNotebookRuntimeTemplateRequest {
    const message = createBaseGetNotebookRuntimeTemplateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListNotebookRuntimeTemplatesRequest(): ListNotebookRuntimeTemplatesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined, orderBy: "" };
}

export const ListNotebookRuntimeTemplatesRequest: MessageFns<ListNotebookRuntimeTemplatesRequest> = {
  encode(message: ListNotebookRuntimeTemplatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotebookRuntimeTemplatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotebookRuntimeTemplatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotebookRuntimeTemplatesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListNotebookRuntimeTemplatesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotebookRuntimeTemplatesRequest>): ListNotebookRuntimeTemplatesRequest {
    return ListNotebookRuntimeTemplatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotebookRuntimeTemplatesRequest>): ListNotebookRuntimeTemplatesRequest {
    const message = createBaseListNotebookRuntimeTemplatesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListNotebookRuntimeTemplatesResponse(): ListNotebookRuntimeTemplatesResponse {
  return { notebookRuntimeTemplates: [], nextPageToken: "" };
}

export const ListNotebookRuntimeTemplatesResponse: MessageFns<ListNotebookRuntimeTemplatesResponse> = {
  encode(message: ListNotebookRuntimeTemplatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notebookRuntimeTemplates) {
      NotebookRuntimeTemplate.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotebookRuntimeTemplatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotebookRuntimeTemplatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notebookRuntimeTemplates.push(NotebookRuntimeTemplate.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotebookRuntimeTemplatesResponse {
    return {
      notebookRuntimeTemplates: globalThis.Array.isArray(object?.notebookRuntimeTemplates)
        ? object.notebookRuntimeTemplates.map((e: any) => NotebookRuntimeTemplate.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNotebookRuntimeTemplatesResponse): unknown {
    const obj: any = {};
    if (message.notebookRuntimeTemplates?.length) {
      obj.notebookRuntimeTemplates = message.notebookRuntimeTemplates.map((e) => NotebookRuntimeTemplate.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotebookRuntimeTemplatesResponse>): ListNotebookRuntimeTemplatesResponse {
    return ListNotebookRuntimeTemplatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotebookRuntimeTemplatesResponse>): ListNotebookRuntimeTemplatesResponse {
    const message = createBaseListNotebookRuntimeTemplatesResponse();
    message.notebookRuntimeTemplates =
      object.notebookRuntimeTemplates?.map((e) => NotebookRuntimeTemplate.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteNotebookRuntimeTemplateRequest(): DeleteNotebookRuntimeTemplateRequest {
  return { name: "" };
}

export const DeleteNotebookRuntimeTemplateRequest: MessageFns<DeleteNotebookRuntimeTemplateRequest> = {
  encode(message: DeleteNotebookRuntimeTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNotebookRuntimeTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNotebookRuntimeTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNotebookRuntimeTemplateRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteNotebookRuntimeTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteNotebookRuntimeTemplateRequest>): DeleteNotebookRuntimeTemplateRequest {
    return DeleteNotebookRuntimeTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteNotebookRuntimeTemplateRequest>): DeleteNotebookRuntimeTemplateRequest {
    const message = createBaseDeleteNotebookRuntimeTemplateRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateNotebookRuntimeTemplateRequest(): UpdateNotebookRuntimeTemplateRequest {
  return { notebookRuntimeTemplate: undefined, updateMask: undefined };
}

export const UpdateNotebookRuntimeTemplateRequest: MessageFns<UpdateNotebookRuntimeTemplateRequest> = {
  encode(message: UpdateNotebookRuntimeTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notebookRuntimeTemplate !== undefined) {
      NotebookRuntimeTemplate.encode(message.notebookRuntimeTemplate, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateNotebookRuntimeTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNotebookRuntimeTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notebookRuntimeTemplate = NotebookRuntimeTemplate.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNotebookRuntimeTemplateRequest {
    return {
      notebookRuntimeTemplate: isSet(object.notebookRuntimeTemplate)
        ? NotebookRuntimeTemplate.fromJSON(object.notebookRuntimeTemplate)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateNotebookRuntimeTemplateRequest): unknown {
    const obj: any = {};
    if (message.notebookRuntimeTemplate !== undefined) {
      obj.notebookRuntimeTemplate = NotebookRuntimeTemplate.toJSON(message.notebookRuntimeTemplate);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateNotebookRuntimeTemplateRequest>): UpdateNotebookRuntimeTemplateRequest {
    return UpdateNotebookRuntimeTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateNotebookRuntimeTemplateRequest>): UpdateNotebookRuntimeTemplateRequest {
    const message = createBaseUpdateNotebookRuntimeTemplateRequest();
    message.notebookRuntimeTemplate =
      (object.notebookRuntimeTemplate !== undefined && object.notebookRuntimeTemplate !== null)
        ? NotebookRuntimeTemplate.fromPartial(object.notebookRuntimeTemplate)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseAssignNotebookRuntimeRequest(): AssignNotebookRuntimeRequest {
  return { parent: "", notebookRuntimeTemplate: "", notebookRuntime: undefined, notebookRuntimeId: "" };
}

export const AssignNotebookRuntimeRequest: MessageFns<AssignNotebookRuntimeRequest> = {
  encode(message: AssignNotebookRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.notebookRuntimeTemplate !== "") {
      writer.uint32(18).string(message.notebookRuntimeTemplate);
    }
    if (message.notebookRuntime !== undefined) {
      NotebookRuntime.encode(message.notebookRuntime, writer.uint32(26).fork()).join();
    }
    if (message.notebookRuntimeId !== "") {
      writer.uint32(34).string(message.notebookRuntimeId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssignNotebookRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssignNotebookRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notebookRuntimeTemplate = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notebookRuntime = NotebookRuntime.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.notebookRuntimeId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssignNotebookRuntimeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      notebookRuntimeTemplate: isSet(object.notebookRuntimeTemplate)
        ? globalThis.String(object.notebookRuntimeTemplate)
        : "",
      notebookRuntime: isSet(object.notebookRuntime) ? NotebookRuntime.fromJSON(object.notebookRuntime) : undefined,
      notebookRuntimeId: isSet(object.notebookRuntimeId) ? globalThis.String(object.notebookRuntimeId) : "",
    };
  },

  toJSON(message: AssignNotebookRuntimeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.notebookRuntimeTemplate !== "") {
      obj.notebookRuntimeTemplate = message.notebookRuntimeTemplate;
    }
    if (message.notebookRuntime !== undefined) {
      obj.notebookRuntime = NotebookRuntime.toJSON(message.notebookRuntime);
    }
    if (message.notebookRuntimeId !== "") {
      obj.notebookRuntimeId = message.notebookRuntimeId;
    }
    return obj;
  },

  create(base?: DeepPartial<AssignNotebookRuntimeRequest>): AssignNotebookRuntimeRequest {
    return AssignNotebookRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssignNotebookRuntimeRequest>): AssignNotebookRuntimeRequest {
    const message = createBaseAssignNotebookRuntimeRequest();
    message.parent = object.parent ?? "";
    message.notebookRuntimeTemplate = object.notebookRuntimeTemplate ?? "";
    message.notebookRuntime = (object.notebookRuntime !== undefined && object.notebookRuntime !== null)
      ? NotebookRuntime.fromPartial(object.notebookRuntime)
      : undefined;
    message.notebookRuntimeId = object.notebookRuntimeId ?? "";
    return message;
  },
};

function createBaseAssignNotebookRuntimeOperationMetadata(): AssignNotebookRuntimeOperationMetadata {
  return { genericMetadata: undefined, progressMessage: "" };
}

export const AssignNotebookRuntimeOperationMetadata: MessageFns<AssignNotebookRuntimeOperationMetadata> = {
  encode(message: AssignNotebookRuntimeOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    if (message.progressMessage !== "") {
      writer.uint32(18).string(message.progressMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssignNotebookRuntimeOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssignNotebookRuntimeOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.progressMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssignNotebookRuntimeOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      progressMessage: isSet(object.progressMessage) ? globalThis.String(object.progressMessage) : "",
    };
  },

  toJSON(message: AssignNotebookRuntimeOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (message.progressMessage !== "") {
      obj.progressMessage = message.progressMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<AssignNotebookRuntimeOperationMetadata>): AssignNotebookRuntimeOperationMetadata {
    return AssignNotebookRuntimeOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssignNotebookRuntimeOperationMetadata>): AssignNotebookRuntimeOperationMetadata {
    const message = createBaseAssignNotebookRuntimeOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.progressMessage = object.progressMessage ?? "";
    return message;
  },
};

function createBaseGetNotebookRuntimeRequest(): GetNotebookRuntimeRequest {
  return { name: "" };
}

export const GetNotebookRuntimeRequest: MessageFns<GetNotebookRuntimeRequest> = {
  encode(message: GetNotebookRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotebookRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotebookRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNotebookRuntimeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNotebookRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNotebookRuntimeRequest>): GetNotebookRuntimeRequest {
    return GetNotebookRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNotebookRuntimeRequest>): GetNotebookRuntimeRequest {
    const message = createBaseGetNotebookRuntimeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListNotebookRuntimesRequest(): ListNotebookRuntimesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined, orderBy: "" };
}

export const ListNotebookRuntimesRequest: MessageFns<ListNotebookRuntimesRequest> = {
  encode(message: ListNotebookRuntimesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotebookRuntimesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotebookRuntimesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotebookRuntimesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListNotebookRuntimesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotebookRuntimesRequest>): ListNotebookRuntimesRequest {
    return ListNotebookRuntimesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotebookRuntimesRequest>): ListNotebookRuntimesRequest {
    const message = createBaseListNotebookRuntimesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListNotebookRuntimesResponse(): ListNotebookRuntimesResponse {
  return { notebookRuntimes: [], nextPageToken: "" };
}

export const ListNotebookRuntimesResponse: MessageFns<ListNotebookRuntimesResponse> = {
  encode(message: ListNotebookRuntimesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notebookRuntimes) {
      NotebookRuntime.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotebookRuntimesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotebookRuntimesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notebookRuntimes.push(NotebookRuntime.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotebookRuntimesResponse {
    return {
      notebookRuntimes: globalThis.Array.isArray(object?.notebookRuntimes)
        ? object.notebookRuntimes.map((e: any) => NotebookRuntime.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNotebookRuntimesResponse): unknown {
    const obj: any = {};
    if (message.notebookRuntimes?.length) {
      obj.notebookRuntimes = message.notebookRuntimes.map((e) => NotebookRuntime.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotebookRuntimesResponse>): ListNotebookRuntimesResponse {
    return ListNotebookRuntimesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotebookRuntimesResponse>): ListNotebookRuntimesResponse {
    const message = createBaseListNotebookRuntimesResponse();
    message.notebookRuntimes = object.notebookRuntimes?.map((e) => NotebookRuntime.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteNotebookRuntimeRequest(): DeleteNotebookRuntimeRequest {
  return { name: "" };
}

export const DeleteNotebookRuntimeRequest: MessageFns<DeleteNotebookRuntimeRequest> = {
  encode(message: DeleteNotebookRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNotebookRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNotebookRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNotebookRuntimeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteNotebookRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteNotebookRuntimeRequest>): DeleteNotebookRuntimeRequest {
    return DeleteNotebookRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteNotebookRuntimeRequest>): DeleteNotebookRuntimeRequest {
    const message = createBaseDeleteNotebookRuntimeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpgradeNotebookRuntimeRequest(): UpgradeNotebookRuntimeRequest {
  return { name: "" };
}

export const UpgradeNotebookRuntimeRequest: MessageFns<UpgradeNotebookRuntimeRequest> = {
  encode(message: UpgradeNotebookRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeNotebookRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeNotebookRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeNotebookRuntimeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: UpgradeNotebookRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UpgradeNotebookRuntimeRequest>): UpgradeNotebookRuntimeRequest {
    return UpgradeNotebookRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpgradeNotebookRuntimeRequest>): UpgradeNotebookRuntimeRequest {
    const message = createBaseUpgradeNotebookRuntimeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpgradeNotebookRuntimeOperationMetadata(): UpgradeNotebookRuntimeOperationMetadata {
  return { genericMetadata: undefined, progressMessage: "" };
}

export const UpgradeNotebookRuntimeOperationMetadata: MessageFns<UpgradeNotebookRuntimeOperationMetadata> = {
  encode(message: UpgradeNotebookRuntimeOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    if (message.progressMessage !== "") {
      writer.uint32(18).string(message.progressMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeNotebookRuntimeOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeNotebookRuntimeOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.progressMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpgradeNotebookRuntimeOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      progressMessage: isSet(object.progressMessage) ? globalThis.String(object.progressMessage) : "",
    };
  },

  toJSON(message: UpgradeNotebookRuntimeOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (message.progressMessage !== "") {
      obj.progressMessage = message.progressMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<UpgradeNotebookRuntimeOperationMetadata>): UpgradeNotebookRuntimeOperationMetadata {
    return UpgradeNotebookRuntimeOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpgradeNotebookRuntimeOperationMetadata>): UpgradeNotebookRuntimeOperationMetadata {
    const message = createBaseUpgradeNotebookRuntimeOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.progressMessage = object.progressMessage ?? "";
    return message;
  },
};

function createBaseUpgradeNotebookRuntimeResponse(): UpgradeNotebookRuntimeResponse {
  return {};
}

export const UpgradeNotebookRuntimeResponse: MessageFns<UpgradeNotebookRuntimeResponse> = {
  encode(_: UpgradeNotebookRuntimeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeNotebookRuntimeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeNotebookRuntimeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpgradeNotebookRuntimeResponse {
    return {};
  },

  toJSON(_: UpgradeNotebookRuntimeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpgradeNotebookRuntimeResponse>): UpgradeNotebookRuntimeResponse {
    return UpgradeNotebookRuntimeResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpgradeNotebookRuntimeResponse>): UpgradeNotebookRuntimeResponse {
    const message = createBaseUpgradeNotebookRuntimeResponse();
    return message;
  },
};

function createBaseStartNotebookRuntimeRequest(): StartNotebookRuntimeRequest {
  return { name: "" };
}

export const StartNotebookRuntimeRequest: MessageFns<StartNotebookRuntimeRequest> = {
  encode(message: StartNotebookRuntimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartNotebookRuntimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartNotebookRuntimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartNotebookRuntimeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StartNotebookRuntimeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StartNotebookRuntimeRequest>): StartNotebookRuntimeRequest {
    return StartNotebookRuntimeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartNotebookRuntimeRequest>): StartNotebookRuntimeRequest {
    const message = createBaseStartNotebookRuntimeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseStartNotebookRuntimeOperationMetadata(): StartNotebookRuntimeOperationMetadata {
  return { genericMetadata: undefined, progressMessage: "" };
}

export const StartNotebookRuntimeOperationMetadata: MessageFns<StartNotebookRuntimeOperationMetadata> = {
  encode(message: StartNotebookRuntimeOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    if (message.progressMessage !== "") {
      writer.uint32(18).string(message.progressMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartNotebookRuntimeOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartNotebookRuntimeOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.progressMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartNotebookRuntimeOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      progressMessage: isSet(object.progressMessage) ? globalThis.String(object.progressMessage) : "",
    };
  },

  toJSON(message: StartNotebookRuntimeOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (message.progressMessage !== "") {
      obj.progressMessage = message.progressMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<StartNotebookRuntimeOperationMetadata>): StartNotebookRuntimeOperationMetadata {
    return StartNotebookRuntimeOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StartNotebookRuntimeOperationMetadata>): StartNotebookRuntimeOperationMetadata {
    const message = createBaseStartNotebookRuntimeOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.progressMessage = object.progressMessage ?? "";
    return message;
  },
};

function createBaseStartNotebookRuntimeResponse(): StartNotebookRuntimeResponse {
  return {};
}

export const StartNotebookRuntimeResponse: MessageFns<StartNotebookRuntimeResponse> = {
  encode(_: StartNotebookRuntimeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartNotebookRuntimeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartNotebookRuntimeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StartNotebookRuntimeResponse {
    return {};
  },

  toJSON(_: StartNotebookRuntimeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<StartNotebookRuntimeResponse>): StartNotebookRuntimeResponse {
    return StartNotebookRuntimeResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<StartNotebookRuntimeResponse>): StartNotebookRuntimeResponse {
    const message = createBaseStartNotebookRuntimeResponse();
    return message;
  },
};

function createBaseCreateNotebookExecutionJobRequest(): CreateNotebookExecutionJobRequest {
  return { parent: "", notebookExecutionJob: undefined, notebookExecutionJobId: "" };
}

export const CreateNotebookExecutionJobRequest: MessageFns<CreateNotebookExecutionJobRequest> = {
  encode(message: CreateNotebookExecutionJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.notebookExecutionJob !== undefined) {
      NotebookExecutionJob.encode(message.notebookExecutionJob, writer.uint32(18).fork()).join();
    }
    if (message.notebookExecutionJobId !== "") {
      writer.uint32(26).string(message.notebookExecutionJobId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNotebookExecutionJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNotebookExecutionJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.notebookExecutionJob = NotebookExecutionJob.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notebookExecutionJobId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNotebookExecutionJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      notebookExecutionJob: isSet(object.notebookExecutionJob)
        ? NotebookExecutionJob.fromJSON(object.notebookExecutionJob)
        : undefined,
      notebookExecutionJobId: isSet(object.notebookExecutionJobId)
        ? globalThis.String(object.notebookExecutionJobId)
        : "",
    };
  },

  toJSON(message: CreateNotebookExecutionJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.notebookExecutionJob !== undefined) {
      obj.notebookExecutionJob = NotebookExecutionJob.toJSON(message.notebookExecutionJob);
    }
    if (message.notebookExecutionJobId !== "") {
      obj.notebookExecutionJobId = message.notebookExecutionJobId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateNotebookExecutionJobRequest>): CreateNotebookExecutionJobRequest {
    return CreateNotebookExecutionJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateNotebookExecutionJobRequest>): CreateNotebookExecutionJobRequest {
    const message = createBaseCreateNotebookExecutionJobRequest();
    message.parent = object.parent ?? "";
    message.notebookExecutionJob = (object.notebookExecutionJob !== undefined && object.notebookExecutionJob !== null)
      ? NotebookExecutionJob.fromPartial(object.notebookExecutionJob)
      : undefined;
    message.notebookExecutionJobId = object.notebookExecutionJobId ?? "";
    return message;
  },
};

function createBaseCreateNotebookExecutionJobOperationMetadata(): CreateNotebookExecutionJobOperationMetadata {
  return { genericMetadata: undefined, progressMessage: "" };
}

export const CreateNotebookExecutionJobOperationMetadata: MessageFns<CreateNotebookExecutionJobOperationMetadata> = {
  encode(
    message: CreateNotebookExecutionJobOperationMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    if (message.progressMessage !== "") {
      writer.uint32(18).string(message.progressMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNotebookExecutionJobOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNotebookExecutionJobOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.progressMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNotebookExecutionJobOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      progressMessage: isSet(object.progressMessage) ? globalThis.String(object.progressMessage) : "",
    };
  },

  toJSON(message: CreateNotebookExecutionJobOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (message.progressMessage !== "") {
      obj.progressMessage = message.progressMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateNotebookExecutionJobOperationMetadata>): CreateNotebookExecutionJobOperationMetadata {
    return CreateNotebookExecutionJobOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreateNotebookExecutionJobOperationMetadata>,
  ): CreateNotebookExecutionJobOperationMetadata {
    const message = createBaseCreateNotebookExecutionJobOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.progressMessage = object.progressMessage ?? "";
    return message;
  },
};

function createBaseGetNotebookExecutionJobRequest(): GetNotebookExecutionJobRequest {
  return { name: "", view: 0 };
}

export const GetNotebookExecutionJobRequest: MessageFns<GetNotebookExecutionJobRequest> = {
  encode(message: GetNotebookExecutionJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(48).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotebookExecutionJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotebookExecutionJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNotebookExecutionJobRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? notebookExecutionJobViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetNotebookExecutionJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = notebookExecutionJobViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetNotebookExecutionJobRequest>): GetNotebookExecutionJobRequest {
    return GetNotebookExecutionJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNotebookExecutionJobRequest>): GetNotebookExecutionJobRequest {
    const message = createBaseGetNotebookExecutionJobRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListNotebookExecutionJobsRequest(): ListNotebookExecutionJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "", view: 0 };
}

export const ListNotebookExecutionJobsRequest: MessageFns<ListNotebookExecutionJobsRequest> = {
  encode(message: ListNotebookExecutionJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    if (message.view !== 0) {
      writer.uint32(48).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotebookExecutionJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotebookExecutionJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotebookExecutionJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      view: isSet(object.view) ? notebookExecutionJobViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: ListNotebookExecutionJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.view !== 0) {
      obj.view = notebookExecutionJobViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotebookExecutionJobsRequest>): ListNotebookExecutionJobsRequest {
    return ListNotebookExecutionJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotebookExecutionJobsRequest>): ListNotebookExecutionJobsRequest {
    const message = createBaseListNotebookExecutionJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

function createBaseListNotebookExecutionJobsResponse(): ListNotebookExecutionJobsResponse {
  return { notebookExecutionJobs: [], nextPageToken: "" };
}

export const ListNotebookExecutionJobsResponse: MessageFns<ListNotebookExecutionJobsResponse> = {
  encode(message: ListNotebookExecutionJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notebookExecutionJobs) {
      NotebookExecutionJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotebookExecutionJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotebookExecutionJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.notebookExecutionJobs.push(NotebookExecutionJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotebookExecutionJobsResponse {
    return {
      notebookExecutionJobs: globalThis.Array.isArray(object?.notebookExecutionJobs)
        ? object.notebookExecutionJobs.map((e: any) => NotebookExecutionJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNotebookExecutionJobsResponse): unknown {
    const obj: any = {};
    if (message.notebookExecutionJobs?.length) {
      obj.notebookExecutionJobs = message.notebookExecutionJobs.map((e) => NotebookExecutionJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNotebookExecutionJobsResponse>): ListNotebookExecutionJobsResponse {
    return ListNotebookExecutionJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNotebookExecutionJobsResponse>): ListNotebookExecutionJobsResponse {
    const message = createBaseListNotebookExecutionJobsResponse();
    message.notebookExecutionJobs = object.notebookExecutionJobs?.map((e) => NotebookExecutionJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteNotebookExecutionJobRequest(): DeleteNotebookExecutionJobRequest {
  return { name: "" };
}

export const DeleteNotebookExecutionJobRequest: MessageFns<DeleteNotebookExecutionJobRequest> = {
  encode(message: DeleteNotebookExecutionJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNotebookExecutionJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNotebookExecutionJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNotebookExecutionJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteNotebookExecutionJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteNotebookExecutionJobRequest>): DeleteNotebookExecutionJobRequest {
    return DeleteNotebookExecutionJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteNotebookExecutionJobRequest>): DeleteNotebookExecutionJobRequest {
    const message = createBaseDeleteNotebookExecutionJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** The interface for Vertex Notebook service (a.k.a. Colab on Workbench). */
export type NotebookServiceDefinition = typeof NotebookServiceDefinition;
export const NotebookServiceDefinition = {
  name: "NotebookService",
  fullName: "google.cloud.aiplatform.v1.NotebookService",
  methods: {
    /** Creates a NotebookRuntimeTemplate. */
    createNotebookRuntimeTemplate: {
      name: "CreateNotebookRuntimeTemplate",
      requestType: CreateNotebookRuntimeTemplateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              73,
              10,
              23,
              78,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              18,
              46,
              67,
              114,
              101,
              97,
              116,
              101,
              78,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              61,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              44,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              89,
              58,
              25,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a NotebookRuntimeTemplate. */
    getNotebookRuntimeTemplate: {
      name: "GetNotebookRuntimeTemplate",
      requestType: GetNotebookRuntimeTemplateRequest,
      requestStream: false,
      responseType: NotebookRuntimeTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists NotebookRuntimeTemplates in a Location. */
    listNotebookRuntimeTemplates: {
      name: "ListNotebookRuntimeTemplates",
      requestType: ListNotebookRuntimeTemplatesRequest,
      requestStream: false,
      responseType: ListNotebookRuntimeTemplatesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a NotebookRuntimeTemplate. */
    deleteNotebookRuntimeTemplate: {
      name: "DeleteNotebookRuntimeTemplate",
      requestType: DeleteNotebookRuntimeTemplateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              42,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a NotebookRuntimeTemplate. */
    updateNotebookRuntimeTemplate: {
      name: "UpdateNotebookRuntimeTemplate",
      requestType: UpdateNotebookRuntimeTemplateRequest,
      requestStream: false,
      responseType: NotebookRuntimeTemplate,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              37,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              115,
              58,
              25,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              50,
              86,
              47,
              118,
              49,
              47,
              123,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              84,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Assigns a NotebookRuntime to a user for a particular Notebook file. This
     * method will either returns an existing assignment or generates a new one.
     */
    assignNotebookRuntime: {
      name: "AssignNotebookRuntime",
      requestType: AssignNotebookRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              57,
              10,
              15,
              78,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              18,
              38,
              65,
              115,
              115,
              105,
              103,
              110,
              78,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              69,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              44,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              44,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              114,
              117,
              110,
              116,
              105,
              109,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              64,
              58,
              1,
              42,
              34,
              59,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              58,
              97,
              115,
              115,
              105,
              103,
              110,
            ]),
          ],
        },
      },
    },
    /** Gets a NotebookRuntime. */
    getNotebookRuntime: {
      name: "GetNotebookRuntime",
      requestType: GetNotebookRuntimeRequest,
      requestStream: false,
      responseType: NotebookRuntime,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists NotebookRuntimes in a Location. */
    listNotebookRuntimes: {
      name: "ListNotebookRuntimes",
      requestType: ListNotebookRuntimesRequest,
      requestStream: false,
      responseType: ListNotebookRuntimesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a NotebookRuntime. */
    deleteNotebookRuntime: {
      name: "DeleteNotebookRuntime",
      requestType: DeleteNotebookRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              42,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Upgrades a NotebookRuntime. */
    upgradeNotebookRuntime: {
      name: "UpgradeNotebookRuntime",
      requestType: UpgradeNotebookRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              73,
              10,
              30,
              85,
              112,
              103,
              114,
              97,
              100,
              101,
              78,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              39,
              85,
              112,
              103,
              114,
              97,
              100,
              101,
              78,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
              58,
              117,
              112,
              103,
              114,
              97,
              100,
              101,
            ]),
          ],
        },
      },
    },
    /** Starts a NotebookRuntime. */
    startNotebookRuntime: {
      name: "StartNotebookRuntime",
      requestType: StartNotebookRuntimeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              69,
              10,
              28,
              83,
              116,
              97,
              114,
              116,
              78,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              37,
              83,
              116,
              97,
              114,
              116,
              78,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              97,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Creates a NotebookExecutionJob. */
    createNotebookExecutionJob: {
      name: "CreateNotebookExecutionJob",
      requestType: CreateNotebookExecutionJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              67,
              10,
              20,
              78,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              18,
              43,
              67,
              114,
              101,
              97,
              116,
              101,
              78,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              55,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              44,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              22,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              95,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a NotebookExecutionJob. */
    getNotebookExecutionJob: {
      name: "GetNotebookExecutionJob",
      requestType: GetNotebookExecutionJobRequest,
      requestStream: false,
      responseType: NotebookExecutionJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists NotebookExecutionJobs in a Location. */
    listNotebookExecutionJobs: {
      name: "ListNotebookExecutionJobs",
      requestType: ListNotebookExecutionJobsRequest,
      requestStream: false,
      responseType: ListNotebookExecutionJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a NotebookExecutionJob. */
    deleteNotebookExecutionJob: {
      name: "DeleteNotebookExecutionJob",
      requestType: DeleteNotebookExecutionJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              42,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              111,
              116,
              101,
              98,
              111,
              111,
              107,
              69,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface NotebookServiceImplementation<CallContextExt = {}> {
  /** Creates a NotebookRuntimeTemplate. */
  createNotebookRuntimeTemplate(
    request: CreateNotebookRuntimeTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a NotebookRuntimeTemplate. */
  getNotebookRuntimeTemplate(
    request: GetNotebookRuntimeTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NotebookRuntimeTemplate>>;
  /** Lists NotebookRuntimeTemplates in a Location. */
  listNotebookRuntimeTemplates(
    request: ListNotebookRuntimeTemplatesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListNotebookRuntimeTemplatesResponse>>;
  /** Deletes a NotebookRuntimeTemplate. */
  deleteNotebookRuntimeTemplate(
    request: DeleteNotebookRuntimeTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a NotebookRuntimeTemplate. */
  updateNotebookRuntimeTemplate(
    request: UpdateNotebookRuntimeTemplateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NotebookRuntimeTemplate>>;
  /**
   * Assigns a NotebookRuntime to a user for a particular Notebook file. This
   * method will either returns an existing assignment or generates a new one.
   */
  assignNotebookRuntime(
    request: AssignNotebookRuntimeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a NotebookRuntime. */
  getNotebookRuntime(
    request: GetNotebookRuntimeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NotebookRuntime>>;
  /** Lists NotebookRuntimes in a Location. */
  listNotebookRuntimes(
    request: ListNotebookRuntimesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListNotebookRuntimesResponse>>;
  /** Deletes a NotebookRuntime. */
  deleteNotebookRuntime(
    request: DeleteNotebookRuntimeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Upgrades a NotebookRuntime. */
  upgradeNotebookRuntime(
    request: UpgradeNotebookRuntimeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Starts a NotebookRuntime. */
  startNotebookRuntime(
    request: StartNotebookRuntimeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a NotebookExecutionJob. */
  createNotebookExecutionJob(
    request: CreateNotebookExecutionJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a NotebookExecutionJob. */
  getNotebookExecutionJob(
    request: GetNotebookExecutionJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NotebookExecutionJob>>;
  /** Lists NotebookExecutionJobs in a Location. */
  listNotebookExecutionJobs(
    request: ListNotebookExecutionJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListNotebookExecutionJobsResponse>>;
  /** Deletes a NotebookExecutionJob. */
  deleteNotebookExecutionJob(
    request: DeleteNotebookExecutionJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface NotebookServiceClient<CallOptionsExt = {}> {
  /** Creates a NotebookRuntimeTemplate. */
  createNotebookRuntimeTemplate(
    request: DeepPartial<CreateNotebookRuntimeTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a NotebookRuntimeTemplate. */
  getNotebookRuntimeTemplate(
    request: DeepPartial<GetNotebookRuntimeTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NotebookRuntimeTemplate>;
  /** Lists NotebookRuntimeTemplates in a Location. */
  listNotebookRuntimeTemplates(
    request: DeepPartial<ListNotebookRuntimeTemplatesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListNotebookRuntimeTemplatesResponse>;
  /** Deletes a NotebookRuntimeTemplate. */
  deleteNotebookRuntimeTemplate(
    request: DeepPartial<DeleteNotebookRuntimeTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a NotebookRuntimeTemplate. */
  updateNotebookRuntimeTemplate(
    request: DeepPartial<UpdateNotebookRuntimeTemplateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NotebookRuntimeTemplate>;
  /**
   * Assigns a NotebookRuntime to a user for a particular Notebook file. This
   * method will either returns an existing assignment or generates a new one.
   */
  assignNotebookRuntime(
    request: DeepPartial<AssignNotebookRuntimeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a NotebookRuntime. */
  getNotebookRuntime(
    request: DeepPartial<GetNotebookRuntimeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NotebookRuntime>;
  /** Lists NotebookRuntimes in a Location. */
  listNotebookRuntimes(
    request: DeepPartial<ListNotebookRuntimesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListNotebookRuntimesResponse>;
  /** Deletes a NotebookRuntime. */
  deleteNotebookRuntime(
    request: DeepPartial<DeleteNotebookRuntimeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Upgrades a NotebookRuntime. */
  upgradeNotebookRuntime(
    request: DeepPartial<UpgradeNotebookRuntimeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Starts a NotebookRuntime. */
  startNotebookRuntime(
    request: DeepPartial<StartNotebookRuntimeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a NotebookExecutionJob. */
  createNotebookExecutionJob(
    request: DeepPartial<CreateNotebookExecutionJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a NotebookExecutionJob. */
  getNotebookExecutionJob(
    request: DeepPartial<GetNotebookExecutionJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NotebookExecutionJob>;
  /** Lists NotebookExecutionJobs in a Location. */
  listNotebookExecutionJobs(
    request: DeepPartial<ListNotebookExecutionJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListNotebookExecutionJobsResponse>;
  /** Deletes a NotebookExecutionJob. */
  deleteNotebookExecutionJob(
    request: DeepPartial<DeleteNotebookExecutionJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
