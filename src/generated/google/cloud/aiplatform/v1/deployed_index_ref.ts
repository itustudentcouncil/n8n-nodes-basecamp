// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/deployed_index_ref.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1";

/** Points to a DeployedIndex. */
export interface DeployedIndexRef {
  /** Immutable. A resource name of the IndexEndpoint. */
  indexEndpoint: string;
  /** Immutable. The ID of the DeployedIndex in the above IndexEndpoint. */
  deployedIndexId: string;
  /** Output only. The display name of the DeployedIndex. */
  displayName: string;
}

function createBaseDeployedIndexRef(): DeployedIndexRef {
  return { indexEndpoint: "", deployedIndexId: "", displayName: "" };
}

export const DeployedIndexRef: MessageFns<DeployedIndexRef> = {
  encode(message: DeployedIndexRef, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.indexEndpoint !== "") {
      writer.uint32(10).string(message.indexEndpoint);
    }
    if (message.deployedIndexId !== "") {
      writer.uint32(18).string(message.deployedIndexId);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployedIndexRef {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployedIndexRef();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.indexEndpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedIndexId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployedIndexRef {
    return {
      indexEndpoint: isSet(object.indexEndpoint) ? globalThis.String(object.indexEndpoint) : "",
      deployedIndexId: isSet(object.deployedIndexId) ? globalThis.String(object.deployedIndexId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: DeployedIndexRef): unknown {
    const obj: any = {};
    if (message.indexEndpoint !== "") {
      obj.indexEndpoint = message.indexEndpoint;
    }
    if (message.deployedIndexId !== "") {
      obj.deployedIndexId = message.deployedIndexId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<DeployedIndexRef>): DeployedIndexRef {
    return DeployedIndexRef.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployedIndexRef>): DeployedIndexRef {
    const message = createBaseDeployedIndexRef();
    message.indexEndpoint = object.indexEndpoint ?? "";
    message.deployedIndexId = object.deployedIndexId ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
