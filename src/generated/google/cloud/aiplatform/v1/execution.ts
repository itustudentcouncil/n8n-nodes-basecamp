// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/execution.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/** Instance of a general execution. */
export interface Execution {
  /** Output only. The resource name of the Execution. */
  name: string;
  /**
   * User provided display name of the Execution.
   * May be up to 128 Unicode characters.
   */
  displayName: string;
  /**
   * The state of this Execution. This is a property of the Execution, and does
   * not imply or capture any ongoing process. This property is managed by
   * clients (such as Vertex AI Pipelines) and the system does not prescribe
   * or check the validity of state transitions.
   */
  state: Execution_State;
  /**
   * An eTag used to perform consistent read-modify-write updates. If not set, a
   * blind "overwrite" update happens.
   */
  etag: string;
  /**
   * The labels with user-defined metadata to organize your Executions.
   *
   * Label keys and values can be no longer than 64 characters
   * (Unicode codepoints), can only contain lowercase letters, numeric
   * characters, underscores and dashes. International characters are allowed.
   * No more than 64 user labels can be associated with one Execution (System
   * labels are excluded).
   */
  labels: { [key: string]: string };
  /** Output only. Timestamp when this Execution was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when this Execution was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * The title of the schema describing the metadata.
   *
   * Schema title and version is expected to be registered in earlier Create
   * Schema calls. And both are used together as unique identifiers to identify
   * schemas within the local metadata store.
   */
  schemaTitle: string;
  /**
   * The version of the schema in `schema_title` to use.
   *
   * Schema title and version is expected to be registered in earlier Create
   * Schema calls. And both are used together as unique identifiers to identify
   * schemas within the local metadata store.
   */
  schemaVersion: string;
  /**
   * Properties of the Execution.
   * Top level metadata keys' heading and trailing spaces will be trimmed.
   * The size of this field should not exceed 200KB.
   */
  metadata:
    | { [key: string]: any }
    | undefined;
  /** Description of the Execution */
  description: string;
}

/** Describes the state of the Execution. */
export enum Execution_State {
  /** STATE_UNSPECIFIED - Unspecified Execution state */
  STATE_UNSPECIFIED = 0,
  /** NEW - The Execution is new */
  NEW = 1,
  /** RUNNING - The Execution is running */
  RUNNING = 2,
  /** COMPLETE - The Execution has finished running */
  COMPLETE = 3,
  /** FAILED - The Execution has failed */
  FAILED = 4,
  /** CACHED - The Execution completed through Cache hit. */
  CACHED = 5,
  /** CANCELLED - The Execution was cancelled. */
  CANCELLED = 6,
  UNRECOGNIZED = -1,
}

export function execution_StateFromJSON(object: any): Execution_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Execution_State.STATE_UNSPECIFIED;
    case 1:
    case "NEW":
      return Execution_State.NEW;
    case 2:
    case "RUNNING":
      return Execution_State.RUNNING;
    case 3:
    case "COMPLETE":
      return Execution_State.COMPLETE;
    case 4:
    case "FAILED":
      return Execution_State.FAILED;
    case 5:
    case "CACHED":
      return Execution_State.CACHED;
    case 6:
    case "CANCELLED":
      return Execution_State.CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Execution_State.UNRECOGNIZED;
  }
}

export function execution_StateToJSON(object: Execution_State): string {
  switch (object) {
    case Execution_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Execution_State.NEW:
      return "NEW";
    case Execution_State.RUNNING:
      return "RUNNING";
    case Execution_State.COMPLETE:
      return "COMPLETE";
    case Execution_State.FAILED:
      return "FAILED";
    case Execution_State.CACHED:
      return "CACHED";
    case Execution_State.CANCELLED:
      return "CANCELLED";
    case Execution_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Execution_LabelsEntry {
  key: string;
  value: string;
}

function createBaseExecution(): Execution {
  return {
    name: "",
    displayName: "",
    state: 0,
    etag: "",
    labels: {},
    createTime: undefined,
    updateTime: undefined,
    schemaTitle: "",
    schemaVersion: "",
    metadata: undefined,
    description: "",
  };
}

export const Execution: MessageFns<Execution> = {
  encode(message: Execution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.state !== 0) {
      writer.uint32(48).int32(message.state);
    }
    if (message.etag !== "") {
      writer.uint32(74).string(message.etag);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Execution_LabelsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(90).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(98).fork()).join();
    }
    if (message.schemaTitle !== "") {
      writer.uint32(106).string(message.schemaTitle);
    }
    if (message.schemaVersion !== "") {
      writer.uint32(114).string(message.schemaVersion);
    }
    if (message.metadata !== undefined) {
      Struct.encode(Struct.wrap(message.metadata), writer.uint32(122).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(130).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          const entry10 = Execution_LabelsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.labels[entry10.key] = entry10.value;
          }
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.schemaTitle = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      state: isSet(object.state) ? execution_StateFromJSON(object.state) : 0,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      schemaTitle: isSet(object.schemaTitle) ? globalThis.String(object.schemaTitle) : "",
      schemaVersion: isSet(object.schemaVersion) ? globalThis.String(object.schemaVersion) : "",
      metadata: isObject(object.metadata) ? object.metadata : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: Execution): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.state !== 0) {
      obj.state = execution_StateToJSON(message.state);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.schemaTitle !== "") {
      obj.schemaTitle = message.schemaTitle;
    }
    if (message.schemaVersion !== "") {
      obj.schemaVersion = message.schemaVersion;
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<Execution>): Execution {
    return Execution.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution>): Execution {
    const message = createBaseExecution();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.state = object.state ?? 0;
    message.etag = object.etag ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.schemaTitle = object.schemaTitle ?? "";
    message.schemaVersion = object.schemaVersion ?? "";
    message.metadata = object.metadata ?? undefined;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseExecution_LabelsEntry(): Execution_LabelsEntry {
  return { key: "", value: "" };
}

export const Execution_LabelsEntry: MessageFns<Execution_LabelsEntry> = {
  encode(message: Execution_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Execution_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecution_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Execution_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Execution_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Execution_LabelsEntry>): Execution_LabelsEntry {
    return Execution_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Execution_LabelsEntry>): Execution_LabelsEntry {
    const message = createBaseExecution_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
