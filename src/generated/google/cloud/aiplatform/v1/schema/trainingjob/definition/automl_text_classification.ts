// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/schema/trainingjob/definition/automl_text_classification.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1.schema.trainingjob.definition";

/** A TrainingJob that trains and uploads an AutoML Text Classification Model. */
export interface AutoMlTextClassification {
  /** The input parameters of this TrainingJob. */
  inputs: AutoMlTextClassificationInputs | undefined;
}

export interface AutoMlTextClassificationInputs {
  multiLabel: boolean;
}

function createBaseAutoMlTextClassification(): AutoMlTextClassification {
  return { inputs: undefined };
}

export const AutoMlTextClassification: MessageFns<AutoMlTextClassification> = {
  encode(message: AutoMlTextClassification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputs !== undefined) {
      AutoMlTextClassificationInputs.encode(message.inputs, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoMlTextClassification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoMlTextClassification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputs = AutoMlTextClassificationInputs.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoMlTextClassification {
    return { inputs: isSet(object.inputs) ? AutoMlTextClassificationInputs.fromJSON(object.inputs) : undefined };
  },

  toJSON(message: AutoMlTextClassification): unknown {
    const obj: any = {};
    if (message.inputs !== undefined) {
      obj.inputs = AutoMlTextClassificationInputs.toJSON(message.inputs);
    }
    return obj;
  },

  create(base?: DeepPartial<AutoMlTextClassification>): AutoMlTextClassification {
    return AutoMlTextClassification.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutoMlTextClassification>): AutoMlTextClassification {
    const message = createBaseAutoMlTextClassification();
    message.inputs = (object.inputs !== undefined && object.inputs !== null)
      ? AutoMlTextClassificationInputs.fromPartial(object.inputs)
      : undefined;
    return message;
  },
};

function createBaseAutoMlTextClassificationInputs(): AutoMlTextClassificationInputs {
  return { multiLabel: false };
}

export const AutoMlTextClassificationInputs: MessageFns<AutoMlTextClassificationInputs> = {
  encode(message: AutoMlTextClassificationInputs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.multiLabel !== false) {
      writer.uint32(8).bool(message.multiLabel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoMlTextClassificationInputs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoMlTextClassificationInputs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.multiLabel = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoMlTextClassificationInputs {
    return { multiLabel: isSet(object.multiLabel) ? globalThis.Boolean(object.multiLabel) : false };
  },

  toJSON(message: AutoMlTextClassificationInputs): unknown {
    const obj: any = {};
    if (message.multiLabel !== false) {
      obj.multiLabel = message.multiLabel;
    }
    return obj;
  },

  create(base?: DeepPartial<AutoMlTextClassificationInputs>): AutoMlTextClassificationInputs {
    return AutoMlTextClassificationInputs.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutoMlTextClassificationInputs>): AutoMlTextClassificationInputs {
    const message = createBaseAutoMlTextClassificationInputs();
    message.multiLabel = object.multiLabel ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
