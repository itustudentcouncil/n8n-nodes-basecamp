// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/schema/trainingjob/definition/automl_text_sentiment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1.schema.trainingjob.definition";

/** A TrainingJob that trains and uploads an AutoML Text Sentiment Model. */
export interface AutoMlTextSentiment {
  /** The input parameters of this TrainingJob. */
  inputs: AutoMlTextSentimentInputs | undefined;
}

export interface AutoMlTextSentimentInputs {
  /**
   * A sentiment is expressed as an integer ordinal, where higher value
   * means a more positive sentiment. The range of sentiments that will be used
   * is between 0 and sentimentMax (inclusive on both ends), and all the values
   * in the range must be represented in the dataset before a model can be
   * created.
   * Only the Annotations with this sentimentMax will be used for training.
   * sentimentMax value must be between 1 and 10 (inclusive).
   */
  sentimentMax: number;
}

function createBaseAutoMlTextSentiment(): AutoMlTextSentiment {
  return { inputs: undefined };
}

export const AutoMlTextSentiment: MessageFns<AutoMlTextSentiment> = {
  encode(message: AutoMlTextSentiment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inputs !== undefined) {
      AutoMlTextSentimentInputs.encode(message.inputs, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoMlTextSentiment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoMlTextSentiment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.inputs = AutoMlTextSentimentInputs.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoMlTextSentiment {
    return { inputs: isSet(object.inputs) ? AutoMlTextSentimentInputs.fromJSON(object.inputs) : undefined };
  },

  toJSON(message: AutoMlTextSentiment): unknown {
    const obj: any = {};
    if (message.inputs !== undefined) {
      obj.inputs = AutoMlTextSentimentInputs.toJSON(message.inputs);
    }
    return obj;
  },

  create(base?: DeepPartial<AutoMlTextSentiment>): AutoMlTextSentiment {
    return AutoMlTextSentiment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutoMlTextSentiment>): AutoMlTextSentiment {
    const message = createBaseAutoMlTextSentiment();
    message.inputs = (object.inputs !== undefined && object.inputs !== null)
      ? AutoMlTextSentimentInputs.fromPartial(object.inputs)
      : undefined;
    return message;
  },
};

function createBaseAutoMlTextSentimentInputs(): AutoMlTextSentimentInputs {
  return { sentimentMax: 0 };
}

export const AutoMlTextSentimentInputs: MessageFns<AutoMlTextSentimentInputs> = {
  encode(message: AutoMlTextSentimentInputs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sentimentMax !== 0) {
      writer.uint32(8).int32(message.sentimentMax);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoMlTextSentimentInputs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoMlTextSentimentInputs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sentimentMax = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoMlTextSentimentInputs {
    return { sentimentMax: isSet(object.sentimentMax) ? globalThis.Number(object.sentimentMax) : 0 };
  },

  toJSON(message: AutoMlTextSentimentInputs): unknown {
    const obj: any = {};
    if (message.sentimentMax !== 0) {
      obj.sentimentMax = Math.round(message.sentimentMax);
    }
    return obj;
  },

  create(base?: DeepPartial<AutoMlTextSentimentInputs>): AutoMlTextSentimentInputs {
    return AutoMlTextSentimentInputs.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutoMlTextSentimentInputs>): AutoMlTextSentimentInputs {
    const message = createBaseAutoMlTextSentimentInputs();
    message.sentimentMax = object.sentimentMax ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
