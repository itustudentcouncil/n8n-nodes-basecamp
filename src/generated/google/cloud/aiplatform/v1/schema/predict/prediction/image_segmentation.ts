// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/schema/predict/prediction/image_segmentation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1.schema.predict.prediction";

/** Prediction output format for Image Segmentation. */
export interface ImageSegmentationPredictionResult {
  /**
   * A PNG image where each pixel in the mask represents the category in which
   * the pixel in the original image was predicted to belong to. The size of
   * this image will be the same as the original image. The mapping between the
   * AnntoationSpec and the color can be found in model's metadata. The model
   * will choose the most likely category and if none of the categories reach
   * the confidence threshold, the pixel will be marked as background.
   */
  categoryMask: string;
  /**
   * A one channel image which is encoded as an 8bit lossless PNG. The size of
   * the image will be the same as the original image. For a specific pixel,
   * darker color means less confidence in correctness of the cateogry in the
   * categoryMask for the corresponding pixel. Black means no confidence and
   * white means complete confidence.
   */
  confidenceMask: string;
}

function createBaseImageSegmentationPredictionResult(): ImageSegmentationPredictionResult {
  return { categoryMask: "", confidenceMask: "" };
}

export const ImageSegmentationPredictionResult: MessageFns<ImageSegmentationPredictionResult> = {
  encode(message: ImageSegmentationPredictionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.categoryMask !== "") {
      writer.uint32(10).string(message.categoryMask);
    }
    if (message.confidenceMask !== "") {
      writer.uint32(18).string(message.confidenceMask);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageSegmentationPredictionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageSegmentationPredictionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.categoryMask = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.confidenceMask = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageSegmentationPredictionResult {
    return {
      categoryMask: isSet(object.categoryMask) ? globalThis.String(object.categoryMask) : "",
      confidenceMask: isSet(object.confidenceMask) ? globalThis.String(object.confidenceMask) : "",
    };
  },

  toJSON(message: ImageSegmentationPredictionResult): unknown {
    const obj: any = {};
    if (message.categoryMask !== "") {
      obj.categoryMask = message.categoryMask;
    }
    if (message.confidenceMask !== "") {
      obj.confidenceMask = message.confidenceMask;
    }
    return obj;
  },

  create(base?: DeepPartial<ImageSegmentationPredictionResult>): ImageSegmentationPredictionResult {
    return ImageSegmentationPredictionResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageSegmentationPredictionResult>): ImageSegmentationPredictionResult {
    const message = createBaseImageSegmentationPredictionResult();
    message.categoryMask = object.categoryMask ?? "";
    message.confidenceMask = object.confidenceMask ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
