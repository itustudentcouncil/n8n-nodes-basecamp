// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/migration_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Status } from "../../../rpc/status.js";
import { MigratableResource } from "./migratable_resource.js";
import { GenericOperationMetadata } from "./operation.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Request message for
 * [MigrationService.SearchMigratableResources][google.cloud.aiplatform.v1.MigrationService.SearchMigratableResources].
 */
export interface SearchMigratableResourcesRequest {
  /**
   * Required. The location that the migratable resources should be searched
   * from. It's the Vertex AI location that the resources can be migrated to,
   * not the resources' original location. Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * The standard page size.
   * The default and maximum value is 100.
   */
  pageSize: number;
  /** The standard page token. */
  pageToken: string;
  /**
   * A filter for your search. You can use the following types of filters:
   *
   * *   Resource type filters. The following strings filter for a specific type
   *     of [MigratableResource][google.cloud.aiplatform.v1.MigratableResource]:
   *     *   `ml_engine_model_version:*`
   *     *   `automl_model:*`
   *     *   `automl_dataset:*`
   *     *   `data_labeling_dataset:*`
   * *   "Migrated or not" filters. The following strings filter for resources
   *     that either have or have not already been migrated:
   *     *   `last_migrate_time:*` filters for migrated resources.
   *     *   `NOT last_migrate_time:*` filters for not yet migrated resources.
   */
  filter: string;
}

/**
 * Response message for
 * [MigrationService.SearchMigratableResources][google.cloud.aiplatform.v1.MigrationService.SearchMigratableResources].
 */
export interface SearchMigratableResourcesResponse {
  /**
   * All migratable resources that can be migrated to the
   * location specified in the request.
   */
  migratableResources: MigratableResource[];
  /**
   * The standard next-page token.
   * The migratable_resources may not fill page_size in
   * SearchMigratableResourcesRequest even when there are subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [MigrationService.BatchMigrateResources][google.cloud.aiplatform.v1.MigrationService.BatchMigrateResources].
 */
export interface BatchMigrateResourcesRequest {
  /**
   * Required. The location of the migrated resource will live in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Required. The request messages specifying the resources to migrate.
   * They must be in the same location as the destination.
   * Up to 50 resources can be migrated in one batch.
   */
  migrateResourceRequests: MigrateResourceRequest[];
}

/**
 * Config of migrating one resource from automl.googleapis.com,
 * datalabeling.googleapis.com and ml.googleapis.com to Vertex AI.
 */
export interface MigrateResourceRequest {
  /** Config for migrating Version in ml.googleapis.com to Vertex AI's Model. */
  migrateMlEngineModelVersionConfig?:
    | MigrateResourceRequest_MigrateMlEngineModelVersionConfig
    | undefined;
  /**
   * Config for migrating Model in automl.googleapis.com to Vertex AI's
   * Model.
   */
  migrateAutomlModelConfig?:
    | MigrateResourceRequest_MigrateAutomlModelConfig
    | undefined;
  /**
   * Config for migrating Dataset in automl.googleapis.com to Vertex AI's
   * Dataset.
   */
  migrateAutomlDatasetConfig?:
    | MigrateResourceRequest_MigrateAutomlDatasetConfig
    | undefined;
  /**
   * Config for migrating Dataset in datalabeling.googleapis.com to
   * Vertex AI's Dataset.
   */
  migrateDataLabelingDatasetConfig?: MigrateResourceRequest_MigrateDataLabelingDatasetConfig | undefined;
}

/** Config for migrating version in ml.googleapis.com to Vertex AI's Model. */
export interface MigrateResourceRequest_MigrateMlEngineModelVersionConfig {
  /**
   * Required. The ml.googleapis.com endpoint that this model version should
   * be migrated from. Example values:
   *
   * * ml.googleapis.com
   *
   * * us-centrall-ml.googleapis.com
   *
   * * europe-west4-ml.googleapis.com
   *
   * * asia-east1-ml.googleapis.com
   */
  endpoint: string;
  /**
   * Required. Full resource name of ml engine model version.
   * Format: `projects/{project}/models/{model}/versions/{version}`.
   */
  modelVersion: string;
  /**
   * Required. Display name of the model in Vertex AI.
   * System will pick a display name if unspecified.
   */
  modelDisplayName: string;
}

/** Config for migrating Model in automl.googleapis.com to Vertex AI's Model. */
export interface MigrateResourceRequest_MigrateAutomlModelConfig {
  /**
   * Required. Full resource name of automl Model.
   * Format:
   * `projects/{project}/locations/{location}/models/{model}`.
   */
  model: string;
  /**
   * Optional. Display name of the model in Vertex AI.
   * System will pick a display name if unspecified.
   */
  modelDisplayName: string;
}

/**
 * Config for migrating Dataset in automl.googleapis.com to Vertex AI's
 * Dataset.
 */
export interface MigrateResourceRequest_MigrateAutomlDatasetConfig {
  /**
   * Required. Full resource name of automl Dataset.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}`.
   */
  dataset: string;
  /**
   * Required. Display name of the Dataset in Vertex AI.
   * System will pick a display name if unspecified.
   */
  datasetDisplayName: string;
}

/**
 * Config for migrating Dataset in datalabeling.googleapis.com to Vertex
 * AI's Dataset.
 */
export interface MigrateResourceRequest_MigrateDataLabelingDatasetConfig {
  /**
   * Required. Full resource name of data labeling Dataset.
   * Format:
   * `projects/{project}/datasets/{dataset}`.
   */
  dataset: string;
  /**
   * Optional. Display name of the Dataset in Vertex AI.
   * System will pick a display name if unspecified.
   */
  datasetDisplayName: string;
  /**
   * Optional. Configs for migrating AnnotatedDataset in
   * datalabeling.googleapis.com to Vertex AI's SavedQuery. The specified
   * AnnotatedDatasets have to belong to the datalabeling Dataset.
   */
  migrateDataLabelingAnnotatedDatasetConfigs:
    MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig[];
}

/**
 * Config for migrating AnnotatedDataset in datalabeling.googleapis.com to
 * Vertex AI's SavedQuery.
 */
export interface MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig {
  /**
   * Required. Full resource name of data labeling AnnotatedDataset.
   * Format:
   * `projects/{project}/datasets/{dataset}/annotatedDatasets/{annotated_dataset}`.
   */
  annotatedDataset: string;
}

/**
 * Response message for
 * [MigrationService.BatchMigrateResources][google.cloud.aiplatform.v1.MigrationService.BatchMigrateResources].
 */
export interface BatchMigrateResourcesResponse {
  /** Successfully migrated resources. */
  migrateResourceResponses: MigrateResourceResponse[];
}

/** Describes a successfully migrated resource. */
export interface MigrateResourceResponse {
  /** Migrated Dataset's resource name. */
  dataset?:
    | string
    | undefined;
  /** Migrated Model's resource name. */
  model?:
    | string
    | undefined;
  /**
   * Before migration, the identifier in ml.googleapis.com,
   * automl.googleapis.com or datalabeling.googleapis.com.
   */
  migratableResource: MigratableResource | undefined;
}

/**
 * Runtime operation information for
 * [MigrationService.BatchMigrateResources][google.cloud.aiplatform.v1.MigrationService.BatchMigrateResources].
 */
export interface BatchMigrateResourcesOperationMetadata {
  /** The common part of the operation metadata. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /** Partial results that reflect the latest migration operation progress. */
  partialResults: BatchMigrateResourcesOperationMetadata_PartialResult[];
}

/**
 * Represents a partial result in batch migration operation for one
 * [MigrateResourceRequest][google.cloud.aiplatform.v1.MigrateResourceRequest].
 */
export interface BatchMigrateResourcesOperationMetadata_PartialResult {
  /** The error result of the migration request in case of failure. */
  error?:
    | Status
    | undefined;
  /** Migrated model resource name. */
  model?:
    | string
    | undefined;
  /** Migrated dataset resource name. */
  dataset?:
    | string
    | undefined;
  /**
   * It's the same as the value in
   * [MigrateResourceRequest.migrate_resource_requests][].
   */
  request: MigrateResourceRequest | undefined;
}

function createBaseSearchMigratableResourcesRequest(): SearchMigratableResourcesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const SearchMigratableResourcesRequest: MessageFns<SearchMigratableResourcesRequest> = {
  encode(message: SearchMigratableResourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchMigratableResourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchMigratableResourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchMigratableResourcesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: SearchMigratableResourcesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchMigratableResourcesRequest>): SearchMigratableResourcesRequest {
    return SearchMigratableResourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchMigratableResourcesRequest>): SearchMigratableResourcesRequest {
    const message = createBaseSearchMigratableResourcesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseSearchMigratableResourcesResponse(): SearchMigratableResourcesResponse {
  return { migratableResources: [], nextPageToken: "" };
}

export const SearchMigratableResourcesResponse: MessageFns<SearchMigratableResourcesResponse> = {
  encode(message: SearchMigratableResourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.migratableResources) {
      MigratableResource.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchMigratableResourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchMigratableResourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.migratableResources.push(MigratableResource.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchMigratableResourcesResponse {
    return {
      migratableResources: globalThis.Array.isArray(object?.migratableResources)
        ? object.migratableResources.map((e: any) => MigratableResource.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchMigratableResourcesResponse): unknown {
    const obj: any = {};
    if (message.migratableResources?.length) {
      obj.migratableResources = message.migratableResources.map((e) => MigratableResource.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchMigratableResourcesResponse>): SearchMigratableResourcesResponse {
    return SearchMigratableResourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchMigratableResourcesResponse>): SearchMigratableResourcesResponse {
    const message = createBaseSearchMigratableResourcesResponse();
    message.migratableResources = object.migratableResources?.map((e) => MigratableResource.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseBatchMigrateResourcesRequest(): BatchMigrateResourcesRequest {
  return { parent: "", migrateResourceRequests: [] };
}

export const BatchMigrateResourcesRequest: MessageFns<BatchMigrateResourcesRequest> = {
  encode(message: BatchMigrateResourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.migrateResourceRequests) {
      MigrateResourceRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchMigrateResourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchMigrateResourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.migrateResourceRequests.push(MigrateResourceRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchMigrateResourcesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      migrateResourceRequests: globalThis.Array.isArray(object?.migrateResourceRequests)
        ? object.migrateResourceRequests.map((e: any) => MigrateResourceRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchMigrateResourcesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.migrateResourceRequests?.length) {
      obj.migrateResourceRequests = message.migrateResourceRequests.map((e) => MigrateResourceRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchMigrateResourcesRequest>): BatchMigrateResourcesRequest {
    return BatchMigrateResourcesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchMigrateResourcesRequest>): BatchMigrateResourcesRequest {
    const message = createBaseBatchMigrateResourcesRequest();
    message.parent = object.parent ?? "";
    message.migrateResourceRequests =
      object.migrateResourceRequests?.map((e) => MigrateResourceRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMigrateResourceRequest(): MigrateResourceRequest {
  return {
    migrateMlEngineModelVersionConfig: undefined,
    migrateAutomlModelConfig: undefined,
    migrateAutomlDatasetConfig: undefined,
    migrateDataLabelingDatasetConfig: undefined,
  };
}

export const MigrateResourceRequest: MessageFns<MigrateResourceRequest> = {
  encode(message: MigrateResourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.migrateMlEngineModelVersionConfig !== undefined) {
      MigrateResourceRequest_MigrateMlEngineModelVersionConfig.encode(
        message.migrateMlEngineModelVersionConfig,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.migrateAutomlModelConfig !== undefined) {
      MigrateResourceRequest_MigrateAutomlModelConfig.encode(message.migrateAutomlModelConfig, writer.uint32(18).fork())
        .join();
    }
    if (message.migrateAutomlDatasetConfig !== undefined) {
      MigrateResourceRequest_MigrateAutomlDatasetConfig.encode(
        message.migrateAutomlDatasetConfig,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.migrateDataLabelingDatasetConfig !== undefined) {
      MigrateResourceRequest_MigrateDataLabelingDatasetConfig.encode(
        message.migrateDataLabelingDatasetConfig,
        writer.uint32(34).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrateResourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateResourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.migrateMlEngineModelVersionConfig = MigrateResourceRequest_MigrateMlEngineModelVersionConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.migrateAutomlModelConfig = MigrateResourceRequest_MigrateAutomlModelConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.migrateAutomlDatasetConfig = MigrateResourceRequest_MigrateAutomlDatasetConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.migrateDataLabelingDatasetConfig = MigrateResourceRequest_MigrateDataLabelingDatasetConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateResourceRequest {
    return {
      migrateMlEngineModelVersionConfig: isSet(object.migrateMlEngineModelVersionConfig)
        ? MigrateResourceRequest_MigrateMlEngineModelVersionConfig.fromJSON(object.migrateMlEngineModelVersionConfig)
        : undefined,
      migrateAutomlModelConfig: isSet(object.migrateAutomlModelConfig)
        ? MigrateResourceRequest_MigrateAutomlModelConfig.fromJSON(object.migrateAutomlModelConfig)
        : undefined,
      migrateAutomlDatasetConfig: isSet(object.migrateAutomlDatasetConfig)
        ? MigrateResourceRequest_MigrateAutomlDatasetConfig.fromJSON(object.migrateAutomlDatasetConfig)
        : undefined,
      migrateDataLabelingDatasetConfig: isSet(object.migrateDataLabelingDatasetConfig)
        ? MigrateResourceRequest_MigrateDataLabelingDatasetConfig.fromJSON(object.migrateDataLabelingDatasetConfig)
        : undefined,
    };
  },

  toJSON(message: MigrateResourceRequest): unknown {
    const obj: any = {};
    if (message.migrateMlEngineModelVersionConfig !== undefined) {
      obj.migrateMlEngineModelVersionConfig = MigrateResourceRequest_MigrateMlEngineModelVersionConfig.toJSON(
        message.migrateMlEngineModelVersionConfig,
      );
    }
    if (message.migrateAutomlModelConfig !== undefined) {
      obj.migrateAutomlModelConfig = MigrateResourceRequest_MigrateAutomlModelConfig.toJSON(
        message.migrateAutomlModelConfig,
      );
    }
    if (message.migrateAutomlDatasetConfig !== undefined) {
      obj.migrateAutomlDatasetConfig = MigrateResourceRequest_MigrateAutomlDatasetConfig.toJSON(
        message.migrateAutomlDatasetConfig,
      );
    }
    if (message.migrateDataLabelingDatasetConfig !== undefined) {
      obj.migrateDataLabelingDatasetConfig = MigrateResourceRequest_MigrateDataLabelingDatasetConfig.toJSON(
        message.migrateDataLabelingDatasetConfig,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<MigrateResourceRequest>): MigrateResourceRequest {
    return MigrateResourceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigrateResourceRequest>): MigrateResourceRequest {
    const message = createBaseMigrateResourceRequest();
    message.migrateMlEngineModelVersionConfig =
      (object.migrateMlEngineModelVersionConfig !== undefined && object.migrateMlEngineModelVersionConfig !== null)
        ? MigrateResourceRequest_MigrateMlEngineModelVersionConfig.fromPartial(object.migrateMlEngineModelVersionConfig)
        : undefined;
    message.migrateAutomlModelConfig =
      (object.migrateAutomlModelConfig !== undefined && object.migrateAutomlModelConfig !== null)
        ? MigrateResourceRequest_MigrateAutomlModelConfig.fromPartial(object.migrateAutomlModelConfig)
        : undefined;
    message.migrateAutomlDatasetConfig =
      (object.migrateAutomlDatasetConfig !== undefined && object.migrateAutomlDatasetConfig !== null)
        ? MigrateResourceRequest_MigrateAutomlDatasetConfig.fromPartial(object.migrateAutomlDatasetConfig)
        : undefined;
    message.migrateDataLabelingDatasetConfig =
      (object.migrateDataLabelingDatasetConfig !== undefined && object.migrateDataLabelingDatasetConfig !== null)
        ? MigrateResourceRequest_MigrateDataLabelingDatasetConfig.fromPartial(object.migrateDataLabelingDatasetConfig)
        : undefined;
    return message;
  },
};

function createBaseMigrateResourceRequest_MigrateMlEngineModelVersionConfig(): MigrateResourceRequest_MigrateMlEngineModelVersionConfig {
  return { endpoint: "", modelVersion: "", modelDisplayName: "" };
}

export const MigrateResourceRequest_MigrateMlEngineModelVersionConfig: MessageFns<
  MigrateResourceRequest_MigrateMlEngineModelVersionConfig
> = {
  encode(
    message: MigrateResourceRequest_MigrateMlEngineModelVersionConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.modelVersion !== "") {
      writer.uint32(18).string(message.modelVersion);
    }
    if (message.modelDisplayName !== "") {
      writer.uint32(26).string(message.modelDisplayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrateResourceRequest_MigrateMlEngineModelVersionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateResourceRequest_MigrateMlEngineModelVersionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelVersion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modelDisplayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateResourceRequest_MigrateMlEngineModelVersionConfig {
    return {
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      modelVersion: isSet(object.modelVersion) ? globalThis.String(object.modelVersion) : "",
      modelDisplayName: isSet(object.modelDisplayName) ? globalThis.String(object.modelDisplayName) : "",
    };
  },

  toJSON(message: MigrateResourceRequest_MigrateMlEngineModelVersionConfig): unknown {
    const obj: any = {};
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.modelVersion !== "") {
      obj.modelVersion = message.modelVersion;
    }
    if (message.modelDisplayName !== "") {
      obj.modelDisplayName = message.modelDisplayName;
    }
    return obj;
  },

  create(
    base?: DeepPartial<MigrateResourceRequest_MigrateMlEngineModelVersionConfig>,
  ): MigrateResourceRequest_MigrateMlEngineModelVersionConfig {
    return MigrateResourceRequest_MigrateMlEngineModelVersionConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MigrateResourceRequest_MigrateMlEngineModelVersionConfig>,
  ): MigrateResourceRequest_MigrateMlEngineModelVersionConfig {
    const message = createBaseMigrateResourceRequest_MigrateMlEngineModelVersionConfig();
    message.endpoint = object.endpoint ?? "";
    message.modelVersion = object.modelVersion ?? "";
    message.modelDisplayName = object.modelDisplayName ?? "";
    return message;
  },
};

function createBaseMigrateResourceRequest_MigrateAutomlModelConfig(): MigrateResourceRequest_MigrateAutomlModelConfig {
  return { model: "", modelDisplayName: "" };
}

export const MigrateResourceRequest_MigrateAutomlModelConfig: MessageFns<
  MigrateResourceRequest_MigrateAutomlModelConfig
> = {
  encode(
    message: MigrateResourceRequest_MigrateAutomlModelConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    if (message.modelDisplayName !== "") {
      writer.uint32(18).string(message.modelDisplayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrateResourceRequest_MigrateAutomlModelConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateResourceRequest_MigrateAutomlModelConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelDisplayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateResourceRequest_MigrateAutomlModelConfig {
    return {
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      modelDisplayName: isSet(object.modelDisplayName) ? globalThis.String(object.modelDisplayName) : "",
    };
  },

  toJSON(message: MigrateResourceRequest_MigrateAutomlModelConfig): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.modelDisplayName !== "") {
      obj.modelDisplayName = message.modelDisplayName;
    }
    return obj;
  },

  create(
    base?: DeepPartial<MigrateResourceRequest_MigrateAutomlModelConfig>,
  ): MigrateResourceRequest_MigrateAutomlModelConfig {
    return MigrateResourceRequest_MigrateAutomlModelConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MigrateResourceRequest_MigrateAutomlModelConfig>,
  ): MigrateResourceRequest_MigrateAutomlModelConfig {
    const message = createBaseMigrateResourceRequest_MigrateAutomlModelConfig();
    message.model = object.model ?? "";
    message.modelDisplayName = object.modelDisplayName ?? "";
    return message;
  },
};

function createBaseMigrateResourceRequest_MigrateAutomlDatasetConfig(): MigrateResourceRequest_MigrateAutomlDatasetConfig {
  return { dataset: "", datasetDisplayName: "" };
}

export const MigrateResourceRequest_MigrateAutomlDatasetConfig: MessageFns<
  MigrateResourceRequest_MigrateAutomlDatasetConfig
> = {
  encode(
    message: MigrateResourceRequest_MigrateAutomlDatasetConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.dataset !== "") {
      writer.uint32(10).string(message.dataset);
    }
    if (message.datasetDisplayName !== "") {
      writer.uint32(18).string(message.datasetDisplayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrateResourceRequest_MigrateAutomlDatasetConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateResourceRequest_MigrateAutomlDatasetConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetDisplayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateResourceRequest_MigrateAutomlDatasetConfig {
    return {
      dataset: isSet(object.dataset) ? globalThis.String(object.dataset) : "",
      datasetDisplayName: isSet(object.datasetDisplayName) ? globalThis.String(object.datasetDisplayName) : "",
    };
  },

  toJSON(message: MigrateResourceRequest_MigrateAutomlDatasetConfig): unknown {
    const obj: any = {};
    if (message.dataset !== "") {
      obj.dataset = message.dataset;
    }
    if (message.datasetDisplayName !== "") {
      obj.datasetDisplayName = message.datasetDisplayName;
    }
    return obj;
  },

  create(
    base?: DeepPartial<MigrateResourceRequest_MigrateAutomlDatasetConfig>,
  ): MigrateResourceRequest_MigrateAutomlDatasetConfig {
    return MigrateResourceRequest_MigrateAutomlDatasetConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MigrateResourceRequest_MigrateAutomlDatasetConfig>,
  ): MigrateResourceRequest_MigrateAutomlDatasetConfig {
    const message = createBaseMigrateResourceRequest_MigrateAutomlDatasetConfig();
    message.dataset = object.dataset ?? "";
    message.datasetDisplayName = object.datasetDisplayName ?? "";
    return message;
  },
};

function createBaseMigrateResourceRequest_MigrateDataLabelingDatasetConfig(): MigrateResourceRequest_MigrateDataLabelingDatasetConfig {
  return { dataset: "", datasetDisplayName: "", migrateDataLabelingAnnotatedDatasetConfigs: [] };
}

export const MigrateResourceRequest_MigrateDataLabelingDatasetConfig: MessageFns<
  MigrateResourceRequest_MigrateDataLabelingDatasetConfig
> = {
  encode(
    message: MigrateResourceRequest_MigrateDataLabelingDatasetConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.dataset !== "") {
      writer.uint32(10).string(message.dataset);
    }
    if (message.datasetDisplayName !== "") {
      writer.uint32(18).string(message.datasetDisplayName);
    }
    for (const v of message.migrateDataLabelingAnnotatedDatasetConfigs) {
      MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig.encode(
        v!,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrateResourceRequest_MigrateDataLabelingDatasetConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateResourceRequest_MigrateDataLabelingDatasetConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datasetDisplayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.migrateDataLabelingAnnotatedDatasetConfigs.push(
            MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateResourceRequest_MigrateDataLabelingDatasetConfig {
    return {
      dataset: isSet(object.dataset) ? globalThis.String(object.dataset) : "",
      datasetDisplayName: isSet(object.datasetDisplayName) ? globalThis.String(object.datasetDisplayName) : "",
      migrateDataLabelingAnnotatedDatasetConfigs:
        globalThis.Array.isArray(object?.migrateDataLabelingAnnotatedDatasetConfigs)
          ? object.migrateDataLabelingAnnotatedDatasetConfigs.map((e: any) =>
            MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig.fromJSON(
              e,
            )
          )
          : [],
    };
  },

  toJSON(message: MigrateResourceRequest_MigrateDataLabelingDatasetConfig): unknown {
    const obj: any = {};
    if (message.dataset !== "") {
      obj.dataset = message.dataset;
    }
    if (message.datasetDisplayName !== "") {
      obj.datasetDisplayName = message.datasetDisplayName;
    }
    if (message.migrateDataLabelingAnnotatedDatasetConfigs?.length) {
      obj.migrateDataLabelingAnnotatedDatasetConfigs = message.migrateDataLabelingAnnotatedDatasetConfigs.map((e) =>
        MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig.toJSON(e)
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<MigrateResourceRequest_MigrateDataLabelingDatasetConfig>,
  ): MigrateResourceRequest_MigrateDataLabelingDatasetConfig {
    return MigrateResourceRequest_MigrateDataLabelingDatasetConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MigrateResourceRequest_MigrateDataLabelingDatasetConfig>,
  ): MigrateResourceRequest_MigrateDataLabelingDatasetConfig {
    const message = createBaseMigrateResourceRequest_MigrateDataLabelingDatasetConfig();
    message.dataset = object.dataset ?? "";
    message.datasetDisplayName = object.datasetDisplayName ?? "";
    message.migrateDataLabelingAnnotatedDatasetConfigs =
      object.migrateDataLabelingAnnotatedDatasetConfigs?.map((e) =>
        MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseMigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig(): MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig {
  return { annotatedDataset: "" };
}

export const MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig:
  MessageFns<MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig> = {
    encode(
      message: MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.annotatedDataset !== "") {
        writer.uint32(10).string(message.annotatedDataset);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseMigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.annotatedDataset = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig {
      return { annotatedDataset: isSet(object.annotatedDataset) ? globalThis.String(object.annotatedDataset) : "" };
    },

    toJSON(
      message: MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig,
    ): unknown {
      const obj: any = {};
      if (message.annotatedDataset !== "") {
        obj.annotatedDataset = message.annotatedDataset;
      }
      return obj;
    },

    create(
      base?: DeepPartial<
        MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig
      >,
    ): MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig {
      return MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig
        .fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<
        MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig
      >,
    ): MigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig {
      const message =
        createBaseMigrateResourceRequest_MigrateDataLabelingDatasetConfig_MigrateDataLabelingAnnotatedDatasetConfig();
      message.annotatedDataset = object.annotatedDataset ?? "";
      return message;
    },
  };

function createBaseBatchMigrateResourcesResponse(): BatchMigrateResourcesResponse {
  return { migrateResourceResponses: [] };
}

export const BatchMigrateResourcesResponse: MessageFns<BatchMigrateResourcesResponse> = {
  encode(message: BatchMigrateResourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.migrateResourceResponses) {
      MigrateResourceResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchMigrateResourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchMigrateResourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.migrateResourceResponses.push(MigrateResourceResponse.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchMigrateResourcesResponse {
    return {
      migrateResourceResponses: globalThis.Array.isArray(object?.migrateResourceResponses)
        ? object.migrateResourceResponses.map((e: any) => MigrateResourceResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchMigrateResourcesResponse): unknown {
    const obj: any = {};
    if (message.migrateResourceResponses?.length) {
      obj.migrateResourceResponses = message.migrateResourceResponses.map((e) => MigrateResourceResponse.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchMigrateResourcesResponse>): BatchMigrateResourcesResponse {
    return BatchMigrateResourcesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchMigrateResourcesResponse>): BatchMigrateResourcesResponse {
    const message = createBaseBatchMigrateResourcesResponse();
    message.migrateResourceResponses =
      object.migrateResourceResponses?.map((e) => MigrateResourceResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMigrateResourceResponse(): MigrateResourceResponse {
  return { dataset: undefined, model: undefined, migratableResource: undefined };
}

export const MigrateResourceResponse: MessageFns<MigrateResourceResponse> = {
  encode(message: MigrateResourceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataset !== undefined) {
      writer.uint32(10).string(message.dataset);
    }
    if (message.model !== undefined) {
      writer.uint32(18).string(message.model);
    }
    if (message.migratableResource !== undefined) {
      MigratableResource.encode(message.migratableResource, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrateResourceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateResourceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.model = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.migratableResource = MigratableResource.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateResourceResponse {
    return {
      dataset: isSet(object.dataset) ? globalThis.String(object.dataset) : undefined,
      model: isSet(object.model) ? globalThis.String(object.model) : undefined,
      migratableResource: isSet(object.migratableResource)
        ? MigratableResource.fromJSON(object.migratableResource)
        : undefined,
    };
  },

  toJSON(message: MigrateResourceResponse): unknown {
    const obj: any = {};
    if (message.dataset !== undefined) {
      obj.dataset = message.dataset;
    }
    if (message.model !== undefined) {
      obj.model = message.model;
    }
    if (message.migratableResource !== undefined) {
      obj.migratableResource = MigratableResource.toJSON(message.migratableResource);
    }
    return obj;
  },

  create(base?: DeepPartial<MigrateResourceResponse>): MigrateResourceResponse {
    return MigrateResourceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigrateResourceResponse>): MigrateResourceResponse {
    const message = createBaseMigrateResourceResponse();
    message.dataset = object.dataset ?? undefined;
    message.model = object.model ?? undefined;
    message.migratableResource = (object.migratableResource !== undefined && object.migratableResource !== null)
      ? MigratableResource.fromPartial(object.migratableResource)
      : undefined;
    return message;
  },
};

function createBaseBatchMigrateResourcesOperationMetadata(): BatchMigrateResourcesOperationMetadata {
  return { genericMetadata: undefined, partialResults: [] };
}

export const BatchMigrateResourcesOperationMetadata: MessageFns<BatchMigrateResourcesOperationMetadata> = {
  encode(message: BatchMigrateResourcesOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    for (const v of message.partialResults) {
      BatchMigrateResourcesOperationMetadata_PartialResult.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchMigrateResourcesOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchMigrateResourcesOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.partialResults.push(
            BatchMigrateResourcesOperationMetadata_PartialResult.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchMigrateResourcesOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      partialResults: globalThis.Array.isArray(object?.partialResults)
        ? object.partialResults.map((e: any) => BatchMigrateResourcesOperationMetadata_PartialResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchMigrateResourcesOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (message.partialResults?.length) {
      obj.partialResults = message.partialResults.map((e) =>
        BatchMigrateResourcesOperationMetadata_PartialResult.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<BatchMigrateResourcesOperationMetadata>): BatchMigrateResourcesOperationMetadata {
    return BatchMigrateResourcesOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchMigrateResourcesOperationMetadata>): BatchMigrateResourcesOperationMetadata {
    const message = createBaseBatchMigrateResourcesOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.partialResults =
      object.partialResults?.map((e) => BatchMigrateResourcesOperationMetadata_PartialResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchMigrateResourcesOperationMetadata_PartialResult(): BatchMigrateResourcesOperationMetadata_PartialResult {
  return { error: undefined, model: undefined, dataset: undefined, request: undefined };
}

export const BatchMigrateResourcesOperationMetadata_PartialResult: MessageFns<
  BatchMigrateResourcesOperationMetadata_PartialResult
> = {
  encode(
    message: BatchMigrateResourcesOperationMetadata_PartialResult,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(18).fork()).join();
    }
    if (message.model !== undefined) {
      writer.uint32(26).string(message.model);
    }
    if (message.dataset !== undefined) {
      writer.uint32(34).string(message.dataset);
    }
    if (message.request !== undefined) {
      MigrateResourceRequest.encode(message.request, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchMigrateResourcesOperationMetadata_PartialResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchMigrateResourcesOperationMetadata_PartialResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.model = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataset = reader.string();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.request = MigrateResourceRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchMigrateResourcesOperationMetadata_PartialResult {
    return {
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
      model: isSet(object.model) ? globalThis.String(object.model) : undefined,
      dataset: isSet(object.dataset) ? globalThis.String(object.dataset) : undefined,
      request: isSet(object.request) ? MigrateResourceRequest.fromJSON(object.request) : undefined,
    };
  },

  toJSON(message: BatchMigrateResourcesOperationMetadata_PartialResult): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    if (message.model !== undefined) {
      obj.model = message.model;
    }
    if (message.dataset !== undefined) {
      obj.dataset = message.dataset;
    }
    if (message.request !== undefined) {
      obj.request = MigrateResourceRequest.toJSON(message.request);
    }
    return obj;
  },

  create(
    base?: DeepPartial<BatchMigrateResourcesOperationMetadata_PartialResult>,
  ): BatchMigrateResourcesOperationMetadata_PartialResult {
    return BatchMigrateResourcesOperationMetadata_PartialResult.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BatchMigrateResourcesOperationMetadata_PartialResult>,
  ): BatchMigrateResourcesOperationMetadata_PartialResult {
    const message = createBaseBatchMigrateResourcesOperationMetadata_PartialResult();
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    message.model = object.model ?? undefined;
    message.dataset = object.dataset ?? undefined;
    message.request = (object.request !== undefined && object.request !== null)
      ? MigrateResourceRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

/**
 * A service that migrates resources from automl.googleapis.com,
 * datalabeling.googleapis.com and ml.googleapis.com to Vertex AI.
 */
export type MigrationServiceDefinition = typeof MigrationServiceDefinition;
export const MigrationServiceDefinition = {
  name: "MigrationService",
  fullName: "google.cloud.aiplatform.v1.MigrationService",
  methods: {
    /**
     * Searches all of the resources in automl.googleapis.com,
     * datalabeling.googleapis.com and ml.googleapis.com that can be migrated to
     * Vertex AI's given location.
     */
    searchMigratableResources: {
      name: "SearchMigratableResources",
      requestType: SearchMigratableResourcesRequest,
      requestStream: false,
      responseType: SearchMigratableResourcesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              67,
              58,
              1,
              42,
              34,
              62,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              97,
              98,
              108,
              101,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Batch migrates resources from ml.googleapis.com, automl.googleapis.com,
     * and datalabeling.googleapis.com to Vertex AI.
     */
    batchMigrateResources: {
      name: "BatchMigrateResources",
      requestType: BatchMigrateResourcesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              71,
              10,
              29,
              66,
              97,
              116,
              99,
              104,
              77,
              105,
              103,
              114,
              97,
              116,
              101,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              38,
              66,
              97,
              116,
              99,
              104,
              77,
              105,
              103,
              114,
              97,
              116,
              101,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              105,
              103,
              114,
              97,
              116,
              101,
              95,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              73,
              58,
              1,
              42,
              34,
              68,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              105,
              103,
              114,
              97,
              116,
              97,
              98,
              108,
              101,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              77,
              105,
              103,
              114,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface MigrationServiceImplementation<CallContextExt = {}> {
  /**
   * Searches all of the resources in automl.googleapis.com,
   * datalabeling.googleapis.com and ml.googleapis.com that can be migrated to
   * Vertex AI's given location.
   */
  searchMigratableResources(
    request: SearchMigratableResourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchMigratableResourcesResponse>>;
  /**
   * Batch migrates resources from ml.googleapis.com, automl.googleapis.com,
   * and datalabeling.googleapis.com to Vertex AI.
   */
  batchMigrateResources(
    request: BatchMigrateResourcesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface MigrationServiceClient<CallOptionsExt = {}> {
  /**
   * Searches all of the resources in automl.googleapis.com,
   * datalabeling.googleapis.com and ml.googleapis.com that can be migrated to
   * Vertex AI's given location.
   */
  searchMigratableResources(
    request: DeepPartial<SearchMigratableResourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchMigratableResourcesResponse>;
  /**
   * Batch migrates resources from ml.googleapis.com, automl.googleapis.com,
   * and datalabeling.googleapis.com to Vertex AI.
   */
  batchMigrateResources(
    request: DeepPartial<BatchMigrateResourcesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
