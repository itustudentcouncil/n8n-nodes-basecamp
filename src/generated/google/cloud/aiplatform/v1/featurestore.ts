// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/featurestore.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { EncryptionSpec } from "./encryption_spec.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Vertex AI Feature Store provides a centralized repository for organizing,
 * storing, and serving ML features. The Featurestore is a top-level container
 * for your features and their values.
 */
export interface Featurestore {
  /**
   * Output only. Name of the Featurestore. Format:
   * `projects/{project}/locations/{location}/featurestores/{featurestore}`
   */
  name: string;
  /** Output only. Timestamp when this Featurestore was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when this Featurestore was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Used to perform consistent read-modify-write updates. If not set,
   * a blind "overwrite" update happens.
   */
  etag: string;
  /**
   * Optional. The labels with user-defined metadata to organize your
   * Featurestore.
   *
   * Label keys and values can be no longer than 64 characters
   * (Unicode codepoints), can only contain lowercase letters, numeric
   * characters, underscores and dashes. International characters are allowed.
   *
   * See https://goo.gl/xmQnxf for more information on and examples of labels.
   * No more than 64 user labels can be associated with one Featurestore(System
   * labels are excluded)."
   * System reserved label keys are prefixed with "aiplatform.googleapis.com/"
   * and are immutable.
   */
  labels: { [key: string]: string };
  /**
   * Optional. Config for online storage resources. The field should not
   * co-exist with the field of `OnlineStoreReplicationConfig`. If both of it
   * and OnlineStoreReplicationConfig are unset, the feature store will not have
   * an online store and cannot be used for online serving.
   */
  onlineServingConfig:
    | Featurestore_OnlineServingConfig
    | undefined;
  /** Output only. State of the featurestore. */
  state: Featurestore_State;
  /**
   * Optional. TTL in days for feature values that will be stored in online
   * serving storage. The Feature Store online storage periodically removes
   * obsolete feature values older than `online_storage_ttl_days` since the
   * feature generation time. Note that `online_storage_ttl_days` should be less
   * than or equal to `offline_storage_ttl_days` for each EntityType under a
   * featurestore. If not set, default to 4000 days
   */
  onlineStorageTtlDays: number;
  /**
   * Optional. Customer-managed encryption key spec for data storage. If set,
   * both of the online and offline data storage will be secured by this key.
   */
  encryptionSpec:
    | EncryptionSpec
    | undefined;
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /** Output only. Reserved for future use. */
  satisfiesPzi: boolean;
}

/** Possible states a featurestore can have. */
export enum Featurestore_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /**
   * STABLE - State when the featurestore configuration is not being updated and the
   * fields reflect the current configuration of the featurestore. The
   * featurestore is usable in this state.
   */
  STABLE = 1,
  /**
   * UPDATING - The state of the featurestore configuration when it is being updated.
   * During an update, the fields reflect either the original configuration
   * or the updated configuration of the featurestore. For example,
   * `online_serving_config.fixed_node_count` can take minutes to update.
   * While the update is in progress, the featurestore is in the UPDATING
   * state, and the value of `fixed_node_count` can be the original value or
   * the updated value, depending on the progress of the operation. Until the
   * update completes, the actual number of nodes can still be the original
   * value of `fixed_node_count`. The featurestore is still usable in this
   * state.
   */
  UPDATING = 2,
  UNRECOGNIZED = -1,
}

export function featurestore_StateFromJSON(object: any): Featurestore_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Featurestore_State.STATE_UNSPECIFIED;
    case 1:
    case "STABLE":
      return Featurestore_State.STABLE;
    case 2:
    case "UPDATING":
      return Featurestore_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Featurestore_State.UNRECOGNIZED;
  }
}

export function featurestore_StateToJSON(object: Featurestore_State): string {
  switch (object) {
    case Featurestore_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Featurestore_State.STABLE:
      return "STABLE";
    case Featurestore_State.UPDATING:
      return "UPDATING";
    case Featurestore_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * OnlineServingConfig specifies the details for provisioning online serving
 * resources.
 */
export interface Featurestore_OnlineServingConfig {
  /**
   * The number of nodes for the online store. The number of nodes doesn't
   * scale automatically, but you can manually update the number of
   * nodes. If set to 0, the featurestore will not have an
   * online store and cannot be used for online serving.
   */
  fixedNodeCount: number;
  /**
   * Online serving scaling configuration.
   * Only one of `fixed_node_count` and `scaling` can be set. Setting one will
   * reset the other.
   */
  scaling: Featurestore_OnlineServingConfig_Scaling | undefined;
}

/**
 * Online serving scaling configuration. If min_node_count and
 * max_node_count are set to the same value, the cluster will be configured
 * with the fixed number of node (no auto-scaling).
 */
export interface Featurestore_OnlineServingConfig_Scaling {
  /**
   * Required. The minimum number of nodes to scale down to. Must be greater
   * than or equal to 1.
   */
  minNodeCount: number;
  /**
   * The maximum number of nodes to scale up to. Must be greater than
   * min_node_count, and less than or equal to 10 times of 'min_node_count'.
   */
  maxNodeCount: number;
  /**
   * Optional. The cpu utilization that the Autoscaler should be trying to
   * achieve. This number is on a scale from 0 (no utilization) to 100
   * (total utilization), and is limited between 10 and 80. When a cluster's
   * CPU utilization exceeds the target that you have set, Bigtable
   * immediately adds nodes to the cluster. When CPU utilization is
   * substantially lower than the target, Bigtable removes nodes. If not set
   * or set to 0, default to 50.
   */
  cpuUtilizationTarget: number;
}

export interface Featurestore_LabelsEntry {
  key: string;
  value: string;
}

function createBaseFeaturestore(): Featurestore {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    etag: "",
    labels: {},
    onlineServingConfig: undefined,
    state: 0,
    onlineStorageTtlDays: 0,
    encryptionSpec: undefined,
    satisfiesPzs: false,
    satisfiesPzi: false,
  };
}

export const Featurestore: MessageFns<Featurestore> = {
  encode(message: Featurestore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(42).string(message.etag);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Featurestore_LabelsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.onlineServingConfig !== undefined) {
      Featurestore_OnlineServingConfig.encode(message.onlineServingConfig, writer.uint32(58).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(64).int32(message.state);
    }
    if (message.onlineStorageTtlDays !== 0) {
      writer.uint32(104).int32(message.onlineStorageTtlDays);
    }
    if (message.encryptionSpec !== undefined) {
      EncryptionSpec.encode(message.encryptionSpec, writer.uint32(82).fork()).join();
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(112).bool(message.satisfiesPzs);
    }
    if (message.satisfiesPzi !== false) {
      writer.uint32(120).bool(message.satisfiesPzi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Featurestore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeaturestore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = Featurestore_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.onlineServingConfig = Featurestore_OnlineServingConfig.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.onlineStorageTtlDays = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.encryptionSpec = EncryptionSpec.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.satisfiesPzi = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Featurestore {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      onlineServingConfig: isSet(object.onlineServingConfig)
        ? Featurestore_OnlineServingConfig.fromJSON(object.onlineServingConfig)
        : undefined,
      state: isSet(object.state) ? featurestore_StateFromJSON(object.state) : 0,
      onlineStorageTtlDays: isSet(object.onlineStorageTtlDays) ? globalThis.Number(object.onlineStorageTtlDays) : 0,
      encryptionSpec: isSet(object.encryptionSpec) ? EncryptionSpec.fromJSON(object.encryptionSpec) : undefined,
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      satisfiesPzi: isSet(object.satisfiesPzi) ? globalThis.Boolean(object.satisfiesPzi) : false,
    };
  },

  toJSON(message: Featurestore): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.onlineServingConfig !== undefined) {
      obj.onlineServingConfig = Featurestore_OnlineServingConfig.toJSON(message.onlineServingConfig);
    }
    if (message.state !== 0) {
      obj.state = featurestore_StateToJSON(message.state);
    }
    if (message.onlineStorageTtlDays !== 0) {
      obj.onlineStorageTtlDays = Math.round(message.onlineStorageTtlDays);
    }
    if (message.encryptionSpec !== undefined) {
      obj.encryptionSpec = EncryptionSpec.toJSON(message.encryptionSpec);
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.satisfiesPzi !== false) {
      obj.satisfiesPzi = message.satisfiesPzi;
    }
    return obj;
  },

  create(base?: DeepPartial<Featurestore>): Featurestore {
    return Featurestore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Featurestore>): Featurestore {
    const message = createBaseFeaturestore();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.etag = object.etag ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.onlineServingConfig = (object.onlineServingConfig !== undefined && object.onlineServingConfig !== null)
      ? Featurestore_OnlineServingConfig.fromPartial(object.onlineServingConfig)
      : undefined;
    message.state = object.state ?? 0;
    message.onlineStorageTtlDays = object.onlineStorageTtlDays ?? 0;
    message.encryptionSpec = (object.encryptionSpec !== undefined && object.encryptionSpec !== null)
      ? EncryptionSpec.fromPartial(object.encryptionSpec)
      : undefined;
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.satisfiesPzi = object.satisfiesPzi ?? false;
    return message;
  },
};

function createBaseFeaturestore_OnlineServingConfig(): Featurestore_OnlineServingConfig {
  return { fixedNodeCount: 0, scaling: undefined };
}

export const Featurestore_OnlineServingConfig: MessageFns<Featurestore_OnlineServingConfig> = {
  encode(message: Featurestore_OnlineServingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fixedNodeCount !== 0) {
      writer.uint32(16).int32(message.fixedNodeCount);
    }
    if (message.scaling !== undefined) {
      Featurestore_OnlineServingConfig_Scaling.encode(message.scaling, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Featurestore_OnlineServingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeaturestore_OnlineServingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fixedNodeCount = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scaling = Featurestore_OnlineServingConfig_Scaling.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Featurestore_OnlineServingConfig {
    return {
      fixedNodeCount: isSet(object.fixedNodeCount) ? globalThis.Number(object.fixedNodeCount) : 0,
      scaling: isSet(object.scaling) ? Featurestore_OnlineServingConfig_Scaling.fromJSON(object.scaling) : undefined,
    };
  },

  toJSON(message: Featurestore_OnlineServingConfig): unknown {
    const obj: any = {};
    if (message.fixedNodeCount !== 0) {
      obj.fixedNodeCount = Math.round(message.fixedNodeCount);
    }
    if (message.scaling !== undefined) {
      obj.scaling = Featurestore_OnlineServingConfig_Scaling.toJSON(message.scaling);
    }
    return obj;
  },

  create(base?: DeepPartial<Featurestore_OnlineServingConfig>): Featurestore_OnlineServingConfig {
    return Featurestore_OnlineServingConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Featurestore_OnlineServingConfig>): Featurestore_OnlineServingConfig {
    const message = createBaseFeaturestore_OnlineServingConfig();
    message.fixedNodeCount = object.fixedNodeCount ?? 0;
    message.scaling = (object.scaling !== undefined && object.scaling !== null)
      ? Featurestore_OnlineServingConfig_Scaling.fromPartial(object.scaling)
      : undefined;
    return message;
  },
};

function createBaseFeaturestore_OnlineServingConfig_Scaling(): Featurestore_OnlineServingConfig_Scaling {
  return { minNodeCount: 0, maxNodeCount: 0, cpuUtilizationTarget: 0 };
}

export const Featurestore_OnlineServingConfig_Scaling: MessageFns<Featurestore_OnlineServingConfig_Scaling> = {
  encode(message: Featurestore_OnlineServingConfig_Scaling, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minNodeCount !== 0) {
      writer.uint32(8).int32(message.minNodeCount);
    }
    if (message.maxNodeCount !== 0) {
      writer.uint32(16).int32(message.maxNodeCount);
    }
    if (message.cpuUtilizationTarget !== 0) {
      writer.uint32(24).int32(message.cpuUtilizationTarget);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Featurestore_OnlineServingConfig_Scaling {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeaturestore_OnlineServingConfig_Scaling();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minNodeCount = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxNodeCount = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.cpuUtilizationTarget = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Featurestore_OnlineServingConfig_Scaling {
    return {
      minNodeCount: isSet(object.minNodeCount) ? globalThis.Number(object.minNodeCount) : 0,
      maxNodeCount: isSet(object.maxNodeCount) ? globalThis.Number(object.maxNodeCount) : 0,
      cpuUtilizationTarget: isSet(object.cpuUtilizationTarget) ? globalThis.Number(object.cpuUtilizationTarget) : 0,
    };
  },

  toJSON(message: Featurestore_OnlineServingConfig_Scaling): unknown {
    const obj: any = {};
    if (message.minNodeCount !== 0) {
      obj.minNodeCount = Math.round(message.minNodeCount);
    }
    if (message.maxNodeCount !== 0) {
      obj.maxNodeCount = Math.round(message.maxNodeCount);
    }
    if (message.cpuUtilizationTarget !== 0) {
      obj.cpuUtilizationTarget = Math.round(message.cpuUtilizationTarget);
    }
    return obj;
  },

  create(base?: DeepPartial<Featurestore_OnlineServingConfig_Scaling>): Featurestore_OnlineServingConfig_Scaling {
    return Featurestore_OnlineServingConfig_Scaling.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Featurestore_OnlineServingConfig_Scaling>): Featurestore_OnlineServingConfig_Scaling {
    const message = createBaseFeaturestore_OnlineServingConfig_Scaling();
    message.minNodeCount = object.minNodeCount ?? 0;
    message.maxNodeCount = object.maxNodeCount ?? 0;
    message.cpuUtilizationTarget = object.cpuUtilizationTarget ?? 0;
    return message;
  },
};

function createBaseFeaturestore_LabelsEntry(): Featurestore_LabelsEntry {
  return { key: "", value: "" };
}

export const Featurestore_LabelsEntry: MessageFns<Featurestore_LabelsEntry> = {
  encode(message: Featurestore_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Featurestore_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeaturestore_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Featurestore_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Featurestore_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Featurestore_LabelsEntry>): Featurestore_LabelsEntry {
    return Featurestore_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Featurestore_LabelsEntry>): Featurestore_LabelsEntry {
    const message = createBaseFeaturestore_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
