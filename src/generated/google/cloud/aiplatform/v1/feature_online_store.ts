// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/feature_online_store.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { EncryptionSpec } from "./encryption_spec.js";
import { PrivateServiceConnectConfig } from "./service_networking.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Vertex AI Feature Online Store provides a centralized repository for serving
 * ML features and embedding indexes at low latency. The Feature Online Store is
 * a top-level container.
 */
export interface FeatureOnlineStore {
  /**
   * Contains settings for the Cloud Bigtable instance that will be created
   * to serve featureValues for all FeatureViews under this
   * FeatureOnlineStore.
   */
  bigtable?:
    | FeatureOnlineStore_Bigtable
    | undefined;
  /**
   * Contains settings for the Optimized store that will be created
   * to serve featureValues for all FeatureViews under this
   * FeatureOnlineStore. When choose Optimized storage type, need to set
   * [PrivateServiceConnectConfig.enable_private_service_connect][google.cloud.aiplatform.v1.PrivateServiceConnectConfig.enable_private_service_connect]
   * to use private endpoint. Otherwise will use public endpoint by default.
   */
  optimized?:
    | FeatureOnlineStore_Optimized
    | undefined;
  /**
   * Identifier. Name of the FeatureOnlineStore. Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{featureOnlineStore}`
   */
  name: string;
  /** Output only. Timestamp when this FeatureOnlineStore was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when this FeatureOnlineStore was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Used to perform consistent read-modify-write updates. If not set,
   * a blind "overwrite" update happens.
   */
  etag: string;
  /**
   * Optional. The labels with user-defined metadata to organize your
   * FeatureOnlineStore.
   *
   * Label keys and values can be no longer than 64 characters
   * (Unicode codepoints), can only contain lowercase letters, numeric
   * characters, underscores and dashes. International characters are allowed.
   *
   * See https://goo.gl/xmQnxf for more information on and examples of labels.
   * No more than 64 user labels can be associated with one
   * FeatureOnlineStore(System labels are excluded)." System reserved label keys
   * are prefixed with "aiplatform.googleapis.com/" and are immutable.
   */
  labels: { [key: string]: string };
  /** Output only. State of the featureOnlineStore. */
  state: FeatureOnlineStore_State;
  /**
   * Optional. The dedicated serving endpoint for this FeatureOnlineStore, which
   * is different from common Vertex service endpoint.
   */
  dedicatedServingEndpoint:
    | FeatureOnlineStore_DedicatedServingEndpoint
    | undefined;
  /**
   * Optional. Customer-managed encryption key spec for data storage. If set,
   * online store will be secured by this key.
   */
  encryptionSpec:
    | EncryptionSpec
    | undefined;
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /** Output only. Reserved for future use. */
  satisfiesPzi: boolean;
}

/** Possible states a featureOnlineStore can have. */
export enum FeatureOnlineStore_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /**
   * STABLE - State when the featureOnlineStore configuration is not being updated and
   * the fields reflect the current configuration of the featureOnlineStore.
   * The featureOnlineStore is usable in this state.
   */
  STABLE = 1,
  /**
   * UPDATING - The state of the featureOnlineStore configuration when it is being
   * updated. During an update, the fields reflect either the original
   * configuration or the updated configuration of the featureOnlineStore. The
   * featureOnlineStore is still usable in this state.
   */
  UPDATING = 2,
  UNRECOGNIZED = -1,
}

export function featureOnlineStore_StateFromJSON(object: any): FeatureOnlineStore_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return FeatureOnlineStore_State.STATE_UNSPECIFIED;
    case 1:
    case "STABLE":
      return FeatureOnlineStore_State.STABLE;
    case 2:
    case "UPDATING":
      return FeatureOnlineStore_State.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureOnlineStore_State.UNRECOGNIZED;
  }
}

export function featureOnlineStore_StateToJSON(object: FeatureOnlineStore_State): string {
  switch (object) {
    case FeatureOnlineStore_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case FeatureOnlineStore_State.STABLE:
      return "STABLE";
    case FeatureOnlineStore_State.UPDATING:
      return "UPDATING";
    case FeatureOnlineStore_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FeatureOnlineStore_Bigtable {
  /** Required. Autoscaling config applied to Bigtable Instance. */
  autoScaling: FeatureOnlineStore_Bigtable_AutoScaling | undefined;
}

export interface FeatureOnlineStore_Bigtable_AutoScaling {
  /**
   * Required. The minimum number of nodes to scale down to. Must be greater
   * than or equal to 1.
   */
  minNodeCount: number;
  /**
   * Required. The maximum number of nodes to scale up to. Must be greater
   * than or equal to min_node_count, and less than or equal to 10 times of
   * 'min_node_count'.
   */
  maxNodeCount: number;
  /**
   * Optional. A percentage of the cluster's CPU capacity. Can be from 10%
   * to 80%. When a cluster's CPU utilization exceeds the target that you
   * have set, Bigtable immediately adds nodes to the cluster. When CPU
   * utilization is substantially lower than the target, Bigtable removes
   * nodes. If not set will default to 50%.
   */
  cpuUtilizationTarget: number;
}

/** Optimized storage type */
export interface FeatureOnlineStore_Optimized {
}

/**
 * The dedicated serving endpoint for this FeatureOnlineStore. Only need to
 * set when you choose Optimized storage type. Public endpoint is provisioned
 * by default.
 */
export interface FeatureOnlineStore_DedicatedServingEndpoint {
  /**
   * Output only. This field will be populated with the domain name to use for
   * this FeatureOnlineStore
   */
  publicEndpointDomainName: string;
  /**
   * Optional. Private service connect config. The private service connection
   * is available only for Optimized storage type, not for embedding
   * management now. If
   * [PrivateServiceConnectConfig.enable_private_service_connect][google.cloud.aiplatform.v1.PrivateServiceConnectConfig.enable_private_service_connect]
   * set to true, customers will use private service connection to send
   * request. Otherwise, the connection will set to public endpoint.
   */
  privateServiceConnectConfig:
    | PrivateServiceConnectConfig
    | undefined;
  /**
   * Output only. The name of the service attachment resource. Populated if
   * private service connect is enabled and after FeatureViewSync is created.
   */
  serviceAttachment: string;
}

export interface FeatureOnlineStore_LabelsEntry {
  key: string;
  value: string;
}

function createBaseFeatureOnlineStore(): FeatureOnlineStore {
  return {
    bigtable: undefined,
    optimized: undefined,
    name: "",
    createTime: undefined,
    updateTime: undefined,
    etag: "",
    labels: {},
    state: 0,
    dedicatedServingEndpoint: undefined,
    encryptionSpec: undefined,
    satisfiesPzs: false,
    satisfiesPzi: false,
  };
}

export const FeatureOnlineStore: MessageFns<FeatureOnlineStore> = {
  encode(message: FeatureOnlineStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bigtable !== undefined) {
      FeatureOnlineStore_Bigtable.encode(message.bigtable, writer.uint32(66).fork()).join();
    }
    if (message.optimized !== undefined) {
      FeatureOnlineStore_Optimized.encode(message.optimized, writer.uint32(98).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(42).string(message.etag);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      FeatureOnlineStore_LabelsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.dedicatedServingEndpoint !== undefined) {
      FeatureOnlineStore_DedicatedServingEndpoint.encode(message.dedicatedServingEndpoint, writer.uint32(82).fork())
        .join();
    }
    if (message.encryptionSpec !== undefined) {
      EncryptionSpec.encode(message.encryptionSpec, writer.uint32(106).fork()).join();
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(120).bool(message.satisfiesPzs);
    }
    if (message.satisfiesPzi !== false) {
      writer.uint32(128).bool(message.satisfiesPzi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureOnlineStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureOnlineStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8:
          if (tag !== 66) {
            break;
          }

          message.bigtable = FeatureOnlineStore_Bigtable.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.optimized = FeatureOnlineStore_Optimized.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = FeatureOnlineStore_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.dedicatedServingEndpoint = FeatureOnlineStore_DedicatedServingEndpoint.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.encryptionSpec = EncryptionSpec.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.satisfiesPzi = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureOnlineStore {
    return {
      bigtable: isSet(object.bigtable) ? FeatureOnlineStore_Bigtable.fromJSON(object.bigtable) : undefined,
      optimized: isSet(object.optimized) ? FeatureOnlineStore_Optimized.fromJSON(object.optimized) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      state: isSet(object.state) ? featureOnlineStore_StateFromJSON(object.state) : 0,
      dedicatedServingEndpoint: isSet(object.dedicatedServingEndpoint)
        ? FeatureOnlineStore_DedicatedServingEndpoint.fromJSON(object.dedicatedServingEndpoint)
        : undefined,
      encryptionSpec: isSet(object.encryptionSpec) ? EncryptionSpec.fromJSON(object.encryptionSpec) : undefined,
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      satisfiesPzi: isSet(object.satisfiesPzi) ? globalThis.Boolean(object.satisfiesPzi) : false,
    };
  },

  toJSON(message: FeatureOnlineStore): unknown {
    const obj: any = {};
    if (message.bigtable !== undefined) {
      obj.bigtable = FeatureOnlineStore_Bigtable.toJSON(message.bigtable);
    }
    if (message.optimized !== undefined) {
      obj.optimized = FeatureOnlineStore_Optimized.toJSON(message.optimized);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.state !== 0) {
      obj.state = featureOnlineStore_StateToJSON(message.state);
    }
    if (message.dedicatedServingEndpoint !== undefined) {
      obj.dedicatedServingEndpoint = FeatureOnlineStore_DedicatedServingEndpoint.toJSON(
        message.dedicatedServingEndpoint,
      );
    }
    if (message.encryptionSpec !== undefined) {
      obj.encryptionSpec = EncryptionSpec.toJSON(message.encryptionSpec);
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.satisfiesPzi !== false) {
      obj.satisfiesPzi = message.satisfiesPzi;
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureOnlineStore>): FeatureOnlineStore {
    return FeatureOnlineStore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureOnlineStore>): FeatureOnlineStore {
    const message = createBaseFeatureOnlineStore();
    message.bigtable = (object.bigtable !== undefined && object.bigtable !== null)
      ? FeatureOnlineStore_Bigtable.fromPartial(object.bigtable)
      : undefined;
    message.optimized = (object.optimized !== undefined && object.optimized !== null)
      ? FeatureOnlineStore_Optimized.fromPartial(object.optimized)
      : undefined;
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.etag = object.etag ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.state = object.state ?? 0;
    message.dedicatedServingEndpoint =
      (object.dedicatedServingEndpoint !== undefined && object.dedicatedServingEndpoint !== null)
        ? FeatureOnlineStore_DedicatedServingEndpoint.fromPartial(object.dedicatedServingEndpoint)
        : undefined;
    message.encryptionSpec = (object.encryptionSpec !== undefined && object.encryptionSpec !== null)
      ? EncryptionSpec.fromPartial(object.encryptionSpec)
      : undefined;
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.satisfiesPzi = object.satisfiesPzi ?? false;
    return message;
  },
};

function createBaseFeatureOnlineStore_Bigtable(): FeatureOnlineStore_Bigtable {
  return { autoScaling: undefined };
}

export const FeatureOnlineStore_Bigtable: MessageFns<FeatureOnlineStore_Bigtable> = {
  encode(message: FeatureOnlineStore_Bigtable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.autoScaling !== undefined) {
      FeatureOnlineStore_Bigtable_AutoScaling.encode(message.autoScaling, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureOnlineStore_Bigtable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureOnlineStore_Bigtable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.autoScaling = FeatureOnlineStore_Bigtable_AutoScaling.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureOnlineStore_Bigtable {
    return {
      autoScaling: isSet(object.autoScaling)
        ? FeatureOnlineStore_Bigtable_AutoScaling.fromJSON(object.autoScaling)
        : undefined,
    };
  },

  toJSON(message: FeatureOnlineStore_Bigtable): unknown {
    const obj: any = {};
    if (message.autoScaling !== undefined) {
      obj.autoScaling = FeatureOnlineStore_Bigtable_AutoScaling.toJSON(message.autoScaling);
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureOnlineStore_Bigtable>): FeatureOnlineStore_Bigtable {
    return FeatureOnlineStore_Bigtable.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureOnlineStore_Bigtable>): FeatureOnlineStore_Bigtable {
    const message = createBaseFeatureOnlineStore_Bigtable();
    message.autoScaling = (object.autoScaling !== undefined && object.autoScaling !== null)
      ? FeatureOnlineStore_Bigtable_AutoScaling.fromPartial(object.autoScaling)
      : undefined;
    return message;
  },
};

function createBaseFeatureOnlineStore_Bigtable_AutoScaling(): FeatureOnlineStore_Bigtable_AutoScaling {
  return { minNodeCount: 0, maxNodeCount: 0, cpuUtilizationTarget: 0 };
}

export const FeatureOnlineStore_Bigtable_AutoScaling: MessageFns<FeatureOnlineStore_Bigtable_AutoScaling> = {
  encode(message: FeatureOnlineStore_Bigtable_AutoScaling, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minNodeCount !== 0) {
      writer.uint32(8).int32(message.minNodeCount);
    }
    if (message.maxNodeCount !== 0) {
      writer.uint32(16).int32(message.maxNodeCount);
    }
    if (message.cpuUtilizationTarget !== 0) {
      writer.uint32(24).int32(message.cpuUtilizationTarget);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureOnlineStore_Bigtable_AutoScaling {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureOnlineStore_Bigtable_AutoScaling();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minNodeCount = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxNodeCount = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.cpuUtilizationTarget = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureOnlineStore_Bigtable_AutoScaling {
    return {
      minNodeCount: isSet(object.minNodeCount) ? globalThis.Number(object.minNodeCount) : 0,
      maxNodeCount: isSet(object.maxNodeCount) ? globalThis.Number(object.maxNodeCount) : 0,
      cpuUtilizationTarget: isSet(object.cpuUtilizationTarget) ? globalThis.Number(object.cpuUtilizationTarget) : 0,
    };
  },

  toJSON(message: FeatureOnlineStore_Bigtable_AutoScaling): unknown {
    const obj: any = {};
    if (message.minNodeCount !== 0) {
      obj.minNodeCount = Math.round(message.minNodeCount);
    }
    if (message.maxNodeCount !== 0) {
      obj.maxNodeCount = Math.round(message.maxNodeCount);
    }
    if (message.cpuUtilizationTarget !== 0) {
      obj.cpuUtilizationTarget = Math.round(message.cpuUtilizationTarget);
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureOnlineStore_Bigtable_AutoScaling>): FeatureOnlineStore_Bigtable_AutoScaling {
    return FeatureOnlineStore_Bigtable_AutoScaling.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureOnlineStore_Bigtable_AutoScaling>): FeatureOnlineStore_Bigtable_AutoScaling {
    const message = createBaseFeatureOnlineStore_Bigtable_AutoScaling();
    message.minNodeCount = object.minNodeCount ?? 0;
    message.maxNodeCount = object.maxNodeCount ?? 0;
    message.cpuUtilizationTarget = object.cpuUtilizationTarget ?? 0;
    return message;
  },
};

function createBaseFeatureOnlineStore_Optimized(): FeatureOnlineStore_Optimized {
  return {};
}

export const FeatureOnlineStore_Optimized: MessageFns<FeatureOnlineStore_Optimized> = {
  encode(_: FeatureOnlineStore_Optimized, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureOnlineStore_Optimized {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureOnlineStore_Optimized();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FeatureOnlineStore_Optimized {
    return {};
  },

  toJSON(_: FeatureOnlineStore_Optimized): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<FeatureOnlineStore_Optimized>): FeatureOnlineStore_Optimized {
    return FeatureOnlineStore_Optimized.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<FeatureOnlineStore_Optimized>): FeatureOnlineStore_Optimized {
    const message = createBaseFeatureOnlineStore_Optimized();
    return message;
  },
};

function createBaseFeatureOnlineStore_DedicatedServingEndpoint(): FeatureOnlineStore_DedicatedServingEndpoint {
  return { publicEndpointDomainName: "", privateServiceConnectConfig: undefined, serviceAttachment: "" };
}

export const FeatureOnlineStore_DedicatedServingEndpoint: MessageFns<FeatureOnlineStore_DedicatedServingEndpoint> = {
  encode(
    message: FeatureOnlineStore_DedicatedServingEndpoint,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.publicEndpointDomainName !== "") {
      writer.uint32(18).string(message.publicEndpointDomainName);
    }
    if (message.privateServiceConnectConfig !== undefined) {
      PrivateServiceConnectConfig.encode(message.privateServiceConnectConfig, writer.uint32(26).fork()).join();
    }
    if (message.serviceAttachment !== "") {
      writer.uint32(34).string(message.serviceAttachment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureOnlineStore_DedicatedServingEndpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureOnlineStore_DedicatedServingEndpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.publicEndpointDomainName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.privateServiceConnectConfig = PrivateServiceConnectConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.serviceAttachment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureOnlineStore_DedicatedServingEndpoint {
    return {
      publicEndpointDomainName: isSet(object.publicEndpointDomainName)
        ? globalThis.String(object.publicEndpointDomainName)
        : "",
      privateServiceConnectConfig: isSet(object.privateServiceConnectConfig)
        ? PrivateServiceConnectConfig.fromJSON(object.privateServiceConnectConfig)
        : undefined,
      serviceAttachment: isSet(object.serviceAttachment) ? globalThis.String(object.serviceAttachment) : "",
    };
  },

  toJSON(message: FeatureOnlineStore_DedicatedServingEndpoint): unknown {
    const obj: any = {};
    if (message.publicEndpointDomainName !== "") {
      obj.publicEndpointDomainName = message.publicEndpointDomainName;
    }
    if (message.privateServiceConnectConfig !== undefined) {
      obj.privateServiceConnectConfig = PrivateServiceConnectConfig.toJSON(message.privateServiceConnectConfig);
    }
    if (message.serviceAttachment !== "") {
      obj.serviceAttachment = message.serviceAttachment;
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureOnlineStore_DedicatedServingEndpoint>): FeatureOnlineStore_DedicatedServingEndpoint {
    return FeatureOnlineStore_DedicatedServingEndpoint.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<FeatureOnlineStore_DedicatedServingEndpoint>,
  ): FeatureOnlineStore_DedicatedServingEndpoint {
    const message = createBaseFeatureOnlineStore_DedicatedServingEndpoint();
    message.publicEndpointDomainName = object.publicEndpointDomainName ?? "";
    message.privateServiceConnectConfig =
      (object.privateServiceConnectConfig !== undefined && object.privateServiceConnectConfig !== null)
        ? PrivateServiceConnectConfig.fromPartial(object.privateServiceConnectConfig)
        : undefined;
    message.serviceAttachment = object.serviceAttachment ?? "";
    return message;
  },
};

function createBaseFeatureOnlineStore_LabelsEntry(): FeatureOnlineStore_LabelsEntry {
  return { key: "", value: "" };
}

export const FeatureOnlineStore_LabelsEntry: MessageFns<FeatureOnlineStore_LabelsEntry> = {
  encode(message: FeatureOnlineStore_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureOnlineStore_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureOnlineStore_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureOnlineStore_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: FeatureOnlineStore_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureOnlineStore_LabelsEntry>): FeatureOnlineStore_LabelsEntry {
    return FeatureOnlineStore_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureOnlineStore_LabelsEntry>): FeatureOnlineStore_LabelsEntry {
    const message = createBaseFeatureOnlineStore_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
