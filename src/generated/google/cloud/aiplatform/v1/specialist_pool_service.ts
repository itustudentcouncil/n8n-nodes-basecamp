// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/specialist_pool_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { GenericOperationMetadata } from "./operation.js";
import { SpecialistPool } from "./specialist_pool.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Request message for
 * [SpecialistPoolService.CreateSpecialistPool][google.cloud.aiplatform.v1.SpecialistPoolService.CreateSpecialistPool].
 */
export interface CreateSpecialistPoolRequest {
  /**
   * Required. The parent Project name for the new SpecialistPool.
   * The form is `projects/{project}/locations/{location}`.
   */
  parent: string;
  /** Required. The SpecialistPool to create. */
  specialistPool: SpecialistPool | undefined;
}

/**
 * Runtime operation information for
 * [SpecialistPoolService.CreateSpecialistPool][google.cloud.aiplatform.v1.SpecialistPoolService.CreateSpecialistPool].
 */
export interface CreateSpecialistPoolOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [SpecialistPoolService.GetSpecialistPool][google.cloud.aiplatform.v1.SpecialistPoolService.GetSpecialistPool].
 */
export interface GetSpecialistPoolRequest {
  /**
   * Required. The name of the SpecialistPool resource.
   * The form is
   * `projects/{project}/locations/{location}/specialistPools/{specialist_pool}`.
   */
  name: string;
}

/**
 * Request message for
 * [SpecialistPoolService.ListSpecialistPools][google.cloud.aiplatform.v1.SpecialistPoolService.ListSpecialistPools].
 */
export interface ListSpecialistPoolsRequest {
  /**
   * Required. The name of the SpecialistPool's parent resource.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** The standard list page size. */
  pageSize: number;
  /**
   * The standard list page token.
   * Typically obtained by
   * [ListSpecialistPoolsResponse.next_page_token][google.cloud.aiplatform.v1.ListSpecialistPoolsResponse.next_page_token]
   * of the previous
   * [SpecialistPoolService.ListSpecialistPools][google.cloud.aiplatform.v1.SpecialistPoolService.ListSpecialistPools]
   * call. Return first page if empty.
   */
  pageToken: string;
  /** Mask specifying which fields to read. FieldMask represents a set of */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [SpecialistPoolService.ListSpecialistPools][google.cloud.aiplatform.v1.SpecialistPoolService.ListSpecialistPools].
 */
export interface ListSpecialistPoolsResponse {
  /** A list of SpecialistPools that matches the specified filter in the request. */
  specialistPools: SpecialistPool[];
  /** The standard List next-page token. */
  nextPageToken: string;
}

/**
 * Request message for
 * [SpecialistPoolService.DeleteSpecialistPool][google.cloud.aiplatform.v1.SpecialistPoolService.DeleteSpecialistPool].
 */
export interface DeleteSpecialistPoolRequest {
  /**
   * Required. The resource name of the SpecialistPool to delete. Format:
   * `projects/{project}/locations/{location}/specialistPools/{specialist_pool}`
   */
  name: string;
  /**
   * If set to true, any specialist managers in this SpecialistPool will also be
   * deleted. (Otherwise, the request will only work if the SpecialistPool has
   * no specialist managers.)
   */
  force: boolean;
}

/**
 * Request message for
 * [SpecialistPoolService.UpdateSpecialistPool][google.cloud.aiplatform.v1.SpecialistPoolService.UpdateSpecialistPool].
 */
export interface UpdateSpecialistPoolRequest {
  /** Required. The SpecialistPool which replaces the resource on the server. */
  specialistPool:
    | SpecialistPool
    | undefined;
  /** Required. The update mask applies to the resource. */
  updateMask: string[] | undefined;
}

/**
 * Runtime operation metadata for
 * [SpecialistPoolService.UpdateSpecialistPool][google.cloud.aiplatform.v1.SpecialistPoolService.UpdateSpecialistPool].
 */
export interface UpdateSpecialistPoolOperationMetadata {
  /**
   * Output only. The name of the SpecialistPool to which the specialists are
   * being added. Format:
   * `projects/{project_id}/locations/{location_id}/specialistPools/{specialist_pool}`
   */
  specialistPool: string;
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

function createBaseCreateSpecialistPoolRequest(): CreateSpecialistPoolRequest {
  return { parent: "", specialistPool: undefined };
}

export const CreateSpecialistPoolRequest: MessageFns<CreateSpecialistPoolRequest> = {
  encode(message: CreateSpecialistPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.specialistPool !== undefined) {
      SpecialistPool.encode(message.specialistPool, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSpecialistPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSpecialistPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.specialistPool = SpecialistPool.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSpecialistPoolRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      specialistPool: isSet(object.specialistPool) ? SpecialistPool.fromJSON(object.specialistPool) : undefined,
    };
  },

  toJSON(message: CreateSpecialistPoolRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.specialistPool !== undefined) {
      obj.specialistPool = SpecialistPool.toJSON(message.specialistPool);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSpecialistPoolRequest>): CreateSpecialistPoolRequest {
    return CreateSpecialistPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSpecialistPoolRequest>): CreateSpecialistPoolRequest {
    const message = createBaseCreateSpecialistPoolRequest();
    message.parent = object.parent ?? "";
    message.specialistPool = (object.specialistPool !== undefined && object.specialistPool !== null)
      ? SpecialistPool.fromPartial(object.specialistPool)
      : undefined;
    return message;
  },
};

function createBaseCreateSpecialistPoolOperationMetadata(): CreateSpecialistPoolOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateSpecialistPoolOperationMetadata: MessageFns<CreateSpecialistPoolOperationMetadata> = {
  encode(message: CreateSpecialistPoolOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSpecialistPoolOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSpecialistPoolOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSpecialistPoolOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateSpecialistPoolOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSpecialistPoolOperationMetadata>): CreateSpecialistPoolOperationMetadata {
    return CreateSpecialistPoolOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSpecialistPoolOperationMetadata>): CreateSpecialistPoolOperationMetadata {
    const message = createBaseCreateSpecialistPoolOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseGetSpecialistPoolRequest(): GetSpecialistPoolRequest {
  return { name: "" };
}

export const GetSpecialistPoolRequest: MessageFns<GetSpecialistPoolRequest> = {
  encode(message: GetSpecialistPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpecialistPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpecialistPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpecialistPoolRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSpecialistPoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSpecialistPoolRequest>): GetSpecialistPoolRequest {
    return GetSpecialistPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSpecialistPoolRequest>): GetSpecialistPoolRequest {
    const message = createBaseGetSpecialistPoolRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListSpecialistPoolsRequest(): ListSpecialistPoolsRequest {
  return { parent: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListSpecialistPoolsRequest: MessageFns<ListSpecialistPoolsRequest> = {
  encode(message: ListSpecialistPoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpecialistPoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpecialistPoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpecialistPoolsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListSpecialistPoolsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListSpecialistPoolsRequest>): ListSpecialistPoolsRequest {
    return ListSpecialistPoolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSpecialistPoolsRequest>): ListSpecialistPoolsRequest {
    const message = createBaseListSpecialistPoolsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListSpecialistPoolsResponse(): ListSpecialistPoolsResponse {
  return { specialistPools: [], nextPageToken: "" };
}

export const ListSpecialistPoolsResponse: MessageFns<ListSpecialistPoolsResponse> = {
  encode(message: ListSpecialistPoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.specialistPools) {
      SpecialistPool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSpecialistPoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSpecialistPoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.specialistPools.push(SpecialistPool.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSpecialistPoolsResponse {
    return {
      specialistPools: globalThis.Array.isArray(object?.specialistPools)
        ? object.specialistPools.map((e: any) => SpecialistPool.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSpecialistPoolsResponse): unknown {
    const obj: any = {};
    if (message.specialistPools?.length) {
      obj.specialistPools = message.specialistPools.map((e) => SpecialistPool.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSpecialistPoolsResponse>): ListSpecialistPoolsResponse {
    return ListSpecialistPoolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSpecialistPoolsResponse>): ListSpecialistPoolsResponse {
    const message = createBaseListSpecialistPoolsResponse();
    message.specialistPools = object.specialistPools?.map((e) => SpecialistPool.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteSpecialistPoolRequest(): DeleteSpecialistPoolRequest {
  return { name: "", force: false };
}

export const DeleteSpecialistPoolRequest: MessageFns<DeleteSpecialistPoolRequest> = {
  encode(message: DeleteSpecialistPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSpecialistPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSpecialistPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSpecialistPoolRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteSpecialistPoolRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSpecialistPoolRequest>): DeleteSpecialistPoolRequest {
    return DeleteSpecialistPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSpecialistPoolRequest>): DeleteSpecialistPoolRequest {
    const message = createBaseDeleteSpecialistPoolRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseUpdateSpecialistPoolRequest(): UpdateSpecialistPoolRequest {
  return { specialistPool: undefined, updateMask: undefined };
}

export const UpdateSpecialistPoolRequest: MessageFns<UpdateSpecialistPoolRequest> = {
  encode(message: UpdateSpecialistPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.specialistPool !== undefined) {
      SpecialistPool.encode(message.specialistPool, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSpecialistPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSpecialistPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.specialistPool = SpecialistPool.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSpecialistPoolRequest {
    return {
      specialistPool: isSet(object.specialistPool) ? SpecialistPool.fromJSON(object.specialistPool) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSpecialistPoolRequest): unknown {
    const obj: any = {};
    if (message.specialistPool !== undefined) {
      obj.specialistPool = SpecialistPool.toJSON(message.specialistPool);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSpecialistPoolRequest>): UpdateSpecialistPoolRequest {
    return UpdateSpecialistPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSpecialistPoolRequest>): UpdateSpecialistPoolRequest {
    const message = createBaseUpdateSpecialistPoolRequest();
    message.specialistPool = (object.specialistPool !== undefined && object.specialistPool !== null)
      ? SpecialistPool.fromPartial(object.specialistPool)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateSpecialistPoolOperationMetadata(): UpdateSpecialistPoolOperationMetadata {
  return { specialistPool: "", genericMetadata: undefined };
}

export const UpdateSpecialistPoolOperationMetadata: MessageFns<UpdateSpecialistPoolOperationMetadata> = {
  encode(message: UpdateSpecialistPoolOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.specialistPool !== "") {
      writer.uint32(10).string(message.specialistPool);
    }
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSpecialistPoolOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSpecialistPoolOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.specialistPool = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSpecialistPoolOperationMetadata {
    return {
      specialistPool: isSet(object.specialistPool) ? globalThis.String(object.specialistPool) : "",
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UpdateSpecialistPoolOperationMetadata): unknown {
    const obj: any = {};
    if (message.specialistPool !== "") {
      obj.specialistPool = message.specialistPool;
    }
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSpecialistPoolOperationMetadata>): UpdateSpecialistPoolOperationMetadata {
    return UpdateSpecialistPoolOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSpecialistPoolOperationMetadata>): UpdateSpecialistPoolOperationMetadata {
    const message = createBaseUpdateSpecialistPoolOperationMetadata();
    message.specialistPool = object.specialistPool ?? "";
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

/**
 * A service for creating and managing Customer SpecialistPools.
 * When customers start Data Labeling jobs, they can reuse/create Specialist
 * Pools to bring their own Specialists to label the data.
 * Customers can add/remove Managers for the Specialist Pool on Cloud console,
 * then Managers will get email notifications to manage Specialists and tasks on
 * CrowdCompute console.
 */
export type SpecialistPoolServiceDefinition = typeof SpecialistPoolServiceDefinition;
export const SpecialistPoolServiceDefinition = {
  name: "SpecialistPoolService",
  fullName: "google.cloud.aiplatform.v1.SpecialistPoolService",
  methods: {
    /** Creates a SpecialistPool. */
    createSpecialistPool: {
      name: "CreateSpecialistPool",
      requestType: CreateSpecialistPoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              55,
              10,
              14,
              83,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              80,
              111,
              111,
              108,
              18,
              37,
              67,
              114,
              101,
              97,
              116,
              101,
              83,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              80,
              111,
              111,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              22,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              95,
              112,
              111,
              111,
              108,
            ]),
          ],
          578365826: [
            Buffer.from([
              70,
              58,
              15,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              95,
              112,
              111,
              111,
              108,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a SpecialistPool. */
    getSpecialistPool: {
      name: "GetSpecialistPool",
      requestType: GetSpecialistPoolRequest,
      requestStream: false,
      responseType: SpecialistPool,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists SpecialistPools in a Location. */
    listSpecialistPools: {
      name: "ListSpecialistPools",
      requestType: ListSpecialistPoolsRequest,
      requestStream: false,
      responseType: ListSpecialistPoolsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              80,
              111,
              111,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a SpecialistPool as well as all Specialists in the pool. */
    deleteSpecialistPool: {
      name: "DeleteSpecialistPool",
      requestType: DeleteSpecialistPoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a SpecialistPool. */
    updateSpecialistPool: {
      name: "UpdateSpecialistPool",
      requestType: UpdateSpecialistPoolRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              55,
              10,
              14,
              83,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              80,
              111,
              111,
              108,
              18,
              37,
              85,
              112,
              100,
              97,
              116,
              101,
              83,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              80,
              111,
              111,
              108,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              27,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              95,
              112,
              111,
              111,
              108,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              86,
              58,
              15,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              95,
              112,
              111,
              111,
              108,
              50,
              67,
              47,
              118,
              49,
              47,
              123,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              95,
              112,
              111,
              111,
              108,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              115,
              116,
              80,
              111,
              111,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SpecialistPoolServiceImplementation<CallContextExt = {}> {
  /** Creates a SpecialistPool. */
  createSpecialistPool(
    request: CreateSpecialistPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a SpecialistPool. */
  getSpecialistPool(
    request: GetSpecialistPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SpecialistPool>>;
  /** Lists SpecialistPools in a Location. */
  listSpecialistPools(
    request: ListSpecialistPoolsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSpecialistPoolsResponse>>;
  /** Deletes a SpecialistPool as well as all Specialists in the pool. */
  deleteSpecialistPool(
    request: DeleteSpecialistPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a SpecialistPool. */
  updateSpecialistPool(
    request: UpdateSpecialistPoolRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface SpecialistPoolServiceClient<CallOptionsExt = {}> {
  /** Creates a SpecialistPool. */
  createSpecialistPool(
    request: DeepPartial<CreateSpecialistPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a SpecialistPool. */
  getSpecialistPool(
    request: DeepPartial<GetSpecialistPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SpecialistPool>;
  /** Lists SpecialistPools in a Location. */
  listSpecialistPools(
    request: DeepPartial<ListSpecialistPoolsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSpecialistPoolsResponse>;
  /** Deletes a SpecialistPool as well as all Specialists in the pool. */
  deleteSpecialistPool(
    request: DeepPartial<DeleteSpecialistPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a SpecialistPool. */
  updateSpecialistPool(
    request: DeepPartial<UpdateSpecialistPoolRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
