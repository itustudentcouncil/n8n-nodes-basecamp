// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/featurestore_monitoring.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1";

/** Configuration of how features in Featurestore are monitored. */
export interface FeaturestoreMonitoringConfig {
  /** The config for Snapshot Analysis Based Feature Monitoring. */
  snapshotAnalysis:
    | FeaturestoreMonitoringConfig_SnapshotAnalysis
    | undefined;
  /** The config for ImportFeatures Analysis Based Feature Monitoring. */
  importFeaturesAnalysis:
    | FeaturestoreMonitoringConfig_ImportFeaturesAnalysis
    | undefined;
  /**
   * Threshold for numerical features of anomaly detection.
   * This is shared by all objectives of Featurestore Monitoring for numerical
   * features (i.e. Features with type
   * ([Feature.ValueType][google.cloud.aiplatform.v1.Feature.ValueType]) DOUBLE
   * or INT64).
   */
  numericalThresholdConfig:
    | FeaturestoreMonitoringConfig_ThresholdConfig
    | undefined;
  /**
   * Threshold for categorical features of anomaly detection.
   * This is shared by all types of Featurestore Monitoring for categorical
   * features (i.e. Features with type
   * ([Feature.ValueType][google.cloud.aiplatform.v1.Feature.ValueType]) BOOL or
   * STRING).
   */
  categoricalThresholdConfig: FeaturestoreMonitoringConfig_ThresholdConfig | undefined;
}

/**
 * Configuration of the Featurestore's Snapshot Analysis Based Monitoring.
 * This type of analysis generates statistics for each Feature based on a
 * snapshot of the latest feature value of each entities every
 * monitoring_interval.
 */
export interface FeaturestoreMonitoringConfig_SnapshotAnalysis {
  /**
   * The monitoring schedule for snapshot analysis.
   * For EntityType-level config:
   *   unset / disabled = true indicates disabled by
   *   default for Features under it; otherwise by default enable snapshot
   *   analysis monitoring with monitoring_interval for Features under it.
   * Feature-level config:
   *   disabled = true indicates disabled regardless of the EntityType-level
   *   config; unset monitoring_interval indicates going with EntityType-level
   *   config; otherwise run snapshot analysis monitoring with
   *   monitoring_interval regardless of the EntityType-level config.
   * Explicitly Disable the snapshot analysis based monitoring.
   */
  disabled: boolean;
  /**
   * Configuration of the snapshot analysis based monitoring pipeline
   * running interval. The value indicates number of days.
   */
  monitoringIntervalDays: number;
  /**
   * Customized export features time window for snapshot analysis. Unit is one
   * day. Default value is 3 weeks. Minimum value is 1 day. Maximum value is
   * 4000 days.
   */
  stalenessDays: number;
}

/**
 * Configuration of the Featurestore's ImportFeature Analysis Based
 * Monitoring. This type of analysis generates statistics for values of each
 * Feature imported by every
 * [ImportFeatureValues][google.cloud.aiplatform.v1.FeaturestoreService.ImportFeatureValues]
 * operation.
 */
export interface FeaturestoreMonitoringConfig_ImportFeaturesAnalysis {
  /**
   * Whether to enable / disable / inherite default hebavior for import
   * features analysis.
   */
  state: FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State;
  /**
   * The baseline used to do anomaly detection for the statistics generated by
   * import features analysis.
   */
  anomalyDetectionBaseline: FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline;
}

/** The state defines whether to enable ImportFeature analysis. */
export enum FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State {
  /** STATE_UNSPECIFIED - Should not be used. */
  STATE_UNSPECIFIED = 0,
  /**
   * DEFAULT - The default behavior of whether to enable the monitoring.
   * EntityType-level config: disabled.
   * Feature-level config: inherited from the configuration of EntityType
   * this Feature belongs to.
   */
  DEFAULT = 1,
  /**
   * ENABLED - Explicitly enables import features analysis.
   * EntityType-level config: by default enables import features analysis
   * for all Features under it. Feature-level config: enables import
   * features analysis regardless of the EntityType-level config.
   */
  ENABLED = 2,
  /**
   * DISABLED - Explicitly disables import features analysis.
   * EntityType-level config: by default disables import features analysis
   * for all Features under it. Feature-level config: disables import
   * features analysis regardless of the EntityType-level config.
   */
  DISABLED = 3,
  UNRECOGNIZED = -1,
}

export function featurestoreMonitoringConfig_ImportFeaturesAnalysis_StateFromJSON(
  object: any,
): FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State.STATE_UNSPECIFIED;
    case 1:
    case "DEFAULT":
      return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State.DEFAULT;
    case 2:
    case "ENABLED":
      return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State.ENABLED;
    case 3:
    case "DISABLED":
      return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State.DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State.UNRECOGNIZED;
  }
}

export function featurestoreMonitoringConfig_ImportFeaturesAnalysis_StateToJSON(
  object: FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State,
): string {
  switch (object) {
    case FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State.DEFAULT:
      return "DEFAULT";
    case FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State.ENABLED:
      return "ENABLED";
    case FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State.DISABLED:
      return "DISABLED";
    case FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Defines the baseline to do anomaly detection for feature values imported
 * by each
 * [ImportFeatureValues][google.cloud.aiplatform.v1.FeaturestoreService.ImportFeatureValues]
 * operation.
 */
export enum FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline {
  /** BASELINE_UNSPECIFIED - Should not be used. */
  BASELINE_UNSPECIFIED = 0,
  /**
   * LATEST_STATS - Choose the later one statistics generated by either most recent
   * snapshot analysis or previous import features analysis. If non of them
   * exists, skip anomaly detection and only generate a statistics.
   */
  LATEST_STATS = 1,
  /**
   * MOST_RECENT_SNAPSHOT_STATS - Use the statistics generated by the most recent snapshot analysis if
   * exists.
   */
  MOST_RECENT_SNAPSHOT_STATS = 2,
  /**
   * PREVIOUS_IMPORT_FEATURES_STATS - Use the statistics generated by the previous import features analysis
   * if exists.
   */
  PREVIOUS_IMPORT_FEATURES_STATS = 3,
  UNRECOGNIZED = -1,
}

export function featurestoreMonitoringConfig_ImportFeaturesAnalysis_BaselineFromJSON(
  object: any,
): FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline {
  switch (object) {
    case 0:
    case "BASELINE_UNSPECIFIED":
      return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline.BASELINE_UNSPECIFIED;
    case 1:
    case "LATEST_STATS":
      return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline.LATEST_STATS;
    case 2:
    case "MOST_RECENT_SNAPSHOT_STATS":
      return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline.MOST_RECENT_SNAPSHOT_STATS;
    case 3:
    case "PREVIOUS_IMPORT_FEATURES_STATS":
      return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline.PREVIOUS_IMPORT_FEATURES_STATS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline.UNRECOGNIZED;
  }
}

export function featurestoreMonitoringConfig_ImportFeaturesAnalysis_BaselineToJSON(
  object: FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline,
): string {
  switch (object) {
    case FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline.BASELINE_UNSPECIFIED:
      return "BASELINE_UNSPECIFIED";
    case FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline.LATEST_STATS:
      return "LATEST_STATS";
    case FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline.MOST_RECENT_SNAPSHOT_STATS:
      return "MOST_RECENT_SNAPSHOT_STATS";
    case FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline.PREVIOUS_IMPORT_FEATURES_STATS:
      return "PREVIOUS_IMPORT_FEATURES_STATS";
    case FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** The config for Featurestore Monitoring threshold. */
export interface FeaturestoreMonitoringConfig_ThresholdConfig {
  /**
   * Specify a threshold value that can trigger the alert.
   * 1. For categorical feature, the distribution distance is calculated by
   * L-inifinity norm.
   * 2. For numerical feature, the distribution distance is calculated by
   * Jensenâ€“Shannon divergence. Each feature must have a non-zero threshold
   * if they need to be monitored. Otherwise no alert will be triggered for
   * that feature.
   */
  value?: number | undefined;
}

function createBaseFeaturestoreMonitoringConfig(): FeaturestoreMonitoringConfig {
  return {
    snapshotAnalysis: undefined,
    importFeaturesAnalysis: undefined,
    numericalThresholdConfig: undefined,
    categoricalThresholdConfig: undefined,
  };
}

export const FeaturestoreMonitoringConfig: MessageFns<FeaturestoreMonitoringConfig> = {
  encode(message: FeaturestoreMonitoringConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapshotAnalysis !== undefined) {
      FeaturestoreMonitoringConfig_SnapshotAnalysis.encode(message.snapshotAnalysis, writer.uint32(10).fork()).join();
    }
    if (message.importFeaturesAnalysis !== undefined) {
      FeaturestoreMonitoringConfig_ImportFeaturesAnalysis.encode(
        message.importFeaturesAnalysis,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.numericalThresholdConfig !== undefined) {
      FeaturestoreMonitoringConfig_ThresholdConfig.encode(message.numericalThresholdConfig, writer.uint32(26).fork())
        .join();
    }
    if (message.categoricalThresholdConfig !== undefined) {
      FeaturestoreMonitoringConfig_ThresholdConfig.encode(message.categoricalThresholdConfig, writer.uint32(34).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeaturestoreMonitoringConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeaturestoreMonitoringConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.snapshotAnalysis = FeaturestoreMonitoringConfig_SnapshotAnalysis.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.importFeaturesAnalysis = FeaturestoreMonitoringConfig_ImportFeaturesAnalysis.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.numericalThresholdConfig = FeaturestoreMonitoringConfig_ThresholdConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.categoricalThresholdConfig = FeaturestoreMonitoringConfig_ThresholdConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeaturestoreMonitoringConfig {
    return {
      snapshotAnalysis: isSet(object.snapshotAnalysis)
        ? FeaturestoreMonitoringConfig_SnapshotAnalysis.fromJSON(object.snapshotAnalysis)
        : undefined,
      importFeaturesAnalysis: isSet(object.importFeaturesAnalysis)
        ? FeaturestoreMonitoringConfig_ImportFeaturesAnalysis.fromJSON(object.importFeaturesAnalysis)
        : undefined,
      numericalThresholdConfig: isSet(object.numericalThresholdConfig)
        ? FeaturestoreMonitoringConfig_ThresholdConfig.fromJSON(object.numericalThresholdConfig)
        : undefined,
      categoricalThresholdConfig: isSet(object.categoricalThresholdConfig)
        ? FeaturestoreMonitoringConfig_ThresholdConfig.fromJSON(object.categoricalThresholdConfig)
        : undefined,
    };
  },

  toJSON(message: FeaturestoreMonitoringConfig): unknown {
    const obj: any = {};
    if (message.snapshotAnalysis !== undefined) {
      obj.snapshotAnalysis = FeaturestoreMonitoringConfig_SnapshotAnalysis.toJSON(message.snapshotAnalysis);
    }
    if (message.importFeaturesAnalysis !== undefined) {
      obj.importFeaturesAnalysis = FeaturestoreMonitoringConfig_ImportFeaturesAnalysis.toJSON(
        message.importFeaturesAnalysis,
      );
    }
    if (message.numericalThresholdConfig !== undefined) {
      obj.numericalThresholdConfig = FeaturestoreMonitoringConfig_ThresholdConfig.toJSON(
        message.numericalThresholdConfig,
      );
    }
    if (message.categoricalThresholdConfig !== undefined) {
      obj.categoricalThresholdConfig = FeaturestoreMonitoringConfig_ThresholdConfig.toJSON(
        message.categoricalThresholdConfig,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<FeaturestoreMonitoringConfig>): FeaturestoreMonitoringConfig {
    return FeaturestoreMonitoringConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeaturestoreMonitoringConfig>): FeaturestoreMonitoringConfig {
    const message = createBaseFeaturestoreMonitoringConfig();
    message.snapshotAnalysis = (object.snapshotAnalysis !== undefined && object.snapshotAnalysis !== null)
      ? FeaturestoreMonitoringConfig_SnapshotAnalysis.fromPartial(object.snapshotAnalysis)
      : undefined;
    message.importFeaturesAnalysis =
      (object.importFeaturesAnalysis !== undefined && object.importFeaturesAnalysis !== null)
        ? FeaturestoreMonitoringConfig_ImportFeaturesAnalysis.fromPartial(object.importFeaturesAnalysis)
        : undefined;
    message.numericalThresholdConfig =
      (object.numericalThresholdConfig !== undefined && object.numericalThresholdConfig !== null)
        ? FeaturestoreMonitoringConfig_ThresholdConfig.fromPartial(object.numericalThresholdConfig)
        : undefined;
    message.categoricalThresholdConfig =
      (object.categoricalThresholdConfig !== undefined && object.categoricalThresholdConfig !== null)
        ? FeaturestoreMonitoringConfig_ThresholdConfig.fromPartial(object.categoricalThresholdConfig)
        : undefined;
    return message;
  },
};

function createBaseFeaturestoreMonitoringConfig_SnapshotAnalysis(): FeaturestoreMonitoringConfig_SnapshotAnalysis {
  return { disabled: false, monitoringIntervalDays: 0, stalenessDays: 0 };
}

export const FeaturestoreMonitoringConfig_SnapshotAnalysis: MessageFns<FeaturestoreMonitoringConfig_SnapshotAnalysis> =
  {
    encode(
      message: FeaturestoreMonitoringConfig_SnapshotAnalysis,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.disabled !== false) {
        writer.uint32(8).bool(message.disabled);
      }
      if (message.monitoringIntervalDays !== 0) {
        writer.uint32(24).int32(message.monitoringIntervalDays);
      }
      if (message.stalenessDays !== 0) {
        writer.uint32(32).int32(message.stalenessDays);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): FeaturestoreMonitoringConfig_SnapshotAnalysis {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseFeaturestoreMonitoringConfig_SnapshotAnalysis();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.disabled = reader.bool();
            continue;
          case 3:
            if (tag !== 24) {
              break;
            }

            message.monitoringIntervalDays = reader.int32();
            continue;
          case 4:
            if (tag !== 32) {
              break;
            }

            message.stalenessDays = reader.int32();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): FeaturestoreMonitoringConfig_SnapshotAnalysis {
      return {
        disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
        monitoringIntervalDays: isSet(object.monitoringIntervalDays)
          ? globalThis.Number(object.monitoringIntervalDays)
          : 0,
        stalenessDays: isSet(object.stalenessDays) ? globalThis.Number(object.stalenessDays) : 0,
      };
    },

    toJSON(message: FeaturestoreMonitoringConfig_SnapshotAnalysis): unknown {
      const obj: any = {};
      if (message.disabled !== false) {
        obj.disabled = message.disabled;
      }
      if (message.monitoringIntervalDays !== 0) {
        obj.monitoringIntervalDays = Math.round(message.monitoringIntervalDays);
      }
      if (message.stalenessDays !== 0) {
        obj.stalenessDays = Math.round(message.stalenessDays);
      }
      return obj;
    },

    create(
      base?: DeepPartial<FeaturestoreMonitoringConfig_SnapshotAnalysis>,
    ): FeaturestoreMonitoringConfig_SnapshotAnalysis {
      return FeaturestoreMonitoringConfig_SnapshotAnalysis.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<FeaturestoreMonitoringConfig_SnapshotAnalysis>,
    ): FeaturestoreMonitoringConfig_SnapshotAnalysis {
      const message = createBaseFeaturestoreMonitoringConfig_SnapshotAnalysis();
      message.disabled = object.disabled ?? false;
      message.monitoringIntervalDays = object.monitoringIntervalDays ?? 0;
      message.stalenessDays = object.stalenessDays ?? 0;
      return message;
    },
  };

function createBaseFeaturestoreMonitoringConfig_ImportFeaturesAnalysis(): FeaturestoreMonitoringConfig_ImportFeaturesAnalysis {
  return { state: 0, anomalyDetectionBaseline: 0 };
}

export const FeaturestoreMonitoringConfig_ImportFeaturesAnalysis: MessageFns<
  FeaturestoreMonitoringConfig_ImportFeaturesAnalysis
> = {
  encode(
    message: FeaturestoreMonitoringConfig_ImportFeaturesAnalysis,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.anomalyDetectionBaseline !== 0) {
      writer.uint32(16).int32(message.anomalyDetectionBaseline);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeaturestoreMonitoringConfig_ImportFeaturesAnalysis {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeaturestoreMonitoringConfig_ImportFeaturesAnalysis();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.anomalyDetectionBaseline = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeaturestoreMonitoringConfig_ImportFeaturesAnalysis {
    return {
      state: isSet(object.state) ? featurestoreMonitoringConfig_ImportFeaturesAnalysis_StateFromJSON(object.state) : 0,
      anomalyDetectionBaseline: isSet(object.anomalyDetectionBaseline)
        ? featurestoreMonitoringConfig_ImportFeaturesAnalysis_BaselineFromJSON(object.anomalyDetectionBaseline)
        : 0,
    };
  },

  toJSON(message: FeaturestoreMonitoringConfig_ImportFeaturesAnalysis): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = featurestoreMonitoringConfig_ImportFeaturesAnalysis_StateToJSON(message.state);
    }
    if (message.anomalyDetectionBaseline !== 0) {
      obj.anomalyDetectionBaseline = featurestoreMonitoringConfig_ImportFeaturesAnalysis_BaselineToJSON(
        message.anomalyDetectionBaseline,
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<FeaturestoreMonitoringConfig_ImportFeaturesAnalysis>,
  ): FeaturestoreMonitoringConfig_ImportFeaturesAnalysis {
    return FeaturestoreMonitoringConfig_ImportFeaturesAnalysis.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<FeaturestoreMonitoringConfig_ImportFeaturesAnalysis>,
  ): FeaturestoreMonitoringConfig_ImportFeaturesAnalysis {
    const message = createBaseFeaturestoreMonitoringConfig_ImportFeaturesAnalysis();
    message.state = object.state ?? 0;
    message.anomalyDetectionBaseline = object.anomalyDetectionBaseline ?? 0;
    return message;
  },
};

function createBaseFeaturestoreMonitoringConfig_ThresholdConfig(): FeaturestoreMonitoringConfig_ThresholdConfig {
  return { value: undefined };
}

export const FeaturestoreMonitoringConfig_ThresholdConfig: MessageFns<FeaturestoreMonitoringConfig_ThresholdConfig> = {
  encode(
    message: FeaturestoreMonitoringConfig_ThresholdConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeaturestoreMonitoringConfig_ThresholdConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeaturestoreMonitoringConfig_ThresholdConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeaturestoreMonitoringConfig_ThresholdConfig {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : undefined };
  },

  toJSON(message: FeaturestoreMonitoringConfig_ThresholdConfig): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<FeaturestoreMonitoringConfig_ThresholdConfig>,
  ): FeaturestoreMonitoringConfig_ThresholdConfig {
    return FeaturestoreMonitoringConfig_ThresholdConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<FeaturestoreMonitoringConfig_ThresholdConfig>,
  ): FeaturestoreMonitoringConfig_ThresholdConfig {
    const message = createBaseFeaturestoreMonitoringConfig_ThresholdConfig();
    message.value = object.value ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
