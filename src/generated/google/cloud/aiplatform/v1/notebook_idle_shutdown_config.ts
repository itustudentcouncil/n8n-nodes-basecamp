// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/notebook_idle_shutdown_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../../../protobuf/duration.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * The idle shutdown configuration of NotebookRuntimeTemplate, which contains
 * the idle_timeout as required field.
 */
export interface NotebookIdleShutdownConfig {
  /**
   * Required. Duration is accurate to the second. In Notebook, Idle Timeout is
   * accurate to minute so the range of idle_timeout (second) is: 10 * 60 ~ 1440
   * * 60.
   */
  idleTimeout:
    | Duration
    | undefined;
  /** Whether Idle Shutdown is disabled in this NotebookRuntimeTemplate. */
  idleShutdownDisabled: boolean;
}

function createBaseNotebookIdleShutdownConfig(): NotebookIdleShutdownConfig {
  return { idleTimeout: undefined, idleShutdownDisabled: false };
}

export const NotebookIdleShutdownConfig: MessageFns<NotebookIdleShutdownConfig> = {
  encode(message: NotebookIdleShutdownConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idleTimeout !== undefined) {
      Duration.encode(message.idleTimeout, writer.uint32(10).fork()).join();
    }
    if (message.idleShutdownDisabled !== false) {
      writer.uint32(16).bool(message.idleShutdownDisabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotebookIdleShutdownConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotebookIdleShutdownConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idleTimeout = Duration.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.idleShutdownDisabled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotebookIdleShutdownConfig {
    return {
      idleTimeout: isSet(object.idleTimeout) ? Duration.fromJSON(object.idleTimeout) : undefined,
      idleShutdownDisabled: isSet(object.idleShutdownDisabled)
        ? globalThis.Boolean(object.idleShutdownDisabled)
        : false,
    };
  },

  toJSON(message: NotebookIdleShutdownConfig): unknown {
    const obj: any = {};
    if (message.idleTimeout !== undefined) {
      obj.idleTimeout = Duration.toJSON(message.idleTimeout);
    }
    if (message.idleShutdownDisabled !== false) {
      obj.idleShutdownDisabled = message.idleShutdownDisabled;
    }
    return obj;
  },

  create(base?: DeepPartial<NotebookIdleShutdownConfig>): NotebookIdleShutdownConfig {
    return NotebookIdleShutdownConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotebookIdleShutdownConfig>): NotebookIdleShutdownConfig {
    const message = createBaseNotebookIdleShutdownConfig();
    message.idleTimeout = (object.idleTimeout !== undefined && object.idleTimeout !== null)
      ? Duration.fromPartial(object.idleTimeout)
      : undefined;
    message.idleShutdownDisabled = object.idleShutdownDisabled ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
