// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/model_garden_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { PublisherModel } from "./publisher_model.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/** View enumeration of PublisherModel. */
export enum PublisherModelView {
  /** PUBLISHER_MODEL_VIEW_UNSPECIFIED - The default / unset value. The API will default to the BASIC view. */
  PUBLISHER_MODEL_VIEW_UNSPECIFIED = 0,
  /**
   * PUBLISHER_MODEL_VIEW_BASIC - Include basic metadata about the publisher model, but not the full
   * contents.
   */
  PUBLISHER_MODEL_VIEW_BASIC = 1,
  /** PUBLISHER_MODEL_VIEW_FULL - Include everything. */
  PUBLISHER_MODEL_VIEW_FULL = 2,
  /** PUBLISHER_MODEL_VERSION_VIEW_BASIC - Include: VersionId, ModelVersionExternalName, and SupportedActions. */
  PUBLISHER_MODEL_VERSION_VIEW_BASIC = 3,
  UNRECOGNIZED = -1,
}

export function publisherModelViewFromJSON(object: any): PublisherModelView {
  switch (object) {
    case 0:
    case "PUBLISHER_MODEL_VIEW_UNSPECIFIED":
      return PublisherModelView.PUBLISHER_MODEL_VIEW_UNSPECIFIED;
    case 1:
    case "PUBLISHER_MODEL_VIEW_BASIC":
      return PublisherModelView.PUBLISHER_MODEL_VIEW_BASIC;
    case 2:
    case "PUBLISHER_MODEL_VIEW_FULL":
      return PublisherModelView.PUBLISHER_MODEL_VIEW_FULL;
    case 3:
    case "PUBLISHER_MODEL_VERSION_VIEW_BASIC":
      return PublisherModelView.PUBLISHER_MODEL_VERSION_VIEW_BASIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PublisherModelView.UNRECOGNIZED;
  }
}

export function publisherModelViewToJSON(object: PublisherModelView): string {
  switch (object) {
    case PublisherModelView.PUBLISHER_MODEL_VIEW_UNSPECIFIED:
      return "PUBLISHER_MODEL_VIEW_UNSPECIFIED";
    case PublisherModelView.PUBLISHER_MODEL_VIEW_BASIC:
      return "PUBLISHER_MODEL_VIEW_BASIC";
    case PublisherModelView.PUBLISHER_MODEL_VIEW_FULL:
      return "PUBLISHER_MODEL_VIEW_FULL";
    case PublisherModelView.PUBLISHER_MODEL_VERSION_VIEW_BASIC:
      return "PUBLISHER_MODEL_VERSION_VIEW_BASIC";
    case PublisherModelView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Request message for
 * [ModelGardenService.GetPublisherModel][google.cloud.aiplatform.v1.ModelGardenService.GetPublisherModel]
 */
export interface GetPublisherModelRequest {
  /**
   * Required. The name of the PublisherModel resource.
   * Format:
   * `publishers/{publisher}/models/{publisher_model}`
   */
  name: string;
  /**
   * Optional. The IETF BCP-47 language code representing the language in which
   * the publisher model's text information should be written in.
   */
  languageCode: string;
  /** Optional. PublisherModel view specifying which fields to read. */
  view: PublisherModelView;
  /**
   * Optional. Boolean indicates whether the requested model is a Hugging Face
   * model.
   */
  isHuggingFaceModel: boolean;
  /** Optional. Token used to access Hugging Face gated models. */
  huggingFaceToken: string;
}

function createBaseGetPublisherModelRequest(): GetPublisherModelRequest {
  return { name: "", languageCode: "", view: 0, isHuggingFaceModel: false, huggingFaceToken: "" };
}

export const GetPublisherModelRequest: MessageFns<GetPublisherModelRequest> = {
  encode(message: GetPublisherModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.view !== 0) {
      writer.uint32(24).int32(message.view);
    }
    if (message.isHuggingFaceModel !== false) {
      writer.uint32(40).bool(message.isHuggingFaceModel);
    }
    if (message.huggingFaceToken !== "") {
      writer.uint32(50).string(message.huggingFaceToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPublisherModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPublisherModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isHuggingFaceModel = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.huggingFaceToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPublisherModelRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      view: isSet(object.view) ? publisherModelViewFromJSON(object.view) : 0,
      isHuggingFaceModel: isSet(object.isHuggingFaceModel) ? globalThis.Boolean(object.isHuggingFaceModel) : false,
      huggingFaceToken: isSet(object.huggingFaceToken) ? globalThis.String(object.huggingFaceToken) : "",
    };
  },

  toJSON(message: GetPublisherModelRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.view !== 0) {
      obj.view = publisherModelViewToJSON(message.view);
    }
    if (message.isHuggingFaceModel !== false) {
      obj.isHuggingFaceModel = message.isHuggingFaceModel;
    }
    if (message.huggingFaceToken !== "") {
      obj.huggingFaceToken = message.huggingFaceToken;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPublisherModelRequest>): GetPublisherModelRequest {
    return GetPublisherModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPublisherModelRequest>): GetPublisherModelRequest {
    const message = createBaseGetPublisherModelRequest();
    message.name = object.name ?? "";
    message.languageCode = object.languageCode ?? "";
    message.view = object.view ?? 0;
    message.isHuggingFaceModel = object.isHuggingFaceModel ?? false;
    message.huggingFaceToken = object.huggingFaceToken ?? "";
    return message;
  },
};

/** The interface of Model Garden Service. */
export type ModelGardenServiceDefinition = typeof ModelGardenServiceDefinition;
export const ModelGardenServiceDefinition = {
  name: "ModelGardenService",
  fullName: "google.cloud.aiplatform.v1.ModelGardenService",
  methods: {
    /** Gets a Model Garden publisher model. */
    getPublisherModel: {
      name: "GetPublisherModel",
      requestType: GetPublisherModelRequest,
      requestStream: false,
      responseType: PublisherModel,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              34,
              18,
              32,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              117,
              98,
              108,
              105,
              115,
              104,
              101,
              114,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ModelGardenServiceImplementation<CallContextExt = {}> {
  /** Gets a Model Garden publisher model. */
  getPublisherModel(
    request: GetPublisherModelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PublisherModel>>;
}

export interface ModelGardenServiceClient<CallOptionsExt = {}> {
  /** Gets a Model Garden publisher model. */
  getPublisherModel(
    request: DeepPartial<GetPublisherModelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PublisherModel>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
