// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/migratable_resource.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Represents one resource that exists in automl.googleapis.com,
 * datalabeling.googleapis.com or ml.googleapis.com.
 */
export interface MigratableResource {
  /** Output only. Represents one Version in ml.googleapis.com. */
  mlEngineModelVersion?:
    | MigratableResource_MlEngineModelVersion
    | undefined;
  /** Output only. Represents one Model in automl.googleapis.com. */
  automlModel?:
    | MigratableResource_AutomlModel
    | undefined;
  /** Output only. Represents one Dataset in automl.googleapis.com. */
  automlDataset?:
    | MigratableResource_AutomlDataset
    | undefined;
  /** Output only. Represents one Dataset in datalabeling.googleapis.com. */
  dataLabelingDataset?:
    | MigratableResource_DataLabelingDataset
    | undefined;
  /**
   * Output only. Timestamp when the last migration attempt on this
   * MigratableResource started. Will not be set if there's no migration attempt
   * on this MigratableResource.
   */
  lastMigrateTime:
    | Date
    | undefined;
  /** Output only. Timestamp when this MigratableResource was last updated. */
  lastUpdateTime: Date | undefined;
}

/** Represents one model Version in ml.googleapis.com. */
export interface MigratableResource_MlEngineModelVersion {
  /**
   * The ml.googleapis.com endpoint that this model Version currently lives
   * in.
   * Example values:
   *
   * * ml.googleapis.com
   * * us-centrall-ml.googleapis.com
   * * europe-west4-ml.googleapis.com
   * * asia-east1-ml.googleapis.com
   */
  endpoint: string;
  /**
   * Full resource name of ml engine model Version.
   * Format: `projects/{project}/models/{model}/versions/{version}`.
   */
  version: string;
}

/** Represents one Model in automl.googleapis.com. */
export interface MigratableResource_AutomlModel {
  /**
   * Full resource name of automl Model.
   * Format:
   * `projects/{project}/locations/{location}/models/{model}`.
   */
  model: string;
  /** The Model's display name in automl.googleapis.com. */
  modelDisplayName: string;
}

/** Represents one Dataset in automl.googleapis.com. */
export interface MigratableResource_AutomlDataset {
  /**
   * Full resource name of automl Dataset.
   * Format:
   * `projects/{project}/locations/{location}/datasets/{dataset}`.
   */
  dataset: string;
  /** The Dataset's display name in automl.googleapis.com. */
  datasetDisplayName: string;
}

/** Represents one Dataset in datalabeling.googleapis.com. */
export interface MigratableResource_DataLabelingDataset {
  /**
   * Full resource name of data labeling Dataset.
   * Format:
   * `projects/{project}/datasets/{dataset}`.
   */
  dataset: string;
  /** The Dataset's display name in datalabeling.googleapis.com. */
  datasetDisplayName: string;
  /**
   * The migratable AnnotatedDataset in datalabeling.googleapis.com belongs to
   * the data labeling Dataset.
   */
  dataLabelingAnnotatedDatasets: MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset[];
}

/** Represents one AnnotatedDataset in datalabeling.googleapis.com. */
export interface MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset {
  /**
   * Full resource name of data labeling AnnotatedDataset.
   * Format:
   * `projects/{project}/datasets/{dataset}/annotatedDatasets/{annotated_dataset}`.
   */
  annotatedDataset: string;
  /** The AnnotatedDataset's display name in datalabeling.googleapis.com. */
  annotatedDatasetDisplayName: string;
}

function createBaseMigratableResource(): MigratableResource {
  return {
    mlEngineModelVersion: undefined,
    automlModel: undefined,
    automlDataset: undefined,
    dataLabelingDataset: undefined,
    lastMigrateTime: undefined,
    lastUpdateTime: undefined,
  };
}

export const MigratableResource: MessageFns<MigratableResource> = {
  encode(message: MigratableResource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mlEngineModelVersion !== undefined) {
      MigratableResource_MlEngineModelVersion.encode(message.mlEngineModelVersion, writer.uint32(10).fork()).join();
    }
    if (message.automlModel !== undefined) {
      MigratableResource_AutomlModel.encode(message.automlModel, writer.uint32(18).fork()).join();
    }
    if (message.automlDataset !== undefined) {
      MigratableResource_AutomlDataset.encode(message.automlDataset, writer.uint32(26).fork()).join();
    }
    if (message.dataLabelingDataset !== undefined) {
      MigratableResource_DataLabelingDataset.encode(message.dataLabelingDataset, writer.uint32(34).fork()).join();
    }
    if (message.lastMigrateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastMigrateTime), writer.uint32(42).fork()).join();
    }
    if (message.lastUpdateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastUpdateTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigratableResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigratableResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mlEngineModelVersion = MigratableResource_MlEngineModelVersion.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.automlModel = MigratableResource_AutomlModel.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.automlDataset = MigratableResource_AutomlDataset.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataLabelingDataset = MigratableResource_DataLabelingDataset.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lastMigrateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.lastUpdateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigratableResource {
    return {
      mlEngineModelVersion: isSet(object.mlEngineModelVersion)
        ? MigratableResource_MlEngineModelVersion.fromJSON(object.mlEngineModelVersion)
        : undefined,
      automlModel: isSet(object.automlModel) ? MigratableResource_AutomlModel.fromJSON(object.automlModel) : undefined,
      automlDataset: isSet(object.automlDataset)
        ? MigratableResource_AutomlDataset.fromJSON(object.automlDataset)
        : undefined,
      dataLabelingDataset: isSet(object.dataLabelingDataset)
        ? MigratableResource_DataLabelingDataset.fromJSON(object.dataLabelingDataset)
        : undefined,
      lastMigrateTime: isSet(object.lastMigrateTime) ? fromJsonTimestamp(object.lastMigrateTime) : undefined,
      lastUpdateTime: isSet(object.lastUpdateTime) ? fromJsonTimestamp(object.lastUpdateTime) : undefined,
    };
  },

  toJSON(message: MigratableResource): unknown {
    const obj: any = {};
    if (message.mlEngineModelVersion !== undefined) {
      obj.mlEngineModelVersion = MigratableResource_MlEngineModelVersion.toJSON(message.mlEngineModelVersion);
    }
    if (message.automlModel !== undefined) {
      obj.automlModel = MigratableResource_AutomlModel.toJSON(message.automlModel);
    }
    if (message.automlDataset !== undefined) {
      obj.automlDataset = MigratableResource_AutomlDataset.toJSON(message.automlDataset);
    }
    if (message.dataLabelingDataset !== undefined) {
      obj.dataLabelingDataset = MigratableResource_DataLabelingDataset.toJSON(message.dataLabelingDataset);
    }
    if (message.lastMigrateTime !== undefined) {
      obj.lastMigrateTime = message.lastMigrateTime.toISOString();
    }
    if (message.lastUpdateTime !== undefined) {
      obj.lastUpdateTime = message.lastUpdateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<MigratableResource>): MigratableResource {
    return MigratableResource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigratableResource>): MigratableResource {
    const message = createBaseMigratableResource();
    message.mlEngineModelVersion = (object.mlEngineModelVersion !== undefined && object.mlEngineModelVersion !== null)
      ? MigratableResource_MlEngineModelVersion.fromPartial(object.mlEngineModelVersion)
      : undefined;
    message.automlModel = (object.automlModel !== undefined && object.automlModel !== null)
      ? MigratableResource_AutomlModel.fromPartial(object.automlModel)
      : undefined;
    message.automlDataset = (object.automlDataset !== undefined && object.automlDataset !== null)
      ? MigratableResource_AutomlDataset.fromPartial(object.automlDataset)
      : undefined;
    message.dataLabelingDataset = (object.dataLabelingDataset !== undefined && object.dataLabelingDataset !== null)
      ? MigratableResource_DataLabelingDataset.fromPartial(object.dataLabelingDataset)
      : undefined;
    message.lastMigrateTime = object.lastMigrateTime ?? undefined;
    message.lastUpdateTime = object.lastUpdateTime ?? undefined;
    return message;
  },
};

function createBaseMigratableResource_MlEngineModelVersion(): MigratableResource_MlEngineModelVersion {
  return { endpoint: "", version: "" };
}

export const MigratableResource_MlEngineModelVersion: MessageFns<MigratableResource_MlEngineModelVersion> = {
  encode(message: MigratableResource_MlEngineModelVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigratableResource_MlEngineModelVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigratableResource_MlEngineModelVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigratableResource_MlEngineModelVersion {
    return {
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: MigratableResource_MlEngineModelVersion): unknown {
    const obj: any = {};
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<MigratableResource_MlEngineModelVersion>): MigratableResource_MlEngineModelVersion {
    return MigratableResource_MlEngineModelVersion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigratableResource_MlEngineModelVersion>): MigratableResource_MlEngineModelVersion {
    const message = createBaseMigratableResource_MlEngineModelVersion();
    message.endpoint = object.endpoint ?? "";
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseMigratableResource_AutomlModel(): MigratableResource_AutomlModel {
  return { model: "", modelDisplayName: "" };
}

export const MigratableResource_AutomlModel: MessageFns<MigratableResource_AutomlModel> = {
  encode(message: MigratableResource_AutomlModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    if (message.modelDisplayName !== "") {
      writer.uint32(26).string(message.modelDisplayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigratableResource_AutomlModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigratableResource_AutomlModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.model = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modelDisplayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigratableResource_AutomlModel {
    return {
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      modelDisplayName: isSet(object.modelDisplayName) ? globalThis.String(object.modelDisplayName) : "",
    };
  },

  toJSON(message: MigratableResource_AutomlModel): unknown {
    const obj: any = {};
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.modelDisplayName !== "") {
      obj.modelDisplayName = message.modelDisplayName;
    }
    return obj;
  },

  create(base?: DeepPartial<MigratableResource_AutomlModel>): MigratableResource_AutomlModel {
    return MigratableResource_AutomlModel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigratableResource_AutomlModel>): MigratableResource_AutomlModel {
    const message = createBaseMigratableResource_AutomlModel();
    message.model = object.model ?? "";
    message.modelDisplayName = object.modelDisplayName ?? "";
    return message;
  },
};

function createBaseMigratableResource_AutomlDataset(): MigratableResource_AutomlDataset {
  return { dataset: "", datasetDisplayName: "" };
}

export const MigratableResource_AutomlDataset: MessageFns<MigratableResource_AutomlDataset> = {
  encode(message: MigratableResource_AutomlDataset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataset !== "") {
      writer.uint32(10).string(message.dataset);
    }
    if (message.datasetDisplayName !== "") {
      writer.uint32(34).string(message.datasetDisplayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigratableResource_AutomlDataset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigratableResource_AutomlDataset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.datasetDisplayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigratableResource_AutomlDataset {
    return {
      dataset: isSet(object.dataset) ? globalThis.String(object.dataset) : "",
      datasetDisplayName: isSet(object.datasetDisplayName) ? globalThis.String(object.datasetDisplayName) : "",
    };
  },

  toJSON(message: MigratableResource_AutomlDataset): unknown {
    const obj: any = {};
    if (message.dataset !== "") {
      obj.dataset = message.dataset;
    }
    if (message.datasetDisplayName !== "") {
      obj.datasetDisplayName = message.datasetDisplayName;
    }
    return obj;
  },

  create(base?: DeepPartial<MigratableResource_AutomlDataset>): MigratableResource_AutomlDataset {
    return MigratableResource_AutomlDataset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigratableResource_AutomlDataset>): MigratableResource_AutomlDataset {
    const message = createBaseMigratableResource_AutomlDataset();
    message.dataset = object.dataset ?? "";
    message.datasetDisplayName = object.datasetDisplayName ?? "";
    return message;
  },
};

function createBaseMigratableResource_DataLabelingDataset(): MigratableResource_DataLabelingDataset {
  return { dataset: "", datasetDisplayName: "", dataLabelingAnnotatedDatasets: [] };
}

export const MigratableResource_DataLabelingDataset: MessageFns<MigratableResource_DataLabelingDataset> = {
  encode(message: MigratableResource_DataLabelingDataset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dataset !== "") {
      writer.uint32(10).string(message.dataset);
    }
    if (message.datasetDisplayName !== "") {
      writer.uint32(34).string(message.datasetDisplayName);
    }
    for (const v of message.dataLabelingAnnotatedDatasets) {
      MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigratableResource_DataLabelingDataset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigratableResource_DataLabelingDataset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataset = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.datasetDisplayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataLabelingAnnotatedDatasets.push(
            MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigratableResource_DataLabelingDataset {
    return {
      dataset: isSet(object.dataset) ? globalThis.String(object.dataset) : "",
      datasetDisplayName: isSet(object.datasetDisplayName) ? globalThis.String(object.datasetDisplayName) : "",
      dataLabelingAnnotatedDatasets: globalThis.Array.isArray(object?.dataLabelingAnnotatedDatasets)
        ? object.dataLabelingAnnotatedDatasets.map((e: any) =>
          MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: MigratableResource_DataLabelingDataset): unknown {
    const obj: any = {};
    if (message.dataset !== "") {
      obj.dataset = message.dataset;
    }
    if (message.datasetDisplayName !== "") {
      obj.datasetDisplayName = message.datasetDisplayName;
    }
    if (message.dataLabelingAnnotatedDatasets?.length) {
      obj.dataLabelingAnnotatedDatasets = message.dataLabelingAnnotatedDatasets.map((e) =>
        MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<MigratableResource_DataLabelingDataset>): MigratableResource_DataLabelingDataset {
    return MigratableResource_DataLabelingDataset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigratableResource_DataLabelingDataset>): MigratableResource_DataLabelingDataset {
    const message = createBaseMigratableResource_DataLabelingDataset();
    message.dataset = object.dataset ?? "";
    message.datasetDisplayName = object.datasetDisplayName ?? "";
    message.dataLabelingAnnotatedDatasets =
      object.dataLabelingAnnotatedDatasets?.map((e) =>
        MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseMigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset(): MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset {
  return { annotatedDataset: "", annotatedDatasetDisplayName: "" };
}

export const MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset: MessageFns<
  MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset
> = {
  encode(
    message: MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.annotatedDataset !== "") {
      writer.uint32(10).string(message.annotatedDataset);
    }
    if (message.annotatedDatasetDisplayName !== "") {
      writer.uint32(26).string(message.annotatedDatasetDisplayName);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.annotatedDataset = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.annotatedDatasetDisplayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset {
    return {
      annotatedDataset: isSet(object.annotatedDataset) ? globalThis.String(object.annotatedDataset) : "",
      annotatedDatasetDisplayName: isSet(object.annotatedDatasetDisplayName)
        ? globalThis.String(object.annotatedDatasetDisplayName)
        : "",
    };
  },

  toJSON(message: MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset): unknown {
    const obj: any = {};
    if (message.annotatedDataset !== "") {
      obj.annotatedDataset = message.annotatedDataset;
    }
    if (message.annotatedDatasetDisplayName !== "") {
      obj.annotatedDatasetDisplayName = message.annotatedDatasetDisplayName;
    }
    return obj;
  },

  create(
    base?: DeepPartial<MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset>,
  ): MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset {
    return MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset>,
  ): MigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset {
    const message = createBaseMigratableResource_DataLabelingDataset_DataLabelingAnnotatedDataset();
    message.annotatedDataset = object.annotatedDataset ?? "";
    message.annotatedDatasetDisplayName = object.annotatedDatasetDisplayName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
