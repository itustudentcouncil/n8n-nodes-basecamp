// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/tensorboard_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  TensorboardTimeSeries_ValueType,
  tensorboardTimeSeries_ValueTypeFromJSON,
  tensorboardTimeSeries_ValueTypeToJSON,
} from "./tensorboard_time_series.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/** All the data stored in a TensorboardTimeSeries. */
export interface TimeSeriesData {
  /**
   * Required. The ID of the TensorboardTimeSeries, which will become the final
   * component of the TensorboardTimeSeries' resource name
   */
  tensorboardTimeSeriesId: string;
  /**
   * Required. Immutable. The value type of this time series. All the values in
   * this time series data must match this value type.
   */
  valueType: TensorboardTimeSeries_ValueType;
  /** Required. Data points in this time series. */
  values: TimeSeriesDataPoint[];
}

/** A TensorboardTimeSeries data point. */
export interface TimeSeriesDataPoint {
  /** A scalar value. */
  scalar?:
    | Scalar
    | undefined;
  /** A tensor value. */
  tensor?:
    | TensorboardTensor
    | undefined;
  /** A blob sequence value. */
  blobs?:
    | TensorboardBlobSequence
    | undefined;
  /** Wall clock timestamp when this data point is generated by the end user. */
  wallTime:
    | Date
    | undefined;
  /** Step index of this data point within the run. */
  step: Long;
}

/** One point viewable on a scalar metric plot. */
export interface Scalar {
  /** Value of the point at this step / timestamp. */
  value: number;
}

/** One point viewable on a tensor metric plot. */
export interface TensorboardTensor {
  /**
   * Required. Serialized form of
   * https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/tensor.proto
   */
  value: Buffer;
  /**
   * Optional. Version number of TensorProto used to serialize
   * [value][google.cloud.aiplatform.v1.TensorboardTensor.value].
   */
  versionNumber: number;
}

/**
 * One point viewable on a blob metric plot, but mostly just a wrapper message
 * to work around repeated fields can't be used directly within `oneof` fields.
 */
export interface TensorboardBlobSequence {
  /** List of blobs contained within the sequence. */
  values: TensorboardBlob[];
}

/** One blob (e.g, image, graph) viewable on a blob metric plot. */
export interface TensorboardBlob {
  /**
   * Output only. A URI safe key uniquely identifying a blob. Can be used to
   * locate the blob stored in the Cloud Storage bucket of the consumer project.
   */
  id: string;
  /**
   * Optional. The bytes of the blob is not present unless it's returned by the
   * ReadTensorboardBlobData endpoint.
   */
  data: Buffer;
}

function createBaseTimeSeriesData(): TimeSeriesData {
  return { tensorboardTimeSeriesId: "", valueType: 0, values: [] };
}

export const TimeSeriesData: MessageFns<TimeSeriesData> = {
  encode(message: TimeSeriesData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tensorboardTimeSeriesId !== "") {
      writer.uint32(10).string(message.tensorboardTimeSeriesId);
    }
    if (message.valueType !== 0) {
      writer.uint32(16).int32(message.valueType);
    }
    for (const v of message.values) {
      TimeSeriesDataPoint.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeSeriesData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeSeriesData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboardTimeSeriesId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.valueType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.values.push(TimeSeriesDataPoint.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeSeriesData {
    return {
      tensorboardTimeSeriesId: isSet(object.tensorboardTimeSeriesId)
        ? globalThis.String(object.tensorboardTimeSeriesId)
        : "",
      valueType: isSet(object.valueType) ? tensorboardTimeSeries_ValueTypeFromJSON(object.valueType) : 0,
      values: globalThis.Array.isArray(object?.values)
        ? object.values.map((e: any) => TimeSeriesDataPoint.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TimeSeriesData): unknown {
    const obj: any = {};
    if (message.tensorboardTimeSeriesId !== "") {
      obj.tensorboardTimeSeriesId = message.tensorboardTimeSeriesId;
    }
    if (message.valueType !== 0) {
      obj.valueType = tensorboardTimeSeries_ValueTypeToJSON(message.valueType);
    }
    if (message.values?.length) {
      obj.values = message.values.map((e) => TimeSeriesDataPoint.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TimeSeriesData>): TimeSeriesData {
    return TimeSeriesData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimeSeriesData>): TimeSeriesData {
    const message = createBaseTimeSeriesData();
    message.tensorboardTimeSeriesId = object.tensorboardTimeSeriesId ?? "";
    message.valueType = object.valueType ?? 0;
    message.values = object.values?.map((e) => TimeSeriesDataPoint.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTimeSeriesDataPoint(): TimeSeriesDataPoint {
  return { scalar: undefined, tensor: undefined, blobs: undefined, wallTime: undefined, step: Long.ZERO };
}

export const TimeSeriesDataPoint: MessageFns<TimeSeriesDataPoint> = {
  encode(message: TimeSeriesDataPoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scalar !== undefined) {
      Scalar.encode(message.scalar, writer.uint32(26).fork()).join();
    }
    if (message.tensor !== undefined) {
      TensorboardTensor.encode(message.tensor, writer.uint32(34).fork()).join();
    }
    if (message.blobs !== undefined) {
      TensorboardBlobSequence.encode(message.blobs, writer.uint32(42).fork()).join();
    }
    if (message.wallTime !== undefined) {
      Timestamp.encode(toTimestamp(message.wallTime), writer.uint32(10).fork()).join();
    }
    if (!message.step.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.step.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimeSeriesDataPoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeSeriesDataPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.scalar = Scalar.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tensor = TensorboardTensor.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.blobs = TensorboardBlobSequence.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.wallTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.step = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimeSeriesDataPoint {
    return {
      scalar: isSet(object.scalar) ? Scalar.fromJSON(object.scalar) : undefined,
      tensor: isSet(object.tensor) ? TensorboardTensor.fromJSON(object.tensor) : undefined,
      blobs: isSet(object.blobs) ? TensorboardBlobSequence.fromJSON(object.blobs) : undefined,
      wallTime: isSet(object.wallTime) ? fromJsonTimestamp(object.wallTime) : undefined,
      step: isSet(object.step) ? Long.fromValue(object.step) : Long.ZERO,
    };
  },

  toJSON(message: TimeSeriesDataPoint): unknown {
    const obj: any = {};
    if (message.scalar !== undefined) {
      obj.scalar = Scalar.toJSON(message.scalar);
    }
    if (message.tensor !== undefined) {
      obj.tensor = TensorboardTensor.toJSON(message.tensor);
    }
    if (message.blobs !== undefined) {
      obj.blobs = TensorboardBlobSequence.toJSON(message.blobs);
    }
    if (message.wallTime !== undefined) {
      obj.wallTime = message.wallTime.toISOString();
    }
    if (!message.step.equals(Long.ZERO)) {
      obj.step = (message.step || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<TimeSeriesDataPoint>): TimeSeriesDataPoint {
    return TimeSeriesDataPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimeSeriesDataPoint>): TimeSeriesDataPoint {
    const message = createBaseTimeSeriesDataPoint();
    message.scalar = (object.scalar !== undefined && object.scalar !== null)
      ? Scalar.fromPartial(object.scalar)
      : undefined;
    message.tensor = (object.tensor !== undefined && object.tensor !== null)
      ? TensorboardTensor.fromPartial(object.tensor)
      : undefined;
    message.blobs = (object.blobs !== undefined && object.blobs !== null)
      ? TensorboardBlobSequence.fromPartial(object.blobs)
      : undefined;
    message.wallTime = object.wallTime ?? undefined;
    message.step = (object.step !== undefined && object.step !== null) ? Long.fromValue(object.step) : Long.ZERO;
    return message;
  },
};

function createBaseScalar(): Scalar {
  return { value: 0 };
}

export const Scalar: MessageFns<Scalar> = {
  encode(message: Scalar, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Scalar {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScalar();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Scalar {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: Scalar): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Scalar>): Scalar {
    return Scalar.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Scalar>): Scalar {
    const message = createBaseScalar();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseTensorboardTensor(): TensorboardTensor {
  return { value: Buffer.alloc(0), versionNumber: 0 };
}

export const TensorboardTensor: MessageFns<TensorboardTensor> = {
  encode(message: TensorboardTensor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value.length !== 0) {
      writer.uint32(10).bytes(message.value);
    }
    if (message.versionNumber !== 0) {
      writer.uint32(16).int32(message.versionNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TensorboardTensor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTensorboardTensor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = Buffer.from(reader.bytes());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.versionNumber = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TensorboardTensor {
    return {
      value: isSet(object.value) ? Buffer.from(bytesFromBase64(object.value)) : Buffer.alloc(0),
      versionNumber: isSet(object.versionNumber) ? globalThis.Number(object.versionNumber) : 0,
    };
  },

  toJSON(message: TensorboardTensor): unknown {
    const obj: any = {};
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.versionNumber !== 0) {
      obj.versionNumber = Math.round(message.versionNumber);
    }
    return obj;
  },

  create(base?: DeepPartial<TensorboardTensor>): TensorboardTensor {
    return TensorboardTensor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TensorboardTensor>): TensorboardTensor {
    const message = createBaseTensorboardTensor();
    message.value = object.value ?? Buffer.alloc(0);
    message.versionNumber = object.versionNumber ?? 0;
    return message;
  },
};

function createBaseTensorboardBlobSequence(): TensorboardBlobSequence {
  return { values: [] };
}

export const TensorboardBlobSequence: MessageFns<TensorboardBlobSequence> = {
  encode(message: TensorboardBlobSequence, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      TensorboardBlob.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TensorboardBlobSequence {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTensorboardBlobSequence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.values.push(TensorboardBlob.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TensorboardBlobSequence {
    return {
      values: globalThis.Array.isArray(object?.values)
        ? object.values.map((e: any) => TensorboardBlob.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TensorboardBlobSequence): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) => TensorboardBlob.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TensorboardBlobSequence>): TensorboardBlobSequence {
    return TensorboardBlobSequence.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TensorboardBlobSequence>): TensorboardBlobSequence {
    const message = createBaseTensorboardBlobSequence();
    message.values = object.values?.map((e) => TensorboardBlob.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTensorboardBlob(): TensorboardBlob {
  return { id: "", data: Buffer.alloc(0) };
}

export const TensorboardBlob: MessageFns<TensorboardBlob> = {
  encode(message: TensorboardBlob, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TensorboardBlob {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTensorboardBlob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TensorboardBlob {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : Buffer.alloc(0),
    };
  },

  toJSON(message: TensorboardBlob): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<TensorboardBlob>): TensorboardBlob {
    return TensorboardBlob.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TensorboardBlob>): TensorboardBlob {
    const message = createBaseTensorboardBlob();
    message.id = object.id ?? "";
    message.data = object.data ?? Buffer.alloc(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
