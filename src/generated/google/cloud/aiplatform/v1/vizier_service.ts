// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/vizier_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { GenericOperationMetadata } from "./operation.js";
import {
  Measurement,
  Study,
  Study_State,
  study_StateFromJSON,
  study_StateToJSON,
  Trial,
  TrialContext,
} from "./study.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Request message for
 * [VizierService.GetStudy][google.cloud.aiplatform.v1.VizierService.GetStudy].
 */
export interface GetStudyRequest {
  /**
   * Required. The name of the Study resource.
   * Format: `projects/{project}/locations/{location}/studies/{study}`
   */
  name: string;
}

/**
 * Request message for
 * [VizierService.CreateStudy][google.cloud.aiplatform.v1.VizierService.CreateStudy].
 */
export interface CreateStudyRequest {
  /**
   * Required. The resource name of the Location to create the CustomJob in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The Study configuration used to create the Study. */
  study: Study | undefined;
}

/**
 * Request message for
 * [VizierService.ListStudies][google.cloud.aiplatform.v1.VizierService.ListStudies].
 */
export interface ListStudiesRequest {
  /**
   * Required. The resource name of the Location to list the Study from.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. A page token to request the next page of results.
   * If unspecified, there are no subsequent pages.
   */
  pageToken: string;
  /**
   * Optional. The maximum number of studies to return per "page" of results.
   * If unspecified, service will pick an appropriate default.
   */
  pageSize: number;
}

/**
 * Response message for
 * [VizierService.ListStudies][google.cloud.aiplatform.v1.VizierService.ListStudies].
 */
export interface ListStudiesResponse {
  /** The studies associated with the project. */
  studies: Study[];
  /**
   * Passes this token as the `page_token` field of the request for a
   * subsequent call.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [VizierService.DeleteStudy][google.cloud.aiplatform.v1.VizierService.DeleteStudy].
 */
export interface DeleteStudyRequest {
  /**
   * Required. The name of the Study resource to be deleted.
   * Format: `projects/{project}/locations/{location}/studies/{study}`
   */
  name: string;
}

/**
 * Request message for
 * [VizierService.LookupStudy][google.cloud.aiplatform.v1.VizierService.LookupStudy].
 */
export interface LookupStudyRequest {
  /**
   * Required. The resource name of the Location to get the Study from.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The user-defined display name of the Study */
  displayName: string;
}

/**
 * Request message for
 * [VizierService.SuggestTrials][google.cloud.aiplatform.v1.VizierService.SuggestTrials].
 */
export interface SuggestTrialsRequest {
  /**
   * Required. The project and location that the Study belongs to.
   * Format: `projects/{project}/locations/{location}/studies/{study}`
   */
  parent: string;
  /** Required. The number of suggestions requested. It must be positive. */
  suggestionCount: number;
  /**
   * Required. The identifier of the client that is requesting the suggestion.
   *
   * If multiple SuggestTrialsRequests have the same `client_id`,
   * the service will return the identical suggested Trial if the Trial is
   * pending, and provide a new Trial if the last suggested Trial was completed.
   */
  clientId: string;
  /**
   * Optional. This allows you to specify the "context" for a Trial; a context
   * is a slice (a subspace) of the search space.
   *
   * Typical uses for contexts:
   * 1) You are using Vizier to tune a server for best performance, but there's
   *   a strong weekly cycle.  The context specifies the day-of-week.
   *   This allows Tuesday to generalize from Wednesday without assuming that
   *   everything is identical.
   * 2) Imagine you're optimizing some medical treatment for people.
   *   As they walk in the door, you know certain facts about them
   *   (e.g. sex, weight, height, blood-pressure).  Put that information in the
   *   context, and Vizier will adapt its suggestions to the patient.
   * 3) You want to do a fair A/B test efficiently.  Specify the "A" and "B"
   *   conditions as contexts, and Vizier will generalize between "A" and "B"
   *   conditions.  If they are similar, this will allow Vizier to converge
   *   to the optimum faster than if "A" and "B" were separate Studies.
   *   NOTE: You can also enter contexts as REQUESTED Trials, e.g. via the
   *   CreateTrial() RPC; that's the asynchronous option where you don't need a
   *   close association between contexts and suggestions.
   *
   * NOTE: All the Parameters you set in a context MUST be defined in the
   *   Study.
   * NOTE: You must supply 0 or $suggestion_count contexts.
   *   If you don't supply any contexts, Vizier will make suggestions
   *   from the full search space specified in the StudySpec; if you supply
   *   a full set of context, each suggestion will match the corresponding
   *   context.
   * NOTE: A Context with no features set matches anything, and allows
   *   suggestions from the full search space.
   * NOTE: Contexts MUST lie within the search space specified in the
   *   StudySpec.  It's an error if they don't.
   * NOTE: Contexts preferentially match ACTIVE then REQUESTED trials before
   *   new suggestions are generated.
   * NOTE: Generation of suggestions involves a match between a Context and
   *   (optionally) a REQUESTED trial; if that match is not fully specified, a
   *   suggestion will be geneated in the merged subspace.
   */
  contexts: TrialContext[];
}

/**
 * Response message for
 * [VizierService.SuggestTrials][google.cloud.aiplatform.v1.VizierService.SuggestTrials].
 */
export interface SuggestTrialsResponse {
  /** A list of Trials. */
  trials: Trial[];
  /** The state of the Study. */
  studyState: Study_State;
  /** The time at which the operation was started. */
  startTime:
    | Date
    | undefined;
  /** The time at which operation processing completed. */
  endTime: Date | undefined;
}

/** Details of operations that perform Trials suggestion. */
export interface SuggestTrialsMetadata {
  /** Operation metadata for suggesting Trials. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /**
   * The identifier of the client that is requesting the suggestion.
   *
   * If multiple SuggestTrialsRequests have the same `client_id`,
   * the service will return the identical suggested Trial if the Trial is
   * pending, and provide a new Trial if the last suggested Trial was completed.
   */
  clientId: string;
}

/**
 * Request message for
 * [VizierService.CreateTrial][google.cloud.aiplatform.v1.VizierService.CreateTrial].
 */
export interface CreateTrialRequest {
  /**
   * Required. The resource name of the Study to create the Trial in.
   * Format: `projects/{project}/locations/{location}/studies/{study}`
   */
  parent: string;
  /** Required. The Trial to create. */
  trial: Trial | undefined;
}

/**
 * Request message for
 * [VizierService.GetTrial][google.cloud.aiplatform.v1.VizierService.GetTrial].
 */
export interface GetTrialRequest {
  /**
   * Required. The name of the Trial resource.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   */
  name: string;
}

/**
 * Request message for
 * [VizierService.ListTrials][google.cloud.aiplatform.v1.VizierService.ListTrials].
 */
export interface ListTrialsRequest {
  /**
   * Required. The resource name of the Study to list the Trial from.
   * Format: `projects/{project}/locations/{location}/studies/{study}`
   */
  parent: string;
  /**
   * Optional. A page token to request the next page of results.
   * If unspecified, there are no subsequent pages.
   */
  pageToken: string;
  /**
   * Optional. The number of Trials to retrieve per "page" of results.
   * If unspecified, the service will pick an appropriate default.
   */
  pageSize: number;
}

/**
 * Response message for
 * [VizierService.ListTrials][google.cloud.aiplatform.v1.VizierService.ListTrials].
 */
export interface ListTrialsResponse {
  /** The Trials associated with the Study. */
  trials: Trial[];
  /**
   * Pass this token as the `page_token` field of the request for a
   * subsequent call.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [VizierService.AddTrialMeasurement][google.cloud.aiplatform.v1.VizierService.AddTrialMeasurement].
 */
export interface AddTrialMeasurementRequest {
  /**
   * Required. The name of the trial to add measurement.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   */
  trialName: string;
  /** Required. The measurement to be added to a Trial. */
  measurement: Measurement | undefined;
}

/**
 * Request message for
 * [VizierService.CompleteTrial][google.cloud.aiplatform.v1.VizierService.CompleteTrial].
 */
export interface CompleteTrialRequest {
  /**
   * Required. The Trial's name.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   */
  name: string;
  /**
   * Optional. If provided, it will be used as the completed Trial's
   * final_measurement; Otherwise, the service will auto-select a
   * previously reported measurement as the final-measurement
   */
  finalMeasurement:
    | Measurement
    | undefined;
  /**
   * Optional. True if the Trial cannot be run with the given Parameter, and
   * final_measurement will be ignored.
   */
  trialInfeasible: boolean;
  /**
   * Optional. A human readable reason why the trial was infeasible. This should
   * only be provided if `trial_infeasible` is true.
   */
  infeasibleReason: string;
}

/**
 * Request message for
 * [VizierService.DeleteTrial][google.cloud.aiplatform.v1.VizierService.DeleteTrial].
 */
export interface DeleteTrialRequest {
  /**
   * Required. The Trial's name.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   */
  name: string;
}

/**
 * Request message for
 * [VizierService.CheckTrialEarlyStoppingState][google.cloud.aiplatform.v1.VizierService.CheckTrialEarlyStoppingState].
 */
export interface CheckTrialEarlyStoppingStateRequest {
  /**
   * Required. The Trial's name.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   */
  trialName: string;
}

/**
 * Response message for
 * [VizierService.CheckTrialEarlyStoppingState][google.cloud.aiplatform.v1.VizierService.CheckTrialEarlyStoppingState].
 */
export interface CheckTrialEarlyStoppingStateResponse {
  /** True if the Trial should stop. */
  shouldStop: boolean;
}

/**
 * This message will be placed in the metadata field of a
 * google.longrunning.Operation associated with a CheckTrialEarlyStoppingState
 * request.
 */
export interface CheckTrialEarlyStoppingStateMetatdata {
  /** Operation metadata for suggesting Trials. */
  genericMetadata:
    | GenericOperationMetadata
    | undefined;
  /** The name of the Study that the Trial belongs to. */
  study: string;
  /** The Trial name. */
  trial: string;
}

/**
 * Request message for
 * [VizierService.StopTrial][google.cloud.aiplatform.v1.VizierService.StopTrial].
 */
export interface StopTrialRequest {
  /**
   * Required. The Trial's name.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   */
  name: string;
}

/**
 * Request message for
 * [VizierService.ListOptimalTrials][google.cloud.aiplatform.v1.VizierService.ListOptimalTrials].
 */
export interface ListOptimalTrialsRequest {
  /** Required. The name of the Study that the optimal Trial belongs to. */
  parent: string;
}

/**
 * Response message for
 * [VizierService.ListOptimalTrials][google.cloud.aiplatform.v1.VizierService.ListOptimalTrials].
 */
export interface ListOptimalTrialsResponse {
  /**
   * The pareto-optimal Trials for multiple objective Study or the
   * optimal trial for single objective Study. The definition of
   * pareto-optimal can be checked in wiki page.
   * https://en.wikipedia.org/wiki/Pareto_efficiency
   */
  optimalTrials: Trial[];
}

function createBaseGetStudyRequest(): GetStudyRequest {
  return { name: "" };
}

export const GetStudyRequest: MessageFns<GetStudyRequest> = {
  encode(message: GetStudyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetStudyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetStudyRequest>): GetStudyRequest {
    return GetStudyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStudyRequest>): GetStudyRequest {
    const message = createBaseGetStudyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateStudyRequest(): CreateStudyRequest {
  return { parent: "", study: undefined };
}

export const CreateStudyRequest: MessageFns<CreateStudyRequest> = {
  encode(message: CreateStudyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.study !== undefined) {
      Study.encode(message.study, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateStudyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStudyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.study = Study.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateStudyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      study: isSet(object.study) ? Study.fromJSON(object.study) : undefined,
    };
  },

  toJSON(message: CreateStudyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.study !== undefined) {
      obj.study = Study.toJSON(message.study);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateStudyRequest>): CreateStudyRequest {
    return CreateStudyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateStudyRequest>): CreateStudyRequest {
    const message = createBaseCreateStudyRequest();
    message.parent = object.parent ?? "";
    message.study = (object.study !== undefined && object.study !== null) ? Study.fromPartial(object.study) : undefined;
    return message;
  },
};

function createBaseListStudiesRequest(): ListStudiesRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListStudiesRequest: MessageFns<ListStudiesRequest> = {
  encode(message: ListStudiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStudiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStudiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStudiesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListStudiesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListStudiesRequest>): ListStudiesRequest {
    return ListStudiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStudiesRequest>): ListStudiesRequest {
    const message = createBaseListStudiesRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListStudiesResponse(): ListStudiesResponse {
  return { studies: [], nextPageToken: "" };
}

export const ListStudiesResponse: MessageFns<ListStudiesResponse> = {
  encode(message: ListStudiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.studies) {
      Study.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStudiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStudiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.studies.push(Study.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStudiesResponse {
    return {
      studies: globalThis.Array.isArray(object?.studies) ? object.studies.map((e: any) => Study.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListStudiesResponse): unknown {
    const obj: any = {};
    if (message.studies?.length) {
      obj.studies = message.studies.map((e) => Study.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListStudiesResponse>): ListStudiesResponse {
    return ListStudiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListStudiesResponse>): ListStudiesResponse {
    const message = createBaseListStudiesResponse();
    message.studies = object.studies?.map((e) => Study.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteStudyRequest(): DeleteStudyRequest {
  return { name: "" };
}

export const DeleteStudyRequest: MessageFns<DeleteStudyRequest> = {
  encode(message: DeleteStudyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteStudyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteStudyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteStudyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteStudyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteStudyRequest>): DeleteStudyRequest {
    return DeleteStudyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteStudyRequest>): DeleteStudyRequest {
    const message = createBaseDeleteStudyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLookupStudyRequest(): LookupStudyRequest {
  return { parent: "", displayName: "" };
}

export const LookupStudyRequest: MessageFns<LookupStudyRequest> = {
  encode(message: LookupStudyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LookupStudyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLookupStudyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LookupStudyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: LookupStudyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<LookupStudyRequest>): LookupStudyRequest {
    return LookupStudyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LookupStudyRequest>): LookupStudyRequest {
    const message = createBaseLookupStudyRequest();
    message.parent = object.parent ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseSuggestTrialsRequest(): SuggestTrialsRequest {
  return { parent: "", suggestionCount: 0, clientId: "", contexts: [] };
}

export const SuggestTrialsRequest: MessageFns<SuggestTrialsRequest> = {
  encode(message: SuggestTrialsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.suggestionCount !== 0) {
      writer.uint32(16).int32(message.suggestionCount);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    for (const v of message.contexts) {
      TrialContext.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestTrialsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestTrialsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.suggestionCount = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.contexts.push(TrialContext.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestTrialsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      suggestionCount: isSet(object.suggestionCount) ? globalThis.Number(object.suggestionCount) : 0,
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      contexts: globalThis.Array.isArray(object?.contexts)
        ? object.contexts.map((e: any) => TrialContext.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SuggestTrialsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.suggestionCount !== 0) {
      obj.suggestionCount = Math.round(message.suggestionCount);
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.contexts?.length) {
      obj.contexts = message.contexts.map((e) => TrialContext.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestTrialsRequest>): SuggestTrialsRequest {
    return SuggestTrialsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestTrialsRequest>): SuggestTrialsRequest {
    const message = createBaseSuggestTrialsRequest();
    message.parent = object.parent ?? "";
    message.suggestionCount = object.suggestionCount ?? 0;
    message.clientId = object.clientId ?? "";
    message.contexts = object.contexts?.map((e) => TrialContext.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSuggestTrialsResponse(): SuggestTrialsResponse {
  return { trials: [], studyState: 0, startTime: undefined, endTime: undefined };
}

export const SuggestTrialsResponse: MessageFns<SuggestTrialsResponse> = {
  encode(message: SuggestTrialsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.trials) {
      Trial.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.studyState !== 0) {
      writer.uint32(16).int32(message.studyState);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(26).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestTrialsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestTrialsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trials.push(Trial.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.studyState = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestTrialsResponse {
    return {
      trials: globalThis.Array.isArray(object?.trials) ? object.trials.map((e: any) => Trial.fromJSON(e)) : [],
      studyState: isSet(object.studyState) ? study_StateFromJSON(object.studyState) : 0,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: SuggestTrialsResponse): unknown {
    const obj: any = {};
    if (message.trials?.length) {
      obj.trials = message.trials.map((e) => Trial.toJSON(e));
    }
    if (message.studyState !== 0) {
      obj.studyState = study_StateToJSON(message.studyState);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestTrialsResponse>): SuggestTrialsResponse {
    return SuggestTrialsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestTrialsResponse>): SuggestTrialsResponse {
    const message = createBaseSuggestTrialsResponse();
    message.trials = object.trials?.map((e) => Trial.fromPartial(e)) || [];
    message.studyState = object.studyState ?? 0;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseSuggestTrialsMetadata(): SuggestTrialsMetadata {
  return { genericMetadata: undefined, clientId: "" };
}

export const SuggestTrialsMetadata: MessageFns<SuggestTrialsMetadata> = {
  encode(message: SuggestTrialsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestTrialsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestTrialsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestTrialsMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
    };
  },

  toJSON(message: SuggestTrialsMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    return obj;
  },

  create(base?: DeepPartial<SuggestTrialsMetadata>): SuggestTrialsMetadata {
    return SuggestTrialsMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SuggestTrialsMetadata>): SuggestTrialsMetadata {
    const message = createBaseSuggestTrialsMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.clientId = object.clientId ?? "";
    return message;
  },
};

function createBaseCreateTrialRequest(): CreateTrialRequest {
  return { parent: "", trial: undefined };
}

export const CreateTrialRequest: MessageFns<CreateTrialRequest> = {
  encode(message: CreateTrialRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.trial !== undefined) {
      Trial.encode(message.trial, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTrialRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTrialRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trial = Trial.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTrialRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      trial: isSet(object.trial) ? Trial.fromJSON(object.trial) : undefined,
    };
  },

  toJSON(message: CreateTrialRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.trial !== undefined) {
      obj.trial = Trial.toJSON(message.trial);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTrialRequest>): CreateTrialRequest {
    return CreateTrialRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTrialRequest>): CreateTrialRequest {
    const message = createBaseCreateTrialRequest();
    message.parent = object.parent ?? "";
    message.trial = (object.trial !== undefined && object.trial !== null) ? Trial.fromPartial(object.trial) : undefined;
    return message;
  },
};

function createBaseGetTrialRequest(): GetTrialRequest {
  return { name: "" };
}

export const GetTrialRequest: MessageFns<GetTrialRequest> = {
  encode(message: GetTrialRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTrialRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTrialRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTrialRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTrialRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTrialRequest>): GetTrialRequest {
    return GetTrialRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTrialRequest>): GetTrialRequest {
    const message = createBaseGetTrialRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTrialsRequest(): ListTrialsRequest {
  return { parent: "", pageToken: "", pageSize: 0 };
}

export const ListTrialsRequest: MessageFns<ListTrialsRequest> = {
  encode(message: ListTrialsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTrialsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTrialsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTrialsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListTrialsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListTrialsRequest>): ListTrialsRequest {
    return ListTrialsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTrialsRequest>): ListTrialsRequest {
    const message = createBaseListTrialsRequest();
    message.parent = object.parent ?? "";
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListTrialsResponse(): ListTrialsResponse {
  return { trials: [], nextPageToken: "" };
}

export const ListTrialsResponse: MessageFns<ListTrialsResponse> = {
  encode(message: ListTrialsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.trials) {
      Trial.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTrialsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTrialsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trials.push(Trial.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTrialsResponse {
    return {
      trials: globalThis.Array.isArray(object?.trials) ? object.trials.map((e: any) => Trial.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTrialsResponse): unknown {
    const obj: any = {};
    if (message.trials?.length) {
      obj.trials = message.trials.map((e) => Trial.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTrialsResponse>): ListTrialsResponse {
    return ListTrialsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTrialsResponse>): ListTrialsResponse {
    const message = createBaseListTrialsResponse();
    message.trials = object.trials?.map((e) => Trial.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseAddTrialMeasurementRequest(): AddTrialMeasurementRequest {
  return { trialName: "", measurement: undefined };
}

export const AddTrialMeasurementRequest: MessageFns<AddTrialMeasurementRequest> = {
  encode(message: AddTrialMeasurementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trialName !== "") {
      writer.uint32(10).string(message.trialName);
    }
    if (message.measurement !== undefined) {
      Measurement.encode(message.measurement, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTrialMeasurementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTrialMeasurementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trialName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.measurement = Measurement.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTrialMeasurementRequest {
    return {
      trialName: isSet(object.trialName) ? globalThis.String(object.trialName) : "",
      measurement: isSet(object.measurement) ? Measurement.fromJSON(object.measurement) : undefined,
    };
  },

  toJSON(message: AddTrialMeasurementRequest): unknown {
    const obj: any = {};
    if (message.trialName !== "") {
      obj.trialName = message.trialName;
    }
    if (message.measurement !== undefined) {
      obj.measurement = Measurement.toJSON(message.measurement);
    }
    return obj;
  },

  create(base?: DeepPartial<AddTrialMeasurementRequest>): AddTrialMeasurementRequest {
    return AddTrialMeasurementRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddTrialMeasurementRequest>): AddTrialMeasurementRequest {
    const message = createBaseAddTrialMeasurementRequest();
    message.trialName = object.trialName ?? "";
    message.measurement = (object.measurement !== undefined && object.measurement !== null)
      ? Measurement.fromPartial(object.measurement)
      : undefined;
    return message;
  },
};

function createBaseCompleteTrialRequest(): CompleteTrialRequest {
  return { name: "", finalMeasurement: undefined, trialInfeasible: false, infeasibleReason: "" };
}

export const CompleteTrialRequest: MessageFns<CompleteTrialRequest> = {
  encode(message: CompleteTrialRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.finalMeasurement !== undefined) {
      Measurement.encode(message.finalMeasurement, writer.uint32(18).fork()).join();
    }
    if (message.trialInfeasible !== false) {
      writer.uint32(24).bool(message.trialInfeasible);
    }
    if (message.infeasibleReason !== "") {
      writer.uint32(34).string(message.infeasibleReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteTrialRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteTrialRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.finalMeasurement = Measurement.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.trialInfeasible = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.infeasibleReason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteTrialRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      finalMeasurement: isSet(object.finalMeasurement) ? Measurement.fromJSON(object.finalMeasurement) : undefined,
      trialInfeasible: isSet(object.trialInfeasible) ? globalThis.Boolean(object.trialInfeasible) : false,
      infeasibleReason: isSet(object.infeasibleReason) ? globalThis.String(object.infeasibleReason) : "",
    };
  },

  toJSON(message: CompleteTrialRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.finalMeasurement !== undefined) {
      obj.finalMeasurement = Measurement.toJSON(message.finalMeasurement);
    }
    if (message.trialInfeasible !== false) {
      obj.trialInfeasible = message.trialInfeasible;
    }
    if (message.infeasibleReason !== "") {
      obj.infeasibleReason = message.infeasibleReason;
    }
    return obj;
  },

  create(base?: DeepPartial<CompleteTrialRequest>): CompleteTrialRequest {
    return CompleteTrialRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CompleteTrialRequest>): CompleteTrialRequest {
    const message = createBaseCompleteTrialRequest();
    message.name = object.name ?? "";
    message.finalMeasurement = (object.finalMeasurement !== undefined && object.finalMeasurement !== null)
      ? Measurement.fromPartial(object.finalMeasurement)
      : undefined;
    message.trialInfeasible = object.trialInfeasible ?? false;
    message.infeasibleReason = object.infeasibleReason ?? "";
    return message;
  },
};

function createBaseDeleteTrialRequest(): DeleteTrialRequest {
  return { name: "" };
}

export const DeleteTrialRequest: MessageFns<DeleteTrialRequest> = {
  encode(message: DeleteTrialRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTrialRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTrialRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTrialRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTrialRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTrialRequest>): DeleteTrialRequest {
    return DeleteTrialRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTrialRequest>): DeleteTrialRequest {
    const message = createBaseDeleteTrialRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCheckTrialEarlyStoppingStateRequest(): CheckTrialEarlyStoppingStateRequest {
  return { trialName: "" };
}

export const CheckTrialEarlyStoppingStateRequest: MessageFns<CheckTrialEarlyStoppingStateRequest> = {
  encode(message: CheckTrialEarlyStoppingStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trialName !== "") {
      writer.uint32(10).string(message.trialName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckTrialEarlyStoppingStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckTrialEarlyStoppingStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trialName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckTrialEarlyStoppingStateRequest {
    return { trialName: isSet(object.trialName) ? globalThis.String(object.trialName) : "" };
  },

  toJSON(message: CheckTrialEarlyStoppingStateRequest): unknown {
    const obj: any = {};
    if (message.trialName !== "") {
      obj.trialName = message.trialName;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckTrialEarlyStoppingStateRequest>): CheckTrialEarlyStoppingStateRequest {
    return CheckTrialEarlyStoppingStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckTrialEarlyStoppingStateRequest>): CheckTrialEarlyStoppingStateRequest {
    const message = createBaseCheckTrialEarlyStoppingStateRequest();
    message.trialName = object.trialName ?? "";
    return message;
  },
};

function createBaseCheckTrialEarlyStoppingStateResponse(): CheckTrialEarlyStoppingStateResponse {
  return { shouldStop: false };
}

export const CheckTrialEarlyStoppingStateResponse: MessageFns<CheckTrialEarlyStoppingStateResponse> = {
  encode(message: CheckTrialEarlyStoppingStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shouldStop !== false) {
      writer.uint32(8).bool(message.shouldStop);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckTrialEarlyStoppingStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckTrialEarlyStoppingStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.shouldStop = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckTrialEarlyStoppingStateResponse {
    return { shouldStop: isSet(object.shouldStop) ? globalThis.Boolean(object.shouldStop) : false };
  },

  toJSON(message: CheckTrialEarlyStoppingStateResponse): unknown {
    const obj: any = {};
    if (message.shouldStop !== false) {
      obj.shouldStop = message.shouldStop;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckTrialEarlyStoppingStateResponse>): CheckTrialEarlyStoppingStateResponse {
    return CheckTrialEarlyStoppingStateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckTrialEarlyStoppingStateResponse>): CheckTrialEarlyStoppingStateResponse {
    const message = createBaseCheckTrialEarlyStoppingStateResponse();
    message.shouldStop = object.shouldStop ?? false;
    return message;
  },
};

function createBaseCheckTrialEarlyStoppingStateMetatdata(): CheckTrialEarlyStoppingStateMetatdata {
  return { genericMetadata: undefined, study: "", trial: "" };
}

export const CheckTrialEarlyStoppingStateMetatdata: MessageFns<CheckTrialEarlyStoppingStateMetatdata> = {
  encode(message: CheckTrialEarlyStoppingStateMetatdata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    if (message.study !== "") {
      writer.uint32(18).string(message.study);
    }
    if (message.trial !== "") {
      writer.uint32(26).string(message.trial);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckTrialEarlyStoppingStateMetatdata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckTrialEarlyStoppingStateMetatdata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.study = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.trial = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckTrialEarlyStoppingStateMetatdata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
      study: isSet(object.study) ? globalThis.String(object.study) : "",
      trial: isSet(object.trial) ? globalThis.String(object.trial) : "",
    };
  },

  toJSON(message: CheckTrialEarlyStoppingStateMetatdata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    if (message.study !== "") {
      obj.study = message.study;
    }
    if (message.trial !== "") {
      obj.trial = message.trial;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckTrialEarlyStoppingStateMetatdata>): CheckTrialEarlyStoppingStateMetatdata {
    return CheckTrialEarlyStoppingStateMetatdata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckTrialEarlyStoppingStateMetatdata>): CheckTrialEarlyStoppingStateMetatdata {
    const message = createBaseCheckTrialEarlyStoppingStateMetatdata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    message.study = object.study ?? "";
    message.trial = object.trial ?? "";
    return message;
  },
};

function createBaseStopTrialRequest(): StopTrialRequest {
  return { name: "" };
}

export const StopTrialRequest: MessageFns<StopTrialRequest> = {
  encode(message: StopTrialRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopTrialRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopTrialRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopTrialRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: StopTrialRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<StopTrialRequest>): StopTrialRequest {
    return StopTrialRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopTrialRequest>): StopTrialRequest {
    const message = createBaseStopTrialRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListOptimalTrialsRequest(): ListOptimalTrialsRequest {
  return { parent: "" };
}

export const ListOptimalTrialsRequest: MessageFns<ListOptimalTrialsRequest> = {
  encode(message: ListOptimalTrialsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOptimalTrialsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOptimalTrialsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOptimalTrialsRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: ListOptimalTrialsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOptimalTrialsRequest>): ListOptimalTrialsRequest {
    return ListOptimalTrialsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOptimalTrialsRequest>): ListOptimalTrialsRequest {
    const message = createBaseListOptimalTrialsRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseListOptimalTrialsResponse(): ListOptimalTrialsResponse {
  return { optimalTrials: [] };
}

export const ListOptimalTrialsResponse: MessageFns<ListOptimalTrialsResponse> = {
  encode(message: ListOptimalTrialsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.optimalTrials) {
      Trial.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOptimalTrialsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOptimalTrialsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.optimalTrials.push(Trial.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOptimalTrialsResponse {
    return {
      optimalTrials: globalThis.Array.isArray(object?.optimalTrials)
        ? object.optimalTrials.map((e: any) => Trial.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListOptimalTrialsResponse): unknown {
    const obj: any = {};
    if (message.optimalTrials?.length) {
      obj.optimalTrials = message.optimalTrials.map((e) => Trial.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListOptimalTrialsResponse>): ListOptimalTrialsResponse {
    return ListOptimalTrialsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOptimalTrialsResponse>): ListOptimalTrialsResponse {
    const message = createBaseListOptimalTrialsResponse();
    message.optimalTrials = object.optimalTrials?.map((e) => Trial.fromPartial(e)) || [];
    return message;
  },
};

/**
 * Vertex AI Vizier API.
 *
 * Vertex AI Vizier is a service to solve blackbox optimization problems,
 * such as tuning machine learning hyperparameters and searching over deep
 * learning architectures.
 */
export type VizierServiceDefinition = typeof VizierServiceDefinition;
export const VizierServiceDefinition = {
  name: "VizierService",
  fullName: "google.cloud.aiplatform.v1.VizierService",
  methods: {
    /**
     * Creates a Study. A resource name will be generated after creation of the
     * Study.
     */
    createStudy: {
      name: "CreateStudy",
      requestType: CreateStudyRequest,
      requestStream: false,
      responseType: Study,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 112, 97, 114, 101, 110, 116, 44, 115, 116, 117, 100, 121])],
          578365826: [
            Buffer.from([
              52,
              58,
              5,
              115,
              116,
              117,
              100,
              121,
              34,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a Study by name. */
    getStudy: {
      name: "GetStudy",
      requestType: GetStudyRequest,
      requestStream: false,
      responseType: Study,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all the studies in a region for an associated project. */
    listStudies: {
      name: "ListStudies",
      requestType: ListStudiesRequest,
      requestStream: false,
      responseType: ListStudiesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              45,
              18,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a Study. */
    deleteStudy: {
      name: "DeleteStudy",
      requestType: DeleteStudyRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              45,
              42,
              43,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Looks a study up using the user-defined display_name field instead of the
     * fully qualified resource name.
     */
    lookupStudy: {
      name: "LookupStudy",
      requestType: LookupStudyRequest,
      requestStream: false,
      responseType: Study,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              58,
              1,
              42,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              58,
              108,
              111,
              111,
              107,
              117,
              112,
            ]),
          ],
        },
      },
    },
    /**
     * Adds one or more Trials to a Study, with parameter values
     * suggested by Vertex AI Vizier. Returns a long-running
     * operation associated with the generation of Trial suggestions.
     * When this long-running operation succeeds, it will contain
     * a
     * [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
     */
    suggestTrials: {
      name: "SuggestTrials",
      requestType: SuggestTrialsRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              46,
              10,
              21,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              84,
              114,
              105,
              97,
              108,
              115,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              21,
              83,
              117,
              103,
              103,
              101,
              115,
              116,
              84,
              114,
              105,
              97,
              108,
              115,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              65,
              58,
              1,
              42,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              105,
              97,
              108,
              115,
              58,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
            ]),
          ],
        },
      },
    },
    /** Adds a user provided Trial to a Study. */
    createTrial: {
      name: "CreateTrial",
      requestType: CreateTrialRequest,
      requestStream: false,
      responseType: Trial,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 112, 97, 114, 101, 110, 116, 44, 116, 114, 105, 97, 108])],
          578365826: [
            Buffer.from([
              61,
              58,
              5,
              116,
              114,
              105,
              97,
              108,
              34,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              105,
              97,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a Trial. */
    getTrial: {
      name: "GetTrial",
      requestType: GetTrialRequest,
      requestStream: false,
      responseType: Trial,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              47,
              116,
              114,
              105,
              97,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists the Trials associated with a Study. */
    listTrials: {
      name: "ListTrials",
      requestType: ListTrialsRequest,
      requestStream: false,
      responseType: ListTrialsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              105,
              97,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Adds a measurement of the objective metrics to a Trial. This measurement
     * is assumed to have been taken before the Trial is complete.
     */
    addTrialMeasurement: {
      name: "AddTrialMeasurement",
      requestType: AddTrialMeasurementRequest,
      requestStream: false,
      responseType: Trial,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              83,
              58,
              1,
              42,
              34,
              78,
              47,
              118,
              49,
              47,
              123,
              116,
              114,
              105,
              97,
              108,
              95,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              47,
              116,
              114,
              105,
              97,
              108,
              115,
              47,
              42,
              125,
              58,
              97,
              100,
              100,
              84,
              114,
              105,
              97,
              108,
              77,
              101,
              97,
              115,
              117,
              114,
              101,
              109,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /** Marks a Trial as complete. */
    completeTrial: {
      name: "CompleteTrial",
      requestType: CompleteTrialRequest,
      requestStream: false,
      responseType: Trial,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              66,
              58,
              1,
              42,
              34,
              61,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              47,
              116,
              114,
              105,
              97,
              108,
              115,
              47,
              42,
              125,
              58,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Deletes a Trial. */
    deleteTrial: {
      name: "DeleteTrial",
      requestType: DeleteTrialRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              54,
              42,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              47,
              116,
              114,
              105,
              97,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Checks  whether a Trial should stop or not. Returns a
     * long-running operation. When the operation is successful,
     * it will contain a
     * [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
     */
    checkTrialEarlyStoppingState: {
      name: "CheckTrialEarlyStoppingState",
      requestType: CheckTrialEarlyStoppingStateRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              77,
              10,
              36,
              67,
              104,
              101,
              99,
              107,
              84,
              114,
              105,
              97,
              108,
              69,
              97,
              114,
              108,
              121,
              83,
              116,
              111,
              112,
              112,
              105,
              110,
              103,
              83,
              116,
              97,
              116,
              101,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              37,
              67,
              104,
              101,
              99,
              107,
              84,
              114,
              105,
              97,
              108,
              69,
              97,
              114,
              108,
              121,
              83,
              116,
              111,
              112,
              112,
              105,
              110,
              103,
              83,
              116,
              97,
              116,
              101,
              77,
              101,
              116,
              97,
              116,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              92,
              58,
              1,
              42,
              34,
              87,
              47,
              118,
              49,
              47,
              123,
              116,
              114,
              105,
              97,
              108,
              95,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              47,
              116,
              114,
              105,
              97,
              108,
              115,
              47,
              42,
              125,
              58,
              99,
              104,
              101,
              99,
              107,
              84,
              114,
              105,
              97,
              108,
              69,
              97,
              114,
              108,
              121,
              83,
              116,
              111,
              112,
              112,
              105,
              110,
              103,
              83,
              116,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Stops a Trial. */
    stopTrial: {
      name: "StopTrial",
      requestType: StopTrialRequest,
      requestStream: false,
      responseType: Trial,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              47,
              116,
              114,
              105,
              97,
              108,
              115,
              47,
              42,
              125,
              58,
              115,
              116,
              111,
              112,
            ]),
          ],
        },
      },
    },
    /**
     * Lists the pareto-optimal Trials for multi-objective Study or the
     * optimal Trials for single-objective Study. The definition of
     * pareto-optimal can be checked in wiki page.
     * https://en.wikipedia.org/wiki/Pareto_efficiency
     */
    listOptimalTrials: {
      name: "ListOptimalTrials",
      requestType: ListOptimalTrialsRequest,
      requestStream: false,
      responseType: ListOptimalTrialsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              75,
              58,
              1,
              42,
              34,
              70,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              115,
              116,
              117,
              100,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              116,
              114,
              105,
              97,
              108,
              115,
              58,
              108,
              105,
              115,
              116,
              79,
              112,
              116,
              105,
              109,
              97,
              108,
              84,
              114,
              105,
              97,
              108,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VizierServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a Study. A resource name will be generated after creation of the
   * Study.
   */
  createStudy(request: CreateStudyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Study>>;
  /** Gets a Study by name. */
  getStudy(request: GetStudyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Study>>;
  /** Lists all the studies in a region for an associated project. */
  listStudies(
    request: ListStudiesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListStudiesResponse>>;
  /** Deletes a Study. */
  deleteStudy(request: DeleteStudyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Looks a study up using the user-defined display_name field instead of the
   * fully qualified resource name.
   */
  lookupStudy(request: LookupStudyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Study>>;
  /**
   * Adds one or more Trials to a Study, with parameter values
   * suggested by Vertex AI Vizier. Returns a long-running
   * operation associated with the generation of Trial suggestions.
   * When this long-running operation succeeds, it will contain
   * a
   * [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
   */
  suggestTrials(request: SuggestTrialsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Adds a user provided Trial to a Study. */
  createTrial(request: CreateTrialRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Trial>>;
  /** Gets a Trial. */
  getTrial(request: GetTrialRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Trial>>;
  /** Lists the Trials associated with a Study. */
  listTrials(
    request: ListTrialsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTrialsResponse>>;
  /**
   * Adds a measurement of the objective metrics to a Trial. This measurement
   * is assumed to have been taken before the Trial is complete.
   */
  addTrialMeasurement(
    request: AddTrialMeasurementRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Trial>>;
  /** Marks a Trial as complete. */
  completeTrial(request: CompleteTrialRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Trial>>;
  /** Deletes a Trial. */
  deleteTrial(request: DeleteTrialRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Checks  whether a Trial should stop or not. Returns a
   * long-running operation. When the operation is successful,
   * it will contain a
   * [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
   */
  checkTrialEarlyStoppingState(
    request: CheckTrialEarlyStoppingStateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Stops a Trial. */
  stopTrial(request: StopTrialRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Trial>>;
  /**
   * Lists the pareto-optimal Trials for multi-objective Study or the
   * optimal Trials for single-objective Study. The definition of
   * pareto-optimal can be checked in wiki page.
   * https://en.wikipedia.org/wiki/Pareto_efficiency
   */
  listOptimalTrials(
    request: ListOptimalTrialsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOptimalTrialsResponse>>;
}

export interface VizierServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a Study. A resource name will be generated after creation of the
   * Study.
   */
  createStudy(request: DeepPartial<CreateStudyRequest>, options?: CallOptions & CallOptionsExt): Promise<Study>;
  /** Gets a Study by name. */
  getStudy(request: DeepPartial<GetStudyRequest>, options?: CallOptions & CallOptionsExt): Promise<Study>;
  /** Lists all the studies in a region for an associated project. */
  listStudies(
    request: DeepPartial<ListStudiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListStudiesResponse>;
  /** Deletes a Study. */
  deleteStudy(request: DeepPartial<DeleteStudyRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Looks a study up using the user-defined display_name field instead of the
   * fully qualified resource name.
   */
  lookupStudy(request: DeepPartial<LookupStudyRequest>, options?: CallOptions & CallOptionsExt): Promise<Study>;
  /**
   * Adds one or more Trials to a Study, with parameter values
   * suggested by Vertex AI Vizier. Returns a long-running
   * operation associated with the generation of Trial suggestions.
   * When this long-running operation succeeds, it will contain
   * a
   * [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
   */
  suggestTrials(request: DeepPartial<SuggestTrialsRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Adds a user provided Trial to a Study. */
  createTrial(request: DeepPartial<CreateTrialRequest>, options?: CallOptions & CallOptionsExt): Promise<Trial>;
  /** Gets a Trial. */
  getTrial(request: DeepPartial<GetTrialRequest>, options?: CallOptions & CallOptionsExt): Promise<Trial>;
  /** Lists the Trials associated with a Study. */
  listTrials(
    request: DeepPartial<ListTrialsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTrialsResponse>;
  /**
   * Adds a measurement of the objective metrics to a Trial. This measurement
   * is assumed to have been taken before the Trial is complete.
   */
  addTrialMeasurement(
    request: DeepPartial<AddTrialMeasurementRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Trial>;
  /** Marks a Trial as complete. */
  completeTrial(request: DeepPartial<CompleteTrialRequest>, options?: CallOptions & CallOptionsExt): Promise<Trial>;
  /** Deletes a Trial. */
  deleteTrial(request: DeepPartial<DeleteTrialRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Checks  whether a Trial should stop or not. Returns a
   * long-running operation. When the operation is successful,
   * it will contain a
   * [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
   */
  checkTrialEarlyStoppingState(
    request: DeepPartial<CheckTrialEarlyStoppingStateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Stops a Trial. */
  stopTrial(request: DeepPartial<StopTrialRequest>, options?: CallOptions & CallOptionsExt): Promise<Trial>;
  /**
   * Lists the pareto-optimal Trials for multi-objective Study or the
   * optimal Trials for single-objective Study. The definition of
   * pareto-optimal can be checked in wiki page.
   * https://en.wikipedia.org/wiki/Pareto_efficiency
   */
  listOptimalTrials(
    request: DeepPartial<ListOptimalTrialsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOptimalTrialsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
