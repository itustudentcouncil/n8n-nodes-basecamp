// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/feature_registry_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Feature } from "./feature.js";
import { FeatureGroup } from "./feature_group.js";
import {
  CreateFeatureRequest,
  DeleteFeatureRequest,
  GetFeatureRequest,
  ListFeaturesRequest,
  ListFeaturesResponse,
  UpdateFeatureRequest,
} from "./featurestore_service.js";
import { GenericOperationMetadata } from "./operation.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Request message for
 * [FeatureRegistryService.CreateFeatureGroup][google.cloud.aiplatform.v1.FeatureRegistryService.CreateFeatureGroup].
 */
export interface CreateFeatureGroupRequest {
  /**
   * Required. The resource name of the Location to create FeatureGroups.
   * Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The FeatureGroup to create. */
  featureGroup:
    | FeatureGroup
    | undefined;
  /**
   * Required. The ID to use for this FeatureGroup, which will become the final
   * component of the FeatureGroup's resource name.
   *
   * This value may be up to 60 characters, and valid characters are
   * `[a-z0-9_]`. The first character cannot be a number.
   *
   * The value must be unique within the project and location.
   */
  featureGroupId: string;
}

/**
 * Request message for
 * [FeatureRegistryService.GetFeatureGroup][google.cloud.aiplatform.v1.FeatureRegistryService.GetFeatureGroup].
 */
export interface GetFeatureGroupRequest {
  /** Required. The name of the FeatureGroup resource. */
  name: string;
}

/**
 * Request message for
 * [FeatureRegistryService.ListFeatureGroups][google.cloud.aiplatform.v1.FeatureRegistryService.ListFeatureGroups].
 */
export interface ListFeatureGroupsRequest {
  /**
   * Required. The resource name of the Location to list FeatureGroups.
   * Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Lists the FeatureGroups that match the filter expression. The
   * following fields are supported:
   *
   * * `create_time`: Supports `=`, `!=`, `<`, `>`, `<=`, and `>=` comparisons.
   * Values must be
   *   in RFC 3339 format.
   * * `update_time`: Supports `=`, `!=`, `<`, `>`, `<=`, and `>=` comparisons.
   * Values must be
   *   in RFC 3339 format.
   * * `labels`: Supports key-value equality and key presence.
   *
   * Examples:
   *
   * * `create_time > "2020-01-01" OR update_time > "2020-01-01"`
   *    FeatureGroups created or updated after 2020-01-01.
   * * `labels.env = "prod"`
   *    FeatureGroups with label "env" set to "prod".
   */
  filter: string;
  /**
   * The maximum number of FeatureGroups to return. The service may return
   * fewer than this value. If unspecified, at most 100 FeatureGroups will
   * be returned. The maximum value is 100; any value greater than 100 will be
   * coerced to 100.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [FeatureGroupAdminService.ListFeatureGroups][] call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [FeatureGroupAdminService.ListFeatureGroups][] must
   * match the call that provided the page token.
   */
  pageToken: string;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   * Supported Fields:
   *
   *   * `create_time`
   *   * `update_time`
   */
  orderBy: string;
}

/**
 * Response message for
 * [FeatureRegistryService.ListFeatureGroups][google.cloud.aiplatform.v1.FeatureRegistryService.ListFeatureGroups].
 */
export interface ListFeatureGroupsResponse {
  /** The FeatureGroups matching the request. */
  featureGroups: FeatureGroup[];
  /**
   * A token, which can be sent as
   * [ListFeatureGroupsRequest.page_token][google.cloud.aiplatform.v1.ListFeatureGroupsRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [FeatureRegistryService.UpdateFeatureGroup][google.cloud.aiplatform.v1.FeatureRegistryService.UpdateFeatureGroup].
 */
export interface UpdateFeatureGroupRequest {
  /**
   * Required. The FeatureGroup's `name` field is used to identify the
   * FeatureGroup to be updated. Format:
   * `projects/{project}/locations/{location}/featureGroups/{feature_group}`
   */
  featureGroup:
    | FeatureGroup
    | undefined;
  /**
   * Field mask is used to specify the fields to be overwritten in the
   * FeatureGroup resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then only the non-empty fields present in the
   * request will be overwritten. Set the update_mask to `*` to override all
   * fields.
   *
   * Updatable fields:
   *
   *   * `labels`
   *   * `description`
   *   * `big_query`
   *   * `big_query.entity_id_columns`
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [FeatureRegistryService.DeleteFeatureGroup][google.cloud.aiplatform.v1.FeatureRegistryService.DeleteFeatureGroup].
 */
export interface DeleteFeatureGroupRequest {
  /**
   * Required. The name of the FeatureGroup to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/featureGroups/{feature_group}`
   */
  name: string;
  /**
   * If set to true, any Features under this FeatureGroup
   * will also be deleted. (Otherwise, the request will only work if the
   * FeatureGroup has no Features.)
   */
  force: boolean;
}

/** Details of operations that perform create FeatureGroup. */
export interface CreateFeatureGroupOperationMetadata {
  /** Operation metadata for FeatureGroup. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/** Details of operations that perform update FeatureGroup. */
export interface UpdateFeatureGroupOperationMetadata {
  /** Operation metadata for FeatureGroup. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/** Details of operations that perform create FeatureGroup. */
export interface CreateRegistryFeatureOperationMetadata {
  /** Operation metadata for Feature. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/** Details of operations that perform update Feature. */
export interface UpdateFeatureOperationMetadata {
  /** Operation metadata for Feature Update. */
  genericMetadata: GenericOperationMetadata | undefined;
}

function createBaseCreateFeatureGroupRequest(): CreateFeatureGroupRequest {
  return { parent: "", featureGroup: undefined, featureGroupId: "" };
}

export const CreateFeatureGroupRequest: MessageFns<CreateFeatureGroupRequest> = {
  encode(message: CreateFeatureGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.featureGroup !== undefined) {
      FeatureGroup.encode(message.featureGroup, writer.uint32(18).fork()).join();
    }
    if (message.featureGroupId !== "") {
      writer.uint32(26).string(message.featureGroupId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeatureGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeatureGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.featureGroup = FeatureGroup.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.featureGroupId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFeatureGroupRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      featureGroup: isSet(object.featureGroup) ? FeatureGroup.fromJSON(object.featureGroup) : undefined,
      featureGroupId: isSet(object.featureGroupId) ? globalThis.String(object.featureGroupId) : "",
    };
  },

  toJSON(message: CreateFeatureGroupRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.featureGroup !== undefined) {
      obj.featureGroup = FeatureGroup.toJSON(message.featureGroup);
    }
    if (message.featureGroupId !== "") {
      obj.featureGroupId = message.featureGroupId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFeatureGroupRequest>): CreateFeatureGroupRequest {
    return CreateFeatureGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFeatureGroupRequest>): CreateFeatureGroupRequest {
    const message = createBaseCreateFeatureGroupRequest();
    message.parent = object.parent ?? "";
    message.featureGroup = (object.featureGroup !== undefined && object.featureGroup !== null)
      ? FeatureGroup.fromPartial(object.featureGroup)
      : undefined;
    message.featureGroupId = object.featureGroupId ?? "";
    return message;
  },
};

function createBaseGetFeatureGroupRequest(): GetFeatureGroupRequest {
  return { name: "" };
}

export const GetFeatureGroupRequest: MessageFns<GetFeatureGroupRequest> = {
  encode(message: GetFeatureGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureGroupRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFeatureGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFeatureGroupRequest>): GetFeatureGroupRequest {
    return GetFeatureGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFeatureGroupRequest>): GetFeatureGroupRequest {
    const message = createBaseGetFeatureGroupRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListFeatureGroupsRequest(): ListFeatureGroupsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "" };
}

export const ListFeatureGroupsRequest: MessageFns<ListFeatureGroupsRequest> = {
  encode(message: ListFeatureGroupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeatureGroupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeatureGroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeatureGroupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListFeatureGroupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeatureGroupsRequest>): ListFeatureGroupsRequest {
    return ListFeatureGroupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeatureGroupsRequest>): ListFeatureGroupsRequest {
    const message = createBaseListFeatureGroupsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListFeatureGroupsResponse(): ListFeatureGroupsResponse {
  return { featureGroups: [], nextPageToken: "" };
}

export const ListFeatureGroupsResponse: MessageFns<ListFeatureGroupsResponse> = {
  encode(message: ListFeatureGroupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.featureGroups) {
      FeatureGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeatureGroupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeatureGroupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.featureGroups.push(FeatureGroup.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeatureGroupsResponse {
    return {
      featureGroups: globalThis.Array.isArray(object?.featureGroups)
        ? object.featureGroups.map((e: any) => FeatureGroup.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListFeatureGroupsResponse): unknown {
    const obj: any = {};
    if (message.featureGroups?.length) {
      obj.featureGroups = message.featureGroups.map((e) => FeatureGroup.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeatureGroupsResponse>): ListFeatureGroupsResponse {
    return ListFeatureGroupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeatureGroupsResponse>): ListFeatureGroupsResponse {
    const message = createBaseListFeatureGroupsResponse();
    message.featureGroups = object.featureGroups?.map((e) => FeatureGroup.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateFeatureGroupRequest(): UpdateFeatureGroupRequest {
  return { featureGroup: undefined, updateMask: undefined };
}

export const UpdateFeatureGroupRequest: MessageFns<UpdateFeatureGroupRequest> = {
  encode(message: UpdateFeatureGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.featureGroup !== undefined) {
      FeatureGroup.encode(message.featureGroup, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFeatureGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFeatureGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.featureGroup = FeatureGroup.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFeatureGroupRequest {
    return {
      featureGroup: isSet(object.featureGroup) ? FeatureGroup.fromJSON(object.featureGroup) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateFeatureGroupRequest): unknown {
    const obj: any = {};
    if (message.featureGroup !== undefined) {
      obj.featureGroup = FeatureGroup.toJSON(message.featureGroup);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFeatureGroupRequest>): UpdateFeatureGroupRequest {
    return UpdateFeatureGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFeatureGroupRequest>): UpdateFeatureGroupRequest {
    const message = createBaseUpdateFeatureGroupRequest();
    message.featureGroup = (object.featureGroup !== undefined && object.featureGroup !== null)
      ? FeatureGroup.fromPartial(object.featureGroup)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteFeatureGroupRequest(): DeleteFeatureGroupRequest {
  return { name: "", force: false };
}

export const DeleteFeatureGroupRequest: MessageFns<DeleteFeatureGroupRequest> = {
  encode(message: DeleteFeatureGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFeatureGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFeatureGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFeatureGroupRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteFeatureGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFeatureGroupRequest>): DeleteFeatureGroupRequest {
    return DeleteFeatureGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFeatureGroupRequest>): DeleteFeatureGroupRequest {
    const message = createBaseDeleteFeatureGroupRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseCreateFeatureGroupOperationMetadata(): CreateFeatureGroupOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateFeatureGroupOperationMetadata: MessageFns<CreateFeatureGroupOperationMetadata> = {
  encode(message: CreateFeatureGroupOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeatureGroupOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeatureGroupOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFeatureGroupOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateFeatureGroupOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFeatureGroupOperationMetadata>): CreateFeatureGroupOperationMetadata {
    return CreateFeatureGroupOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFeatureGroupOperationMetadata>): CreateFeatureGroupOperationMetadata {
    const message = createBaseCreateFeatureGroupOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseUpdateFeatureGroupOperationMetadata(): UpdateFeatureGroupOperationMetadata {
  return { genericMetadata: undefined };
}

export const UpdateFeatureGroupOperationMetadata: MessageFns<UpdateFeatureGroupOperationMetadata> = {
  encode(message: UpdateFeatureGroupOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFeatureGroupOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFeatureGroupOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFeatureGroupOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UpdateFeatureGroupOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFeatureGroupOperationMetadata>): UpdateFeatureGroupOperationMetadata {
    return UpdateFeatureGroupOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFeatureGroupOperationMetadata>): UpdateFeatureGroupOperationMetadata {
    const message = createBaseUpdateFeatureGroupOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseCreateRegistryFeatureOperationMetadata(): CreateRegistryFeatureOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateRegistryFeatureOperationMetadata: MessageFns<CreateRegistryFeatureOperationMetadata> = {
  encode(message: CreateRegistryFeatureOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRegistryFeatureOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRegistryFeatureOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRegistryFeatureOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateRegistryFeatureOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRegistryFeatureOperationMetadata>): CreateRegistryFeatureOperationMetadata {
    return CreateRegistryFeatureOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRegistryFeatureOperationMetadata>): CreateRegistryFeatureOperationMetadata {
    const message = createBaseCreateRegistryFeatureOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseUpdateFeatureOperationMetadata(): UpdateFeatureOperationMetadata {
  return { genericMetadata: undefined };
}

export const UpdateFeatureOperationMetadata: MessageFns<UpdateFeatureOperationMetadata> = {
  encode(message: UpdateFeatureOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFeatureOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFeatureOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFeatureOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UpdateFeatureOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFeatureOperationMetadata>): UpdateFeatureOperationMetadata {
    return UpdateFeatureOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFeatureOperationMetadata>): UpdateFeatureOperationMetadata {
    const message = createBaseUpdateFeatureOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

/**
 * The service that handles CRUD and List for resources for
 * FeatureRegistry.
 */
export type FeatureRegistryServiceDefinition = typeof FeatureRegistryServiceDefinition;
export const FeatureRegistryServiceDefinition = {
  name: "FeatureRegistryService",
  fullName: "google.cloud.aiplatform.v1.FeatureRegistryService",
  methods: {
    /** Creates a new FeatureGroup in a given project and location. */
    createFeatureGroup: {
      name: "CreateFeatureGroup",
      requestType: CreateFeatureGroupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              51,
              10,
              12,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              18,
              35,
              67,
              114,
              101,
              97,
              116,
              101,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              37,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              13,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single FeatureGroup. */
    getFeatureGroup: {
      name: "GetFeatureGroup",
      requestType: GetFeatureGroupRequest,
      requestStream: false,
      responseType: FeatureGroup,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists FeatureGroups in a given project and location. */
    listFeatureGroups: {
      name: "ListFeatureGroups",
      requestType: ListFeatureGroupsRequest,
      requestStream: false,
      responseType: ListFeatureGroupsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single FeatureGroup. */
    updateFeatureGroup: {
      name: "UpdateFeatureGroup",
      requestType: UpdateFeatureGroupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              51,
              10,
              12,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              18,
              35,
              85,
              112,
              100,
              97,
              116,
              101,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              13,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              50,
              63,
              47,
              118,
              49,
              47,
              123,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              103,
              114,
              111,
              117,
              112,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single FeatureGroup. */
    deleteFeatureGroup: {
      name: "DeleteFeatureGroup",
      requestType: DeleteFeatureGroupRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 102, 111, 114, 99, 101])],
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new Feature in a given FeatureGroup. */
    createFeature: {
      name: "CreateFeature",
      requestType: CreateFeatureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              7,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              18,
              30,
              67,
              114,
              101,
              97,
              116,
              101,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              7,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              34,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Feature. */
    getFeature: {
      name: "GetFeature",
      requestType: GetFeatureRequest,
      requestStream: false,
      responseType: Feature,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Features in a given FeatureGroup. */
    listFeatures: {
      name: "ListFeatures",
      requestType: ListFeaturesRequest,
      requestStream: false,
      responseType: ListFeaturesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single Feature. */
    updateFeature: {
      name: "UpdateFeature",
      requestType: UpdateFeatureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              7,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              18,
              30,
              85,
              112,
              100,
              97,
              116,
              101,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([19, 102, 101, 97, 116, 117, 114, 101, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              79,
              58,
              7,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              50,
              68,
              47,
              118,
              49,
              47,
              123,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single Feature. */
    deleteFeature: {
      name: "DeleteFeature",
      requestType: DeleteFeatureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              42,
              60,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              71,
              114,
              111,
              117,
              112,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface FeatureRegistryServiceImplementation<CallContextExt = {}> {
  /** Creates a new FeatureGroup in a given project and location. */
  createFeatureGroup(
    request: CreateFeatureGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets details of a single FeatureGroup. */
  getFeatureGroup(
    request: GetFeatureGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FeatureGroup>>;
  /** Lists FeatureGroups in a given project and location. */
  listFeatureGroups(
    request: ListFeatureGroupsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFeatureGroupsResponse>>;
  /** Updates the parameters of a single FeatureGroup. */
  updateFeatureGroup(
    request: UpdateFeatureGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single FeatureGroup. */
  deleteFeatureGroup(
    request: DeleteFeatureGroupRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a new Feature in a given FeatureGroup. */
  createFeature(request: CreateFeatureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Gets details of a single Feature. */
  getFeature(request: GetFeatureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Feature>>;
  /** Lists Features in a given FeatureGroup. */
  listFeatures(
    request: ListFeaturesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFeaturesResponse>>;
  /** Updates the parameters of a single Feature. */
  updateFeature(request: UpdateFeatureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Deletes a single Feature. */
  deleteFeature(request: DeleteFeatureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
}

export interface FeatureRegistryServiceClient<CallOptionsExt = {}> {
  /** Creates a new FeatureGroup in a given project and location. */
  createFeatureGroup(
    request: DeepPartial<CreateFeatureGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets details of a single FeatureGroup. */
  getFeatureGroup(
    request: DeepPartial<GetFeatureGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FeatureGroup>;
  /** Lists FeatureGroups in a given project and location. */
  listFeatureGroups(
    request: DeepPartial<ListFeatureGroupsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFeatureGroupsResponse>;
  /** Updates the parameters of a single FeatureGroup. */
  updateFeatureGroup(
    request: DeepPartial<UpdateFeatureGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single FeatureGroup. */
  deleteFeatureGroup(
    request: DeepPartial<DeleteFeatureGroupRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a new Feature in a given FeatureGroup. */
  createFeature(request: DeepPartial<CreateFeatureRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Gets details of a single Feature. */
  getFeature(request: DeepPartial<GetFeatureRequest>, options?: CallOptions & CallOptionsExt): Promise<Feature>;
  /** Lists Features in a given FeatureGroup. */
  listFeatures(
    request: DeepPartial<ListFeaturesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFeaturesResponse>;
  /** Updates the parameters of a single Feature. */
  updateFeature(request: DeepPartial<UpdateFeatureRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Deletes a single Feature. */
  deleteFeature(request: DeepPartial<DeleteFeatureRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
