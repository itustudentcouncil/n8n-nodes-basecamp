// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/metadata_store.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { EncryptionSpec } from "./encryption_spec.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Instance of a metadata store. Contains a set of metadata that can be
 * queried.
 */
export interface MetadataStore {
  /** Output only. The resource name of the MetadataStore instance. */
  name: string;
  /** Output only. Timestamp when this MetadataStore was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when this MetadataStore was last updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Customer-managed encryption key spec for a Metadata Store. If set, this
   * Metadata Store and all sub-resources of this Metadata Store are secured
   * using this key.
   */
  encryptionSpec:
    | EncryptionSpec
    | undefined;
  /** Description of the MetadataStore. */
  description: string;
  /** Output only. State information of the MetadataStore. */
  state:
    | MetadataStore_MetadataStoreState
    | undefined;
  /** Optional. Dataplex integration settings. */
  dataplexConfig: MetadataStore_DataplexConfig | undefined;
}

/** Represents state information for a MetadataStore. */
export interface MetadataStore_MetadataStoreState {
  /** The disk utilization of the MetadataStore in bytes. */
  diskUtilizationBytes: Long;
}

/** Represents Dataplex integration settings. */
export interface MetadataStore_DataplexConfig {
  /**
   * Optional. Whether or not Data Lineage synchronization is enabled for
   * Vertex Pipelines.
   */
  enabledPipelinesLineage: boolean;
}

function createBaseMetadataStore(): MetadataStore {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    encryptionSpec: undefined,
    description: "",
    state: undefined,
    dataplexConfig: undefined,
  };
}

export const MetadataStore: MessageFns<MetadataStore> = {
  encode(message: MetadataStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.encryptionSpec !== undefined) {
      EncryptionSpec.encode(message.encryptionSpec, writer.uint32(42).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    if (message.state !== undefined) {
      MetadataStore_MetadataStoreState.encode(message.state, writer.uint32(58).fork()).join();
    }
    if (message.dataplexConfig !== undefined) {
      MetadataStore_DataplexConfig.encode(message.dataplexConfig, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.encryptionSpec = EncryptionSpec.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.state = MetadataStore_MetadataStoreState.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.dataplexConfig = MetadataStore_DataplexConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataStore {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      encryptionSpec: isSet(object.encryptionSpec) ? EncryptionSpec.fromJSON(object.encryptionSpec) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      state: isSet(object.state) ? MetadataStore_MetadataStoreState.fromJSON(object.state) : undefined,
      dataplexConfig: isSet(object.dataplexConfig)
        ? MetadataStore_DataplexConfig.fromJSON(object.dataplexConfig)
        : undefined,
    };
  },

  toJSON(message: MetadataStore): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.encryptionSpec !== undefined) {
      obj.encryptionSpec = EncryptionSpec.toJSON(message.encryptionSpec);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.state !== undefined) {
      obj.state = MetadataStore_MetadataStoreState.toJSON(message.state);
    }
    if (message.dataplexConfig !== undefined) {
      obj.dataplexConfig = MetadataStore_DataplexConfig.toJSON(message.dataplexConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<MetadataStore>): MetadataStore {
    return MetadataStore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetadataStore>): MetadataStore {
    const message = createBaseMetadataStore();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.encryptionSpec = (object.encryptionSpec !== undefined && object.encryptionSpec !== null)
      ? EncryptionSpec.fromPartial(object.encryptionSpec)
      : undefined;
    message.description = object.description ?? "";
    message.state = (object.state !== undefined && object.state !== null)
      ? MetadataStore_MetadataStoreState.fromPartial(object.state)
      : undefined;
    message.dataplexConfig = (object.dataplexConfig !== undefined && object.dataplexConfig !== null)
      ? MetadataStore_DataplexConfig.fromPartial(object.dataplexConfig)
      : undefined;
    return message;
  },
};

function createBaseMetadataStore_MetadataStoreState(): MetadataStore_MetadataStoreState {
  return { diskUtilizationBytes: Long.ZERO };
}

export const MetadataStore_MetadataStoreState: MessageFns<MetadataStore_MetadataStoreState> = {
  encode(message: MetadataStore_MetadataStoreState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.diskUtilizationBytes.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.diskUtilizationBytes.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataStore_MetadataStoreState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataStore_MetadataStoreState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.diskUtilizationBytes = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataStore_MetadataStoreState {
    return {
      diskUtilizationBytes: isSet(object.diskUtilizationBytes)
        ? Long.fromValue(object.diskUtilizationBytes)
        : Long.ZERO,
    };
  },

  toJSON(message: MetadataStore_MetadataStoreState): unknown {
    const obj: any = {};
    if (!message.diskUtilizationBytes.equals(Long.ZERO)) {
      obj.diskUtilizationBytes = (message.diskUtilizationBytes || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<MetadataStore_MetadataStoreState>): MetadataStore_MetadataStoreState {
    return MetadataStore_MetadataStoreState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetadataStore_MetadataStoreState>): MetadataStore_MetadataStoreState {
    const message = createBaseMetadataStore_MetadataStoreState();
    message.diskUtilizationBytes = (object.diskUtilizationBytes !== undefined && object.diskUtilizationBytes !== null)
      ? Long.fromValue(object.diskUtilizationBytes)
      : Long.ZERO;
    return message;
  },
};

function createBaseMetadataStore_DataplexConfig(): MetadataStore_DataplexConfig {
  return { enabledPipelinesLineage: false };
}

export const MetadataStore_DataplexConfig: MessageFns<MetadataStore_DataplexConfig> = {
  encode(message: MetadataStore_DataplexConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabledPipelinesLineage !== false) {
      writer.uint32(8).bool(message.enabledPipelinesLineage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataStore_DataplexConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataStore_DataplexConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enabledPipelinesLineage = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataStore_DataplexConfig {
    return {
      enabledPipelinesLineage: isSet(object.enabledPipelinesLineage)
        ? globalThis.Boolean(object.enabledPipelinesLineage)
        : false,
    };
  },

  toJSON(message: MetadataStore_DataplexConfig): unknown {
    const obj: any = {};
    if (message.enabledPipelinesLineage !== false) {
      obj.enabledPipelinesLineage = message.enabledPipelinesLineage;
    }
    return obj;
  },

  create(base?: DeepPartial<MetadataStore_DataplexConfig>): MetadataStore_DataplexConfig {
    return MetadataStore_DataplexConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MetadataStore_DataplexConfig>): MetadataStore_DataplexConfig {
    const message = createBaseMetadataStore_DataplexConfig();
    message.enabledPipelinesLineage = object.enabledPipelinesLineage ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
