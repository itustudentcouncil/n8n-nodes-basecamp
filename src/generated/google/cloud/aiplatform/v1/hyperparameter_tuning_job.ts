// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1/hyperparameter_tuning_job.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { CustomJobSpec } from "./custom_job.js";
import { EncryptionSpec } from "./encryption_spec.js";
import { JobState, jobStateFromJSON, jobStateToJSON } from "./job_state.js";
import { StudySpec, Trial } from "./study.js";

export const protobufPackage = "google.cloud.aiplatform.v1";

/**
 * Represents a HyperparameterTuningJob. A HyperparameterTuningJob
 * has a Study specification and multiple CustomJobs with identical
 * CustomJob specification.
 */
export interface HyperparameterTuningJob {
  /** Output only. Resource name of the HyperparameterTuningJob. */
  name: string;
  /**
   * Required. The display name of the HyperparameterTuningJob.
   * The name can be up to 128 characters long and can consist of any UTF-8
   * characters.
   */
  displayName: string;
  /** Required. Study configuration of the HyperparameterTuningJob. */
  studySpec:
    | StudySpec
    | undefined;
  /** Required. The desired total number of Trials. */
  maxTrialCount: number;
  /** Required. The desired number of Trials to run in parallel. */
  parallelTrialCount: number;
  /**
   * The number of failed Trials that need to be seen before failing
   * the HyperparameterTuningJob.
   *
   * If set to 0, Vertex AI decides how many Trials must fail
   * before the whole job fails.
   */
  maxFailedTrialCount: number;
  /**
   * Required. The spec of a trial job. The same spec applies to the CustomJobs
   * created in all the trials.
   */
  trialJobSpec:
    | CustomJobSpec
    | undefined;
  /** Output only. Trials of the HyperparameterTuningJob. */
  trials: Trial[];
  /** Output only. The detailed state of the job. */
  state: JobState;
  /** Output only. Time when the HyperparameterTuningJob was created. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. Time when the HyperparameterTuningJob for the first time
   * entered the `JOB_STATE_RUNNING` state.
   */
  startTime:
    | Date
    | undefined;
  /**
   * Output only. Time when the HyperparameterTuningJob entered any of the
   * following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`,
   * `JOB_STATE_CANCELLED`.
   */
  endTime:
    | Date
    | undefined;
  /**
   * Output only. Time when the HyperparameterTuningJob was most recently
   * updated.
   */
  updateTime:
    | Date
    | undefined;
  /**
   * Output only. Only populated when job's state is JOB_STATE_FAILED or
   * JOB_STATE_CANCELLED.
   */
  error:
    | Status
    | undefined;
  /**
   * The labels with user-defined metadata to organize HyperparameterTuningJobs.
   *
   * Label keys and values can be no longer than 64 characters
   * (Unicode codepoints), can only contain lowercase letters, numeric
   * characters, underscores and dashes. International characters are allowed.
   *
   * See https://goo.gl/xmQnxf for more information and examples of labels.
   */
  labels: { [key: string]: string };
  /**
   * Customer-managed encryption key options for a HyperparameterTuningJob.
   * If this is set, then all resources created by the HyperparameterTuningJob
   * will be encrypted with the provided encryption key.
   */
  encryptionSpec:
    | EncryptionSpec
    | undefined;
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /** Output only. Reserved for future use. */
  satisfiesPzi: boolean;
}

export interface HyperparameterTuningJob_LabelsEntry {
  key: string;
  value: string;
}

function createBaseHyperparameterTuningJob(): HyperparameterTuningJob {
  return {
    name: "",
    displayName: "",
    studySpec: undefined,
    maxTrialCount: 0,
    parallelTrialCount: 0,
    maxFailedTrialCount: 0,
    trialJobSpec: undefined,
    trials: [],
    state: 0,
    createTime: undefined,
    startTime: undefined,
    endTime: undefined,
    updateTime: undefined,
    error: undefined,
    labels: {},
    encryptionSpec: undefined,
    satisfiesPzs: false,
    satisfiesPzi: false,
  };
}

export const HyperparameterTuningJob: MessageFns<HyperparameterTuningJob> = {
  encode(message: HyperparameterTuningJob, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.studySpec !== undefined) {
      StudySpec.encode(message.studySpec, writer.uint32(34).fork()).join();
    }
    if (message.maxTrialCount !== 0) {
      writer.uint32(40).int32(message.maxTrialCount);
    }
    if (message.parallelTrialCount !== 0) {
      writer.uint32(48).int32(message.parallelTrialCount);
    }
    if (message.maxFailedTrialCount !== 0) {
      writer.uint32(56).int32(message.maxFailedTrialCount);
    }
    if (message.trialJobSpec !== undefined) {
      CustomJobSpec.encode(message.trialJobSpec, writer.uint32(66).fork()).join();
    }
    for (const v of message.trials) {
      Trial.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(80).int32(message.state);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(90).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(98).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(106).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(114).fork()).join();
    }
    if (message.error !== undefined) {
      Status.encode(message.error, writer.uint32(122).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      HyperparameterTuningJob_LabelsEntry.encode({ key: key as any, value }, writer.uint32(130).fork()).join();
    });
    if (message.encryptionSpec !== undefined) {
      EncryptionSpec.encode(message.encryptionSpec, writer.uint32(138).fork()).join();
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(152).bool(message.satisfiesPzs);
    }
    if (message.satisfiesPzi !== false) {
      writer.uint32(160).bool(message.satisfiesPzi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HyperparameterTuningJob {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHyperparameterTuningJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.studySpec = StudySpec.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.maxTrialCount = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.parallelTrialCount = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.maxFailedTrialCount = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.trialJobSpec = CustomJobSpec.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.trials.push(Trial.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.error = Status.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          const entry16 = HyperparameterTuningJob_LabelsEntry.decode(reader, reader.uint32());
          if (entry16.value !== undefined) {
            message.labels[entry16.key] = entry16.value;
          }
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.encryptionSpec = EncryptionSpec.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.satisfiesPzi = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HyperparameterTuningJob {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      studySpec: isSet(object.studySpec) ? StudySpec.fromJSON(object.studySpec) : undefined,
      maxTrialCount: isSet(object.maxTrialCount) ? globalThis.Number(object.maxTrialCount) : 0,
      parallelTrialCount: isSet(object.parallelTrialCount) ? globalThis.Number(object.parallelTrialCount) : 0,
      maxFailedTrialCount: isSet(object.maxFailedTrialCount) ? globalThis.Number(object.maxFailedTrialCount) : 0,
      trialJobSpec: isSet(object.trialJobSpec) ? CustomJobSpec.fromJSON(object.trialJobSpec) : undefined,
      trials: globalThis.Array.isArray(object?.trials) ? object.trials.map((e: any) => Trial.fromJSON(e)) : [],
      state: isSet(object.state) ? jobStateFromJSON(object.state) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      error: isSet(object.error) ? Status.fromJSON(object.error) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      encryptionSpec: isSet(object.encryptionSpec) ? EncryptionSpec.fromJSON(object.encryptionSpec) : undefined,
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      satisfiesPzi: isSet(object.satisfiesPzi) ? globalThis.Boolean(object.satisfiesPzi) : false,
    };
  },

  toJSON(message: HyperparameterTuningJob): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.studySpec !== undefined) {
      obj.studySpec = StudySpec.toJSON(message.studySpec);
    }
    if (message.maxTrialCount !== 0) {
      obj.maxTrialCount = Math.round(message.maxTrialCount);
    }
    if (message.parallelTrialCount !== 0) {
      obj.parallelTrialCount = Math.round(message.parallelTrialCount);
    }
    if (message.maxFailedTrialCount !== 0) {
      obj.maxFailedTrialCount = Math.round(message.maxFailedTrialCount);
    }
    if (message.trialJobSpec !== undefined) {
      obj.trialJobSpec = CustomJobSpec.toJSON(message.trialJobSpec);
    }
    if (message.trials?.length) {
      obj.trials = message.trials.map((e) => Trial.toJSON(e));
    }
    if (message.state !== 0) {
      obj.state = jobStateToJSON(message.state);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.error !== undefined) {
      obj.error = Status.toJSON(message.error);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.encryptionSpec !== undefined) {
      obj.encryptionSpec = EncryptionSpec.toJSON(message.encryptionSpec);
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.satisfiesPzi !== false) {
      obj.satisfiesPzi = message.satisfiesPzi;
    }
    return obj;
  },

  create(base?: DeepPartial<HyperparameterTuningJob>): HyperparameterTuningJob {
    return HyperparameterTuningJob.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HyperparameterTuningJob>): HyperparameterTuningJob {
    const message = createBaseHyperparameterTuningJob();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.studySpec = (object.studySpec !== undefined && object.studySpec !== null)
      ? StudySpec.fromPartial(object.studySpec)
      : undefined;
    message.maxTrialCount = object.maxTrialCount ?? 0;
    message.parallelTrialCount = object.parallelTrialCount ?? 0;
    message.maxFailedTrialCount = object.maxFailedTrialCount ?? 0;
    message.trialJobSpec = (object.trialJobSpec !== undefined && object.trialJobSpec !== null)
      ? CustomJobSpec.fromPartial(object.trialJobSpec)
      : undefined;
    message.trials = object.trials?.map((e) => Trial.fromPartial(e)) || [];
    message.state = object.state ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? Status.fromPartial(object.error)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.encryptionSpec = (object.encryptionSpec !== undefined && object.encryptionSpec !== null)
      ? EncryptionSpec.fromPartial(object.encryptionSpec)
      : undefined;
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.satisfiesPzi = object.satisfiesPzi ?? false;
    return message;
  },
};

function createBaseHyperparameterTuningJob_LabelsEntry(): HyperparameterTuningJob_LabelsEntry {
  return { key: "", value: "" };
}

export const HyperparameterTuningJob_LabelsEntry: MessageFns<HyperparameterTuningJob_LabelsEntry> = {
  encode(message: HyperparameterTuningJob_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HyperparameterTuningJob_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHyperparameterTuningJob_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HyperparameterTuningJob_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: HyperparameterTuningJob_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<HyperparameterTuningJob_LabelsEntry>): HyperparameterTuningJob_LabelsEntry {
    return HyperparameterTuningJob_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HyperparameterTuningJob_LabelsEntry>): HyperparameterTuningJob_LabelsEntry {
    const message = createBaseHyperparameterTuningJob_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
