// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/tensorboard_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { GenericOperationMetadata } from "./operation.js";
import { Tensorboard } from "./tensorboard.js";
import { TensorboardBlob, TimeSeriesData, TimeSeriesDataPoint } from "./tensorboard_data.js";
import { TensorboardExperiment } from "./tensorboard_experiment.js";
import { TensorboardRun } from "./tensorboard_run.js";
import { TensorboardTimeSeries } from "./tensorboard_time_series.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Request message for
 * [TensorboardService.CreateTensorboard][google.cloud.aiplatform.v1beta1.TensorboardService.CreateTensorboard].
 */
export interface CreateTensorboardRequest {
  /**
   * Required. The resource name of the Location to create the Tensorboard in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The Tensorboard to create. */
  tensorboard: Tensorboard | undefined;
}

/**
 * Request message for
 * [TensorboardService.GetTensorboard][google.cloud.aiplatform.v1beta1.TensorboardService.GetTensorboard].
 */
export interface GetTensorboardRequest {
  /**
   * Required. The name of the Tensorboard resource.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   */
  name: string;
}

/**
 * Request message for
 * [TensorboardService.ListTensorboards][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboards].
 */
export interface ListTensorboardsRequest {
  /**
   * Required. The resource name of the Location to list Tensorboards.
   * Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Lists the Tensorboards that match the filter expression. */
  filter: string;
  /**
   * The maximum number of Tensorboards to return. The service may return
   * fewer than this value. If unspecified, at most 100 Tensorboards are
   * returned. The maximum value is 100; values above 100 are coerced to
   * 100.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [TensorboardService.ListTensorboards][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboards]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [TensorboardService.ListTensorboards][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboards]
   * must match the call that provided the page token.
   */
  pageToken: string;
  /** Field to use to sort the list. */
  orderBy: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [TensorboardService.ListTensorboards][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboards].
 */
export interface ListTensorboardsResponse {
  /** The Tensorboards mathching the request. */
  tensorboards: Tensorboard[];
  /**
   * A token, which can be sent as
   * [ListTensorboardsRequest.page_token][google.cloud.aiplatform.v1beta1.ListTensorboardsRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [TensorboardService.UpdateTensorboard][google.cloud.aiplatform.v1beta1.TensorboardService.UpdateTensorboard].
 */
export interface UpdateTensorboardRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Tensorboard resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field is overwritten if it's in the mask. If the
   * user does not provide a mask then all fields are overwritten if new
   * values are specified.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. The Tensorboard's `name` field is used to identify the
   * Tensorboard to be updated. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   */
  tensorboard: Tensorboard | undefined;
}

/**
 * Request message for
 * [TensorboardService.DeleteTensorboard][google.cloud.aiplatform.v1beta1.TensorboardService.DeleteTensorboard].
 */
export interface DeleteTensorboardRequest {
  /**
   * Required. The name of the Tensorboard to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   */
  name: string;
}

/**
 * Request message for
 * [TensorboardService.ReadTensorboardUsage][google.cloud.aiplatform.v1beta1.TensorboardService.ReadTensorboardUsage].
 */
export interface ReadTensorboardUsageRequest {
  /**
   * Required. The name of the Tensorboard resource.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   */
  tensorboard: string;
}

/**
 * Response message for
 * [TensorboardService.ReadTensorboardUsage][google.cloud.aiplatform.v1beta1.TensorboardService.ReadTensorboardUsage].
 */
export interface ReadTensorboardUsageResponse {
  /** Maps year-month (YYYYMM) string to per month usage data. */
  monthlyUsageData: { [key: string]: ReadTensorboardUsageResponse_PerMonthUsageData };
}

/** Per user usage data. */
export interface ReadTensorboardUsageResponse_PerUserUsageData {
  /** User's username */
  username: string;
  /** Number of times the user has read data within the Tensorboard. */
  viewCount: Long;
}

/** Per month usage data */
export interface ReadTensorboardUsageResponse_PerMonthUsageData {
  /** Usage data for each user in the given month. */
  userUsageData: ReadTensorboardUsageResponse_PerUserUsageData[];
}

export interface ReadTensorboardUsageResponse_MonthlyUsageDataEntry {
  key: string;
  value: ReadTensorboardUsageResponse_PerMonthUsageData | undefined;
}

/**
 * Request message for
 * [TensorboardService.ReadTensorboardSize][google.cloud.aiplatform.v1beta1.TensorboardService.ReadTensorboardSize].
 */
export interface ReadTensorboardSizeRequest {
  /**
   * Required. The name of the Tensorboard resource.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   */
  tensorboard: string;
}

/**
 * Response message for
 * [TensorboardService.ReadTensorboardSize][google.cloud.aiplatform.v1beta1.TensorboardService.ReadTensorboardSize].
 */
export interface ReadTensorboardSizeResponse {
  /** Payload storage size for the TensorBoard */
  storageSizeByte: Long;
}

/**
 * Request message for
 * [TensorboardService.CreateTensorboardExperiment][google.cloud.aiplatform.v1beta1.TensorboardService.CreateTensorboardExperiment].
 */
export interface CreateTensorboardExperimentRequest {
  /**
   * Required. The resource name of the Tensorboard to create the
   * TensorboardExperiment in. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   */
  parent: string;
  /** The TensorboardExperiment to create. */
  tensorboardExperiment:
    | TensorboardExperiment
    | undefined;
  /**
   * Required. The ID to use for the Tensorboard experiment, which becomes the
   * final component of the Tensorboard experiment's resource name.
   *
   * This value should be 1-128 characters, and valid characters
   * are `/[a-z][0-9]-/`.
   */
  tensorboardExperimentId: string;
}

/**
 * Request message for
 * [TensorboardService.GetTensorboardExperiment][google.cloud.aiplatform.v1beta1.TensorboardService.GetTensorboardExperiment].
 */
export interface GetTensorboardExperimentRequest {
  /**
   * Required. The name of the TensorboardExperiment resource.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   */
  name: string;
}

/**
 * Request message for
 * [TensorboardService.ListTensorboardExperiments][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardExperiments].
 */
export interface ListTensorboardExperimentsRequest {
  /**
   * Required. The resource name of the Tensorboard to list
   * TensorboardExperiments. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
   */
  parent: string;
  /** Lists the TensorboardExperiments that match the filter expression. */
  filter: string;
  /**
   * The maximum number of TensorboardExperiments to return. The service may
   * return fewer than this value. If unspecified, at most 50
   * TensorboardExperiments are returned. The maximum value is 1000; values
   * above 1000 are coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [TensorboardService.ListTensorboardExperiments][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardExperiments]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [TensorboardService.ListTensorboardExperiments][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardExperiments]
   * must match the call that provided the page token.
   */
  pageToken: string;
  /** Field to use to sort the list. */
  orderBy: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [TensorboardService.ListTensorboardExperiments][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardExperiments].
 */
export interface ListTensorboardExperimentsResponse {
  /** The TensorboardExperiments mathching the request. */
  tensorboardExperiments: TensorboardExperiment[];
  /**
   * A token, which can be sent as
   * [ListTensorboardExperimentsRequest.page_token][google.cloud.aiplatform.v1beta1.ListTensorboardExperimentsRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [TensorboardService.UpdateTensorboardExperiment][google.cloud.aiplatform.v1beta1.TensorboardService.UpdateTensorboardExperiment].
 */
export interface UpdateTensorboardExperimentRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * TensorboardExperiment resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field is overwritten if it's in the mask. If the
   * user does not provide a mask then all fields are overwritten if new
   * values are specified.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. The TensorboardExperiment's `name` field is used to identify the
   * TensorboardExperiment to be updated. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   */
  tensorboardExperiment: TensorboardExperiment | undefined;
}

/**
 * Request message for
 * [TensorboardService.DeleteTensorboardExperiment][google.cloud.aiplatform.v1beta1.TensorboardService.DeleteTensorboardExperiment].
 */
export interface DeleteTensorboardExperimentRequest {
  /**
   * Required. The name of the TensorboardExperiment to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   */
  name: string;
}

/**
 * Request message for
 * [TensorboardService.BatchCreateTensorboardRuns][google.cloud.aiplatform.v1beta1.TensorboardService.BatchCreateTensorboardRuns].
 */
export interface BatchCreateTensorboardRunsRequest {
  /**
   * Required. The resource name of the TensorboardExperiment to create the
   * TensorboardRuns in. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * The parent field in the CreateTensorboardRunRequest messages must match
   * this field.
   */
  parent: string;
  /**
   * Required. The request message specifying the TensorboardRuns to create.
   * A maximum of 1000 TensorboardRuns can be created in a batch.
   */
  requests: CreateTensorboardRunRequest[];
}

/**
 * Response message for
 * [TensorboardService.BatchCreateTensorboardRuns][google.cloud.aiplatform.v1beta1.TensorboardService.BatchCreateTensorboardRuns].
 */
export interface BatchCreateTensorboardRunsResponse {
  /** The created TensorboardRuns. */
  tensorboardRuns: TensorboardRun[];
}

/**
 * Request message for
 * [TensorboardService.CreateTensorboardRun][google.cloud.aiplatform.v1beta1.TensorboardService.CreateTensorboardRun].
 */
export interface CreateTensorboardRunRequest {
  /**
   * Required. The resource name of the TensorboardExperiment to create the
   * TensorboardRun in. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   */
  parent: string;
  /** Required. The TensorboardRun to create. */
  tensorboardRun:
    | TensorboardRun
    | undefined;
  /**
   * Required. The ID to use for the Tensorboard run, which becomes the final
   * component of the Tensorboard run's resource name.
   *
   * This value should be 1-128 characters, and valid characters
   * are `/[a-z][0-9]-/`.
   */
  tensorboardRunId: string;
}

/**
 * Request message for
 * [TensorboardService.GetTensorboardRun][google.cloud.aiplatform.v1beta1.TensorboardService.GetTensorboardRun].
 */
export interface GetTensorboardRunRequest {
  /**
   * Required. The name of the TensorboardRun resource.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   */
  name: string;
}

/**
 * Request message for
 * [TensorboardService.ReadTensorboardBlobData][google.cloud.aiplatform.v1beta1.TensorboardService.ReadTensorboardBlobData].
 */
export interface ReadTensorboardBlobDataRequest {
  /**
   * Required. The resource name of the TensorboardTimeSeries to list Blobs.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   */
  timeSeries: string;
  /** IDs of the blobs to read. */
  blobIds: string[];
}

/**
 * Response message for
 * [TensorboardService.ReadTensorboardBlobData][google.cloud.aiplatform.v1beta1.TensorboardService.ReadTensorboardBlobData].
 */
export interface ReadTensorboardBlobDataResponse {
  /** Blob messages containing blob bytes. */
  blobs: TensorboardBlob[];
}

/**
 * Request message for
 * [TensorboardService.ListTensorboardRuns][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardRuns].
 */
export interface ListTensorboardRunsRequest {
  /**
   * Required. The resource name of the TensorboardExperiment to list
   * TensorboardRuns. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   */
  parent: string;
  /** Lists the TensorboardRuns that match the filter expression. */
  filter: string;
  /**
   * The maximum number of TensorboardRuns to return. The service may return
   * fewer than this value. If unspecified, at most 50 TensorboardRuns are
   * returned. The maximum value is 1000; values above 1000 are coerced to
   * 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [TensorboardService.ListTensorboardRuns][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardRuns]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [TensorboardService.ListTensorboardRuns][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardRuns]
   * must match the call that provided the page token.
   */
  pageToken: string;
  /** Field to use to sort the list. */
  orderBy: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [TensorboardService.ListTensorboardRuns][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardRuns].
 */
export interface ListTensorboardRunsResponse {
  /** The TensorboardRuns mathching the request. */
  tensorboardRuns: TensorboardRun[];
  /**
   * A token, which can be sent as
   * [ListTensorboardRunsRequest.page_token][google.cloud.aiplatform.v1beta1.ListTensorboardRunsRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [TensorboardService.UpdateTensorboardRun][google.cloud.aiplatform.v1beta1.TensorboardService.UpdateTensorboardRun].
 */
export interface UpdateTensorboardRunRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * TensorboardRun resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field is overwritten if it's in the mask. If the
   * user does not provide a mask then all fields are overwritten if new
   * values are specified.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. The TensorboardRun's `name` field is used to identify the
   * TensorboardRun to be updated. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   */
  tensorboardRun: TensorboardRun | undefined;
}

/**
 * Request message for
 * [TensorboardService.DeleteTensorboardRun][google.cloud.aiplatform.v1beta1.TensorboardService.DeleteTensorboardRun].
 */
export interface DeleteTensorboardRunRequest {
  /**
   * Required. The name of the TensorboardRun to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   */
  name: string;
}

/**
 * Request message for
 * [TensorboardService.BatchCreateTensorboardTimeSeries][google.cloud.aiplatform.v1beta1.TensorboardService.BatchCreateTensorboardTimeSeries].
 */
export interface BatchCreateTensorboardTimeSeriesRequest {
  /**
   * Required. The resource name of the TensorboardExperiment to create the
   * TensorboardTimeSeries in.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   * The TensorboardRuns referenced by the parent fields in the
   * CreateTensorboardTimeSeriesRequest messages must be sub resources of this
   * TensorboardExperiment.
   */
  parent: string;
  /**
   * Required. The request message specifying the TensorboardTimeSeries to
   * create. A maximum of 1000 TensorboardTimeSeries can be created in a batch.
   */
  requests: CreateTensorboardTimeSeriesRequest[];
}

/**
 * Response message for
 * [TensorboardService.BatchCreateTensorboardTimeSeries][google.cloud.aiplatform.v1beta1.TensorboardService.BatchCreateTensorboardTimeSeries].
 */
export interface BatchCreateTensorboardTimeSeriesResponse {
  /** The created TensorboardTimeSeries. */
  tensorboardTimeSeries: TensorboardTimeSeries[];
}

/**
 * Request message for
 * [TensorboardService.CreateTensorboardTimeSeries][google.cloud.aiplatform.v1beta1.TensorboardService.CreateTensorboardTimeSeries].
 */
export interface CreateTensorboardTimeSeriesRequest {
  /**
   * Required. The resource name of the TensorboardRun to create the
   * TensorboardTimeSeries in.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   */
  parent: string;
  /**
   * Optional. The user specified unique ID to use for the
   * TensorboardTimeSeries, which becomes the final component of the
   * TensorboardTimeSeries's resource name. This value should match
   * "[a-z0-9][a-z0-9-]{0, 127}"
   */
  tensorboardTimeSeriesId: string;
  /** Required. The TensorboardTimeSeries to create. */
  tensorboardTimeSeries: TensorboardTimeSeries | undefined;
}

/**
 * Request message for
 * [TensorboardService.GetTensorboardTimeSeries][google.cloud.aiplatform.v1beta1.TensorboardService.GetTensorboardTimeSeries].
 */
export interface GetTensorboardTimeSeriesRequest {
  /**
   * Required. The name of the TensorboardTimeSeries resource.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   */
  name: string;
}

/**
 * Request message for
 * [TensorboardService.ListTensorboardTimeSeries][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardTimeSeries].
 */
export interface ListTensorboardTimeSeriesRequest {
  /**
   * Required. The resource name of the TensorboardRun to list
   * TensorboardTimeSeries. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   */
  parent: string;
  /** Lists the TensorboardTimeSeries that match the filter expression. */
  filter: string;
  /**
   * The maximum number of TensorboardTimeSeries to return. The service may
   * return fewer than this value. If unspecified, at most 50
   * TensorboardTimeSeries are returned. The maximum value is 1000; values
   * above 1000 are coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [TensorboardService.ListTensorboardTimeSeries][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardTimeSeries]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [TensorboardService.ListTensorboardTimeSeries][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardTimeSeries]
   * must match the call that provided the page token.
   */
  pageToken: string;
  /** Field to use to sort the list. */
  orderBy: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [TensorboardService.ListTensorboardTimeSeries][google.cloud.aiplatform.v1beta1.TensorboardService.ListTensorboardTimeSeries].
 */
export interface ListTensorboardTimeSeriesResponse {
  /** The TensorboardTimeSeries mathching the request. */
  tensorboardTimeSeries: TensorboardTimeSeries[];
  /**
   * A token, which can be sent as
   * [ListTensorboardTimeSeriesRequest.page_token][google.cloud.aiplatform.v1beta1.ListTensorboardTimeSeriesRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [TensorboardService.UpdateTensorboardTimeSeries][google.cloud.aiplatform.v1beta1.TensorboardService.UpdateTensorboardTimeSeries].
 */
export interface UpdateTensorboardTimeSeriesRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * TensorboardTimeSeries resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field is overwritten if it's in the mask. If the
   * user does not provide a mask then all fields are overwritten if new
   * values are specified.
   */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. The TensorboardTimeSeries' `name` field is used to identify the
   * TensorboardTimeSeries to be updated.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   */
  tensorboardTimeSeries: TensorboardTimeSeries | undefined;
}

/**
 * Request message for
 * [TensorboardService.DeleteTensorboardTimeSeries][google.cloud.aiplatform.v1beta1.TensorboardService.DeleteTensorboardTimeSeries].
 */
export interface DeleteTensorboardTimeSeriesRequest {
  /**
   * Required. The name of the TensorboardTimeSeries to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   */
  name: string;
}

/**
 * Request message for
 * [TensorboardService.BatchReadTensorboardTimeSeriesData][google.cloud.aiplatform.v1beta1.TensorboardService.BatchReadTensorboardTimeSeriesData].
 */
export interface BatchReadTensorboardTimeSeriesDataRequest {
  /**
   * Required. The resource name of the Tensorboard containing
   * TensorboardTimeSeries to read data from. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}`.
   * The TensorboardTimeSeries referenced by
   * [time_series][google.cloud.aiplatform.v1beta1.BatchReadTensorboardTimeSeriesDataRequest.time_series]
   * must be sub resources of this Tensorboard.
   */
  tensorboard: string;
  /**
   * Required. The resource names of the TensorboardTimeSeries to read data
   * from. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   */
  timeSeries: string[];
}

/**
 * Response message for
 * [TensorboardService.BatchReadTensorboardTimeSeriesData][google.cloud.aiplatform.v1beta1.TensorboardService.BatchReadTensorboardTimeSeriesData].
 */
export interface BatchReadTensorboardTimeSeriesDataResponse {
  /** The returned time series data. */
  timeSeriesData: TimeSeriesData[];
}

/**
 * Request message for
 * [TensorboardService.ReadTensorboardTimeSeriesData][google.cloud.aiplatform.v1beta1.TensorboardService.ReadTensorboardTimeSeriesData].
 */
export interface ReadTensorboardTimeSeriesDataRequest {
  /**
   * Required. The resource name of the TensorboardTimeSeries to read data from.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   */
  tensorboardTimeSeries: string;
  /**
   * The maximum number of TensorboardTimeSeries' data to return.
   *
   * This value should be a positive integer.
   * This value can be set to -1 to return all data.
   */
  maxDataPoints: number;
  /** Reads the TensorboardTimeSeries' data that match the filter expression. */
  filter: string;
}

/**
 * Response message for
 * [TensorboardService.ReadTensorboardTimeSeriesData][google.cloud.aiplatform.v1beta1.TensorboardService.ReadTensorboardTimeSeriesData].
 */
export interface ReadTensorboardTimeSeriesDataResponse {
  /** The returned time series data. */
  timeSeriesData: TimeSeriesData | undefined;
}

/**
 * Request message for
 * [TensorboardService.WriteTensorboardExperimentData][google.cloud.aiplatform.v1beta1.TensorboardService.WriteTensorboardExperimentData].
 */
export interface WriteTensorboardExperimentDataRequest {
  /**
   * Required. The resource name of the TensorboardExperiment to write data to.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}`
   */
  tensorboardExperiment: string;
  /** Required. Requests containing per-run TensorboardTimeSeries data to write. */
  writeRunDataRequests: WriteTensorboardRunDataRequest[];
}

/**
 * Response message for
 * [TensorboardService.WriteTensorboardExperimentData][google.cloud.aiplatform.v1beta1.TensorboardService.WriteTensorboardExperimentData].
 */
export interface WriteTensorboardExperimentDataResponse {
}

/**
 * Request message for
 * [TensorboardService.WriteTensorboardRunData][google.cloud.aiplatform.v1beta1.TensorboardService.WriteTensorboardRunData].
 */
export interface WriteTensorboardRunDataRequest {
  /**
   * Required. The resource name of the TensorboardRun to write data to.
   * Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`
   */
  tensorboardRun: string;
  /**
   * Required. The TensorboardTimeSeries data to write.
   * Values with in a time series are indexed by their step value.
   * Repeated writes to the same step will overwrite the existing value for that
   * step.
   * The upper limit of data points per write request is 5000.
   */
  timeSeriesData: TimeSeriesData[];
}

/**
 * Response message for
 * [TensorboardService.WriteTensorboardRunData][google.cloud.aiplatform.v1beta1.TensorboardService.WriteTensorboardRunData].
 */
export interface WriteTensorboardRunDataResponse {
}

/**
 * Request message for
 * [TensorboardService.ExportTensorboardTimeSeriesData][google.cloud.aiplatform.v1beta1.TensorboardService.ExportTensorboardTimeSeriesData].
 */
export interface ExportTensorboardTimeSeriesDataRequest {
  /**
   * Required. The resource name of the TensorboardTimeSeries to export data
   * from. Format:
   * `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}`
   */
  tensorboardTimeSeries: string;
  /** Exports the TensorboardTimeSeries' data that match the filter expression. */
  filter: string;
  /**
   * The maximum number of data points to return per page.
   * The default page_size is 1000. Values must be between 1 and 10000.
   * Values above 10000 are coerced to 10000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [ExportTensorboardTimeSeriesData][google.cloud.aiplatform.v1beta1.TensorboardService.ExportTensorboardTimeSeriesData]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [ExportTensorboardTimeSeriesData][google.cloud.aiplatform.v1beta1.TensorboardService.ExportTensorboardTimeSeriesData]
   * must match the call that provided the page token.
   */
  pageToken: string;
  /**
   * Field to use to sort the TensorboardTimeSeries' data.
   * By default, TensorboardTimeSeries' data is returned in a pseudo random
   * order.
   */
  orderBy: string;
}

/**
 * Response message for
 * [TensorboardService.ExportTensorboardTimeSeriesData][google.cloud.aiplatform.v1beta1.TensorboardService.ExportTensorboardTimeSeriesData].
 */
export interface ExportTensorboardTimeSeriesDataResponse {
  /** The returned time series data points. */
  timeSeriesDataPoints: TimeSeriesDataPoint[];
  /**
   * A token, which can be sent as
   * [page_token][google.cloud.aiplatform.v1beta1.ExportTensorboardTimeSeriesDataRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/** Details of operations that perform create Tensorboard. */
export interface CreateTensorboardOperationMetadata {
  /** Operation metadata for Tensorboard. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/** Details of operations that perform update Tensorboard. */
export interface UpdateTensorboardOperationMetadata {
  /** Operation metadata for Tensorboard. */
  genericMetadata: GenericOperationMetadata | undefined;
}

function createBaseCreateTensorboardRequest(): CreateTensorboardRequest {
  return { parent: "", tensorboard: undefined };
}

export const CreateTensorboardRequest: MessageFns<CreateTensorboardRequest> = {
  encode(message: CreateTensorboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tensorboard !== undefined) {
      Tensorboard.encode(message.tensorboard, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTensorboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTensorboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tensorboard = Tensorboard.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTensorboardRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tensorboard: isSet(object.tensorboard) ? Tensorboard.fromJSON(object.tensorboard) : undefined,
    };
  },

  toJSON(message: CreateTensorboardRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tensorboard !== undefined) {
      obj.tensorboard = Tensorboard.toJSON(message.tensorboard);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTensorboardRequest>): CreateTensorboardRequest {
    return CreateTensorboardRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTensorboardRequest>): CreateTensorboardRequest {
    const message = createBaseCreateTensorboardRequest();
    message.parent = object.parent ?? "";
    message.tensorboard = (object.tensorboard !== undefined && object.tensorboard !== null)
      ? Tensorboard.fromPartial(object.tensorboard)
      : undefined;
    return message;
  },
};

function createBaseGetTensorboardRequest(): GetTensorboardRequest {
  return { name: "" };
}

export const GetTensorboardRequest: MessageFns<GetTensorboardRequest> = {
  encode(message: GetTensorboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTensorboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTensorboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTensorboardRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTensorboardRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTensorboardRequest>): GetTensorboardRequest {
    return GetTensorboardRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTensorboardRequest>): GetTensorboardRequest {
    const message = createBaseGetTensorboardRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTensorboardsRequest(): ListTensorboardsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "", readMask: undefined };
}

export const ListTensorboardsRequest: MessageFns<ListTensorboardsRequest> = {
  encode(message: ListTensorboardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTensorboardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTensorboardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTensorboardsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListTensorboardsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTensorboardsRequest>): ListTensorboardsRequest {
    return ListTensorboardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTensorboardsRequest>): ListTensorboardsRequest {
    const message = createBaseListTensorboardsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListTensorboardsResponse(): ListTensorboardsResponse {
  return { tensorboards: [], nextPageToken: "" };
}

export const ListTensorboardsResponse: MessageFns<ListTensorboardsResponse> = {
  encode(message: ListTensorboardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tensorboards) {
      Tensorboard.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTensorboardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTensorboardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboards.push(Tensorboard.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTensorboardsResponse {
    return {
      tensorboards: globalThis.Array.isArray(object?.tensorboards)
        ? object.tensorboards.map((e: any) => Tensorboard.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTensorboardsResponse): unknown {
    const obj: any = {};
    if (message.tensorboards?.length) {
      obj.tensorboards = message.tensorboards.map((e) => Tensorboard.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTensorboardsResponse>): ListTensorboardsResponse {
    return ListTensorboardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTensorboardsResponse>): ListTensorboardsResponse {
    const message = createBaseListTensorboardsResponse();
    message.tensorboards = object.tensorboards?.map((e) => Tensorboard.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateTensorboardRequest(): UpdateTensorboardRequest {
  return { updateMask: undefined, tensorboard: undefined };
}

export const UpdateTensorboardRequest: MessageFns<UpdateTensorboardRequest> = {
  encode(message: UpdateTensorboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.tensorboard !== undefined) {
      Tensorboard.encode(message.tensorboard, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTensorboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTensorboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tensorboard = Tensorboard.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTensorboardRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      tensorboard: isSet(object.tensorboard) ? Tensorboard.fromJSON(object.tensorboard) : undefined,
    };
  },

  toJSON(message: UpdateTensorboardRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.tensorboard !== undefined) {
      obj.tensorboard = Tensorboard.toJSON(message.tensorboard);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTensorboardRequest>): UpdateTensorboardRequest {
    return UpdateTensorboardRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTensorboardRequest>): UpdateTensorboardRequest {
    const message = createBaseUpdateTensorboardRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.tensorboard = (object.tensorboard !== undefined && object.tensorboard !== null)
      ? Tensorboard.fromPartial(object.tensorboard)
      : undefined;
    return message;
  },
};

function createBaseDeleteTensorboardRequest(): DeleteTensorboardRequest {
  return { name: "" };
}

export const DeleteTensorboardRequest: MessageFns<DeleteTensorboardRequest> = {
  encode(message: DeleteTensorboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTensorboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTensorboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTensorboardRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTensorboardRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTensorboardRequest>): DeleteTensorboardRequest {
    return DeleteTensorboardRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTensorboardRequest>): DeleteTensorboardRequest {
    const message = createBaseDeleteTensorboardRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseReadTensorboardUsageRequest(): ReadTensorboardUsageRequest {
  return { tensorboard: "" };
}

export const ReadTensorboardUsageRequest: MessageFns<ReadTensorboardUsageRequest> = {
  encode(message: ReadTensorboardUsageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tensorboard !== "") {
      writer.uint32(10).string(message.tensorboard);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardUsageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadTensorboardUsageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboard = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadTensorboardUsageRequest {
    return { tensorboard: isSet(object.tensorboard) ? globalThis.String(object.tensorboard) : "" };
  },

  toJSON(message: ReadTensorboardUsageRequest): unknown {
    const obj: any = {};
    if (message.tensorboard !== "") {
      obj.tensorboard = message.tensorboard;
    }
    return obj;
  },

  create(base?: DeepPartial<ReadTensorboardUsageRequest>): ReadTensorboardUsageRequest {
    return ReadTensorboardUsageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadTensorboardUsageRequest>): ReadTensorboardUsageRequest {
    const message = createBaseReadTensorboardUsageRequest();
    message.tensorboard = object.tensorboard ?? "";
    return message;
  },
};

function createBaseReadTensorboardUsageResponse(): ReadTensorboardUsageResponse {
  return { monthlyUsageData: {} };
}

export const ReadTensorboardUsageResponse: MessageFns<ReadTensorboardUsageResponse> = {
  encode(message: ReadTensorboardUsageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.monthlyUsageData).forEach(([key, value]) => {
      ReadTensorboardUsageResponse_MonthlyUsageDataEntry.encode({ key: key as any, value }, writer.uint32(10).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardUsageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadTensorboardUsageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = ReadTensorboardUsageResponse_MonthlyUsageDataEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.monthlyUsageData[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadTensorboardUsageResponse {
    return {
      monthlyUsageData: isObject(object.monthlyUsageData)
        ? Object.entries(object.monthlyUsageData).reduce<
          { [key: string]: ReadTensorboardUsageResponse_PerMonthUsageData }
        >((acc, [key, value]) => {
          acc[key] = ReadTensorboardUsageResponse_PerMonthUsageData.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ReadTensorboardUsageResponse): unknown {
    const obj: any = {};
    if (message.monthlyUsageData) {
      const entries = Object.entries(message.monthlyUsageData);
      if (entries.length > 0) {
        obj.monthlyUsageData = {};
        entries.forEach(([k, v]) => {
          obj.monthlyUsageData[k] = ReadTensorboardUsageResponse_PerMonthUsageData.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<ReadTensorboardUsageResponse>): ReadTensorboardUsageResponse {
    return ReadTensorboardUsageResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadTensorboardUsageResponse>): ReadTensorboardUsageResponse {
    const message = createBaseReadTensorboardUsageResponse();
    message.monthlyUsageData = Object.entries(object.monthlyUsageData ?? {}).reduce<
      { [key: string]: ReadTensorboardUsageResponse_PerMonthUsageData }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = ReadTensorboardUsageResponse_PerMonthUsageData.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseReadTensorboardUsageResponse_PerUserUsageData(): ReadTensorboardUsageResponse_PerUserUsageData {
  return { username: "", viewCount: Long.ZERO };
}

export const ReadTensorboardUsageResponse_PerUserUsageData: MessageFns<ReadTensorboardUsageResponse_PerUserUsageData> =
  {
    encode(
      message: ReadTensorboardUsageResponse_PerUserUsageData,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.username !== "") {
        writer.uint32(10).string(message.username);
      }
      if (!message.viewCount.equals(Long.ZERO)) {
        writer.uint32(16).int64(message.viewCount.toString());
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardUsageResponse_PerUserUsageData {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseReadTensorboardUsageResponse_PerUserUsageData();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.username = reader.string();
            continue;
          case 2:
            if (tag !== 16) {
              break;
            }

            message.viewCount = Long.fromString(reader.int64().toString());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ReadTensorboardUsageResponse_PerUserUsageData {
      return {
        username: isSet(object.username) ? globalThis.String(object.username) : "",
        viewCount: isSet(object.viewCount) ? Long.fromValue(object.viewCount) : Long.ZERO,
      };
    },

    toJSON(message: ReadTensorboardUsageResponse_PerUserUsageData): unknown {
      const obj: any = {};
      if (message.username !== "") {
        obj.username = message.username;
      }
      if (!message.viewCount.equals(Long.ZERO)) {
        obj.viewCount = (message.viewCount || Long.ZERO).toString();
      }
      return obj;
    },

    create(
      base?: DeepPartial<ReadTensorboardUsageResponse_PerUserUsageData>,
    ): ReadTensorboardUsageResponse_PerUserUsageData {
      return ReadTensorboardUsageResponse_PerUserUsageData.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ReadTensorboardUsageResponse_PerUserUsageData>,
    ): ReadTensorboardUsageResponse_PerUserUsageData {
      const message = createBaseReadTensorboardUsageResponse_PerUserUsageData();
      message.username = object.username ?? "";
      message.viewCount = (object.viewCount !== undefined && object.viewCount !== null)
        ? Long.fromValue(object.viewCount)
        : Long.ZERO;
      return message;
    },
  };

function createBaseReadTensorboardUsageResponse_PerMonthUsageData(): ReadTensorboardUsageResponse_PerMonthUsageData {
  return { userUsageData: [] };
}

export const ReadTensorboardUsageResponse_PerMonthUsageData: MessageFns<
  ReadTensorboardUsageResponse_PerMonthUsageData
> = {
  encode(
    message: ReadTensorboardUsageResponse_PerMonthUsageData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.userUsageData) {
      ReadTensorboardUsageResponse_PerUserUsageData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardUsageResponse_PerMonthUsageData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadTensorboardUsageResponse_PerMonthUsageData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userUsageData.push(ReadTensorboardUsageResponse_PerUserUsageData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadTensorboardUsageResponse_PerMonthUsageData {
    return {
      userUsageData: globalThis.Array.isArray(object?.userUsageData)
        ? object.userUsageData.map((e: any) => ReadTensorboardUsageResponse_PerUserUsageData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReadTensorboardUsageResponse_PerMonthUsageData): unknown {
    const obj: any = {};
    if (message.userUsageData?.length) {
      obj.userUsageData = message.userUsageData.map((e) => ReadTensorboardUsageResponse_PerUserUsageData.toJSON(e));
    }
    return obj;
  },

  create(
    base?: DeepPartial<ReadTensorboardUsageResponse_PerMonthUsageData>,
  ): ReadTensorboardUsageResponse_PerMonthUsageData {
    return ReadTensorboardUsageResponse_PerMonthUsageData.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ReadTensorboardUsageResponse_PerMonthUsageData>,
  ): ReadTensorboardUsageResponse_PerMonthUsageData {
    const message = createBaseReadTensorboardUsageResponse_PerMonthUsageData();
    message.userUsageData =
      object.userUsageData?.map((e) => ReadTensorboardUsageResponse_PerUserUsageData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReadTensorboardUsageResponse_MonthlyUsageDataEntry(): ReadTensorboardUsageResponse_MonthlyUsageDataEntry {
  return { key: "", value: undefined };
}

export const ReadTensorboardUsageResponse_MonthlyUsageDataEntry: MessageFns<
  ReadTensorboardUsageResponse_MonthlyUsageDataEntry
> = {
  encode(
    message: ReadTensorboardUsageResponse_MonthlyUsageDataEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ReadTensorboardUsageResponse_PerMonthUsageData.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardUsageResponse_MonthlyUsageDataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadTensorboardUsageResponse_MonthlyUsageDataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ReadTensorboardUsageResponse_PerMonthUsageData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadTensorboardUsageResponse_MonthlyUsageDataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? ReadTensorboardUsageResponse_PerMonthUsageData.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ReadTensorboardUsageResponse_MonthlyUsageDataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = ReadTensorboardUsageResponse_PerMonthUsageData.toJSON(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ReadTensorboardUsageResponse_MonthlyUsageDataEntry>,
  ): ReadTensorboardUsageResponse_MonthlyUsageDataEntry {
    return ReadTensorboardUsageResponse_MonthlyUsageDataEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ReadTensorboardUsageResponse_MonthlyUsageDataEntry>,
  ): ReadTensorboardUsageResponse_MonthlyUsageDataEntry {
    const message = createBaseReadTensorboardUsageResponse_MonthlyUsageDataEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ReadTensorboardUsageResponse_PerMonthUsageData.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseReadTensorboardSizeRequest(): ReadTensorboardSizeRequest {
  return { tensorboard: "" };
}

export const ReadTensorboardSizeRequest: MessageFns<ReadTensorboardSizeRequest> = {
  encode(message: ReadTensorboardSizeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tensorboard !== "") {
      writer.uint32(10).string(message.tensorboard);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardSizeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadTensorboardSizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboard = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadTensorboardSizeRequest {
    return { tensorboard: isSet(object.tensorboard) ? globalThis.String(object.tensorboard) : "" };
  },

  toJSON(message: ReadTensorboardSizeRequest): unknown {
    const obj: any = {};
    if (message.tensorboard !== "") {
      obj.tensorboard = message.tensorboard;
    }
    return obj;
  },

  create(base?: DeepPartial<ReadTensorboardSizeRequest>): ReadTensorboardSizeRequest {
    return ReadTensorboardSizeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadTensorboardSizeRequest>): ReadTensorboardSizeRequest {
    const message = createBaseReadTensorboardSizeRequest();
    message.tensorboard = object.tensorboard ?? "";
    return message;
  },
};

function createBaseReadTensorboardSizeResponse(): ReadTensorboardSizeResponse {
  return { storageSizeByte: Long.ZERO };
}

export const ReadTensorboardSizeResponse: MessageFns<ReadTensorboardSizeResponse> = {
  encode(message: ReadTensorboardSizeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.storageSizeByte.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.storageSizeByte.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardSizeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadTensorboardSizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.storageSizeByte = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadTensorboardSizeResponse {
    return { storageSizeByte: isSet(object.storageSizeByte) ? Long.fromValue(object.storageSizeByte) : Long.ZERO };
  },

  toJSON(message: ReadTensorboardSizeResponse): unknown {
    const obj: any = {};
    if (!message.storageSizeByte.equals(Long.ZERO)) {
      obj.storageSizeByte = (message.storageSizeByte || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<ReadTensorboardSizeResponse>): ReadTensorboardSizeResponse {
    return ReadTensorboardSizeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadTensorboardSizeResponse>): ReadTensorboardSizeResponse {
    const message = createBaseReadTensorboardSizeResponse();
    message.storageSizeByte = (object.storageSizeByte !== undefined && object.storageSizeByte !== null)
      ? Long.fromValue(object.storageSizeByte)
      : Long.ZERO;
    return message;
  },
};

function createBaseCreateTensorboardExperimentRequest(): CreateTensorboardExperimentRequest {
  return { parent: "", tensorboardExperiment: undefined, tensorboardExperimentId: "" };
}

export const CreateTensorboardExperimentRequest: MessageFns<CreateTensorboardExperimentRequest> = {
  encode(message: CreateTensorboardExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tensorboardExperiment !== undefined) {
      TensorboardExperiment.encode(message.tensorboardExperiment, writer.uint32(18).fork()).join();
    }
    if (message.tensorboardExperimentId !== "") {
      writer.uint32(26).string(message.tensorboardExperimentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTensorboardExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTensorboardExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tensorboardExperiment = TensorboardExperiment.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tensorboardExperimentId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTensorboardExperimentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tensorboardExperiment: isSet(object.tensorboardExperiment)
        ? TensorboardExperiment.fromJSON(object.tensorboardExperiment)
        : undefined,
      tensorboardExperimentId: isSet(object.tensorboardExperimentId)
        ? globalThis.String(object.tensorboardExperimentId)
        : "",
    };
  },

  toJSON(message: CreateTensorboardExperimentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tensorboardExperiment !== undefined) {
      obj.tensorboardExperiment = TensorboardExperiment.toJSON(message.tensorboardExperiment);
    }
    if (message.tensorboardExperimentId !== "") {
      obj.tensorboardExperimentId = message.tensorboardExperimentId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTensorboardExperimentRequest>): CreateTensorboardExperimentRequest {
    return CreateTensorboardExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTensorboardExperimentRequest>): CreateTensorboardExperimentRequest {
    const message = createBaseCreateTensorboardExperimentRequest();
    message.parent = object.parent ?? "";
    message.tensorboardExperiment =
      (object.tensorboardExperiment !== undefined && object.tensorboardExperiment !== null)
        ? TensorboardExperiment.fromPartial(object.tensorboardExperiment)
        : undefined;
    message.tensorboardExperimentId = object.tensorboardExperimentId ?? "";
    return message;
  },
};

function createBaseGetTensorboardExperimentRequest(): GetTensorboardExperimentRequest {
  return { name: "" };
}

export const GetTensorboardExperimentRequest: MessageFns<GetTensorboardExperimentRequest> = {
  encode(message: GetTensorboardExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTensorboardExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTensorboardExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTensorboardExperimentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTensorboardExperimentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTensorboardExperimentRequest>): GetTensorboardExperimentRequest {
    return GetTensorboardExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTensorboardExperimentRequest>): GetTensorboardExperimentRequest {
    const message = createBaseGetTensorboardExperimentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTensorboardExperimentsRequest(): ListTensorboardExperimentsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "", readMask: undefined };
}

export const ListTensorboardExperimentsRequest: MessageFns<ListTensorboardExperimentsRequest> = {
  encode(message: ListTensorboardExperimentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTensorboardExperimentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTensorboardExperimentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTensorboardExperimentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListTensorboardExperimentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTensorboardExperimentsRequest>): ListTensorboardExperimentsRequest {
    return ListTensorboardExperimentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTensorboardExperimentsRequest>): ListTensorboardExperimentsRequest {
    const message = createBaseListTensorboardExperimentsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListTensorboardExperimentsResponse(): ListTensorboardExperimentsResponse {
  return { tensorboardExperiments: [], nextPageToken: "" };
}

export const ListTensorboardExperimentsResponse: MessageFns<ListTensorboardExperimentsResponse> = {
  encode(message: ListTensorboardExperimentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tensorboardExperiments) {
      TensorboardExperiment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTensorboardExperimentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTensorboardExperimentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboardExperiments.push(TensorboardExperiment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTensorboardExperimentsResponse {
    return {
      tensorboardExperiments: globalThis.Array.isArray(object?.tensorboardExperiments)
        ? object.tensorboardExperiments.map((e: any) => TensorboardExperiment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTensorboardExperimentsResponse): unknown {
    const obj: any = {};
    if (message.tensorboardExperiments?.length) {
      obj.tensorboardExperiments = message.tensorboardExperiments.map((e) => TensorboardExperiment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTensorboardExperimentsResponse>): ListTensorboardExperimentsResponse {
    return ListTensorboardExperimentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTensorboardExperimentsResponse>): ListTensorboardExperimentsResponse {
    const message = createBaseListTensorboardExperimentsResponse();
    message.tensorboardExperiments = object.tensorboardExperiments?.map((e) => TensorboardExperiment.fromPartial(e)) ||
      [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateTensorboardExperimentRequest(): UpdateTensorboardExperimentRequest {
  return { updateMask: undefined, tensorboardExperiment: undefined };
}

export const UpdateTensorboardExperimentRequest: MessageFns<UpdateTensorboardExperimentRequest> = {
  encode(message: UpdateTensorboardExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.tensorboardExperiment !== undefined) {
      TensorboardExperiment.encode(message.tensorboardExperiment, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTensorboardExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTensorboardExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tensorboardExperiment = TensorboardExperiment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTensorboardExperimentRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      tensorboardExperiment: isSet(object.tensorboardExperiment)
        ? TensorboardExperiment.fromJSON(object.tensorboardExperiment)
        : undefined,
    };
  },

  toJSON(message: UpdateTensorboardExperimentRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.tensorboardExperiment !== undefined) {
      obj.tensorboardExperiment = TensorboardExperiment.toJSON(message.tensorboardExperiment);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTensorboardExperimentRequest>): UpdateTensorboardExperimentRequest {
    return UpdateTensorboardExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTensorboardExperimentRequest>): UpdateTensorboardExperimentRequest {
    const message = createBaseUpdateTensorboardExperimentRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.tensorboardExperiment =
      (object.tensorboardExperiment !== undefined && object.tensorboardExperiment !== null)
        ? TensorboardExperiment.fromPartial(object.tensorboardExperiment)
        : undefined;
    return message;
  },
};

function createBaseDeleteTensorboardExperimentRequest(): DeleteTensorboardExperimentRequest {
  return { name: "" };
}

export const DeleteTensorboardExperimentRequest: MessageFns<DeleteTensorboardExperimentRequest> = {
  encode(message: DeleteTensorboardExperimentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTensorboardExperimentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTensorboardExperimentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTensorboardExperimentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTensorboardExperimentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTensorboardExperimentRequest>): DeleteTensorboardExperimentRequest {
    return DeleteTensorboardExperimentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTensorboardExperimentRequest>): DeleteTensorboardExperimentRequest {
    const message = createBaseDeleteTensorboardExperimentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBatchCreateTensorboardRunsRequest(): BatchCreateTensorboardRunsRequest {
  return { parent: "", requests: [] };
}

export const BatchCreateTensorboardRunsRequest: MessageFns<BatchCreateTensorboardRunsRequest> = {
  encode(message: BatchCreateTensorboardRunsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      CreateTensorboardRunRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateTensorboardRunsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateTensorboardRunsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests.push(CreateTensorboardRunRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateTensorboardRunsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => CreateTensorboardRunRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateTensorboardRunsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => CreateTensorboardRunRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateTensorboardRunsRequest>): BatchCreateTensorboardRunsRequest {
    return BatchCreateTensorboardRunsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateTensorboardRunsRequest>): BatchCreateTensorboardRunsRequest {
    const message = createBaseBatchCreateTensorboardRunsRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => CreateTensorboardRunRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchCreateTensorboardRunsResponse(): BatchCreateTensorboardRunsResponse {
  return { tensorboardRuns: [] };
}

export const BatchCreateTensorboardRunsResponse: MessageFns<BatchCreateTensorboardRunsResponse> = {
  encode(message: BatchCreateTensorboardRunsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tensorboardRuns) {
      TensorboardRun.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateTensorboardRunsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateTensorboardRunsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboardRuns.push(TensorboardRun.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateTensorboardRunsResponse {
    return {
      tensorboardRuns: globalThis.Array.isArray(object?.tensorboardRuns)
        ? object.tensorboardRuns.map((e: any) => TensorboardRun.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateTensorboardRunsResponse): unknown {
    const obj: any = {};
    if (message.tensorboardRuns?.length) {
      obj.tensorboardRuns = message.tensorboardRuns.map((e) => TensorboardRun.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateTensorboardRunsResponse>): BatchCreateTensorboardRunsResponse {
    return BatchCreateTensorboardRunsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateTensorboardRunsResponse>): BatchCreateTensorboardRunsResponse {
    const message = createBaseBatchCreateTensorboardRunsResponse();
    message.tensorboardRuns = object.tensorboardRuns?.map((e) => TensorboardRun.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateTensorboardRunRequest(): CreateTensorboardRunRequest {
  return { parent: "", tensorboardRun: undefined, tensorboardRunId: "" };
}

export const CreateTensorboardRunRequest: MessageFns<CreateTensorboardRunRequest> = {
  encode(message: CreateTensorboardRunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tensorboardRun !== undefined) {
      TensorboardRun.encode(message.tensorboardRun, writer.uint32(18).fork()).join();
    }
    if (message.tensorboardRunId !== "") {
      writer.uint32(26).string(message.tensorboardRunId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTensorboardRunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTensorboardRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tensorboardRun = TensorboardRun.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tensorboardRunId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTensorboardRunRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tensorboardRun: isSet(object.tensorboardRun) ? TensorboardRun.fromJSON(object.tensorboardRun) : undefined,
      tensorboardRunId: isSet(object.tensorboardRunId) ? globalThis.String(object.tensorboardRunId) : "",
    };
  },

  toJSON(message: CreateTensorboardRunRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tensorboardRun !== undefined) {
      obj.tensorboardRun = TensorboardRun.toJSON(message.tensorboardRun);
    }
    if (message.tensorboardRunId !== "") {
      obj.tensorboardRunId = message.tensorboardRunId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTensorboardRunRequest>): CreateTensorboardRunRequest {
    return CreateTensorboardRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTensorboardRunRequest>): CreateTensorboardRunRequest {
    const message = createBaseCreateTensorboardRunRequest();
    message.parent = object.parent ?? "";
    message.tensorboardRun = (object.tensorboardRun !== undefined && object.tensorboardRun !== null)
      ? TensorboardRun.fromPartial(object.tensorboardRun)
      : undefined;
    message.tensorboardRunId = object.tensorboardRunId ?? "";
    return message;
  },
};

function createBaseGetTensorboardRunRequest(): GetTensorboardRunRequest {
  return { name: "" };
}

export const GetTensorboardRunRequest: MessageFns<GetTensorboardRunRequest> = {
  encode(message: GetTensorboardRunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTensorboardRunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTensorboardRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTensorboardRunRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTensorboardRunRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTensorboardRunRequest>): GetTensorboardRunRequest {
    return GetTensorboardRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTensorboardRunRequest>): GetTensorboardRunRequest {
    const message = createBaseGetTensorboardRunRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseReadTensorboardBlobDataRequest(): ReadTensorboardBlobDataRequest {
  return { timeSeries: "", blobIds: [] };
}

export const ReadTensorboardBlobDataRequest: MessageFns<ReadTensorboardBlobDataRequest> = {
  encode(message: ReadTensorboardBlobDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeSeries !== "") {
      writer.uint32(10).string(message.timeSeries);
    }
    for (const v of message.blobIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardBlobDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadTensorboardBlobDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timeSeries = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blobIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadTensorboardBlobDataRequest {
    return {
      timeSeries: isSet(object.timeSeries) ? globalThis.String(object.timeSeries) : "",
      blobIds: globalThis.Array.isArray(object?.blobIds) ? object.blobIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ReadTensorboardBlobDataRequest): unknown {
    const obj: any = {};
    if (message.timeSeries !== "") {
      obj.timeSeries = message.timeSeries;
    }
    if (message.blobIds?.length) {
      obj.blobIds = message.blobIds;
    }
    return obj;
  },

  create(base?: DeepPartial<ReadTensorboardBlobDataRequest>): ReadTensorboardBlobDataRequest {
    return ReadTensorboardBlobDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadTensorboardBlobDataRequest>): ReadTensorboardBlobDataRequest {
    const message = createBaseReadTensorboardBlobDataRequest();
    message.timeSeries = object.timeSeries ?? "";
    message.blobIds = object.blobIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseReadTensorboardBlobDataResponse(): ReadTensorboardBlobDataResponse {
  return { blobs: [] };
}

export const ReadTensorboardBlobDataResponse: MessageFns<ReadTensorboardBlobDataResponse> = {
  encode(message: ReadTensorboardBlobDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.blobs) {
      TensorboardBlob.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardBlobDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadTensorboardBlobDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.blobs.push(TensorboardBlob.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadTensorboardBlobDataResponse {
    return {
      blobs: globalThis.Array.isArray(object?.blobs) ? object.blobs.map((e: any) => TensorboardBlob.fromJSON(e)) : [],
    };
  },

  toJSON(message: ReadTensorboardBlobDataResponse): unknown {
    const obj: any = {};
    if (message.blobs?.length) {
      obj.blobs = message.blobs.map((e) => TensorboardBlob.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ReadTensorboardBlobDataResponse>): ReadTensorboardBlobDataResponse {
    return ReadTensorboardBlobDataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadTensorboardBlobDataResponse>): ReadTensorboardBlobDataResponse {
    const message = createBaseReadTensorboardBlobDataResponse();
    message.blobs = object.blobs?.map((e) => TensorboardBlob.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListTensorboardRunsRequest(): ListTensorboardRunsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "", readMask: undefined };
}

export const ListTensorboardRunsRequest: MessageFns<ListTensorboardRunsRequest> = {
  encode(message: ListTensorboardRunsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTensorboardRunsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTensorboardRunsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTensorboardRunsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListTensorboardRunsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTensorboardRunsRequest>): ListTensorboardRunsRequest {
    return ListTensorboardRunsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTensorboardRunsRequest>): ListTensorboardRunsRequest {
    const message = createBaseListTensorboardRunsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListTensorboardRunsResponse(): ListTensorboardRunsResponse {
  return { tensorboardRuns: [], nextPageToken: "" };
}

export const ListTensorboardRunsResponse: MessageFns<ListTensorboardRunsResponse> = {
  encode(message: ListTensorboardRunsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tensorboardRuns) {
      TensorboardRun.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTensorboardRunsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTensorboardRunsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboardRuns.push(TensorboardRun.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTensorboardRunsResponse {
    return {
      tensorboardRuns: globalThis.Array.isArray(object?.tensorboardRuns)
        ? object.tensorboardRuns.map((e: any) => TensorboardRun.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTensorboardRunsResponse): unknown {
    const obj: any = {};
    if (message.tensorboardRuns?.length) {
      obj.tensorboardRuns = message.tensorboardRuns.map((e) => TensorboardRun.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTensorboardRunsResponse>): ListTensorboardRunsResponse {
    return ListTensorboardRunsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTensorboardRunsResponse>): ListTensorboardRunsResponse {
    const message = createBaseListTensorboardRunsResponse();
    message.tensorboardRuns = object.tensorboardRuns?.map((e) => TensorboardRun.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateTensorboardRunRequest(): UpdateTensorboardRunRequest {
  return { updateMask: undefined, tensorboardRun: undefined };
}

export const UpdateTensorboardRunRequest: MessageFns<UpdateTensorboardRunRequest> = {
  encode(message: UpdateTensorboardRunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.tensorboardRun !== undefined) {
      TensorboardRun.encode(message.tensorboardRun, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTensorboardRunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTensorboardRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tensorboardRun = TensorboardRun.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTensorboardRunRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      tensorboardRun: isSet(object.tensorboardRun) ? TensorboardRun.fromJSON(object.tensorboardRun) : undefined,
    };
  },

  toJSON(message: UpdateTensorboardRunRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.tensorboardRun !== undefined) {
      obj.tensorboardRun = TensorboardRun.toJSON(message.tensorboardRun);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTensorboardRunRequest>): UpdateTensorboardRunRequest {
    return UpdateTensorboardRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTensorboardRunRequest>): UpdateTensorboardRunRequest {
    const message = createBaseUpdateTensorboardRunRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.tensorboardRun = (object.tensorboardRun !== undefined && object.tensorboardRun !== null)
      ? TensorboardRun.fromPartial(object.tensorboardRun)
      : undefined;
    return message;
  },
};

function createBaseDeleteTensorboardRunRequest(): DeleteTensorboardRunRequest {
  return { name: "" };
}

export const DeleteTensorboardRunRequest: MessageFns<DeleteTensorboardRunRequest> = {
  encode(message: DeleteTensorboardRunRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTensorboardRunRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTensorboardRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTensorboardRunRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTensorboardRunRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTensorboardRunRequest>): DeleteTensorboardRunRequest {
    return DeleteTensorboardRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTensorboardRunRequest>): DeleteTensorboardRunRequest {
    const message = createBaseDeleteTensorboardRunRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBatchCreateTensorboardTimeSeriesRequest(): BatchCreateTensorboardTimeSeriesRequest {
  return { parent: "", requests: [] };
}

export const BatchCreateTensorboardTimeSeriesRequest: MessageFns<BatchCreateTensorboardTimeSeriesRequest> = {
  encode(message: BatchCreateTensorboardTimeSeriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      CreateTensorboardTimeSeriesRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateTensorboardTimeSeriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateTensorboardTimeSeriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requests.push(CreateTensorboardTimeSeriesRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateTensorboardTimeSeriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => CreateTensorboardTimeSeriesRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateTensorboardTimeSeriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => CreateTensorboardTimeSeriesRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateTensorboardTimeSeriesRequest>): BatchCreateTensorboardTimeSeriesRequest {
    return BatchCreateTensorboardTimeSeriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateTensorboardTimeSeriesRequest>): BatchCreateTensorboardTimeSeriesRequest {
    const message = createBaseBatchCreateTensorboardTimeSeriesRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => CreateTensorboardTimeSeriesRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchCreateTensorboardTimeSeriesResponse(): BatchCreateTensorboardTimeSeriesResponse {
  return { tensorboardTimeSeries: [] };
}

export const BatchCreateTensorboardTimeSeriesResponse: MessageFns<BatchCreateTensorboardTimeSeriesResponse> = {
  encode(message: BatchCreateTensorboardTimeSeriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tensorboardTimeSeries) {
      TensorboardTimeSeries.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateTensorboardTimeSeriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateTensorboardTimeSeriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboardTimeSeries.push(TensorboardTimeSeries.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateTensorboardTimeSeriesResponse {
    return {
      tensorboardTimeSeries: globalThis.Array.isArray(object?.tensorboardTimeSeries)
        ? object.tensorboardTimeSeries.map((e: any) => TensorboardTimeSeries.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateTensorboardTimeSeriesResponse): unknown {
    const obj: any = {};
    if (message.tensorboardTimeSeries?.length) {
      obj.tensorboardTimeSeries = message.tensorboardTimeSeries.map((e) => TensorboardTimeSeries.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateTensorboardTimeSeriesResponse>): BatchCreateTensorboardTimeSeriesResponse {
    return BatchCreateTensorboardTimeSeriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateTensorboardTimeSeriesResponse>): BatchCreateTensorboardTimeSeriesResponse {
    const message = createBaseBatchCreateTensorboardTimeSeriesResponse();
    message.tensorboardTimeSeries = object.tensorboardTimeSeries?.map((e) => TensorboardTimeSeries.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseCreateTensorboardTimeSeriesRequest(): CreateTensorboardTimeSeriesRequest {
  return { parent: "", tensorboardTimeSeriesId: "", tensorboardTimeSeries: undefined };
}

export const CreateTensorboardTimeSeriesRequest: MessageFns<CreateTensorboardTimeSeriesRequest> = {
  encode(message: CreateTensorboardTimeSeriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.tensorboardTimeSeriesId !== "") {
      writer.uint32(26).string(message.tensorboardTimeSeriesId);
    }
    if (message.tensorboardTimeSeries !== undefined) {
      TensorboardTimeSeries.encode(message.tensorboardTimeSeries, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTensorboardTimeSeriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTensorboardTimeSeriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tensorboardTimeSeriesId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tensorboardTimeSeries = TensorboardTimeSeries.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTensorboardTimeSeriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      tensorboardTimeSeriesId: isSet(object.tensorboardTimeSeriesId)
        ? globalThis.String(object.tensorboardTimeSeriesId)
        : "",
      tensorboardTimeSeries: isSet(object.tensorboardTimeSeries)
        ? TensorboardTimeSeries.fromJSON(object.tensorboardTimeSeries)
        : undefined,
    };
  },

  toJSON(message: CreateTensorboardTimeSeriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.tensorboardTimeSeriesId !== "") {
      obj.tensorboardTimeSeriesId = message.tensorboardTimeSeriesId;
    }
    if (message.tensorboardTimeSeries !== undefined) {
      obj.tensorboardTimeSeries = TensorboardTimeSeries.toJSON(message.tensorboardTimeSeries);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTensorboardTimeSeriesRequest>): CreateTensorboardTimeSeriesRequest {
    return CreateTensorboardTimeSeriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTensorboardTimeSeriesRequest>): CreateTensorboardTimeSeriesRequest {
    const message = createBaseCreateTensorboardTimeSeriesRequest();
    message.parent = object.parent ?? "";
    message.tensorboardTimeSeriesId = object.tensorboardTimeSeriesId ?? "";
    message.tensorboardTimeSeries =
      (object.tensorboardTimeSeries !== undefined && object.tensorboardTimeSeries !== null)
        ? TensorboardTimeSeries.fromPartial(object.tensorboardTimeSeries)
        : undefined;
    return message;
  },
};

function createBaseGetTensorboardTimeSeriesRequest(): GetTensorboardTimeSeriesRequest {
  return { name: "" };
}

export const GetTensorboardTimeSeriesRequest: MessageFns<GetTensorboardTimeSeriesRequest> = {
  encode(message: GetTensorboardTimeSeriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTensorboardTimeSeriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTensorboardTimeSeriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTensorboardTimeSeriesRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetTensorboardTimeSeriesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTensorboardTimeSeriesRequest>): GetTensorboardTimeSeriesRequest {
    return GetTensorboardTimeSeriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTensorboardTimeSeriesRequest>): GetTensorboardTimeSeriesRequest {
    const message = createBaseGetTensorboardTimeSeriesRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListTensorboardTimeSeriesRequest(): ListTensorboardTimeSeriesRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "", readMask: undefined };
}

export const ListTensorboardTimeSeriesRequest: MessageFns<ListTensorboardTimeSeriesRequest> = {
  encode(message: ListTensorboardTimeSeriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTensorboardTimeSeriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTensorboardTimeSeriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTensorboardTimeSeriesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListTensorboardTimeSeriesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTensorboardTimeSeriesRequest>): ListTensorboardTimeSeriesRequest {
    return ListTensorboardTimeSeriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTensorboardTimeSeriesRequest>): ListTensorboardTimeSeriesRequest {
    const message = createBaseListTensorboardTimeSeriesRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListTensorboardTimeSeriesResponse(): ListTensorboardTimeSeriesResponse {
  return { tensorboardTimeSeries: [], nextPageToken: "" };
}

export const ListTensorboardTimeSeriesResponse: MessageFns<ListTensorboardTimeSeriesResponse> = {
  encode(message: ListTensorboardTimeSeriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tensorboardTimeSeries) {
      TensorboardTimeSeries.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTensorboardTimeSeriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTensorboardTimeSeriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboardTimeSeries.push(TensorboardTimeSeries.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTensorboardTimeSeriesResponse {
    return {
      tensorboardTimeSeries: globalThis.Array.isArray(object?.tensorboardTimeSeries)
        ? object.tensorboardTimeSeries.map((e: any) => TensorboardTimeSeries.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListTensorboardTimeSeriesResponse): unknown {
    const obj: any = {};
    if (message.tensorboardTimeSeries?.length) {
      obj.tensorboardTimeSeries = message.tensorboardTimeSeries.map((e) => TensorboardTimeSeries.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTensorboardTimeSeriesResponse>): ListTensorboardTimeSeriesResponse {
    return ListTensorboardTimeSeriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTensorboardTimeSeriesResponse>): ListTensorboardTimeSeriesResponse {
    const message = createBaseListTensorboardTimeSeriesResponse();
    message.tensorboardTimeSeries = object.tensorboardTimeSeries?.map((e) => TensorboardTimeSeries.fromPartial(e)) ||
      [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateTensorboardTimeSeriesRequest(): UpdateTensorboardTimeSeriesRequest {
  return { updateMask: undefined, tensorboardTimeSeries: undefined };
}

export const UpdateTensorboardTimeSeriesRequest: MessageFns<UpdateTensorboardTimeSeriesRequest> = {
  encode(message: UpdateTensorboardTimeSeriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.tensorboardTimeSeries !== undefined) {
      TensorboardTimeSeries.encode(message.tensorboardTimeSeries, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTensorboardTimeSeriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTensorboardTimeSeriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tensorboardTimeSeries = TensorboardTimeSeries.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTensorboardTimeSeriesRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      tensorboardTimeSeries: isSet(object.tensorboardTimeSeries)
        ? TensorboardTimeSeries.fromJSON(object.tensorboardTimeSeries)
        : undefined,
    };
  },

  toJSON(message: UpdateTensorboardTimeSeriesRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.tensorboardTimeSeries !== undefined) {
      obj.tensorboardTimeSeries = TensorboardTimeSeries.toJSON(message.tensorboardTimeSeries);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTensorboardTimeSeriesRequest>): UpdateTensorboardTimeSeriesRequest {
    return UpdateTensorboardTimeSeriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTensorboardTimeSeriesRequest>): UpdateTensorboardTimeSeriesRequest {
    const message = createBaseUpdateTensorboardTimeSeriesRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.tensorboardTimeSeries =
      (object.tensorboardTimeSeries !== undefined && object.tensorboardTimeSeries !== null)
        ? TensorboardTimeSeries.fromPartial(object.tensorboardTimeSeries)
        : undefined;
    return message;
  },
};

function createBaseDeleteTensorboardTimeSeriesRequest(): DeleteTensorboardTimeSeriesRequest {
  return { name: "" };
}

export const DeleteTensorboardTimeSeriesRequest: MessageFns<DeleteTensorboardTimeSeriesRequest> = {
  encode(message: DeleteTensorboardTimeSeriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTensorboardTimeSeriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTensorboardTimeSeriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTensorboardTimeSeriesRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteTensorboardTimeSeriesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteTensorboardTimeSeriesRequest>): DeleteTensorboardTimeSeriesRequest {
    return DeleteTensorboardTimeSeriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteTensorboardTimeSeriesRequest>): DeleteTensorboardTimeSeriesRequest {
    const message = createBaseDeleteTensorboardTimeSeriesRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseBatchReadTensorboardTimeSeriesDataRequest(): BatchReadTensorboardTimeSeriesDataRequest {
  return { tensorboard: "", timeSeries: [] };
}

export const BatchReadTensorboardTimeSeriesDataRequest: MessageFns<BatchReadTensorboardTimeSeriesDataRequest> = {
  encode(message: BatchReadTensorboardTimeSeriesDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tensorboard !== "") {
      writer.uint32(10).string(message.tensorboard);
    }
    for (const v of message.timeSeries) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchReadTensorboardTimeSeriesDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchReadTensorboardTimeSeriesDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboard = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timeSeries.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchReadTensorboardTimeSeriesDataRequest {
    return {
      tensorboard: isSet(object.tensorboard) ? globalThis.String(object.tensorboard) : "",
      timeSeries: globalThis.Array.isArray(object?.timeSeries)
        ? object.timeSeries.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BatchReadTensorboardTimeSeriesDataRequest): unknown {
    const obj: any = {};
    if (message.tensorboard !== "") {
      obj.tensorboard = message.tensorboard;
    }
    if (message.timeSeries?.length) {
      obj.timeSeries = message.timeSeries;
    }
    return obj;
  },

  create(base?: DeepPartial<BatchReadTensorboardTimeSeriesDataRequest>): BatchReadTensorboardTimeSeriesDataRequest {
    return BatchReadTensorboardTimeSeriesDataRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BatchReadTensorboardTimeSeriesDataRequest>,
  ): BatchReadTensorboardTimeSeriesDataRequest {
    const message = createBaseBatchReadTensorboardTimeSeriesDataRequest();
    message.tensorboard = object.tensorboard ?? "";
    message.timeSeries = object.timeSeries?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchReadTensorboardTimeSeriesDataResponse(): BatchReadTensorboardTimeSeriesDataResponse {
  return { timeSeriesData: [] };
}

export const BatchReadTensorboardTimeSeriesDataResponse: MessageFns<BatchReadTensorboardTimeSeriesDataResponse> = {
  encode(message: BatchReadTensorboardTimeSeriesDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.timeSeriesData) {
      TimeSeriesData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchReadTensorboardTimeSeriesDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchReadTensorboardTimeSeriesDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timeSeriesData.push(TimeSeriesData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchReadTensorboardTimeSeriesDataResponse {
    return {
      timeSeriesData: globalThis.Array.isArray(object?.timeSeriesData)
        ? object.timeSeriesData.map((e: any) => TimeSeriesData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchReadTensorboardTimeSeriesDataResponse): unknown {
    const obj: any = {};
    if (message.timeSeriesData?.length) {
      obj.timeSeriesData = message.timeSeriesData.map((e) => TimeSeriesData.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchReadTensorboardTimeSeriesDataResponse>): BatchReadTensorboardTimeSeriesDataResponse {
    return BatchReadTensorboardTimeSeriesDataResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BatchReadTensorboardTimeSeriesDataResponse>,
  ): BatchReadTensorboardTimeSeriesDataResponse {
    const message = createBaseBatchReadTensorboardTimeSeriesDataResponse();
    message.timeSeriesData = object.timeSeriesData?.map((e) => TimeSeriesData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReadTensorboardTimeSeriesDataRequest(): ReadTensorboardTimeSeriesDataRequest {
  return { tensorboardTimeSeries: "", maxDataPoints: 0, filter: "" };
}

export const ReadTensorboardTimeSeriesDataRequest: MessageFns<ReadTensorboardTimeSeriesDataRequest> = {
  encode(message: ReadTensorboardTimeSeriesDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tensorboardTimeSeries !== "") {
      writer.uint32(10).string(message.tensorboardTimeSeries);
    }
    if (message.maxDataPoints !== 0) {
      writer.uint32(16).int32(message.maxDataPoints);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardTimeSeriesDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadTensorboardTimeSeriesDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboardTimeSeries = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.maxDataPoints = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadTensorboardTimeSeriesDataRequest {
    return {
      tensorboardTimeSeries: isSet(object.tensorboardTimeSeries) ? globalThis.String(object.tensorboardTimeSeries) : "",
      maxDataPoints: isSet(object.maxDataPoints) ? globalThis.Number(object.maxDataPoints) : 0,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ReadTensorboardTimeSeriesDataRequest): unknown {
    const obj: any = {};
    if (message.tensorboardTimeSeries !== "") {
      obj.tensorboardTimeSeries = message.tensorboardTimeSeries;
    }
    if (message.maxDataPoints !== 0) {
      obj.maxDataPoints = Math.round(message.maxDataPoints);
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ReadTensorboardTimeSeriesDataRequest>): ReadTensorboardTimeSeriesDataRequest {
    return ReadTensorboardTimeSeriesDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadTensorboardTimeSeriesDataRequest>): ReadTensorboardTimeSeriesDataRequest {
    const message = createBaseReadTensorboardTimeSeriesDataRequest();
    message.tensorboardTimeSeries = object.tensorboardTimeSeries ?? "";
    message.maxDataPoints = object.maxDataPoints ?? 0;
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseReadTensorboardTimeSeriesDataResponse(): ReadTensorboardTimeSeriesDataResponse {
  return { timeSeriesData: undefined };
}

export const ReadTensorboardTimeSeriesDataResponse: MessageFns<ReadTensorboardTimeSeriesDataResponse> = {
  encode(message: ReadTensorboardTimeSeriesDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeSeriesData !== undefined) {
      TimeSeriesData.encode(message.timeSeriesData, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadTensorboardTimeSeriesDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadTensorboardTimeSeriesDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timeSeriesData = TimeSeriesData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadTensorboardTimeSeriesDataResponse {
    return {
      timeSeriesData: isSet(object.timeSeriesData) ? TimeSeriesData.fromJSON(object.timeSeriesData) : undefined,
    };
  },

  toJSON(message: ReadTensorboardTimeSeriesDataResponse): unknown {
    const obj: any = {};
    if (message.timeSeriesData !== undefined) {
      obj.timeSeriesData = TimeSeriesData.toJSON(message.timeSeriesData);
    }
    return obj;
  },

  create(base?: DeepPartial<ReadTensorboardTimeSeriesDataResponse>): ReadTensorboardTimeSeriesDataResponse {
    return ReadTensorboardTimeSeriesDataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadTensorboardTimeSeriesDataResponse>): ReadTensorboardTimeSeriesDataResponse {
    const message = createBaseReadTensorboardTimeSeriesDataResponse();
    message.timeSeriesData = (object.timeSeriesData !== undefined && object.timeSeriesData !== null)
      ? TimeSeriesData.fromPartial(object.timeSeriesData)
      : undefined;
    return message;
  },
};

function createBaseWriteTensorboardExperimentDataRequest(): WriteTensorboardExperimentDataRequest {
  return { tensorboardExperiment: "", writeRunDataRequests: [] };
}

export const WriteTensorboardExperimentDataRequest: MessageFns<WriteTensorboardExperimentDataRequest> = {
  encode(message: WriteTensorboardExperimentDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tensorboardExperiment !== "") {
      writer.uint32(10).string(message.tensorboardExperiment);
    }
    for (const v of message.writeRunDataRequests) {
      WriteTensorboardRunDataRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteTensorboardExperimentDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteTensorboardExperimentDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboardExperiment = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.writeRunDataRequests.push(WriteTensorboardRunDataRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WriteTensorboardExperimentDataRequest {
    return {
      tensorboardExperiment: isSet(object.tensorboardExperiment) ? globalThis.String(object.tensorboardExperiment) : "",
      writeRunDataRequests: globalThis.Array.isArray(object?.writeRunDataRequests)
        ? object.writeRunDataRequests.map((e: any) => WriteTensorboardRunDataRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WriteTensorboardExperimentDataRequest): unknown {
    const obj: any = {};
    if (message.tensorboardExperiment !== "") {
      obj.tensorboardExperiment = message.tensorboardExperiment;
    }
    if (message.writeRunDataRequests?.length) {
      obj.writeRunDataRequests = message.writeRunDataRequests.map((e) => WriteTensorboardRunDataRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<WriteTensorboardExperimentDataRequest>): WriteTensorboardExperimentDataRequest {
    return WriteTensorboardExperimentDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WriteTensorboardExperimentDataRequest>): WriteTensorboardExperimentDataRequest {
    const message = createBaseWriteTensorboardExperimentDataRequest();
    message.tensorboardExperiment = object.tensorboardExperiment ?? "";
    message.writeRunDataRequests =
      object.writeRunDataRequests?.map((e) => WriteTensorboardRunDataRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWriteTensorboardExperimentDataResponse(): WriteTensorboardExperimentDataResponse {
  return {};
}

export const WriteTensorboardExperimentDataResponse: MessageFns<WriteTensorboardExperimentDataResponse> = {
  encode(_: WriteTensorboardExperimentDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteTensorboardExperimentDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteTensorboardExperimentDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): WriteTensorboardExperimentDataResponse {
    return {};
  },

  toJSON(_: WriteTensorboardExperimentDataResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<WriteTensorboardExperimentDataResponse>): WriteTensorboardExperimentDataResponse {
    return WriteTensorboardExperimentDataResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<WriteTensorboardExperimentDataResponse>): WriteTensorboardExperimentDataResponse {
    const message = createBaseWriteTensorboardExperimentDataResponse();
    return message;
  },
};

function createBaseWriteTensorboardRunDataRequest(): WriteTensorboardRunDataRequest {
  return { tensorboardRun: "", timeSeriesData: [] };
}

export const WriteTensorboardRunDataRequest: MessageFns<WriteTensorboardRunDataRequest> = {
  encode(message: WriteTensorboardRunDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tensorboardRun !== "") {
      writer.uint32(10).string(message.tensorboardRun);
    }
    for (const v of message.timeSeriesData) {
      TimeSeriesData.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteTensorboardRunDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteTensorboardRunDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboardRun = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timeSeriesData.push(TimeSeriesData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WriteTensorboardRunDataRequest {
    return {
      tensorboardRun: isSet(object.tensorboardRun) ? globalThis.String(object.tensorboardRun) : "",
      timeSeriesData: globalThis.Array.isArray(object?.timeSeriesData)
        ? object.timeSeriesData.map((e: any) => TimeSeriesData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WriteTensorboardRunDataRequest): unknown {
    const obj: any = {};
    if (message.tensorboardRun !== "") {
      obj.tensorboardRun = message.tensorboardRun;
    }
    if (message.timeSeriesData?.length) {
      obj.timeSeriesData = message.timeSeriesData.map((e) => TimeSeriesData.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<WriteTensorboardRunDataRequest>): WriteTensorboardRunDataRequest {
    return WriteTensorboardRunDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WriteTensorboardRunDataRequest>): WriteTensorboardRunDataRequest {
    const message = createBaseWriteTensorboardRunDataRequest();
    message.tensorboardRun = object.tensorboardRun ?? "";
    message.timeSeriesData = object.timeSeriesData?.map((e) => TimeSeriesData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWriteTensorboardRunDataResponse(): WriteTensorboardRunDataResponse {
  return {};
}

export const WriteTensorboardRunDataResponse: MessageFns<WriteTensorboardRunDataResponse> = {
  encode(_: WriteTensorboardRunDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteTensorboardRunDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteTensorboardRunDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): WriteTensorboardRunDataResponse {
    return {};
  },

  toJSON(_: WriteTensorboardRunDataResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<WriteTensorboardRunDataResponse>): WriteTensorboardRunDataResponse {
    return WriteTensorboardRunDataResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<WriteTensorboardRunDataResponse>): WriteTensorboardRunDataResponse {
    const message = createBaseWriteTensorboardRunDataResponse();
    return message;
  },
};

function createBaseExportTensorboardTimeSeriesDataRequest(): ExportTensorboardTimeSeriesDataRequest {
  return { tensorboardTimeSeries: "", filter: "", pageSize: 0, pageToken: "", orderBy: "" };
}

export const ExportTensorboardTimeSeriesDataRequest: MessageFns<ExportTensorboardTimeSeriesDataRequest> = {
  encode(message: ExportTensorboardTimeSeriesDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tensorboardTimeSeries !== "") {
      writer.uint32(10).string(message.tensorboardTimeSeries);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportTensorboardTimeSeriesDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportTensorboardTimeSeriesDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tensorboardTimeSeries = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportTensorboardTimeSeriesDataRequest {
    return {
      tensorboardTimeSeries: isSet(object.tensorboardTimeSeries) ? globalThis.String(object.tensorboardTimeSeries) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ExportTensorboardTimeSeriesDataRequest): unknown {
    const obj: any = {};
    if (message.tensorboardTimeSeries !== "") {
      obj.tensorboardTimeSeries = message.tensorboardTimeSeries;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportTensorboardTimeSeriesDataRequest>): ExportTensorboardTimeSeriesDataRequest {
    return ExportTensorboardTimeSeriesDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportTensorboardTimeSeriesDataRequest>): ExportTensorboardTimeSeriesDataRequest {
    const message = createBaseExportTensorboardTimeSeriesDataRequest();
    message.tensorboardTimeSeries = object.tensorboardTimeSeries ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseExportTensorboardTimeSeriesDataResponse(): ExportTensorboardTimeSeriesDataResponse {
  return { timeSeriesDataPoints: [], nextPageToken: "" };
}

export const ExportTensorboardTimeSeriesDataResponse: MessageFns<ExportTensorboardTimeSeriesDataResponse> = {
  encode(message: ExportTensorboardTimeSeriesDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.timeSeriesDataPoints) {
      TimeSeriesDataPoint.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportTensorboardTimeSeriesDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportTensorboardTimeSeriesDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timeSeriesDataPoints.push(TimeSeriesDataPoint.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportTensorboardTimeSeriesDataResponse {
    return {
      timeSeriesDataPoints: globalThis.Array.isArray(object?.timeSeriesDataPoints)
        ? object.timeSeriesDataPoints.map((e: any) => TimeSeriesDataPoint.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ExportTensorboardTimeSeriesDataResponse): unknown {
    const obj: any = {};
    if (message.timeSeriesDataPoints?.length) {
      obj.timeSeriesDataPoints = message.timeSeriesDataPoints.map((e) => TimeSeriesDataPoint.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportTensorboardTimeSeriesDataResponse>): ExportTensorboardTimeSeriesDataResponse {
    return ExportTensorboardTimeSeriesDataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportTensorboardTimeSeriesDataResponse>): ExportTensorboardTimeSeriesDataResponse {
    const message = createBaseExportTensorboardTimeSeriesDataResponse();
    message.timeSeriesDataPoints = object.timeSeriesDataPoints?.map((e) => TimeSeriesDataPoint.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateTensorboardOperationMetadata(): CreateTensorboardOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateTensorboardOperationMetadata: MessageFns<CreateTensorboardOperationMetadata> = {
  encode(message: CreateTensorboardOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTensorboardOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTensorboardOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTensorboardOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateTensorboardOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateTensorboardOperationMetadata>): CreateTensorboardOperationMetadata {
    return CreateTensorboardOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateTensorboardOperationMetadata>): CreateTensorboardOperationMetadata {
    const message = createBaseCreateTensorboardOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseUpdateTensorboardOperationMetadata(): UpdateTensorboardOperationMetadata {
  return { genericMetadata: undefined };
}

export const UpdateTensorboardOperationMetadata: MessageFns<UpdateTensorboardOperationMetadata> = {
  encode(message: UpdateTensorboardOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTensorboardOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTensorboardOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTensorboardOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UpdateTensorboardOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTensorboardOperationMetadata>): UpdateTensorboardOperationMetadata {
    return UpdateTensorboardOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTensorboardOperationMetadata>): UpdateTensorboardOperationMetadata {
    const message = createBaseUpdateTensorboardOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

/** TensorboardService */
export type TensorboardServiceDefinition = typeof TensorboardServiceDefinition;
export const TensorboardServiceDefinition = {
  name: "TensorboardService",
  fullName: "google.cloud.aiplatform.v1beta1.TensorboardService",
  methods: {
    /** Creates a Tensorboard. */
    createTensorboard: {
      name: "CreateTensorboard",
      requestType: CreateTensorboardRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              49,
              10,
              11,
              84,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              18,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              84,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([18, 112, 97, 114, 101, 110, 116, 44, 116, 101, 110, 115, 111, 114, 98, 111, 97, 114, 100]),
          ],
          578365826: [
            Buffer.from([
              68,
              58,
              11,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              34,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a Tensorboard. */
    getTensorboard: {
      name: "GetTensorboard",
      requestType: GetTensorboardRequest,
      requestStream: false,
      responseType: Tensorboard,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a Tensorboard. */
    updateTensorboard: {
      name: "UpdateTensorboard",
      requestType: UpdateTensorboardRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              49,
              10,
              11,
              84,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              18,
              34,
              85,
              112,
              100,
              97,
              116,
              101,
              84,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              23,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              11,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              50,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Tensorboards in a Location. */
    listTensorboards: {
      name: "ListTensorboards",
      requestType: ListTensorboardsRequest,
      requestStream: false,
      responseType: ListTensorboardsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              55,
              18,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a Tensorboard. */
    deleteTensorboard: {
      name: "DeleteTensorboard",
      requestType: DeleteTensorboardRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              55,
              42,
              53,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Returns a list of monthly active users for a given TensorBoard instance. */
    readTensorboardUsage: {
      name: "ReadTensorboardUsage",
      requestType: ReadTensorboardUsageRequest,
      requestStream: false,
      responseType: ReadTensorboardUsageResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 116, 101, 110, 115, 111, 114, 98, 111, 97, 114, 100])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              97,
              100,
              85,
              115,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /** Returns the storage size for a given TensorBoard instance. */
    readTensorboardSize: {
      name: "ReadTensorboardSize",
      requestType: ReadTensorboardSizeRequest,
      requestStream: false,
      responseType: ReadTensorboardSizeResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 116, 101, 110, 115, 111, 114, 98, 111, 97, 114, 100])],
          578365826: [
            Buffer.from([
              71,
              18,
              69,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              97,
              100,
              83,
              105,
              122,
              101,
            ]),
          ],
        },
      },
    },
    /** Creates a TensorboardExperiment. */
    createTensorboardExperiment: {
      name: "CreateTensorboardExperiment",
      requestType: CreateTensorboardExperimentRequest,
      requestStream: false,
      responseType: TensorboardExperiment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              55,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              44,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              93,
              58,
              22,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              34,
              67,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a TensorboardExperiment. */
    getTensorboardExperiment: {
      name: "GetTensorboardExperiment",
      requestType: GetTensorboardExperimentRequest,
      requestStream: false,
      responseType: TensorboardExperiment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a TensorboardExperiment. */
    updateTensorboardExperiment: {
      name: "UpdateTensorboardExperiment",
      requestType: UpdateTensorboardExperimentRequest,
      requestStream: false,
      responseType: TensorboardExperiment,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              34,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              116,
              58,
              22,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              50,
              90,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists TensorboardExperiments in a Location. */
    listTensorboardExperiments: {
      name: "ListTensorboardExperiments",
      requestType: ListTensorboardExperimentsRequest,
      requestStream: false,
      responseType: ListTensorboardExperimentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              69,
              18,
              67,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a TensorboardExperiment. */
    deleteTensorboardExperiment: {
      name: "DeleteTensorboardExperiment",
      requestType: DeleteTensorboardExperimentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              42,
              67,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a TensorboardRun. */
    createTensorboardRun: {
      name: "CreateTensorboardRun",
      requestType: CreateTensorboardRunRequest,
      requestStream: false,
      responseType: TensorboardRun,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              41,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              114,
              117,
              110,
              44,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              114,
              117,
              110,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              93,
              58,
              15,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              114,
              117,
              110,
              34,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              117,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Batch create TensorboardRuns. */
    batchCreateTensorboardRuns: {
      name: "BatchCreateTensorboardRuns",
      requestType: BatchCreateTensorboardRunsRequest,
      requestStream: false,
      responseType: BatchCreateTensorboardRunsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 114, 101, 113, 117, 101, 115, 116, 115])],
          578365826: [
            Buffer.from([
              91,
              58,
              1,
              42,
              34,
              86,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              117,
              110,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Gets a TensorboardRun. */
    getTensorboardRun: {
      name: "GetTensorboardRun",
      requestType: GetTensorboardRunRequest,
      requestStream: false,
      responseType: TensorboardRun,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              76,
              18,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a TensorboardRun. */
    updateTensorboardRun: {
      name: "UpdateTensorboardRun",
      requestType: UpdateTensorboardRunRequest,
      requestStream: false,
      responseType: TensorboardRun,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              114,
              117,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              109,
              58,
              15,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              114,
              117,
              110,
              50,
              90,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              114,
              117,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists TensorboardRuns in a Location. */
    listTensorboardRuns: {
      name: "ListTensorboardRuns",
      requestType: ListTensorboardRunsRequest,
      requestStream: false,
      responseType: ListTensorboardRunsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              76,
              18,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              114,
              117,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a TensorboardRun. */
    deleteTensorboardRun: {
      name: "DeleteTensorboardRun",
      requestType: DeleteTensorboardRunRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              76,
              42,
              74,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Batch create TensorboardTimeSeries that belong to a TensorboardExperiment. */
    batchCreateTensorboardTimeSeries: {
      name: "BatchCreateTensorboardTimeSeries",
      requestType: BatchCreateTensorboardTimeSeriesRequest,
      requestStream: false,
      responseType: BatchCreateTensorboardTimeSeriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([15, 112, 97, 114, 101, 110, 116, 44, 114, 101, 113, 117, 101, 115, 116, 115])],
          578365826: [
            Buffer.from([
              86,
              58,
              1,
              42,
              34,
              81,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Creates a TensorboardTimeSeries. */
    createTensorboardTimeSeries: {
      name: "CreateTensorboardTimeSeries",
      requestType: CreateTensorboardTimeSeriesRequest,
      requestStream: false,
      responseType: TensorboardTimeSeries,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              30,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              114,
              58,
              23,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
              34,
              87,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              105,
              109,
              101,
              83,
              101,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a TensorboardTimeSeries. */
    getTensorboardTimeSeries: {
      name: "GetTensorboardTimeSeries",
      requestType: GetTensorboardTimeSeriesRequest,
      requestStream: false,
      responseType: TensorboardTimeSeries,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              89,
              18,
              87,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              47,
              116,
              105,
              109,
              101,
              83,
              101,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates a TensorboardTimeSeries. */
    updateTensorboardTimeSeries: {
      name: "UpdateTensorboardTimeSeries",
      requestType: UpdateTensorboardTimeSeriesRequest,
      requestStream: false,
      responseType: TensorboardTimeSeries,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              35,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              138,
              1,
              58,
              23,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
              50,
              111,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              47,
              116,
              105,
              109,
              101,
              83,
              101,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists TensorboardTimeSeries in a Location. */
    listTensorboardTimeSeries: {
      name: "ListTensorboardTimeSeries",
      requestType: ListTensorboardTimeSeriesRequest,
      requestStream: false,
      responseType: ListTensorboardTimeSeriesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              89,
              18,
              87,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
              47,
              116,
              105,
              109,
              101,
              83,
              101,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a TensorboardTimeSeries. */
    deleteTensorboardTimeSeries: {
      name: "DeleteTensorboardTimeSeries",
      requestType: DeleteTensorboardTimeSeriesRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              89,
              42,
              87,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              47,
              116,
              105,
              109,
              101,
              83,
              101,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Reads multiple TensorboardTimeSeries' data. The data point number limit is
     * 1000 for scalars, 100 for tensors and blob references. If the number of
     * data points stored is less than the limit, all data is returned.
     * Otherwise, the number limit of data points is randomly selected from
     * this time series and returned.
     */
    batchReadTensorboardTimeSeriesData: {
      name: "BatchReadTensorboardTimeSeriesData",
      requestType: BatchReadTensorboardTimeSeriesDataRequest,
      requestStream: false,
      responseType: BatchReadTensorboardTimeSeriesDataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 116, 101, 110, 115, 111, 114, 98, 111, 97, 114, 100])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              125,
              58,
              98,
              97,
              116,
              99,
              104,
              82,
              101,
              97,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Reads a TensorboardTimeSeries' data. By default, if the number of data
     * points stored is less than 1000, all data is returned. Otherwise, 1000
     * data points is randomly selected from this time series and returned.
     * This value can be changed by changing max_data_points, which can't be
     * greater than 10k.
     */
    readTensorboardTimeSeriesData: {
      name: "ReadTensorboardTimeSeriesData",
      requestType: ReadTensorboardTimeSeriesDataRequest,
      requestStream: false,
      responseType: ReadTensorboardTimeSeriesDataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              113,
              18,
              111,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              47,
              116,
              105,
              109,
              101,
              83,
              101,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              97,
              100,
            ]),
          ],
        },
      },
    },
    /**
     * Gets bytes of TensorboardBlobs.
     * This is to allow reading blob data stored in consumer project's Cloud
     * Storage bucket without users having to obtain Cloud Storage access
     * permission.
     */
    readTensorboardBlobData: {
      name: "ReadTensorboardBlobData",
      requestType: ReadTensorboardBlobDataRequest,
      requestStream: false,
      responseType: ReadTensorboardBlobDataResponse,
      responseStream: true,
      options: {
        _unknownFields: {
          8410: [Buffer.from([11, 116, 105, 109, 101, 95, 115, 101, 114, 105, 101, 115])],
          578365826: [
            Buffer.from([
              109,
              18,
              107,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              47,
              116,
              105,
              109,
              101,
              83,
              101,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              97,
              100,
              66,
              108,
              111,
              98,
              68,
              97,
              116,
              97,
            ]),
          ],
        },
      },
    },
    /**
     * Write time series data points of multiple TensorboardTimeSeries in multiple
     * TensorboardRun's. If any data fail to be ingested, an error is returned.
     */
    writeTensorboardExperimentData: {
      name: "WriteTensorboardExperimentData",
      requestType: WriteTensorboardExperimentDataRequest,
      requestStream: false,
      responseType: WriteTensorboardExperimentDataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              46,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              44,
              119,
              114,
              105,
              116,
              101,
              95,
              114,
              117,
              110,
              95,
              100,
              97,
              116,
              97,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              96,
              58,
              1,
              42,
              34,
              91,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              58,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Write time series data points into multiple TensorboardTimeSeries under
     * a TensorboardRun. If any data fail to be ingested, an error is returned.
     */
    writeTensorboardRunData: {
      name: "WriteTensorboardRunData",
      requestType: WriteTensorboardRunDataRequest,
      requestStream: false,
      responseType: WriteTensorboardRunDataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              32,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              114,
              117,
              110,
              44,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
              95,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              96,
              58,
              1,
              42,
              34,
              91,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              114,
              117,
              110,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              125,
              58,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Exports a TensorboardTimeSeries' data. Data is returned in paginated
     * responses.
     */
    exportTensorboardTimeSeriesData: {
      name: "ExportTensorboardTimeSeriesData",
      requestType: ExportTensorboardTimeSeriesDataRequest,
      requestStream: false,
      responseType: ExportTensorboardTimeSeriesDataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              23,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
            ]),
          ],
          578365826: [
            Buffer.from([
              140,
              1,
              58,
              1,
              42,
              34,
              134,
              1,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              95,
              116,
              105,
              109,
              101,
              95,
              115,
              101,
              114,
              105,
              101,
              115,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              116,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              115,
              47,
              42,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              114,
              117,
              110,
              115,
              47,
              42,
              47,
              116,
              105,
              109,
              101,
              83,
              101,
              114,
              105,
              101,
              115,
              47,
              42,
              125,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              84,
              101,
              110,
              115,
              111,
              114,
              98,
              111,
              97,
              114,
              100,
              84,
              105,
              109,
              101,
              83,
              101,
              114,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TensorboardServiceImplementation<CallContextExt = {}> {
  /** Creates a Tensorboard. */
  createTensorboard(
    request: CreateTensorboardRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a Tensorboard. */
  getTensorboard(
    request: GetTensorboardRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Tensorboard>>;
  /** Updates a Tensorboard. */
  updateTensorboard(
    request: UpdateTensorboardRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists Tensorboards in a Location. */
  listTensorboards(
    request: ListTensorboardsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTensorboardsResponse>>;
  /** Deletes a Tensorboard. */
  deleteTensorboard(
    request: DeleteTensorboardRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Returns a list of monthly active users for a given TensorBoard instance. */
  readTensorboardUsage(
    request: ReadTensorboardUsageRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReadTensorboardUsageResponse>>;
  /** Returns the storage size for a given TensorBoard instance. */
  readTensorboardSize(
    request: ReadTensorboardSizeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReadTensorboardSizeResponse>>;
  /** Creates a TensorboardExperiment. */
  createTensorboardExperiment(
    request: CreateTensorboardExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TensorboardExperiment>>;
  /** Gets a TensorboardExperiment. */
  getTensorboardExperiment(
    request: GetTensorboardExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TensorboardExperiment>>;
  /** Updates a TensorboardExperiment. */
  updateTensorboardExperiment(
    request: UpdateTensorboardExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TensorboardExperiment>>;
  /** Lists TensorboardExperiments in a Location. */
  listTensorboardExperiments(
    request: ListTensorboardExperimentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTensorboardExperimentsResponse>>;
  /** Deletes a TensorboardExperiment. */
  deleteTensorboardExperiment(
    request: DeleteTensorboardExperimentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a TensorboardRun. */
  createTensorboardRun(
    request: CreateTensorboardRunRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TensorboardRun>>;
  /** Batch create TensorboardRuns. */
  batchCreateTensorboardRuns(
    request: BatchCreateTensorboardRunsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchCreateTensorboardRunsResponse>>;
  /** Gets a TensorboardRun. */
  getTensorboardRun(
    request: GetTensorboardRunRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TensorboardRun>>;
  /** Updates a TensorboardRun. */
  updateTensorboardRun(
    request: UpdateTensorboardRunRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TensorboardRun>>;
  /** Lists TensorboardRuns in a Location. */
  listTensorboardRuns(
    request: ListTensorboardRunsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTensorboardRunsResponse>>;
  /** Deletes a TensorboardRun. */
  deleteTensorboardRun(
    request: DeleteTensorboardRunRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Batch create TensorboardTimeSeries that belong to a TensorboardExperiment. */
  batchCreateTensorboardTimeSeries(
    request: BatchCreateTensorboardTimeSeriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchCreateTensorboardTimeSeriesResponse>>;
  /** Creates a TensorboardTimeSeries. */
  createTensorboardTimeSeries(
    request: CreateTensorboardTimeSeriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TensorboardTimeSeries>>;
  /** Gets a TensorboardTimeSeries. */
  getTensorboardTimeSeries(
    request: GetTensorboardTimeSeriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TensorboardTimeSeries>>;
  /** Updates a TensorboardTimeSeries. */
  updateTensorboardTimeSeries(
    request: UpdateTensorboardTimeSeriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TensorboardTimeSeries>>;
  /** Lists TensorboardTimeSeries in a Location. */
  listTensorboardTimeSeries(
    request: ListTensorboardTimeSeriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListTensorboardTimeSeriesResponse>>;
  /** Deletes a TensorboardTimeSeries. */
  deleteTensorboardTimeSeries(
    request: DeleteTensorboardTimeSeriesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Reads multiple TensorboardTimeSeries' data. The data point number limit is
   * 1000 for scalars, 100 for tensors and blob references. If the number of
   * data points stored is less than the limit, all data is returned.
   * Otherwise, the number limit of data points is randomly selected from
   * this time series and returned.
   */
  batchReadTensorboardTimeSeriesData(
    request: BatchReadTensorboardTimeSeriesDataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchReadTensorboardTimeSeriesDataResponse>>;
  /**
   * Reads a TensorboardTimeSeries' data. By default, if the number of data
   * points stored is less than 1000, all data is returned. Otherwise, 1000
   * data points is randomly selected from this time series and returned.
   * This value can be changed by changing max_data_points, which can't be
   * greater than 10k.
   */
  readTensorboardTimeSeriesData(
    request: ReadTensorboardTimeSeriesDataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReadTensorboardTimeSeriesDataResponse>>;
  /**
   * Gets bytes of TensorboardBlobs.
   * This is to allow reading blob data stored in consumer project's Cloud
   * Storage bucket without users having to obtain Cloud Storage access
   * permission.
   */
  readTensorboardBlobData(
    request: ReadTensorboardBlobDataRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<ReadTensorboardBlobDataResponse>>;
  /**
   * Write time series data points of multiple TensorboardTimeSeries in multiple
   * TensorboardRun's. If any data fail to be ingested, an error is returned.
   */
  writeTensorboardExperimentData(
    request: WriteTensorboardExperimentDataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<WriteTensorboardExperimentDataResponse>>;
  /**
   * Write time series data points into multiple TensorboardTimeSeries under
   * a TensorboardRun. If any data fail to be ingested, an error is returned.
   */
  writeTensorboardRunData(
    request: WriteTensorboardRunDataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<WriteTensorboardRunDataResponse>>;
  /**
   * Exports a TensorboardTimeSeries' data. Data is returned in paginated
   * responses.
   */
  exportTensorboardTimeSeriesData(
    request: ExportTensorboardTimeSeriesDataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExportTensorboardTimeSeriesDataResponse>>;
}

export interface TensorboardServiceClient<CallOptionsExt = {}> {
  /** Creates a Tensorboard. */
  createTensorboard(
    request: DeepPartial<CreateTensorboardRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a Tensorboard. */
  getTensorboard(
    request: DeepPartial<GetTensorboardRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Tensorboard>;
  /** Updates a Tensorboard. */
  updateTensorboard(
    request: DeepPartial<UpdateTensorboardRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists Tensorboards in a Location. */
  listTensorboards(
    request: DeepPartial<ListTensorboardsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTensorboardsResponse>;
  /** Deletes a Tensorboard. */
  deleteTensorboard(
    request: DeepPartial<DeleteTensorboardRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Returns a list of monthly active users for a given TensorBoard instance. */
  readTensorboardUsage(
    request: DeepPartial<ReadTensorboardUsageRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReadTensorboardUsageResponse>;
  /** Returns the storage size for a given TensorBoard instance. */
  readTensorboardSize(
    request: DeepPartial<ReadTensorboardSizeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReadTensorboardSizeResponse>;
  /** Creates a TensorboardExperiment. */
  createTensorboardExperiment(
    request: DeepPartial<CreateTensorboardExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TensorboardExperiment>;
  /** Gets a TensorboardExperiment. */
  getTensorboardExperiment(
    request: DeepPartial<GetTensorboardExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TensorboardExperiment>;
  /** Updates a TensorboardExperiment. */
  updateTensorboardExperiment(
    request: DeepPartial<UpdateTensorboardExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TensorboardExperiment>;
  /** Lists TensorboardExperiments in a Location. */
  listTensorboardExperiments(
    request: DeepPartial<ListTensorboardExperimentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTensorboardExperimentsResponse>;
  /** Deletes a TensorboardExperiment. */
  deleteTensorboardExperiment(
    request: DeepPartial<DeleteTensorboardExperimentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a TensorboardRun. */
  createTensorboardRun(
    request: DeepPartial<CreateTensorboardRunRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TensorboardRun>;
  /** Batch create TensorboardRuns. */
  batchCreateTensorboardRuns(
    request: DeepPartial<BatchCreateTensorboardRunsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchCreateTensorboardRunsResponse>;
  /** Gets a TensorboardRun. */
  getTensorboardRun(
    request: DeepPartial<GetTensorboardRunRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TensorboardRun>;
  /** Updates a TensorboardRun. */
  updateTensorboardRun(
    request: DeepPartial<UpdateTensorboardRunRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TensorboardRun>;
  /** Lists TensorboardRuns in a Location. */
  listTensorboardRuns(
    request: DeepPartial<ListTensorboardRunsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTensorboardRunsResponse>;
  /** Deletes a TensorboardRun. */
  deleteTensorboardRun(
    request: DeepPartial<DeleteTensorboardRunRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Batch create TensorboardTimeSeries that belong to a TensorboardExperiment. */
  batchCreateTensorboardTimeSeries(
    request: DeepPartial<BatchCreateTensorboardTimeSeriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchCreateTensorboardTimeSeriesResponse>;
  /** Creates a TensorboardTimeSeries. */
  createTensorboardTimeSeries(
    request: DeepPartial<CreateTensorboardTimeSeriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TensorboardTimeSeries>;
  /** Gets a TensorboardTimeSeries. */
  getTensorboardTimeSeries(
    request: DeepPartial<GetTensorboardTimeSeriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TensorboardTimeSeries>;
  /** Updates a TensorboardTimeSeries. */
  updateTensorboardTimeSeries(
    request: DeepPartial<UpdateTensorboardTimeSeriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TensorboardTimeSeries>;
  /** Lists TensorboardTimeSeries in a Location. */
  listTensorboardTimeSeries(
    request: DeepPartial<ListTensorboardTimeSeriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListTensorboardTimeSeriesResponse>;
  /** Deletes a TensorboardTimeSeries. */
  deleteTensorboardTimeSeries(
    request: DeepPartial<DeleteTensorboardTimeSeriesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Reads multiple TensorboardTimeSeries' data. The data point number limit is
   * 1000 for scalars, 100 for tensors and blob references. If the number of
   * data points stored is less than the limit, all data is returned.
   * Otherwise, the number limit of data points is randomly selected from
   * this time series and returned.
   */
  batchReadTensorboardTimeSeriesData(
    request: DeepPartial<BatchReadTensorboardTimeSeriesDataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchReadTensorboardTimeSeriesDataResponse>;
  /**
   * Reads a TensorboardTimeSeries' data. By default, if the number of data
   * points stored is less than 1000, all data is returned. Otherwise, 1000
   * data points is randomly selected from this time series and returned.
   * This value can be changed by changing max_data_points, which can't be
   * greater than 10k.
   */
  readTensorboardTimeSeriesData(
    request: DeepPartial<ReadTensorboardTimeSeriesDataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReadTensorboardTimeSeriesDataResponse>;
  /**
   * Gets bytes of TensorboardBlobs.
   * This is to allow reading blob data stored in consumer project's Cloud
   * Storage bucket without users having to obtain Cloud Storage access
   * permission.
   */
  readTensorboardBlobData(
    request: DeepPartial<ReadTensorboardBlobDataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<ReadTensorboardBlobDataResponse>;
  /**
   * Write time series data points of multiple TensorboardTimeSeries in multiple
   * TensorboardRun's. If any data fail to be ingested, an error is returned.
   */
  writeTensorboardExperimentData(
    request: DeepPartial<WriteTensorboardExperimentDataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<WriteTensorboardExperimentDataResponse>;
  /**
   * Write time series data points into multiple TensorboardTimeSeries under
   * a TensorboardRun. If any data fail to be ingested, an error is returned.
   */
  writeTensorboardRunData(
    request: DeepPartial<WriteTensorboardRunDataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<WriteTensorboardRunDataResponse>;
  /**
   * Exports a TensorboardTimeSeries' data. Data is returned in paginated
   * responses.
   */
  exportTensorboardTimeSeriesData(
    request: DeepPartial<ExportTensorboardTimeSeriesDataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExportTensorboardTimeSeriesDataResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
