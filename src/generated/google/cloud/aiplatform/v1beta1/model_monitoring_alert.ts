// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/model_monitoring_alert.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/** Monitoring alert triggered condition. */
export interface ModelMonitoringAlertCondition {
  /**
   * A condition that compares a stats value against a threshold. Alert will
   * be triggered if value above the threshold.
   */
  threshold?: number | undefined;
}

/** Represents a single model monitoring anomaly. */
export interface ModelMonitoringAnomaly {
  /** Tabular anomaly. */
  tabularAnomaly?:
    | ModelMonitoringAnomaly_TabularAnomaly
    | undefined;
  /** Model monitoring job resource name. */
  modelMonitoringJob: string;
  /**
   * Algorithm used to calculated the metrics, eg: jensen_shannon_divergence,
   * l_infinity.
   */
  algorithm: string;
}

/** Tabular anomaly details. */
export interface ModelMonitoringAnomaly_TabularAnomaly {
  /** Additional anomaly information. e.g. Google Cloud Storage uri. */
  anomalyUri: string;
  /** Overview of this anomaly. */
  summary: string;
  /** Anomaly body. */
  anomaly:
    | any
    | undefined;
  /** The time the anomaly was triggered. */
  triggerTime:
    | Date
    | undefined;
  /** The alert condition associated with this anomaly. */
  condition: ModelMonitoringAlertCondition | undefined;
}

/**
 * Represents a single monitoring alert. This is currently used in the
 * SearchModelMonitoringAlerts api, thus the alert wrapped in this message
 * belongs to the resource asked in the request.
 */
export interface ModelMonitoringAlert {
  /** The stats name. */
  statsName: string;
  /**
   * One of the supported monitoring objectives:
   * `raw-feature-drift`
   * `prediction-output-drift`
   * `feature-attribution`
   */
  objectiveType: string;
  /** Alert creation time. */
  alertTime:
    | Date
    | undefined;
  /** Anomaly details. */
  anomaly: ModelMonitoringAnomaly | undefined;
}

function createBaseModelMonitoringAlertCondition(): ModelMonitoringAlertCondition {
  return { threshold: undefined };
}

export const ModelMonitoringAlertCondition: MessageFns<ModelMonitoringAlertCondition> = {
  encode(message: ModelMonitoringAlertCondition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.threshold !== undefined) {
      writer.uint32(9).double(message.threshold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitoringAlertCondition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringAlertCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.threshold = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringAlertCondition {
    return { threshold: isSet(object.threshold) ? globalThis.Number(object.threshold) : undefined };
  },

  toJSON(message: ModelMonitoringAlertCondition): unknown {
    const obj: any = {};
    if (message.threshold !== undefined) {
      obj.threshold = message.threshold;
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitoringAlertCondition>): ModelMonitoringAlertCondition {
    return ModelMonitoringAlertCondition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitoringAlertCondition>): ModelMonitoringAlertCondition {
    const message = createBaseModelMonitoringAlertCondition();
    message.threshold = object.threshold ?? undefined;
    return message;
  },
};

function createBaseModelMonitoringAnomaly(): ModelMonitoringAnomaly {
  return { tabularAnomaly: undefined, modelMonitoringJob: "", algorithm: "" };
}

export const ModelMonitoringAnomaly: MessageFns<ModelMonitoringAnomaly> = {
  encode(message: ModelMonitoringAnomaly, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tabularAnomaly !== undefined) {
      ModelMonitoringAnomaly_TabularAnomaly.encode(message.tabularAnomaly, writer.uint32(10).fork()).join();
    }
    if (message.modelMonitoringJob !== "") {
      writer.uint32(18).string(message.modelMonitoringJob);
    }
    if (message.algorithm !== "") {
      writer.uint32(26).string(message.algorithm);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitoringAnomaly {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringAnomaly();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tabularAnomaly = ModelMonitoringAnomaly_TabularAnomaly.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelMonitoringJob = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.algorithm = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringAnomaly {
    return {
      tabularAnomaly: isSet(object.tabularAnomaly)
        ? ModelMonitoringAnomaly_TabularAnomaly.fromJSON(object.tabularAnomaly)
        : undefined,
      modelMonitoringJob: isSet(object.modelMonitoringJob) ? globalThis.String(object.modelMonitoringJob) : "",
      algorithm: isSet(object.algorithm) ? globalThis.String(object.algorithm) : "",
    };
  },

  toJSON(message: ModelMonitoringAnomaly): unknown {
    const obj: any = {};
    if (message.tabularAnomaly !== undefined) {
      obj.tabularAnomaly = ModelMonitoringAnomaly_TabularAnomaly.toJSON(message.tabularAnomaly);
    }
    if (message.modelMonitoringJob !== "") {
      obj.modelMonitoringJob = message.modelMonitoringJob;
    }
    if (message.algorithm !== "") {
      obj.algorithm = message.algorithm;
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitoringAnomaly>): ModelMonitoringAnomaly {
    return ModelMonitoringAnomaly.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitoringAnomaly>): ModelMonitoringAnomaly {
    const message = createBaseModelMonitoringAnomaly();
    message.tabularAnomaly = (object.tabularAnomaly !== undefined && object.tabularAnomaly !== null)
      ? ModelMonitoringAnomaly_TabularAnomaly.fromPartial(object.tabularAnomaly)
      : undefined;
    message.modelMonitoringJob = object.modelMonitoringJob ?? "";
    message.algorithm = object.algorithm ?? "";
    return message;
  },
};

function createBaseModelMonitoringAnomaly_TabularAnomaly(): ModelMonitoringAnomaly_TabularAnomaly {
  return { anomalyUri: "", summary: "", anomaly: undefined, triggerTime: undefined, condition: undefined };
}

export const ModelMonitoringAnomaly_TabularAnomaly: MessageFns<ModelMonitoringAnomaly_TabularAnomaly> = {
  encode(message: ModelMonitoringAnomaly_TabularAnomaly, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.anomalyUri !== "") {
      writer.uint32(10).string(message.anomalyUri);
    }
    if (message.summary !== "") {
      writer.uint32(18).string(message.summary);
    }
    if (message.anomaly !== undefined) {
      Value.encode(Value.wrap(message.anomaly), writer.uint32(26).fork()).join();
    }
    if (message.triggerTime !== undefined) {
      Timestamp.encode(toTimestamp(message.triggerTime), writer.uint32(34).fork()).join();
    }
    if (message.condition !== undefined) {
      ModelMonitoringAlertCondition.encode(message.condition, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitoringAnomaly_TabularAnomaly {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringAnomaly_TabularAnomaly();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.anomalyUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.summary = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.anomaly = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.triggerTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.condition = ModelMonitoringAlertCondition.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringAnomaly_TabularAnomaly {
    return {
      anomalyUri: isSet(object.anomalyUri) ? globalThis.String(object.anomalyUri) : "",
      summary: isSet(object.summary) ? globalThis.String(object.summary) : "",
      anomaly: isSet(object?.anomaly) ? object.anomaly : undefined,
      triggerTime: isSet(object.triggerTime) ? fromJsonTimestamp(object.triggerTime) : undefined,
      condition: isSet(object.condition) ? ModelMonitoringAlertCondition.fromJSON(object.condition) : undefined,
    };
  },

  toJSON(message: ModelMonitoringAnomaly_TabularAnomaly): unknown {
    const obj: any = {};
    if (message.anomalyUri !== "") {
      obj.anomalyUri = message.anomalyUri;
    }
    if (message.summary !== "") {
      obj.summary = message.summary;
    }
    if (message.anomaly !== undefined) {
      obj.anomaly = message.anomaly;
    }
    if (message.triggerTime !== undefined) {
      obj.triggerTime = message.triggerTime.toISOString();
    }
    if (message.condition !== undefined) {
      obj.condition = ModelMonitoringAlertCondition.toJSON(message.condition);
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitoringAnomaly_TabularAnomaly>): ModelMonitoringAnomaly_TabularAnomaly {
    return ModelMonitoringAnomaly_TabularAnomaly.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitoringAnomaly_TabularAnomaly>): ModelMonitoringAnomaly_TabularAnomaly {
    const message = createBaseModelMonitoringAnomaly_TabularAnomaly();
    message.anomalyUri = object.anomalyUri ?? "";
    message.summary = object.summary ?? "";
    message.anomaly = object.anomaly ?? undefined;
    message.triggerTime = object.triggerTime ?? undefined;
    message.condition = (object.condition !== undefined && object.condition !== null)
      ? ModelMonitoringAlertCondition.fromPartial(object.condition)
      : undefined;
    return message;
  },
};

function createBaseModelMonitoringAlert(): ModelMonitoringAlert {
  return { statsName: "", objectiveType: "", alertTime: undefined, anomaly: undefined };
}

export const ModelMonitoringAlert: MessageFns<ModelMonitoringAlert> = {
  encode(message: ModelMonitoringAlert, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.statsName !== "") {
      writer.uint32(10).string(message.statsName);
    }
    if (message.objectiveType !== "") {
      writer.uint32(18).string(message.objectiveType);
    }
    if (message.alertTime !== undefined) {
      Timestamp.encode(toTimestamp(message.alertTime), writer.uint32(26).fork()).join();
    }
    if (message.anomaly !== undefined) {
      ModelMonitoringAnomaly.encode(message.anomaly, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelMonitoringAlert {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelMonitoringAlert();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.statsName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.objectiveType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.alertTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.anomaly = ModelMonitoringAnomaly.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelMonitoringAlert {
    return {
      statsName: isSet(object.statsName) ? globalThis.String(object.statsName) : "",
      objectiveType: isSet(object.objectiveType) ? globalThis.String(object.objectiveType) : "",
      alertTime: isSet(object.alertTime) ? fromJsonTimestamp(object.alertTime) : undefined,
      anomaly: isSet(object.anomaly) ? ModelMonitoringAnomaly.fromJSON(object.anomaly) : undefined,
    };
  },

  toJSON(message: ModelMonitoringAlert): unknown {
    const obj: any = {};
    if (message.statsName !== "") {
      obj.statsName = message.statsName;
    }
    if (message.objectiveType !== "") {
      obj.objectiveType = message.objectiveType;
    }
    if (message.alertTime !== undefined) {
      obj.alertTime = message.alertTime.toISOString();
    }
    if (message.anomaly !== undefined) {
      obj.anomaly = ModelMonitoringAnomaly.toJSON(message.anomaly);
    }
    return obj;
  },

  create(base?: DeepPartial<ModelMonitoringAlert>): ModelMonitoringAlert {
    return ModelMonitoringAlert.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModelMonitoringAlert>): ModelMonitoringAlert {
    const message = createBaseModelMonitoringAlert();
    message.statsName = object.statsName ?? "";
    message.objectiveType = object.objectiveType ?? "";
    message.alertTime = object.alertTime ?? undefined;
    message.anomaly = (object.anomaly !== undefined && object.anomaly !== null)
      ? ModelMonitoringAnomaly.fromPartial(object.anomaly)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
