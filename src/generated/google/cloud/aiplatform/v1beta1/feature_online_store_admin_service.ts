// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/feature_online_store_admin_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { FeatureOnlineStore } from "./feature_online_store.js";
import { FeatureView } from "./feature_view.js";
import { FeatureViewSync } from "./feature_view_sync.js";
import { GenericOperationMetadata } from "./operation.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.CreateFeatureOnlineStore][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.CreateFeatureOnlineStore].
 */
export interface CreateFeatureOnlineStoreRequest {
  /**
   * Required. The resource name of the Location to create FeatureOnlineStores.
   * Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The FeatureOnlineStore to create. */
  featureOnlineStore:
    | FeatureOnlineStore
    | undefined;
  /**
   * Required. The ID to use for this FeatureOnlineStore, which will become the
   * final component of the FeatureOnlineStore's resource name.
   *
   * This value may be up to 60 characters, and valid characters are
   * `[a-z0-9_]`. The first character cannot be a number.
   *
   * The value must be unique within the project and location.
   */
  featureOnlineStoreId: string;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.GetFeatureOnlineStore][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.GetFeatureOnlineStore].
 */
export interface GetFeatureOnlineStoreRequest {
  /** Required. The name of the FeatureOnlineStore resource. */
  name: string;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.ListFeatureOnlineStores][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureOnlineStores].
 */
export interface ListFeatureOnlineStoresRequest {
  /**
   * Required. The resource name of the Location to list FeatureOnlineStores.
   * Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Lists the FeatureOnlineStores that match the filter expression. The
   * following fields are supported:
   *
   * * `create_time`: Supports `=`, `!=`, `<`, `>`, `<=`, and `>=` comparisons.
   * Values must be
   *   in RFC 3339 format.
   * * `update_time`: Supports `=`, `!=`, `<`, `>`, `<=`, and `>=` comparisons.
   * Values must be
   *   in RFC 3339 format.
   * * `labels`: Supports key-value equality and key presence.
   *
   * Examples:
   *
   * * `create_time > "2020-01-01" OR update_time > "2020-01-01"`
   *    FeatureOnlineStores created or updated after 2020-01-01.
   * * `labels.env = "prod"`
   *    FeatureOnlineStores with label "env" set to "prod".
   */
  filter: string;
  /**
   * The maximum number of FeatureOnlineStores to return. The service may return
   * fewer than this value. If unspecified, at most 100 FeatureOnlineStores will
   * be returned. The maximum value is 100; any value greater than 100 will be
   * coerced to 100.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [FeatureOnlineStoreAdminService.ListFeatureOnlineStores][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureOnlineStores]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [FeatureOnlineStoreAdminService.ListFeatureOnlineStores][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureOnlineStores]
   * must match the call that provided the page token.
   */
  pageToken: string;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   * Supported Fields:
   *
   *   * `create_time`
   *   * `update_time`
   */
  orderBy: string;
}

/**
 * Response message for
 * [FeatureOnlineStoreAdminService.ListFeatureOnlineStores][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureOnlineStores].
 */
export interface ListFeatureOnlineStoresResponse {
  /** The FeatureOnlineStores matching the request. */
  featureOnlineStores: FeatureOnlineStore[];
  /**
   * A token, which can be sent as
   * [ListFeatureOnlineStoresRequest.page_token][google.cloud.aiplatform.v1beta1.ListFeatureOnlineStoresRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.UpdateFeatureOnlineStore][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.UpdateFeatureOnlineStore].
 */
export interface UpdateFeatureOnlineStoreRequest {
  /**
   * Required. The FeatureOnlineStore's `name` field is used to identify the
   * FeatureOnlineStore to be updated. Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}`
   */
  featureOnlineStore:
    | FeatureOnlineStore
    | undefined;
  /**
   * Field mask is used to specify the fields to be overwritten in the
   * FeatureOnlineStore resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then only the non-empty fields present in the
   * request will be overwritten. Set the update_mask to `*` to override all
   * fields.
   *
   * Updatable fields:
   *
   *   * `labels`
   *   * `description`
   *   * `bigtable`
   *   * `bigtable.auto_scaling`
   *   * `bigtable.enable_multi_region_replica`
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.DeleteFeatureOnlineStore][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.DeleteFeatureOnlineStore].
 */
export interface DeleteFeatureOnlineStoreRequest {
  /**
   * Required. The name of the FeatureOnlineStore to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}`
   */
  name: string;
  /**
   * If set to true, any FeatureViews and Features for this FeatureOnlineStore
   * will also be deleted. (Otherwise, the request will only work if the
   * FeatureOnlineStore has no FeatureViews.)
   */
  force: boolean;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.CreateFeatureView][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.CreateFeatureView].
 */
export interface CreateFeatureViewRequest {
  /**
   * Required. The resource name of the FeatureOnlineStore to create
   * FeatureViews. Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}`
   */
  parent: string;
  /** Required. The FeatureView to create. */
  featureView:
    | FeatureView
    | undefined;
  /**
   * Required. The ID to use for the FeatureView, which will become the final
   * component of the FeatureView's resource name.
   *
   * This value may be up to 60 characters, and valid characters are
   * `[a-z0-9_]`. The first character cannot be a number.
   *
   * The value must be unique within a FeatureOnlineStore.
   */
  featureViewId: string;
  /**
   * Immutable. If set to true, one on demand sync will be run immediately,
   * regardless whether the
   * [FeatureView.sync_config][google.cloud.aiplatform.v1beta1.FeatureView.sync_config]
   * is configured or not.
   */
  runSyncImmediately: boolean;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.GetFeatureView][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.GetFeatureView].
 */
export interface GetFeatureViewRequest {
  /**
   * Required. The name of the FeatureView resource.
   * Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
   */
  name: string;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.ListFeatureViews][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureViews].
 */
export interface ListFeatureViewsRequest {
  /**
   * Required. The resource name of the FeatureOnlineStore to list FeatureViews.
   * Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}`
   */
  parent: string;
  /**
   * Lists the FeatureViews that match the filter expression. The following
   * filters are supported:
   *
   * * `create_time`: Supports `=`, `!=`, `<`, `>`, `>=`, and `<=` comparisons.
   * Values must be in RFC 3339 format.
   * * `update_time`: Supports `=`, `!=`, `<`, `>`, `>=`, and `<=` comparisons.
   * Values must be in RFC 3339 format.
   * * `labels`: Supports key-value equality as well as key presence.
   *
   * Examples:
   *
   * * `create_time > \"2020-01-31T15:30:00.000000Z\" OR
   *      update_time > \"2020-01-31T15:30:00.000000Z\"` --> FeatureViews
   *      created or updated after 2020-01-31T15:30:00.000000Z.
   * * `labels.active = yes AND labels.env = prod` --> FeatureViews having both
   *     (active: yes) and (env: prod) labels.
   * * `labels.env: *` --> Any FeatureView which has a label with 'env' as the
   *   key.
   */
  filter: string;
  /**
   * The maximum number of FeatureViews to return. The service may return fewer
   * than this value. If unspecified, at most 1000 FeatureViews will be
   * returned. The maximum value is 1000; any value greater than 1000 will be
   * coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [FeatureOnlineStoreAdminService.ListFeatureViews][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureViews]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [FeatureOnlineStoreAdminService.ListFeatureViews][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureViews]
   * must match the call that provided the page token.
   */
  pageToken: string;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   *
   * Supported fields:
   *
   *   * `feature_view_id`
   *   * `create_time`
   *   * `update_time`
   */
  orderBy: string;
}

/**
 * Response message for
 * [FeatureOnlineStoreAdminService.ListFeatureViews][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureViews].
 */
export interface ListFeatureViewsResponse {
  /** The FeatureViews matching the request. */
  featureViews: FeatureView[];
  /**
   * A token, which can be sent as
   * [ListFeatureViewsRequest.page_token][google.cloud.aiplatform.v1beta1.ListFeatureViewsRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.UpdateFeatureView][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.UpdateFeatureView].
 */
export interface UpdateFeatureViewRequest {
  /**
   * Required. The FeatureView's `name` field is used to identify the
   * FeatureView to be updated. Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
   */
  featureView:
    | FeatureView
    | undefined;
  /**
   * Field mask is used to specify the fields to be overwritten in the
   * FeatureView resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then only the non-empty fields present in the
   * request will be overwritten. Set the update_mask to `*` to override all
   * fields.
   *
   * Updatable fields:
   *
   *   * `labels`
   *   * `service_agent_type`
   *   * `big_query_source`
   *   * `big_query_source.uri`
   *   * `big_query_source.entity_id_columns`
   *   * `feature_registry_source`
   *   * `feature_registry_source.feature_groups`
   *   * `sync_config`
   *   * `sync_config.cron`
   */
  updateMask: string[] | undefined;
}

/** Request message for [FeatureOnlineStoreAdminService.DeleteFeatureViews][]. */
export interface DeleteFeatureViewRequest {
  /**
   * Required. The name of the FeatureView to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
   */
  name: string;
}

/** Details of operations that perform create FeatureOnlineStore. */
export interface CreateFeatureOnlineStoreOperationMetadata {
  /** Operation metadata for FeatureOnlineStore. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/** Details of operations that perform update FeatureOnlineStore. */
export interface UpdateFeatureOnlineStoreOperationMetadata {
  /** Operation metadata for FeatureOnlineStore. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/** Details of operations that perform create FeatureView. */
export interface CreateFeatureViewOperationMetadata {
  /** Operation metadata for FeatureView Create. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/** Details of operations that perform update FeatureView. */
export interface UpdateFeatureViewOperationMetadata {
  /** Operation metadata for FeatureView Update. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.SyncFeatureView][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.SyncFeatureView].
 */
export interface SyncFeatureViewRequest {
  /**
   * Required. Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
   */
  featureView: string;
}

/**
 * Response message for
 * [FeatureOnlineStoreAdminService.SyncFeatureView][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.SyncFeatureView].
 */
export interface SyncFeatureViewResponse {
  /**
   * Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}/featureViewSyncs/{feature_view_sync}`
   */
  featureViewSync: string;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.GetFeatureViewSync][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.GetFeatureViewSync].
 */
export interface GetFeatureViewSyncRequest {
  /**
   * Required. The name of the FeatureViewSync resource.
   * Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}/featureViewSyncs/{feature_view_sync}`
   */
  name: string;
}

/**
 * Request message for
 * [FeatureOnlineStoreAdminService.ListFeatureViewSyncs][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureViewSyncs].
 */
export interface ListFeatureViewSyncsRequest {
  /**
   * Required. The resource name of the FeatureView to list FeatureViewSyncs.
   * Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
   */
  parent: string;
  /**
   * Lists the FeatureViewSyncs that match the filter expression. The following
   * filters are supported:
   *
   * * `create_time`: Supports `=`, `!=`, `<`, `>`, `>=`, and `<=` comparisons.
   * Values must be in RFC 3339 format.
   *
   * Examples:
   *
   * * `create_time > \"2020-01-31T15:30:00.000000Z\"` --> FeatureViewSyncs
   *      created after 2020-01-31T15:30:00.000000Z.
   */
  filter: string;
  /**
   * The maximum number of FeatureViewSyncs to return. The service may return
   * fewer than this value. If unspecified, at most 1000 FeatureViewSyncs will
   * be returned. The maximum value is 1000; any value greater than 1000 will be
   * coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous
   * [FeatureOnlineStoreAdminService.ListFeatureViewSyncs][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureViewSyncs]
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * [FeatureOnlineStoreAdminService.ListFeatureViewSyncs][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureViewSyncs]
   * must match the call that provided the page token.
   */
  pageToken: string;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order.
   * Use "desc" after a field name for descending.
   *
   * Supported fields:
   *
   *   * `create_time`
   */
  orderBy: string;
}

/**
 * Response message for
 * [FeatureOnlineStoreAdminService.ListFeatureViewSyncs][google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService.ListFeatureViewSyncs].
 */
export interface ListFeatureViewSyncsResponse {
  /** The FeatureViewSyncs matching the request. */
  featureViewSyncs: FeatureViewSync[];
  /**
   * A token, which can be sent as
   * [ListFeatureViewSyncsRequest.page_token][google.cloud.aiplatform.v1beta1.ListFeatureViewSyncsRequest.page_token]
   * to retrieve the next page. If this field is omitted, there are no
   * subsequent pages.
   */
  nextPageToken: string;
}

function createBaseCreateFeatureOnlineStoreRequest(): CreateFeatureOnlineStoreRequest {
  return { parent: "", featureOnlineStore: undefined, featureOnlineStoreId: "" };
}

export const CreateFeatureOnlineStoreRequest: MessageFns<CreateFeatureOnlineStoreRequest> = {
  encode(message: CreateFeatureOnlineStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.featureOnlineStore !== undefined) {
      FeatureOnlineStore.encode(message.featureOnlineStore, writer.uint32(18).fork()).join();
    }
    if (message.featureOnlineStoreId !== "") {
      writer.uint32(26).string(message.featureOnlineStoreId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeatureOnlineStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeatureOnlineStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.featureOnlineStore = FeatureOnlineStore.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.featureOnlineStoreId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFeatureOnlineStoreRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      featureOnlineStore: isSet(object.featureOnlineStore)
        ? FeatureOnlineStore.fromJSON(object.featureOnlineStore)
        : undefined,
      featureOnlineStoreId: isSet(object.featureOnlineStoreId) ? globalThis.String(object.featureOnlineStoreId) : "",
    };
  },

  toJSON(message: CreateFeatureOnlineStoreRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.featureOnlineStore !== undefined) {
      obj.featureOnlineStore = FeatureOnlineStore.toJSON(message.featureOnlineStore);
    }
    if (message.featureOnlineStoreId !== "") {
      obj.featureOnlineStoreId = message.featureOnlineStoreId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFeatureOnlineStoreRequest>): CreateFeatureOnlineStoreRequest {
    return CreateFeatureOnlineStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFeatureOnlineStoreRequest>): CreateFeatureOnlineStoreRequest {
    const message = createBaseCreateFeatureOnlineStoreRequest();
    message.parent = object.parent ?? "";
    message.featureOnlineStore = (object.featureOnlineStore !== undefined && object.featureOnlineStore !== null)
      ? FeatureOnlineStore.fromPartial(object.featureOnlineStore)
      : undefined;
    message.featureOnlineStoreId = object.featureOnlineStoreId ?? "";
    return message;
  },
};

function createBaseGetFeatureOnlineStoreRequest(): GetFeatureOnlineStoreRequest {
  return { name: "" };
}

export const GetFeatureOnlineStoreRequest: MessageFns<GetFeatureOnlineStoreRequest> = {
  encode(message: GetFeatureOnlineStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureOnlineStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureOnlineStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureOnlineStoreRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFeatureOnlineStoreRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFeatureOnlineStoreRequest>): GetFeatureOnlineStoreRequest {
    return GetFeatureOnlineStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFeatureOnlineStoreRequest>): GetFeatureOnlineStoreRequest {
    const message = createBaseGetFeatureOnlineStoreRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListFeatureOnlineStoresRequest(): ListFeatureOnlineStoresRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "" };
}

export const ListFeatureOnlineStoresRequest: MessageFns<ListFeatureOnlineStoresRequest> = {
  encode(message: ListFeatureOnlineStoresRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeatureOnlineStoresRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeatureOnlineStoresRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeatureOnlineStoresRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListFeatureOnlineStoresRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeatureOnlineStoresRequest>): ListFeatureOnlineStoresRequest {
    return ListFeatureOnlineStoresRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeatureOnlineStoresRequest>): ListFeatureOnlineStoresRequest {
    const message = createBaseListFeatureOnlineStoresRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListFeatureOnlineStoresResponse(): ListFeatureOnlineStoresResponse {
  return { featureOnlineStores: [], nextPageToken: "" };
}

export const ListFeatureOnlineStoresResponse: MessageFns<ListFeatureOnlineStoresResponse> = {
  encode(message: ListFeatureOnlineStoresResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.featureOnlineStores) {
      FeatureOnlineStore.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeatureOnlineStoresResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeatureOnlineStoresResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.featureOnlineStores.push(FeatureOnlineStore.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeatureOnlineStoresResponse {
    return {
      featureOnlineStores: globalThis.Array.isArray(object?.featureOnlineStores)
        ? object.featureOnlineStores.map((e: any) => FeatureOnlineStore.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListFeatureOnlineStoresResponse): unknown {
    const obj: any = {};
    if (message.featureOnlineStores?.length) {
      obj.featureOnlineStores = message.featureOnlineStores.map((e) => FeatureOnlineStore.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeatureOnlineStoresResponse>): ListFeatureOnlineStoresResponse {
    return ListFeatureOnlineStoresResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeatureOnlineStoresResponse>): ListFeatureOnlineStoresResponse {
    const message = createBaseListFeatureOnlineStoresResponse();
    message.featureOnlineStores = object.featureOnlineStores?.map((e) => FeatureOnlineStore.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateFeatureOnlineStoreRequest(): UpdateFeatureOnlineStoreRequest {
  return { featureOnlineStore: undefined, updateMask: undefined };
}

export const UpdateFeatureOnlineStoreRequest: MessageFns<UpdateFeatureOnlineStoreRequest> = {
  encode(message: UpdateFeatureOnlineStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.featureOnlineStore !== undefined) {
      FeatureOnlineStore.encode(message.featureOnlineStore, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFeatureOnlineStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFeatureOnlineStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.featureOnlineStore = FeatureOnlineStore.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFeatureOnlineStoreRequest {
    return {
      featureOnlineStore: isSet(object.featureOnlineStore)
        ? FeatureOnlineStore.fromJSON(object.featureOnlineStore)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateFeatureOnlineStoreRequest): unknown {
    const obj: any = {};
    if (message.featureOnlineStore !== undefined) {
      obj.featureOnlineStore = FeatureOnlineStore.toJSON(message.featureOnlineStore);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFeatureOnlineStoreRequest>): UpdateFeatureOnlineStoreRequest {
    return UpdateFeatureOnlineStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFeatureOnlineStoreRequest>): UpdateFeatureOnlineStoreRequest {
    const message = createBaseUpdateFeatureOnlineStoreRequest();
    message.featureOnlineStore = (object.featureOnlineStore !== undefined && object.featureOnlineStore !== null)
      ? FeatureOnlineStore.fromPartial(object.featureOnlineStore)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteFeatureOnlineStoreRequest(): DeleteFeatureOnlineStoreRequest {
  return { name: "", force: false };
}

export const DeleteFeatureOnlineStoreRequest: MessageFns<DeleteFeatureOnlineStoreRequest> = {
  encode(message: DeleteFeatureOnlineStoreRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFeatureOnlineStoreRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFeatureOnlineStoreRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFeatureOnlineStoreRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteFeatureOnlineStoreRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFeatureOnlineStoreRequest>): DeleteFeatureOnlineStoreRequest {
    return DeleteFeatureOnlineStoreRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFeatureOnlineStoreRequest>): DeleteFeatureOnlineStoreRequest {
    const message = createBaseDeleteFeatureOnlineStoreRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseCreateFeatureViewRequest(): CreateFeatureViewRequest {
  return { parent: "", featureView: undefined, featureViewId: "", runSyncImmediately: false };
}

export const CreateFeatureViewRequest: MessageFns<CreateFeatureViewRequest> = {
  encode(message: CreateFeatureViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.featureView !== undefined) {
      FeatureView.encode(message.featureView, writer.uint32(18).fork()).join();
    }
    if (message.featureViewId !== "") {
      writer.uint32(26).string(message.featureViewId);
    }
    if (message.runSyncImmediately !== false) {
      writer.uint32(32).bool(message.runSyncImmediately);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeatureViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeatureViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.featureView = FeatureView.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.featureViewId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.runSyncImmediately = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFeatureViewRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      featureView: isSet(object.featureView) ? FeatureView.fromJSON(object.featureView) : undefined,
      featureViewId: isSet(object.featureViewId) ? globalThis.String(object.featureViewId) : "",
      runSyncImmediately: isSet(object.runSyncImmediately) ? globalThis.Boolean(object.runSyncImmediately) : false,
    };
  },

  toJSON(message: CreateFeatureViewRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.featureView !== undefined) {
      obj.featureView = FeatureView.toJSON(message.featureView);
    }
    if (message.featureViewId !== "") {
      obj.featureViewId = message.featureViewId;
    }
    if (message.runSyncImmediately !== false) {
      obj.runSyncImmediately = message.runSyncImmediately;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFeatureViewRequest>): CreateFeatureViewRequest {
    return CreateFeatureViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFeatureViewRequest>): CreateFeatureViewRequest {
    const message = createBaseCreateFeatureViewRequest();
    message.parent = object.parent ?? "";
    message.featureView = (object.featureView !== undefined && object.featureView !== null)
      ? FeatureView.fromPartial(object.featureView)
      : undefined;
    message.featureViewId = object.featureViewId ?? "";
    message.runSyncImmediately = object.runSyncImmediately ?? false;
    return message;
  },
};

function createBaseGetFeatureViewRequest(): GetFeatureViewRequest {
  return { name: "" };
}

export const GetFeatureViewRequest: MessageFns<GetFeatureViewRequest> = {
  encode(message: GetFeatureViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureViewRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFeatureViewRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFeatureViewRequest>): GetFeatureViewRequest {
    return GetFeatureViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFeatureViewRequest>): GetFeatureViewRequest {
    const message = createBaseGetFeatureViewRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListFeatureViewsRequest(): ListFeatureViewsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "" };
}

export const ListFeatureViewsRequest: MessageFns<ListFeatureViewsRequest> = {
  encode(message: ListFeatureViewsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeatureViewsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeatureViewsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeatureViewsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListFeatureViewsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeatureViewsRequest>): ListFeatureViewsRequest {
    return ListFeatureViewsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeatureViewsRequest>): ListFeatureViewsRequest {
    const message = createBaseListFeatureViewsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListFeatureViewsResponse(): ListFeatureViewsResponse {
  return { featureViews: [], nextPageToken: "" };
}

export const ListFeatureViewsResponse: MessageFns<ListFeatureViewsResponse> = {
  encode(message: ListFeatureViewsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.featureViews) {
      FeatureView.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeatureViewsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeatureViewsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.featureViews.push(FeatureView.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeatureViewsResponse {
    return {
      featureViews: globalThis.Array.isArray(object?.featureViews)
        ? object.featureViews.map((e: any) => FeatureView.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListFeatureViewsResponse): unknown {
    const obj: any = {};
    if (message.featureViews?.length) {
      obj.featureViews = message.featureViews.map((e) => FeatureView.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeatureViewsResponse>): ListFeatureViewsResponse {
    return ListFeatureViewsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeatureViewsResponse>): ListFeatureViewsResponse {
    const message = createBaseListFeatureViewsResponse();
    message.featureViews = object.featureViews?.map((e) => FeatureView.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateFeatureViewRequest(): UpdateFeatureViewRequest {
  return { featureView: undefined, updateMask: undefined };
}

export const UpdateFeatureViewRequest: MessageFns<UpdateFeatureViewRequest> = {
  encode(message: UpdateFeatureViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.featureView !== undefined) {
      FeatureView.encode(message.featureView, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFeatureViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFeatureViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.featureView = FeatureView.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFeatureViewRequest {
    return {
      featureView: isSet(object.featureView) ? FeatureView.fromJSON(object.featureView) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateFeatureViewRequest): unknown {
    const obj: any = {};
    if (message.featureView !== undefined) {
      obj.featureView = FeatureView.toJSON(message.featureView);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFeatureViewRequest>): UpdateFeatureViewRequest {
    return UpdateFeatureViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFeatureViewRequest>): UpdateFeatureViewRequest {
    const message = createBaseUpdateFeatureViewRequest();
    message.featureView = (object.featureView !== undefined && object.featureView !== null)
      ? FeatureView.fromPartial(object.featureView)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteFeatureViewRequest(): DeleteFeatureViewRequest {
  return { name: "" };
}

export const DeleteFeatureViewRequest: MessageFns<DeleteFeatureViewRequest> = {
  encode(message: DeleteFeatureViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFeatureViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFeatureViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFeatureViewRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteFeatureViewRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFeatureViewRequest>): DeleteFeatureViewRequest {
    return DeleteFeatureViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFeatureViewRequest>): DeleteFeatureViewRequest {
    const message = createBaseDeleteFeatureViewRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateFeatureOnlineStoreOperationMetadata(): CreateFeatureOnlineStoreOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateFeatureOnlineStoreOperationMetadata: MessageFns<CreateFeatureOnlineStoreOperationMetadata> = {
  encode(message: CreateFeatureOnlineStoreOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeatureOnlineStoreOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeatureOnlineStoreOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFeatureOnlineStoreOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateFeatureOnlineStoreOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFeatureOnlineStoreOperationMetadata>): CreateFeatureOnlineStoreOperationMetadata {
    return CreateFeatureOnlineStoreOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreateFeatureOnlineStoreOperationMetadata>,
  ): CreateFeatureOnlineStoreOperationMetadata {
    const message = createBaseCreateFeatureOnlineStoreOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseUpdateFeatureOnlineStoreOperationMetadata(): UpdateFeatureOnlineStoreOperationMetadata {
  return { genericMetadata: undefined };
}

export const UpdateFeatureOnlineStoreOperationMetadata: MessageFns<UpdateFeatureOnlineStoreOperationMetadata> = {
  encode(message: UpdateFeatureOnlineStoreOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFeatureOnlineStoreOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFeatureOnlineStoreOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFeatureOnlineStoreOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UpdateFeatureOnlineStoreOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFeatureOnlineStoreOperationMetadata>): UpdateFeatureOnlineStoreOperationMetadata {
    return UpdateFeatureOnlineStoreOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateFeatureOnlineStoreOperationMetadata>,
  ): UpdateFeatureOnlineStoreOperationMetadata {
    const message = createBaseUpdateFeatureOnlineStoreOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseCreateFeatureViewOperationMetadata(): CreateFeatureViewOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateFeatureViewOperationMetadata: MessageFns<CreateFeatureViewOperationMetadata> = {
  encode(message: CreateFeatureViewOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeatureViewOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeatureViewOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFeatureViewOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateFeatureViewOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFeatureViewOperationMetadata>): CreateFeatureViewOperationMetadata {
    return CreateFeatureViewOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFeatureViewOperationMetadata>): CreateFeatureViewOperationMetadata {
    const message = createBaseCreateFeatureViewOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseUpdateFeatureViewOperationMetadata(): UpdateFeatureViewOperationMetadata {
  return { genericMetadata: undefined };
}

export const UpdateFeatureViewOperationMetadata: MessageFns<UpdateFeatureViewOperationMetadata> = {
  encode(message: UpdateFeatureViewOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFeatureViewOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFeatureViewOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFeatureViewOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UpdateFeatureViewOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFeatureViewOperationMetadata>): UpdateFeatureViewOperationMetadata {
    return UpdateFeatureViewOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFeatureViewOperationMetadata>): UpdateFeatureViewOperationMetadata {
    const message = createBaseUpdateFeatureViewOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseSyncFeatureViewRequest(): SyncFeatureViewRequest {
  return { featureView: "" };
}

export const SyncFeatureViewRequest: MessageFns<SyncFeatureViewRequest> = {
  encode(message: SyncFeatureViewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.featureView !== "") {
      writer.uint32(10).string(message.featureView);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncFeatureViewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncFeatureViewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.featureView = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncFeatureViewRequest {
    return { featureView: isSet(object.featureView) ? globalThis.String(object.featureView) : "" };
  },

  toJSON(message: SyncFeatureViewRequest): unknown {
    const obj: any = {};
    if (message.featureView !== "") {
      obj.featureView = message.featureView;
    }
    return obj;
  },

  create(base?: DeepPartial<SyncFeatureViewRequest>): SyncFeatureViewRequest {
    return SyncFeatureViewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SyncFeatureViewRequest>): SyncFeatureViewRequest {
    const message = createBaseSyncFeatureViewRequest();
    message.featureView = object.featureView ?? "";
    return message;
  },
};

function createBaseSyncFeatureViewResponse(): SyncFeatureViewResponse {
  return { featureViewSync: "" };
}

export const SyncFeatureViewResponse: MessageFns<SyncFeatureViewResponse> = {
  encode(message: SyncFeatureViewResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.featureViewSync !== "") {
      writer.uint32(10).string(message.featureViewSync);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncFeatureViewResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncFeatureViewResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.featureViewSync = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncFeatureViewResponse {
    return { featureViewSync: isSet(object.featureViewSync) ? globalThis.String(object.featureViewSync) : "" };
  },

  toJSON(message: SyncFeatureViewResponse): unknown {
    const obj: any = {};
    if (message.featureViewSync !== "") {
      obj.featureViewSync = message.featureViewSync;
    }
    return obj;
  },

  create(base?: DeepPartial<SyncFeatureViewResponse>): SyncFeatureViewResponse {
    return SyncFeatureViewResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SyncFeatureViewResponse>): SyncFeatureViewResponse {
    const message = createBaseSyncFeatureViewResponse();
    message.featureViewSync = object.featureViewSync ?? "";
    return message;
  },
};

function createBaseGetFeatureViewSyncRequest(): GetFeatureViewSyncRequest {
  return { name: "" };
}

export const GetFeatureViewSyncRequest: MessageFns<GetFeatureViewSyncRequest> = {
  encode(message: GetFeatureViewSyncRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureViewSyncRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureViewSyncRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureViewSyncRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFeatureViewSyncRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFeatureViewSyncRequest>): GetFeatureViewSyncRequest {
    return GetFeatureViewSyncRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFeatureViewSyncRequest>): GetFeatureViewSyncRequest {
    const message = createBaseGetFeatureViewSyncRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListFeatureViewSyncsRequest(): ListFeatureViewSyncsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "" };
}

export const ListFeatureViewSyncsRequest: MessageFns<ListFeatureViewSyncsRequest> = {
  encode(message: ListFeatureViewSyncsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeatureViewSyncsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeatureViewSyncsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeatureViewSyncsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListFeatureViewSyncsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeatureViewSyncsRequest>): ListFeatureViewSyncsRequest {
    return ListFeatureViewSyncsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeatureViewSyncsRequest>): ListFeatureViewSyncsRequest {
    const message = createBaseListFeatureViewSyncsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListFeatureViewSyncsResponse(): ListFeatureViewSyncsResponse {
  return { featureViewSyncs: [], nextPageToken: "" };
}

export const ListFeatureViewSyncsResponse: MessageFns<ListFeatureViewSyncsResponse> = {
  encode(message: ListFeatureViewSyncsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.featureViewSyncs) {
      FeatureViewSync.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeatureViewSyncsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeatureViewSyncsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.featureViewSyncs.push(FeatureViewSync.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeatureViewSyncsResponse {
    return {
      featureViewSyncs: globalThis.Array.isArray(object?.featureViewSyncs)
        ? object.featureViewSyncs.map((e: any) => FeatureViewSync.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListFeatureViewSyncsResponse): unknown {
    const obj: any = {};
    if (message.featureViewSyncs?.length) {
      obj.featureViewSyncs = message.featureViewSyncs.map((e) => FeatureViewSync.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeatureViewSyncsResponse>): ListFeatureViewSyncsResponse {
    return ListFeatureViewSyncsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeatureViewSyncsResponse>): ListFeatureViewSyncsResponse {
    const message = createBaseListFeatureViewSyncsResponse();
    message.featureViewSyncs = object.featureViewSyncs?.map((e) => FeatureViewSync.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * The service that handles CRUD and List for resources for
 * FeatureOnlineStore.
 */
export type FeatureOnlineStoreAdminServiceDefinition = typeof FeatureOnlineStoreAdminServiceDefinition;
export const FeatureOnlineStoreAdminServiceDefinition = {
  name: "FeatureOnlineStoreAdminService",
  fullName: "google.cloud.aiplatform.v1beta1.FeatureOnlineStoreAdminService",
  methods: {
    /** Creates a new FeatureOnlineStore in a given project and location. */
    createFeatureOnlineStore: {
      name: "CreateFeatureOnlineStore",
      requestType: CreateFeatureOnlineStoreRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              63,
              10,
              18,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              18,
              41,
              67,
              114,
              101,
              97,
              116,
              101,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              51,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              111,
              110,
              108,
              105,
              110,
              101,
              95,
              115,
              116,
              111,
              114,
              101,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              111,
              110,
              108,
              105,
              110,
              101,
              95,
              115,
              116,
              111,
              114,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              84,
              58,
              20,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              111,
              110,
              108,
              105,
              110,
              101,
              95,
              115,
              116,
              111,
              114,
              101,
              34,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single FeatureOnlineStore. */
    getFeatureOnlineStore: {
      name: "GetFeatureOnlineStore",
      requestType: GetFeatureOnlineStoreRequest,
      requestStream: false,
      responseType: FeatureOnlineStore,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists FeatureOnlineStores in a given project and location. */
    listFeatureOnlineStores: {
      name: "ListFeatureOnlineStores",
      requestType: ListFeatureOnlineStoresRequest,
      requestStream: false,
      responseType: ListFeatureOnlineStoresResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single FeatureOnlineStore. */
    updateFeatureOnlineStore: {
      name: "UpdateFeatureOnlineStore",
      requestType: UpdateFeatureOnlineStoreRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              63,
              10,
              18,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              18,
              41,
              85,
              112,
              100,
              97,
              116,
              101,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              111,
              110,
              108,
              105,
              110,
              101,
              95,
              115,
              116,
              111,
              114,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              105,
              58,
              20,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              111,
              110,
              108,
              105,
              110,
              101,
              95,
              115,
              116,
              111,
              114,
              101,
              50,
              81,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              111,
              110,
              108,
              105,
              110,
              101,
              95,
              115,
              116,
              111,
              114,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a single FeatureOnlineStore. The FeatureOnlineStore must not
     * contain any FeatureViews.
     */
    deleteFeatureOnlineStore: {
      name: "DeleteFeatureOnlineStore",
      requestType: DeleteFeatureOnlineStoreRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([10, 110, 97, 109, 101, 44, 102, 111, 114, 99, 101])],
          578365826: [
            Buffer.from([
              62,
              42,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new FeatureView in a given FeatureOnlineStore. */
    createFeatureView: {
      name: "CreateFeatureView",
      requestType: CreateFeatureViewRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              49,
              10,
              11,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              18,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              35,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              118,
              105,
              101,
              119,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              118,
              105,
              101,
              119,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              91,
              58,
              12,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              118,
              105,
              101,
              119,
              34,
              75,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single FeatureView. */
    getFeatureView: {
      name: "GetFeatureView",
      requestType: GetFeatureViewRequest,
      requestStream: false,
      responseType: FeatureView,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              77,
              18,
              75,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists FeatureViews in a given FeatureOnlineStore. */
    listFeatureViews: {
      name: "ListFeatureViews",
      requestType: ListFeatureViewsRequest,
      requestStream: false,
      responseType: ListFeatureViewsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              77,
              18,
              75,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single FeatureView. */
    updateFeatureView: {
      name: "UpdateFeatureView",
      requestType: UpdateFeatureViewRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              49,
              10,
              11,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              18,
              34,
              85,
              112,
              100,
              97,
              116,
              101,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              24,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              118,
              105,
              101,
              119,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              104,
              58,
              12,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              118,
              105,
              101,
              119,
              50,
              88,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              118,
              105,
              101,
              119,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single FeatureView. */
    deleteFeatureView: {
      name: "DeleteFeatureView",
      requestType: DeleteFeatureViewRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              77,
              42,
              75,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Triggers on-demand sync for the FeatureView. */
    syncFeatureView: {
      name: "SyncFeatureView",
      requestType: SyncFeatureViewRequest,
      requestStream: false,
      responseType: SyncFeatureViewResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 102, 101, 97, 116, 117, 114, 101, 95, 118, 105, 101, 119])],
          578365826: [
            Buffer.from([
              93,
              58,
              1,
              42,
              34,
              88,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              118,
              105,
              101,
              119,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              58,
              115,
              121,
              110,
              99,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single FeatureViewSync. */
    getFeatureViewSync: {
      name: "GetFeatureViewSync",
      requestType: GetFeatureViewSyncRequest,
      requestStream: false,
      responseType: FeatureViewSync,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              96,
              18,
              94,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              83,
              121,
              110,
              99,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists FeatureViewSyncs in a given FeatureView. */
    listFeatureViewSyncs: {
      name: "ListFeatureViewSyncs",
      requestType: ListFeatureViewSyncsRequest,
      requestStream: false,
      responseType: ListFeatureViewSyncsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              96,
              18,
              94,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              79,
              110,
              108,
              105,
              110,
              101,
              83,
              116,
              111,
              114,
              101,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              86,
              105,
              101,
              119,
              83,
              121,
              110,
              99,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface FeatureOnlineStoreAdminServiceImplementation<CallContextExt = {}> {
  /** Creates a new FeatureOnlineStore in a given project and location. */
  createFeatureOnlineStore(
    request: CreateFeatureOnlineStoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets details of a single FeatureOnlineStore. */
  getFeatureOnlineStore(
    request: GetFeatureOnlineStoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FeatureOnlineStore>>;
  /** Lists FeatureOnlineStores in a given project and location. */
  listFeatureOnlineStores(
    request: ListFeatureOnlineStoresRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFeatureOnlineStoresResponse>>;
  /** Updates the parameters of a single FeatureOnlineStore. */
  updateFeatureOnlineStore(
    request: UpdateFeatureOnlineStoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a single FeatureOnlineStore. The FeatureOnlineStore must not
   * contain any FeatureViews.
   */
  deleteFeatureOnlineStore(
    request: DeleteFeatureOnlineStoreRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a new FeatureView in a given FeatureOnlineStore. */
  createFeatureView(
    request: CreateFeatureViewRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets details of a single FeatureView. */
  getFeatureView(
    request: GetFeatureViewRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FeatureView>>;
  /** Lists FeatureViews in a given FeatureOnlineStore. */
  listFeatureViews(
    request: ListFeatureViewsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFeatureViewsResponse>>;
  /** Updates the parameters of a single FeatureView. */
  updateFeatureView(
    request: UpdateFeatureViewRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a single FeatureView. */
  deleteFeatureView(
    request: DeleteFeatureViewRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Triggers on-demand sync for the FeatureView. */
  syncFeatureView(
    request: SyncFeatureViewRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SyncFeatureViewResponse>>;
  /** Gets details of a single FeatureViewSync. */
  getFeatureViewSync(
    request: GetFeatureViewSyncRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FeatureViewSync>>;
  /** Lists FeatureViewSyncs in a given FeatureView. */
  listFeatureViewSyncs(
    request: ListFeatureViewSyncsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFeatureViewSyncsResponse>>;
}

export interface FeatureOnlineStoreAdminServiceClient<CallOptionsExt = {}> {
  /** Creates a new FeatureOnlineStore in a given project and location. */
  createFeatureOnlineStore(
    request: DeepPartial<CreateFeatureOnlineStoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets details of a single FeatureOnlineStore. */
  getFeatureOnlineStore(
    request: DeepPartial<GetFeatureOnlineStoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FeatureOnlineStore>;
  /** Lists FeatureOnlineStores in a given project and location. */
  listFeatureOnlineStores(
    request: DeepPartial<ListFeatureOnlineStoresRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFeatureOnlineStoresResponse>;
  /** Updates the parameters of a single FeatureOnlineStore. */
  updateFeatureOnlineStore(
    request: DeepPartial<UpdateFeatureOnlineStoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a single FeatureOnlineStore. The FeatureOnlineStore must not
   * contain any FeatureViews.
   */
  deleteFeatureOnlineStore(
    request: DeepPartial<DeleteFeatureOnlineStoreRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a new FeatureView in a given FeatureOnlineStore. */
  createFeatureView(
    request: DeepPartial<CreateFeatureViewRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets details of a single FeatureView. */
  getFeatureView(
    request: DeepPartial<GetFeatureViewRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FeatureView>;
  /** Lists FeatureViews in a given FeatureOnlineStore. */
  listFeatureViews(
    request: DeepPartial<ListFeatureViewsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFeatureViewsResponse>;
  /** Updates the parameters of a single FeatureView. */
  updateFeatureView(
    request: DeepPartial<UpdateFeatureViewRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a single FeatureView. */
  deleteFeatureView(
    request: DeepPartial<DeleteFeatureViewRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Triggers on-demand sync for the FeatureView. */
  syncFeatureView(
    request: DeepPartial<SyncFeatureViewRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SyncFeatureViewResponse>;
  /** Gets details of a single FeatureViewSync. */
  getFeatureViewSync(
    request: DeepPartial<GetFeatureViewSyncRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FeatureViewSync>;
  /** Lists FeatureViewSyncs in a given FeatureView. */
  listFeatureViewSyncs(
    request: DeepPartial<ListFeatureViewSyncsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFeatureViewSyncsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
