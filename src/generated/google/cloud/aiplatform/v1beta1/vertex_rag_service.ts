// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/vertex_rag_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/** A query to retrieve relevant contexts. */
export interface RagQuery {
  /** Optional. The query in text format to get relevant contexts. */
  text?:
    | string
    | undefined;
  /** Optional. The number of contexts to retrieve. */
  similarityTopK: number;
  /** Optional. Configurations for hybrid search results ranking. */
  ranking: RagQuery_Ranking | undefined;
}

/** Configurations for hybrid search results ranking. */
export interface RagQuery_Ranking {
  /**
   * Optional. Alpha value controls the weight between dense and sparse vector
   * search results. The range is [0, 1], while 0 means sparse vector search
   * only and 1 means dense vector search only. The default value is 0.5 which
   * balances sparse and dense vector search equally.
   */
  alpha?: number | undefined;
}

/**
 * Request message for
 * [VertexRagService.RetrieveContexts][google.cloud.aiplatform.v1beta1.VertexRagService.RetrieveContexts].
 */
export interface RetrieveContextsRequest {
  /** The data source for Vertex RagStore. */
  vertexRagStore?:
    | RetrieveContextsRequest_VertexRagStore
    | undefined;
  /**
   * Required. The resource name of the Location from which to retrieve
   * RagContexts. The users must have permission to make a call in the project.
   * Format:
   * `projects/{project}/locations/{location}`.
   */
  parent: string;
  /** Required. Single RAG retrieve query. */
  query: RagQuery | undefined;
}

/** The data source for Vertex RagStore. */
export interface RetrieveContextsRequest_VertexRagStore {
  /**
   * Optional. Deprecated. Please use rag_resources to specify the data
   * source.
   *
   * @deprecated
   */
  ragCorpora: string[];
  /**
   * Optional. The representation of the rag source. It can be used to specify
   * corpus only or ragfiles. Currently only support one corpus or multiple
   * files from one corpus. In the future we may open up multiple corpora
   * support.
   */
  ragResources: RetrieveContextsRequest_VertexRagStore_RagResource[];
  /**
   * Optional. Only return contexts with vector distance smaller than the
   * threshold.
   */
  vectorDistanceThreshold?: number | undefined;
}

/** The definition of the Rag resource. */
export interface RetrieveContextsRequest_VertexRagStore_RagResource {
  /**
   * Optional. RagCorpora resource name.
   * Format:
   * `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}`
   */
  ragCorpus: string;
  /**
   * Optional. rag_file_id. The files should be in the same rag_corpus set
   * in rag_corpus field.
   */
  ragFileIds: string[];
}

/** Relevant contexts for one query. */
export interface RagContexts {
  /** All its contexts. */
  contexts: RagContexts_Context[];
}

/** A context of the query. */
export interface RagContexts_Context {
  /**
   * For vertex RagStore, if the file is imported from Cloud Storage or Google
   * Drive, source_uri will be original file URI in Cloud Storage or Google
   * Drive; if file is uploaded, source_uri will be file display name.
   */
  sourceUri: string;
  /** The text chunk. */
  text: string;
  /**
   * The distance between the query dense embedding vector and the context
   * text vector.
   */
  distance: number;
  /**
   * The distance between the query sparse embedding vector and the context
   * text vector.
   */
  sparseDistance: number;
}

/**
 * Response message for
 * [VertexRagService.RetrieveContexts][google.cloud.aiplatform.v1beta1.VertexRagService.RetrieveContexts].
 */
export interface RetrieveContextsResponse {
  /** The contexts of the query. */
  contexts: RagContexts | undefined;
}

function createBaseRagQuery(): RagQuery {
  return { text: undefined, similarityTopK: 0, ranking: undefined };
}

export const RagQuery: MessageFns<RagQuery> = {
  encode(message: RagQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    if (message.similarityTopK !== 0) {
      writer.uint32(16).int32(message.similarityTopK);
    }
    if (message.ranking !== undefined) {
      RagQuery_Ranking.encode(message.ranking, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RagQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRagQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.similarityTopK = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ranking = RagQuery_Ranking.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RagQuery {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      similarityTopK: isSet(object.similarityTopK) ? globalThis.Number(object.similarityTopK) : 0,
      ranking: isSet(object.ranking) ? RagQuery_Ranking.fromJSON(object.ranking) : undefined,
    };
  },

  toJSON(message: RagQuery): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.similarityTopK !== 0) {
      obj.similarityTopK = Math.round(message.similarityTopK);
    }
    if (message.ranking !== undefined) {
      obj.ranking = RagQuery_Ranking.toJSON(message.ranking);
    }
    return obj;
  },

  create(base?: DeepPartial<RagQuery>): RagQuery {
    return RagQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RagQuery>): RagQuery {
    const message = createBaseRagQuery();
    message.text = object.text ?? undefined;
    message.similarityTopK = object.similarityTopK ?? 0;
    message.ranking = (object.ranking !== undefined && object.ranking !== null)
      ? RagQuery_Ranking.fromPartial(object.ranking)
      : undefined;
    return message;
  },
};

function createBaseRagQuery_Ranking(): RagQuery_Ranking {
  return { alpha: undefined };
}

export const RagQuery_Ranking: MessageFns<RagQuery_Ranking> = {
  encode(message: RagQuery_Ranking, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.alpha !== undefined) {
      writer.uint32(13).float(message.alpha);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RagQuery_Ranking {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRagQuery_Ranking();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.alpha = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RagQuery_Ranking {
    return { alpha: isSet(object.alpha) ? globalThis.Number(object.alpha) : undefined };
  },

  toJSON(message: RagQuery_Ranking): unknown {
    const obj: any = {};
    if (message.alpha !== undefined) {
      obj.alpha = message.alpha;
    }
    return obj;
  },

  create(base?: DeepPartial<RagQuery_Ranking>): RagQuery_Ranking {
    return RagQuery_Ranking.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RagQuery_Ranking>): RagQuery_Ranking {
    const message = createBaseRagQuery_Ranking();
    message.alpha = object.alpha ?? undefined;
    return message;
  },
};

function createBaseRetrieveContextsRequest(): RetrieveContextsRequest {
  return { vertexRagStore: undefined, parent: "", query: undefined };
}

export const RetrieveContextsRequest: MessageFns<RetrieveContextsRequest> = {
  encode(message: RetrieveContextsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vertexRagStore !== undefined) {
      RetrieveContextsRequest_VertexRagStore.encode(message.vertexRagStore, writer.uint32(18).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.query !== undefined) {
      RagQuery.encode(message.query, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveContextsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveContextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vertexRagStore = RetrieveContextsRequest_VertexRagStore.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.query = RagQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveContextsRequest {
    return {
      vertexRagStore: isSet(object.vertexRagStore)
        ? RetrieveContextsRequest_VertexRagStore.fromJSON(object.vertexRagStore)
        : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      query: isSet(object.query) ? RagQuery.fromJSON(object.query) : undefined,
    };
  },

  toJSON(message: RetrieveContextsRequest): unknown {
    const obj: any = {};
    if (message.vertexRagStore !== undefined) {
      obj.vertexRagStore = RetrieveContextsRequest_VertexRagStore.toJSON(message.vertexRagStore);
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.query !== undefined) {
      obj.query = RagQuery.toJSON(message.query);
    }
    return obj;
  },

  create(base?: DeepPartial<RetrieveContextsRequest>): RetrieveContextsRequest {
    return RetrieveContextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RetrieveContextsRequest>): RetrieveContextsRequest {
    const message = createBaseRetrieveContextsRequest();
    message.vertexRagStore = (object.vertexRagStore !== undefined && object.vertexRagStore !== null)
      ? RetrieveContextsRequest_VertexRagStore.fromPartial(object.vertexRagStore)
      : undefined;
    message.parent = object.parent ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? RagQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseRetrieveContextsRequest_VertexRagStore(): RetrieveContextsRequest_VertexRagStore {
  return { ragCorpora: [], ragResources: [], vectorDistanceThreshold: undefined };
}

export const RetrieveContextsRequest_VertexRagStore: MessageFns<RetrieveContextsRequest_VertexRagStore> = {
  encode(message: RetrieveContextsRequest_VertexRagStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ragCorpora) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.ragResources) {
      RetrieveContextsRequest_VertexRagStore_RagResource.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.vectorDistanceThreshold !== undefined) {
      writer.uint32(17).double(message.vectorDistanceThreshold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveContextsRequest_VertexRagStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveContextsRequest_VertexRagStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ragCorpora.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ragResources.push(RetrieveContextsRequest_VertexRagStore_RagResource.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.vectorDistanceThreshold = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveContextsRequest_VertexRagStore {
    return {
      ragCorpora: globalThis.Array.isArray(object?.ragCorpora)
        ? object.ragCorpora.map((e: any) => globalThis.String(e))
        : [],
      ragResources: globalThis.Array.isArray(object?.ragResources)
        ? object.ragResources.map((e: any) => RetrieveContextsRequest_VertexRagStore_RagResource.fromJSON(e))
        : [],
      vectorDistanceThreshold: isSet(object.vectorDistanceThreshold)
        ? globalThis.Number(object.vectorDistanceThreshold)
        : undefined,
    };
  },

  toJSON(message: RetrieveContextsRequest_VertexRagStore): unknown {
    const obj: any = {};
    if (message.ragCorpora?.length) {
      obj.ragCorpora = message.ragCorpora;
    }
    if (message.ragResources?.length) {
      obj.ragResources = message.ragResources.map((e) => RetrieveContextsRequest_VertexRagStore_RagResource.toJSON(e));
    }
    if (message.vectorDistanceThreshold !== undefined) {
      obj.vectorDistanceThreshold = message.vectorDistanceThreshold;
    }
    return obj;
  },

  create(base?: DeepPartial<RetrieveContextsRequest_VertexRagStore>): RetrieveContextsRequest_VertexRagStore {
    return RetrieveContextsRequest_VertexRagStore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RetrieveContextsRequest_VertexRagStore>): RetrieveContextsRequest_VertexRagStore {
    const message = createBaseRetrieveContextsRequest_VertexRagStore();
    message.ragCorpora = object.ragCorpora?.map((e) => e) || [];
    message.ragResources =
      object.ragResources?.map((e) => RetrieveContextsRequest_VertexRagStore_RagResource.fromPartial(e)) || [];
    message.vectorDistanceThreshold = object.vectorDistanceThreshold ?? undefined;
    return message;
  },
};

function createBaseRetrieveContextsRequest_VertexRagStore_RagResource(): RetrieveContextsRequest_VertexRagStore_RagResource {
  return { ragCorpus: "", ragFileIds: [] };
}

export const RetrieveContextsRequest_VertexRagStore_RagResource: MessageFns<
  RetrieveContextsRequest_VertexRagStore_RagResource
> = {
  encode(
    message: RetrieveContextsRequest_VertexRagStore_RagResource,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.ragCorpus !== "") {
      writer.uint32(10).string(message.ragCorpus);
    }
    for (const v of message.ragFileIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveContextsRequest_VertexRagStore_RagResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveContextsRequest_VertexRagStore_RagResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ragCorpus = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ragFileIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveContextsRequest_VertexRagStore_RagResource {
    return {
      ragCorpus: isSet(object.ragCorpus) ? globalThis.String(object.ragCorpus) : "",
      ragFileIds: globalThis.Array.isArray(object?.ragFileIds)
        ? object.ragFileIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RetrieveContextsRequest_VertexRagStore_RagResource): unknown {
    const obj: any = {};
    if (message.ragCorpus !== "") {
      obj.ragCorpus = message.ragCorpus;
    }
    if (message.ragFileIds?.length) {
      obj.ragFileIds = message.ragFileIds;
    }
    return obj;
  },

  create(
    base?: DeepPartial<RetrieveContextsRequest_VertexRagStore_RagResource>,
  ): RetrieveContextsRequest_VertexRagStore_RagResource {
    return RetrieveContextsRequest_VertexRagStore_RagResource.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RetrieveContextsRequest_VertexRagStore_RagResource>,
  ): RetrieveContextsRequest_VertexRagStore_RagResource {
    const message = createBaseRetrieveContextsRequest_VertexRagStore_RagResource();
    message.ragCorpus = object.ragCorpus ?? "";
    message.ragFileIds = object.ragFileIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseRagContexts(): RagContexts {
  return { contexts: [] };
}

export const RagContexts: MessageFns<RagContexts> = {
  encode(message: RagContexts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.contexts) {
      RagContexts_Context.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RagContexts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRagContexts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contexts.push(RagContexts_Context.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RagContexts {
    return {
      contexts: globalThis.Array.isArray(object?.contexts)
        ? object.contexts.map((e: any) => RagContexts_Context.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RagContexts): unknown {
    const obj: any = {};
    if (message.contexts?.length) {
      obj.contexts = message.contexts.map((e) => RagContexts_Context.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RagContexts>): RagContexts {
    return RagContexts.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RagContexts>): RagContexts {
    const message = createBaseRagContexts();
    message.contexts = object.contexts?.map((e) => RagContexts_Context.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRagContexts_Context(): RagContexts_Context {
  return { sourceUri: "", text: "", distance: 0, sparseDistance: 0 };
}

export const RagContexts_Context: MessageFns<RagContexts_Context> = {
  encode(message: RagContexts_Context, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceUri !== "") {
      writer.uint32(10).string(message.sourceUri);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.distance !== 0) {
      writer.uint32(25).double(message.distance);
    }
    if (message.sparseDistance !== 0) {
      writer.uint32(33).double(message.sparseDistance);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RagContexts_Context {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRagContexts_Context();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sourceUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.distance = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.sparseDistance = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RagContexts_Context {
    return {
      sourceUri: isSet(object.sourceUri) ? globalThis.String(object.sourceUri) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      distance: isSet(object.distance) ? globalThis.Number(object.distance) : 0,
      sparseDistance: isSet(object.sparseDistance) ? globalThis.Number(object.sparseDistance) : 0,
    };
  },

  toJSON(message: RagContexts_Context): unknown {
    const obj: any = {};
    if (message.sourceUri !== "") {
      obj.sourceUri = message.sourceUri;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.distance !== 0) {
      obj.distance = message.distance;
    }
    if (message.sparseDistance !== 0) {
      obj.sparseDistance = message.sparseDistance;
    }
    return obj;
  },

  create(base?: DeepPartial<RagContexts_Context>): RagContexts_Context {
    return RagContexts_Context.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RagContexts_Context>): RagContexts_Context {
    const message = createBaseRagContexts_Context();
    message.sourceUri = object.sourceUri ?? "";
    message.text = object.text ?? "";
    message.distance = object.distance ?? 0;
    message.sparseDistance = object.sparseDistance ?? 0;
    return message;
  },
};

function createBaseRetrieveContextsResponse(): RetrieveContextsResponse {
  return { contexts: undefined };
}

export const RetrieveContextsResponse: MessageFns<RetrieveContextsResponse> = {
  encode(message: RetrieveContextsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contexts !== undefined) {
      RagContexts.encode(message.contexts, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveContextsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveContextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contexts = RagContexts.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveContextsResponse {
    return { contexts: isSet(object.contexts) ? RagContexts.fromJSON(object.contexts) : undefined };
  },

  toJSON(message: RetrieveContextsResponse): unknown {
    const obj: any = {};
    if (message.contexts !== undefined) {
      obj.contexts = RagContexts.toJSON(message.contexts);
    }
    return obj;
  },

  create(base?: DeepPartial<RetrieveContextsResponse>): RetrieveContextsResponse {
    return RetrieveContextsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RetrieveContextsResponse>): RetrieveContextsResponse {
    const message = createBaseRetrieveContextsResponse();
    message.contexts = (object.contexts !== undefined && object.contexts !== null)
      ? RagContexts.fromPartial(object.contexts)
      : undefined;
    return message;
  },
};

/** A service for retrieving relevant contexts. */
export type VertexRagServiceDefinition = typeof VertexRagServiceDefinition;
export const VertexRagServiceDefinition = {
  name: "VertexRagService",
  fullName: "google.cloud.aiplatform.v1beta1.VertexRagService",
  methods: {
    /** Retrieves relevant contexts for a query. */
    retrieveContexts: {
      name: "RetrieveContexts",
      requestType: RetrieveContextsRequest,
      requestStream: false,
      responseType: RetrieveContextsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([12, 112, 97, 114, 101, 110, 116, 44, 113, 117, 101, 114, 121])],
          578365826: [
            Buffer.from([
              62,
              58,
              1,
              42,
              34,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              67,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VertexRagServiceImplementation<CallContextExt = {}> {
  /** Retrieves relevant contexts for a query. */
  retrieveContexts(
    request: RetrieveContextsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RetrieveContextsResponse>>;
}

export interface VertexRagServiceClient<CallOptionsExt = {}> {
  /** Retrieves relevant contexts for a query. */
  retrieveContexts(
    request: DeepPartial<RetrieveContextsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RetrieveContextsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
