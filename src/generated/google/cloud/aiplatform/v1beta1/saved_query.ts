// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/saved_query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * A SavedQuery is a view of the dataset. It references a subset of annotations
 * by problem type and filters.
 */
export interface SavedQuery {
  /** Output only. Resource name of the SavedQuery. */
  name: string;
  /**
   * Required. The user-defined name of the SavedQuery.
   * The name can be up to 128 characters long and can consist of any UTF-8
   * characters.
   */
  displayName: string;
  /** Some additional information about the SavedQuery. */
  metadata:
    | any
    | undefined;
  /** Output only. Timestamp when this SavedQuery was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when SavedQuery was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Output only. Filters on the Annotations in the dataset. */
  annotationFilter: string;
  /**
   * Required. Problem type of the SavedQuery.
   * Allowed values:
   *
   * * IMAGE_CLASSIFICATION_SINGLE_LABEL
   * * IMAGE_CLASSIFICATION_MULTI_LABEL
   * * IMAGE_BOUNDING_POLY
   * * IMAGE_BOUNDING_BOX
   * * TEXT_CLASSIFICATION_SINGLE_LABEL
   * * TEXT_CLASSIFICATION_MULTI_LABEL
   * * TEXT_EXTRACTION
   * * TEXT_SENTIMENT
   * * VIDEO_CLASSIFICATION
   * * VIDEO_OBJECT_TRACKING
   */
  problemType: string;
  /** Output only. Number of AnnotationSpecs in the context of the SavedQuery. */
  annotationSpecCount: number;
  /**
   * Used to perform a consistent read-modify-write update. If not set, a blind
   * "overwrite" update happens.
   */
  etag: string;
  /**
   * Output only. If the Annotations belonging to the SavedQuery can be used for
   * AutoML training.
   */
  supportAutomlTraining: boolean;
}

function createBaseSavedQuery(): SavedQuery {
  return {
    name: "",
    displayName: "",
    metadata: undefined,
    createTime: undefined,
    updateTime: undefined,
    annotationFilter: "",
    problemType: "",
    annotationSpecCount: 0,
    etag: "",
    supportAutomlTraining: false,
  };
}

export const SavedQuery: MessageFns<SavedQuery> = {
  encode(message: SavedQuery, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.metadata !== undefined) {
      Value.encode(Value.wrap(message.metadata), writer.uint32(98).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.annotationFilter !== "") {
      writer.uint32(42).string(message.annotationFilter);
    }
    if (message.problemType !== "") {
      writer.uint32(50).string(message.problemType);
    }
    if (message.annotationSpecCount !== 0) {
      writer.uint32(80).int32(message.annotationSpecCount);
    }
    if (message.etag !== "") {
      writer.uint32(66).string(message.etag);
    }
    if (message.supportAutomlTraining !== false) {
      writer.uint32(72).bool(message.supportAutomlTraining);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SavedQuery {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSavedQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.metadata = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.annotationFilter = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.problemType = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.annotationSpecCount = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.supportAutomlTraining = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SavedQuery {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      metadata: isSet(object?.metadata) ? object.metadata : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      annotationFilter: isSet(object.annotationFilter) ? globalThis.String(object.annotationFilter) : "",
      problemType: isSet(object.problemType) ? globalThis.String(object.problemType) : "",
      annotationSpecCount: isSet(object.annotationSpecCount) ? globalThis.Number(object.annotationSpecCount) : 0,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      supportAutomlTraining: isSet(object.supportAutomlTraining)
        ? globalThis.Boolean(object.supportAutomlTraining)
        : false,
    };
  },

  toJSON(message: SavedQuery): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.annotationFilter !== "") {
      obj.annotationFilter = message.annotationFilter;
    }
    if (message.problemType !== "") {
      obj.problemType = message.problemType;
    }
    if (message.annotationSpecCount !== 0) {
      obj.annotationSpecCount = Math.round(message.annotationSpecCount);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.supportAutomlTraining !== false) {
      obj.supportAutomlTraining = message.supportAutomlTraining;
    }
    return obj;
  },

  create(base?: DeepPartial<SavedQuery>): SavedQuery {
    return SavedQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SavedQuery>): SavedQuery {
    const message = createBaseSavedQuery();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.metadata = object.metadata ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.annotationFilter = object.annotationFilter ?? "";
    message.problemType = object.problemType ?? "";
    message.annotationSpecCount = object.annotationSpecCount ?? 0;
    message.etag = object.etag ?? "";
    message.supportAutomlTraining = object.supportAutomlTraining ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
