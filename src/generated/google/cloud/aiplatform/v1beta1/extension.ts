// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/extension.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { FunctionDeclaration, ToolUseExample } from "./tool.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/** Enum of location an HTTP element can be. */
export enum HttpElementLocation {
  HTTP_IN_UNSPECIFIED = 0,
  /** HTTP_IN_QUERY - Element is in the HTTP request query. */
  HTTP_IN_QUERY = 1,
  /** HTTP_IN_HEADER - Element is in the HTTP request header. */
  HTTP_IN_HEADER = 2,
  /** HTTP_IN_PATH - Element is in the HTTP request path. */
  HTTP_IN_PATH = 3,
  /** HTTP_IN_BODY - Element is in the HTTP request body. */
  HTTP_IN_BODY = 4,
  /** HTTP_IN_COOKIE - Element is in the HTTP request cookie. */
  HTTP_IN_COOKIE = 5,
  UNRECOGNIZED = -1,
}

export function httpElementLocationFromJSON(object: any): HttpElementLocation {
  switch (object) {
    case 0:
    case "HTTP_IN_UNSPECIFIED":
      return HttpElementLocation.HTTP_IN_UNSPECIFIED;
    case 1:
    case "HTTP_IN_QUERY":
      return HttpElementLocation.HTTP_IN_QUERY;
    case 2:
    case "HTTP_IN_HEADER":
      return HttpElementLocation.HTTP_IN_HEADER;
    case 3:
    case "HTTP_IN_PATH":
      return HttpElementLocation.HTTP_IN_PATH;
    case 4:
    case "HTTP_IN_BODY":
      return HttpElementLocation.HTTP_IN_BODY;
    case 5:
    case "HTTP_IN_COOKIE":
      return HttpElementLocation.HTTP_IN_COOKIE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HttpElementLocation.UNRECOGNIZED;
  }
}

export function httpElementLocationToJSON(object: HttpElementLocation): string {
  switch (object) {
    case HttpElementLocation.HTTP_IN_UNSPECIFIED:
      return "HTTP_IN_UNSPECIFIED";
    case HttpElementLocation.HTTP_IN_QUERY:
      return "HTTP_IN_QUERY";
    case HttpElementLocation.HTTP_IN_HEADER:
      return "HTTP_IN_HEADER";
    case HttpElementLocation.HTTP_IN_PATH:
      return "HTTP_IN_PATH";
    case HttpElementLocation.HTTP_IN_BODY:
      return "HTTP_IN_BODY";
    case HttpElementLocation.HTTP_IN_COOKIE:
      return "HTTP_IN_COOKIE";
    case HttpElementLocation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Type of Auth. */
export enum AuthType {
  AUTH_TYPE_UNSPECIFIED = 0,
  /** NO_AUTH - No Auth. */
  NO_AUTH = 1,
  /** API_KEY_AUTH - API Key Auth. */
  API_KEY_AUTH = 2,
  /** HTTP_BASIC_AUTH - HTTP Basic Auth. */
  HTTP_BASIC_AUTH = 3,
  /** GOOGLE_SERVICE_ACCOUNT_AUTH - Google Service Account Auth. */
  GOOGLE_SERVICE_ACCOUNT_AUTH = 4,
  /** OAUTH - OAuth auth. */
  OAUTH = 6,
  /** OIDC_AUTH - OpenID Connect (OIDC) Auth. */
  OIDC_AUTH = 8,
  UNRECOGNIZED = -1,
}

export function authTypeFromJSON(object: any): AuthType {
  switch (object) {
    case 0:
    case "AUTH_TYPE_UNSPECIFIED":
      return AuthType.AUTH_TYPE_UNSPECIFIED;
    case 1:
    case "NO_AUTH":
      return AuthType.NO_AUTH;
    case 2:
    case "API_KEY_AUTH":
      return AuthType.API_KEY_AUTH;
    case 3:
    case "HTTP_BASIC_AUTH":
      return AuthType.HTTP_BASIC_AUTH;
    case 4:
    case "GOOGLE_SERVICE_ACCOUNT_AUTH":
      return AuthType.GOOGLE_SERVICE_ACCOUNT_AUTH;
    case 6:
    case "OAUTH":
      return AuthType.OAUTH;
    case 8:
    case "OIDC_AUTH":
      return AuthType.OIDC_AUTH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AuthType.UNRECOGNIZED;
  }
}

export function authTypeToJSON(object: AuthType): string {
  switch (object) {
    case AuthType.AUTH_TYPE_UNSPECIFIED:
      return "AUTH_TYPE_UNSPECIFIED";
    case AuthType.NO_AUTH:
      return "NO_AUTH";
    case AuthType.API_KEY_AUTH:
      return "API_KEY_AUTH";
    case AuthType.HTTP_BASIC_AUTH:
      return "HTTP_BASIC_AUTH";
    case AuthType.GOOGLE_SERVICE_ACCOUNT_AUTH:
      return "GOOGLE_SERVICE_ACCOUNT_AUTH";
    case AuthType.OAUTH:
      return "OAUTH";
    case AuthType.OIDC_AUTH:
      return "OIDC_AUTH";
    case AuthType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Extensions are tools for large language models to access external data, run
 * computations, etc.
 */
export interface Extension {
  /** Identifier. The resource name of the Extension. */
  name: string;
  /**
   * Required. The display name of the Extension.
   * The name can be up to 128 characters long and can consist of any UTF-8
   * characters.
   */
  displayName: string;
  /** Optional. The description of the Extension. */
  description: string;
  /** Output only. Timestamp when this Extension was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. Timestamp when this Extension was most recently updated. */
  updateTime:
    | Date
    | undefined;
  /**
   * Optional. Used to perform consistent read-modify-write updates. If not set,
   * a blind "overwrite" update happens.
   */
  etag: string;
  /** Required. Manifest of the Extension. */
  manifest:
    | ExtensionManifest
    | undefined;
  /** Output only. Supported operations. */
  extensionOperations: ExtensionOperation[];
  /**
   * Optional. Runtime config controlling the runtime behavior of this
   * Extension.
   */
  runtimeConfig:
    | RuntimeConfig
    | undefined;
  /** Optional. Examples to illustrate the usage of the extension as a tool. */
  toolUseExamples: ToolUseExample[];
  /**
   * Optional. The PrivateServiceConnect config for the extension.
   * If specified, the service endpoints associated with the
   * Extension should be registered with private network access in the provided
   * Service Directory
   * (https://cloud.google.com/service-directory/docs/configuring-private-network-access).
   *
   * If the service contains more than one endpoint with a network, the service
   * will arbitrarilty choose one of the endpoints to use for extension
   * execution.
   */
  privateServiceConnectConfig: ExtensionPrivateServiceConnectConfig | undefined;
}

/** Manifest spec of an Extension needed for runtime execution. */
export interface ExtensionManifest {
  /**
   * Required. Extension name shown to the LLM.
   * The name can be up to 128 characters long.
   */
  name: string;
  /**
   * Required. The natural language description shown to the LLM.
   * It should describe the usage of the extension, and is essential for the LLM
   * to perform reasoning. e.g., if the extension is a data store, you can let
   * the LLM know what data it contains.
   */
  description: string;
  /** Required. Immutable. The API specification shown to the LLM. */
  apiSpec:
    | ExtensionManifest_ApiSpec
    | undefined;
  /** Required. Immutable. Type of auth supported by this extension. */
  authConfig: AuthConfig | undefined;
}

/** The API specification shown to the LLM. */
export interface ExtensionManifest_ApiSpec {
  /** The API spec in Open API standard and YAML format. */
  openApiYaml?:
    | string
    | undefined;
  /** Cloud Storage URI pointing to the OpenAPI spec. */
  openApiGcsUri?: string | undefined;
}

/** Operation of an extension. */
export interface ExtensionOperation {
  /**
   * Operation ID that uniquely identifies the operations among the extension.
   * See: "Operation Object" in https://swagger.io/specification/.
   *
   * This field is parsed from the OpenAPI spec. For HTTP extensions, if it does
   * not exist in the spec, we will generate one from the HTTP method and path.
   */
  operationId: string;
  /**
   * Output only. Structured representation of a function declaration as defined
   * by the OpenAPI Spec.
   */
  functionDeclaration: FunctionDeclaration | undefined;
}

/** Auth configuration to run the extension. */
export interface AuthConfig {
  /** Config for API key auth. */
  apiKeyConfig?:
    | AuthConfig_ApiKeyConfig
    | undefined;
  /** Config for HTTP Basic auth. */
  httpBasicAuthConfig?:
    | AuthConfig_HttpBasicAuthConfig
    | undefined;
  /** Config for Google Service Account auth. */
  googleServiceAccountConfig?:
    | AuthConfig_GoogleServiceAccountConfig
    | undefined;
  /** Config for user oauth. */
  oauthConfig?:
    | AuthConfig_OauthConfig
    | undefined;
  /** Config for user OIDC auth. */
  oidcConfig?:
    | AuthConfig_OidcConfig
    | undefined;
  /** Type of auth scheme. */
  authType: AuthType;
}

/** Config for authentication with API key. */
export interface AuthConfig_ApiKeyConfig {
  /**
   * Required. The parameter name of the API key.
   * E.g. If the API request is "https://example.com/act?api_key=<API KEY>",
   * "api_key" would be the parameter name.
   */
  name: string;
  /**
   * Required. The name of the SecretManager secret version resource storing
   * the API key. Format:
   * `projects/{project}/secrets/{secrete}/versions/{version}`
   *
   * - If specified, the `secretmanager.versions.access` permission should be
   * granted to Vertex AI Extension Service Agent
   * (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents)
   * on the specified resource.
   */
  apiKeySecret: string;
  /** Required. The location of the API key. */
  httpElementLocation: HttpElementLocation;
}

/** Config for HTTP Basic Authentication. */
export interface AuthConfig_HttpBasicAuthConfig {
  /**
   * Required. The name of the SecretManager secret version resource storing
   * the base64 encoded credentials. Format:
   * `projects/{project}/secrets/{secrete}/versions/{version}`
   *
   * - If specified, the `secretmanager.versions.access` permission should be
   * granted to Vertex AI Extension Service Agent
   * (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents)
   * on the specified resource.
   */
  credentialSecret: string;
}

/** Config for Google Service Account Authentication. */
export interface AuthConfig_GoogleServiceAccountConfig {
  /**
   * Optional. The service account that the extension execution service runs
   * as.
   *
   * - If the service account is specified,
   * the `iam.serviceAccounts.getAccessToken` permission should be granted to
   * Vertex AI Extension Service Agent
   * (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents)
   * on the specified service account.
   *
   * - If not specified, the Vertex AI Extension Service Agent
   * will be used to execute the Extension.
   */
  serviceAccount: string;
}

/** Config for user oauth. */
export interface AuthConfig_OauthConfig {
  /**
   * Access token for extension endpoint.
   * Only used to propagate token from
   * [[ExecuteExtensionRequest.runtime_auth_config]] at request time.
   */
  accessToken?:
    | string
    | undefined;
  /**
   * The service account used to generate access tokens for executing the
   * Extension.
   *
   * - If the service account is specified,
   * the `iam.serviceAccounts.getAccessToken` permission should be granted
   * to Vertex AI Extension Service Agent
   * (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents)
   * on the provided service account.
   */
  serviceAccount?: string | undefined;
}

/** Config for user OIDC auth. */
export interface AuthConfig_OidcConfig {
  /**
   * OpenID Connect formatted ID token for extension endpoint.
   * Only used to propagate token from
   * [[ExecuteExtensionRequest.runtime_auth_config]] at request time.
   */
  idToken?:
    | string
    | undefined;
  /**
   * The service account used to generate an OpenID Connect
   * (OIDC)-compatible JWT token signed by the Google OIDC Provider
   * (accounts.google.com) for extension endpoint
   * (https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-oidc).
   *
   * - The audience for the token will be set to the URL in the server url
   * defined in the OpenApi spec.
   *
   * - If the service account is provided, the service account should grant
   * `iam.serviceAccounts.getOpenIdToken` permission to Vertex AI Extension
   * Service Agent
   * (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents).
   */
  serviceAccount?: string | undefined;
}

/** Runtime configuration to run the extension. */
export interface RuntimeConfig {
  /** Code execution runtime configurations for code interpreter extension. */
  codeInterpreterRuntimeConfig?:
    | RuntimeConfig_CodeInterpreterRuntimeConfig
    | undefined;
  /** Runtime configuration for Vertex AI Search extension. */
  vertexAiSearchRuntimeConfig?:
    | RuntimeConfig_VertexAISearchRuntimeConfig
    | undefined;
  /**
   * Optional. Default parameters that will be set for all the execution of this
   * extension. If specified, the parameter values can be overridden by values
   * in [[ExecuteExtensionRequest.operation_params]] at request time.
   *
   * The struct should be in a form of map with param name as the key and actual
   * param value as the value.
   * E.g. If this operation requires a param "name" to be set to "abc". you can
   * set this to something like {"name": "abc"}.
   */
  defaultParams: { [key: string]: any } | undefined;
}

export interface RuntimeConfig_CodeInterpreterRuntimeConfig {
  /**
   * Optional. The Cloud Storage bucket for file input of this Extension.
   * If specified, support input from the Cloud Storage bucket.
   * Vertex Extension Custom Code Service Agent should be granted
   * file reader to this bucket.
   * If not specified, the extension will only accept file contents from
   * request body and reject Cloud Storage file inputs.
   */
  fileInputGcsBucket: string;
  /**
   * Optional. The Cloud Storage bucket for file output of this Extension.
   * If specified, write all output files to the Cloud Storage bucket.
   * Vertex Extension Custom Code Service Agent should be granted
   * file writer to this bucket.
   * If not specified, the file content will be output in response body.
   */
  fileOutputGcsBucket: string;
}

export interface RuntimeConfig_VertexAISearchRuntimeConfig {
  /**
   * Optional. Vertex AI Search serving config name. Format:
   * `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/servingConfigs/{serving_config}`
   */
  servingConfigName: string;
  /**
   * Optional. Vertex AI Search engine ID. This is used to construct the
   * search request. By setting this engine_id, API will construct the serving
   * config using the default value to call search API for the user. The
   * engine_id and serving_config_name cannot both be empty at the same time.
   */
  engineId: string;
}

/** PrivateExtensionConfig configuration for the extension. */
export interface ExtensionPrivateServiceConnectConfig {
  /**
   * Required. The Service Directory resource name in which the service
   * endpoints associated to the extension are registered. Format:
   * `projects/{project_id}/locations/{location_id}/namespaces/{namespace_id}/services/{service_id}`
   *
   * - The Vertex AI Extension Service Agent
   * (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents)
   * should be granted `servicedirectory.viewer` and
   * `servicedirectory.pscAuthorizedService` roles on the resource.
   */
  serviceDirectory: string;
}

function createBaseExtension(): Extension {
  return {
    name: "",
    displayName: "",
    description: "",
    createTime: undefined,
    updateTime: undefined,
    etag: "",
    manifest: undefined,
    extensionOperations: [],
    runtimeConfig: undefined,
    toolUseExamples: [],
    privateServiceConnectConfig: undefined,
  };
}

export const Extension: MessageFns<Extension> = {
  encode(message: Extension, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(58).string(message.etag);
    }
    if (message.manifest !== undefined) {
      ExtensionManifest.encode(message.manifest, writer.uint32(74).fork()).join();
    }
    for (const v of message.extensionOperations) {
      ExtensionOperation.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.runtimeConfig !== undefined) {
      RuntimeConfig.encode(message.runtimeConfig, writer.uint32(106).fork()).join();
    }
    for (const v of message.toolUseExamples) {
      ToolUseExample.encode(v!, writer.uint32(122).fork()).join();
    }
    if (message.privateServiceConnectConfig !== undefined) {
      ExtensionPrivateServiceConnectConfig.encode(message.privateServiceConnectConfig, writer.uint32(130).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Extension {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.manifest = ExtensionManifest.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.extensionOperations.push(ExtensionOperation.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.runtimeConfig = RuntimeConfig.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.toolUseExamples.push(ToolUseExample.decode(reader, reader.uint32()));
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.privateServiceConnectConfig = ExtensionPrivateServiceConnectConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Extension {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      manifest: isSet(object.manifest) ? ExtensionManifest.fromJSON(object.manifest) : undefined,
      extensionOperations: globalThis.Array.isArray(object?.extensionOperations)
        ? object.extensionOperations.map((e: any) => ExtensionOperation.fromJSON(e))
        : [],
      runtimeConfig: isSet(object.runtimeConfig) ? RuntimeConfig.fromJSON(object.runtimeConfig) : undefined,
      toolUseExamples: globalThis.Array.isArray(object?.toolUseExamples)
        ? object.toolUseExamples.map((e: any) => ToolUseExample.fromJSON(e))
        : [],
      privateServiceConnectConfig: isSet(object.privateServiceConnectConfig)
        ? ExtensionPrivateServiceConnectConfig.fromJSON(object.privateServiceConnectConfig)
        : undefined,
    };
  },

  toJSON(message: Extension): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.manifest !== undefined) {
      obj.manifest = ExtensionManifest.toJSON(message.manifest);
    }
    if (message.extensionOperations?.length) {
      obj.extensionOperations = message.extensionOperations.map((e) => ExtensionOperation.toJSON(e));
    }
    if (message.runtimeConfig !== undefined) {
      obj.runtimeConfig = RuntimeConfig.toJSON(message.runtimeConfig);
    }
    if (message.toolUseExamples?.length) {
      obj.toolUseExamples = message.toolUseExamples.map((e) => ToolUseExample.toJSON(e));
    }
    if (message.privateServiceConnectConfig !== undefined) {
      obj.privateServiceConnectConfig = ExtensionPrivateServiceConnectConfig.toJSON(
        message.privateServiceConnectConfig,
      );
    }
    return obj;
  },

  create(base?: DeepPartial<Extension>): Extension {
    return Extension.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Extension>): Extension {
    const message = createBaseExtension();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.etag = object.etag ?? "";
    message.manifest = (object.manifest !== undefined && object.manifest !== null)
      ? ExtensionManifest.fromPartial(object.manifest)
      : undefined;
    message.extensionOperations = object.extensionOperations?.map((e) => ExtensionOperation.fromPartial(e)) || [];
    message.runtimeConfig = (object.runtimeConfig !== undefined && object.runtimeConfig !== null)
      ? RuntimeConfig.fromPartial(object.runtimeConfig)
      : undefined;
    message.toolUseExamples = object.toolUseExamples?.map((e) => ToolUseExample.fromPartial(e)) || [];
    message.privateServiceConnectConfig =
      (object.privateServiceConnectConfig !== undefined && object.privateServiceConnectConfig !== null)
        ? ExtensionPrivateServiceConnectConfig.fromPartial(object.privateServiceConnectConfig)
        : undefined;
    return message;
  },
};

function createBaseExtensionManifest(): ExtensionManifest {
  return { name: "", description: "", apiSpec: undefined, authConfig: undefined };
}

export const ExtensionManifest: MessageFns<ExtensionManifest> = {
  encode(message: ExtensionManifest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.apiSpec !== undefined) {
      ExtensionManifest_ApiSpec.encode(message.apiSpec, writer.uint32(26).fork()).join();
    }
    if (message.authConfig !== undefined) {
      AuthConfig.encode(message.authConfig, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionManifest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionManifest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.apiSpec = ExtensionManifest_ApiSpec.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authConfig = AuthConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionManifest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      apiSpec: isSet(object.apiSpec) ? ExtensionManifest_ApiSpec.fromJSON(object.apiSpec) : undefined,
      authConfig: isSet(object.authConfig) ? AuthConfig.fromJSON(object.authConfig) : undefined,
    };
  },

  toJSON(message: ExtensionManifest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.apiSpec !== undefined) {
      obj.apiSpec = ExtensionManifest_ApiSpec.toJSON(message.apiSpec);
    }
    if (message.authConfig !== undefined) {
      obj.authConfig = AuthConfig.toJSON(message.authConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ExtensionManifest>): ExtensionManifest {
    return ExtensionManifest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtensionManifest>): ExtensionManifest {
    const message = createBaseExtensionManifest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.apiSpec = (object.apiSpec !== undefined && object.apiSpec !== null)
      ? ExtensionManifest_ApiSpec.fromPartial(object.apiSpec)
      : undefined;
    message.authConfig = (object.authConfig !== undefined && object.authConfig !== null)
      ? AuthConfig.fromPartial(object.authConfig)
      : undefined;
    return message;
  },
};

function createBaseExtensionManifest_ApiSpec(): ExtensionManifest_ApiSpec {
  return { openApiYaml: undefined, openApiGcsUri: undefined };
}

export const ExtensionManifest_ApiSpec: MessageFns<ExtensionManifest_ApiSpec> = {
  encode(message: ExtensionManifest_ApiSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.openApiYaml !== undefined) {
      writer.uint32(10).string(message.openApiYaml);
    }
    if (message.openApiGcsUri !== undefined) {
      writer.uint32(18).string(message.openApiGcsUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionManifest_ApiSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionManifest_ApiSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.openApiYaml = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.openApiGcsUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionManifest_ApiSpec {
    return {
      openApiYaml: isSet(object.openApiYaml) ? globalThis.String(object.openApiYaml) : undefined,
      openApiGcsUri: isSet(object.openApiGcsUri) ? globalThis.String(object.openApiGcsUri) : undefined,
    };
  },

  toJSON(message: ExtensionManifest_ApiSpec): unknown {
    const obj: any = {};
    if (message.openApiYaml !== undefined) {
      obj.openApiYaml = message.openApiYaml;
    }
    if (message.openApiGcsUri !== undefined) {
      obj.openApiGcsUri = message.openApiGcsUri;
    }
    return obj;
  },

  create(base?: DeepPartial<ExtensionManifest_ApiSpec>): ExtensionManifest_ApiSpec {
    return ExtensionManifest_ApiSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtensionManifest_ApiSpec>): ExtensionManifest_ApiSpec {
    const message = createBaseExtensionManifest_ApiSpec();
    message.openApiYaml = object.openApiYaml ?? undefined;
    message.openApiGcsUri = object.openApiGcsUri ?? undefined;
    return message;
  },
};

function createBaseExtensionOperation(): ExtensionOperation {
  return { operationId: "", functionDeclaration: undefined };
}

export const ExtensionOperation: MessageFns<ExtensionOperation> = {
  encode(message: ExtensionOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationId !== "") {
      writer.uint32(10).string(message.operationId);
    }
    if (message.functionDeclaration !== undefined) {
      FunctionDeclaration.encode(message.functionDeclaration, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operationId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.functionDeclaration = FunctionDeclaration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionOperation {
    return {
      operationId: isSet(object.operationId) ? globalThis.String(object.operationId) : "",
      functionDeclaration: isSet(object.functionDeclaration)
        ? FunctionDeclaration.fromJSON(object.functionDeclaration)
        : undefined,
    };
  },

  toJSON(message: ExtensionOperation): unknown {
    const obj: any = {};
    if (message.operationId !== "") {
      obj.operationId = message.operationId;
    }
    if (message.functionDeclaration !== undefined) {
      obj.functionDeclaration = FunctionDeclaration.toJSON(message.functionDeclaration);
    }
    return obj;
  },

  create(base?: DeepPartial<ExtensionOperation>): ExtensionOperation {
    return ExtensionOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtensionOperation>): ExtensionOperation {
    const message = createBaseExtensionOperation();
    message.operationId = object.operationId ?? "";
    message.functionDeclaration = (object.functionDeclaration !== undefined && object.functionDeclaration !== null)
      ? FunctionDeclaration.fromPartial(object.functionDeclaration)
      : undefined;
    return message;
  },
};

function createBaseAuthConfig(): AuthConfig {
  return {
    apiKeyConfig: undefined,
    httpBasicAuthConfig: undefined,
    googleServiceAccountConfig: undefined,
    oauthConfig: undefined,
    oidcConfig: undefined,
    authType: 0,
  };
}

export const AuthConfig: MessageFns<AuthConfig> = {
  encode(message: AuthConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiKeyConfig !== undefined) {
      AuthConfig_ApiKeyConfig.encode(message.apiKeyConfig, writer.uint32(18).fork()).join();
    }
    if (message.httpBasicAuthConfig !== undefined) {
      AuthConfig_HttpBasicAuthConfig.encode(message.httpBasicAuthConfig, writer.uint32(26).fork()).join();
    }
    if (message.googleServiceAccountConfig !== undefined) {
      AuthConfig_GoogleServiceAccountConfig.encode(message.googleServiceAccountConfig, writer.uint32(34).fork()).join();
    }
    if (message.oauthConfig !== undefined) {
      AuthConfig_OauthConfig.encode(message.oauthConfig, writer.uint32(42).fork()).join();
    }
    if (message.oidcConfig !== undefined) {
      AuthConfig_OidcConfig.encode(message.oidcConfig, writer.uint32(58).fork()).join();
    }
    if (message.authType !== 0) {
      writer.uint32(808).int32(message.authType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiKeyConfig = AuthConfig_ApiKeyConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.httpBasicAuthConfig = AuthConfig_HttpBasicAuthConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.googleServiceAccountConfig = AuthConfig_GoogleServiceAccountConfig.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.oauthConfig = AuthConfig_OauthConfig.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.oidcConfig = AuthConfig_OidcConfig.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag !== 808) {
            break;
          }

          message.authType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthConfig {
    return {
      apiKeyConfig: isSet(object.apiKeyConfig) ? AuthConfig_ApiKeyConfig.fromJSON(object.apiKeyConfig) : undefined,
      httpBasicAuthConfig: isSet(object.httpBasicAuthConfig)
        ? AuthConfig_HttpBasicAuthConfig.fromJSON(object.httpBasicAuthConfig)
        : undefined,
      googleServiceAccountConfig: isSet(object.googleServiceAccountConfig)
        ? AuthConfig_GoogleServiceAccountConfig.fromJSON(object.googleServiceAccountConfig)
        : undefined,
      oauthConfig: isSet(object.oauthConfig) ? AuthConfig_OauthConfig.fromJSON(object.oauthConfig) : undefined,
      oidcConfig: isSet(object.oidcConfig) ? AuthConfig_OidcConfig.fromJSON(object.oidcConfig) : undefined,
      authType: isSet(object.authType) ? authTypeFromJSON(object.authType) : 0,
    };
  },

  toJSON(message: AuthConfig): unknown {
    const obj: any = {};
    if (message.apiKeyConfig !== undefined) {
      obj.apiKeyConfig = AuthConfig_ApiKeyConfig.toJSON(message.apiKeyConfig);
    }
    if (message.httpBasicAuthConfig !== undefined) {
      obj.httpBasicAuthConfig = AuthConfig_HttpBasicAuthConfig.toJSON(message.httpBasicAuthConfig);
    }
    if (message.googleServiceAccountConfig !== undefined) {
      obj.googleServiceAccountConfig = AuthConfig_GoogleServiceAccountConfig.toJSON(message.googleServiceAccountConfig);
    }
    if (message.oauthConfig !== undefined) {
      obj.oauthConfig = AuthConfig_OauthConfig.toJSON(message.oauthConfig);
    }
    if (message.oidcConfig !== undefined) {
      obj.oidcConfig = AuthConfig_OidcConfig.toJSON(message.oidcConfig);
    }
    if (message.authType !== 0) {
      obj.authType = authTypeToJSON(message.authType);
    }
    return obj;
  },

  create(base?: DeepPartial<AuthConfig>): AuthConfig {
    return AuthConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthConfig>): AuthConfig {
    const message = createBaseAuthConfig();
    message.apiKeyConfig = (object.apiKeyConfig !== undefined && object.apiKeyConfig !== null)
      ? AuthConfig_ApiKeyConfig.fromPartial(object.apiKeyConfig)
      : undefined;
    message.httpBasicAuthConfig = (object.httpBasicAuthConfig !== undefined && object.httpBasicAuthConfig !== null)
      ? AuthConfig_HttpBasicAuthConfig.fromPartial(object.httpBasicAuthConfig)
      : undefined;
    message.googleServiceAccountConfig =
      (object.googleServiceAccountConfig !== undefined && object.googleServiceAccountConfig !== null)
        ? AuthConfig_GoogleServiceAccountConfig.fromPartial(object.googleServiceAccountConfig)
        : undefined;
    message.oauthConfig = (object.oauthConfig !== undefined && object.oauthConfig !== null)
      ? AuthConfig_OauthConfig.fromPartial(object.oauthConfig)
      : undefined;
    message.oidcConfig = (object.oidcConfig !== undefined && object.oidcConfig !== null)
      ? AuthConfig_OidcConfig.fromPartial(object.oidcConfig)
      : undefined;
    message.authType = object.authType ?? 0;
    return message;
  },
};

function createBaseAuthConfig_ApiKeyConfig(): AuthConfig_ApiKeyConfig {
  return { name: "", apiKeySecret: "", httpElementLocation: 0 };
}

export const AuthConfig_ApiKeyConfig: MessageFns<AuthConfig_ApiKeyConfig> = {
  encode(message: AuthConfig_ApiKeyConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.apiKeySecret !== "") {
      writer.uint32(18).string(message.apiKeySecret);
    }
    if (message.httpElementLocation !== 0) {
      writer.uint32(24).int32(message.httpElementLocation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthConfig_ApiKeyConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthConfig_ApiKeyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiKeySecret = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.httpElementLocation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthConfig_ApiKeyConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      apiKeySecret: isSet(object.apiKeySecret) ? globalThis.String(object.apiKeySecret) : "",
      httpElementLocation: isSet(object.httpElementLocation)
        ? httpElementLocationFromJSON(object.httpElementLocation)
        : 0,
    };
  },

  toJSON(message: AuthConfig_ApiKeyConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.apiKeySecret !== "") {
      obj.apiKeySecret = message.apiKeySecret;
    }
    if (message.httpElementLocation !== 0) {
      obj.httpElementLocation = httpElementLocationToJSON(message.httpElementLocation);
    }
    return obj;
  },

  create(base?: DeepPartial<AuthConfig_ApiKeyConfig>): AuthConfig_ApiKeyConfig {
    return AuthConfig_ApiKeyConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthConfig_ApiKeyConfig>): AuthConfig_ApiKeyConfig {
    const message = createBaseAuthConfig_ApiKeyConfig();
    message.name = object.name ?? "";
    message.apiKeySecret = object.apiKeySecret ?? "";
    message.httpElementLocation = object.httpElementLocation ?? 0;
    return message;
  },
};

function createBaseAuthConfig_HttpBasicAuthConfig(): AuthConfig_HttpBasicAuthConfig {
  return { credentialSecret: "" };
}

export const AuthConfig_HttpBasicAuthConfig: MessageFns<AuthConfig_HttpBasicAuthConfig> = {
  encode(message: AuthConfig_HttpBasicAuthConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.credentialSecret !== "") {
      writer.uint32(18).string(message.credentialSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthConfig_HttpBasicAuthConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthConfig_HttpBasicAuthConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.credentialSecret = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthConfig_HttpBasicAuthConfig {
    return { credentialSecret: isSet(object.credentialSecret) ? globalThis.String(object.credentialSecret) : "" };
  },

  toJSON(message: AuthConfig_HttpBasicAuthConfig): unknown {
    const obj: any = {};
    if (message.credentialSecret !== "") {
      obj.credentialSecret = message.credentialSecret;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthConfig_HttpBasicAuthConfig>): AuthConfig_HttpBasicAuthConfig {
    return AuthConfig_HttpBasicAuthConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthConfig_HttpBasicAuthConfig>): AuthConfig_HttpBasicAuthConfig {
    const message = createBaseAuthConfig_HttpBasicAuthConfig();
    message.credentialSecret = object.credentialSecret ?? "";
    return message;
  },
};

function createBaseAuthConfig_GoogleServiceAccountConfig(): AuthConfig_GoogleServiceAccountConfig {
  return { serviceAccount: "" };
}

export const AuthConfig_GoogleServiceAccountConfig: MessageFns<AuthConfig_GoogleServiceAccountConfig> = {
  encode(message: AuthConfig_GoogleServiceAccountConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceAccount !== "") {
      writer.uint32(10).string(message.serviceAccount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthConfig_GoogleServiceAccountConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthConfig_GoogleServiceAccountConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthConfig_GoogleServiceAccountConfig {
    return { serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : "" };
  },

  toJSON(message: AuthConfig_GoogleServiceAccountConfig): unknown {
    const obj: any = {};
    if (message.serviceAccount !== "") {
      obj.serviceAccount = message.serviceAccount;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthConfig_GoogleServiceAccountConfig>): AuthConfig_GoogleServiceAccountConfig {
    return AuthConfig_GoogleServiceAccountConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthConfig_GoogleServiceAccountConfig>): AuthConfig_GoogleServiceAccountConfig {
    const message = createBaseAuthConfig_GoogleServiceAccountConfig();
    message.serviceAccount = object.serviceAccount ?? "";
    return message;
  },
};

function createBaseAuthConfig_OauthConfig(): AuthConfig_OauthConfig {
  return { accessToken: undefined, serviceAccount: undefined };
}

export const AuthConfig_OauthConfig: MessageFns<AuthConfig_OauthConfig> = {
  encode(message: AuthConfig_OauthConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== undefined) {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.serviceAccount !== undefined) {
      writer.uint32(18).string(message.serviceAccount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthConfig_OauthConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthConfig_OauthConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthConfig_OauthConfig {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : undefined,
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : undefined,
    };
  },

  toJSON(message: AuthConfig_OauthConfig): unknown {
    const obj: any = {};
    if (message.accessToken !== undefined) {
      obj.accessToken = message.accessToken;
    }
    if (message.serviceAccount !== undefined) {
      obj.serviceAccount = message.serviceAccount;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthConfig_OauthConfig>): AuthConfig_OauthConfig {
    return AuthConfig_OauthConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthConfig_OauthConfig>): AuthConfig_OauthConfig {
    const message = createBaseAuthConfig_OauthConfig();
    message.accessToken = object.accessToken ?? undefined;
    message.serviceAccount = object.serviceAccount ?? undefined;
    return message;
  },
};

function createBaseAuthConfig_OidcConfig(): AuthConfig_OidcConfig {
  return { idToken: undefined, serviceAccount: undefined };
}

export const AuthConfig_OidcConfig: MessageFns<AuthConfig_OidcConfig> = {
  encode(message: AuthConfig_OidcConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idToken !== undefined) {
      writer.uint32(10).string(message.idToken);
    }
    if (message.serviceAccount !== undefined) {
      writer.uint32(18).string(message.serviceAccount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthConfig_OidcConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthConfig_OidcConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.serviceAccount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthConfig_OidcConfig {
    return {
      idToken: isSet(object.idToken) ? globalThis.String(object.idToken) : undefined,
      serviceAccount: isSet(object.serviceAccount) ? globalThis.String(object.serviceAccount) : undefined,
    };
  },

  toJSON(message: AuthConfig_OidcConfig): unknown {
    const obj: any = {};
    if (message.idToken !== undefined) {
      obj.idToken = message.idToken;
    }
    if (message.serviceAccount !== undefined) {
      obj.serviceAccount = message.serviceAccount;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthConfig_OidcConfig>): AuthConfig_OidcConfig {
    return AuthConfig_OidcConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthConfig_OidcConfig>): AuthConfig_OidcConfig {
    const message = createBaseAuthConfig_OidcConfig();
    message.idToken = object.idToken ?? undefined;
    message.serviceAccount = object.serviceAccount ?? undefined;
    return message;
  },
};

function createBaseRuntimeConfig(): RuntimeConfig {
  return { codeInterpreterRuntimeConfig: undefined, vertexAiSearchRuntimeConfig: undefined, defaultParams: undefined };
}

export const RuntimeConfig: MessageFns<RuntimeConfig> = {
  encode(message: RuntimeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.codeInterpreterRuntimeConfig !== undefined) {
      RuntimeConfig_CodeInterpreterRuntimeConfig.encode(message.codeInterpreterRuntimeConfig, writer.uint32(18).fork())
        .join();
    }
    if (message.vertexAiSearchRuntimeConfig !== undefined) {
      RuntimeConfig_VertexAISearchRuntimeConfig.encode(message.vertexAiSearchRuntimeConfig, writer.uint32(50).fork())
        .join();
    }
    if (message.defaultParams !== undefined) {
      Struct.encode(Struct.wrap(message.defaultParams), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.codeInterpreterRuntimeConfig = RuntimeConfig_CodeInterpreterRuntimeConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.vertexAiSearchRuntimeConfig = RuntimeConfig_VertexAISearchRuntimeConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.defaultParams = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeConfig {
    return {
      codeInterpreterRuntimeConfig: isSet(object.codeInterpreterRuntimeConfig)
        ? RuntimeConfig_CodeInterpreterRuntimeConfig.fromJSON(object.codeInterpreterRuntimeConfig)
        : undefined,
      vertexAiSearchRuntimeConfig: isSet(object.vertexAiSearchRuntimeConfig)
        ? RuntimeConfig_VertexAISearchRuntimeConfig.fromJSON(object.vertexAiSearchRuntimeConfig)
        : undefined,
      defaultParams: isObject(object.defaultParams) ? object.defaultParams : undefined,
    };
  },

  toJSON(message: RuntimeConfig): unknown {
    const obj: any = {};
    if (message.codeInterpreterRuntimeConfig !== undefined) {
      obj.codeInterpreterRuntimeConfig = RuntimeConfig_CodeInterpreterRuntimeConfig.toJSON(
        message.codeInterpreterRuntimeConfig,
      );
    }
    if (message.vertexAiSearchRuntimeConfig !== undefined) {
      obj.vertexAiSearchRuntimeConfig = RuntimeConfig_VertexAISearchRuntimeConfig.toJSON(
        message.vertexAiSearchRuntimeConfig,
      );
    }
    if (message.defaultParams !== undefined) {
      obj.defaultParams = message.defaultParams;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeConfig>): RuntimeConfig {
    return RuntimeConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeConfig>): RuntimeConfig {
    const message = createBaseRuntimeConfig();
    message.codeInterpreterRuntimeConfig =
      (object.codeInterpreterRuntimeConfig !== undefined && object.codeInterpreterRuntimeConfig !== null)
        ? RuntimeConfig_CodeInterpreterRuntimeConfig.fromPartial(object.codeInterpreterRuntimeConfig)
        : undefined;
    message.vertexAiSearchRuntimeConfig =
      (object.vertexAiSearchRuntimeConfig !== undefined && object.vertexAiSearchRuntimeConfig !== null)
        ? RuntimeConfig_VertexAISearchRuntimeConfig.fromPartial(object.vertexAiSearchRuntimeConfig)
        : undefined;
    message.defaultParams = object.defaultParams ?? undefined;
    return message;
  },
};

function createBaseRuntimeConfig_CodeInterpreterRuntimeConfig(): RuntimeConfig_CodeInterpreterRuntimeConfig {
  return { fileInputGcsBucket: "", fileOutputGcsBucket: "" };
}

export const RuntimeConfig_CodeInterpreterRuntimeConfig: MessageFns<RuntimeConfig_CodeInterpreterRuntimeConfig> = {
  encode(message: RuntimeConfig_CodeInterpreterRuntimeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileInputGcsBucket !== "") {
      writer.uint32(10).string(message.fileInputGcsBucket);
    }
    if (message.fileOutputGcsBucket !== "") {
      writer.uint32(18).string(message.fileOutputGcsBucket);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeConfig_CodeInterpreterRuntimeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeConfig_CodeInterpreterRuntimeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fileInputGcsBucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fileOutputGcsBucket = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeConfig_CodeInterpreterRuntimeConfig {
    return {
      fileInputGcsBucket: isSet(object.fileInputGcsBucket) ? globalThis.String(object.fileInputGcsBucket) : "",
      fileOutputGcsBucket: isSet(object.fileOutputGcsBucket) ? globalThis.String(object.fileOutputGcsBucket) : "",
    };
  },

  toJSON(message: RuntimeConfig_CodeInterpreterRuntimeConfig): unknown {
    const obj: any = {};
    if (message.fileInputGcsBucket !== "") {
      obj.fileInputGcsBucket = message.fileInputGcsBucket;
    }
    if (message.fileOutputGcsBucket !== "") {
      obj.fileOutputGcsBucket = message.fileOutputGcsBucket;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeConfig_CodeInterpreterRuntimeConfig>): RuntimeConfig_CodeInterpreterRuntimeConfig {
    return RuntimeConfig_CodeInterpreterRuntimeConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RuntimeConfig_CodeInterpreterRuntimeConfig>,
  ): RuntimeConfig_CodeInterpreterRuntimeConfig {
    const message = createBaseRuntimeConfig_CodeInterpreterRuntimeConfig();
    message.fileInputGcsBucket = object.fileInputGcsBucket ?? "";
    message.fileOutputGcsBucket = object.fileOutputGcsBucket ?? "";
    return message;
  },
};

function createBaseRuntimeConfig_VertexAISearchRuntimeConfig(): RuntimeConfig_VertexAISearchRuntimeConfig {
  return { servingConfigName: "", engineId: "" };
}

export const RuntimeConfig_VertexAISearchRuntimeConfig: MessageFns<RuntimeConfig_VertexAISearchRuntimeConfig> = {
  encode(message: RuntimeConfig_VertexAISearchRuntimeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.servingConfigName !== "") {
      writer.uint32(10).string(message.servingConfigName);
    }
    if (message.engineId !== "") {
      writer.uint32(18).string(message.engineId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeConfig_VertexAISearchRuntimeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeConfig_VertexAISearchRuntimeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.servingConfigName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.engineId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeConfig_VertexAISearchRuntimeConfig {
    return {
      servingConfigName: isSet(object.servingConfigName) ? globalThis.String(object.servingConfigName) : "",
      engineId: isSet(object.engineId) ? globalThis.String(object.engineId) : "",
    };
  },

  toJSON(message: RuntimeConfig_VertexAISearchRuntimeConfig): unknown {
    const obj: any = {};
    if (message.servingConfigName !== "") {
      obj.servingConfigName = message.servingConfigName;
    }
    if (message.engineId !== "") {
      obj.engineId = message.engineId;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeConfig_VertexAISearchRuntimeConfig>): RuntimeConfig_VertexAISearchRuntimeConfig {
    return RuntimeConfig_VertexAISearchRuntimeConfig.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RuntimeConfig_VertexAISearchRuntimeConfig>,
  ): RuntimeConfig_VertexAISearchRuntimeConfig {
    const message = createBaseRuntimeConfig_VertexAISearchRuntimeConfig();
    message.servingConfigName = object.servingConfigName ?? "";
    message.engineId = object.engineId ?? "";
    return message;
  },
};

function createBaseExtensionPrivateServiceConnectConfig(): ExtensionPrivateServiceConnectConfig {
  return { serviceDirectory: "" };
}

export const ExtensionPrivateServiceConnectConfig: MessageFns<ExtensionPrivateServiceConnectConfig> = {
  encode(message: ExtensionPrivateServiceConnectConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceDirectory !== "") {
      writer.uint32(10).string(message.serviceDirectory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionPrivateServiceConnectConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionPrivateServiceConnectConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.serviceDirectory = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionPrivateServiceConnectConfig {
    return { serviceDirectory: isSet(object.serviceDirectory) ? globalThis.String(object.serviceDirectory) : "" };
  },

  toJSON(message: ExtensionPrivateServiceConnectConfig): unknown {
    const obj: any = {};
    if (message.serviceDirectory !== "") {
      obj.serviceDirectory = message.serviceDirectory;
    }
    return obj;
  },

  create(base?: DeepPartial<ExtensionPrivateServiceConnectConfig>): ExtensionPrivateServiceConnectConfig {
    return ExtensionPrivateServiceConnectConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtensionPrivateServiceConnectConfig>): ExtensionPrivateServiceConnectConfig {
    const message = createBaseExtensionPrivateServiceConnectConfig();
    message.serviceDirectory = object.serviceDirectory ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
