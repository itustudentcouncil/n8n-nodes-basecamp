// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/ui_pipeline_spec.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Struct } from "../../../protobuf/struct.js";
import { Value } from "./value.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/** The definition of a artifact type in MLMD. */
export interface ArtifactTypeSchema {
  /**
   * The name of the type. The format of the title must be:
   * `<namespace>.<title>`.
   * Examples:
   *  - `aiplatform.Model`
   *  - `acme.CustomModel`
   * When this field is set, the type must be pre-registered in the MLMD
   * store.
   */
  schemaTitle?:
    | string
    | undefined;
  /**
   * Points to a YAML file stored on Cloud Storage describing the
   * format.
   * Deprecated. Use [PipelineArtifactTypeSchema.schema_title][] or
   * [PipelineArtifactTypeSchema.instance_schema][] instead.
   *
   * @deprecated
   */
  schemaUri?:
    | string
    | undefined;
  /**
   * Contains a raw YAML string, describing the format of
   * the properties of the type.
   */
  instanceSchema?:
    | string
    | undefined;
  /**
   * The schema version of the artifact. If the value is not set, it defaults
   * to the latest version in the system.
   */
  schemaVersion: string;
}

/** The definition of a runtime artifact. */
export interface RuntimeArtifact {
  /** The name of an artifact. */
  name: string;
  /** The type of the artifact. */
  type:
    | ArtifactTypeSchema
    | undefined;
  /** The URI of the artifact. */
  uri: string;
  /**
   * The properties of the artifact.
   * Deprecated. Use
   * [RuntimeArtifact.metadata][google.cloud.aiplatform.v1beta1.RuntimeArtifact.metadata]
   * instead.
   *
   * @deprecated
   */
  properties: { [key: string]: Value };
  /**
   * The custom properties of the artifact.
   * Deprecated. Use
   * [RuntimeArtifact.metadata][google.cloud.aiplatform.v1beta1.RuntimeArtifact.metadata]
   * instead.
   *
   * @deprecated
   */
  customProperties: { [key: string]: Value };
  /** Properties of the Artifact. */
  metadata: { [key: string]: any } | undefined;
}

export interface RuntimeArtifact_PropertiesEntry {
  key: string;
  value: Value | undefined;
}

export interface RuntimeArtifact_CustomPropertiesEntry {
  key: string;
  value: Value | undefined;
}

function createBaseArtifactTypeSchema(): ArtifactTypeSchema {
  return { schemaTitle: undefined, schemaUri: undefined, instanceSchema: undefined, schemaVersion: "" };
}

export const ArtifactTypeSchema: MessageFns<ArtifactTypeSchema> = {
  encode(message: ArtifactTypeSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaTitle !== undefined) {
      writer.uint32(10).string(message.schemaTitle);
    }
    if (message.schemaUri !== undefined) {
      writer.uint32(18).string(message.schemaUri);
    }
    if (message.instanceSchema !== undefined) {
      writer.uint32(26).string(message.instanceSchema);
    }
    if (message.schemaVersion !== "") {
      writer.uint32(34).string(message.schemaVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArtifactTypeSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArtifactTypeSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.schemaTitle = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.schemaUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.instanceSchema = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArtifactTypeSchema {
    return {
      schemaTitle: isSet(object.schemaTitle) ? globalThis.String(object.schemaTitle) : undefined,
      schemaUri: isSet(object.schemaUri) ? globalThis.String(object.schemaUri) : undefined,
      instanceSchema: isSet(object.instanceSchema) ? globalThis.String(object.instanceSchema) : undefined,
      schemaVersion: isSet(object.schemaVersion) ? globalThis.String(object.schemaVersion) : "",
    };
  },

  toJSON(message: ArtifactTypeSchema): unknown {
    const obj: any = {};
    if (message.schemaTitle !== undefined) {
      obj.schemaTitle = message.schemaTitle;
    }
    if (message.schemaUri !== undefined) {
      obj.schemaUri = message.schemaUri;
    }
    if (message.instanceSchema !== undefined) {
      obj.instanceSchema = message.instanceSchema;
    }
    if (message.schemaVersion !== "") {
      obj.schemaVersion = message.schemaVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<ArtifactTypeSchema>): ArtifactTypeSchema {
    return ArtifactTypeSchema.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArtifactTypeSchema>): ArtifactTypeSchema {
    const message = createBaseArtifactTypeSchema();
    message.schemaTitle = object.schemaTitle ?? undefined;
    message.schemaUri = object.schemaUri ?? undefined;
    message.instanceSchema = object.instanceSchema ?? undefined;
    message.schemaVersion = object.schemaVersion ?? "";
    return message;
  },
};

function createBaseRuntimeArtifact(): RuntimeArtifact {
  return { name: "", type: undefined, uri: "", properties: {}, customProperties: {}, metadata: undefined };
}

export const RuntimeArtifact: MessageFns<RuntimeArtifact> = {
  encode(message: RuntimeArtifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== undefined) {
      ArtifactTypeSchema.encode(message.type, writer.uint32(18).fork()).join();
    }
    if (message.uri !== "") {
      writer.uint32(26).string(message.uri);
    }
    Object.entries(message.properties).forEach(([key, value]) => {
      RuntimeArtifact_PropertiesEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    Object.entries(message.customProperties).forEach(([key, value]) => {
      RuntimeArtifact_CustomPropertiesEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.metadata !== undefined) {
      Struct.encode(Struct.wrap(message.metadata), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeArtifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeArtifact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = ArtifactTypeSchema.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = RuntimeArtifact_PropertiesEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.properties[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = RuntimeArtifact_CustomPropertiesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.customProperties[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeArtifact {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? ArtifactTypeSchema.fromJSON(object.type) : undefined,
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      properties: isObject(object.properties)
        ? Object.entries(object.properties).reduce<{ [key: string]: Value }>((acc, [key, value]) => {
          acc[key] = Value.fromJSON(value);
          return acc;
        }, {})
        : {},
      customProperties: isObject(object.customProperties)
        ? Object.entries(object.customProperties).reduce<{ [key: string]: Value }>((acc, [key, value]) => {
          acc[key] = Value.fromJSON(value);
          return acc;
        }, {})
        : {},
      metadata: isObject(object.metadata) ? object.metadata : undefined,
    };
  },

  toJSON(message: RuntimeArtifact): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== undefined) {
      obj.type = ArtifactTypeSchema.toJSON(message.type);
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.properties) {
      const entries = Object.entries(message.properties);
      if (entries.length > 0) {
        obj.properties = {};
        entries.forEach(([k, v]) => {
          obj.properties[k] = Value.toJSON(v);
        });
      }
    }
    if (message.customProperties) {
      const entries = Object.entries(message.customProperties);
      if (entries.length > 0) {
        obj.customProperties = {};
        entries.forEach(([k, v]) => {
          obj.customProperties[k] = Value.toJSON(v);
        });
      }
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeArtifact>): RuntimeArtifact {
    return RuntimeArtifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeArtifact>): RuntimeArtifact {
    const message = createBaseRuntimeArtifact();
    message.name = object.name ?? "";
    message.type = (object.type !== undefined && object.type !== null)
      ? ArtifactTypeSchema.fromPartial(object.type)
      : undefined;
    message.uri = object.uri ?? "";
    message.properties = Object.entries(object.properties ?? {}).reduce<{ [key: string]: Value }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Value.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.customProperties = Object.entries(object.customProperties ?? {}).reduce<{ [key: string]: Value }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Value.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.metadata = object.metadata ?? undefined;
    return message;
  },
};

function createBaseRuntimeArtifact_PropertiesEntry(): RuntimeArtifact_PropertiesEntry {
  return { key: "", value: undefined };
}

export const RuntimeArtifact_PropertiesEntry: MessageFns<RuntimeArtifact_PropertiesEntry> = {
  encode(message: RuntimeArtifact_PropertiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeArtifact_PropertiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeArtifact_PropertiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeArtifact_PropertiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Value.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: RuntimeArtifact_PropertiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Value.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeArtifact_PropertiesEntry>): RuntimeArtifact_PropertiesEntry {
    return RuntimeArtifact_PropertiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeArtifact_PropertiesEntry>): RuntimeArtifact_PropertiesEntry {
    const message = createBaseRuntimeArtifact_PropertiesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseRuntimeArtifact_CustomPropertiesEntry(): RuntimeArtifact_CustomPropertiesEntry {
  return { key: "", value: undefined };
}

export const RuntimeArtifact_CustomPropertiesEntry: MessageFns<RuntimeArtifact_CustomPropertiesEntry> = {
  encode(message: RuntimeArtifact_CustomPropertiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeArtifact_CustomPropertiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeArtifact_CustomPropertiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeArtifact_CustomPropertiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Value.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: RuntimeArtifact_CustomPropertiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Value.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeArtifact_CustomPropertiesEntry>): RuntimeArtifact_CustomPropertiesEntry {
    return RuntimeArtifact_CustomPropertiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeArtifact_CustomPropertiesEntry>): RuntimeArtifact_CustomPropertiesEntry {
    const message = createBaseRuntimeArtifact_CustomPropertiesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
