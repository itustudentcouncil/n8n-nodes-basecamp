// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/index.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Value } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DeployedIndexRef } from "./deployed_index_ref.js";
import { EncryptionSpec } from "./encryption_spec.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * A representation of a collection of database items organized in a way that
 * allows for approximate nearest neighbor (a.k.a ANN) algorithms search.
 */
export interface Index {
  /** Output only. The resource name of the Index. */
  name: string;
  /**
   * Required. The display name of the Index.
   * The name can be up to 128 characters long and can consist of any UTF-8
   * characters.
   */
  displayName: string;
  /** The description of the Index. */
  description: string;
  /**
   * Immutable. Points to a YAML file stored on Google Cloud Storage describing
   * additional information about the Index, that is specific to it. Unset if
   * the Index does not have any additional information. The schema is defined
   * as an OpenAPI 3.0.2 [Schema
   * Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).
   * Note: The URI given on output will be immutable and probably different,
   * including the URI scheme, than the one given on input. The output URI will
   * point to a location where the user only has a read access.
   */
  metadataSchemaUri: string;
  /**
   * An additional information about the Index; the schema of the metadata can
   * be found in
   * [metadata_schema][google.cloud.aiplatform.v1beta1.Index.metadata_schema_uri].
   */
  metadata:
    | any
    | undefined;
  /**
   * Output only. The pointers to DeployedIndexes created from this Index.
   * An Index can be only deleted if all its DeployedIndexes had been undeployed
   * first.
   */
  deployedIndexes: DeployedIndexRef[];
  /**
   * Used to perform consistent read-modify-write updates. If not set, a blind
   * "overwrite" update happens.
   */
  etag: string;
  /**
   * The labels with user-defined metadata to organize your Indexes.
   *
   * Label keys and values can be no longer than 64 characters
   * (Unicode codepoints), can only contain lowercase letters, numeric
   * characters, underscores and dashes. International characters are allowed.
   *
   * See https://goo.gl/xmQnxf for more information and examples of labels.
   */
  labels: { [key: string]: string };
  /** Output only. Timestamp when this Index was created. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. Timestamp when this Index was most recently updated.
   * This also includes any update to the contents of the Index.
   * Note that Operations working on this Index may have their
   * [Operations.metadata.generic_metadata.update_time]
   * [google.cloud.aiplatform.v1beta1.GenericOperationMetadata.update_time] a
   * little after the value of this timestamp, yet that does not mean their
   * results are not already reflected in the Index. Result of any successfully
   * completed Operation on the Index is reflected in it.
   */
  updateTime:
    | Date
    | undefined;
  /** Output only. Stats of the index resource. */
  indexStats:
    | IndexStats
    | undefined;
  /**
   * Immutable. The update method to use with this Index. If not set,
   * BATCH_UPDATE will be used by default.
   */
  indexUpdateMethod: Index_IndexUpdateMethod;
  /**
   * Immutable. Customer-managed encryption key spec for an Index. If set, this
   * Index and all sub-resources of this Index will be secured by this key.
   */
  encryptionSpec:
    | EncryptionSpec
    | undefined;
  /** Output only. Reserved for future use. */
  satisfiesPzs: boolean;
  /** Output only. Reserved for future use. */
  satisfiesPzi: boolean;
}

/** The update method of an Index. */
export enum Index_IndexUpdateMethod {
  /** INDEX_UPDATE_METHOD_UNSPECIFIED - Should not be used. */
  INDEX_UPDATE_METHOD_UNSPECIFIED = 0,
  /**
   * BATCH_UPDATE - BatchUpdate: user can call UpdateIndex with files on Cloud Storage of
   * Datapoints to update.
   */
  BATCH_UPDATE = 1,
  /**
   * STREAM_UPDATE - StreamUpdate: user can call UpsertDatapoints/DeleteDatapoints to update
   * the Index and the updates will be applied in corresponding
   * DeployedIndexes in nearly real-time.
   */
  STREAM_UPDATE = 2,
  UNRECOGNIZED = -1,
}

export function index_IndexUpdateMethodFromJSON(object: any): Index_IndexUpdateMethod {
  switch (object) {
    case 0:
    case "INDEX_UPDATE_METHOD_UNSPECIFIED":
      return Index_IndexUpdateMethod.INDEX_UPDATE_METHOD_UNSPECIFIED;
    case 1:
    case "BATCH_UPDATE":
      return Index_IndexUpdateMethod.BATCH_UPDATE;
    case 2:
    case "STREAM_UPDATE":
      return Index_IndexUpdateMethod.STREAM_UPDATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Index_IndexUpdateMethod.UNRECOGNIZED;
  }
}

export function index_IndexUpdateMethodToJSON(object: Index_IndexUpdateMethod): string {
  switch (object) {
    case Index_IndexUpdateMethod.INDEX_UPDATE_METHOD_UNSPECIFIED:
      return "INDEX_UPDATE_METHOD_UNSPECIFIED";
    case Index_IndexUpdateMethod.BATCH_UPDATE:
      return "BATCH_UPDATE";
    case Index_IndexUpdateMethod.STREAM_UPDATE:
      return "STREAM_UPDATE";
    case Index_IndexUpdateMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Index_LabelsEntry {
  key: string;
  value: string;
}

/** A datapoint of Index. */
export interface IndexDatapoint {
  /** Required. Unique identifier of the datapoint. */
  datapointId: string;
  /**
   * Required. Feature embedding vector for dense index. An array of numbers
   * with the length of [NearestNeighborSearchConfig.dimensions].
   */
  featureVector: number[];
  /** Optional. Feature embedding vector for sparse index. */
  sparseEmbedding:
    | IndexDatapoint_SparseEmbedding
    | undefined;
  /**
   * Optional. List of Restrict of the datapoint, used to perform "restricted
   * searches" where boolean rule are used to filter the subset of the database
   * eligible for matching. This uses categorical tokens. See:
   * https://cloud.google.com/vertex-ai/docs/matching-engine/filtering
   */
  restricts: IndexDatapoint_Restriction[];
  /**
   * Optional. List of Restrict of the datapoint, used to perform "restricted
   * searches" where boolean rule are used to filter the subset of the database
   * eligible for matching. This uses numeric comparisons.
   */
  numericRestricts: IndexDatapoint_NumericRestriction[];
  /**
   * Optional. CrowdingTag of the datapoint, the number of neighbors to return
   * in each crowding can be configured during query.
   */
  crowdingTag: IndexDatapoint_CrowdingTag | undefined;
}

/**
 * Feature embedding vector for sparse index. An array of numbers whose values
 * are located in the specified dimensions.
 */
export interface IndexDatapoint_SparseEmbedding {
  /** Required. The list of embedding values of the sparse vector. */
  values: number[];
  /**
   * Required. The list of indexes for the embedding values of the sparse
   * vector.
   */
  dimensions: Long[];
}

/**
 * Restriction of a datapoint which describe its attributes(tokens) from each
 * of several attribute categories(namespaces).
 */
export interface IndexDatapoint_Restriction {
  /** The namespace of this restriction. e.g.: color. */
  namespace: string;
  /** The attributes to allow in this namespace. e.g.: 'red' */
  allowList: string[];
  /** The attributes to deny in this namespace. e.g.: 'blue' */
  denyList: string[];
}

/**
 * This field allows restricts to be based on numeric comparisons rather
 * than categorical tokens.
 */
export interface IndexDatapoint_NumericRestriction {
  /** Represents 64 bit integer. */
  valueInt?:
    | Long
    | undefined;
  /** Represents 32 bit float. */
  valueFloat?:
    | number
    | undefined;
  /** Represents 64 bit float. */
  valueDouble?:
    | number
    | undefined;
  /** The namespace of this restriction. e.g.: cost. */
  namespace: string;
  /**
   * This MUST be specified for queries and must NOT be specified for
   * datapoints.
   */
  op: IndexDatapoint_NumericRestriction_Operator;
}

/**
 * Which comparison operator to use.  Should be specified for queries only;
 * specifying this for a datapoint is an error.
 *
 * Datapoints for which Operator is true relative to the query's Value
 * field will be allowlisted.
 */
export enum IndexDatapoint_NumericRestriction_Operator {
  /** OPERATOR_UNSPECIFIED - Default value of the enum. */
  OPERATOR_UNSPECIFIED = 0,
  /** LESS - Datapoints are eligible iff their value is < the query's. */
  LESS = 1,
  /** LESS_EQUAL - Datapoints are eligible iff their value is <= the query's. */
  LESS_EQUAL = 2,
  /** EQUAL - Datapoints are eligible iff their value is == the query's. */
  EQUAL = 3,
  /** GREATER_EQUAL - Datapoints are eligible iff their value is >= the query's. */
  GREATER_EQUAL = 4,
  /** GREATER - Datapoints are eligible iff their value is > the query's. */
  GREATER = 5,
  /** NOT_EQUAL - Datapoints are eligible iff their value is != the query's. */
  NOT_EQUAL = 6,
  UNRECOGNIZED = -1,
}

export function indexDatapoint_NumericRestriction_OperatorFromJSON(
  object: any,
): IndexDatapoint_NumericRestriction_Operator {
  switch (object) {
    case 0:
    case "OPERATOR_UNSPECIFIED":
      return IndexDatapoint_NumericRestriction_Operator.OPERATOR_UNSPECIFIED;
    case 1:
    case "LESS":
      return IndexDatapoint_NumericRestriction_Operator.LESS;
    case 2:
    case "LESS_EQUAL":
      return IndexDatapoint_NumericRestriction_Operator.LESS_EQUAL;
    case 3:
    case "EQUAL":
      return IndexDatapoint_NumericRestriction_Operator.EQUAL;
    case 4:
    case "GREATER_EQUAL":
      return IndexDatapoint_NumericRestriction_Operator.GREATER_EQUAL;
    case 5:
    case "GREATER":
      return IndexDatapoint_NumericRestriction_Operator.GREATER;
    case 6:
    case "NOT_EQUAL":
      return IndexDatapoint_NumericRestriction_Operator.NOT_EQUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IndexDatapoint_NumericRestriction_Operator.UNRECOGNIZED;
  }
}

export function indexDatapoint_NumericRestriction_OperatorToJSON(
  object: IndexDatapoint_NumericRestriction_Operator,
): string {
  switch (object) {
    case IndexDatapoint_NumericRestriction_Operator.OPERATOR_UNSPECIFIED:
      return "OPERATOR_UNSPECIFIED";
    case IndexDatapoint_NumericRestriction_Operator.LESS:
      return "LESS";
    case IndexDatapoint_NumericRestriction_Operator.LESS_EQUAL:
      return "LESS_EQUAL";
    case IndexDatapoint_NumericRestriction_Operator.EQUAL:
      return "EQUAL";
    case IndexDatapoint_NumericRestriction_Operator.GREATER_EQUAL:
      return "GREATER_EQUAL";
    case IndexDatapoint_NumericRestriction_Operator.GREATER:
      return "GREATER";
    case IndexDatapoint_NumericRestriction_Operator.NOT_EQUAL:
      return "NOT_EQUAL";
    case IndexDatapoint_NumericRestriction_Operator.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Crowding tag is a constraint on a neighbor list produced by nearest
 * neighbor search requiring that no more than some value k' of the k
 * neighbors returned have the same value of crowding_attribute.
 */
export interface IndexDatapoint_CrowdingTag {
  /**
   * The attribute value used for crowding.  The maximum number of neighbors
   * to return per crowding attribute value
   * (per_crowding_attribute_num_neighbors) is configured per-query. This
   * field is ignored if per_crowding_attribute_num_neighbors is larger than
   * the total number of neighbors to return for a given query.
   */
  crowdingAttribute: string;
}

/** Stats of the Index. */
export interface IndexStats {
  /** Output only. The number of dense vectors in the Index. */
  vectorsCount: Long;
  /** Output only. The number of sparse vectors in the Index. */
  sparseVectorsCount: Long;
  /** Output only. The number of shards in the Index. */
  shardsCount: number;
}

function createBaseIndex(): Index {
  return {
    name: "",
    displayName: "",
    description: "",
    metadataSchemaUri: "",
    metadata: undefined,
    deployedIndexes: [],
    etag: "",
    labels: {},
    createTime: undefined,
    updateTime: undefined,
    indexStats: undefined,
    indexUpdateMethod: 0,
    encryptionSpec: undefined,
    satisfiesPzs: false,
    satisfiesPzi: false,
  };
}

export const Index: MessageFns<Index> = {
  encode(message: Index, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.metadataSchemaUri !== "") {
      writer.uint32(34).string(message.metadataSchemaUri);
    }
    if (message.metadata !== undefined) {
      Value.encode(Value.wrap(message.metadata), writer.uint32(50).fork()).join();
    }
    for (const v of message.deployedIndexes) {
      DeployedIndexRef.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.etag !== "") {
      writer.uint32(66).string(message.etag);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Index_LabelsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(82).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(90).fork()).join();
    }
    if (message.indexStats !== undefined) {
      IndexStats.encode(message.indexStats, writer.uint32(114).fork()).join();
    }
    if (message.indexUpdateMethod !== 0) {
      writer.uint32(128).int32(message.indexUpdateMethod);
    }
    if (message.encryptionSpec !== undefined) {
      EncryptionSpec.encode(message.encryptionSpec, writer.uint32(138).fork()).join();
    }
    if (message.satisfiesPzs !== false) {
      writer.uint32(144).bool(message.satisfiesPzs);
    }
    if (message.satisfiesPzi !== false) {
      writer.uint32(152).bool(message.satisfiesPzi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Index {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadataSchemaUri = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.metadata = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.deployedIndexes.push(DeployedIndexRef.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = Index_LabelsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.labels[entry9.key] = entry9.value;
          }
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.indexStats = IndexStats.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.indexUpdateMethod = reader.int32() as any;
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.encryptionSpec = EncryptionSpec.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.satisfiesPzs = reader.bool();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.satisfiesPzi = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Index {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      metadataSchemaUri: isSet(object.metadataSchemaUri) ? globalThis.String(object.metadataSchemaUri) : "",
      metadata: isSet(object?.metadata) ? object.metadata : undefined,
      deployedIndexes: globalThis.Array.isArray(object?.deployedIndexes)
        ? object.deployedIndexes.map((e: any) => DeployedIndexRef.fromJSON(e))
        : [],
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      indexStats: isSet(object.indexStats) ? IndexStats.fromJSON(object.indexStats) : undefined,
      indexUpdateMethod: isSet(object.indexUpdateMethod)
        ? index_IndexUpdateMethodFromJSON(object.indexUpdateMethod)
        : 0,
      encryptionSpec: isSet(object.encryptionSpec) ? EncryptionSpec.fromJSON(object.encryptionSpec) : undefined,
      satisfiesPzs: isSet(object.satisfiesPzs) ? globalThis.Boolean(object.satisfiesPzs) : false,
      satisfiesPzi: isSet(object.satisfiesPzi) ? globalThis.Boolean(object.satisfiesPzi) : false,
    };
  },

  toJSON(message: Index): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.metadataSchemaUri !== "") {
      obj.metadataSchemaUri = message.metadataSchemaUri;
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    if (message.deployedIndexes?.length) {
      obj.deployedIndexes = message.deployedIndexes.map((e) => DeployedIndexRef.toJSON(e));
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.indexStats !== undefined) {
      obj.indexStats = IndexStats.toJSON(message.indexStats);
    }
    if (message.indexUpdateMethod !== 0) {
      obj.indexUpdateMethod = index_IndexUpdateMethodToJSON(message.indexUpdateMethod);
    }
    if (message.encryptionSpec !== undefined) {
      obj.encryptionSpec = EncryptionSpec.toJSON(message.encryptionSpec);
    }
    if (message.satisfiesPzs !== false) {
      obj.satisfiesPzs = message.satisfiesPzs;
    }
    if (message.satisfiesPzi !== false) {
      obj.satisfiesPzi = message.satisfiesPzi;
    }
    return obj;
  },

  create(base?: DeepPartial<Index>): Index {
    return Index.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Index>): Index {
    const message = createBaseIndex();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.metadataSchemaUri = object.metadataSchemaUri ?? "";
    message.metadata = object.metadata ?? undefined;
    message.deployedIndexes = object.deployedIndexes?.map((e) => DeployedIndexRef.fromPartial(e)) || [];
    message.etag = object.etag ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.indexStats = (object.indexStats !== undefined && object.indexStats !== null)
      ? IndexStats.fromPartial(object.indexStats)
      : undefined;
    message.indexUpdateMethod = object.indexUpdateMethod ?? 0;
    message.encryptionSpec = (object.encryptionSpec !== undefined && object.encryptionSpec !== null)
      ? EncryptionSpec.fromPartial(object.encryptionSpec)
      : undefined;
    message.satisfiesPzs = object.satisfiesPzs ?? false;
    message.satisfiesPzi = object.satisfiesPzi ?? false;
    return message;
  },
};

function createBaseIndex_LabelsEntry(): Index_LabelsEntry {
  return { key: "", value: "" };
}

export const Index_LabelsEntry: MessageFns<Index_LabelsEntry> = {
  encode(message: Index_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Index_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndex_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Index_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Index_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Index_LabelsEntry>): Index_LabelsEntry {
    return Index_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Index_LabelsEntry>): Index_LabelsEntry {
    const message = createBaseIndex_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseIndexDatapoint(): IndexDatapoint {
  return {
    datapointId: "",
    featureVector: [],
    sparseEmbedding: undefined,
    restricts: [],
    numericRestricts: [],
    crowdingTag: undefined,
  };
}

export const IndexDatapoint: MessageFns<IndexDatapoint> = {
  encode(message: IndexDatapoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.datapointId !== "") {
      writer.uint32(10).string(message.datapointId);
    }
    writer.uint32(18).fork();
    for (const v of message.featureVector) {
      writer.float(v);
    }
    writer.join();
    if (message.sparseEmbedding !== undefined) {
      IndexDatapoint_SparseEmbedding.encode(message.sparseEmbedding, writer.uint32(58).fork()).join();
    }
    for (const v of message.restricts) {
      IndexDatapoint_Restriction.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.numericRestricts) {
      IndexDatapoint_NumericRestriction.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.crowdingTag !== undefined) {
      IndexDatapoint_CrowdingTag.encode(message.crowdingTag, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IndexDatapoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndexDatapoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.datapointId = reader.string();
          continue;
        case 2:
          if (tag === 21) {
            message.featureVector.push(reader.float());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.featureVector.push(reader.float());
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.sparseEmbedding = IndexDatapoint_SparseEmbedding.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.restricts.push(IndexDatapoint_Restriction.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.numericRestricts.push(IndexDatapoint_NumericRestriction.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.crowdingTag = IndexDatapoint_CrowdingTag.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IndexDatapoint {
    return {
      datapointId: isSet(object.datapointId) ? globalThis.String(object.datapointId) : "",
      featureVector: globalThis.Array.isArray(object?.featureVector)
        ? object.featureVector.map((e: any) => globalThis.Number(e))
        : [],
      sparseEmbedding: isSet(object.sparseEmbedding)
        ? IndexDatapoint_SparseEmbedding.fromJSON(object.sparseEmbedding)
        : undefined,
      restricts: globalThis.Array.isArray(object?.restricts)
        ? object.restricts.map((e: any) => IndexDatapoint_Restriction.fromJSON(e))
        : [],
      numericRestricts: globalThis.Array.isArray(object?.numericRestricts)
        ? object.numericRestricts.map((e: any) => IndexDatapoint_NumericRestriction.fromJSON(e))
        : [],
      crowdingTag: isSet(object.crowdingTag) ? IndexDatapoint_CrowdingTag.fromJSON(object.crowdingTag) : undefined,
    };
  },

  toJSON(message: IndexDatapoint): unknown {
    const obj: any = {};
    if (message.datapointId !== "") {
      obj.datapointId = message.datapointId;
    }
    if (message.featureVector?.length) {
      obj.featureVector = message.featureVector;
    }
    if (message.sparseEmbedding !== undefined) {
      obj.sparseEmbedding = IndexDatapoint_SparseEmbedding.toJSON(message.sparseEmbedding);
    }
    if (message.restricts?.length) {
      obj.restricts = message.restricts.map((e) => IndexDatapoint_Restriction.toJSON(e));
    }
    if (message.numericRestricts?.length) {
      obj.numericRestricts = message.numericRestricts.map((e) => IndexDatapoint_NumericRestriction.toJSON(e));
    }
    if (message.crowdingTag !== undefined) {
      obj.crowdingTag = IndexDatapoint_CrowdingTag.toJSON(message.crowdingTag);
    }
    return obj;
  },

  create(base?: DeepPartial<IndexDatapoint>): IndexDatapoint {
    return IndexDatapoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IndexDatapoint>): IndexDatapoint {
    const message = createBaseIndexDatapoint();
    message.datapointId = object.datapointId ?? "";
    message.featureVector = object.featureVector?.map((e) => e) || [];
    message.sparseEmbedding = (object.sparseEmbedding !== undefined && object.sparseEmbedding !== null)
      ? IndexDatapoint_SparseEmbedding.fromPartial(object.sparseEmbedding)
      : undefined;
    message.restricts = object.restricts?.map((e) => IndexDatapoint_Restriction.fromPartial(e)) || [];
    message.numericRestricts = object.numericRestricts?.map((e) => IndexDatapoint_NumericRestriction.fromPartial(e)) ||
      [];
    message.crowdingTag = (object.crowdingTag !== undefined && object.crowdingTag !== null)
      ? IndexDatapoint_CrowdingTag.fromPartial(object.crowdingTag)
      : undefined;
    return message;
  },
};

function createBaseIndexDatapoint_SparseEmbedding(): IndexDatapoint_SparseEmbedding {
  return { values: [], dimensions: [] };
}

export const IndexDatapoint_SparseEmbedding: MessageFns<IndexDatapoint_SparseEmbedding> = {
  encode(message: IndexDatapoint_SparseEmbedding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.values) {
      writer.float(v);
    }
    writer.join();
    writer.uint32(18).fork();
    for (const v of message.dimensions) {
      writer.int64(v.toString());
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IndexDatapoint_SparseEmbedding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndexDatapoint_SparseEmbedding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.values.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(reader.float());
            }

            continue;
          }

          break;
        case 2:
          if (tag === 16) {
            message.dimensions.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.dimensions.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IndexDatapoint_SparseEmbedding {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.Number(e)) : [],
      dimensions: globalThis.Array.isArray(object?.dimensions)
        ? object.dimensions.map((e: any) => Long.fromValue(e))
        : [],
    };
  },

  toJSON(message: IndexDatapoint_SparseEmbedding): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    if (message.dimensions?.length) {
      obj.dimensions = message.dimensions.map((e) => (e || Long.ZERO).toString());
    }
    return obj;
  },

  create(base?: DeepPartial<IndexDatapoint_SparseEmbedding>): IndexDatapoint_SparseEmbedding {
    return IndexDatapoint_SparseEmbedding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IndexDatapoint_SparseEmbedding>): IndexDatapoint_SparseEmbedding {
    const message = createBaseIndexDatapoint_SparseEmbedding();
    message.values = object.values?.map((e) => e) || [];
    message.dimensions = object.dimensions?.map((e) => Long.fromValue(e)) || [];
    return message;
  },
};

function createBaseIndexDatapoint_Restriction(): IndexDatapoint_Restriction {
  return { namespace: "", allowList: [], denyList: [] };
}

export const IndexDatapoint_Restriction: MessageFns<IndexDatapoint_Restriction> = {
  encode(message: IndexDatapoint_Restriction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== "") {
      writer.uint32(10).string(message.namespace);
    }
    for (const v of message.allowList) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.denyList) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IndexDatapoint_Restriction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndexDatapoint_Restriction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.allowList.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.denyList.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IndexDatapoint_Restriction {
    return {
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      allowList: globalThis.Array.isArray(object?.allowList)
        ? object.allowList.map((e: any) => globalThis.String(e))
        : [],
      denyList: globalThis.Array.isArray(object?.denyList) ? object.denyList.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: IndexDatapoint_Restriction): unknown {
    const obj: any = {};
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.allowList?.length) {
      obj.allowList = message.allowList;
    }
    if (message.denyList?.length) {
      obj.denyList = message.denyList;
    }
    return obj;
  },

  create(base?: DeepPartial<IndexDatapoint_Restriction>): IndexDatapoint_Restriction {
    return IndexDatapoint_Restriction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IndexDatapoint_Restriction>): IndexDatapoint_Restriction {
    const message = createBaseIndexDatapoint_Restriction();
    message.namespace = object.namespace ?? "";
    message.allowList = object.allowList?.map((e) => e) || [];
    message.denyList = object.denyList?.map((e) => e) || [];
    return message;
  },
};

function createBaseIndexDatapoint_NumericRestriction(): IndexDatapoint_NumericRestriction {
  return { valueInt: undefined, valueFloat: undefined, valueDouble: undefined, namespace: "", op: 0 };
}

export const IndexDatapoint_NumericRestriction: MessageFns<IndexDatapoint_NumericRestriction> = {
  encode(message: IndexDatapoint_NumericRestriction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valueInt !== undefined) {
      writer.uint32(16).int64(message.valueInt.toString());
    }
    if (message.valueFloat !== undefined) {
      writer.uint32(29).float(message.valueFloat);
    }
    if (message.valueDouble !== undefined) {
      writer.uint32(33).double(message.valueDouble);
    }
    if (message.namespace !== "") {
      writer.uint32(10).string(message.namespace);
    }
    if (message.op !== 0) {
      writer.uint32(40).int32(message.op);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IndexDatapoint_NumericRestriction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndexDatapoint_NumericRestriction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.valueInt = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.valueFloat = reader.float();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.valueDouble = reader.double();
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IndexDatapoint_NumericRestriction {
    return {
      valueInt: isSet(object.valueInt) ? Long.fromValue(object.valueInt) : undefined,
      valueFloat: isSet(object.valueFloat) ? globalThis.Number(object.valueFloat) : undefined,
      valueDouble: isSet(object.valueDouble) ? globalThis.Number(object.valueDouble) : undefined,
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      op: isSet(object.op) ? indexDatapoint_NumericRestriction_OperatorFromJSON(object.op) : 0,
    };
  },

  toJSON(message: IndexDatapoint_NumericRestriction): unknown {
    const obj: any = {};
    if (message.valueInt !== undefined) {
      obj.valueInt = (message.valueInt || Long.ZERO).toString();
    }
    if (message.valueFloat !== undefined) {
      obj.valueFloat = message.valueFloat;
    }
    if (message.valueDouble !== undefined) {
      obj.valueDouble = message.valueDouble;
    }
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.op !== 0) {
      obj.op = indexDatapoint_NumericRestriction_OperatorToJSON(message.op);
    }
    return obj;
  },

  create(base?: DeepPartial<IndexDatapoint_NumericRestriction>): IndexDatapoint_NumericRestriction {
    return IndexDatapoint_NumericRestriction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IndexDatapoint_NumericRestriction>): IndexDatapoint_NumericRestriction {
    const message = createBaseIndexDatapoint_NumericRestriction();
    message.valueInt = (object.valueInt !== undefined && object.valueInt !== null)
      ? Long.fromValue(object.valueInt)
      : undefined;
    message.valueFloat = object.valueFloat ?? undefined;
    message.valueDouble = object.valueDouble ?? undefined;
    message.namespace = object.namespace ?? "";
    message.op = object.op ?? 0;
    return message;
  },
};

function createBaseIndexDatapoint_CrowdingTag(): IndexDatapoint_CrowdingTag {
  return { crowdingAttribute: "" };
}

export const IndexDatapoint_CrowdingTag: MessageFns<IndexDatapoint_CrowdingTag> = {
  encode(message: IndexDatapoint_CrowdingTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.crowdingAttribute !== "") {
      writer.uint32(10).string(message.crowdingAttribute);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IndexDatapoint_CrowdingTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndexDatapoint_CrowdingTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.crowdingAttribute = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IndexDatapoint_CrowdingTag {
    return { crowdingAttribute: isSet(object.crowdingAttribute) ? globalThis.String(object.crowdingAttribute) : "" };
  },

  toJSON(message: IndexDatapoint_CrowdingTag): unknown {
    const obj: any = {};
    if (message.crowdingAttribute !== "") {
      obj.crowdingAttribute = message.crowdingAttribute;
    }
    return obj;
  },

  create(base?: DeepPartial<IndexDatapoint_CrowdingTag>): IndexDatapoint_CrowdingTag {
    return IndexDatapoint_CrowdingTag.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IndexDatapoint_CrowdingTag>): IndexDatapoint_CrowdingTag {
    const message = createBaseIndexDatapoint_CrowdingTag();
    message.crowdingAttribute = object.crowdingAttribute ?? "";
    return message;
  },
};

function createBaseIndexStats(): IndexStats {
  return { vectorsCount: Long.ZERO, sparseVectorsCount: Long.ZERO, shardsCount: 0 };
}

export const IndexStats: MessageFns<IndexStats> = {
  encode(message: IndexStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.vectorsCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.vectorsCount.toString());
    }
    if (!message.sparseVectorsCount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.sparseVectorsCount.toString());
    }
    if (message.shardsCount !== 0) {
      writer.uint32(16).int32(message.shardsCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IndexStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndexStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.vectorsCount = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sparseVectorsCount = Long.fromString(reader.int64().toString());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.shardsCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IndexStats {
    return {
      vectorsCount: isSet(object.vectorsCount) ? Long.fromValue(object.vectorsCount) : Long.ZERO,
      sparseVectorsCount: isSet(object.sparseVectorsCount) ? Long.fromValue(object.sparseVectorsCount) : Long.ZERO,
      shardsCount: isSet(object.shardsCount) ? globalThis.Number(object.shardsCount) : 0,
    };
  },

  toJSON(message: IndexStats): unknown {
    const obj: any = {};
    if (!message.vectorsCount.equals(Long.ZERO)) {
      obj.vectorsCount = (message.vectorsCount || Long.ZERO).toString();
    }
    if (!message.sparseVectorsCount.equals(Long.ZERO)) {
      obj.sparseVectorsCount = (message.sparseVectorsCount || Long.ZERO).toString();
    }
    if (message.shardsCount !== 0) {
      obj.shardsCount = Math.round(message.shardsCount);
    }
    return obj;
  },

  create(base?: DeepPartial<IndexStats>): IndexStats {
    return IndexStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IndexStats>): IndexStats {
    const message = createBaseIndexStats();
    message.vectorsCount = (object.vectorsCount !== undefined && object.vectorsCount !== null)
      ? Long.fromValue(object.vectorsCount)
      : Long.ZERO;
    message.sparseVectorsCount = (object.sparseVectorsCount !== undefined && object.sparseVectorsCount !== null)
      ? Long.fromValue(object.sparseVectorsCount)
      : Long.ZERO;
    message.shardsCount = object.shardsCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
