// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/model_monitoring_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Interval } from "../../../type/interval.js";
import { ModelMonitor } from "./model_monitor.js";
import { ModelMonitoringAlert } from "./model_monitoring_alert.js";
import { ModelMonitoringJob } from "./model_monitoring_job.js";
import { ModelMonitoringStats, SearchModelMonitoringStatsFilter } from "./model_monitoring_stats.js";
import { GenericOperationMetadata } from "./operation.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Request message for
 * [ModelMonitoringService.CreateModelMonitor][google.cloud.aiplatform.v1beta1.ModelMonitoringService.CreateModelMonitor].
 */
export interface CreateModelMonitorRequest {
  /**
   * Required. The resource name of the Location to create the ModelMonitor in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The ModelMonitor to create. */
  modelMonitor:
    | ModelMonitor
    | undefined;
  /**
   * Optional. The ID to use for the Model Monitor, which will become the final
   * component of the model monitor resource name.
   *
   * The maximum length is 63 characters, and valid characters are
   * `/^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$/`.
   */
  modelMonitorId: string;
}

/**
 * Runtime operation information for
 * [ModelMonitoringService.CreateModelMonitor][google.cloud.aiplatform.v1beta1.ModelMonitoringService.CreateModelMonitor].
 */
export interface CreateModelMonitorOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [ModelMonitoringService.UpdateModelMonitor][google.cloud.aiplatform.v1beta1.ModelMonitoringService.UpdateModelMonitor].
 */
export interface UpdateModelMonitorRequest {
  /**
   * Required. The model monitoring configuration which replaces the resource on
   * the server.
   */
  modelMonitor:
    | ModelMonitor
    | undefined;
  /** Required. Mask specifying which fields to update. */
  updateMask: string[] | undefined;
}

/**
 * Runtime operation information for
 * [ModelMonitoringService.UpdateModelMonitor][google.cloud.aiplatform.v1beta1.ModelMonitoringService.UpdateModelMonitor].
 */
export interface UpdateModelMonitorOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [ModelMonitoringService.GetModelMonitor][google.cloud.aiplatform.v1beta1.ModelMonitoringService.GetModelMonitor].
 */
export interface GetModelMonitorRequest {
  /**
   * Required. The name of the ModelMonitor resource.
   * Format:
   * `projects/{project}/locations/{location}/modelMonitors/{model_monitor}`
   */
  name: string;
}

/**
 * Request message for
 * [ModelMonitoringService.ListModelMonitors][google.cloud.aiplatform.v1beta1.ModelMonitoringService.ListModelMonitors].
 */
export interface ListModelMonitorsRequest {
  /**
   * Required. The resource name of the Location to list the ModelMonitors from.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * The standard list filter.
   * More detail in [AIP-160](https://google.aip.dev/160).
   */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /** The standard list page token. */
  pageToken: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [ModelMonitoringService.ListModelMonitors][google.cloud.aiplatform.v1beta1.ModelMonitoringService.ListModelMonitors]
 */
export interface ListModelMonitorsResponse {
  /** List of ModelMonitor in the requested page. */
  modelMonitors: ModelMonitor[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListModelMonitorsRequest.page_token][google.cloud.aiplatform.v1beta1.ListModelMonitorsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [ModelMonitoringService.DeleteModelMonitor][google.cloud.aiplatform.v1beta1.ModelMonitoringService.DeleteModelMonitor].
 */
export interface DeleteModelMonitorRequest {
  /**
   * Required. The name of the ModelMonitor resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/modelMonitords/{model_monitor}`
   */
  name: string;
  /** Optional. Force delete the model monitor with schedules. */
  force: boolean;
}

/**
 * Request message for
 * [ModelMonitoringService.CreateModelMonitoringJob][google.cloud.aiplatform.v1beta1.ModelMonitoringService.CreateModelMonitoringJob].
 */
export interface CreateModelMonitoringJobRequest {
  /**
   * Required. The parent of the ModelMonitoringJob.
   * Format:
   * `projects/{project}/locations/{location}/modelMoniitors/{model_monitor}`
   */
  parent: string;
  /** Required. The ModelMonitoringJob to create */
  modelMonitoringJob:
    | ModelMonitoringJob
    | undefined;
  /**
   * Optional. The ID to use for the Model Monitoring Job, which will become the
   * final component of the model monitoring job resource name.
   *
   * The maximum length is 63 characters, and valid characters are
   * `/^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$/`.
   */
  modelMonitoringJobId: string;
}

/**
 * Request message for
 * [ModelMonitoringService.GetModelMonitoringJob][google.cloud.aiplatform.v1beta1.ModelMonitoringService.GetModelMonitoringJob].
 */
export interface GetModelMonitoringJobRequest {
  /**
   * Required. The resource name of the ModelMonitoringJob.
   * Format:
   * `projects/{project}/locations/{location}/modelMonitors/{model_monitor}/modelMonitoringJobs/{model_monitoring_job}`
   */
  name: string;
}

/**
 * Request message for
 * [ModelMonitoringService.ListModelMonitoringJobs][google.cloud.aiplatform.v1beta1.ModelMonitoringService.ListModelMonitoringJobs].
 */
export interface ListModelMonitoringJobsRequest {
  /**
   * Required. The parent of the ModelMonitoringJob.
   * Format:
   * `projects/{project}/locations/{location}/modelMonitors/{model_monitor}`
   */
  parent: string;
  /**
   * The standard list filter.
   * More detail in [AIP-160](https://google.aip.dev/160).
   */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /** The standard list page token. */
  pageToken: string;
  /** Mask specifying which fields to read */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [ModelMonitoringService.ListModelMonitoringJobs][google.cloud.aiplatform.v1beta1.ModelMonitoringService.ListModelMonitoringJobs].
 */
export interface ListModelMonitoringJobsResponse {
  /**
   * A list of ModelMonitoringJobs that matches the specified filter
   * in the request.
   */
  modelMonitoringJobs: ModelMonitoringJob[];
  /** The standard List next-page token. */
  nextPageToken: string;
}

/**
 * Request message for
 * [ModelMonitoringService.DeleteModelMonitoringJob][google.cloud.aiplatform.v1beta1.ModelMonitoringService.DeleteModelMonitoringJob].
 */
export interface DeleteModelMonitoringJobRequest {
  /**
   * Required. The resource name of the model monitoring job to delete.
   * Format:
   * `projects/{project}/locations/{location}/modelMonitors/{model_monitor}/modelMonitoringJobs/{model_monitoring_job}`
   */
  name: string;
}

/**
 * Request message for
 * [ModelMonitoringService.SearchModelMonitoringStats][google.cloud.aiplatform.v1beta1.ModelMonitoringService.SearchModelMonitoringStats].
 */
export interface SearchModelMonitoringStatsRequest {
  /**
   * Required. ModelMonitor resource name.
   * Format:
   * `projects/{project}/locations/{location}/modelMonitors/{model_monitor}`
   */
  modelMonitor: string;
  /** Filter for search different stats. */
  statsFilter:
    | SearchModelMonitoringStatsFilter
    | undefined;
  /** The time interval for which results should be returned. */
  timeInterval:
    | Interval
    | undefined;
  /** The standard list page size. */
  pageSize: number;
  /**
   * A page token received from a previous
   * [ModelMonitoringService.SearchModelMonitoringStats][google.cloud.aiplatform.v1beta1.ModelMonitoringService.SearchModelMonitoringStats]
   * call.
   */
  pageToken: string;
}

/**
 * Response message for
 * [ModelMonitoringService.SearchModelMonitoringStats][google.cloud.aiplatform.v1beta1.ModelMonitoringService.SearchModelMonitoringStats].
 */
export interface SearchModelMonitoringStatsResponse {
  /** Stats retrieved for requested objectives. */
  monitoringStats: ModelMonitoringStats[];
  /**
   * The page token that can be used by the next
   * [ModelMonitoringService.SearchModelMonitoringStats][google.cloud.aiplatform.v1beta1.ModelMonitoringService.SearchModelMonitoringStats]
   * call.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [ModelMonitoringService.SearchModelMonitoringAlerts][google.cloud.aiplatform.v1beta1.ModelMonitoringService.SearchModelMonitoringAlerts].
 */
export interface SearchModelMonitoringAlertsRequest {
  /**
   * Required. ModelMonitor resource name.
   * Format:
   * `projects/{project}/locations/{location}/modelMonitors/{model_monitor}`
   */
  modelMonitor: string;
  /** If non-empty, returns the alerts of this model monitoring job. */
  modelMonitoringJob: string;
  /** If non-empty, returns the alerts in this time interval. */
  alertTimeInterval:
    | Interval
    | undefined;
  /** If non-empty, returns the alerts of this stats_name. */
  statsName: string;
  /**
   * If non-empty, returns the alerts of this objective type.
   * Supported monitoring objectives:
   * `raw-feature-drift`
   * `prediction-output-drift`
   * `feature-attribution`
   */
  objectiveType: string;
  /** The standard list page size. */
  pageSize: number;
  /**
   * A page token received from a previous
   * [ModelMonitoringService.SearchModelMonitoringAlerts][google.cloud.aiplatform.v1beta1.ModelMonitoringService.SearchModelMonitoringAlerts]
   * call.
   */
  pageToken: string;
}

/**
 * Response message for
 * [ModelMonitoringService.SearchModelMonitoringAlerts][google.cloud.aiplatform.v1beta1.ModelMonitoringService.SearchModelMonitoringAlerts].
 */
export interface SearchModelMonitoringAlertsResponse {
  /**
   * Alerts retrieved for the requested objectives. Sorted by alert time
   * descendingly.
   */
  modelMonitoringAlerts: ModelMonitoringAlert[];
  /** The total number of alerts retrieved by the requested objectives. */
  totalNumberAlerts: Long;
  /**
   * The page token that can be used by the next
   * [ModelMonitoringService.SearchModelMonitoringAlerts][google.cloud.aiplatform.v1beta1.ModelMonitoringService.SearchModelMonitoringAlerts]
   * call.
   */
  nextPageToken: string;
}

function createBaseCreateModelMonitorRequest(): CreateModelMonitorRequest {
  return { parent: "", modelMonitor: undefined, modelMonitorId: "" };
}

export const CreateModelMonitorRequest: MessageFns<CreateModelMonitorRequest> = {
  encode(message: CreateModelMonitorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.modelMonitor !== undefined) {
      ModelMonitor.encode(message.modelMonitor, writer.uint32(18).fork()).join();
    }
    if (message.modelMonitorId !== "") {
      writer.uint32(26).string(message.modelMonitorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModelMonitorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModelMonitorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelMonitor = ModelMonitor.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modelMonitorId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateModelMonitorRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      modelMonitor: isSet(object.modelMonitor) ? ModelMonitor.fromJSON(object.modelMonitor) : undefined,
      modelMonitorId: isSet(object.modelMonitorId) ? globalThis.String(object.modelMonitorId) : "",
    };
  },

  toJSON(message: CreateModelMonitorRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.modelMonitor !== undefined) {
      obj.modelMonitor = ModelMonitor.toJSON(message.modelMonitor);
    }
    if (message.modelMonitorId !== "") {
      obj.modelMonitorId = message.modelMonitorId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateModelMonitorRequest>): CreateModelMonitorRequest {
    return CreateModelMonitorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateModelMonitorRequest>): CreateModelMonitorRequest {
    const message = createBaseCreateModelMonitorRequest();
    message.parent = object.parent ?? "";
    message.modelMonitor = (object.modelMonitor !== undefined && object.modelMonitor !== null)
      ? ModelMonitor.fromPartial(object.modelMonitor)
      : undefined;
    message.modelMonitorId = object.modelMonitorId ?? "";
    return message;
  },
};

function createBaseCreateModelMonitorOperationMetadata(): CreateModelMonitorOperationMetadata {
  return { genericMetadata: undefined };
}

export const CreateModelMonitorOperationMetadata: MessageFns<CreateModelMonitorOperationMetadata> = {
  encode(message: CreateModelMonitorOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModelMonitorOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModelMonitorOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateModelMonitorOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: CreateModelMonitorOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateModelMonitorOperationMetadata>): CreateModelMonitorOperationMetadata {
    return CreateModelMonitorOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateModelMonitorOperationMetadata>): CreateModelMonitorOperationMetadata {
    const message = createBaseCreateModelMonitorOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseUpdateModelMonitorRequest(): UpdateModelMonitorRequest {
  return { modelMonitor: undefined, updateMask: undefined };
}

export const UpdateModelMonitorRequest: MessageFns<UpdateModelMonitorRequest> = {
  encode(message: UpdateModelMonitorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelMonitor !== undefined) {
      ModelMonitor.encode(message.modelMonitor, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateModelMonitorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateModelMonitorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelMonitor = ModelMonitor.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateModelMonitorRequest {
    return {
      modelMonitor: isSet(object.modelMonitor) ? ModelMonitor.fromJSON(object.modelMonitor) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateModelMonitorRequest): unknown {
    const obj: any = {};
    if (message.modelMonitor !== undefined) {
      obj.modelMonitor = ModelMonitor.toJSON(message.modelMonitor);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateModelMonitorRequest>): UpdateModelMonitorRequest {
    return UpdateModelMonitorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateModelMonitorRequest>): UpdateModelMonitorRequest {
    const message = createBaseUpdateModelMonitorRequest();
    message.modelMonitor = (object.modelMonitor !== undefined && object.modelMonitor !== null)
      ? ModelMonitor.fromPartial(object.modelMonitor)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateModelMonitorOperationMetadata(): UpdateModelMonitorOperationMetadata {
  return { genericMetadata: undefined };
}

export const UpdateModelMonitorOperationMetadata: MessageFns<UpdateModelMonitorOperationMetadata> = {
  encode(message: UpdateModelMonitorOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateModelMonitorOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateModelMonitorOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateModelMonitorOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UpdateModelMonitorOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateModelMonitorOperationMetadata>): UpdateModelMonitorOperationMetadata {
    return UpdateModelMonitorOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateModelMonitorOperationMetadata>): UpdateModelMonitorOperationMetadata {
    const message = createBaseUpdateModelMonitorOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseGetModelMonitorRequest(): GetModelMonitorRequest {
  return { name: "" };
}

export const GetModelMonitorRequest: MessageFns<GetModelMonitorRequest> = {
  encode(message: GetModelMonitorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModelMonitorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModelMonitorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModelMonitorRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetModelMonitorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetModelMonitorRequest>): GetModelMonitorRequest {
    return GetModelMonitorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetModelMonitorRequest>): GetModelMonitorRequest {
    const message = createBaseGetModelMonitorRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListModelMonitorsRequest(): ListModelMonitorsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListModelMonitorsRequest: MessageFns<ListModelMonitorsRequest> = {
  encode(message: ListModelMonitorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelMonitorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelMonitorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelMonitorsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListModelMonitorsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelMonitorsRequest>): ListModelMonitorsRequest {
    return ListModelMonitorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelMonitorsRequest>): ListModelMonitorsRequest {
    const message = createBaseListModelMonitorsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListModelMonitorsResponse(): ListModelMonitorsResponse {
  return { modelMonitors: [], nextPageToken: "" };
}

export const ListModelMonitorsResponse: MessageFns<ListModelMonitorsResponse> = {
  encode(message: ListModelMonitorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.modelMonitors) {
      ModelMonitor.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelMonitorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelMonitorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelMonitors.push(ModelMonitor.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelMonitorsResponse {
    return {
      modelMonitors: globalThis.Array.isArray(object?.modelMonitors)
        ? object.modelMonitors.map((e: any) => ModelMonitor.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListModelMonitorsResponse): unknown {
    const obj: any = {};
    if (message.modelMonitors?.length) {
      obj.modelMonitors = message.modelMonitors.map((e) => ModelMonitor.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelMonitorsResponse>): ListModelMonitorsResponse {
    return ListModelMonitorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelMonitorsResponse>): ListModelMonitorsResponse {
    const message = createBaseListModelMonitorsResponse();
    message.modelMonitors = object.modelMonitors?.map((e) => ModelMonitor.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteModelMonitorRequest(): DeleteModelMonitorRequest {
  return { name: "", force: false };
}

export const DeleteModelMonitorRequest: MessageFns<DeleteModelMonitorRequest> = {
  encode(message: DeleteModelMonitorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteModelMonitorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteModelMonitorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteModelMonitorRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteModelMonitorRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteModelMonitorRequest>): DeleteModelMonitorRequest {
    return DeleteModelMonitorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteModelMonitorRequest>): DeleteModelMonitorRequest {
    const message = createBaseDeleteModelMonitorRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseCreateModelMonitoringJobRequest(): CreateModelMonitoringJobRequest {
  return { parent: "", modelMonitoringJob: undefined, modelMonitoringJobId: "" };
}

export const CreateModelMonitoringJobRequest: MessageFns<CreateModelMonitoringJobRequest> = {
  encode(message: CreateModelMonitoringJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.modelMonitoringJob !== undefined) {
      ModelMonitoringJob.encode(message.modelMonitoringJob, writer.uint32(18).fork()).join();
    }
    if (message.modelMonitoringJobId !== "") {
      writer.uint32(26).string(message.modelMonitoringJobId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModelMonitoringJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModelMonitoringJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelMonitoringJob = ModelMonitoringJob.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modelMonitoringJobId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateModelMonitoringJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      modelMonitoringJob: isSet(object.modelMonitoringJob)
        ? ModelMonitoringJob.fromJSON(object.modelMonitoringJob)
        : undefined,
      modelMonitoringJobId: isSet(object.modelMonitoringJobId) ? globalThis.String(object.modelMonitoringJobId) : "",
    };
  },

  toJSON(message: CreateModelMonitoringJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.modelMonitoringJob !== undefined) {
      obj.modelMonitoringJob = ModelMonitoringJob.toJSON(message.modelMonitoringJob);
    }
    if (message.modelMonitoringJobId !== "") {
      obj.modelMonitoringJobId = message.modelMonitoringJobId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateModelMonitoringJobRequest>): CreateModelMonitoringJobRequest {
    return CreateModelMonitoringJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateModelMonitoringJobRequest>): CreateModelMonitoringJobRequest {
    const message = createBaseCreateModelMonitoringJobRequest();
    message.parent = object.parent ?? "";
    message.modelMonitoringJob = (object.modelMonitoringJob !== undefined && object.modelMonitoringJob !== null)
      ? ModelMonitoringJob.fromPartial(object.modelMonitoringJob)
      : undefined;
    message.modelMonitoringJobId = object.modelMonitoringJobId ?? "";
    return message;
  },
};

function createBaseGetModelMonitoringJobRequest(): GetModelMonitoringJobRequest {
  return { name: "" };
}

export const GetModelMonitoringJobRequest: MessageFns<GetModelMonitoringJobRequest> = {
  encode(message: GetModelMonitoringJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModelMonitoringJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModelMonitoringJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModelMonitoringJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetModelMonitoringJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetModelMonitoringJobRequest>): GetModelMonitoringJobRequest {
    return GetModelMonitoringJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetModelMonitoringJobRequest>): GetModelMonitoringJobRequest {
    const message = createBaseGetModelMonitoringJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListModelMonitoringJobsRequest(): ListModelMonitoringJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListModelMonitoringJobsRequest: MessageFns<ListModelMonitoringJobsRequest> = {
  encode(message: ListModelMonitoringJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelMonitoringJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelMonitoringJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelMonitoringJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListModelMonitoringJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelMonitoringJobsRequest>): ListModelMonitoringJobsRequest {
    return ListModelMonitoringJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelMonitoringJobsRequest>): ListModelMonitoringJobsRequest {
    const message = createBaseListModelMonitoringJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListModelMonitoringJobsResponse(): ListModelMonitoringJobsResponse {
  return { modelMonitoringJobs: [], nextPageToken: "" };
}

export const ListModelMonitoringJobsResponse: MessageFns<ListModelMonitoringJobsResponse> = {
  encode(message: ListModelMonitoringJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.modelMonitoringJobs) {
      ModelMonitoringJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelMonitoringJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelMonitoringJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelMonitoringJobs.push(ModelMonitoringJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelMonitoringJobsResponse {
    return {
      modelMonitoringJobs: globalThis.Array.isArray(object?.modelMonitoringJobs)
        ? object.modelMonitoringJobs.map((e: any) => ModelMonitoringJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListModelMonitoringJobsResponse): unknown {
    const obj: any = {};
    if (message.modelMonitoringJobs?.length) {
      obj.modelMonitoringJobs = message.modelMonitoringJobs.map((e) => ModelMonitoringJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelMonitoringJobsResponse>): ListModelMonitoringJobsResponse {
    return ListModelMonitoringJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelMonitoringJobsResponse>): ListModelMonitoringJobsResponse {
    const message = createBaseListModelMonitoringJobsResponse();
    message.modelMonitoringJobs = object.modelMonitoringJobs?.map((e) => ModelMonitoringJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteModelMonitoringJobRequest(): DeleteModelMonitoringJobRequest {
  return { name: "" };
}

export const DeleteModelMonitoringJobRequest: MessageFns<DeleteModelMonitoringJobRequest> = {
  encode(message: DeleteModelMonitoringJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteModelMonitoringJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteModelMonitoringJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteModelMonitoringJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteModelMonitoringJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteModelMonitoringJobRequest>): DeleteModelMonitoringJobRequest {
    return DeleteModelMonitoringJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteModelMonitoringJobRequest>): DeleteModelMonitoringJobRequest {
    const message = createBaseDeleteModelMonitoringJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSearchModelMonitoringStatsRequest(): SearchModelMonitoringStatsRequest {
  return { modelMonitor: "", statsFilter: undefined, timeInterval: undefined, pageSize: 0, pageToken: "" };
}

export const SearchModelMonitoringStatsRequest: MessageFns<SearchModelMonitoringStatsRequest> = {
  encode(message: SearchModelMonitoringStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelMonitor !== "") {
      writer.uint32(10).string(message.modelMonitor);
    }
    if (message.statsFilter !== undefined) {
      SearchModelMonitoringStatsFilter.encode(message.statsFilter, writer.uint32(18).fork()).join();
    }
    if (message.timeInterval !== undefined) {
      Interval.encode(message.timeInterval, writer.uint32(26).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(42).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchModelMonitoringStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchModelMonitoringStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelMonitor = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.statsFilter = SearchModelMonitoringStatsFilter.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.timeInterval = Interval.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchModelMonitoringStatsRequest {
    return {
      modelMonitor: isSet(object.modelMonitor) ? globalThis.String(object.modelMonitor) : "",
      statsFilter: isSet(object.statsFilter)
        ? SearchModelMonitoringStatsFilter.fromJSON(object.statsFilter)
        : undefined,
      timeInterval: isSet(object.timeInterval) ? Interval.fromJSON(object.timeInterval) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchModelMonitoringStatsRequest): unknown {
    const obj: any = {};
    if (message.modelMonitor !== "") {
      obj.modelMonitor = message.modelMonitor;
    }
    if (message.statsFilter !== undefined) {
      obj.statsFilter = SearchModelMonitoringStatsFilter.toJSON(message.statsFilter);
    }
    if (message.timeInterval !== undefined) {
      obj.timeInterval = Interval.toJSON(message.timeInterval);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchModelMonitoringStatsRequest>): SearchModelMonitoringStatsRequest {
    return SearchModelMonitoringStatsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchModelMonitoringStatsRequest>): SearchModelMonitoringStatsRequest {
    const message = createBaseSearchModelMonitoringStatsRequest();
    message.modelMonitor = object.modelMonitor ?? "";
    message.statsFilter = (object.statsFilter !== undefined && object.statsFilter !== null)
      ? SearchModelMonitoringStatsFilter.fromPartial(object.statsFilter)
      : undefined;
    message.timeInterval = (object.timeInterval !== undefined && object.timeInterval !== null)
      ? Interval.fromPartial(object.timeInterval)
      : undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchModelMonitoringStatsResponse(): SearchModelMonitoringStatsResponse {
  return { monitoringStats: [], nextPageToken: "" };
}

export const SearchModelMonitoringStatsResponse: MessageFns<SearchModelMonitoringStatsResponse> = {
  encode(message: SearchModelMonitoringStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.monitoringStats) {
      ModelMonitoringStats.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchModelMonitoringStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchModelMonitoringStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.monitoringStats.push(ModelMonitoringStats.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchModelMonitoringStatsResponse {
    return {
      monitoringStats: globalThis.Array.isArray(object?.monitoringStats)
        ? object.monitoringStats.map((e: any) => ModelMonitoringStats.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchModelMonitoringStatsResponse): unknown {
    const obj: any = {};
    if (message.monitoringStats?.length) {
      obj.monitoringStats = message.monitoringStats.map((e) => ModelMonitoringStats.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchModelMonitoringStatsResponse>): SearchModelMonitoringStatsResponse {
    return SearchModelMonitoringStatsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchModelMonitoringStatsResponse>): SearchModelMonitoringStatsResponse {
    const message = createBaseSearchModelMonitoringStatsResponse();
    message.monitoringStats = object.monitoringStats?.map((e) => ModelMonitoringStats.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchModelMonitoringAlertsRequest(): SearchModelMonitoringAlertsRequest {
  return {
    modelMonitor: "",
    modelMonitoringJob: "",
    alertTimeInterval: undefined,
    statsName: "",
    objectiveType: "",
    pageSize: 0,
    pageToken: "",
  };
}

export const SearchModelMonitoringAlertsRequest: MessageFns<SearchModelMonitoringAlertsRequest> = {
  encode(message: SearchModelMonitoringAlertsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelMonitor !== "") {
      writer.uint32(10).string(message.modelMonitor);
    }
    if (message.modelMonitoringJob !== "") {
      writer.uint32(18).string(message.modelMonitoringJob);
    }
    if (message.alertTimeInterval !== undefined) {
      Interval.encode(message.alertTimeInterval, writer.uint32(26).fork()).join();
    }
    if (message.statsName !== "") {
      writer.uint32(34).string(message.statsName);
    }
    if (message.objectiveType !== "") {
      writer.uint32(42).string(message.objectiveType);
    }
    if (message.pageSize !== 0) {
      writer.uint32(48).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(58).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchModelMonitoringAlertsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchModelMonitoringAlertsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelMonitor = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelMonitoringJob = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.alertTimeInterval = Interval.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.statsName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.objectiveType = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchModelMonitoringAlertsRequest {
    return {
      modelMonitor: isSet(object.modelMonitor) ? globalThis.String(object.modelMonitor) : "",
      modelMonitoringJob: isSet(object.modelMonitoringJob) ? globalThis.String(object.modelMonitoringJob) : "",
      alertTimeInterval: isSet(object.alertTimeInterval) ? Interval.fromJSON(object.alertTimeInterval) : undefined,
      statsName: isSet(object.statsName) ? globalThis.String(object.statsName) : "",
      objectiveType: isSet(object.objectiveType) ? globalThis.String(object.objectiveType) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchModelMonitoringAlertsRequest): unknown {
    const obj: any = {};
    if (message.modelMonitor !== "") {
      obj.modelMonitor = message.modelMonitor;
    }
    if (message.modelMonitoringJob !== "") {
      obj.modelMonitoringJob = message.modelMonitoringJob;
    }
    if (message.alertTimeInterval !== undefined) {
      obj.alertTimeInterval = Interval.toJSON(message.alertTimeInterval);
    }
    if (message.statsName !== "") {
      obj.statsName = message.statsName;
    }
    if (message.objectiveType !== "") {
      obj.objectiveType = message.objectiveType;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchModelMonitoringAlertsRequest>): SearchModelMonitoringAlertsRequest {
    return SearchModelMonitoringAlertsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchModelMonitoringAlertsRequest>): SearchModelMonitoringAlertsRequest {
    const message = createBaseSearchModelMonitoringAlertsRequest();
    message.modelMonitor = object.modelMonitor ?? "";
    message.modelMonitoringJob = object.modelMonitoringJob ?? "";
    message.alertTimeInterval = (object.alertTimeInterval !== undefined && object.alertTimeInterval !== null)
      ? Interval.fromPartial(object.alertTimeInterval)
      : undefined;
    message.statsName = object.statsName ?? "";
    message.objectiveType = object.objectiveType ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchModelMonitoringAlertsResponse(): SearchModelMonitoringAlertsResponse {
  return { modelMonitoringAlerts: [], totalNumberAlerts: Long.ZERO, nextPageToken: "" };
}

export const SearchModelMonitoringAlertsResponse: MessageFns<SearchModelMonitoringAlertsResponse> = {
  encode(message: SearchModelMonitoringAlertsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.modelMonitoringAlerts) {
      ModelMonitoringAlert.encode(v!, writer.uint32(10).fork()).join();
    }
    if (!message.totalNumberAlerts.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.totalNumberAlerts.toString());
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchModelMonitoringAlertsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchModelMonitoringAlertsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelMonitoringAlerts.push(ModelMonitoringAlert.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.totalNumberAlerts = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchModelMonitoringAlertsResponse {
    return {
      modelMonitoringAlerts: globalThis.Array.isArray(object?.modelMonitoringAlerts)
        ? object.modelMonitoringAlerts.map((e: any) => ModelMonitoringAlert.fromJSON(e))
        : [],
      totalNumberAlerts: isSet(object.totalNumberAlerts) ? Long.fromValue(object.totalNumberAlerts) : Long.ZERO,
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchModelMonitoringAlertsResponse): unknown {
    const obj: any = {};
    if (message.modelMonitoringAlerts?.length) {
      obj.modelMonitoringAlerts = message.modelMonitoringAlerts.map((e) => ModelMonitoringAlert.toJSON(e));
    }
    if (!message.totalNumberAlerts.equals(Long.ZERO)) {
      obj.totalNumberAlerts = (message.totalNumberAlerts || Long.ZERO).toString();
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchModelMonitoringAlertsResponse>): SearchModelMonitoringAlertsResponse {
    return SearchModelMonitoringAlertsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchModelMonitoringAlertsResponse>): SearchModelMonitoringAlertsResponse {
    const message = createBaseSearchModelMonitoringAlertsResponse();
    message.modelMonitoringAlerts = object.modelMonitoringAlerts?.map((e) => ModelMonitoringAlert.fromPartial(e)) || [];
    message.totalNumberAlerts = (object.totalNumberAlerts !== undefined && object.totalNumberAlerts !== null)
      ? Long.fromValue(object.totalNumberAlerts)
      : Long.ZERO;
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * A service for creating and managing Vertex AI Model moitoring. This includes
 * `ModelMonitor` resources, `ModelMonitoringJob` resources.
 */
export type ModelMonitoringServiceDefinition = typeof ModelMonitoringServiceDefinition;
export const ModelMonitoringServiceDefinition = {
  name: "ModelMonitoringService",
  fullName: "google.cloud.aiplatform.v1beta1.ModelMonitoringService",
  methods: {
    /** Creates a ModelMonitor. */
    createModelMonitor: {
      name: "CreateModelMonitor",
      requestType: CreateModelMonitorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              51,
              10,
              12,
              77,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              18,
              35,
              67,
              114,
              101,
              97,
              116,
              101,
              77,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              111,
              100,
              101,
              108,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
            ]),
          ],
          578365826: [
            Buffer.from([
              71,
              58,
              13,
              109,
              111,
              100,
              101,
              108,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              34,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a ModelMonitor. */
    updateModelMonitor: {
      name: "UpdateModelMonitor",
      requestType: UpdateModelMonitorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              51,
              10,
              12,
              77,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              18,
              35,
              85,
              112,
              100,
              97,
              116,
              101,
              77,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              109,
              111,
              100,
              101,
              108,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              85,
              58,
              13,
              109,
              111,
              100,
              101,
              108,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              50,
              68,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              109,
              111,
              100,
              101,
              108,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets a ModelMonitor. */
    getModelMonitor: {
      name: "GetModelMonitor",
      requestType: GetModelMonitorRequest,
      requestStream: false,
      responseType: ModelMonitor,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists ModelMonitors in a Location. */
    listModelMonitors: {
      name: "ListModelMonitors",
      requestType: ListModelMonitorsRequest,
      requestStream: false,
      responseType: ListModelMonitorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              56,
              18,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a ModelMonitor. */
    deleteModelMonitor: {
      name: "DeleteModelMonitor",
      requestType: DeleteModelMonitorRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              56,
              42,
              54,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a ModelMonitoringJob. */
    createModelMonitoringJob: {
      name: "CreateModelMonitoringJob",
      requestType: CreateModelMonitoringJobRequest,
      requestStream: false,
      responseType: ModelMonitoringJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              111,
              100,
              101,
              108,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
            ]),
          ],
          578365826: [
            Buffer.from([
              100,
              58,
              20,
              109,
              111,
              100,
              101,
              108,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
              34,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a ModelMonitoringJob. */
    getModelMonitoringJob: {
      name: "GetModelMonitoringJob",
      requestType: GetModelMonitoringJobRequest,
      requestStream: false,
      responseType: ModelMonitoringJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              78,
              18,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists ModelMonitoringJobs.
     * Callers may choose to read across multiple Monitors as per
     * [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
     * character) as a wildcard character instead of modelMonitor id in the
     * parent. Format
     * `projects/{project_id}/locations/{location}/moodelMonitors/-/modelMonitoringJobs`
     */
    listModelMonitoringJobs: {
      name: "ListModelMonitoringJobs",
      requestType: ListModelMonitoringJobsRequest,
      requestStream: false,
      responseType: ListModelMonitoringJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              78,
              18,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a ModelMonitoringJob. */
    deleteModelMonitoringJob: {
      name: "DeleteModelMonitoringJob",
      requestType: DeleteModelMonitoringJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              78,
              42,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Searches Model Monitoring Stats generated within a given time window. */
    searchModelMonitoringStats: {
      name: "SearchModelMonitoringStats",
      requestType: SearchModelMonitoringStatsRequest,
      requestStream: false,
      responseType: SearchModelMonitoringStatsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 109, 111, 100, 101, 108, 95, 109, 111, 110, 105, 116, 111, 114])],
          578365826: [
            Buffer.from([
              95,
              58,
              1,
              42,
              34,
              90,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              109,
              111,
              100,
              101,
              108,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              77,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              83,
              116,
              97,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Returns the Model Monitoring alerts. */
    searchModelMonitoringAlerts: {
      name: "SearchModelMonitoringAlerts",
      requestType: SearchModelMonitoringAlertsRequest,
      requestStream: false,
      responseType: SearchModelMonitoringAlertsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([13, 109, 111, 100, 101, 108, 95, 109, 111, 110, 105, 116, 111, 114])],
          578365826: [
            Buffer.from([
              96,
              58,
              1,
              42,
              34,
              91,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              109,
              111,
              100,
              101,
              108,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              77,
              111,
              100,
              101,
              108,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              65,
              108,
              101,
              114,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ModelMonitoringServiceImplementation<CallContextExt = {}> {
  /** Creates a ModelMonitor. */
  createModelMonitor(
    request: CreateModelMonitorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a ModelMonitor. */
  updateModelMonitor(
    request: UpdateModelMonitorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets a ModelMonitor. */
  getModelMonitor(
    request: GetModelMonitorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModelMonitor>>;
  /** Lists ModelMonitors in a Location. */
  listModelMonitors(
    request: ListModelMonitorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListModelMonitorsResponse>>;
  /** Deletes a ModelMonitor. */
  deleteModelMonitor(
    request: DeleteModelMonitorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Creates a ModelMonitoringJob. */
  createModelMonitoringJob(
    request: CreateModelMonitoringJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModelMonitoringJob>>;
  /** Gets a ModelMonitoringJob. */
  getModelMonitoringJob(
    request: GetModelMonitoringJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModelMonitoringJob>>;
  /**
   * Lists ModelMonitoringJobs.
   * Callers may choose to read across multiple Monitors as per
   * [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
   * character) as a wildcard character instead of modelMonitor id in the
   * parent. Format
   * `projects/{project_id}/locations/{location}/moodelMonitors/-/modelMonitoringJobs`
   */
  listModelMonitoringJobs(
    request: ListModelMonitoringJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListModelMonitoringJobsResponse>>;
  /** Deletes a ModelMonitoringJob. */
  deleteModelMonitoringJob(
    request: DeleteModelMonitoringJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Searches Model Monitoring Stats generated within a given time window. */
  searchModelMonitoringStats(
    request: SearchModelMonitoringStatsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchModelMonitoringStatsResponse>>;
  /** Returns the Model Monitoring alerts. */
  searchModelMonitoringAlerts(
    request: SearchModelMonitoringAlertsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchModelMonitoringAlertsResponse>>;
}

export interface ModelMonitoringServiceClient<CallOptionsExt = {}> {
  /** Creates a ModelMonitor. */
  createModelMonitor(
    request: DeepPartial<CreateModelMonitorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a ModelMonitor. */
  updateModelMonitor(
    request: DeepPartial<UpdateModelMonitorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets a ModelMonitor. */
  getModelMonitor(
    request: DeepPartial<GetModelMonitorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModelMonitor>;
  /** Lists ModelMonitors in a Location. */
  listModelMonitors(
    request: DeepPartial<ListModelMonitorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListModelMonitorsResponse>;
  /** Deletes a ModelMonitor. */
  deleteModelMonitor(
    request: DeepPartial<DeleteModelMonitorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Creates a ModelMonitoringJob. */
  createModelMonitoringJob(
    request: DeepPartial<CreateModelMonitoringJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModelMonitoringJob>;
  /** Gets a ModelMonitoringJob. */
  getModelMonitoringJob(
    request: DeepPartial<GetModelMonitoringJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModelMonitoringJob>;
  /**
   * Lists ModelMonitoringJobs.
   * Callers may choose to read across multiple Monitors as per
   * [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
   * character) as a wildcard character instead of modelMonitor id in the
   * parent. Format
   * `projects/{project_id}/locations/{location}/moodelMonitors/-/modelMonitoringJobs`
   */
  listModelMonitoringJobs(
    request: DeepPartial<ListModelMonitoringJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListModelMonitoringJobsResponse>;
  /** Deletes a ModelMonitoringJob. */
  deleteModelMonitoringJob(
    request: DeepPartial<DeleteModelMonitoringJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Searches Model Monitoring Stats generated within a given time window. */
  searchModelMonitoringStats(
    request: DeepPartial<SearchModelMonitoringStatsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchModelMonitoringStatsResponse>;
  /** Returns the Model Monitoring alerts. */
  searchModelMonitoringAlerts(
    request: DeepPartial<SearchModelMonitoringAlertsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchModelMonitoringAlertsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
