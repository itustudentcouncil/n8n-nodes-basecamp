// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/feature_selector.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/** Matcher for Features of an EntityType by Feature ID. */
export interface IdMatcher {
  /**
   * Required. The following are accepted as `ids`:
   *
   *  * A single-element list containing only `*`, which selects all Features
   *  in the target EntityType, or
   *  * A list containing only Feature IDs, which selects only Features with
   *  those IDs in the target EntityType.
   */
  ids: string[];
}

/** Selector for Features of an EntityType. */
export interface FeatureSelector {
  /** Required. Matches Features based on ID. */
  idMatcher: IdMatcher | undefined;
}

function createBaseIdMatcher(): IdMatcher {
  return { ids: [] };
}

export const IdMatcher: MessageFns<IdMatcher> = {
  encode(message: IdMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ids) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ids.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdMatcher {
    return { ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: IdMatcher): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids;
    }
    return obj;
  },

  create(base?: DeepPartial<IdMatcher>): IdMatcher {
    return IdMatcher.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdMatcher>): IdMatcher {
    const message = createBaseIdMatcher();
    message.ids = object.ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseFeatureSelector(): FeatureSelector {
  return { idMatcher: undefined };
}

export const FeatureSelector: MessageFns<FeatureSelector> = {
  encode(message: FeatureSelector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idMatcher !== undefined) {
      IdMatcher.encode(message.idMatcher, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureSelector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureSelector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idMatcher = IdMatcher.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureSelector {
    return { idMatcher: isSet(object.idMatcher) ? IdMatcher.fromJSON(object.idMatcher) : undefined };
  },

  toJSON(message: FeatureSelector): unknown {
    const obj: any = {};
    if (message.idMatcher !== undefined) {
      obj.idMatcher = IdMatcher.toJSON(message.idMatcher);
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureSelector>): FeatureSelector {
    return FeatureSelector.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureSelector>): FeatureSelector {
    const message = createBaseFeatureSelector();
    message.idMatcher = (object.idMatcher !== undefined && object.idMatcher !== null)
      ? IdMatcher.fromPartial(object.idMatcher)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
