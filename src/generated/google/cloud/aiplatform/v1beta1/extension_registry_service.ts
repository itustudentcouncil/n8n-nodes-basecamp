// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/extension_registry_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Extension } from "./extension.js";
import { GenericOperationMetadata } from "./operation.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Request message for
 * [ExtensionRegistryService.ImportExtension][google.cloud.aiplatform.v1beta1.ExtensionRegistryService.ImportExtension].
 */
export interface ImportExtensionRequest {
  /**
   * Required. The resource name of the Location to import the Extension in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The Extension to import. */
  extension: Extension | undefined;
}

/**
 * Details of
 * [ExtensionRegistryService.ImportExtension][google.cloud.aiplatform.v1beta1.ExtensionRegistryService.ImportExtension]
 * operation.
 */
export interface ImportExtensionOperationMetadata {
  /** The common part of the operation metadata. */
  genericMetadata: GenericOperationMetadata | undefined;
}

/**
 * Request message for
 * [ExtensionRegistryService.GetExtension][google.cloud.aiplatform.v1beta1.ExtensionRegistryService.GetExtension].
 */
export interface GetExtensionRequest {
  /**
   * Required. The name of the Extension resource.
   * Format:
   * `projects/{project}/locations/{location}/extensions/{extension}`
   */
  name: string;
}

/**
 * Request message for
 * [ExtensionRegistryService.UpdateExtension][google.cloud.aiplatform.v1beta1.ExtensionRegistryService.UpdateExtension].
 */
export interface UpdateExtensionRequest {
  /** Required. The Extension which replaces the resource on the server. */
  extension:
    | Extension
    | undefined;
  /**
   * Required. Mask specifying which fields to update.
   * Supported fields:
   *
   *    * `display_name`
   *    * `description`
   *    * `runtime_config`
   *    * `tool_use_examples`
   *    * `manifest.description`
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [ExtensionRegistryService.ListExtensions][google.cloud.aiplatform.v1beta1.ExtensionRegistryService.ListExtensions].
 */
export interface ListExtensionsRequest {
  /**
   * Required. The resource name of the Location to list the Extensions from.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * Optional. The standard list filter.
   * Supported fields:
   *    * `display_name`
   *    * `create_time`
   *    * `update_time`
   *
   * More detail in [AIP-160](https://google.aip.dev/160).
   */
  filter: string;
  /** Optional. The standard list page size. */
  pageSize: number;
  /** Optional. The standard list page token. */
  pageToken: string;
  /**
   * Optional. A comma-separated list of fields to order by, sorted in ascending
   * order. Use "desc" after a field name for descending. Supported fields:
   *   * `display_name`
   *   * `create_time`
   *   * `update_time`
   *
   * Example: `display_name, create_time desc`.
   */
  orderBy: string;
}

/**
 * Response message for
 * [ExtensionRegistryService.ListExtensions][google.cloud.aiplatform.v1beta1.ExtensionRegistryService.ListExtensions]
 */
export interface ListExtensionsResponse {
  /** List of Extension in the requested page. */
  extensions: Extension[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListExtensionsRequest.page_token][google.cloud.aiplatform.v1beta1.ListExtensionsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [ExtensionRegistryService.DeleteExtension][google.cloud.aiplatform.v1beta1.ExtensionRegistryService.DeleteExtension].
 */
export interface DeleteExtensionRequest {
  /**
   * Required. The name of the Extension resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/extensions/{extension}`
   */
  name: string;
}

function createBaseImportExtensionRequest(): ImportExtensionRequest {
  return { parent: "", extension: undefined };
}

export const ImportExtensionRequest: MessageFns<ImportExtensionRequest> = {
  encode(message: ImportExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.extension !== undefined) {
      Extension.encode(message.extension, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.extension = Extension.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportExtensionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      extension: isSet(object.extension) ? Extension.fromJSON(object.extension) : undefined,
    };
  },

  toJSON(message: ImportExtensionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.extension !== undefined) {
      obj.extension = Extension.toJSON(message.extension);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportExtensionRequest>): ImportExtensionRequest {
    return ImportExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportExtensionRequest>): ImportExtensionRequest {
    const message = createBaseImportExtensionRequest();
    message.parent = object.parent ?? "";
    message.extension = (object.extension !== undefined && object.extension !== null)
      ? Extension.fromPartial(object.extension)
      : undefined;
    return message;
  },
};

function createBaseImportExtensionOperationMetadata(): ImportExtensionOperationMetadata {
  return { genericMetadata: undefined };
}

export const ImportExtensionOperationMetadata: MessageFns<ImportExtensionOperationMetadata> = {
  encode(message: ImportExtensionOperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportExtensionOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportExtensionOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportExtensionOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: ImportExtensionOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportExtensionOperationMetadata>): ImportExtensionOperationMetadata {
    return ImportExtensionOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportExtensionOperationMetadata>): ImportExtensionOperationMetadata {
    const message = createBaseImportExtensionOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

function createBaseGetExtensionRequest(): GetExtensionRequest {
  return { name: "" };
}

export const GetExtensionRequest: MessageFns<GetExtensionRequest> = {
  encode(message: GetExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetExtensionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetExtensionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetExtensionRequest>): GetExtensionRequest {
    return GetExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetExtensionRequest>): GetExtensionRequest {
    const message = createBaseGetExtensionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateExtensionRequest(): UpdateExtensionRequest {
  return { extension: undefined, updateMask: undefined };
}

export const UpdateExtensionRequest: MessageFns<UpdateExtensionRequest> = {
  encode(message: UpdateExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.extension !== undefined) {
      Extension.encode(message.extension, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.extension = Extension.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateExtensionRequest {
    return {
      extension: isSet(object.extension) ? Extension.fromJSON(object.extension) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateExtensionRequest): unknown {
    const obj: any = {};
    if (message.extension !== undefined) {
      obj.extension = Extension.toJSON(message.extension);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateExtensionRequest>): UpdateExtensionRequest {
    return UpdateExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateExtensionRequest>): UpdateExtensionRequest {
    const message = createBaseUpdateExtensionRequest();
    message.extension = (object.extension !== undefined && object.extension !== null)
      ? Extension.fromPartial(object.extension)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseListExtensionsRequest(): ListExtensionsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", orderBy: "" };
}

export const ListExtensionsRequest: MessageFns<ListExtensionsRequest> = {
  encode(message: ListExtensionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExtensionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExtensionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExtensionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListExtensionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExtensionsRequest>): ListExtensionsRequest {
    return ListExtensionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExtensionsRequest>): ListExtensionsRequest {
    const message = createBaseListExtensionsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListExtensionsResponse(): ListExtensionsResponse {
  return { extensions: [], nextPageToken: "" };
}

export const ListExtensionsResponse: MessageFns<ListExtensionsResponse> = {
  encode(message: ListExtensionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.extensions) {
      Extension.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListExtensionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExtensionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.extensions.push(Extension.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListExtensionsResponse {
    return {
      extensions: globalThis.Array.isArray(object?.extensions)
        ? object.extensions.map((e: any) => Extension.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExtensionsResponse): unknown {
    const obj: any = {};
    if (message.extensions?.length) {
      obj.extensions = message.extensions.map((e) => Extension.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListExtensionsResponse>): ListExtensionsResponse {
    return ListExtensionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListExtensionsResponse>): ListExtensionsResponse {
    const message = createBaseListExtensionsResponse();
    message.extensions = object.extensions?.map((e) => Extension.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteExtensionRequest(): DeleteExtensionRequest {
  return { name: "" };
}

export const DeleteExtensionRequest: MessageFns<DeleteExtensionRequest> = {
  encode(message: DeleteExtensionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExtensionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExtensionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteExtensionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteExtensionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteExtensionRequest>): DeleteExtensionRequest {
    return DeleteExtensionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteExtensionRequest>): DeleteExtensionRequest {
    const message = createBaseDeleteExtensionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** A service for managing Vertex AI's Extension registry. */
export type ExtensionRegistryServiceDefinition = typeof ExtensionRegistryServiceDefinition;
export const ExtensionRegistryServiceDefinition = {
  name: "ExtensionRegistryService",
  fullName: "google.cloud.aiplatform.v1beta1.ExtensionRegistryService",
  methods: {
    /** Imports an Extension. */
    importExtension: {
      name: "ImportExtension",
      requestType: ImportExtensionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              45,
              10,
              9,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              18,
              32,
              73,
              109,
              112,
              111,
              114,
              116,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([16, 112, 97, 114, 101, 110, 116, 44, 101, 120, 116, 101, 110, 115, 105, 111, 110])],
          578365826: [
            Buffer.from([
              71,
              58,
              9,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              34,
              58,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /** Gets an Extension. */
    getExtension: {
      name: "GetExtension",
      requestType: GetExtensionRequest,
      requestStream: false,
      responseType: Extension,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Extensions in a location. */
    listExtensions: {
      name: "ListExtensions",
      requestType: ListExtensionsRequest,
      requestStream: false,
      responseType: ListExtensionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an Extension. */
    updateExtension: {
      name: "UpdateExtension",
      requestType: UpdateExtensionRequest,
      requestStream: false,
      responseType: Extension,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              21,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              74,
              58,
              9,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              50,
              61,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an Extension. */
    deleteExtension: {
      name: "DeleteExtension",
      requestType: DeleteExtensionRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ExtensionRegistryServiceImplementation<CallContextExt = {}> {
  /** Imports an Extension. */
  importExtension(
    request: ImportExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Gets an Extension. */
  getExtension(request: GetExtensionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Extension>>;
  /** Lists Extensions in a location. */
  listExtensions(
    request: ListExtensionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExtensionsResponse>>;
  /** Updates an Extension. */
  updateExtension(
    request: UpdateExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Extension>>;
  /** Deletes an Extension. */
  deleteExtension(
    request: DeleteExtensionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface ExtensionRegistryServiceClient<CallOptionsExt = {}> {
  /** Imports an Extension. */
  importExtension(
    request: DeepPartial<ImportExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Gets an Extension. */
  getExtension(request: DeepPartial<GetExtensionRequest>, options?: CallOptions & CallOptionsExt): Promise<Extension>;
  /** Lists Extensions in a location. */
  listExtensions(
    request: DeepPartial<ListExtensionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExtensionsResponse>;
  /** Updates an Extension. */
  updateExtension(
    request: DeepPartial<UpdateExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Extension>;
  /** Deletes an Extension. */
  deleteExtension(
    request: DeepPartial<DeleteExtensionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
