// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/job_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { BatchPredictionJob } from "./batch_prediction_job.js";
import { CustomJob } from "./custom_job.js";
import { DataLabelingJob } from "./data_labeling_job.js";
import { HyperparameterTuningJob } from "./hyperparameter_tuning_job.js";
import {
  ModelDeploymentMonitoringJob,
  ModelDeploymentMonitoringObjectiveType,
  modelDeploymentMonitoringObjectiveTypeFromJSON,
  modelDeploymentMonitoringObjectiveTypeToJSON,
  ModelMonitoringStatsAnomalies,
} from "./model_deployment_monitoring_job.js";
import { NasJob, NasTrialDetail } from "./nas_job.js";
import { GenericOperationMetadata } from "./operation.js";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/**
 * Request message for
 * [JobService.CreateCustomJob][google.cloud.aiplatform.v1beta1.JobService.CreateCustomJob].
 */
export interface CreateCustomJobRequest {
  /**
   * Required. The resource name of the Location to create the CustomJob in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The CustomJob to create. */
  customJob: CustomJob | undefined;
}

/**
 * Request message for
 * [JobService.GetCustomJob][google.cloud.aiplatform.v1beta1.JobService.GetCustomJob].
 */
export interface GetCustomJobRequest {
  /**
   * Required. The name of the CustomJob resource.
   * Format:
   * `projects/{project}/locations/{location}/customJobs/{custom_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.ListCustomJobs][google.cloud.aiplatform.v1beta1.JobService.ListCustomJobs].
 */
export interface ListCustomJobsRequest {
  /**
   * Required. The resource name of the Location to list the CustomJobs from.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * The standard list filter.
   *
   * Supported fields:
   *
   *   * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
   *   * `state` supports `=`, `!=` comparisons.
   *   * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
   *     `create_time` must be in RFC 3339 format.
   *   * `labels` supports general map functions that is:
   *     `labels.key=value` - key:value equality
   *     `labels.key:* - key existence
   *
   * Some examples of using the filter are:
   *
   *   * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
   *   * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
   *   * `NOT display_name="my_job"`
   *   * `create_time>"2021-05-18T00:00:00Z"`
   *   * `labels.keyA=valueA`
   *   * `labels.keyB:*`
   */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /**
   * The standard list page token.
   * Typically obtained via
   * [ListCustomJobsResponse.next_page_token][google.cloud.aiplatform.v1beta1.ListCustomJobsResponse.next_page_token]
   * of the previous
   * [JobService.ListCustomJobs][google.cloud.aiplatform.v1beta1.JobService.ListCustomJobs]
   * call.
   */
  pageToken: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [JobService.ListCustomJobs][google.cloud.aiplatform.v1beta1.JobService.ListCustomJobs]
 */
export interface ListCustomJobsResponse {
  /** List of CustomJobs in the requested page. */
  customJobs: CustomJob[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListCustomJobsRequest.page_token][google.cloud.aiplatform.v1beta1.ListCustomJobsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [JobService.DeleteCustomJob][google.cloud.aiplatform.v1beta1.JobService.DeleteCustomJob].
 */
export interface DeleteCustomJobRequest {
  /**
   * Required. The name of the CustomJob resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/customJobs/{custom_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.CancelCustomJob][google.cloud.aiplatform.v1beta1.JobService.CancelCustomJob].
 */
export interface CancelCustomJobRequest {
  /**
   * Required. The name of the CustomJob to cancel.
   * Format:
   * `projects/{project}/locations/{location}/customJobs/{custom_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.CreateDataLabelingJob][google.cloud.aiplatform.v1beta1.JobService.CreateDataLabelingJob].
 */
export interface CreateDataLabelingJobRequest {
  /**
   * Required. The parent of the DataLabelingJob.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The DataLabelingJob to create. */
  dataLabelingJob: DataLabelingJob | undefined;
}

/**
 * Request message for
 * [JobService.GetDataLabelingJob][google.cloud.aiplatform.v1beta1.JobService.GetDataLabelingJob].
 */
export interface GetDataLabelingJobRequest {
  /**
   * Required. The name of the DataLabelingJob.
   * Format:
   * `projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.ListDataLabelingJobs][google.cloud.aiplatform.v1beta1.JobService.ListDataLabelingJobs].
 */
export interface ListDataLabelingJobsRequest {
  /**
   * Required. The parent of the DataLabelingJob.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * The standard list filter.
   *
   * Supported fields:
   *
   *   * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
   *   * `state` supports `=`, `!=` comparisons.
   *   * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
   *     `create_time` must be in RFC 3339 format.
   *   * `labels` supports general map functions that is:
   *     `labels.key=value` - key:value equality
   *     `labels.key:* - key existence
   *
   * Some examples of using the filter are:
   *
   *   * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
   *   * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
   *   * `NOT display_name="my_job"`
   *   * `create_time>"2021-05-18T00:00:00Z"`
   *   * `labels.keyA=valueA`
   *   * `labels.keyB:*`
   */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /** The standard list page token. */
  pageToken: string;
  /**
   * Mask specifying which fields to read. FieldMask represents a set of
   * symbolic field paths. For example, the mask can be `paths: "name"`. The
   * "name" here is a field in DataLabelingJob.
   * If this field is not set, all fields of the DataLabelingJob are returned.
   */
  readMask:
    | string[]
    | undefined;
  /**
   * A comma-separated list of fields to order by, sorted in ascending order by
   * default.
   * Use `desc` after a field name for descending.
   */
  orderBy: string;
}

/**
 * Response message for
 * [JobService.ListDataLabelingJobs][google.cloud.aiplatform.v1beta1.JobService.ListDataLabelingJobs].
 */
export interface ListDataLabelingJobsResponse {
  /**
   * A list of DataLabelingJobs that matches the specified filter in the
   * request.
   */
  dataLabelingJobs: DataLabelingJob[];
  /** The standard List next-page token. */
  nextPageToken: string;
}

/**
 * Request message for
 * [JobService.DeleteDataLabelingJob][google.cloud.aiplatform.v1beta1.JobService.DeleteDataLabelingJob].
 */
export interface DeleteDataLabelingJobRequest {
  /**
   * Required. The name of the DataLabelingJob to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.CancelDataLabelingJob][google.cloud.aiplatform.v1beta1.JobService.CancelDataLabelingJob].
 */
export interface CancelDataLabelingJobRequest {
  /**
   * Required. The name of the DataLabelingJob.
   * Format:
   * `projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.CreateHyperparameterTuningJob][google.cloud.aiplatform.v1beta1.JobService.CreateHyperparameterTuningJob].
 */
export interface CreateHyperparameterTuningJobRequest {
  /**
   * Required. The resource name of the Location to create the
   * HyperparameterTuningJob in. Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The HyperparameterTuningJob to create. */
  hyperparameterTuningJob: HyperparameterTuningJob | undefined;
}

/**
 * Request message for
 * [JobService.GetHyperparameterTuningJob][google.cloud.aiplatform.v1beta1.JobService.GetHyperparameterTuningJob].
 */
export interface GetHyperparameterTuningJobRequest {
  /**
   * Required. The name of the HyperparameterTuningJob resource.
   * Format:
   * `projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.ListHyperparameterTuningJobs][google.cloud.aiplatform.v1beta1.JobService.ListHyperparameterTuningJobs].
 */
export interface ListHyperparameterTuningJobsRequest {
  /**
   * Required. The resource name of the Location to list the
   * HyperparameterTuningJobs from. Format:
   * `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * The standard list filter.
   *
   * Supported fields:
   *
   *   * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
   *   * `state` supports `=`, `!=` comparisons.
   *   * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
   *     `create_time` must be in RFC 3339 format.
   *   * `labels` supports general map functions that is:
   *     `labels.key=value` - key:value equality
   *     `labels.key:* - key existence
   *
   * Some examples of using the filter are:
   *
   *   * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
   *   * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
   *   * `NOT display_name="my_job"`
   *   * `create_time>"2021-05-18T00:00:00Z"`
   *   * `labels.keyA=valueA`
   *   * `labels.keyB:*`
   */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /**
   * The standard list page token.
   * Typically obtained via
   * [ListHyperparameterTuningJobsResponse.next_page_token][google.cloud.aiplatform.v1beta1.ListHyperparameterTuningJobsResponse.next_page_token]
   * of the previous
   * [JobService.ListHyperparameterTuningJobs][google.cloud.aiplatform.v1beta1.JobService.ListHyperparameterTuningJobs]
   * call.
   */
  pageToken: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [JobService.ListHyperparameterTuningJobs][google.cloud.aiplatform.v1beta1.JobService.ListHyperparameterTuningJobs]
 */
export interface ListHyperparameterTuningJobsResponse {
  /**
   * List of HyperparameterTuningJobs in the requested page.
   * [HyperparameterTuningJob.trials][google.cloud.aiplatform.v1beta1.HyperparameterTuningJob.trials]
   * of the jobs will be not be returned.
   */
  hyperparameterTuningJobs: HyperparameterTuningJob[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListHyperparameterTuningJobsRequest.page_token][google.cloud.aiplatform.v1beta1.ListHyperparameterTuningJobsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [JobService.DeleteHyperparameterTuningJob][google.cloud.aiplatform.v1beta1.JobService.DeleteHyperparameterTuningJob].
 */
export interface DeleteHyperparameterTuningJobRequest {
  /**
   * Required. The name of the HyperparameterTuningJob resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.CancelHyperparameterTuningJob][google.cloud.aiplatform.v1beta1.JobService.CancelHyperparameterTuningJob].
 */
export interface CancelHyperparameterTuningJobRequest {
  /**
   * Required. The name of the HyperparameterTuningJob to cancel.
   * Format:
   * `projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.CreateNasJob][google.cloud.aiplatform.v1beta1.JobService.CreateNasJob].
 */
export interface CreateNasJobRequest {
  /**
   * Required. The resource name of the Location to create the NasJob in.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The NasJob to create. */
  nasJob: NasJob | undefined;
}

/**
 * Request message for
 * [JobService.GetNasJob][google.cloud.aiplatform.v1beta1.JobService.GetNasJob].
 */
export interface GetNasJobRequest {
  /**
   * Required. The name of the NasJob resource.
   * Format:
   * `projects/{project}/locations/{location}/nasJobs/{nas_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.ListNasJobs][google.cloud.aiplatform.v1beta1.JobService.ListNasJobs].
 */
export interface ListNasJobsRequest {
  /**
   * Required. The resource name of the Location to list the NasJobs
   * from. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * The standard list filter.
   *
   * Supported fields:
   *
   *   * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
   *   * `state` supports `=`, `!=` comparisons.
   *   * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
   *     `create_time` must be in RFC 3339 format.
   *   * `labels` supports general map functions that is:
   *     `labels.key=value` - key:value equality
   *     `labels.key:* - key existence
   *
   * Some examples of using the filter are:
   *
   *   * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
   *   * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
   *   * `NOT display_name="my_job"`
   *   * `create_time>"2021-05-18T00:00:00Z"`
   *   * `labels.keyA=valueA`
   *   * `labels.keyB:*`
   */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /**
   * The standard list page token.
   * Typically obtained via
   * [ListNasJobsResponse.next_page_token][google.cloud.aiplatform.v1beta1.ListNasJobsResponse.next_page_token]
   * of the previous
   * [JobService.ListNasJobs][google.cloud.aiplatform.v1beta1.JobService.ListNasJobs]
   * call.
   */
  pageToken: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [JobService.ListNasJobs][google.cloud.aiplatform.v1beta1.JobService.ListNasJobs]
 */
export interface ListNasJobsResponse {
  /**
   * List of NasJobs in the requested page.
   * [NasJob.nas_job_output][google.cloud.aiplatform.v1beta1.NasJob.nas_job_output]
   * of the jobs will not be returned.
   */
  nasJobs: NasJob[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListNasJobsRequest.page_token][google.cloud.aiplatform.v1beta1.ListNasJobsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [JobService.DeleteNasJob][google.cloud.aiplatform.v1beta1.JobService.DeleteNasJob].
 */
export interface DeleteNasJobRequest {
  /**
   * Required. The name of the NasJob resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/nasJobs/{nas_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.CancelNasJob][google.cloud.aiplatform.v1beta1.JobService.CancelNasJob].
 */
export interface CancelNasJobRequest {
  /**
   * Required. The name of the NasJob to cancel.
   * Format:
   * `projects/{project}/locations/{location}/nasJobs/{nas_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.GetNasTrialDetail][google.cloud.aiplatform.v1beta1.JobService.GetNasTrialDetail].
 */
export interface GetNasTrialDetailRequest {
  /**
   * Required. The name of the NasTrialDetail resource.
   * Format:
   * `projects/{project}/locations/{location}/nasJobs/{nas_job}/nasTrialDetails/{nas_trial_detail}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.ListNasTrialDetails][google.cloud.aiplatform.v1beta1.JobService.ListNasTrialDetails].
 */
export interface ListNasTrialDetailsRequest {
  /**
   * Required. The name of the NasJob resource.
   * Format:
   * `projects/{project}/locations/{location}/nasJobs/{nas_job}`
   */
  parent: string;
  /** The standard list page size. */
  pageSize: number;
  /**
   * The standard list page token.
   * Typically obtained via
   * [ListNasTrialDetailsResponse.next_page_token][google.cloud.aiplatform.v1beta1.ListNasTrialDetailsResponse.next_page_token]
   * of the previous
   * [JobService.ListNasTrialDetails][google.cloud.aiplatform.v1beta1.JobService.ListNasTrialDetails]
   * call.
   */
  pageToken: string;
}

/**
 * Response message for
 * [JobService.ListNasTrialDetails][google.cloud.aiplatform.v1beta1.JobService.ListNasTrialDetails]
 */
export interface ListNasTrialDetailsResponse {
  /** List of top NasTrials in the requested page. */
  nasTrialDetails: NasTrialDetail[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListNasTrialDetailsRequest.page_token][google.cloud.aiplatform.v1beta1.ListNasTrialDetailsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [JobService.CreateBatchPredictionJob][google.cloud.aiplatform.v1beta1.JobService.CreateBatchPredictionJob].
 */
export interface CreateBatchPredictionJobRequest {
  /**
   * Required. The resource name of the Location to create the
   * BatchPredictionJob in. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The BatchPredictionJob to create. */
  batchPredictionJob: BatchPredictionJob | undefined;
}

/**
 * Request message for
 * [JobService.GetBatchPredictionJob][google.cloud.aiplatform.v1beta1.JobService.GetBatchPredictionJob].
 */
export interface GetBatchPredictionJobRequest {
  /**
   * Required. The name of the BatchPredictionJob resource.
   * Format:
   * `projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.ListBatchPredictionJobs][google.cloud.aiplatform.v1beta1.JobService.ListBatchPredictionJobs].
 */
export interface ListBatchPredictionJobsRequest {
  /**
   * Required. The resource name of the Location to list the BatchPredictionJobs
   * from. Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * The standard list filter.
   *
   * Supported fields:
   *
   *   * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
   *   * `model_display_name` supports `=`, `!=` comparisons.
   *   * `state` supports `=`, `!=` comparisons.
   *   * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
   *     `create_time` must be in RFC 3339 format.
   *   * `labels` supports general map functions that is:
   *     `labels.key=value` - key:value equality
   *     `labels.key:* - key existence
   *
   * Some examples of using the filter are:
   *
   *   * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
   *   * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
   *   * `NOT display_name="my_job"`
   *   * `create_time>"2021-05-18T00:00:00Z"`
   *   * `labels.keyA=valueA`
   *   * `labels.keyB:*`
   */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /**
   * The standard list page token.
   * Typically obtained via
   * [ListBatchPredictionJobsResponse.next_page_token][google.cloud.aiplatform.v1beta1.ListBatchPredictionJobsResponse.next_page_token]
   * of the previous
   * [JobService.ListBatchPredictionJobs][google.cloud.aiplatform.v1beta1.JobService.ListBatchPredictionJobs]
   * call.
   */
  pageToken: string;
  /** Mask specifying which fields to read. */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [JobService.ListBatchPredictionJobs][google.cloud.aiplatform.v1beta1.JobService.ListBatchPredictionJobs]
 */
export interface ListBatchPredictionJobsResponse {
  /** List of BatchPredictionJobs in the requested page. */
  batchPredictionJobs: BatchPredictionJob[];
  /**
   * A token to retrieve the next page of results.
   * Pass to
   * [ListBatchPredictionJobsRequest.page_token][google.cloud.aiplatform.v1beta1.ListBatchPredictionJobsRequest.page_token]
   * to obtain that page.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [JobService.DeleteBatchPredictionJob][google.cloud.aiplatform.v1beta1.JobService.DeleteBatchPredictionJob].
 */
export interface DeleteBatchPredictionJobRequest {
  /**
   * Required. The name of the BatchPredictionJob resource to be deleted.
   * Format:
   * `projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.CancelBatchPredictionJob][google.cloud.aiplatform.v1beta1.JobService.CancelBatchPredictionJob].
 */
export interface CancelBatchPredictionJobRequest {
  /**
   * Required. The name of the BatchPredictionJob to cancel.
   * Format:
   * `projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.CreateModelDeploymentMonitoringJob][google.cloud.aiplatform.v1beta1.JobService.CreateModelDeploymentMonitoringJob].
 */
export interface CreateModelDeploymentMonitoringJobRequest {
  /**
   * Required. The parent of the ModelDeploymentMonitoringJob.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /** Required. The ModelDeploymentMonitoringJob to create */
  modelDeploymentMonitoringJob: ModelDeploymentMonitoringJob | undefined;
}

/**
 * Request message for
 * [JobService.SearchModelDeploymentMonitoringStatsAnomalies][google.cloud.aiplatform.v1beta1.JobService.SearchModelDeploymentMonitoringStatsAnomalies].
 */
export interface SearchModelDeploymentMonitoringStatsAnomaliesRequest {
  /**
   * Required. ModelDeploymentMonitoring Job resource name.
   * Format:
   * `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
   */
  modelDeploymentMonitoringJob: string;
  /**
   * Required. The DeployedModel ID of the
   * [ModelDeploymentMonitoringObjectiveConfig.deployed_model_id].
   */
  deployedModelId: string;
  /**
   * The feature display name. If specified, only return the stats belonging to
   * this feature. Format:
   * [ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.feature_display_name][google.cloud.aiplatform.v1beta1.ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.feature_display_name],
   * example: "user_destination".
   */
  featureDisplayName: string;
  /** Required. Objectives of the stats to retrieve. */
  objectives: SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective[];
  /** The standard list page size. */
  pageSize: number;
  /**
   * A page token received from a previous
   * [JobService.SearchModelDeploymentMonitoringStatsAnomalies][google.cloud.aiplatform.v1beta1.JobService.SearchModelDeploymentMonitoringStatsAnomalies]
   * call.
   */
  pageToken: string;
  /**
   * The earliest timestamp of stats being generated.
   * If not set, indicates fetching stats till the earliest possible one.
   */
  startTime:
    | Date
    | undefined;
  /**
   * The latest timestamp of stats being generated.
   * If not set, indicates feching stats till the latest possible one.
   */
  endTime: Date | undefined;
}

/** Stats requested for specific objective. */
export interface SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective {
  type: ModelDeploymentMonitoringObjectiveType;
  /**
   * If set, all attribution scores between
   * [SearchModelDeploymentMonitoringStatsAnomaliesRequest.start_time][google.cloud.aiplatform.v1beta1.SearchModelDeploymentMonitoringStatsAnomaliesRequest.start_time]
   * and
   * [SearchModelDeploymentMonitoringStatsAnomaliesRequest.end_time][google.cloud.aiplatform.v1beta1.SearchModelDeploymentMonitoringStatsAnomaliesRequest.end_time]
   * are fetched, and page token doesn't take effect in this case. Only used
   * to retrieve attribution score for the top Features which has the highest
   * attribution score in the latest monitoring run.
   */
  topFeatureCount: number;
}

/**
 * Response message for
 * [JobService.SearchModelDeploymentMonitoringStatsAnomalies][google.cloud.aiplatform.v1beta1.JobService.SearchModelDeploymentMonitoringStatsAnomalies].
 */
export interface SearchModelDeploymentMonitoringStatsAnomaliesResponse {
  /**
   * Stats retrieved for requested objectives.
   * There are at most 1000
   * [ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.prediction_stats][google.cloud.aiplatform.v1beta1.ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.prediction_stats]
   * in the response.
   */
  monitoringStats: ModelMonitoringStatsAnomalies[];
  /**
   * The page token that can be used by the next
   * [JobService.SearchModelDeploymentMonitoringStatsAnomalies][google.cloud.aiplatform.v1beta1.JobService.SearchModelDeploymentMonitoringStatsAnomalies]
   * call.
   */
  nextPageToken: string;
}

/**
 * Request message for
 * [JobService.GetModelDeploymentMonitoringJob][google.cloud.aiplatform.v1beta1.JobService.GetModelDeploymentMonitoringJob].
 */
export interface GetModelDeploymentMonitoringJobRequest {
  /**
   * Required. The resource name of the ModelDeploymentMonitoringJob.
   * Format:
   * `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.ListModelDeploymentMonitoringJobs][google.cloud.aiplatform.v1beta1.JobService.ListModelDeploymentMonitoringJobs].
 */
export interface ListModelDeploymentMonitoringJobsRequest {
  /**
   * Required. The parent of the ModelDeploymentMonitoringJob.
   * Format: `projects/{project}/locations/{location}`
   */
  parent: string;
  /**
   * The standard list filter.
   *
   * Supported fields:
   *
   *   * `display_name` supports `=`, `!=` comparisons, and `:` wildcard.
   *   * `state` supports `=`, `!=` comparisons.
   *   * `create_time` supports `=`, `!=`,`<`, `<=`,`>`, `>=` comparisons.
   *     `create_time` must be in RFC 3339 format.
   *   * `labels` supports general map functions that is:
   *     `labels.key=value` - key:value equality
   *     `labels.key:* - key existence
   *
   * Some examples of using the filter are:
   *
   *   * `state="JOB_STATE_SUCCEEDED" AND display_name:"my_job_*"`
   *   * `state!="JOB_STATE_FAILED" OR display_name="my_job"`
   *   * `NOT display_name="my_job"`
   *   * `create_time>"2021-05-18T00:00:00Z"`
   *   * `labels.keyA=valueA`
   *   * `labels.keyB:*`
   */
  filter: string;
  /** The standard list page size. */
  pageSize: number;
  /** The standard list page token. */
  pageToken: string;
  /** Mask specifying which fields to read */
  readMask: string[] | undefined;
}

/**
 * Response message for
 * [JobService.ListModelDeploymentMonitoringJobs][google.cloud.aiplatform.v1beta1.JobService.ListModelDeploymentMonitoringJobs].
 */
export interface ListModelDeploymentMonitoringJobsResponse {
  /**
   * A list of ModelDeploymentMonitoringJobs that matches the specified filter
   * in the request.
   */
  modelDeploymentMonitoringJobs: ModelDeploymentMonitoringJob[];
  /** The standard List next-page token. */
  nextPageToken: string;
}

/**
 * Request message for
 * [JobService.UpdateModelDeploymentMonitoringJob][google.cloud.aiplatform.v1beta1.JobService.UpdateModelDeploymentMonitoringJob].
 */
export interface UpdateModelDeploymentMonitoringJobRequest {
  /**
   * Required. The model monitoring configuration which replaces the resource on
   * the server.
   */
  modelDeploymentMonitoringJob:
    | ModelDeploymentMonitoringJob
    | undefined;
  /**
   * Required. The update mask is used to specify the fields to be overwritten
   * in the ModelDeploymentMonitoringJob resource by the update. The fields
   * specified in the update_mask are relative to the resource, not the full
   * request. A field will be overwritten if it is in the mask. If the user does
   * not provide a mask then only the non-empty fields present in the request
   * will be overwritten. Set the update_mask to `*` to override all fields. For
   * the objective config, the user can either provide the update mask for
   * model_deployment_monitoring_objective_configs or any combination of its
   * nested fields, such as:
   * model_deployment_monitoring_objective_configs.objective_config.training_dataset.
   *
   * Updatable fields:
   *
   *   * `display_name`
   *   * `model_deployment_monitoring_schedule_config`
   *   * `model_monitoring_alert_config`
   *   * `logging_sampling_strategy`
   *   * `labels`
   *   * `log_ttl`
   *   * `enable_monitoring_pipeline_logs`
   * .  and
   *   * `model_deployment_monitoring_objective_configs`
   * .  or
   *   * `model_deployment_monitoring_objective_configs.objective_config.training_dataset`
   *   * `model_deployment_monitoring_objective_configs.objective_config.training_prediction_skew_detection_config`
   *   * `model_deployment_monitoring_objective_configs.objective_config.prediction_drift_detection_config`
   */
  updateMask: string[] | undefined;
}

/**
 * Request message for
 * [JobService.DeleteModelDeploymentMonitoringJob][google.cloud.aiplatform.v1beta1.JobService.DeleteModelDeploymentMonitoringJob].
 */
export interface DeleteModelDeploymentMonitoringJobRequest {
  /**
   * Required. The resource name of the model monitoring job to delete.
   * Format:
   * `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.PauseModelDeploymentMonitoringJob][google.cloud.aiplatform.v1beta1.JobService.PauseModelDeploymentMonitoringJob].
 */
export interface PauseModelDeploymentMonitoringJobRequest {
  /**
   * Required. The resource name of the ModelDeploymentMonitoringJob to pause.
   * Format:
   * `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
   */
  name: string;
}

/**
 * Request message for
 * [JobService.ResumeModelDeploymentMonitoringJob][google.cloud.aiplatform.v1beta1.JobService.ResumeModelDeploymentMonitoringJob].
 */
export interface ResumeModelDeploymentMonitoringJobRequest {
  /**
   * Required. The resource name of the ModelDeploymentMonitoringJob to resume.
   * Format:
   * `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`
   */
  name: string;
}

/**
 * Runtime operation information for
 * [JobService.UpdateModelDeploymentMonitoringJob][google.cloud.aiplatform.v1beta1.JobService.UpdateModelDeploymentMonitoringJob].
 */
export interface UpdateModelDeploymentMonitoringJobOperationMetadata {
  /** The operation generic information. */
  genericMetadata: GenericOperationMetadata | undefined;
}

function createBaseCreateCustomJobRequest(): CreateCustomJobRequest {
  return { parent: "", customJob: undefined };
}

export const CreateCustomJobRequest: MessageFns<CreateCustomJobRequest> = {
  encode(message: CreateCustomJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.customJob !== undefined) {
      CustomJob.encode(message.customJob, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCustomJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCustomJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.customJob = CustomJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCustomJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      customJob: isSet(object.customJob) ? CustomJob.fromJSON(object.customJob) : undefined,
    };
  },

  toJSON(message: CreateCustomJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.customJob !== undefined) {
      obj.customJob = CustomJob.toJSON(message.customJob);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCustomJobRequest>): CreateCustomJobRequest {
    return CreateCustomJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCustomJobRequest>): CreateCustomJobRequest {
    const message = createBaseCreateCustomJobRequest();
    message.parent = object.parent ?? "";
    message.customJob = (object.customJob !== undefined && object.customJob !== null)
      ? CustomJob.fromPartial(object.customJob)
      : undefined;
    return message;
  },
};

function createBaseGetCustomJobRequest(): GetCustomJobRequest {
  return { name: "" };
}

export const GetCustomJobRequest: MessageFns<GetCustomJobRequest> = {
  encode(message: GetCustomJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetCustomJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomJobRequest>): GetCustomJobRequest {
    return GetCustomJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomJobRequest>): GetCustomJobRequest {
    const message = createBaseGetCustomJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListCustomJobsRequest(): ListCustomJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListCustomJobsRequest: MessageFns<ListCustomJobsRequest> = {
  encode(message: ListCustomJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListCustomJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomJobsRequest>): ListCustomJobsRequest {
    return ListCustomJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomJobsRequest>): ListCustomJobsRequest {
    const message = createBaseListCustomJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListCustomJobsResponse(): ListCustomJobsResponse {
  return { customJobs: [], nextPageToken: "" };
}

export const ListCustomJobsResponse: MessageFns<ListCustomJobsResponse> = {
  encode(message: ListCustomJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customJobs) {
      CustomJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCustomJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCustomJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customJobs.push(CustomJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCustomJobsResponse {
    return {
      customJobs: globalThis.Array.isArray(object?.customJobs)
        ? object.customJobs.map((e: any) => CustomJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListCustomJobsResponse): unknown {
    const obj: any = {};
    if (message.customJobs?.length) {
      obj.customJobs = message.customJobs.map((e) => CustomJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListCustomJobsResponse>): ListCustomJobsResponse {
    return ListCustomJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCustomJobsResponse>): ListCustomJobsResponse {
    const message = createBaseListCustomJobsResponse();
    message.customJobs = object.customJobs?.map((e) => CustomJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteCustomJobRequest(): DeleteCustomJobRequest {
  return { name: "" };
}

export const DeleteCustomJobRequest: MessageFns<DeleteCustomJobRequest> = {
  encode(message: DeleteCustomJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCustomJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCustomJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCustomJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteCustomJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCustomJobRequest>): DeleteCustomJobRequest {
    return DeleteCustomJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCustomJobRequest>): DeleteCustomJobRequest {
    const message = createBaseDeleteCustomJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCancelCustomJobRequest(): CancelCustomJobRequest {
  return { name: "" };
}

export const CancelCustomJobRequest: MessageFns<CancelCustomJobRequest> = {
  encode(message: CancelCustomJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelCustomJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelCustomJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelCustomJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CancelCustomJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelCustomJobRequest>): CancelCustomJobRequest {
    return CancelCustomJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelCustomJobRequest>): CancelCustomJobRequest {
    const message = createBaseCancelCustomJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateDataLabelingJobRequest(): CreateDataLabelingJobRequest {
  return { parent: "", dataLabelingJob: undefined };
}

export const CreateDataLabelingJobRequest: MessageFns<CreateDataLabelingJobRequest> = {
  encode(message: CreateDataLabelingJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataLabelingJob !== undefined) {
      DataLabelingJob.encode(message.dataLabelingJob, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataLabelingJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataLabelingJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataLabelingJob = DataLabelingJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataLabelingJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataLabelingJob: isSet(object.dataLabelingJob) ? DataLabelingJob.fromJSON(object.dataLabelingJob) : undefined,
    };
  },

  toJSON(message: CreateDataLabelingJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataLabelingJob !== undefined) {
      obj.dataLabelingJob = DataLabelingJob.toJSON(message.dataLabelingJob);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataLabelingJobRequest>): CreateDataLabelingJobRequest {
    return CreateDataLabelingJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataLabelingJobRequest>): CreateDataLabelingJobRequest {
    const message = createBaseCreateDataLabelingJobRequest();
    message.parent = object.parent ?? "";
    message.dataLabelingJob = (object.dataLabelingJob !== undefined && object.dataLabelingJob !== null)
      ? DataLabelingJob.fromPartial(object.dataLabelingJob)
      : undefined;
    return message;
  },
};

function createBaseGetDataLabelingJobRequest(): GetDataLabelingJobRequest {
  return { name: "" };
}

export const GetDataLabelingJobRequest: MessageFns<GetDataLabelingJobRequest> = {
  encode(message: GetDataLabelingJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataLabelingJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataLabelingJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataLabelingJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataLabelingJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataLabelingJobRequest>): GetDataLabelingJobRequest {
    return GetDataLabelingJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataLabelingJobRequest>): GetDataLabelingJobRequest {
    const message = createBaseGetDataLabelingJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDataLabelingJobsRequest(): ListDataLabelingJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined, orderBy: "" };
}

export const ListDataLabelingJobsRequest: MessageFns<ListDataLabelingJobsRequest> = {
  encode(message: ListDataLabelingJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    if (message.orderBy !== "") {
      writer.uint32(50).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataLabelingJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataLabelingJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataLabelingJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDataLabelingJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataLabelingJobsRequest>): ListDataLabelingJobsRequest {
    return ListDataLabelingJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataLabelingJobsRequest>): ListDataLabelingJobsRequest {
    const message = createBaseListDataLabelingJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDataLabelingJobsResponse(): ListDataLabelingJobsResponse {
  return { dataLabelingJobs: [], nextPageToken: "" };
}

export const ListDataLabelingJobsResponse: MessageFns<ListDataLabelingJobsResponse> = {
  encode(message: ListDataLabelingJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataLabelingJobs) {
      DataLabelingJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataLabelingJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataLabelingJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataLabelingJobs.push(DataLabelingJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataLabelingJobsResponse {
    return {
      dataLabelingJobs: globalThis.Array.isArray(object?.dataLabelingJobs)
        ? object.dataLabelingJobs.map((e: any) => DataLabelingJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListDataLabelingJobsResponse): unknown {
    const obj: any = {};
    if (message.dataLabelingJobs?.length) {
      obj.dataLabelingJobs = message.dataLabelingJobs.map((e) => DataLabelingJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataLabelingJobsResponse>): ListDataLabelingJobsResponse {
    return ListDataLabelingJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataLabelingJobsResponse>): ListDataLabelingJobsResponse {
    const message = createBaseListDataLabelingJobsResponse();
    message.dataLabelingJobs = object.dataLabelingJobs?.map((e) => DataLabelingJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteDataLabelingJobRequest(): DeleteDataLabelingJobRequest {
  return { name: "" };
}

export const DeleteDataLabelingJobRequest: MessageFns<DeleteDataLabelingJobRequest> = {
  encode(message: DeleteDataLabelingJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataLabelingJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataLabelingJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataLabelingJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteDataLabelingJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataLabelingJobRequest>): DeleteDataLabelingJobRequest {
    return DeleteDataLabelingJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataLabelingJobRequest>): DeleteDataLabelingJobRequest {
    const message = createBaseDeleteDataLabelingJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCancelDataLabelingJobRequest(): CancelDataLabelingJobRequest {
  return { name: "" };
}

export const CancelDataLabelingJobRequest: MessageFns<CancelDataLabelingJobRequest> = {
  encode(message: CancelDataLabelingJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelDataLabelingJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelDataLabelingJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelDataLabelingJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CancelDataLabelingJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelDataLabelingJobRequest>): CancelDataLabelingJobRequest {
    return CancelDataLabelingJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelDataLabelingJobRequest>): CancelDataLabelingJobRequest {
    const message = createBaseCancelDataLabelingJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateHyperparameterTuningJobRequest(): CreateHyperparameterTuningJobRequest {
  return { parent: "", hyperparameterTuningJob: undefined };
}

export const CreateHyperparameterTuningJobRequest: MessageFns<CreateHyperparameterTuningJobRequest> = {
  encode(message: CreateHyperparameterTuningJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.hyperparameterTuningJob !== undefined) {
      HyperparameterTuningJob.encode(message.hyperparameterTuningJob, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateHyperparameterTuningJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateHyperparameterTuningJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hyperparameterTuningJob = HyperparameterTuningJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateHyperparameterTuningJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      hyperparameterTuningJob: isSet(object.hyperparameterTuningJob)
        ? HyperparameterTuningJob.fromJSON(object.hyperparameterTuningJob)
        : undefined,
    };
  },

  toJSON(message: CreateHyperparameterTuningJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.hyperparameterTuningJob !== undefined) {
      obj.hyperparameterTuningJob = HyperparameterTuningJob.toJSON(message.hyperparameterTuningJob);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateHyperparameterTuningJobRequest>): CreateHyperparameterTuningJobRequest {
    return CreateHyperparameterTuningJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateHyperparameterTuningJobRequest>): CreateHyperparameterTuningJobRequest {
    const message = createBaseCreateHyperparameterTuningJobRequest();
    message.parent = object.parent ?? "";
    message.hyperparameterTuningJob =
      (object.hyperparameterTuningJob !== undefined && object.hyperparameterTuningJob !== null)
        ? HyperparameterTuningJob.fromPartial(object.hyperparameterTuningJob)
        : undefined;
    return message;
  },
};

function createBaseGetHyperparameterTuningJobRequest(): GetHyperparameterTuningJobRequest {
  return { name: "" };
}

export const GetHyperparameterTuningJobRequest: MessageFns<GetHyperparameterTuningJobRequest> = {
  encode(message: GetHyperparameterTuningJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHyperparameterTuningJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHyperparameterTuningJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHyperparameterTuningJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetHyperparameterTuningJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetHyperparameterTuningJobRequest>): GetHyperparameterTuningJobRequest {
    return GetHyperparameterTuningJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHyperparameterTuningJobRequest>): GetHyperparameterTuningJobRequest {
    const message = createBaseGetHyperparameterTuningJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListHyperparameterTuningJobsRequest(): ListHyperparameterTuningJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListHyperparameterTuningJobsRequest: MessageFns<ListHyperparameterTuningJobsRequest> = {
  encode(message: ListHyperparameterTuningJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHyperparameterTuningJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHyperparameterTuningJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHyperparameterTuningJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListHyperparameterTuningJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListHyperparameterTuningJobsRequest>): ListHyperparameterTuningJobsRequest {
    return ListHyperparameterTuningJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHyperparameterTuningJobsRequest>): ListHyperparameterTuningJobsRequest {
    const message = createBaseListHyperparameterTuningJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListHyperparameterTuningJobsResponse(): ListHyperparameterTuningJobsResponse {
  return { hyperparameterTuningJobs: [], nextPageToken: "" };
}

export const ListHyperparameterTuningJobsResponse: MessageFns<ListHyperparameterTuningJobsResponse> = {
  encode(message: ListHyperparameterTuningJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hyperparameterTuningJobs) {
      HyperparameterTuningJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListHyperparameterTuningJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHyperparameterTuningJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hyperparameterTuningJobs.push(HyperparameterTuningJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListHyperparameterTuningJobsResponse {
    return {
      hyperparameterTuningJobs: globalThis.Array.isArray(object?.hyperparameterTuningJobs)
        ? object.hyperparameterTuningJobs.map((e: any) => HyperparameterTuningJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListHyperparameterTuningJobsResponse): unknown {
    const obj: any = {};
    if (message.hyperparameterTuningJobs?.length) {
      obj.hyperparameterTuningJobs = message.hyperparameterTuningJobs.map((e) => HyperparameterTuningJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListHyperparameterTuningJobsResponse>): ListHyperparameterTuningJobsResponse {
    return ListHyperparameterTuningJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHyperparameterTuningJobsResponse>): ListHyperparameterTuningJobsResponse {
    const message = createBaseListHyperparameterTuningJobsResponse();
    message.hyperparameterTuningJobs =
      object.hyperparameterTuningJobs?.map((e) => HyperparameterTuningJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteHyperparameterTuningJobRequest(): DeleteHyperparameterTuningJobRequest {
  return { name: "" };
}

export const DeleteHyperparameterTuningJobRequest: MessageFns<DeleteHyperparameterTuningJobRequest> = {
  encode(message: DeleteHyperparameterTuningJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteHyperparameterTuningJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteHyperparameterTuningJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteHyperparameterTuningJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteHyperparameterTuningJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteHyperparameterTuningJobRequest>): DeleteHyperparameterTuningJobRequest {
    return DeleteHyperparameterTuningJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteHyperparameterTuningJobRequest>): DeleteHyperparameterTuningJobRequest {
    const message = createBaseDeleteHyperparameterTuningJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCancelHyperparameterTuningJobRequest(): CancelHyperparameterTuningJobRequest {
  return { name: "" };
}

export const CancelHyperparameterTuningJobRequest: MessageFns<CancelHyperparameterTuningJobRequest> = {
  encode(message: CancelHyperparameterTuningJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelHyperparameterTuningJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelHyperparameterTuningJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelHyperparameterTuningJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CancelHyperparameterTuningJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelHyperparameterTuningJobRequest>): CancelHyperparameterTuningJobRequest {
    return CancelHyperparameterTuningJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelHyperparameterTuningJobRequest>): CancelHyperparameterTuningJobRequest {
    const message = createBaseCancelHyperparameterTuningJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateNasJobRequest(): CreateNasJobRequest {
  return { parent: "", nasJob: undefined };
}

export const CreateNasJobRequest: MessageFns<CreateNasJobRequest> = {
  encode(message: CreateNasJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.nasJob !== undefined) {
      NasJob.encode(message.nasJob, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNasJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNasJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nasJob = NasJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNasJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      nasJob: isSet(object.nasJob) ? NasJob.fromJSON(object.nasJob) : undefined,
    };
  },

  toJSON(message: CreateNasJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.nasJob !== undefined) {
      obj.nasJob = NasJob.toJSON(message.nasJob);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateNasJobRequest>): CreateNasJobRequest {
    return CreateNasJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateNasJobRequest>): CreateNasJobRequest {
    const message = createBaseCreateNasJobRequest();
    message.parent = object.parent ?? "";
    message.nasJob = (object.nasJob !== undefined && object.nasJob !== null)
      ? NasJob.fromPartial(object.nasJob)
      : undefined;
    return message;
  },
};

function createBaseGetNasJobRequest(): GetNasJobRequest {
  return { name: "" };
}

export const GetNasJobRequest: MessageFns<GetNasJobRequest> = {
  encode(message: GetNasJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNasJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNasJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNasJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNasJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNasJobRequest>): GetNasJobRequest {
    return GetNasJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNasJobRequest>): GetNasJobRequest {
    const message = createBaseGetNasJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListNasJobsRequest(): ListNasJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListNasJobsRequest: MessageFns<ListNasJobsRequest> = {
  encode(message: ListNasJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNasJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNasJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNasJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListNasJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListNasJobsRequest>): ListNasJobsRequest {
    return ListNasJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNasJobsRequest>): ListNasJobsRequest {
    const message = createBaseListNasJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListNasJobsResponse(): ListNasJobsResponse {
  return { nasJobs: [], nextPageToken: "" };
}

export const ListNasJobsResponse: MessageFns<ListNasJobsResponse> = {
  encode(message: ListNasJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nasJobs) {
      NasJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNasJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNasJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nasJobs.push(NasJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNasJobsResponse {
    return {
      nasJobs: globalThis.Array.isArray(object?.nasJobs) ? object.nasJobs.map((e: any) => NasJob.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNasJobsResponse): unknown {
    const obj: any = {};
    if (message.nasJobs?.length) {
      obj.nasJobs = message.nasJobs.map((e) => NasJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNasJobsResponse>): ListNasJobsResponse {
    return ListNasJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNasJobsResponse>): ListNasJobsResponse {
    const message = createBaseListNasJobsResponse();
    message.nasJobs = object.nasJobs?.map((e) => NasJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteNasJobRequest(): DeleteNasJobRequest {
  return { name: "" };
}

export const DeleteNasJobRequest: MessageFns<DeleteNasJobRequest> = {
  encode(message: DeleteNasJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNasJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNasJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNasJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteNasJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteNasJobRequest>): DeleteNasJobRequest {
    return DeleteNasJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteNasJobRequest>): DeleteNasJobRequest {
    const message = createBaseDeleteNasJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCancelNasJobRequest(): CancelNasJobRequest {
  return { name: "" };
}

export const CancelNasJobRequest: MessageFns<CancelNasJobRequest> = {
  encode(message: CancelNasJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelNasJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelNasJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelNasJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CancelNasJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelNasJobRequest>): CancelNasJobRequest {
    return CancelNasJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelNasJobRequest>): CancelNasJobRequest {
    const message = createBaseCancelNasJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetNasTrialDetailRequest(): GetNasTrialDetailRequest {
  return { name: "" };
}

export const GetNasTrialDetailRequest: MessageFns<GetNasTrialDetailRequest> = {
  encode(message: GetNasTrialDetailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNasTrialDetailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNasTrialDetailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNasTrialDetailRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetNasTrialDetailRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetNasTrialDetailRequest>): GetNasTrialDetailRequest {
    return GetNasTrialDetailRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNasTrialDetailRequest>): GetNasTrialDetailRequest {
    const message = createBaseGetNasTrialDetailRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListNasTrialDetailsRequest(): ListNasTrialDetailsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListNasTrialDetailsRequest: MessageFns<ListNasTrialDetailsRequest> = {
  encode(message: ListNasTrialDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNasTrialDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNasTrialDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNasTrialDetailsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListNasTrialDetailsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNasTrialDetailsRequest>): ListNasTrialDetailsRequest {
    return ListNasTrialDetailsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNasTrialDetailsRequest>): ListNasTrialDetailsRequest {
    const message = createBaseListNasTrialDetailsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListNasTrialDetailsResponse(): ListNasTrialDetailsResponse {
  return { nasTrialDetails: [], nextPageToken: "" };
}

export const ListNasTrialDetailsResponse: MessageFns<ListNasTrialDetailsResponse> = {
  encode(message: ListNasTrialDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nasTrialDetails) {
      NasTrialDetail.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNasTrialDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNasTrialDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.nasTrialDetails.push(NasTrialDetail.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNasTrialDetailsResponse {
    return {
      nasTrialDetails: globalThis.Array.isArray(object?.nasTrialDetails)
        ? object.nasTrialDetails.map((e: any) => NasTrialDetail.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListNasTrialDetailsResponse): unknown {
    const obj: any = {};
    if (message.nasTrialDetails?.length) {
      obj.nasTrialDetails = message.nasTrialDetails.map((e) => NasTrialDetail.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListNasTrialDetailsResponse>): ListNasTrialDetailsResponse {
    return ListNasTrialDetailsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListNasTrialDetailsResponse>): ListNasTrialDetailsResponse {
    const message = createBaseListNasTrialDetailsResponse();
    message.nasTrialDetails = object.nasTrialDetails?.map((e) => NasTrialDetail.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateBatchPredictionJobRequest(): CreateBatchPredictionJobRequest {
  return { parent: "", batchPredictionJob: undefined };
}

export const CreateBatchPredictionJobRequest: MessageFns<CreateBatchPredictionJobRequest> = {
  encode(message: CreateBatchPredictionJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.batchPredictionJob !== undefined) {
      BatchPredictionJob.encode(message.batchPredictionJob, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBatchPredictionJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBatchPredictionJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.batchPredictionJob = BatchPredictionJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBatchPredictionJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      batchPredictionJob: isSet(object.batchPredictionJob)
        ? BatchPredictionJob.fromJSON(object.batchPredictionJob)
        : undefined,
    };
  },

  toJSON(message: CreateBatchPredictionJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.batchPredictionJob !== undefined) {
      obj.batchPredictionJob = BatchPredictionJob.toJSON(message.batchPredictionJob);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBatchPredictionJobRequest>): CreateBatchPredictionJobRequest {
    return CreateBatchPredictionJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBatchPredictionJobRequest>): CreateBatchPredictionJobRequest {
    const message = createBaseCreateBatchPredictionJobRequest();
    message.parent = object.parent ?? "";
    message.batchPredictionJob = (object.batchPredictionJob !== undefined && object.batchPredictionJob !== null)
      ? BatchPredictionJob.fromPartial(object.batchPredictionJob)
      : undefined;
    return message;
  },
};

function createBaseGetBatchPredictionJobRequest(): GetBatchPredictionJobRequest {
  return { name: "" };
}

export const GetBatchPredictionJobRequest: MessageFns<GetBatchPredictionJobRequest> = {
  encode(message: GetBatchPredictionJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBatchPredictionJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBatchPredictionJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBatchPredictionJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetBatchPredictionJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetBatchPredictionJobRequest>): GetBatchPredictionJobRequest {
    return GetBatchPredictionJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetBatchPredictionJobRequest>): GetBatchPredictionJobRequest {
    const message = createBaseGetBatchPredictionJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListBatchPredictionJobsRequest(): ListBatchPredictionJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListBatchPredictionJobsRequest: MessageFns<ListBatchPredictionJobsRequest> = {
  encode(message: ListBatchPredictionJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBatchPredictionJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBatchPredictionJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBatchPredictionJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListBatchPredictionJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListBatchPredictionJobsRequest>): ListBatchPredictionJobsRequest {
    return ListBatchPredictionJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBatchPredictionJobsRequest>): ListBatchPredictionJobsRequest {
    const message = createBaseListBatchPredictionJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListBatchPredictionJobsResponse(): ListBatchPredictionJobsResponse {
  return { batchPredictionJobs: [], nextPageToken: "" };
}

export const ListBatchPredictionJobsResponse: MessageFns<ListBatchPredictionJobsResponse> = {
  encode(message: ListBatchPredictionJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.batchPredictionJobs) {
      BatchPredictionJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBatchPredictionJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBatchPredictionJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.batchPredictionJobs.push(BatchPredictionJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBatchPredictionJobsResponse {
    return {
      batchPredictionJobs: globalThis.Array.isArray(object?.batchPredictionJobs)
        ? object.batchPredictionJobs.map((e: any) => BatchPredictionJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListBatchPredictionJobsResponse): unknown {
    const obj: any = {};
    if (message.batchPredictionJobs?.length) {
      obj.batchPredictionJobs = message.batchPredictionJobs.map((e) => BatchPredictionJob.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListBatchPredictionJobsResponse>): ListBatchPredictionJobsResponse {
    return ListBatchPredictionJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListBatchPredictionJobsResponse>): ListBatchPredictionJobsResponse {
    const message = createBaseListBatchPredictionJobsResponse();
    message.batchPredictionJobs = object.batchPredictionJobs?.map((e) => BatchPredictionJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteBatchPredictionJobRequest(): DeleteBatchPredictionJobRequest {
  return { name: "" };
}

export const DeleteBatchPredictionJobRequest: MessageFns<DeleteBatchPredictionJobRequest> = {
  encode(message: DeleteBatchPredictionJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBatchPredictionJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBatchPredictionJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBatchPredictionJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteBatchPredictionJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteBatchPredictionJobRequest>): DeleteBatchPredictionJobRequest {
    return DeleteBatchPredictionJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteBatchPredictionJobRequest>): DeleteBatchPredictionJobRequest {
    const message = createBaseDeleteBatchPredictionJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCancelBatchPredictionJobRequest(): CancelBatchPredictionJobRequest {
  return { name: "" };
}

export const CancelBatchPredictionJobRequest: MessageFns<CancelBatchPredictionJobRequest> = {
  encode(message: CancelBatchPredictionJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelBatchPredictionJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelBatchPredictionJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelBatchPredictionJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CancelBatchPredictionJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelBatchPredictionJobRequest>): CancelBatchPredictionJobRequest {
    return CancelBatchPredictionJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelBatchPredictionJobRequest>): CancelBatchPredictionJobRequest {
    const message = createBaseCancelBatchPredictionJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateModelDeploymentMonitoringJobRequest(): CreateModelDeploymentMonitoringJobRequest {
  return { parent: "", modelDeploymentMonitoringJob: undefined };
}

export const CreateModelDeploymentMonitoringJobRequest: MessageFns<CreateModelDeploymentMonitoringJobRequest> = {
  encode(message: CreateModelDeploymentMonitoringJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.modelDeploymentMonitoringJob !== undefined) {
      ModelDeploymentMonitoringJob.encode(message.modelDeploymentMonitoringJob, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateModelDeploymentMonitoringJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateModelDeploymentMonitoringJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modelDeploymentMonitoringJob = ModelDeploymentMonitoringJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateModelDeploymentMonitoringJobRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      modelDeploymentMonitoringJob: isSet(object.modelDeploymentMonitoringJob)
        ? ModelDeploymentMonitoringJob.fromJSON(object.modelDeploymentMonitoringJob)
        : undefined,
    };
  },

  toJSON(message: CreateModelDeploymentMonitoringJobRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.modelDeploymentMonitoringJob !== undefined) {
      obj.modelDeploymentMonitoringJob = ModelDeploymentMonitoringJob.toJSON(message.modelDeploymentMonitoringJob);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateModelDeploymentMonitoringJobRequest>): CreateModelDeploymentMonitoringJobRequest {
    return CreateModelDeploymentMonitoringJobRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreateModelDeploymentMonitoringJobRequest>,
  ): CreateModelDeploymentMonitoringJobRequest {
    const message = createBaseCreateModelDeploymentMonitoringJobRequest();
    message.parent = object.parent ?? "";
    message.modelDeploymentMonitoringJob =
      (object.modelDeploymentMonitoringJob !== undefined && object.modelDeploymentMonitoringJob !== null)
        ? ModelDeploymentMonitoringJob.fromPartial(object.modelDeploymentMonitoringJob)
        : undefined;
    return message;
  },
};

function createBaseSearchModelDeploymentMonitoringStatsAnomaliesRequest(): SearchModelDeploymentMonitoringStatsAnomaliesRequest {
  return {
    modelDeploymentMonitoringJob: "",
    deployedModelId: "",
    featureDisplayName: "",
    objectives: [],
    pageSize: 0,
    pageToken: "",
    startTime: undefined,
    endTime: undefined,
  };
}

export const SearchModelDeploymentMonitoringStatsAnomaliesRequest: MessageFns<
  SearchModelDeploymentMonitoringStatsAnomaliesRequest
> = {
  encode(
    message: SearchModelDeploymentMonitoringStatsAnomaliesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.modelDeploymentMonitoringJob !== "") {
      writer.uint32(10).string(message.modelDeploymentMonitoringJob);
    }
    if (message.deployedModelId !== "") {
      writer.uint32(18).string(message.deployedModelId);
    }
    if (message.featureDisplayName !== "") {
      writer.uint32(26).string(message.featureDisplayName);
    }
    for (const v of message.objectives) {
      SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective.encode(v!, writer.uint32(34).fork())
        .join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(40).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(50).string(message.pageToken);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(58).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchModelDeploymentMonitoringStatsAnomaliesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchModelDeploymentMonitoringStatsAnomaliesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelDeploymentMonitoringJob = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.deployedModelId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.featureDisplayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.objectives.push(
            SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchModelDeploymentMonitoringStatsAnomaliesRequest {
    return {
      modelDeploymentMonitoringJob: isSet(object.modelDeploymentMonitoringJob)
        ? globalThis.String(object.modelDeploymentMonitoringJob)
        : "",
      deployedModelId: isSet(object.deployedModelId) ? globalThis.String(object.deployedModelId) : "",
      featureDisplayName: isSet(object.featureDisplayName) ? globalThis.String(object.featureDisplayName) : "",
      objectives: globalThis.Array.isArray(object?.objectives)
        ? object.objectives.map((e: any) =>
          SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective.fromJSON(e)
        )
        : [],
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: SearchModelDeploymentMonitoringStatsAnomaliesRequest): unknown {
    const obj: any = {};
    if (message.modelDeploymentMonitoringJob !== "") {
      obj.modelDeploymentMonitoringJob = message.modelDeploymentMonitoringJob;
    }
    if (message.deployedModelId !== "") {
      obj.deployedModelId = message.deployedModelId;
    }
    if (message.featureDisplayName !== "") {
      obj.featureDisplayName = message.featureDisplayName;
    }
    if (message.objectives?.length) {
      obj.objectives = message.objectives.map((e) =>
        SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective.toJSON(e)
      );
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create(
    base?: DeepPartial<SearchModelDeploymentMonitoringStatsAnomaliesRequest>,
  ): SearchModelDeploymentMonitoringStatsAnomaliesRequest {
    return SearchModelDeploymentMonitoringStatsAnomaliesRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SearchModelDeploymentMonitoringStatsAnomaliesRequest>,
  ): SearchModelDeploymentMonitoringStatsAnomaliesRequest {
    const message = createBaseSearchModelDeploymentMonitoringStatsAnomaliesRequest();
    message.modelDeploymentMonitoringJob = object.modelDeploymentMonitoringJob ?? "";
    message.deployedModelId = object.deployedModelId ?? "";
    message.featureDisplayName = object.featureDisplayName ?? "";
    message.objectives =
      object.objectives?.map((e) =>
        SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective.fromPartial(e)
      ) || [];
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseSearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective(): SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective {
  return { type: 0, topFeatureCount: 0 };
}

export const SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective: MessageFns<
  SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective
> = {
  encode(
    message: SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.topFeatureCount !== 0) {
      writer.uint32(32).int32(message.topFeatureCount);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.topFeatureCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective {
    return {
      type: isSet(object.type) ? modelDeploymentMonitoringObjectiveTypeFromJSON(object.type) : 0,
      topFeatureCount: isSet(object.topFeatureCount) ? globalThis.Number(object.topFeatureCount) : 0,
    };
  },

  toJSON(message: SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = modelDeploymentMonitoringObjectiveTypeToJSON(message.type);
    }
    if (message.topFeatureCount !== 0) {
      obj.topFeatureCount = Math.round(message.topFeatureCount);
    }
    return obj;
  },

  create(
    base?: DeepPartial<SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective>,
  ): SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective {
    return SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective>,
  ): SearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective {
    const message = createBaseSearchModelDeploymentMonitoringStatsAnomaliesRequest_StatsAnomaliesObjective();
    message.type = object.type ?? 0;
    message.topFeatureCount = object.topFeatureCount ?? 0;
    return message;
  },
};

function createBaseSearchModelDeploymentMonitoringStatsAnomaliesResponse(): SearchModelDeploymentMonitoringStatsAnomaliesResponse {
  return { monitoringStats: [], nextPageToken: "" };
}

export const SearchModelDeploymentMonitoringStatsAnomaliesResponse: MessageFns<
  SearchModelDeploymentMonitoringStatsAnomaliesResponse
> = {
  encode(
    message: SearchModelDeploymentMonitoringStatsAnomaliesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.monitoringStats) {
      ModelMonitoringStatsAnomalies.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchModelDeploymentMonitoringStatsAnomaliesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchModelDeploymentMonitoringStatsAnomaliesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.monitoringStats.push(ModelMonitoringStatsAnomalies.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchModelDeploymentMonitoringStatsAnomaliesResponse {
    return {
      monitoringStats: globalThis.Array.isArray(object?.monitoringStats)
        ? object.monitoringStats.map((e: any) => ModelMonitoringStatsAnomalies.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchModelDeploymentMonitoringStatsAnomaliesResponse): unknown {
    const obj: any = {};
    if (message.monitoringStats?.length) {
      obj.monitoringStats = message.monitoringStats.map((e) => ModelMonitoringStatsAnomalies.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(
    base?: DeepPartial<SearchModelDeploymentMonitoringStatsAnomaliesResponse>,
  ): SearchModelDeploymentMonitoringStatsAnomaliesResponse {
    return SearchModelDeploymentMonitoringStatsAnomaliesResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SearchModelDeploymentMonitoringStatsAnomaliesResponse>,
  ): SearchModelDeploymentMonitoringStatsAnomaliesResponse {
    const message = createBaseSearchModelDeploymentMonitoringStatsAnomaliesResponse();
    message.monitoringStats = object.monitoringStats?.map((e) => ModelMonitoringStatsAnomalies.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetModelDeploymentMonitoringJobRequest(): GetModelDeploymentMonitoringJobRequest {
  return { name: "" };
}

export const GetModelDeploymentMonitoringJobRequest: MessageFns<GetModelDeploymentMonitoringJobRequest> = {
  encode(message: GetModelDeploymentMonitoringJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModelDeploymentMonitoringJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModelDeploymentMonitoringJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModelDeploymentMonitoringJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetModelDeploymentMonitoringJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetModelDeploymentMonitoringJobRequest>): GetModelDeploymentMonitoringJobRequest {
    return GetModelDeploymentMonitoringJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetModelDeploymentMonitoringJobRequest>): GetModelDeploymentMonitoringJobRequest {
    const message = createBaseGetModelDeploymentMonitoringJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListModelDeploymentMonitoringJobsRequest(): ListModelDeploymentMonitoringJobsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "", readMask: undefined };
}

export const ListModelDeploymentMonitoringJobsRequest: MessageFns<ListModelDeploymentMonitoringJobsRequest> = {
  encode(message: ListModelDeploymentMonitoringJobsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    if (message.readMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.readMask), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelDeploymentMonitoringJobsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelDeploymentMonitoringJobsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.readMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelDeploymentMonitoringJobsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      readMask: isSet(object.readMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.readMask)) : undefined,
    };
  },

  toJSON(message: ListModelDeploymentMonitoringJobsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.readMask !== undefined) {
      obj.readMask = FieldMask.toJSON(FieldMask.wrap(message.readMask));
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelDeploymentMonitoringJobsRequest>): ListModelDeploymentMonitoringJobsRequest {
    return ListModelDeploymentMonitoringJobsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelDeploymentMonitoringJobsRequest>): ListModelDeploymentMonitoringJobsRequest {
    const message = createBaseListModelDeploymentMonitoringJobsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.readMask = object.readMask ?? undefined;
    return message;
  },
};

function createBaseListModelDeploymentMonitoringJobsResponse(): ListModelDeploymentMonitoringJobsResponse {
  return { modelDeploymentMonitoringJobs: [], nextPageToken: "" };
}

export const ListModelDeploymentMonitoringJobsResponse: MessageFns<ListModelDeploymentMonitoringJobsResponse> = {
  encode(message: ListModelDeploymentMonitoringJobsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.modelDeploymentMonitoringJobs) {
      ModelDeploymentMonitoringJob.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelDeploymentMonitoringJobsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelDeploymentMonitoringJobsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelDeploymentMonitoringJobs.push(ModelDeploymentMonitoringJob.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelDeploymentMonitoringJobsResponse {
    return {
      modelDeploymentMonitoringJobs: globalThis.Array.isArray(object?.modelDeploymentMonitoringJobs)
        ? object.modelDeploymentMonitoringJobs.map((e: any) => ModelDeploymentMonitoringJob.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListModelDeploymentMonitoringJobsResponse): unknown {
    const obj: any = {};
    if (message.modelDeploymentMonitoringJobs?.length) {
      obj.modelDeploymentMonitoringJobs = message.modelDeploymentMonitoringJobs.map((e) =>
        ModelDeploymentMonitoringJob.toJSON(e)
      );
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelDeploymentMonitoringJobsResponse>): ListModelDeploymentMonitoringJobsResponse {
    return ListModelDeploymentMonitoringJobsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListModelDeploymentMonitoringJobsResponse>,
  ): ListModelDeploymentMonitoringJobsResponse {
    const message = createBaseListModelDeploymentMonitoringJobsResponse();
    message.modelDeploymentMonitoringJobs =
      object.modelDeploymentMonitoringJobs?.map((e) => ModelDeploymentMonitoringJob.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateModelDeploymentMonitoringJobRequest(): UpdateModelDeploymentMonitoringJobRequest {
  return { modelDeploymentMonitoringJob: undefined, updateMask: undefined };
}

export const UpdateModelDeploymentMonitoringJobRequest: MessageFns<UpdateModelDeploymentMonitoringJobRequest> = {
  encode(message: UpdateModelDeploymentMonitoringJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelDeploymentMonitoringJob !== undefined) {
      ModelDeploymentMonitoringJob.encode(message.modelDeploymentMonitoringJob, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateModelDeploymentMonitoringJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateModelDeploymentMonitoringJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelDeploymentMonitoringJob = ModelDeploymentMonitoringJob.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateModelDeploymentMonitoringJobRequest {
    return {
      modelDeploymentMonitoringJob: isSet(object.modelDeploymentMonitoringJob)
        ? ModelDeploymentMonitoringJob.fromJSON(object.modelDeploymentMonitoringJob)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateModelDeploymentMonitoringJobRequest): unknown {
    const obj: any = {};
    if (message.modelDeploymentMonitoringJob !== undefined) {
      obj.modelDeploymentMonitoringJob = ModelDeploymentMonitoringJob.toJSON(message.modelDeploymentMonitoringJob);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateModelDeploymentMonitoringJobRequest>): UpdateModelDeploymentMonitoringJobRequest {
    return UpdateModelDeploymentMonitoringJobRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateModelDeploymentMonitoringJobRequest>,
  ): UpdateModelDeploymentMonitoringJobRequest {
    const message = createBaseUpdateModelDeploymentMonitoringJobRequest();
    message.modelDeploymentMonitoringJob =
      (object.modelDeploymentMonitoringJob !== undefined && object.modelDeploymentMonitoringJob !== null)
        ? ModelDeploymentMonitoringJob.fromPartial(object.modelDeploymentMonitoringJob)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteModelDeploymentMonitoringJobRequest(): DeleteModelDeploymentMonitoringJobRequest {
  return { name: "" };
}

export const DeleteModelDeploymentMonitoringJobRequest: MessageFns<DeleteModelDeploymentMonitoringJobRequest> = {
  encode(message: DeleteModelDeploymentMonitoringJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteModelDeploymentMonitoringJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteModelDeploymentMonitoringJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteModelDeploymentMonitoringJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteModelDeploymentMonitoringJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteModelDeploymentMonitoringJobRequest>): DeleteModelDeploymentMonitoringJobRequest {
    return DeleteModelDeploymentMonitoringJobRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeleteModelDeploymentMonitoringJobRequest>,
  ): DeleteModelDeploymentMonitoringJobRequest {
    const message = createBaseDeleteModelDeploymentMonitoringJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePauseModelDeploymentMonitoringJobRequest(): PauseModelDeploymentMonitoringJobRequest {
  return { name: "" };
}

export const PauseModelDeploymentMonitoringJobRequest: MessageFns<PauseModelDeploymentMonitoringJobRequest> = {
  encode(message: PauseModelDeploymentMonitoringJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PauseModelDeploymentMonitoringJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePauseModelDeploymentMonitoringJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PauseModelDeploymentMonitoringJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: PauseModelDeploymentMonitoringJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<PauseModelDeploymentMonitoringJobRequest>): PauseModelDeploymentMonitoringJobRequest {
    return PauseModelDeploymentMonitoringJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PauseModelDeploymentMonitoringJobRequest>): PauseModelDeploymentMonitoringJobRequest {
    const message = createBasePauseModelDeploymentMonitoringJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseResumeModelDeploymentMonitoringJobRequest(): ResumeModelDeploymentMonitoringJobRequest {
  return { name: "" };
}

export const ResumeModelDeploymentMonitoringJobRequest: MessageFns<ResumeModelDeploymentMonitoringJobRequest> = {
  encode(message: ResumeModelDeploymentMonitoringJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeModelDeploymentMonitoringJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeModelDeploymentMonitoringJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResumeModelDeploymentMonitoringJobRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: ResumeModelDeploymentMonitoringJobRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<ResumeModelDeploymentMonitoringJobRequest>): ResumeModelDeploymentMonitoringJobRequest {
    return ResumeModelDeploymentMonitoringJobRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResumeModelDeploymentMonitoringJobRequest>,
  ): ResumeModelDeploymentMonitoringJobRequest {
    const message = createBaseResumeModelDeploymentMonitoringJobRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateModelDeploymentMonitoringJobOperationMetadata(): UpdateModelDeploymentMonitoringJobOperationMetadata {
  return { genericMetadata: undefined };
}

export const UpdateModelDeploymentMonitoringJobOperationMetadata: MessageFns<
  UpdateModelDeploymentMonitoringJobOperationMetadata
> = {
  encode(
    message: UpdateModelDeploymentMonitoringJobOperationMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.genericMetadata !== undefined) {
      GenericOperationMetadata.encode(message.genericMetadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateModelDeploymentMonitoringJobOperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateModelDeploymentMonitoringJobOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.genericMetadata = GenericOperationMetadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateModelDeploymentMonitoringJobOperationMetadata {
    return {
      genericMetadata: isSet(object.genericMetadata)
        ? GenericOperationMetadata.fromJSON(object.genericMetadata)
        : undefined,
    };
  },

  toJSON(message: UpdateModelDeploymentMonitoringJobOperationMetadata): unknown {
    const obj: any = {};
    if (message.genericMetadata !== undefined) {
      obj.genericMetadata = GenericOperationMetadata.toJSON(message.genericMetadata);
    }
    return obj;
  },

  create(
    base?: DeepPartial<UpdateModelDeploymentMonitoringJobOperationMetadata>,
  ): UpdateModelDeploymentMonitoringJobOperationMetadata {
    return UpdateModelDeploymentMonitoringJobOperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateModelDeploymentMonitoringJobOperationMetadata>,
  ): UpdateModelDeploymentMonitoringJobOperationMetadata {
    const message = createBaseUpdateModelDeploymentMonitoringJobOperationMetadata();
    message.genericMetadata = (object.genericMetadata !== undefined && object.genericMetadata !== null)
      ? GenericOperationMetadata.fromPartial(object.genericMetadata)
      : undefined;
    return message;
  },
};

/** A service for creating and managing Vertex AI's jobs. */
export type JobServiceDefinition = typeof JobServiceDefinition;
export const JobServiceDefinition = {
  name: "JobService",
  fullName: "google.cloud.aiplatform.v1beta1.JobService",
  methods: {
    /**
     * Creates a CustomJob. A created CustomJob right away
     * will be attempted to be run.
     */
    createCustomJob: {
      name: "CreateCustomJob",
      requestType: CreateCustomJobRequest,
      requestStream: false,
      responseType: CustomJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([17, 112, 97, 114, 101, 110, 116, 44, 99, 117, 115, 116, 111, 109, 95, 106, 111, 98])],
          578365826: [
            Buffer.from([
              65,
              58,
              10,
              99,
              117,
              115,
              116,
              111,
              109,
              95,
              106,
              111,
              98,
              34,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a CustomJob. */
    getCustomJob: {
      name: "GetCustomJob",
      requestType: GetCustomJobRequest,
      requestStream: false,
      responseType: CustomJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists CustomJobs in a Location. */
    listCustomJobs: {
      name: "ListCustomJobs",
      requestType: ListCustomJobsRequest,
      requestStream: false,
      responseType: ListCustomJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a CustomJob. */
    deleteCustomJob: {
      name: "DeleteCustomJob",
      requestType: DeleteCustomJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              53,
              42,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Cancels a CustomJob.
     * Starts asynchronous cancellation on the CustomJob. The server
     * makes a best effort to cancel the job, but success is not
     * guaranteed. Clients can use
     * [JobService.GetCustomJob][google.cloud.aiplatform.v1beta1.JobService.GetCustomJob]
     * or other methods to check whether the cancellation succeeded or whether the
     * job completed despite cancellation. On successful cancellation,
     * the CustomJob is not deleted; instead it becomes a job with
     * a [CustomJob.error][google.cloud.aiplatform.v1beta1.CustomJob.error] value
     * with a [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding
     * to `Code.CANCELLED`, and
     * [CustomJob.state][google.cloud.aiplatform.v1beta1.CustomJob.state] is set
     * to `CANCELLED`.
     */
    cancelCustomJob: {
      name: "CancelCustomJob",
      requestType: CancelCustomJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              117,
              115,
              116,
              111,
              109,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /** Creates a DataLabelingJob. */
    createDataLabelingJob: {
      name: "CreateDataLabelingJob",
      requestType: CreateDataLabelingJobRequest,
      requestStream: false,
      responseType: DataLabelingJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              24,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              97,
              116,
              97,
              95,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
            ]),
          ],
          578365826: [
            Buffer.from([
              78,
              58,
              17,
              100,
              97,
              116,
              97,
              95,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
              34,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a DataLabelingJob. */
    getDataLabelingJob: {
      name: "GetDataLabelingJob",
      requestType: GetDataLabelingJobRequest,
      requestStream: false,
      responseType: DataLabelingJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists DataLabelingJobs in a Location. */
    listDataLabelingJobs: {
      name: "ListDataLabelingJobs",
      requestType: ListDataLabelingJobsRequest,
      requestStream: false,
      responseType: ListDataLabelingJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a DataLabelingJob. */
    deleteDataLabelingJob: {
      name: "DeleteDataLabelingJob",
      requestType: DeleteDataLabelingJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              42,
              57,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Cancels a DataLabelingJob. Success of cancellation is not guaranteed. */
    cancelDataLabelingJob: {
      name: "CancelDataLabelingJob",
      requestType: CancelDataLabelingJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              69,
              58,
              1,
              42,
              34,
              64,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /** Creates a HyperparameterTuningJob */
    createHyperparameterTuningJob: {
      name: "CreateHyperparameterTuningJob",
      requestType: CreateHyperparameterTuningJobRequest,
      requestStream: false,
      responseType: HyperparameterTuningJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              32,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              104,
              121,
              112,
              101,
              114,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              95,
              116,
              117,
              110,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
            ]),
          ],
          578365826: [
            Buffer.from([
              94,
              58,
              25,
              104,
              121,
              112,
              101,
              114,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              95,
              116,
              117,
              110,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
              34,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              104,
              121,
              112,
              101,
              114,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              84,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a HyperparameterTuningJob */
    getHyperparameterTuningJob: {
      name: "GetHyperparameterTuningJob",
      requestType: GetHyperparameterTuningJobRequest,
      requestStream: false,
      responseType: HyperparameterTuningJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              104,
              121,
              112,
              101,
              114,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              84,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists HyperparameterTuningJobs in a Location. */
    listHyperparameterTuningJobs: {
      name: "ListHyperparameterTuningJobs",
      requestType: ListHyperparameterTuningJobsRequest,
      requestStream: false,
      responseType: ListHyperparameterTuningJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              104,
              121,
              112,
              101,
              114,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              84,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a HyperparameterTuningJob. */
    deleteHyperparameterTuningJob: {
      name: "DeleteHyperparameterTuningJob",
      requestType: DeleteHyperparameterTuningJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              42,
              65,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              104,
              121,
              112,
              101,
              114,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              84,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Cancels a HyperparameterTuningJob.
     * Starts asynchronous cancellation on the HyperparameterTuningJob. The server
     * makes a best effort to cancel the job, but success is not
     * guaranteed. Clients can use
     * [JobService.GetHyperparameterTuningJob][google.cloud.aiplatform.v1beta1.JobService.GetHyperparameterTuningJob]
     * or other methods to check whether the cancellation succeeded or whether the
     * job completed despite cancellation. On successful cancellation,
     * the HyperparameterTuningJob is not deleted; instead it becomes a job with
     * a
     * [HyperparameterTuningJob.error][google.cloud.aiplatform.v1beta1.HyperparameterTuningJob.error]
     * value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
     * corresponding to `Code.CANCELLED`, and
     * [HyperparameterTuningJob.state][google.cloud.aiplatform.v1beta1.HyperparameterTuningJob.state]
     * is set to `CANCELLED`.
     */
    cancelHyperparameterTuningJob: {
      name: "CancelHyperparameterTuningJob",
      requestType: CancelHyperparameterTuningJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              77,
              58,
              1,
              42,
              34,
              72,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              104,
              121,
              112,
              101,
              114,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              84,
              117,
              110,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /** Creates a NasJob */
    createNasJob: {
      name: "CreateNasJob",
      requestType: CreateNasJobRequest,
      requestStream: false,
      responseType: NasJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 110, 97, 115, 95, 106, 111, 98])],
          578365826: [
            Buffer.from([
              59,
              58,
              7,
              110,
              97,
              115,
              95,
              106,
              111,
              98,
              34,
              48,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              97,
              115,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a NasJob */
    getNasJob: {
      name: "GetNasJob",
      requestType: GetNasJobRequest,
      requestStream: false,
      responseType: NasJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              115,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists NasJobs in a Location. */
    listNasJobs: {
      name: "ListNasJobs",
      requestType: ListNasJobsRequest,
      requestStream: false,
      responseType: ListNasJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              50,
              18,
              48,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              110,
              97,
              115,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Deletes a NasJob. */
    deleteNasJob: {
      name: "DeleteNasJob",
      requestType: DeleteNasJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              50,
              42,
              48,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              115,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Cancels a NasJob.
     * Starts asynchronous cancellation on the NasJob. The server
     * makes a best effort to cancel the job, but success is not
     * guaranteed. Clients can use
     * [JobService.GetNasJob][google.cloud.aiplatform.v1beta1.JobService.GetNasJob]
     * or other methods to check whether the cancellation succeeded or whether the
     * job completed despite cancellation. On successful cancellation,
     * the NasJob is not deleted; instead it becomes a job with
     * a [NasJob.error][google.cloud.aiplatform.v1beta1.NasJob.error] value with a
     * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
     * `Code.CANCELLED`, and
     * [NasJob.state][google.cloud.aiplatform.v1beta1.NasJob.state] is set to
     * `CANCELLED`.
     */
    cancelNasJob: {
      name: "CancelNasJob",
      requestType: CancelNasJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              115,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /** Gets a NasTrialDetail. */
    getNasTrialDetail: {
      name: "GetNasTrialDetail",
      requestType: GetNasTrialDetailRequest,
      requestStream: false,
      responseType: NasTrialDetail,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              115,
              74,
              111,
              98,
              115,
              47,
              42,
              47,
              110,
              97,
              115,
              84,
              114,
              105,
              97,
              108,
              68,
              101,
              116,
              97,
              105,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** List top NasTrialDetails of a NasJob. */
    listNasTrialDetails: {
      name: "ListNasTrialDetails",
      requestType: ListNasTrialDetailsRequest,
      requestStream: false,
      responseType: ListNasTrialDetailsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              68,
              18,
              66,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              110,
              97,
              115,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              47,
              110,
              97,
              115,
              84,
              114,
              105,
              97,
              108,
              68,
              101,
              116,
              97,
              105,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a BatchPredictionJob. A BatchPredictionJob once created will
     * right away be attempted to start.
     */
    createBatchPredictionJob: {
      name: "CreateBatchPredictionJob",
      requestType: CreateBatchPredictionJobRequest,
      requestStream: false,
      responseType: BatchPredictionJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              27,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              98,
              97,
              116,
              99,
              104,
              95,
              112,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
            ]),
          ],
          578365826: [
            Buffer.from([
              84,
              58,
              20,
              98,
              97,
              116,
              99,
              104,
              95,
              112,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              95,
              106,
              111,
              98,
              34,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              116,
              99,
              104,
              80,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a BatchPredictionJob */
    getBatchPredictionJob: {
      name: "GetBatchPredictionJob",
      requestType: GetBatchPredictionJobRequest,
      requestStream: false,
      responseType: BatchPredictionJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              116,
              99,
              104,
              80,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists BatchPredictionJobs in a Location. */
    listBatchPredictionJobs: {
      name: "ListBatchPredictionJobs",
      requestType: ListBatchPredictionJobsRequest,
      requestStream: false,
      responseType: ListBatchPredictionJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              62,
              18,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              98,
              97,
              116,
              99,
              104,
              80,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a BatchPredictionJob. Can only be called on jobs that already
     * finished.
     */
    deleteBatchPredictionJob: {
      name: "DeleteBatchPredictionJob",
      requestType: DeleteBatchPredictionJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              62,
              42,
              60,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              116,
              99,
              104,
              80,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Cancels a BatchPredictionJob.
     *
     * Starts asynchronous cancellation on the BatchPredictionJob. The server
     * makes the best effort to cancel the job, but success is not
     * guaranteed. Clients can use
     * [JobService.GetBatchPredictionJob][google.cloud.aiplatform.v1beta1.JobService.GetBatchPredictionJob]
     * or other methods to check whether the cancellation succeeded or whether the
     * job completed despite cancellation. On a successful cancellation,
     * the BatchPredictionJob is not deleted;instead its
     * [BatchPredictionJob.state][google.cloud.aiplatform.v1beta1.BatchPredictionJob.state]
     * is set to `CANCELLED`. Any files already outputted by the job are not
     * deleted.
     */
    cancelBatchPredictionJob: {
      name: "CancelBatchPredictionJob",
      requestType: CancelBatchPredictionJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              58,
              1,
              42,
              34,
              67,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              98,
              97,
              116,
              99,
              104,
              80,
              114,
              101,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              99,
              97,
              110,
              99,
              101,
              108,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a ModelDeploymentMonitoringJob. It will run periodically on a
     * configured interval.
     */
    createModelDeploymentMonitoringJob: {
      name: "CreateModelDeploymentMonitoringJob",
      requestType: CreateModelDeploymentMonitoringJobRequest,
      requestStream: false,
      responseType: ModelDeploymentMonitoringJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              38,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              109,
              111,
              100,
              101,
              108,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
            ]),
          ],
          578365826: [
            Buffer.from([
              105,
              58,
              31,
              109,
              111,
              100,
              101,
              108,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
              34,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Searches Model Monitoring Statistics generated within a given time window. */
    searchModelDeploymentMonitoringStatsAnomalies: {
      name: "SearchModelDeploymentMonitoringStatsAnomalies",
      requestType: SearchModelDeploymentMonitoringStatsAnomaliesRequest,
      requestStream: false,
      responseType: SearchModelDeploymentMonitoringStatsAnomaliesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              49,
              109,
              111,
              100,
              101,
              108,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
              44,
              100,
              101,
              112,
              108,
              111,
              121,
              101,
              100,
              95,
              109,
              111,
              100,
              101,
              108,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              149,
              1,
              58,
              1,
              42,
              34,
              143,
              1,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              109,
              111,
              100,
              101,
              108,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              77,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              83,
              116,
              97,
              116,
              115,
              65,
              110,
              111,
              109,
              97,
              108,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets a ModelDeploymentMonitoringJob. */
    getModelDeploymentMonitoringJob: {
      name: "GetModelDeploymentMonitoringJob",
      requestType: GetModelDeploymentMonitoringJobRequest,
      requestStream: false,
      responseType: ModelDeploymentMonitoringJob,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists ModelDeploymentMonitoringJobs in a Location. */
    listModelDeploymentMonitoringJobs: {
      name: "ListModelDeploymentMonitoringJobs",
      requestType: ListModelDeploymentMonitoringJobsRequest,
      requestStream: false,
      responseType: ListModelDeploymentMonitoringJobsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              72,
              18,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a ModelDeploymentMonitoringJob. */
    updateModelDeploymentMonitoringJob: {
      name: "UpdateModelDeploymentMonitoringJob",
      requestType: UpdateModelDeploymentMonitoringJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              83,
              10,
              28,
              77,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              18,
              51,
              85,
              112,
              100,
              97,
              116,
              101,
              77,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              43,
              109,
              111,
              100,
              101,
              108,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              137,
              1,
              58,
              31,
              109,
              111,
              100,
              101,
              108,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
              50,
              102,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              109,
              111,
              100,
              101,
              108,
              95,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              95,
              109,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              95,
              106,
              111,
              98,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a ModelDeploymentMonitoringJob. */
    deleteModelDeploymentMonitoringJob: {
      name: "DeleteModelDeploymentMonitoringJob",
      requestType: DeleteModelDeploymentMonitoringJobRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              48,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              23,
              68,
              101,
              108,
              101,
              116,
              101,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              72,
              42,
              70,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Pauses a ModelDeploymentMonitoringJob. If the job is running, the server
     * makes a best effort to cancel the job. Will mark
     * [ModelDeploymentMonitoringJob.state][google.cloud.aiplatform.v1beta1.ModelDeploymentMonitoringJob.state]
     * to 'PAUSED'.
     */
    pauseModelDeploymentMonitoringJob: {
      name: "PauseModelDeploymentMonitoringJob",
      requestType: PauseModelDeploymentMonitoringJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              81,
              58,
              1,
              42,
              34,
              76,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              112,
              97,
              117,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Resumes a paused ModelDeploymentMonitoringJob. It will start to run from
     * next scheduled time. A deleted ModelDeploymentMonitoringJob can't be
     * resumed.
     */
    resumeModelDeploymentMonitoringJob: {
      name: "ResumeModelDeploymentMonitoringJob",
      requestType: ResumeModelDeploymentMonitoringJobRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              82,
              58,
              1,
              42,
              34,
              77,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              111,
              100,
              101,
              108,
              68,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              77,
              111,
              110,
              105,
              116,
              111,
              114,
              105,
              110,
              103,
              74,
              111,
              98,
              115,
              47,
              42,
              125,
              58,
              114,
              101,
              115,
              117,
              109,
              101,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface JobServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a CustomJob. A created CustomJob right away
   * will be attempted to be run.
   */
  createCustomJob(
    request: CreateCustomJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CustomJob>>;
  /** Gets a CustomJob. */
  getCustomJob(request: GetCustomJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<CustomJob>>;
  /** Lists CustomJobs in a Location. */
  listCustomJobs(
    request: ListCustomJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListCustomJobsResponse>>;
  /** Deletes a CustomJob. */
  deleteCustomJob(
    request: DeleteCustomJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Cancels a CustomJob.
   * Starts asynchronous cancellation on the CustomJob. The server
   * makes a best effort to cancel the job, but success is not
   * guaranteed. Clients can use
   * [JobService.GetCustomJob][google.cloud.aiplatform.v1beta1.JobService.GetCustomJob]
   * or other methods to check whether the cancellation succeeded or whether the
   * job completed despite cancellation. On successful cancellation,
   * the CustomJob is not deleted; instead it becomes a job with
   * a [CustomJob.error][google.cloud.aiplatform.v1beta1.CustomJob.error] value
   * with a [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding
   * to `Code.CANCELLED`, and
   * [CustomJob.state][google.cloud.aiplatform.v1beta1.CustomJob.state] is set
   * to `CANCELLED`.
   */
  cancelCustomJob(request: CancelCustomJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Creates a DataLabelingJob. */
  createDataLabelingJob(
    request: CreateDataLabelingJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataLabelingJob>>;
  /** Gets a DataLabelingJob. */
  getDataLabelingJob(
    request: GetDataLabelingJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataLabelingJob>>;
  /** Lists DataLabelingJobs in a Location. */
  listDataLabelingJobs(
    request: ListDataLabelingJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataLabelingJobsResponse>>;
  /** Deletes a DataLabelingJob. */
  deleteDataLabelingJob(
    request: DeleteDataLabelingJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Cancels a DataLabelingJob. Success of cancellation is not guaranteed. */
  cancelDataLabelingJob(
    request: CancelDataLabelingJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Creates a HyperparameterTuningJob */
  createHyperparameterTuningJob(
    request: CreateHyperparameterTuningJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HyperparameterTuningJob>>;
  /** Gets a HyperparameterTuningJob */
  getHyperparameterTuningJob(
    request: GetHyperparameterTuningJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HyperparameterTuningJob>>;
  /** Lists HyperparameterTuningJobs in a Location. */
  listHyperparameterTuningJobs(
    request: ListHyperparameterTuningJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListHyperparameterTuningJobsResponse>>;
  /** Deletes a HyperparameterTuningJob. */
  deleteHyperparameterTuningJob(
    request: DeleteHyperparameterTuningJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Cancels a HyperparameterTuningJob.
   * Starts asynchronous cancellation on the HyperparameterTuningJob. The server
   * makes a best effort to cancel the job, but success is not
   * guaranteed. Clients can use
   * [JobService.GetHyperparameterTuningJob][google.cloud.aiplatform.v1beta1.JobService.GetHyperparameterTuningJob]
   * or other methods to check whether the cancellation succeeded or whether the
   * job completed despite cancellation. On successful cancellation,
   * the HyperparameterTuningJob is not deleted; instead it becomes a job with
   * a
   * [HyperparameterTuningJob.error][google.cloud.aiplatform.v1beta1.HyperparameterTuningJob.error]
   * value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`, and
   * [HyperparameterTuningJob.state][google.cloud.aiplatform.v1beta1.HyperparameterTuningJob.state]
   * is set to `CANCELLED`.
   */
  cancelHyperparameterTuningJob(
    request: CancelHyperparameterTuningJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Creates a NasJob */
  createNasJob(request: CreateNasJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<NasJob>>;
  /** Gets a NasJob */
  getNasJob(request: GetNasJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<NasJob>>;
  /** Lists NasJobs in a Location. */
  listNasJobs(
    request: ListNasJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListNasJobsResponse>>;
  /** Deletes a NasJob. */
  deleteNasJob(request: DeleteNasJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Cancels a NasJob.
   * Starts asynchronous cancellation on the NasJob. The server
   * makes a best effort to cancel the job, but success is not
   * guaranteed. Clients can use
   * [JobService.GetNasJob][google.cloud.aiplatform.v1beta1.JobService.GetNasJob]
   * or other methods to check whether the cancellation succeeded or whether the
   * job completed despite cancellation. On successful cancellation,
   * the NasJob is not deleted; instead it becomes a job with
   * a [NasJob.error][google.cloud.aiplatform.v1beta1.NasJob.error] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`, and
   * [NasJob.state][google.cloud.aiplatform.v1beta1.NasJob.state] is set to
   * `CANCELLED`.
   */
  cancelNasJob(request: CancelNasJobRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Gets a NasTrialDetail. */
  getNasTrialDetail(
    request: GetNasTrialDetailRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<NasTrialDetail>>;
  /** List top NasTrialDetails of a NasJob. */
  listNasTrialDetails(
    request: ListNasTrialDetailsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListNasTrialDetailsResponse>>;
  /**
   * Creates a BatchPredictionJob. A BatchPredictionJob once created will
   * right away be attempted to start.
   */
  createBatchPredictionJob(
    request: CreateBatchPredictionJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchPredictionJob>>;
  /** Gets a BatchPredictionJob */
  getBatchPredictionJob(
    request: GetBatchPredictionJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BatchPredictionJob>>;
  /** Lists BatchPredictionJobs in a Location. */
  listBatchPredictionJobs(
    request: ListBatchPredictionJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListBatchPredictionJobsResponse>>;
  /**
   * Deletes a BatchPredictionJob. Can only be called on jobs that already
   * finished.
   */
  deleteBatchPredictionJob(
    request: DeleteBatchPredictionJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Cancels a BatchPredictionJob.
   *
   * Starts asynchronous cancellation on the BatchPredictionJob. The server
   * makes the best effort to cancel the job, but success is not
   * guaranteed. Clients can use
   * [JobService.GetBatchPredictionJob][google.cloud.aiplatform.v1beta1.JobService.GetBatchPredictionJob]
   * or other methods to check whether the cancellation succeeded or whether the
   * job completed despite cancellation. On a successful cancellation,
   * the BatchPredictionJob is not deleted;instead its
   * [BatchPredictionJob.state][google.cloud.aiplatform.v1beta1.BatchPredictionJob.state]
   * is set to `CANCELLED`. Any files already outputted by the job are not
   * deleted.
   */
  cancelBatchPredictionJob(
    request: CancelBatchPredictionJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Creates a ModelDeploymentMonitoringJob. It will run periodically on a
   * configured interval.
   */
  createModelDeploymentMonitoringJob(
    request: CreateModelDeploymentMonitoringJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModelDeploymentMonitoringJob>>;
  /** Searches Model Monitoring Statistics generated within a given time window. */
  searchModelDeploymentMonitoringStatsAnomalies(
    request: SearchModelDeploymentMonitoringStatsAnomaliesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchModelDeploymentMonitoringStatsAnomaliesResponse>>;
  /** Gets a ModelDeploymentMonitoringJob. */
  getModelDeploymentMonitoringJob(
    request: GetModelDeploymentMonitoringJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModelDeploymentMonitoringJob>>;
  /** Lists ModelDeploymentMonitoringJobs in a Location. */
  listModelDeploymentMonitoringJobs(
    request: ListModelDeploymentMonitoringJobsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListModelDeploymentMonitoringJobsResponse>>;
  /** Updates a ModelDeploymentMonitoringJob. */
  updateModelDeploymentMonitoringJob(
    request: UpdateModelDeploymentMonitoringJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a ModelDeploymentMonitoringJob. */
  deleteModelDeploymentMonitoringJob(
    request: DeleteModelDeploymentMonitoringJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Pauses a ModelDeploymentMonitoringJob. If the job is running, the server
   * makes a best effort to cancel the job. Will mark
   * [ModelDeploymentMonitoringJob.state][google.cloud.aiplatform.v1beta1.ModelDeploymentMonitoringJob.state]
   * to 'PAUSED'.
   */
  pauseModelDeploymentMonitoringJob(
    request: PauseModelDeploymentMonitoringJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /**
   * Resumes a paused ModelDeploymentMonitoringJob. It will start to run from
   * next scheduled time. A deleted ModelDeploymentMonitoringJob can't be
   * resumed.
   */
  resumeModelDeploymentMonitoringJob(
    request: ResumeModelDeploymentMonitoringJobRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface JobServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a CustomJob. A created CustomJob right away
   * will be attempted to be run.
   */
  createCustomJob(
    request: DeepPartial<CreateCustomJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CustomJob>;
  /** Gets a CustomJob. */
  getCustomJob(request: DeepPartial<GetCustomJobRequest>, options?: CallOptions & CallOptionsExt): Promise<CustomJob>;
  /** Lists CustomJobs in a Location. */
  listCustomJobs(
    request: DeepPartial<ListCustomJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListCustomJobsResponse>;
  /** Deletes a CustomJob. */
  deleteCustomJob(
    request: DeepPartial<DeleteCustomJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Cancels a CustomJob.
   * Starts asynchronous cancellation on the CustomJob. The server
   * makes a best effort to cancel the job, but success is not
   * guaranteed. Clients can use
   * [JobService.GetCustomJob][google.cloud.aiplatform.v1beta1.JobService.GetCustomJob]
   * or other methods to check whether the cancellation succeeded or whether the
   * job completed despite cancellation. On successful cancellation,
   * the CustomJob is not deleted; instead it becomes a job with
   * a [CustomJob.error][google.cloud.aiplatform.v1beta1.CustomJob.error] value
   * with a [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding
   * to `Code.CANCELLED`, and
   * [CustomJob.state][google.cloud.aiplatform.v1beta1.CustomJob.state] is set
   * to `CANCELLED`.
   */
  cancelCustomJob(request: DeepPartial<CancelCustomJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Creates a DataLabelingJob. */
  createDataLabelingJob(
    request: DeepPartial<CreateDataLabelingJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataLabelingJob>;
  /** Gets a DataLabelingJob. */
  getDataLabelingJob(
    request: DeepPartial<GetDataLabelingJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataLabelingJob>;
  /** Lists DataLabelingJobs in a Location. */
  listDataLabelingJobs(
    request: DeepPartial<ListDataLabelingJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataLabelingJobsResponse>;
  /** Deletes a DataLabelingJob. */
  deleteDataLabelingJob(
    request: DeepPartial<DeleteDataLabelingJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Cancels a DataLabelingJob. Success of cancellation is not guaranteed. */
  cancelDataLabelingJob(
    request: DeepPartial<CancelDataLabelingJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Creates a HyperparameterTuningJob */
  createHyperparameterTuningJob(
    request: DeepPartial<CreateHyperparameterTuningJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HyperparameterTuningJob>;
  /** Gets a HyperparameterTuningJob */
  getHyperparameterTuningJob(
    request: DeepPartial<GetHyperparameterTuningJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HyperparameterTuningJob>;
  /** Lists HyperparameterTuningJobs in a Location. */
  listHyperparameterTuningJobs(
    request: DeepPartial<ListHyperparameterTuningJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListHyperparameterTuningJobsResponse>;
  /** Deletes a HyperparameterTuningJob. */
  deleteHyperparameterTuningJob(
    request: DeepPartial<DeleteHyperparameterTuningJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Cancels a HyperparameterTuningJob.
   * Starts asynchronous cancellation on the HyperparameterTuningJob. The server
   * makes a best effort to cancel the job, but success is not
   * guaranteed. Clients can use
   * [JobService.GetHyperparameterTuningJob][google.cloud.aiplatform.v1beta1.JobService.GetHyperparameterTuningJob]
   * or other methods to check whether the cancellation succeeded or whether the
   * job completed despite cancellation. On successful cancellation,
   * the HyperparameterTuningJob is not deleted; instead it becomes a job with
   * a
   * [HyperparameterTuningJob.error][google.cloud.aiplatform.v1beta1.HyperparameterTuningJob.error]
   * value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`, and
   * [HyperparameterTuningJob.state][google.cloud.aiplatform.v1beta1.HyperparameterTuningJob.state]
   * is set to `CANCELLED`.
   */
  cancelHyperparameterTuningJob(
    request: DeepPartial<CancelHyperparameterTuningJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Creates a NasJob */
  createNasJob(request: DeepPartial<CreateNasJobRequest>, options?: CallOptions & CallOptionsExt): Promise<NasJob>;
  /** Gets a NasJob */
  getNasJob(request: DeepPartial<GetNasJobRequest>, options?: CallOptions & CallOptionsExt): Promise<NasJob>;
  /** Lists NasJobs in a Location. */
  listNasJobs(
    request: DeepPartial<ListNasJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListNasJobsResponse>;
  /** Deletes a NasJob. */
  deleteNasJob(request: DeepPartial<DeleteNasJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Cancels a NasJob.
   * Starts asynchronous cancellation on the NasJob. The server
   * makes a best effort to cancel the job, but success is not
   * guaranteed. Clients can use
   * [JobService.GetNasJob][google.cloud.aiplatform.v1beta1.JobService.GetNasJob]
   * or other methods to check whether the cancellation succeeded or whether the
   * job completed despite cancellation. On successful cancellation,
   * the NasJob is not deleted; instead it becomes a job with
   * a [NasJob.error][google.cloud.aiplatform.v1beta1.NasJob.error] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`, and
   * [NasJob.state][google.cloud.aiplatform.v1beta1.NasJob.state] is set to
   * `CANCELLED`.
   */
  cancelNasJob(request: DeepPartial<CancelNasJobRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Gets a NasTrialDetail. */
  getNasTrialDetail(
    request: DeepPartial<GetNasTrialDetailRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<NasTrialDetail>;
  /** List top NasTrialDetails of a NasJob. */
  listNasTrialDetails(
    request: DeepPartial<ListNasTrialDetailsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListNasTrialDetailsResponse>;
  /**
   * Creates a BatchPredictionJob. A BatchPredictionJob once created will
   * right away be attempted to start.
   */
  createBatchPredictionJob(
    request: DeepPartial<CreateBatchPredictionJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchPredictionJob>;
  /** Gets a BatchPredictionJob */
  getBatchPredictionJob(
    request: DeepPartial<GetBatchPredictionJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BatchPredictionJob>;
  /** Lists BatchPredictionJobs in a Location. */
  listBatchPredictionJobs(
    request: DeepPartial<ListBatchPredictionJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBatchPredictionJobsResponse>;
  /**
   * Deletes a BatchPredictionJob. Can only be called on jobs that already
   * finished.
   */
  deleteBatchPredictionJob(
    request: DeepPartial<DeleteBatchPredictionJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Cancels a BatchPredictionJob.
   *
   * Starts asynchronous cancellation on the BatchPredictionJob. The server
   * makes the best effort to cancel the job, but success is not
   * guaranteed. Clients can use
   * [JobService.GetBatchPredictionJob][google.cloud.aiplatform.v1beta1.JobService.GetBatchPredictionJob]
   * or other methods to check whether the cancellation succeeded or whether the
   * job completed despite cancellation. On a successful cancellation,
   * the BatchPredictionJob is not deleted;instead its
   * [BatchPredictionJob.state][google.cloud.aiplatform.v1beta1.BatchPredictionJob.state]
   * is set to `CANCELLED`. Any files already outputted by the job are not
   * deleted.
   */
  cancelBatchPredictionJob(
    request: DeepPartial<CancelBatchPredictionJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Creates a ModelDeploymentMonitoringJob. It will run periodically on a
   * configured interval.
   */
  createModelDeploymentMonitoringJob(
    request: DeepPartial<CreateModelDeploymentMonitoringJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModelDeploymentMonitoringJob>;
  /** Searches Model Monitoring Statistics generated within a given time window. */
  searchModelDeploymentMonitoringStatsAnomalies(
    request: DeepPartial<SearchModelDeploymentMonitoringStatsAnomaliesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchModelDeploymentMonitoringStatsAnomaliesResponse>;
  /** Gets a ModelDeploymentMonitoringJob. */
  getModelDeploymentMonitoringJob(
    request: DeepPartial<GetModelDeploymentMonitoringJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModelDeploymentMonitoringJob>;
  /** Lists ModelDeploymentMonitoringJobs in a Location. */
  listModelDeploymentMonitoringJobs(
    request: DeepPartial<ListModelDeploymentMonitoringJobsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListModelDeploymentMonitoringJobsResponse>;
  /** Updates a ModelDeploymentMonitoringJob. */
  updateModelDeploymentMonitoringJob(
    request: DeepPartial<UpdateModelDeploymentMonitoringJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a ModelDeploymentMonitoringJob. */
  deleteModelDeploymentMonitoringJob(
    request: DeepPartial<DeleteModelDeploymentMonitoringJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Pauses a ModelDeploymentMonitoringJob. If the job is running, the server
   * makes a best effort to cancel the job. Will mark
   * [ModelDeploymentMonitoringJob.state][google.cloud.aiplatform.v1beta1.ModelDeploymentMonitoringJob.state]
   * to 'PAUSED'.
   */
  pauseModelDeploymentMonitoringJob(
    request: DeepPartial<PauseModelDeploymentMonitoringJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /**
   * Resumes a paused ModelDeploymentMonitoringJob. It will start to run from
   * next scheduled time. A deleted ModelDeploymentMonitoringJob can't be
   * resumed.
   */
  resumeModelDeploymentMonitoringJob(
    request: DeepPartial<ResumeModelDeploymentMonitoringJobRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
