// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/network_spec.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1beta1";

/** Network spec. */
export interface NetworkSpec {
  /** Whether to enable public internet access. Default false. */
  enableInternetAccess: boolean;
  /**
   * The full name of the Google Compute Engine
   * [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks)
   */
  network: string;
  /**
   * The name of the subnet that this instance is in.
   * Format:
   * `projects/{project_id_or_number}/regions/{region}/subnetworks/{subnetwork_id}`
   */
  subnetwork: string;
}

function createBaseNetworkSpec(): NetworkSpec {
  return { enableInternetAccess: false, network: "", subnetwork: "" };
}

export const NetworkSpec: MessageFns<NetworkSpec> = {
  encode(message: NetworkSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableInternetAccess !== false) {
      writer.uint32(8).bool(message.enableInternetAccess);
    }
    if (message.network !== "") {
      writer.uint32(18).string(message.network);
    }
    if (message.subnetwork !== "") {
      writer.uint32(26).string(message.subnetwork);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NetworkSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableInternetAccess = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.network = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subnetwork = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkSpec {
    return {
      enableInternetAccess: isSet(object.enableInternetAccess)
        ? globalThis.Boolean(object.enableInternetAccess)
        : false,
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      subnetwork: isSet(object.subnetwork) ? globalThis.String(object.subnetwork) : "",
    };
  },

  toJSON(message: NetworkSpec): unknown {
    const obj: any = {};
    if (message.enableInternetAccess !== false) {
      obj.enableInternetAccess = message.enableInternetAccess;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.subnetwork !== "") {
      obj.subnetwork = message.subnetwork;
    }
    return obj;
  },

  create(base?: DeepPartial<NetworkSpec>): NetworkSpec {
    return NetworkSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NetworkSpec>): NetworkSpec {
    const message = createBaseNetworkSpec();
    message.enableInternetAccess = object.enableInternetAccess ?? false;
    message.network = object.network ?? "";
    message.subnetwork = object.subnetwork ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
