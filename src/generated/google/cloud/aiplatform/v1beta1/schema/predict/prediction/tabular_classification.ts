// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/schema/predict/prediction/tabular_classification.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1beta1.schema.predict.prediction";

/** Prediction output format for Tabular Classification. */
export interface TabularClassificationPredictionResult {
  /**
   * The name of the classes being classified, contains all possible values of
   * the target column.
   */
  classes: string[];
  /**
   * The model's confidence in each class being correct, higher
   * value means higher confidence. The N-th score corresponds to
   * the N-th class in classes.
   */
  scores: number[];
}

function createBaseTabularClassificationPredictionResult(): TabularClassificationPredictionResult {
  return { classes: [], scores: [] };
}

export const TabularClassificationPredictionResult: MessageFns<TabularClassificationPredictionResult> = {
  encode(message: TabularClassificationPredictionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.classes) {
      writer.uint32(10).string(v!);
    }
    writer.uint32(18).fork();
    for (const v of message.scores) {
      writer.float(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TabularClassificationPredictionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTabularClassificationPredictionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.classes.push(reader.string());
          continue;
        case 2:
          if (tag === 21) {
            message.scores.push(reader.float());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.scores.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TabularClassificationPredictionResult {
    return {
      classes: globalThis.Array.isArray(object?.classes) ? object.classes.map((e: any) => globalThis.String(e)) : [],
      scores: globalThis.Array.isArray(object?.scores) ? object.scores.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: TabularClassificationPredictionResult): unknown {
    const obj: any = {};
    if (message.classes?.length) {
      obj.classes = message.classes;
    }
    if (message.scores?.length) {
      obj.scores = message.scores;
    }
    return obj;
  },

  create(base?: DeepPartial<TabularClassificationPredictionResult>): TabularClassificationPredictionResult {
    return TabularClassificationPredictionResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TabularClassificationPredictionResult>): TabularClassificationPredictionResult {
    const message = createBaseTabularClassificationPredictionResult();
    message.classes = object.classes?.map((e) => e) || [];
    message.scores = object.scores?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
