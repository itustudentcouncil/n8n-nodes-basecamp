// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/schema/trainingjob/definition/export_evaluated_data_items_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1beta1.schema.trainingjob.definition";

/** Configuration for exporting test set predictions to a BigQuery table. */
export interface ExportEvaluatedDataItemsConfig {
  /**
   * URI of desired destination BigQuery table. Expected format:
   * bq://<project_id>:<dataset_id>:<table>
   *
   * If not specified, then results are exported to the following auto-created
   * BigQuery table:
   * <project_id>:export_evaluated_examples_<model_name>_<yyyy_MM_dd'T'HH_mm_ss_SSS'Z'>.evaluated_examples
   */
  destinationBigqueryUri: string;
  /**
   * If true and an export destination is specified, then the contents of the
   * destination are overwritten. Otherwise, if the export destination already
   * exists, then the export operation fails.
   */
  overrideExistingTable: boolean;
}

function createBaseExportEvaluatedDataItemsConfig(): ExportEvaluatedDataItemsConfig {
  return { destinationBigqueryUri: "", overrideExistingTable: false };
}

export const ExportEvaluatedDataItemsConfig: MessageFns<ExportEvaluatedDataItemsConfig> = {
  encode(message: ExportEvaluatedDataItemsConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationBigqueryUri !== "") {
      writer.uint32(10).string(message.destinationBigqueryUri);
    }
    if (message.overrideExistingTable !== false) {
      writer.uint32(16).bool(message.overrideExistingTable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportEvaluatedDataItemsConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportEvaluatedDataItemsConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destinationBigqueryUri = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.overrideExistingTable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportEvaluatedDataItemsConfig {
    return {
      destinationBigqueryUri: isSet(object.destinationBigqueryUri)
        ? globalThis.String(object.destinationBigqueryUri)
        : "",
      overrideExistingTable: isSet(object.overrideExistingTable)
        ? globalThis.Boolean(object.overrideExistingTable)
        : false,
    };
  },

  toJSON(message: ExportEvaluatedDataItemsConfig): unknown {
    const obj: any = {};
    if (message.destinationBigqueryUri !== "") {
      obj.destinationBigqueryUri = message.destinationBigqueryUri;
    }
    if (message.overrideExistingTable !== false) {
      obj.overrideExistingTable = message.overrideExistingTable;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportEvaluatedDataItemsConfig>): ExportEvaluatedDataItemsConfig {
    return ExportEvaluatedDataItemsConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportEvaluatedDataItemsConfig>): ExportEvaluatedDataItemsConfig {
    const message = createBaseExportEvaluatedDataItemsConfig();
    message.destinationBigqueryUri = object.destinationBigqueryUri ?? "";
    message.overrideExistingTable = object.overrideExistingTable ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
