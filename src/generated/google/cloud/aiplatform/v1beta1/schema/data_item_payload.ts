// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/aiplatform/v1beta1/schema/data_item_payload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.aiplatform.v1beta1.schema";

/** Payload of Image DataItem. */
export interface ImageDataItem {
  /**
   * Required. Google Cloud Storage URI points to the original image in user's bucket.
   * The image is up to 30MB in size.
   */
  gcsUri: string;
  /**
   * Output only. The mime type of the content of the image. Only the images in below listed
   * mime types are supported.
   * - image/jpeg
   * - image/gif
   * - image/png
   * - image/webp
   * - image/bmp
   * - image/tiff
   * - image/vnd.microsoft.icon
   */
  mimeType: string;
}

/** Payload of Video DataItem. */
export interface VideoDataItem {
  /**
   * Required. Google Cloud Storage URI points to the original video in user's bucket.
   * The video is up to 50 GB in size and up to 3 hour in duration.
   */
  gcsUri: string;
  /**
   * Output only. The mime type of the content of the video. Only the videos in below listed
   * mime types are supported.
   * Supported mime_type:
   * - video/mp4
   * - video/avi
   * - video/quicktime
   */
  mimeType: string;
}

/** Payload of Text DataItem. */
export interface TextDataItem {
  /**
   * Output only. Google Cloud Storage URI points to the original text in user's bucket.
   * The text file is up to 10MB in size.
   */
  gcsUri: string;
}

function createBaseImageDataItem(): ImageDataItem {
  return { gcsUri: "", mimeType: "" };
}

export const ImageDataItem: MessageFns<ImageDataItem> = {
  encode(message: ImageDataItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsUri !== "") {
      writer.uint32(10).string(message.gcsUri);
    }
    if (message.mimeType !== "") {
      writer.uint32(18).string(message.mimeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageDataItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageDataItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mimeType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageDataItem {
    return {
      gcsUri: isSet(object.gcsUri) ? globalThis.String(object.gcsUri) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
    };
  },

  toJSON(message: ImageDataItem): unknown {
    const obj: any = {};
    if (message.gcsUri !== "") {
      obj.gcsUri = message.gcsUri;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    return obj;
  },

  create(base?: DeepPartial<ImageDataItem>): ImageDataItem {
    return ImageDataItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageDataItem>): ImageDataItem {
    const message = createBaseImageDataItem();
    message.gcsUri = object.gcsUri ?? "";
    message.mimeType = object.mimeType ?? "";
    return message;
  },
};

function createBaseVideoDataItem(): VideoDataItem {
  return { gcsUri: "", mimeType: "" };
}

export const VideoDataItem: MessageFns<VideoDataItem> = {
  encode(message: VideoDataItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsUri !== "") {
      writer.uint32(10).string(message.gcsUri);
    }
    if (message.mimeType !== "") {
      writer.uint32(18).string(message.mimeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoDataItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoDataItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mimeType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoDataItem {
    return {
      gcsUri: isSet(object.gcsUri) ? globalThis.String(object.gcsUri) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
    };
  },

  toJSON(message: VideoDataItem): unknown {
    const obj: any = {};
    if (message.gcsUri !== "") {
      obj.gcsUri = message.gcsUri;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    return obj;
  },

  create(base?: DeepPartial<VideoDataItem>): VideoDataItem {
    return VideoDataItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoDataItem>): VideoDataItem {
    const message = createBaseVideoDataItem();
    message.gcsUri = object.gcsUri ?? "";
    message.mimeType = object.mimeType ?? "";
    return message;
  },
};

function createBaseTextDataItem(): TextDataItem {
  return { gcsUri: "" };
}

export const TextDataItem: MessageFns<TextDataItem> = {
  encode(message: TextDataItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsUri !== "") {
      writer.uint32(10).string(message.gcsUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextDataItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextDataItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextDataItem {
    return { gcsUri: isSet(object.gcsUri) ? globalThis.String(object.gcsUri) : "" };
  },

  toJSON(message: TextDataItem): unknown {
    const obj: any = {};
    if (message.gcsUri !== "") {
      obj.gcsUri = message.gcsUri;
    }
    return obj;
  },

  create(base?: DeepPartial<TextDataItem>): TextDataItem {
    return TextDataItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextDataItem>): TextDataItem {
    const message = createBaseTextDataItem();
    message.gcsUri = object.gcsUri ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
