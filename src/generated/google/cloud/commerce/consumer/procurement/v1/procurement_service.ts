// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/commerce/consumer/procurement/v1/procurement_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../../../longrunning/operations.js";
import { LineItemInfo, Order } from "./order.js";

export const protobufPackage = "google.cloud.commerce.consumer.procurement.v1";

/**
 * Request message for
 * [ConsumerProcurementService.PlaceOrder][google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService.PlaceOrder].
 */
export interface PlaceOrderRequest {
  /**
   * Required. The resource name of the parent resource.
   * This field has the form  `billingAccounts/{billing-account-id}`.
   */
  parent: string;
  /** Required. The user-specified name of the order being placed. */
  displayName: string;
  /**
   * Optional. Places order for offer. Required when an offer-based order is
   * being placed.
   */
  lineItemInfo: LineItemInfo[];
  /**
   * Optional. A unique identifier for this request.
   * The server will ignore subsequent requests that provide a duplicate request
   * ID for at least 120 minutes after the first request.
   *
   * The request ID must be a valid
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format).
   */
  requestId: string;
}

/**
 * Message stored in the metadata field of the Operation returned by
 * [ConsumerProcurementService.PlaceOrder][google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService.PlaceOrder].
 */
export interface PlaceOrderMetadata {
}

/**
 * Request message for
 * [ConsumerProcurementService.GetOrder][google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService.GetOrder]
 */
export interface GetOrderRequest {
  /** Required. The name of the order to retrieve. */
  name: string;
}

/**
 * Request message for
 * [ConsumerProcurementService.ListOrders][google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService.ListOrders].
 */
export interface ListOrdersRequest {
  /**
   * Required. The parent resource to query for orders.
   * This field has the form `billingAccounts/{billing-account-id}`.
   */
  parent: string;
  /**
   * The maximum number of entries requested.
   * The default page size is 25 and the maximum page size is 200.
   */
  pageSize: number;
  /** The token for fetching the next page. */
  pageToken: string;
  /**
   * Filter that you can use to limit the list request.
   *
   * A query string that can match a selected set of attributes
   * with string values. For example, `display_name=abc`.
   * Supported query attributes are
   *
   * * `display_name`
   *
   * If the query contains special characters other than letters,
   * underscore, or digits, the phrase must be quoted with double quotes. For
   * example, `display_name="foo:bar"`, where the display name needs to be
   * quoted because it contains special character colon.
   *
   * Queries can be combined with `OR`, and `NOT` to form more complex queries.
   * You can also group them to force a desired evaluation order.
   * For example, `display_name=abc OR display_name=def`.
   */
  filter: string;
}

/**
 * Response message for
 * [ConsumerProcurementService.ListOrders][google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService.ListOrders].
 */
export interface ListOrdersResponse {
  /** The list of orders in this response. */
  orders: Order[];
  /** The token for fetching the next page. */
  nextPageToken: string;
}

function createBasePlaceOrderRequest(): PlaceOrderRequest {
  return { parent: "", displayName: "", lineItemInfo: [], requestId: "" };
}

export const PlaceOrderRequest: MessageFns<PlaceOrderRequest> = {
  encode(message: PlaceOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.displayName !== "") {
      writer.uint32(50).string(message.displayName);
    }
    for (const v of message.lineItemInfo) {
      LineItemInfo.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(58).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.lineItemInfo.push(LineItemInfo.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceOrderRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      lineItemInfo: globalThis.Array.isArray(object?.lineItemInfo)
        ? object.lineItemInfo.map((e: any) => LineItemInfo.fromJSON(e))
        : [],
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: PlaceOrderRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.lineItemInfo?.length) {
      obj.lineItemInfo = message.lineItemInfo.map((e) => LineItemInfo.toJSON(e));
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<PlaceOrderRequest>): PlaceOrderRequest {
    return PlaceOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlaceOrderRequest>): PlaceOrderRequest {
    const message = createBasePlaceOrderRequest();
    message.parent = object.parent ?? "";
    message.displayName = object.displayName ?? "";
    message.lineItemInfo = object.lineItemInfo?.map((e) => LineItemInfo.fromPartial(e)) || [];
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBasePlaceOrderMetadata(): PlaceOrderMetadata {
  return {};
}

export const PlaceOrderMetadata: MessageFns<PlaceOrderMetadata> = {
  encode(_: PlaceOrderMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceOrderMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceOrderMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PlaceOrderMetadata {
    return {};
  },

  toJSON(_: PlaceOrderMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PlaceOrderMetadata>): PlaceOrderMetadata {
    return PlaceOrderMetadata.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PlaceOrderMetadata>): PlaceOrderMetadata {
    const message = createBasePlaceOrderMetadata();
    return message;
  },
};

function createBaseGetOrderRequest(): GetOrderRequest {
  return { name: "" };
}

export const GetOrderRequest: MessageFns<GetOrderRequest> = {
  encode(message: GetOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetOrderRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetOrderRequest>): GetOrderRequest {
    return GetOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrderRequest>): GetOrderRequest {
    const message = createBaseGetOrderRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListOrdersRequest(): ListOrdersRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListOrdersRequest: MessageFns<ListOrdersRequest> = {
  encode(message: ListOrdersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrdersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrdersRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListOrdersRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOrdersRequest>): ListOrdersRequest {
    return ListOrdersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrdersRequest>): ListOrdersRequest {
    const message = createBaseListOrdersRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListOrdersResponse(): ListOrdersResponse {
  return { orders: [], nextPageToken: "" };
}

export const ListOrdersResponse: MessageFns<ListOrdersResponse> = {
  encode(message: ListOrdersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      Order.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrdersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orders.push(Order.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrdersResponse {
    return {
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => Order.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListOrdersResponse): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => Order.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListOrdersResponse>): ListOrdersResponse {
    return ListOrdersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrdersResponse>): ListOrdersResponse {
    const message = createBaseListOrdersResponse();
    message.orders = object.orders?.map((e) => Order.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

/**
 * ConsumerProcurementService allows customers to make purchases of products
 * served by the Cloud Commerce platform.
 *
 * When purchases are made, the
 * [ConsumerProcurementService][google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService]
 * programs the appropriate backends, including both Google's own
 * infrastructure, as well as third-party systems, and to enable billing setup
 * for charging for the procured item.
 */
export type ConsumerProcurementServiceDefinition = typeof ConsumerProcurementServiceDefinition;
export const ConsumerProcurementServiceDefinition = {
  name: "ConsumerProcurementService",
  fullName: "google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService",
  methods: {
    /**
     * Creates a new [Order][google.cloud.commerce.consumer.procurement.v1.Order].
     *
     * This API only supports GCP spend-based committed use
     * discounts specified by GCP documentation.
     *
     * The returned long-running operation is in-progress until the backend
     * completes the creation of the resource. Once completed, the order is
     * in
     * [OrderState.ORDER_STATE_ACTIVE][google.cloud.commerce.consumer.procurement.v1.OrderState.ORDER_STATE_ACTIVE].
     * In case of failure, the order resource will be removed.
     */
    placeOrder: {
      name: "PlaceOrder",
      requestType: PlaceOrderRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              27,
              10,
              5,
              79,
              114,
              100,
              101,
              114,
              18,
              18,
              80,
              108,
              97,
              99,
              101,
              79,
              114,
              100,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              48,
              58,
              1,
              42,
              34,
              43,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              58,
              112,
              108,
              97,
              99,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the requested
     * [Order][google.cloud.commerce.consumer.procurement.v1.Order] resource.
     */
    getOrder: {
      name: "GetOrder",
      requestType: GetOrderRequest,
      requestStream: false,
      responseType: Order,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Lists [Order][google.cloud.commerce.consumer.procurement.v1.Order]
     * resources that the user has access to, within the scope of the parent
     * resource.
     */
    listOrders: {
      name: "ListOrders",
      requestType: ListOrdersRequest,
      requestStream: false,
      responseType: ListOrdersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              39,
              18,
              37,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              98,
              105,
              108,
              108,
              105,
              110,
              103,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              111,
              114,
              100,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ConsumerProcurementServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a new [Order][google.cloud.commerce.consumer.procurement.v1.Order].
   *
   * This API only supports GCP spend-based committed use
   * discounts specified by GCP documentation.
   *
   * The returned long-running operation is in-progress until the backend
   * completes the creation of the resource. Once completed, the order is
   * in
   * [OrderState.ORDER_STATE_ACTIVE][google.cloud.commerce.consumer.procurement.v1.OrderState.ORDER_STATE_ACTIVE].
   * In case of failure, the order resource will be removed.
   */
  placeOrder(request: PlaceOrderRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Returns the requested
   * [Order][google.cloud.commerce.consumer.procurement.v1.Order] resource.
   */
  getOrder(request: GetOrderRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Order>>;
  /**
   * Lists [Order][google.cloud.commerce.consumer.procurement.v1.Order]
   * resources that the user has access to, within the scope of the parent
   * resource.
   */
  listOrders(
    request: ListOrdersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOrdersResponse>>;
}

export interface ConsumerProcurementServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a new [Order][google.cloud.commerce.consumer.procurement.v1.Order].
   *
   * This API only supports GCP spend-based committed use
   * discounts specified by GCP documentation.
   *
   * The returned long-running operation is in-progress until the backend
   * completes the creation of the resource. Once completed, the order is
   * in
   * [OrderState.ORDER_STATE_ACTIVE][google.cloud.commerce.consumer.procurement.v1.OrderState.ORDER_STATE_ACTIVE].
   * In case of failure, the order resource will be removed.
   */
  placeOrder(request: DeepPartial<PlaceOrderRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Returns the requested
   * [Order][google.cloud.commerce.consumer.procurement.v1.Order] resource.
   */
  getOrder(request: DeepPartial<GetOrderRequest>, options?: CallOptions & CallOptionsExt): Promise<Order>;
  /**
   * Lists [Order][google.cloud.commerce.consumer.procurement.v1.Order]
   * resources that the user has access to, within the scope of the parent
   * resource.
   */
  listOrders(
    request: DeepPartial<ListOrdersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOrdersResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
