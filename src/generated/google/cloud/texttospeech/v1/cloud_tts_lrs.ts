// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/texttospeech/v1/cloud_tts_lrs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { AudioConfig, SynthesisInput, VoiceSelectionParams } from "./cloud_tts.js";

export const protobufPackage = "google.cloud.texttospeech.v1";

/**
 * The top-level message sent by the client for the
 * `SynthesizeLongAudio` method.
 */
export interface SynthesizeLongAudioRequest {
  /**
   * The resource states of the request in the form of
   * `projects/* /locations/*`.
   */
  parent: string;
  /** Required. The Synthesizer requires either plain text or SSML as input. */
  input:
    | SynthesisInput
    | undefined;
  /** Required. The configuration of the synthesized audio. */
  audioConfig:
    | AudioConfig
    | undefined;
  /**
   * Required. Specifies a Cloud Storage URI for the synthesis results. Must be
   * specified in the format: `gs://bucket_name/object_name`, and the bucket
   * must already exist.
   */
  outputGcsUri: string;
  /** Required. The desired voice of the synthesized audio. */
  voice: VoiceSelectionParams | undefined;
}

/** The message returned to the client by the `SynthesizeLongAudio` method. */
export interface SynthesizeLongAudioResponse {
}

/** Metadata for response returned by the `SynthesizeLongAudio` method. */
export interface SynthesizeLongAudioMetadata {
  /** Time when the request was received. */
  startTime:
    | Date
    | undefined;
  /**
   * Deprecated. Do not use.
   *
   * @deprecated
   */
  lastUpdateTime:
    | Date
    | undefined;
  /** The progress of the most recent processing update in percentage, ie. 70.0%. */
  progressPercentage: number;
}

function createBaseSynthesizeLongAudioRequest(): SynthesizeLongAudioRequest {
  return { parent: "", input: undefined, audioConfig: undefined, outputGcsUri: "", voice: undefined };
}

export const SynthesizeLongAudioRequest: MessageFns<SynthesizeLongAudioRequest> = {
  encode(message: SynthesizeLongAudioRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.input !== undefined) {
      SynthesisInput.encode(message.input, writer.uint32(18).fork()).join();
    }
    if (message.audioConfig !== undefined) {
      AudioConfig.encode(message.audioConfig, writer.uint32(26).fork()).join();
    }
    if (message.outputGcsUri !== "") {
      writer.uint32(34).string(message.outputGcsUri);
    }
    if (message.voice !== undefined) {
      VoiceSelectionParams.encode(message.voice, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynthesizeLongAudioRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynthesizeLongAudioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.input = SynthesisInput.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.audioConfig = AudioConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.outputGcsUri = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.voice = VoiceSelectionParams.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynthesizeLongAudioRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      input: isSet(object.input) ? SynthesisInput.fromJSON(object.input) : undefined,
      audioConfig: isSet(object.audioConfig) ? AudioConfig.fromJSON(object.audioConfig) : undefined,
      outputGcsUri: isSet(object.outputGcsUri) ? globalThis.String(object.outputGcsUri) : "",
      voice: isSet(object.voice) ? VoiceSelectionParams.fromJSON(object.voice) : undefined,
    };
  },

  toJSON(message: SynthesizeLongAudioRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.input !== undefined) {
      obj.input = SynthesisInput.toJSON(message.input);
    }
    if (message.audioConfig !== undefined) {
      obj.audioConfig = AudioConfig.toJSON(message.audioConfig);
    }
    if (message.outputGcsUri !== "") {
      obj.outputGcsUri = message.outputGcsUri;
    }
    if (message.voice !== undefined) {
      obj.voice = VoiceSelectionParams.toJSON(message.voice);
    }
    return obj;
  },

  create(base?: DeepPartial<SynthesizeLongAudioRequest>): SynthesizeLongAudioRequest {
    return SynthesizeLongAudioRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SynthesizeLongAudioRequest>): SynthesizeLongAudioRequest {
    const message = createBaseSynthesizeLongAudioRequest();
    message.parent = object.parent ?? "";
    message.input = (object.input !== undefined && object.input !== null)
      ? SynthesisInput.fromPartial(object.input)
      : undefined;
    message.audioConfig = (object.audioConfig !== undefined && object.audioConfig !== null)
      ? AudioConfig.fromPartial(object.audioConfig)
      : undefined;
    message.outputGcsUri = object.outputGcsUri ?? "";
    message.voice = (object.voice !== undefined && object.voice !== null)
      ? VoiceSelectionParams.fromPartial(object.voice)
      : undefined;
    return message;
  },
};

function createBaseSynthesizeLongAudioResponse(): SynthesizeLongAudioResponse {
  return {};
}

export const SynthesizeLongAudioResponse: MessageFns<SynthesizeLongAudioResponse> = {
  encode(_: SynthesizeLongAudioResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynthesizeLongAudioResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynthesizeLongAudioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SynthesizeLongAudioResponse {
    return {};
  },

  toJSON(_: SynthesizeLongAudioResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SynthesizeLongAudioResponse>): SynthesizeLongAudioResponse {
    return SynthesizeLongAudioResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SynthesizeLongAudioResponse>): SynthesizeLongAudioResponse {
    const message = createBaseSynthesizeLongAudioResponse();
    return message;
  },
};

function createBaseSynthesizeLongAudioMetadata(): SynthesizeLongAudioMetadata {
  return { startTime: undefined, lastUpdateTime: undefined, progressPercentage: 0 };
}

export const SynthesizeLongAudioMetadata: MessageFns<SynthesizeLongAudioMetadata> = {
  encode(message: SynthesizeLongAudioMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.lastUpdateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastUpdateTime), writer.uint32(18).fork()).join();
    }
    if (message.progressPercentage !== 0) {
      writer.uint32(25).double(message.progressPercentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynthesizeLongAudioMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynthesizeLongAudioMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastUpdateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.progressPercentage = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynthesizeLongAudioMetadata {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      lastUpdateTime: isSet(object.lastUpdateTime) ? fromJsonTimestamp(object.lastUpdateTime) : undefined,
      progressPercentage: isSet(object.progressPercentage) ? globalThis.Number(object.progressPercentage) : 0,
    };
  },

  toJSON(message: SynthesizeLongAudioMetadata): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.lastUpdateTime !== undefined) {
      obj.lastUpdateTime = message.lastUpdateTime.toISOString();
    }
    if (message.progressPercentage !== 0) {
      obj.progressPercentage = message.progressPercentage;
    }
    return obj;
  },

  create(base?: DeepPartial<SynthesizeLongAudioMetadata>): SynthesizeLongAudioMetadata {
    return SynthesizeLongAudioMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SynthesizeLongAudioMetadata>): SynthesizeLongAudioMetadata {
    const message = createBaseSynthesizeLongAudioMetadata();
    message.startTime = object.startTime ?? undefined;
    message.lastUpdateTime = object.lastUpdateTime ?? undefined;
    message.progressPercentage = object.progressPercentage ?? 0;
    return message;
  },
};

/** Service that implements Google Cloud Text-to-Speech API. */
export type TextToSpeechLongAudioSynthesizeDefinition = typeof TextToSpeechLongAudioSynthesizeDefinition;
export const TextToSpeechLongAudioSynthesizeDefinition = {
  name: "TextToSpeechLongAudioSynthesize",
  fullName: "google.cloud.texttospeech.v1.TextToSpeechLongAudioSynthesize",
  methods: {
    /** Synthesizes long form text asynchronously. */
    synthesizeLongAudio: {
      name: "SynthesizeLongAudio",
      requestType: SynthesizeLongAudioRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              116,
              10,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              116,
              101,
              120,
              116,
              116,
              111,
              115,
              112,
              101,
              101,
              99,
              104,
              46,
              118,
              49,
              46,
              83,
              121,
              110,
              116,
              104,
              101,
              115,
              105,
              122,
              101,
              76,
              111,
              110,
              103,
              65,
              117,
              100,
              105,
              111,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              56,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              116,
              101,
              120,
              116,
              116,
              111,
              115,
              112,
              101,
              101,
              99,
              104,
              46,
              118,
              49,
              46,
              83,
              121,
              110,
              116,
              104,
              101,
              115,
              105,
              122,
              101,
              76,
              111,
              110,
              103,
              65,
              117,
              100,
              105,
              111,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          578365826: [
            Buffer.from([
              60,
              58,
              1,
              42,
              34,
              55,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              58,
              115,
              121,
              110,
              116,
              104,
              101,
              115,
              105,
              122,
              101,
              76,
              111,
              110,
              103,
              65,
              117,
              100,
              105,
              111,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface TextToSpeechLongAudioSynthesizeServiceImplementation<CallContextExt = {}> {
  /** Synthesizes long form text asynchronously. */
  synthesizeLongAudio(
    request: SynthesizeLongAudioRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
}

export interface TextToSpeechLongAudioSynthesizeClient<CallOptionsExt = {}> {
  /** Synthesizes long form text asynchronously. */
  synthesizeLongAudio(
    request: DeepPartial<SynthesizeLongAudioRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
