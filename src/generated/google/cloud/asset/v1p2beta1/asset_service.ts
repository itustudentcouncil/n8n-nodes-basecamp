// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/asset/v1p2beta1/asset_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { TemporalAsset } from "./assets.js";

export const protobufPackage = "google.cloud.asset.v1p2beta1";

/** Asset content type. */
export enum ContentType {
  /** CONTENT_TYPE_UNSPECIFIED - Unspecified content type. */
  CONTENT_TYPE_UNSPECIFIED = 0,
  /** RESOURCE - Resource metadata. */
  RESOURCE = 1,
  /** IAM_POLICY - The actual IAM policy set on a resource. */
  IAM_POLICY = 2,
  UNRECOGNIZED = -1,
}

export function contentTypeFromJSON(object: any): ContentType {
  switch (object) {
    case 0:
    case "CONTENT_TYPE_UNSPECIFIED":
      return ContentType.CONTENT_TYPE_UNSPECIFIED;
    case 1:
    case "RESOURCE":
      return ContentType.RESOURCE;
    case 2:
    case "IAM_POLICY":
      return ContentType.IAM_POLICY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContentType.UNRECOGNIZED;
  }
}

export function contentTypeToJSON(object: ContentType): string {
  switch (object) {
    case ContentType.CONTENT_TYPE_UNSPECIFIED:
      return "CONTENT_TYPE_UNSPECIFIED";
    case ContentType.RESOURCE:
      return "RESOURCE";
    case ContentType.IAM_POLICY:
      return "IAM_POLICY";
    case ContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The export asset response. This message is returned by the
 * [google.longrunning.Operations.GetOperation][google.longrunning.Operations.GetOperation]
 * method in the returned
 * [google.longrunning.Operation.response][google.longrunning.Operation.response]
 * field.
 */
export interface ExportAssetsResponse {
  /** Time the snapshot was taken. */
  readTime:
    | Date
    | undefined;
  /** Output configuration indicating where the results were output to. */
  outputConfig: OutputConfig | undefined;
}

/** Batch get assets history response. */
export interface BatchGetAssetsHistoryResponse {
  /** A list of assets with valid time windows. */
  assets: TemporalAsset[];
}

/** Create asset feed request. */
export interface CreateFeedRequest {
  /**
   * Required. The name of the project/folder/organization where this feed
   * should be created in. It can only be an organization number (such as
   * "organizations/123"), a folder number (such as "folders/123"), a project ID
   * (such as "projects/my-project-id"), or a project number (such as
   * "projects/12345").
   */
  parent: string;
  /**
   * Required. This is the client-assigned asset feed identifier and it needs to
   * be unique under a specific parent project/folder/organization.
   */
  feedId: string;
  /**
   * Required. The feed details. The field `name` must be empty and it will be
   * generated in the format of: projects/project_number/feeds/feed_id
   * folders/folder_number/feeds/feed_id
   * organizations/organization_number/feeds/feed_id
   */
  feed: Feed | undefined;
}

/** Get asset feed request. */
export interface GetFeedRequest {
  /**
   * Required. The name of the Feed and it must be in the format of:
   * projects/project_number/feeds/feed_id
   * folders/folder_number/feeds/feed_id
   * organizations/organization_number/feeds/feed_id
   */
  name: string;
}

/** List asset feeds request. */
export interface ListFeedsRequest {
  /**
   * Required. The parent project/folder/organization whose feeds are to be
   * listed. It can only be using project/folder/organization number (such as
   * "folders/12345")", or a project ID (such as "projects/my-project-id").
   */
  parent: string;
}

export interface ListFeedsResponse {
  /** A list of feeds. */
  feeds: Feed[];
}

/** Update asset feed request. */
export interface UpdateFeedRequest {
  /**
   * Required. The new values of feed details. It must match an existing feed
   * and the field `name` must be in the format of:
   * projects/project_number/feeds/feed_id or
   * folders/folder_number/feeds/feed_id or
   * organizations/organization_number/feeds/feed_id.
   */
  feed:
    | Feed
    | undefined;
  /**
   * Required. Only updates the `feed` fields indicated by this mask.
   * The field mask must not be empty, and it must not contain fields that
   * are immutable or only set by the server.
   */
  updateMask: string[] | undefined;
}

export interface DeleteFeedRequest {
  /**
   * Required. The name of the feed and it must be in the format of:
   * projects/project_number/feeds/feed_id
   * folders/folder_number/feeds/feed_id
   * organizations/organization_number/feeds/feed_id
   */
  name: string;
}

/** Output configuration for export assets destination. */
export interface OutputConfig {
  /** Destination on Cloud Storage. */
  gcsDestination?: GcsDestination | undefined;
}

/** A Cloud Storage location. */
export interface GcsDestination {
  /**
   * The URI of the Cloud Storage object. It's the same URI that is used by
   * gsutil. For example: "gs://bucket_name/object_name". See [Viewing and
   * Editing Object
   * Metadata](https://cloud.google.com/storage/docs/viewing-editing-metadata)
   * for more information.
   */
  uri?: string | undefined;
}

/** A Pub/Sub destination. */
export interface PubsubDestination {
  /**
   * The name of the Pub/Sub topic to publish to.
   * For example: `projects/PROJECT_ID/topics/TOPIC_ID`.
   */
  topic: string;
}

/** Output configuration for asset feed destination. */
export interface FeedOutputConfig {
  /** Destination on Pub/Sub. */
  pubsubDestination?: PubsubDestination | undefined;
}

/**
 * An asset feed used to export asset updates to a destinations.
 * An asset feed filter controls what updates are exported.
 * The asset feed must be created within a project, organization, or
 * folder. Supported destinations are:
 * Cloud Pub/Sub topics.
 */
export interface Feed {
  /**
   * Required. The format will be
   * projects/{project_number}/feeds/{client-assigned_feed_identifier} or
   * folders/{folder_number}/feeds/{client-assigned_feed_identifier} or
   * organizations/{organization_number}/feeds/{client-assigned_feed_identifier}
   *
   * The client-assigned feed identifier must be unique within the parent
   * project/folder/organization.
   */
  name: string;
  /**
   * A list of the full names of the assets to receive updates. You must specify
   * either or both of asset_names and asset_types. Only asset updates matching
   * specified asset_names or asset_types are exported to the feed. For
   * example:
   * `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
   * See [Resource
   * Names](https://cloud.google.com/apis/design/resource_names#full_resource_name)
   * for more info.
   */
  assetNames: string[];
  /**
   * A list of types of the assets to receive updates. You must specify either
   * or both of asset_names and asset_types. Only asset updates matching
   * specified asset_names or asset_types are exported to the feed.
   * For example:
   * "compute.googleapis.com/Disk" See [Introduction to Cloud Asset
   * Inventory](https://cloud.google.com/resource-manager/docs/cloud-asset-inventory/overview)
   * for all supported asset types.
   */
  assetTypes: string[];
  /**
   * Asset content type. If not specified, no content but the asset name and
   * type will be returned.
   */
  contentType: ContentType;
  /**
   * Required. Feed output configuration defining where the asset updates are
   * published to.
   */
  feedOutputConfig: FeedOutputConfig | undefined;
}

function createBaseExportAssetsResponse(): ExportAssetsResponse {
  return { readTime: undefined, outputConfig: undefined };
}

export const ExportAssetsResponse: MessageFns<ExportAssetsResponse> = {
  encode(message: ExportAssetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.readTime !== undefined) {
      Timestamp.encode(toTimestamp(message.readTime), writer.uint32(10).fork()).join();
    }
    if (message.outputConfig !== undefined) {
      OutputConfig.encode(message.outputConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportAssetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportAssetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.readTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.outputConfig = OutputConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportAssetsResponse {
    return {
      readTime: isSet(object.readTime) ? fromJsonTimestamp(object.readTime) : undefined,
      outputConfig: isSet(object.outputConfig) ? OutputConfig.fromJSON(object.outputConfig) : undefined,
    };
  },

  toJSON(message: ExportAssetsResponse): unknown {
    const obj: any = {};
    if (message.readTime !== undefined) {
      obj.readTime = message.readTime.toISOString();
    }
    if (message.outputConfig !== undefined) {
      obj.outputConfig = OutputConfig.toJSON(message.outputConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportAssetsResponse>): ExportAssetsResponse {
    return ExportAssetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportAssetsResponse>): ExportAssetsResponse {
    const message = createBaseExportAssetsResponse();
    message.readTime = object.readTime ?? undefined;
    message.outputConfig = (object.outputConfig !== undefined && object.outputConfig !== null)
      ? OutputConfig.fromPartial(object.outputConfig)
      : undefined;
    return message;
  },
};

function createBaseBatchGetAssetsHistoryResponse(): BatchGetAssetsHistoryResponse {
  return { assets: [] };
}

export const BatchGetAssetsHistoryResponse: MessageFns<BatchGetAssetsHistoryResponse> = {
  encode(message: BatchGetAssetsHistoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.assets) {
      TemporalAsset.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchGetAssetsHistoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchGetAssetsHistoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.assets.push(TemporalAsset.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchGetAssetsHistoryResponse {
    return {
      assets: globalThis.Array.isArray(object?.assets) ? object.assets.map((e: any) => TemporalAsset.fromJSON(e)) : [],
    };
  },

  toJSON(message: BatchGetAssetsHistoryResponse): unknown {
    const obj: any = {};
    if (message.assets?.length) {
      obj.assets = message.assets.map((e) => TemporalAsset.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchGetAssetsHistoryResponse>): BatchGetAssetsHistoryResponse {
    return BatchGetAssetsHistoryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchGetAssetsHistoryResponse>): BatchGetAssetsHistoryResponse {
    const message = createBaseBatchGetAssetsHistoryResponse();
    message.assets = object.assets?.map((e) => TemporalAsset.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateFeedRequest(): CreateFeedRequest {
  return { parent: "", feedId: "", feed: undefined };
}

export const CreateFeedRequest: MessageFns<CreateFeedRequest> = {
  encode(message: CreateFeedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.feedId !== "") {
      writer.uint32(18).string(message.feedId);
    }
    if (message.feed !== undefined) {
      Feed.encode(message.feed, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.feedId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.feed = Feed.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFeedRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      feedId: isSet(object.feedId) ? globalThis.String(object.feedId) : "",
      feed: isSet(object.feed) ? Feed.fromJSON(object.feed) : undefined,
    };
  },

  toJSON(message: CreateFeedRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.feedId !== "") {
      obj.feedId = message.feedId;
    }
    if (message.feed !== undefined) {
      obj.feed = Feed.toJSON(message.feed);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFeedRequest>): CreateFeedRequest {
    return CreateFeedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFeedRequest>): CreateFeedRequest {
    const message = createBaseCreateFeedRequest();
    message.parent = object.parent ?? "";
    message.feedId = object.feedId ?? "";
    message.feed = (object.feed !== undefined && object.feed !== null) ? Feed.fromPartial(object.feed) : undefined;
    return message;
  },
};

function createBaseGetFeedRequest(): GetFeedRequest {
  return { name: "" };
}

export const GetFeedRequest: MessageFns<GetFeedRequest> = {
  encode(message: GetFeedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeedRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFeedRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFeedRequest>): GetFeedRequest {
    return GetFeedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFeedRequest>): GetFeedRequest {
    const message = createBaseGetFeedRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListFeedsRequest(): ListFeedsRequest {
  return { parent: "" };
}

export const ListFeedsRequest: MessageFns<ListFeedsRequest> = {
  encode(message: ListFeedsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeedsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeedsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeedsRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: ListFeedsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeedsRequest>): ListFeedsRequest {
    return ListFeedsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeedsRequest>): ListFeedsRequest {
    const message = createBaseListFeedsRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseListFeedsResponse(): ListFeedsResponse {
  return { feeds: [] };
}

export const ListFeedsResponse: MessageFns<ListFeedsResponse> = {
  encode(message: ListFeedsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.feeds) {
      Feed.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeedsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeedsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.feeds.push(Feed.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeedsResponse {
    return { feeds: globalThis.Array.isArray(object?.feeds) ? object.feeds.map((e: any) => Feed.fromJSON(e)) : [] };
  },

  toJSON(message: ListFeedsResponse): unknown {
    const obj: any = {};
    if (message.feeds?.length) {
      obj.feeds = message.feeds.map((e) => Feed.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeedsResponse>): ListFeedsResponse {
    return ListFeedsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeedsResponse>): ListFeedsResponse {
    const message = createBaseListFeedsResponse();
    message.feeds = object.feeds?.map((e) => Feed.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateFeedRequest(): UpdateFeedRequest {
  return { feed: undefined, updateMask: undefined };
}

export const UpdateFeedRequest: MessageFns<UpdateFeedRequest> = {
  encode(message: UpdateFeedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.feed !== undefined) {
      Feed.encode(message.feed, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFeedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFeedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.feed = Feed.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFeedRequest {
    return {
      feed: isSet(object.feed) ? Feed.fromJSON(object.feed) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateFeedRequest): unknown {
    const obj: any = {};
    if (message.feed !== undefined) {
      obj.feed = Feed.toJSON(message.feed);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFeedRequest>): UpdateFeedRequest {
    return UpdateFeedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFeedRequest>): UpdateFeedRequest {
    const message = createBaseUpdateFeedRequest();
    message.feed = (object.feed !== undefined && object.feed !== null) ? Feed.fromPartial(object.feed) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteFeedRequest(): DeleteFeedRequest {
  return { name: "" };
}

export const DeleteFeedRequest: MessageFns<DeleteFeedRequest> = {
  encode(message: DeleteFeedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFeedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFeedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFeedRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteFeedRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFeedRequest>): DeleteFeedRequest {
    return DeleteFeedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFeedRequest>): DeleteFeedRequest {
    const message = createBaseDeleteFeedRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOutputConfig(): OutputConfig {
  return { gcsDestination: undefined };
}

export const OutputConfig: MessageFns<OutputConfig> = {
  encode(message: OutputConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsDestination !== undefined) {
      GcsDestination.encode(message.gcsDestination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsDestination = GcsDestination.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputConfig {
    return {
      gcsDestination: isSet(object.gcsDestination) ? GcsDestination.fromJSON(object.gcsDestination) : undefined,
    };
  },

  toJSON(message: OutputConfig): unknown {
    const obj: any = {};
    if (message.gcsDestination !== undefined) {
      obj.gcsDestination = GcsDestination.toJSON(message.gcsDestination);
    }
    return obj;
  },

  create(base?: DeepPartial<OutputConfig>): OutputConfig {
    return OutputConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OutputConfig>): OutputConfig {
    const message = createBaseOutputConfig();
    message.gcsDestination = (object.gcsDestination !== undefined && object.gcsDestination !== null)
      ? GcsDestination.fromPartial(object.gcsDestination)
      : undefined;
    return message;
  },
};

function createBaseGcsDestination(): GcsDestination {
  return { uri: undefined };
}

export const GcsDestination: MessageFns<GcsDestination> = {
  encode(message: GcsDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== undefined) {
      writer.uint32(10).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcsDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcsDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcsDestination {
    return { uri: isSet(object.uri) ? globalThis.String(object.uri) : undefined };
  },

  toJSON(message: GcsDestination): unknown {
    const obj: any = {};
    if (message.uri !== undefined) {
      obj.uri = message.uri;
    }
    return obj;
  },

  create(base?: DeepPartial<GcsDestination>): GcsDestination {
    return GcsDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcsDestination>): GcsDestination {
    const message = createBaseGcsDestination();
    message.uri = object.uri ?? undefined;
    return message;
  },
};

function createBasePubsubDestination(): PubsubDestination {
  return { topic: "" };
}

export const PubsubDestination: MessageFns<PubsubDestination> = {
  encode(message: PubsubDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topic !== "") {
      writer.uint32(10).string(message.topic);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PubsubDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePubsubDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.topic = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PubsubDestination {
    return { topic: isSet(object.topic) ? globalThis.String(object.topic) : "" };
  },

  toJSON(message: PubsubDestination): unknown {
    const obj: any = {};
    if (message.topic !== "") {
      obj.topic = message.topic;
    }
    return obj;
  },

  create(base?: DeepPartial<PubsubDestination>): PubsubDestination {
    return PubsubDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PubsubDestination>): PubsubDestination {
    const message = createBasePubsubDestination();
    message.topic = object.topic ?? "";
    return message;
  },
};

function createBaseFeedOutputConfig(): FeedOutputConfig {
  return { pubsubDestination: undefined };
}

export const FeedOutputConfig: MessageFns<FeedOutputConfig> = {
  encode(message: FeedOutputConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pubsubDestination !== undefined) {
      PubsubDestination.encode(message.pubsubDestination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeedOutputConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeedOutputConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pubsubDestination = PubsubDestination.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeedOutputConfig {
    return {
      pubsubDestination: isSet(object.pubsubDestination)
        ? PubsubDestination.fromJSON(object.pubsubDestination)
        : undefined,
    };
  },

  toJSON(message: FeedOutputConfig): unknown {
    const obj: any = {};
    if (message.pubsubDestination !== undefined) {
      obj.pubsubDestination = PubsubDestination.toJSON(message.pubsubDestination);
    }
    return obj;
  },

  create(base?: DeepPartial<FeedOutputConfig>): FeedOutputConfig {
    return FeedOutputConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeedOutputConfig>): FeedOutputConfig {
    const message = createBaseFeedOutputConfig();
    message.pubsubDestination = (object.pubsubDestination !== undefined && object.pubsubDestination !== null)
      ? PubsubDestination.fromPartial(object.pubsubDestination)
      : undefined;
    return message;
  },
};

function createBaseFeed(): Feed {
  return { name: "", assetNames: [], assetTypes: [], contentType: 0, feedOutputConfig: undefined };
}

export const Feed: MessageFns<Feed> = {
  encode(message: Feed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.assetNames) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.assetTypes) {
      writer.uint32(26).string(v!);
    }
    if (message.contentType !== 0) {
      writer.uint32(32).int32(message.contentType);
    }
    if (message.feedOutputConfig !== undefined) {
      FeedOutputConfig.encode(message.feedOutputConfig, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Feed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.assetNames.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.assetTypes.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.contentType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.feedOutputConfig = FeedOutputConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Feed {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      assetNames: globalThis.Array.isArray(object?.assetNames)
        ? object.assetNames.map((e: any) => globalThis.String(e))
        : [],
      assetTypes: globalThis.Array.isArray(object?.assetTypes)
        ? object.assetTypes.map((e: any) => globalThis.String(e))
        : [],
      contentType: isSet(object.contentType) ? contentTypeFromJSON(object.contentType) : 0,
      feedOutputConfig: isSet(object.feedOutputConfig) ? FeedOutputConfig.fromJSON(object.feedOutputConfig) : undefined,
    };
  },

  toJSON(message: Feed): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.assetNames?.length) {
      obj.assetNames = message.assetNames;
    }
    if (message.assetTypes?.length) {
      obj.assetTypes = message.assetTypes;
    }
    if (message.contentType !== 0) {
      obj.contentType = contentTypeToJSON(message.contentType);
    }
    if (message.feedOutputConfig !== undefined) {
      obj.feedOutputConfig = FeedOutputConfig.toJSON(message.feedOutputConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<Feed>): Feed {
    return Feed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Feed>): Feed {
    const message = createBaseFeed();
    message.name = object.name ?? "";
    message.assetNames = object.assetNames?.map((e) => e) || [];
    message.assetTypes = object.assetTypes?.map((e) => e) || [];
    message.contentType = object.contentType ?? 0;
    message.feedOutputConfig = (object.feedOutputConfig !== undefined && object.feedOutputConfig !== null)
      ? FeedOutputConfig.fromPartial(object.feedOutputConfig)
      : undefined;
    return message;
  },
};

/** Asset service definition. */
export type AssetServiceDefinition = typeof AssetServiceDefinition;
export const AssetServiceDefinition = {
  name: "AssetService",
  fullName: "google.cloud.asset.v1p2beta1.AssetService",
  methods: {
    /**
     * Creates a feed in a parent project/folder/organization to listen to its
     * asset updates.
     */
    createFeed: {
      name: "CreateFeed",
      requestType: CreateFeedRequest,
      requestStream: false,
      responseType: Feed,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              118,
              49,
              112,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              125,
              47,
              102,
              101,
              101,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details about an asset feed. */
    getFeed: {
      name: "GetFeed",
      requestType: GetFeedRequest,
      requestStream: false,
      responseType: Feed,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              31,
              18,
              29,
              47,
              118,
              49,
              112,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              102,
              101,
              101,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists all asset feeds in a parent project/folder/organization. */
    listFeeds: {
      name: "ListFeeds",
      requestType: ListFeedsRequest,
      requestStream: false,
      responseType: ListFeedsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              31,
              18,
              29,
              47,
              118,
              49,
              112,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              42,
              47,
              42,
              125,
              47,
              102,
              101,
              101,
              100,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates an asset feed configuration. */
    updateFeed: {
      name: "UpdateFeed",
      requestType: UpdateFeedRequest,
      requestStream: false,
      responseType: Feed,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 102, 101, 101, 100])],
          578365826: [
            Buffer.from([
              39,
              58,
              1,
              42,
              50,
              34,
              47,
              118,
              49,
              112,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              102,
              101,
              101,
              100,
              46,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              102,
              101,
              101,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes an asset feed. */
    deleteFeed: {
      name: "DeleteFeed",
      requestType: DeleteFeedRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              31,
              42,
              29,
              47,
              118,
              49,
              112,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              42,
              47,
              42,
              47,
              102,
              101,
              101,
              100,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AssetServiceImplementation<CallContextExt = {}> {
  /**
   * Creates a feed in a parent project/folder/organization to listen to its
   * asset updates.
   */
  createFeed(request: CreateFeedRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Feed>>;
  /** Gets details about an asset feed. */
  getFeed(request: GetFeedRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Feed>>;
  /** Lists all asset feeds in a parent project/folder/organization. */
  listFeeds(request: ListFeedsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListFeedsResponse>>;
  /** Updates an asset feed configuration. */
  updateFeed(request: UpdateFeedRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Feed>>;
  /** Deletes an asset feed. */
  deleteFeed(request: DeleteFeedRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface AssetServiceClient<CallOptionsExt = {}> {
  /**
   * Creates a feed in a parent project/folder/organization to listen to its
   * asset updates.
   */
  createFeed(request: DeepPartial<CreateFeedRequest>, options?: CallOptions & CallOptionsExt): Promise<Feed>;
  /** Gets details about an asset feed. */
  getFeed(request: DeepPartial<GetFeedRequest>, options?: CallOptions & CallOptionsExt): Promise<Feed>;
  /** Lists all asset feeds in a parent project/folder/organization. */
  listFeeds(request: DeepPartial<ListFeedsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListFeedsResponse>;
  /** Updates an asset feed configuration. */
  updateFeed(request: DeepPartial<UpdateFeedRequest>, options?: CallOptions & CallOptionsExt): Promise<Feed>;
  /** Deletes an asset feed. */
  deleteFeed(request: DeepPartial<DeleteFeedRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
