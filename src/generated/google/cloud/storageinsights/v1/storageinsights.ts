// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/storageinsights/v1/storageinsights.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Status } from "../../../rpc/status.js";
import { DateMessage } from "../../../type/date.js";
import { DateTime } from "../../../type/datetime.js";

export const protobufPackage = "google.cloud.storageinsights.v1";

/** Message for requesting list of ReportConfigs */
export interface ListReportConfigsRequest {
  /** Required. Parent value for ListReportConfigsRequest */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results */
  filter: string;
  /** Hint for how to order the results */
  orderBy: string;
}

/** Message for response to listing ReportConfigs */
export interface ListReportConfigsResponse {
  /** The list of ReportConfig */
  reportConfigs: ReportConfig[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a ReportConfig */
export interface GetReportConfigRequest {
  /** Required. Name of the resource */
  name: string;
}

/** Message for creating a ReportConfig */
export interface CreateReportConfigRequest {
  /** Required. Value for parent. */
  parent: string;
  /** Required. The resource being created */
  reportConfig:
    | ReportConfig
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for updating a ReportConfig */
export interface UpdateReportConfigRequest {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * ReportConfig resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   */
  updateMask:
    | string[]
    | undefined;
  /** Required. The resource being updated */
  reportConfig:
    | ReportConfig
    | undefined;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Message for deleting a ReportConfig */
export interface DeleteReportConfigRequest {
  /** Required. Name of the resource */
  name: string;
  /** Optional. If set, all ReportDetails for this ReportConfig will be deleted. */
  force: boolean;
  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Message describing ReportDetail object. ReportDetail represents metadata of
 * generated reports for a ReportConfig.
 * Next ID: 10
 */
export interface ReportDetail {
  /**
   * Name of resource. It will be of form
   * projects/<project>/locations/<location>/reportConfigs/<report-config-id>/reportDetails/<report-detail-id>.
   */
  name: string;
  /**
   * The snapshot time.
   * All the report data is referenced at this point of time.
   */
  snapshotTime:
    | Date
    | undefined;
  /**
   * Prefix of the object name of each report's shard. This will have full
   * prefix except the "extension" and "shard_id".
   * For example, if the `destination_path` is
   * `{{report-config-id}}/dt={{datetime}}`, the shard object name would be
   * `gs://my-insights/1A34-F2E456-12B456-1C3D/dt=2022-05-20T06:35/1A34-F2E456-12B456-1C3D_2022-05-20T06:35_5.csv`
   * and the value of `report_path_prefix` field would be
   * `gs://my-insights/1A34-F2E456-12B456-1C3D/dt=2022-05-20T06:35/1A34-F2E456-12B456-1C3D_2022-05-20T06:35_`.
   */
  reportPathPrefix: string;
  /** Total shards generated for the report. */
  shardsCount: Long;
  /** Status of the ReportDetail. */
  status:
    | Status
    | undefined;
  /** Labels as key value pairs */
  labels: { [key: string]: string };
  /**
   * The date for which report is generated. The time part of target_datetime
   * will be zero till we support multiple reports per day.
   */
  targetDatetime:
    | DateTime
    | undefined;
  /** Metrics of the report. */
  reportMetrics: ReportDetail_Metrics | undefined;
}

/** Different metrics associated with the generated report. */
export interface ReportDetail_Metrics {
  /** Count of Cloud Storage objects which are part of the report. */
  processedRecordsCount: Long;
}

export interface ReportDetail_LabelsEntry {
  key: string;
  value: string;
}

/** Message for requesting list of ReportDetails */
export interface ListReportDetailsRequest {
  /** Required. Parent value for ListReportDetailsRequest */
  parent: string;
  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   */
  pageSize: number;
  /** A token identifying a page of results the server should return. */
  pageToken: string;
  /** Filtering results */
  filter: string;
  /** Hint for how to order the results */
  orderBy: string;
}

/** Message for response to listing ReportDetails */
export interface ListReportDetailsResponse {
  /** The list of ReportDetail */
  reportDetails: ReportDetail[];
  /** A token identifying a page of results the server should return. */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachable: string[];
}

/** Message for getting a ReportDetail */
export interface GetReportDetailRequest {
  /** Required. Name of the resource */
  name: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusMessage: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   */
  requestedCancellation: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

/**
 * ReportConfig Resource:
 *
 * Options to setup frequency of report generation.
 */
export interface FrequencyOptions {
  /** Frequency of report generation. */
  frequency: FrequencyOptions_Frequency;
  /**
   * The date from which report generation should start.
   * UTC time zone.
   */
  startDate:
    | DateMessage
    | undefined;
  /**
   * The date on which report generation should stop (Inclusive).
   * UTC time zone.
   */
  endDate: DateMessage | undefined;
}

/** This ENUM specifies possible frequencies of report generation. */
export enum FrequencyOptions_Frequency {
  /** FREQUENCY_UNSPECIFIED - Unspecified. */
  FREQUENCY_UNSPECIFIED = 0,
  /** DAILY - Report will be generated daily. */
  DAILY = 1,
  /** WEEKLY - Report will be generated weekly. */
  WEEKLY = 2,
  UNRECOGNIZED = -1,
}

export function frequencyOptions_FrequencyFromJSON(object: any): FrequencyOptions_Frequency {
  switch (object) {
    case 0:
    case "FREQUENCY_UNSPECIFIED":
      return FrequencyOptions_Frequency.FREQUENCY_UNSPECIFIED;
    case 1:
    case "DAILY":
      return FrequencyOptions_Frequency.DAILY;
    case 2:
    case "WEEKLY":
      return FrequencyOptions_Frequency.WEEKLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FrequencyOptions_Frequency.UNRECOGNIZED;
  }
}

export function frequencyOptions_FrequencyToJSON(object: FrequencyOptions_Frequency): string {
  switch (object) {
    case FrequencyOptions_Frequency.FREQUENCY_UNSPECIFIED:
      return "FREQUENCY_UNSPECIFIED";
    case FrequencyOptions_Frequency.DAILY:
      return "DAILY";
    case FrequencyOptions_Frequency.WEEKLY:
      return "WEEKLY";
    case FrequencyOptions_Frequency.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Options to configure CSV formatted reports. */
export interface CSVOptions {
  /** Record separator characters in CSV. */
  recordSeparator: string;
  /** Delimiter characters in CSV. */
  delimiter: string;
  /** If set, will include a header row in the CSV report. */
  headerRequired: boolean;
}

/** Options to configure Parquet formatted reports. */
export interface ParquetOptions {
}

/**
 * Options to filter data on storage systems.
 * Next ID: 2
 */
export interface CloudStorageFilters {
  /** Bucket for which the report will be generated. */
  bucket: string;
}

/**
 * Options to store reports in storage systems.
 * Next ID: 3
 */
export interface CloudStorageDestinationOptions {
  /** Destination bucket. */
  bucket: string;
  /**
   * Destination path is the path in the bucket where the report should be
   * generated.
   */
  destinationPath: string;
}

/**
 * Report specification for exporting object metadata.
 * Next ID: 4
 */
export interface ObjectMetadataReportOptions {
  /** Metadata fields to be included in the report. */
  metadataFields: string[];
  /** Cloud Storage as the storage system. */
  storageFilters?:
    | CloudStorageFilters
    | undefined;
  /** Cloud Storage as the storage system. */
  storageDestinationOptions?: CloudStorageDestinationOptions | undefined;
}

/**
 * Message describing ReportConfig object. ReportConfig is the configuration to
 * generate reports.
 * See
 * https://cloud.google.com/storage/docs/insights/using-inventory-reports#create-config-rest
 * for more details on how to set various fields.
 * Next ID: 12
 */
export interface ReportConfig {
  /**
   * name of resource. It will be of form
   * projects/<project>/locations/<location>/reportConfigs/<report-config-id>.
   */
  name: string;
  /** Output only. [Output only] Create time stamp */
  createTime:
    | Date
    | undefined;
  /** Output only. [Output only] Update time stamp */
  updateTime:
    | Date
    | undefined;
  /** The frequency of report generation. */
  frequencyOptions:
    | FrequencyOptions
    | undefined;
  /** Options for CSV formatted reports. */
  csvOptions?:
    | CSVOptions
    | undefined;
  /** Options for Parquet formatted reports. */
  parquetOptions?:
    | ParquetOptions
    | undefined;
  /** Report for exporting object metadata. */
  objectMetadataReportOptions?:
    | ObjectMetadataReportOptions
    | undefined;
  /** Labels as key value pairs */
  labels: { [key: string]: string };
  /**
   * User provided display name which can be empty and limited to 256 characters
   * that is editable.
   */
  displayName: string;
}

export interface ReportConfig_LabelsEntry {
  key: string;
  value: string;
}

function createBaseListReportConfigsRequest(): ListReportConfigsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListReportConfigsRequest: MessageFns<ListReportConfigsRequest> = {
  encode(message: ListReportConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReportConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReportConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReportConfigsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListReportConfigsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListReportConfigsRequest>): ListReportConfigsRequest {
    return ListReportConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListReportConfigsRequest>): ListReportConfigsRequest {
    const message = createBaseListReportConfigsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListReportConfigsResponse(): ListReportConfigsResponse {
  return { reportConfigs: [], nextPageToken: "", unreachable: [] };
}

export const ListReportConfigsResponse: MessageFns<ListReportConfigsResponse> = {
  encode(message: ListReportConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reportConfigs) {
      ReportConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReportConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReportConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reportConfigs.push(ReportConfig.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReportConfigsResponse {
    return {
      reportConfigs: globalThis.Array.isArray(object?.reportConfigs)
        ? object.reportConfigs.map((e: any) => ReportConfig.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListReportConfigsResponse): unknown {
    const obj: any = {};
    if (message.reportConfigs?.length) {
      obj.reportConfigs = message.reportConfigs.map((e) => ReportConfig.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListReportConfigsResponse>): ListReportConfigsResponse {
    return ListReportConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListReportConfigsResponse>): ListReportConfigsResponse {
    const message = createBaseListReportConfigsResponse();
    message.reportConfigs = object.reportConfigs?.map((e) => ReportConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetReportConfigRequest(): GetReportConfigRequest {
  return { name: "" };
}

export const GetReportConfigRequest: MessageFns<GetReportConfigRequest> = {
  encode(message: GetReportConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReportConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReportConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReportConfigRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetReportConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetReportConfigRequest>): GetReportConfigRequest {
    return GetReportConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetReportConfigRequest>): GetReportConfigRequest {
    const message = createBaseGetReportConfigRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateReportConfigRequest(): CreateReportConfigRequest {
  return { parent: "", reportConfig: undefined, requestId: "" };
}

export const CreateReportConfigRequest: MessageFns<CreateReportConfigRequest> = {
  encode(message: CreateReportConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.reportConfig !== undefined) {
      ReportConfig.encode(message.reportConfig, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReportConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReportConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reportConfig = ReportConfig.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReportConfigRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      reportConfig: isSet(object.reportConfig) ? ReportConfig.fromJSON(object.reportConfig) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateReportConfigRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.reportConfig !== undefined) {
      obj.reportConfig = ReportConfig.toJSON(message.reportConfig);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateReportConfigRequest>): CreateReportConfigRequest {
    return CreateReportConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateReportConfigRequest>): CreateReportConfigRequest {
    const message = createBaseCreateReportConfigRequest();
    message.parent = object.parent ?? "";
    message.reportConfig = (object.reportConfig !== undefined && object.reportConfig !== null)
      ? ReportConfig.fromPartial(object.reportConfig)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateReportConfigRequest(): UpdateReportConfigRequest {
  return { updateMask: undefined, reportConfig: undefined, requestId: "" };
}

export const UpdateReportConfigRequest: MessageFns<UpdateReportConfigRequest> = {
  encode(message: UpdateReportConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.reportConfig !== undefined) {
      ReportConfig.encode(message.reportConfig, writer.uint32(18).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateReportConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReportConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reportConfig = ReportConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReportConfigRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      reportConfig: isSet(object.reportConfig) ? ReportConfig.fromJSON(object.reportConfig) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateReportConfigRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.reportConfig !== undefined) {
      obj.reportConfig = ReportConfig.toJSON(message.reportConfig);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateReportConfigRequest>): UpdateReportConfigRequest {
    return UpdateReportConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateReportConfigRequest>): UpdateReportConfigRequest {
    const message = createBaseUpdateReportConfigRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.reportConfig = (object.reportConfig !== undefined && object.reportConfig !== null)
      ? ReportConfig.fromPartial(object.reportConfig)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteReportConfigRequest(): DeleteReportConfigRequest {
  return { name: "", force: false, requestId: "" };
}

export const DeleteReportConfigRequest: MessageFns<DeleteReportConfigRequest> = {
  encode(message: DeleteReportConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteReportConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteReportConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteReportConfigRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteReportConfigRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteReportConfigRequest>): DeleteReportConfigRequest {
    return DeleteReportConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteReportConfigRequest>): DeleteReportConfigRequest {
    const message = createBaseDeleteReportConfigRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseReportDetail(): ReportDetail {
  return {
    name: "",
    snapshotTime: undefined,
    reportPathPrefix: "",
    shardsCount: Long.ZERO,
    status: undefined,
    labels: {},
    targetDatetime: undefined,
    reportMetrics: undefined,
  };
}

export const ReportDetail: MessageFns<ReportDetail> = {
  encode(message: ReportDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.snapshotTime !== undefined) {
      Timestamp.encode(toTimestamp(message.snapshotTime), writer.uint32(18).fork()).join();
    }
    if (message.reportPathPrefix !== "") {
      writer.uint32(66).string(message.reportPathPrefix);
    }
    if (!message.shardsCount.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.shardsCount.toString());
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(34).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ReportDetail_LabelsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.targetDatetime !== undefined) {
      DateTime.encode(message.targetDatetime, writer.uint32(50).fork()).join();
    }
    if (message.reportMetrics !== undefined) {
      ReportDetail_Metrics.encode(message.reportMetrics, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.snapshotTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.reportPathPrefix = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.shardsCount = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = ReportDetail_LabelsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.labels[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.targetDatetime = DateTime.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.reportMetrics = ReportDetail_Metrics.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportDetail {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      snapshotTime: isSet(object.snapshotTime) ? fromJsonTimestamp(object.snapshotTime) : undefined,
      reportPathPrefix: isSet(object.reportPathPrefix) ? globalThis.String(object.reportPathPrefix) : "",
      shardsCount: isSet(object.shardsCount) ? Long.fromValue(object.shardsCount) : Long.ZERO,
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      targetDatetime: isSet(object.targetDatetime) ? DateTime.fromJSON(object.targetDatetime) : undefined,
      reportMetrics: isSet(object.reportMetrics) ? ReportDetail_Metrics.fromJSON(object.reportMetrics) : undefined,
    };
  },

  toJSON(message: ReportDetail): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.snapshotTime !== undefined) {
      obj.snapshotTime = message.snapshotTime.toISOString();
    }
    if (message.reportPathPrefix !== "") {
      obj.reportPathPrefix = message.reportPathPrefix;
    }
    if (!message.shardsCount.equals(Long.ZERO)) {
      obj.shardsCount = (message.shardsCount || Long.ZERO).toString();
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.targetDatetime !== undefined) {
      obj.targetDatetime = DateTime.toJSON(message.targetDatetime);
    }
    if (message.reportMetrics !== undefined) {
      obj.reportMetrics = ReportDetail_Metrics.toJSON(message.reportMetrics);
    }
    return obj;
  },

  create(base?: DeepPartial<ReportDetail>): ReportDetail {
    return ReportDetail.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportDetail>): ReportDetail {
    const message = createBaseReportDetail();
    message.name = object.name ?? "";
    message.snapshotTime = object.snapshotTime ?? undefined;
    message.reportPathPrefix = object.reportPathPrefix ?? "";
    message.shardsCount = (object.shardsCount !== undefined && object.shardsCount !== null)
      ? Long.fromValue(object.shardsCount)
      : Long.ZERO;
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.targetDatetime = (object.targetDatetime !== undefined && object.targetDatetime !== null)
      ? DateTime.fromPartial(object.targetDatetime)
      : undefined;
    message.reportMetrics = (object.reportMetrics !== undefined && object.reportMetrics !== null)
      ? ReportDetail_Metrics.fromPartial(object.reportMetrics)
      : undefined;
    return message;
  },
};

function createBaseReportDetail_Metrics(): ReportDetail_Metrics {
  return { processedRecordsCount: Long.ZERO };
}

export const ReportDetail_Metrics: MessageFns<ReportDetail_Metrics> = {
  encode(message: ReportDetail_Metrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.processedRecordsCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.processedRecordsCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportDetail_Metrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportDetail_Metrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.processedRecordsCount = Long.fromString(reader.int64().toString());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportDetail_Metrics {
    return {
      processedRecordsCount: isSet(object.processedRecordsCount)
        ? Long.fromValue(object.processedRecordsCount)
        : Long.ZERO,
    };
  },

  toJSON(message: ReportDetail_Metrics): unknown {
    const obj: any = {};
    if (!message.processedRecordsCount.equals(Long.ZERO)) {
      obj.processedRecordsCount = (message.processedRecordsCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<ReportDetail_Metrics>): ReportDetail_Metrics {
    return ReportDetail_Metrics.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportDetail_Metrics>): ReportDetail_Metrics {
    const message = createBaseReportDetail_Metrics();
    message.processedRecordsCount =
      (object.processedRecordsCount !== undefined && object.processedRecordsCount !== null)
        ? Long.fromValue(object.processedRecordsCount)
        : Long.ZERO;
    return message;
  },
};

function createBaseReportDetail_LabelsEntry(): ReportDetail_LabelsEntry {
  return { key: "", value: "" };
}

export const ReportDetail_LabelsEntry: MessageFns<ReportDetail_LabelsEntry> = {
  encode(message: ReportDetail_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportDetail_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportDetail_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportDetail_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ReportDetail_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportDetail_LabelsEntry>): ReportDetail_LabelsEntry {
    return ReportDetail_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportDetail_LabelsEntry>): ReportDetail_LabelsEntry {
    const message = createBaseReportDetail_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListReportDetailsRequest(): ListReportDetailsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListReportDetailsRequest: MessageFns<ListReportDetailsRequest> = {
  encode(message: ListReportDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReportDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReportDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReportDetailsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListReportDetailsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListReportDetailsRequest>): ListReportDetailsRequest {
    return ListReportDetailsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListReportDetailsRequest>): ListReportDetailsRequest {
    const message = createBaseListReportDetailsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListReportDetailsResponse(): ListReportDetailsResponse {
  return { reportDetails: [], nextPageToken: "", unreachable: [] };
}

export const ListReportDetailsResponse: MessageFns<ListReportDetailsResponse> = {
  encode(message: ListReportDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reportDetails) {
      ReportDetail.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListReportDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListReportDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reportDetails.push(ReportDetail.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListReportDetailsResponse {
    return {
      reportDetails: globalThis.Array.isArray(object?.reportDetails)
        ? object.reportDetails.map((e: any) => ReportDetail.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListReportDetailsResponse): unknown {
    const obj: any = {};
    if (message.reportDetails?.length) {
      obj.reportDetails = message.reportDetails.map((e) => ReportDetail.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListReportDetailsResponse>): ListReportDetailsResponse {
    return ListReportDetailsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListReportDetailsResponse>): ListReportDetailsResponse {
    const message = createBaseListReportDetailsResponse();
    message.reportDetails = object.reportDetails?.map((e) => ReportDetail.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetReportDetailRequest(): GetReportDetailRequest {
  return { name: "" };
}

export const GetReportDetailRequest: MessageFns<GetReportDetailRequest> = {
  encode(message: GetReportDetailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReportDetailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReportDetailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReportDetailRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetReportDetailRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetReportDetailRequest>): GetReportDetailRequest {
    return GetReportDetailRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetReportDetailRequest>): GetReportDetailRequest {
    const message = createBaseGetReportDetailRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusMessage: "",
    requestedCancellation: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusMessage !== "") {
      writer.uint32(42).string(message.statusMessage);
    }
    if (message.requestedCancellation !== false) {
      writer.uint32(48).bool(message.requestedCancellation);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.requestedCancellation = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      requestedCancellation: isSet(object.requestedCancellation)
        ? globalThis.Boolean(object.requestedCancellation)
        : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.requestedCancellation !== false) {
      obj.requestedCancellation = message.requestedCancellation;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.requestedCancellation = object.requestedCancellation ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

function createBaseFrequencyOptions(): FrequencyOptions {
  return { frequency: 0, startDate: undefined, endDate: undefined };
}

export const FrequencyOptions: MessageFns<FrequencyOptions> = {
  encode(message: FrequencyOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.frequency !== 0) {
      writer.uint32(8).int32(message.frequency);
    }
    if (message.startDate !== undefined) {
      DateMessage.encode(message.startDate, writer.uint32(18).fork()).join();
    }
    if (message.endDate !== undefined) {
      DateMessage.encode(message.endDate, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FrequencyOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFrequencyOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.frequency = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.startDate = DateMessage.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.endDate = DateMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FrequencyOptions {
    return {
      frequency: isSet(object.frequency) ? frequencyOptions_FrequencyFromJSON(object.frequency) : 0,
      startDate: isSet(object.startDate) ? DateMessage.fromJSON(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? DateMessage.fromJSON(object.endDate) : undefined,
    };
  },

  toJSON(message: FrequencyOptions): unknown {
    const obj: any = {};
    if (message.frequency !== 0) {
      obj.frequency = frequencyOptions_FrequencyToJSON(message.frequency);
    }
    if (message.startDate !== undefined) {
      obj.startDate = DateMessage.toJSON(message.startDate);
    }
    if (message.endDate !== undefined) {
      obj.endDate = DateMessage.toJSON(message.endDate);
    }
    return obj;
  },

  create(base?: DeepPartial<FrequencyOptions>): FrequencyOptions {
    return FrequencyOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FrequencyOptions>): FrequencyOptions {
    const message = createBaseFrequencyOptions();
    message.frequency = object.frequency ?? 0;
    message.startDate = (object.startDate !== undefined && object.startDate !== null)
      ? DateMessage.fromPartial(object.startDate)
      : undefined;
    message.endDate = (object.endDate !== undefined && object.endDate !== null)
      ? DateMessage.fromPartial(object.endDate)
      : undefined;
    return message;
  },
};

function createBaseCSVOptions(): CSVOptions {
  return { recordSeparator: "", delimiter: "", headerRequired: false };
}

export const CSVOptions: MessageFns<CSVOptions> = {
  encode(message: CSVOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordSeparator !== "") {
      writer.uint32(10).string(message.recordSeparator);
    }
    if (message.delimiter !== "") {
      writer.uint32(18).string(message.delimiter);
    }
    if (message.headerRequired !== false) {
      writer.uint32(24).bool(message.headerRequired);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CSVOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCSVOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.recordSeparator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.delimiter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.headerRequired = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CSVOptions {
    return {
      recordSeparator: isSet(object.recordSeparator) ? globalThis.String(object.recordSeparator) : "",
      delimiter: isSet(object.delimiter) ? globalThis.String(object.delimiter) : "",
      headerRequired: isSet(object.headerRequired) ? globalThis.Boolean(object.headerRequired) : false,
    };
  },

  toJSON(message: CSVOptions): unknown {
    const obj: any = {};
    if (message.recordSeparator !== "") {
      obj.recordSeparator = message.recordSeparator;
    }
    if (message.delimiter !== "") {
      obj.delimiter = message.delimiter;
    }
    if (message.headerRequired !== false) {
      obj.headerRequired = message.headerRequired;
    }
    return obj;
  },

  create(base?: DeepPartial<CSVOptions>): CSVOptions {
    return CSVOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CSVOptions>): CSVOptions {
    const message = createBaseCSVOptions();
    message.recordSeparator = object.recordSeparator ?? "";
    message.delimiter = object.delimiter ?? "";
    message.headerRequired = object.headerRequired ?? false;
    return message;
  },
};

function createBaseParquetOptions(): ParquetOptions {
  return {};
}

export const ParquetOptions: MessageFns<ParquetOptions> = {
  encode(_: ParquetOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParquetOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParquetOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ParquetOptions {
    return {};
  },

  toJSON(_: ParquetOptions): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ParquetOptions>): ParquetOptions {
    return ParquetOptions.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ParquetOptions>): ParquetOptions {
    const message = createBaseParquetOptions();
    return message;
  },
};

function createBaseCloudStorageFilters(): CloudStorageFilters {
  return { bucket: "" };
}

export const CloudStorageFilters: MessageFns<CloudStorageFilters> = {
  encode(message: CloudStorageFilters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudStorageFilters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudStorageFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudStorageFilters {
    return { bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "" };
  },

  toJSON(message: CloudStorageFilters): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    return obj;
  },

  create(base?: DeepPartial<CloudStorageFilters>): CloudStorageFilters {
    return CloudStorageFilters.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudStorageFilters>): CloudStorageFilters {
    const message = createBaseCloudStorageFilters();
    message.bucket = object.bucket ?? "";
    return message;
  },
};

function createBaseCloudStorageDestinationOptions(): CloudStorageDestinationOptions {
  return { bucket: "", destinationPath: "" };
}

export const CloudStorageDestinationOptions: MessageFns<CloudStorageDestinationOptions> = {
  encode(message: CloudStorageDestinationOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bucket !== "") {
      writer.uint32(10).string(message.bucket);
    }
    if (message.destinationPath !== "") {
      writer.uint32(18).string(message.destinationPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudStorageDestinationOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudStorageDestinationOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bucket = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationPath = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudStorageDestinationOptions {
    return {
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      destinationPath: isSet(object.destinationPath) ? globalThis.String(object.destinationPath) : "",
    };
  },

  toJSON(message: CloudStorageDestinationOptions): unknown {
    const obj: any = {};
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.destinationPath !== "") {
      obj.destinationPath = message.destinationPath;
    }
    return obj;
  },

  create(base?: DeepPartial<CloudStorageDestinationOptions>): CloudStorageDestinationOptions {
    return CloudStorageDestinationOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloudStorageDestinationOptions>): CloudStorageDestinationOptions {
    const message = createBaseCloudStorageDestinationOptions();
    message.bucket = object.bucket ?? "";
    message.destinationPath = object.destinationPath ?? "";
    return message;
  },
};

function createBaseObjectMetadataReportOptions(): ObjectMetadataReportOptions {
  return { metadataFields: [], storageFilters: undefined, storageDestinationOptions: undefined };
}

export const ObjectMetadataReportOptions: MessageFns<ObjectMetadataReportOptions> = {
  encode(message: ObjectMetadataReportOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadataFields) {
      writer.uint32(10).string(v!);
    }
    if (message.storageFilters !== undefined) {
      CloudStorageFilters.encode(message.storageFilters, writer.uint32(18).fork()).join();
    }
    if (message.storageDestinationOptions !== undefined) {
      CloudStorageDestinationOptions.encode(message.storageDestinationOptions, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ObjectMetadataReportOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectMetadataReportOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadataFields.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.storageFilters = CloudStorageFilters.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.storageDestinationOptions = CloudStorageDestinationOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectMetadataReportOptions {
    return {
      metadataFields: globalThis.Array.isArray(object?.metadataFields)
        ? object.metadataFields.map((e: any) => globalThis.String(e))
        : [],
      storageFilters: isSet(object.storageFilters) ? CloudStorageFilters.fromJSON(object.storageFilters) : undefined,
      storageDestinationOptions: isSet(object.storageDestinationOptions)
        ? CloudStorageDestinationOptions.fromJSON(object.storageDestinationOptions)
        : undefined,
    };
  },

  toJSON(message: ObjectMetadataReportOptions): unknown {
    const obj: any = {};
    if (message.metadataFields?.length) {
      obj.metadataFields = message.metadataFields;
    }
    if (message.storageFilters !== undefined) {
      obj.storageFilters = CloudStorageFilters.toJSON(message.storageFilters);
    }
    if (message.storageDestinationOptions !== undefined) {
      obj.storageDestinationOptions = CloudStorageDestinationOptions.toJSON(message.storageDestinationOptions);
    }
    return obj;
  },

  create(base?: DeepPartial<ObjectMetadataReportOptions>): ObjectMetadataReportOptions {
    return ObjectMetadataReportOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ObjectMetadataReportOptions>): ObjectMetadataReportOptions {
    const message = createBaseObjectMetadataReportOptions();
    message.metadataFields = object.metadataFields?.map((e) => e) || [];
    message.storageFilters = (object.storageFilters !== undefined && object.storageFilters !== null)
      ? CloudStorageFilters.fromPartial(object.storageFilters)
      : undefined;
    message.storageDestinationOptions =
      (object.storageDestinationOptions !== undefined && object.storageDestinationOptions !== null)
        ? CloudStorageDestinationOptions.fromPartial(object.storageDestinationOptions)
        : undefined;
    return message;
  },
};

function createBaseReportConfig(): ReportConfig {
  return {
    name: "",
    createTime: undefined,
    updateTime: undefined,
    frequencyOptions: undefined,
    csvOptions: undefined,
    parquetOptions: undefined,
    objectMetadataReportOptions: undefined,
    labels: {},
    displayName: "",
  };
}

export const ReportConfig: MessageFns<ReportConfig> = {
  encode(message: ReportConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.frequencyOptions !== undefined) {
      FrequencyOptions.encode(message.frequencyOptions, writer.uint32(42).fork()).join();
    }
    if (message.csvOptions !== undefined) {
      CSVOptions.encode(message.csvOptions, writer.uint32(50).fork()).join();
    }
    if (message.parquetOptions !== undefined) {
      ParquetOptions.encode(message.parquetOptions, writer.uint32(58).fork()).join();
    }
    if (message.objectMetadataReportOptions !== undefined) {
      ObjectMetadataReportOptions.encode(message.objectMetadataReportOptions, writer.uint32(66).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ReportConfig_LabelsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    if (message.displayName !== "") {
      writer.uint32(90).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.frequencyOptions = FrequencyOptions.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.csvOptions = CSVOptions.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.parquetOptions = ParquetOptions.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.objectMetadataReportOptions = ObjectMetadataReportOptions.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          const entry10 = ReportConfig_LabelsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.labels[entry10.key] = entry10.value;
          }
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      frequencyOptions: isSet(object.frequencyOptions) ? FrequencyOptions.fromJSON(object.frequencyOptions) : undefined,
      csvOptions: isSet(object.csvOptions) ? CSVOptions.fromJSON(object.csvOptions) : undefined,
      parquetOptions: isSet(object.parquetOptions) ? ParquetOptions.fromJSON(object.parquetOptions) : undefined,
      objectMetadataReportOptions: isSet(object.objectMetadataReportOptions)
        ? ObjectMetadataReportOptions.fromJSON(object.objectMetadataReportOptions)
        : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
    };
  },

  toJSON(message: ReportConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.frequencyOptions !== undefined) {
      obj.frequencyOptions = FrequencyOptions.toJSON(message.frequencyOptions);
    }
    if (message.csvOptions !== undefined) {
      obj.csvOptions = CSVOptions.toJSON(message.csvOptions);
    }
    if (message.parquetOptions !== undefined) {
      obj.parquetOptions = ParquetOptions.toJSON(message.parquetOptions);
    }
    if (message.objectMetadataReportOptions !== undefined) {
      obj.objectMetadataReportOptions = ObjectMetadataReportOptions.toJSON(message.objectMetadataReportOptions);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportConfig>): ReportConfig {
    return ReportConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportConfig>): ReportConfig {
    const message = createBaseReportConfig();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.frequencyOptions = (object.frequencyOptions !== undefined && object.frequencyOptions !== null)
      ? FrequencyOptions.fromPartial(object.frequencyOptions)
      : undefined;
    message.csvOptions = (object.csvOptions !== undefined && object.csvOptions !== null)
      ? CSVOptions.fromPartial(object.csvOptions)
      : undefined;
    message.parquetOptions = (object.parquetOptions !== undefined && object.parquetOptions !== null)
      ? ParquetOptions.fromPartial(object.parquetOptions)
      : undefined;
    message.objectMetadataReportOptions =
      (object.objectMetadataReportOptions !== undefined && object.objectMetadataReportOptions !== null)
        ? ObjectMetadataReportOptions.fromPartial(object.objectMetadataReportOptions)
        : undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseReportConfig_LabelsEntry(): ReportConfig_LabelsEntry {
  return { key: "", value: "" };
}

export const ReportConfig_LabelsEntry: MessageFns<ReportConfig_LabelsEntry> = {
  encode(message: ReportConfig_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportConfig_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportConfig_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportConfig_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ReportConfig_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ReportConfig_LabelsEntry>): ReportConfig_LabelsEntry {
    return ReportConfig_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReportConfig_LabelsEntry>): ReportConfig_LabelsEntry {
    const message = createBaseReportConfig_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/** Service describing handlers for resources */
export type StorageInsightsDefinition = typeof StorageInsightsDefinition;
export const StorageInsightsDefinition = {
  name: "StorageInsights",
  fullName: "google.cloud.storageinsights.v1.StorageInsights",
  methods: {
    /** Lists ReportConfigs in a given project and location. */
    listReportConfigs: {
      name: "ListReportConfigs",
      requestType: ListReportConfigsRequest,
      requestStream: false,
      responseType: ListReportConfigsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single ReportConfig. */
    getReportConfig: {
      name: "GetReportConfig",
      requestType: GetReportConfigRequest,
      requestStream: false,
      responseType: ReportConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              18,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates a new ReportConfig in a given project and location. */
    createReportConfig: {
      name: "CreateReportConfig",
      requestType: CreateReportConfigRequest,
      requestStream: false,
      responseType: ReportConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              20,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              101,
              112,
              111,
              114,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
          578365826: [
            Buffer.from([
              66,
              58,
              13,
              114,
              101,
              112,
              111,
              114,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              49,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the parameters of a single ReportConfig. */
    updateReportConfig: {
      name: "UpdateReportConfig",
      requestType: UpdateReportConfigRequest,
      requestStream: false,
      responseType: ReportConfig,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              25,
              114,
              101,
              112,
              111,
              114,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              80,
              58,
              13,
              114,
              101,
              112,
              111,
              114,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              50,
              63,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              112,
              111,
              114,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a single ReportConfig. */
    deleteReportConfig: {
      name: "DeleteReportConfig",
      requestType: DeleteReportConfigRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              51,
              42,
              49,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists ReportDetails in a given project and location. */
    listReportDetails: {
      name: "ListReportDetails",
      requestType: ListReportDetailsRequest,
      requestStream: false,
      responseType: ListReportDetailsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              68,
              101,
              116,
              97,
              105,
              108,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single ReportDetail. */
    getReportDetail: {
      name: "GetReportDetail",
      requestType: GetReportDetailRequest,
      requestStream: false,
      responseType: ReportDetail,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              67,
              18,
              65,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              67,
              111,
              110,
              102,
              105,
              103,
              115,
              47,
              42,
              47,
              114,
              101,
              112,
              111,
              114,
              116,
              68,
              101,
              116,
              97,
              105,
              108,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface StorageInsightsServiceImplementation<CallContextExt = {}> {
  /** Lists ReportConfigs in a given project and location. */
  listReportConfigs(
    request: ListReportConfigsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListReportConfigsResponse>>;
  /** Gets details of a single ReportConfig. */
  getReportConfig(
    request: GetReportConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReportConfig>>;
  /** Creates a new ReportConfig in a given project and location. */
  createReportConfig(
    request: CreateReportConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReportConfig>>;
  /** Updates the parameters of a single ReportConfig. */
  updateReportConfig(
    request: UpdateReportConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReportConfig>>;
  /** Deletes a single ReportConfig. */
  deleteReportConfig(
    request: DeleteReportConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Lists ReportDetails in a given project and location. */
  listReportDetails(
    request: ListReportDetailsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListReportDetailsResponse>>;
  /** Gets details of a single ReportDetail. */
  getReportDetail(
    request: GetReportDetailRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReportDetail>>;
}

export interface StorageInsightsClient<CallOptionsExt = {}> {
  /** Lists ReportConfigs in a given project and location. */
  listReportConfigs(
    request: DeepPartial<ListReportConfigsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListReportConfigsResponse>;
  /** Gets details of a single ReportConfig. */
  getReportConfig(
    request: DeepPartial<GetReportConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReportConfig>;
  /** Creates a new ReportConfig in a given project and location. */
  createReportConfig(
    request: DeepPartial<CreateReportConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReportConfig>;
  /** Updates the parameters of a single ReportConfig. */
  updateReportConfig(
    request: DeepPartial<UpdateReportConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReportConfig>;
  /** Deletes a single ReportConfig. */
  deleteReportConfig(
    request: DeepPartial<DeleteReportConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Lists ReportDetails in a given project and location. */
  listReportDetails(
    request: DeepPartial<ListReportDetailsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListReportDetailsResponse>;
  /** Gets details of a single ReportDetail. */
  getReportDetail(
    request: DeepPartial<GetReportDetailRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReportDetail>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
