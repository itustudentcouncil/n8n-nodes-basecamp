// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/secrets/v1beta1/resources.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.secrets.v1beta1";

/**
 * A [Secret][google.cloud.secrets.v1beta1.Secret] is a logical secret whose value and versions can
 * be accessed.
 *
 * A [Secret][google.cloud.secrets.v1beta1.Secret] is made up of zero or more [SecretVersions][google.cloud.secrets.v1beta1.SecretVersion] that
 * represent the secret data.
 */
export interface Secret {
  /** Output only. The resource name of the [Secret][google.cloud.secrets.v1beta1.Secret] in the format `projects/* /secrets/*`. */
  name: string;
  /**
   * Required. Immutable. The replication policy of the secret data attached to the [Secret][google.cloud.secrets.v1beta1.Secret].
   *
   * The replication policy cannot be changed after the Secret has been created.
   */
  replication:
    | Replication
    | undefined;
  /** Output only. The time at which the [Secret][google.cloud.secrets.v1beta1.Secret] was created. */
  createTime:
    | Date
    | undefined;
  /**
   * The labels assigned to this Secret.
   *
   * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding
   * of maximum 128 bytes, and must conform to the following PCRE regular
   * expression: `[\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}`
   *
   * Label values must be between 0 and 63 characters long, have a UTF-8
   * encoding of maximum 128 bytes, and must conform to the following PCRE
   * regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`
   *
   * No more than 64 labels can be assigned to a given resource.
   */
  labels: { [key: string]: string };
}

export interface Secret_LabelsEntry {
  key: string;
  value: string;
}

/** A secret version resource in the Secret Manager API. */
export interface SecretVersion {
  /**
   * Output only. The resource name of the [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] in the
   * format `projects/* /secrets/* /versions/*`.
   *
   * [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] IDs in a [Secret][google.cloud.secrets.v1beta1.Secret] start at 1 and
   * are incremented for each subsequent version of the secret.
   */
  name: string;
  /** Output only. The time at which the [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] was created. */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The time this [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] was destroyed.
   * Only present if [state][google.cloud.secrets.v1beta1.SecretVersion.state] is
   * [DESTROYED][google.cloud.secrets.v1beta1.SecretVersion.State.DESTROYED].
   */
  destroyTime:
    | Date
    | undefined;
  /** Output only. The current state of the [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion]. */
  state: SecretVersion_State;
}

/** The state of a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion], indicating if it can be accessed. */
export enum SecretVersion_State {
  /** STATE_UNSPECIFIED - Not specified. This value is unused and invalid. */
  STATE_UNSPECIFIED = 0,
  /** ENABLED - The [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] may be accessed. */
  ENABLED = 1,
  /**
   * DISABLED - The [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] may not be accessed, but the secret data
   * is still available and can be placed back into the [ENABLED][google.cloud.secrets.v1beta1.SecretVersion.State.ENABLED]
   * state.
   */
  DISABLED = 2,
  /**
   * DESTROYED - The [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion] is destroyed and the secret data is no longer
   * stored. A version may not leave this state once entered.
   */
  DESTROYED = 3,
  UNRECOGNIZED = -1,
}

export function secretVersion_StateFromJSON(object: any): SecretVersion_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return SecretVersion_State.STATE_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return SecretVersion_State.ENABLED;
    case 2:
    case "DISABLED":
      return SecretVersion_State.DISABLED;
    case 3:
    case "DESTROYED":
      return SecretVersion_State.DESTROYED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecretVersion_State.UNRECOGNIZED;
  }
}

export function secretVersion_StateToJSON(object: SecretVersion_State): string {
  switch (object) {
    case SecretVersion_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case SecretVersion_State.ENABLED:
      return "ENABLED";
    case SecretVersion_State.DISABLED:
      return "DISABLED";
    case SecretVersion_State.DESTROYED:
      return "DESTROYED";
    case SecretVersion_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** A policy that defines the replication configuration of data. */
export interface Replication {
  /** The [Secret][google.cloud.secrets.v1beta1.Secret] will automatically be replicated without any restrictions. */
  automatic?:
    | Replication_Automatic
    | undefined;
  /** The [Secret][google.cloud.secrets.v1beta1.Secret] will only be replicated into the locations specified. */
  userManaged?: Replication_UserManaged | undefined;
}

/**
 * A replication policy that replicates the [Secret][google.cloud.secrets.v1beta1.Secret] payload without any
 * restrictions.
 */
export interface Replication_Automatic {
}

/**
 * A replication policy that replicates the [Secret][google.cloud.secrets.v1beta1.Secret] payload into the
 * locations specified in [Secret.replication.user_managed.replicas][]
 */
export interface Replication_UserManaged {
  /**
   * Required. The list of Replicas for this [Secret][google.cloud.secrets.v1beta1.Secret].
   *
   * Cannot be empty.
   */
  replicas: Replication_UserManaged_Replica[];
}

/** Represents a Replica for this [Secret][google.cloud.secrets.v1beta1.Secret]. */
export interface Replication_UserManaged_Replica {
  /**
   * The canonical IDs of the location to replicate data.
   * For example: `"us-east1"`.
   */
  location: string;
}

/**
 * A secret payload resource in the Secret Manager API. This contains the
 * sensitive secret data that is associated with a [SecretVersion][google.cloud.secrets.v1beta1.SecretVersion].
 */
export interface SecretPayload {
  /** The secret data. Must be no larger than 64KiB. */
  data: Buffer;
}

function createBaseSecret(): Secret {
  return { name: "", replication: undefined, createTime: undefined, labels: {} };
}

export const Secret: MessageFns<Secret> = {
  encode(message: Secret, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.replication !== undefined) {
      Replication.encode(message.replication, writer.uint32(18).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Secret_LabelsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Secret {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecret();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.replication = Replication.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = Secret_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Secret {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      replication: isSet(object.replication) ? Replication.fromJSON(object.replication) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Secret): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.replication !== undefined) {
      obj.replication = Replication.toJSON(message.replication);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Secret>): Secret {
    return Secret.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Secret>): Secret {
    const message = createBaseSecret();
    message.name = object.name ?? "";
    message.replication = (object.replication !== undefined && object.replication !== null)
      ? Replication.fromPartial(object.replication)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSecret_LabelsEntry(): Secret_LabelsEntry {
  return { key: "", value: "" };
}

export const Secret_LabelsEntry: MessageFns<Secret_LabelsEntry> = {
  encode(message: Secret_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Secret_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecret_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Secret_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Secret_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Secret_LabelsEntry>): Secret_LabelsEntry {
    return Secret_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Secret_LabelsEntry>): Secret_LabelsEntry {
    const message = createBaseSecret_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSecretVersion(): SecretVersion {
  return { name: "", createTime: undefined, destroyTime: undefined, state: 0 };
}

export const SecretVersion: MessageFns<SecretVersion> = {
  encode(message: SecretVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(18).fork()).join();
    }
    if (message.destroyTime !== undefined) {
      Timestamp.encode(toTimestamp(message.destroyTime), writer.uint32(26).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecretVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecretVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.destroyTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecretVersion {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      destroyTime: isSet(object.destroyTime) ? fromJsonTimestamp(object.destroyTime) : undefined,
      state: isSet(object.state) ? secretVersion_StateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: SecretVersion): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.destroyTime !== undefined) {
      obj.destroyTime = message.destroyTime.toISOString();
    }
    if (message.state !== 0) {
      obj.state = secretVersion_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<SecretVersion>): SecretVersion {
    return SecretVersion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecretVersion>): SecretVersion {
    const message = createBaseSecretVersion();
    message.name = object.name ?? "";
    message.createTime = object.createTime ?? undefined;
    message.destroyTime = object.destroyTime ?? undefined;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseReplication(): Replication {
  return { automatic: undefined, userManaged: undefined };
}

export const Replication: MessageFns<Replication> = {
  encode(message: Replication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.automatic !== undefined) {
      Replication_Automatic.encode(message.automatic, writer.uint32(10).fork()).join();
    }
    if (message.userManaged !== undefined) {
      Replication_UserManaged.encode(message.userManaged, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Replication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.automatic = Replication_Automatic.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userManaged = Replication_UserManaged.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Replication {
    return {
      automatic: isSet(object.automatic) ? Replication_Automatic.fromJSON(object.automatic) : undefined,
      userManaged: isSet(object.userManaged) ? Replication_UserManaged.fromJSON(object.userManaged) : undefined,
    };
  },

  toJSON(message: Replication): unknown {
    const obj: any = {};
    if (message.automatic !== undefined) {
      obj.automatic = Replication_Automatic.toJSON(message.automatic);
    }
    if (message.userManaged !== undefined) {
      obj.userManaged = Replication_UserManaged.toJSON(message.userManaged);
    }
    return obj;
  },

  create(base?: DeepPartial<Replication>): Replication {
    return Replication.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Replication>): Replication {
    const message = createBaseReplication();
    message.automatic = (object.automatic !== undefined && object.automatic !== null)
      ? Replication_Automatic.fromPartial(object.automatic)
      : undefined;
    message.userManaged = (object.userManaged !== undefined && object.userManaged !== null)
      ? Replication_UserManaged.fromPartial(object.userManaged)
      : undefined;
    return message;
  },
};

function createBaseReplication_Automatic(): Replication_Automatic {
  return {};
}

export const Replication_Automatic: MessageFns<Replication_Automatic> = {
  encode(_: Replication_Automatic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Replication_Automatic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplication_Automatic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Replication_Automatic {
    return {};
  },

  toJSON(_: Replication_Automatic): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Replication_Automatic>): Replication_Automatic {
    return Replication_Automatic.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Replication_Automatic>): Replication_Automatic {
    const message = createBaseReplication_Automatic();
    return message;
  },
};

function createBaseReplication_UserManaged(): Replication_UserManaged {
  return { replicas: [] };
}

export const Replication_UserManaged: MessageFns<Replication_UserManaged> = {
  encode(message: Replication_UserManaged, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.replicas) {
      Replication_UserManaged_Replica.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Replication_UserManaged {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplication_UserManaged();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.replicas.push(Replication_UserManaged_Replica.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Replication_UserManaged {
    return {
      replicas: globalThis.Array.isArray(object?.replicas)
        ? object.replicas.map((e: any) => Replication_UserManaged_Replica.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Replication_UserManaged): unknown {
    const obj: any = {};
    if (message.replicas?.length) {
      obj.replicas = message.replicas.map((e) => Replication_UserManaged_Replica.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Replication_UserManaged>): Replication_UserManaged {
    return Replication_UserManaged.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Replication_UserManaged>): Replication_UserManaged {
    const message = createBaseReplication_UserManaged();
    message.replicas = object.replicas?.map((e) => Replication_UserManaged_Replica.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReplication_UserManaged_Replica(): Replication_UserManaged_Replica {
  return { location: "" };
}

export const Replication_UserManaged_Replica: MessageFns<Replication_UserManaged_Replica> = {
  encode(message: Replication_UserManaged_Replica, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== "") {
      writer.uint32(10).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Replication_UserManaged_Replica {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplication_UserManaged_Replica();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Replication_UserManaged_Replica {
    return { location: isSet(object.location) ? globalThis.String(object.location) : "" };
  },

  toJSON(message: Replication_UserManaged_Replica): unknown {
    const obj: any = {};
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<Replication_UserManaged_Replica>): Replication_UserManaged_Replica {
    return Replication_UserManaged_Replica.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Replication_UserManaged_Replica>): Replication_UserManaged_Replica {
    const message = createBaseReplication_UserManaged_Replica();
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseSecretPayload(): SecretPayload {
  return { data: Buffer.alloc(0) };
}

export const SecretPayload: MessageFns<SecretPayload> = {
  encode(message: SecretPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecretPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecretPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecretPayload {
    return { data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : Buffer.alloc(0) };
  },

  toJSON(message: SecretPayload): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<SecretPayload>): SecretPayload {
    return SecretPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecretPayload>): SecretPayload {
    const message = createBaseSecretPayload();
    message.data = object.data ?? Buffer.alloc(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
