// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataplex/v1/data_taxonomy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { DataAccessSpec, ResourceAccessSpec } from "./security.js";

export const protobufPackage = "google.cloud.dataplex.v1";

/**
 * DataTaxonomy represents a set of hierarchical DataAttributes resources,
 * grouped with a common theme Eg: 'SensitiveDataTaxonomy' can have attributes
 * to manage PII data. It is defined at project level.
 */
export interface DataTaxonomy {
  /**
   * Output only. The relative resource name of the DataTaxonomy, of the form:
   * projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}.
   */
  name: string;
  /**
   * Output only. System generated globally unique ID for the dataTaxonomy. This
   * ID will be different if the DataTaxonomy is deleted and re-created with the
   * same name.
   */
  uid: string;
  /** Output only. The time when the DataTaxonomy was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the DataTaxonomy was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. Description of the DataTaxonomy. */
  description: string;
  /** Optional. User friendly display name. */
  displayName: string;
  /** Optional. User-defined labels for the DataTaxonomy. */
  labels: { [key: string]: string };
  /** Output only. The number of attributes in the DataTaxonomy. */
  attributeCount: number;
  /**
   * This checksum is computed by the server based on the value of other
   * fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   */
  etag: string;
  /** Output only. The number of classes in the DataTaxonomy. */
  classCount: number;
}

export interface DataTaxonomy_LabelsEntry {
  key: string;
  value: string;
}

/**
 * Denotes one dataAttribute in a dataTaxonomy, for example, PII.
 * DataAttribute resources can be defined in a hierarchy.
 * A single dataAttribute resource can contain specs of multiple types
 *
 * ```
 * PII
 *   - ResourceAccessSpec :
 *                 - readers :foo@bar.com
 *   - DataAccessSpec :
 *                 - readers :bar@foo.com
 * ```
 */
export interface DataAttribute {
  /**
   * Output only. The relative resource name of the dataAttribute, of the form:
   * projects/{project_number}/locations/{location_id}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}.
   */
  name: string;
  /**
   * Output only. System generated globally unique ID for the DataAttribute.
   * This ID will be different if the DataAttribute is deleted and re-created
   * with the same name.
   */
  uid: string;
  /** Output only. The time when the DataAttribute was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the DataAttribute was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. Description of the DataAttribute. */
  description: string;
  /** Optional. User friendly display name. */
  displayName: string;
  /** Optional. User-defined labels for the DataAttribute. */
  labels: { [key: string]: string };
  /**
   * Optional. The ID of the parent DataAttribute resource, should belong to the
   * same data taxonomy. Circular dependency in parent chain is not valid.
   * Maximum depth of the hierarchy allowed is 4.
   * [a -> b -> c -> d -> e, depth = 4]
   */
  parentId: string;
  /** Output only. The number of child attributes present for this attribute. */
  attributeCount: number;
  /**
   * This checksum is computed by the server based on the value of other
   * fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   */
  etag: string;
  /**
   * Optional. Specified when applied to a resource (eg: Cloud Storage bucket,
   * BigQuery dataset, BigQuery table).
   */
  resourceAccessSpec:
    | ResourceAccessSpec
    | undefined;
  /**
   * Optional. Specified when applied to data stored on the resource (eg: rows,
   * columns in BigQuery Tables).
   */
  dataAccessSpec: DataAccessSpec | undefined;
}

export interface DataAttribute_LabelsEntry {
  key: string;
  value: string;
}

/**
 * DataAttributeBinding represents binding of attributes to resources. Eg: Bind
 * 'CustomerInfo' entity with 'PII' attribute.
 */
export interface DataAttributeBinding {
  /**
   * Output only. The relative resource name of the Data Attribute Binding, of
   * the form:
   * projects/{project_number}/locations/{location}/dataAttributeBindings/{data_attribute_binding_id}
   */
  name: string;
  /**
   * Output only. System generated globally unique ID for the
   * DataAttributeBinding. This ID will be different if the DataAttributeBinding
   * is deleted and re-created with the same name.
   */
  uid: string;
  /** Output only. The time when the DataAttributeBinding was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the DataAttributeBinding was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Optional. Description of the DataAttributeBinding. */
  description: string;
  /** Optional. User friendly display name. */
  displayName: string;
  /** Optional. User-defined labels for the DataAttributeBinding. */
  labels: { [key: string]: string };
  /**
   * This checksum is computed by the server based on the value of other
   * fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   * Etags must be used when calling the DeleteDataAttributeBinding and the
   * UpdateDataAttributeBinding method.
   */
  etag: string;
  /**
   * Optional. Immutable. The resource name of the resource that is associated
   * to attributes. Presently, only entity resource is supported in the form:
   * projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity_id}
   * Must belong in the same project and region as the attribute binding, and
   * there can only exist one active binding for a resource.
   */
  resource?:
    | string
    | undefined;
  /**
   * Optional. List of attributes to be associated with the resource, provided
   * in the form:
   * projects/{project}/locations/{location}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}
   */
  attributes: string[];
  /**
   * Optional. The list of paths for items within the associated resource (eg.
   * columns and partitions within a table) along with attribute bindings.
   */
  paths: DataAttributeBinding_Path[];
}

/**
 * Represents a subresource of the given resource, and associated bindings
 * with it. Currently supported subresources are column and partition schema
 * fields within a table.
 */
export interface DataAttributeBinding_Path {
  /**
   * Required. The name identifier of the path.
   * Nested columns should be of the form: 'address.city'.
   */
  name: string;
  /**
   * Optional. List of attributes to be associated with the path of the
   * resource, provided in the form:
   * projects/{project}/locations/{location}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}
   */
  attributes: string[];
}

export interface DataAttributeBinding_LabelsEntry {
  key: string;
  value: string;
}

/** Create DataTaxonomy request. */
export interface CreateDataTaxonomyRequest {
  /**
   * Required. The resource name of the data taxonomy location, of the form:
   * projects/{project_number}/locations/{location_id}
   * where `location_id` refers to a GCP region.
   */
  parent: string;
  /**
   * Required. DataTaxonomy identifier.
   * * Must contain only lowercase letters, numbers and hyphens.
   * * Must start with a letter.
   * * Must be between 1-63 characters.
   * * Must end with a number or a letter.
   * * Must be unique within the Project.
   */
  dataTaxonomyId: string;
  /** Required. DataTaxonomy resource. */
  dataTaxonomy:
    | DataTaxonomy
    | undefined;
  /**
   * Optional. Only validate the request, but do not perform mutations.
   * The default is false.
   */
  validateOnly: boolean;
}

/** Update DataTaxonomy request. */
export interface UpdateDataTaxonomyRequest {
  /** Required. Mask of fields to update. */
  updateMask:
    | string[]
    | undefined;
  /** Required. Only fields specified in `update_mask` are updated. */
  dataTaxonomy:
    | DataTaxonomy
    | undefined;
  /**
   * Optional. Only validate the request, but do not perform mutations.
   * The default is false.
   */
  validateOnly: boolean;
}

/** Get DataTaxonomy request. */
export interface GetDataTaxonomyRequest {
  /**
   * Required. The resource name of the DataTaxonomy:
   * projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}
   */
  name: string;
}

/** List DataTaxonomies request. */
export interface ListDataTaxonomiesRequest {
  /**
   * Required. The resource name of the DataTaxonomy location, of the form:
   * projects/{project_number}/locations/{location_id}
   * where `location_id` refers to a GCP region.
   */
  parent: string;
  /**
   * Optional. Maximum number of DataTaxonomies to return. The service may
   * return fewer than this value. If unspecified, at most 10 DataTaxonomies
   * will be returned. The maximum value is 1000; values above 1000 will be
   * coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. Page token received from a previous ` ListDataTaxonomies` call.
   * Provide this to retrieve the subsequent page. When paginating, all other
   * parameters provided to ` ListDataTaxonomies` must match the call that
   * provided the page token.
   */
  pageToken: string;
  /** Optional. Filter request. */
  filter: string;
  /** Optional. Order by fields for the result. */
  orderBy: string;
}

/** List DataTaxonomies response. */
export interface ListDataTaxonomiesResponse {
  /** DataTaxonomies under the given parent location. */
  dataTaxonomies: DataTaxonomy[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachableLocations: string[];
}

/** Delete DataTaxonomy request. */
export interface DeleteDataTaxonomyRequest {
  /**
   * Required. The resource name of the DataTaxonomy:
   * projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}
   */
  name: string;
  /**
   * Optional. If the client provided etag value does not match the current etag
   * value,the DeleteDataTaxonomy method returns an ABORTED error.
   */
  etag: string;
}

/** Create DataAttribute request. */
export interface CreateDataAttributeRequest {
  /**
   * Required. The resource name of the parent data taxonomy
   * projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}
   */
  parent: string;
  /**
   * Required. DataAttribute identifier.
   * * Must contain only lowercase letters, numbers and hyphens.
   * * Must start with a letter.
   * * Must be between 1-63 characters.
   * * Must end with a number or a letter.
   * * Must be unique within the DataTaxonomy.
   */
  dataAttributeId: string;
  /** Required. DataAttribute resource. */
  dataAttribute:
    | DataAttribute
    | undefined;
  /**
   * Optional. Only validate the request, but do not perform mutations.
   * The default is false.
   */
  validateOnly: boolean;
}

/** Update DataAttribute request. */
export interface UpdateDataAttributeRequest {
  /** Required. Mask of fields to update. */
  updateMask:
    | string[]
    | undefined;
  /** Required. Only fields specified in `update_mask` are updated. */
  dataAttribute:
    | DataAttribute
    | undefined;
  /**
   * Optional. Only validate the request, but do not perform mutations.
   * The default is false.
   */
  validateOnly: boolean;
}

/** Get DataAttribute request. */
export interface GetDataAttributeRequest {
  /**
   * Required. The resource name of the dataAttribute:
   * projects/{project_number}/locations/{location_id}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}
   */
  name: string;
}

/** List DataAttributes request. */
export interface ListDataAttributesRequest {
  /**
   * Required. The resource name of the DataTaxonomy:
   * projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}
   */
  parent: string;
  /**
   * Optional. Maximum number of DataAttributes to return. The service may
   * return fewer than this value. If unspecified, at most 10 dataAttributes
   * will be returned. The maximum value is 1000; values above 1000 will be
   * coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. Page token received from a previous `ListDataAttributes` call.
   * Provide this to retrieve the subsequent page. When paginating, all other
   * parameters provided to `ListDataAttributes` must match the call that
   * provided the page token.
   */
  pageToken: string;
  /** Optional. Filter request. */
  filter: string;
  /** Optional. Order by fields for the result. */
  orderBy: string;
}

/** List DataAttributes response. */
export interface ListDataAttributesResponse {
  /** DataAttributes under the given parent DataTaxonomy. */
  dataAttributes: DataAttribute[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachableLocations: string[];
}

/** Delete DataAttribute request. */
export interface DeleteDataAttributeRequest {
  /**
   * Required. The resource name of the DataAttribute:
   * projects/{project_number}/locations/{location_id}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}
   */
  name: string;
  /**
   * Optional. If the client provided etag value does not match the current etag
   * value, the DeleteDataAttribute method returns an ABORTED error response.
   */
  etag: string;
}

/** Create DataAttributeBinding request. */
export interface CreateDataAttributeBindingRequest {
  /**
   * Required. The resource name of the parent data taxonomy
   * projects/{project_number}/locations/{location_id}
   */
  parent: string;
  /**
   * Required. DataAttributeBinding identifier.
   * * Must contain only lowercase letters, numbers and hyphens.
   * * Must start with a letter.
   * * Must be between 1-63 characters.
   * * Must end with a number or a letter.
   * * Must be unique within the Location.
   */
  dataAttributeBindingId: string;
  /** Required. DataAttributeBinding resource. */
  dataAttributeBinding:
    | DataAttributeBinding
    | undefined;
  /**
   * Optional. Only validate the request, but do not perform mutations.
   * The default is false.
   */
  validateOnly: boolean;
}

/** Update DataAttributeBinding request. */
export interface UpdateDataAttributeBindingRequest {
  /** Required. Mask of fields to update. */
  updateMask:
    | string[]
    | undefined;
  /** Required. Only fields specified in `update_mask` are updated. */
  dataAttributeBinding:
    | DataAttributeBinding
    | undefined;
  /**
   * Optional. Only validate the request, but do not perform mutations.
   * The default is false.
   */
  validateOnly: boolean;
}

/** Get DataAttributeBinding request. */
export interface GetDataAttributeBindingRequest {
  /**
   * Required. The resource name of the DataAttributeBinding:
   * projects/{project_number}/locations/{location_id}/dataAttributeBindings/{data_attribute_binding_id}
   */
  name: string;
}

/** List DataAttributeBindings request. */
export interface ListDataAttributeBindingsRequest {
  /**
   * Required. The resource name of the Location:
   * projects/{project_number}/locations/{location_id}
   */
  parent: string;
  /**
   * Optional. Maximum number of DataAttributeBindings to return. The service
   * may return fewer than this value. If unspecified, at most 10
   * DataAttributeBindings will be returned. The maximum value is 1000; values
   * above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. Page token received from a previous `ListDataAttributeBindings`
   * call. Provide this to retrieve the subsequent page. When paginating, all
   * other parameters provided to `ListDataAttributeBindings` must match the
   * call that provided the page token.
   */
  pageToken: string;
  /**
   * Optional. Filter request.
   * Filter using resource: filter=resource:"resource-name"
   * Filter using attribute: filter=attributes:"attribute-name"
   * Filter using attribute in paths list:
   * filter=paths.attributes:"attribute-name"
   */
  filter: string;
  /** Optional. Order by fields for the result. */
  orderBy: string;
}

/** List DataAttributeBindings response. */
export interface ListDataAttributeBindingsResponse {
  /** DataAttributeBindings under the given parent Location. */
  dataAttributeBindings: DataAttributeBinding[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
  /** Locations that could not be reached. */
  unreachableLocations: string[];
}

/** Delete DataAttributeBinding request. */
export interface DeleteDataAttributeBindingRequest {
  /**
   * Required. The resource name of the DataAttributeBinding:
   * projects/{project_number}/locations/{location_id}/dataAttributeBindings/{data_attribute_binding_id}
   */
  name: string;
  /**
   * Required. If the client provided etag value does not match the current etag
   * value, the DeleteDataAttributeBindingRequest method returns an ABORTED
   * error response. Etags must be used when calling the
   * DeleteDataAttributeBinding.
   */
  etag: string;
}

function createBaseDataTaxonomy(): DataTaxonomy {
  return {
    name: "",
    uid: "",
    createTime: undefined,
    updateTime: undefined,
    description: "",
    displayName: "",
    labels: {},
    attributeCount: 0,
    etag: "",
    classCount: 0,
  };
}

export const DataTaxonomy: MessageFns<DataTaxonomy> = {
  encode(message: DataTaxonomy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.displayName !== "") {
      writer.uint32(50).string(message.displayName);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      DataTaxonomy_LabelsEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    if (message.attributeCount !== 0) {
      writer.uint32(72).int32(message.attributeCount);
    }
    if (message.etag !== "") {
      writer.uint32(82).string(message.etag);
    }
    if (message.classCount !== 0) {
      writer.uint32(88).int32(message.classCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataTaxonomy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataTaxonomy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = DataTaxonomy_LabelsEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.labels[entry8.key] = entry8.value;
          }
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.attributeCount = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.classCount = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataTaxonomy {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      attributeCount: isSet(object.attributeCount) ? globalThis.Number(object.attributeCount) : 0,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      classCount: isSet(object.classCount) ? globalThis.Number(object.classCount) : 0,
    };
  },

  toJSON(message: DataTaxonomy): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.attributeCount !== 0) {
      obj.attributeCount = Math.round(message.attributeCount);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.classCount !== 0) {
      obj.classCount = Math.round(message.classCount);
    }
    return obj;
  },

  create(base?: DeepPartial<DataTaxonomy>): DataTaxonomy {
    return DataTaxonomy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataTaxonomy>): DataTaxonomy {
    const message = createBaseDataTaxonomy();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.displayName = object.displayName ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.attributeCount = object.attributeCount ?? 0;
    message.etag = object.etag ?? "";
    message.classCount = object.classCount ?? 0;
    return message;
  },
};

function createBaseDataTaxonomy_LabelsEntry(): DataTaxonomy_LabelsEntry {
  return { key: "", value: "" };
}

export const DataTaxonomy_LabelsEntry: MessageFns<DataTaxonomy_LabelsEntry> = {
  encode(message: DataTaxonomy_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataTaxonomy_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataTaxonomy_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataTaxonomy_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DataTaxonomy_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DataTaxonomy_LabelsEntry>): DataTaxonomy_LabelsEntry {
    return DataTaxonomy_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataTaxonomy_LabelsEntry>): DataTaxonomy_LabelsEntry {
    const message = createBaseDataTaxonomy_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDataAttribute(): DataAttribute {
  return {
    name: "",
    uid: "",
    createTime: undefined,
    updateTime: undefined,
    description: "",
    displayName: "",
    labels: {},
    parentId: "",
    attributeCount: 0,
    etag: "",
    resourceAccessSpec: undefined,
    dataAccessSpec: undefined,
  };
}

export const DataAttribute: MessageFns<DataAttribute> = {
  encode(message: DataAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.displayName !== "") {
      writer.uint32(50).string(message.displayName);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      DataAttribute_LabelsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.parentId !== "") {
      writer.uint32(66).string(message.parentId);
    }
    if (message.attributeCount !== 0) {
      writer.uint32(72).int32(message.attributeCount);
    }
    if (message.etag !== "") {
      writer.uint32(82).string(message.etag);
    }
    if (message.resourceAccessSpec !== undefined) {
      ResourceAccessSpec.encode(message.resourceAccessSpec, writer.uint32(802).fork()).join();
    }
    if (message.dataAccessSpec !== undefined) {
      DataAccessSpec.encode(message.dataAccessSpec, writer.uint32(810).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = DataAttribute_LabelsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.labels[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.parentId = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.attributeCount = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.resourceAccessSpec = ResourceAccessSpec.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.dataAccessSpec = DataAccessSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttribute {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : "",
      attributeCount: isSet(object.attributeCount) ? globalThis.Number(object.attributeCount) : 0,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      resourceAccessSpec: isSet(object.resourceAccessSpec)
        ? ResourceAccessSpec.fromJSON(object.resourceAccessSpec)
        : undefined,
      dataAccessSpec: isSet(object.dataAccessSpec) ? DataAccessSpec.fromJSON(object.dataAccessSpec) : undefined,
    };
  },

  toJSON(message: DataAttribute): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.parentId !== "") {
      obj.parentId = message.parentId;
    }
    if (message.attributeCount !== 0) {
      obj.attributeCount = Math.round(message.attributeCount);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.resourceAccessSpec !== undefined) {
      obj.resourceAccessSpec = ResourceAccessSpec.toJSON(message.resourceAccessSpec);
    }
    if (message.dataAccessSpec !== undefined) {
      obj.dataAccessSpec = DataAccessSpec.toJSON(message.dataAccessSpec);
    }
    return obj;
  },

  create(base?: DeepPartial<DataAttribute>): DataAttribute {
    return DataAttribute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataAttribute>): DataAttribute {
    const message = createBaseDataAttribute();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.displayName = object.displayName ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.parentId = object.parentId ?? "";
    message.attributeCount = object.attributeCount ?? 0;
    message.etag = object.etag ?? "";
    message.resourceAccessSpec = (object.resourceAccessSpec !== undefined && object.resourceAccessSpec !== null)
      ? ResourceAccessSpec.fromPartial(object.resourceAccessSpec)
      : undefined;
    message.dataAccessSpec = (object.dataAccessSpec !== undefined && object.dataAccessSpec !== null)
      ? DataAccessSpec.fromPartial(object.dataAccessSpec)
      : undefined;
    return message;
  },
};

function createBaseDataAttribute_LabelsEntry(): DataAttribute_LabelsEntry {
  return { key: "", value: "" };
}

export const DataAttribute_LabelsEntry: MessageFns<DataAttribute_LabelsEntry> = {
  encode(message: DataAttribute_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttribute_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttribute_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttribute_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DataAttribute_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DataAttribute_LabelsEntry>): DataAttribute_LabelsEntry {
    return DataAttribute_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataAttribute_LabelsEntry>): DataAttribute_LabelsEntry {
    const message = createBaseDataAttribute_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDataAttributeBinding(): DataAttributeBinding {
  return {
    name: "",
    uid: "",
    createTime: undefined,
    updateTime: undefined,
    description: "",
    displayName: "",
    labels: {},
    etag: "",
    resource: undefined,
    attributes: [],
    paths: [],
  };
}

export const DataAttributeBinding: MessageFns<DataAttributeBinding> = {
  encode(message: DataAttributeBinding, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.displayName !== "") {
      writer.uint32(50).string(message.displayName);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      DataAttributeBinding_LabelsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.etag !== "") {
      writer.uint32(66).string(message.etag);
    }
    if (message.resource !== undefined) {
      writer.uint32(802).string(message.resource);
    }
    for (const v of message.attributes) {
      writer.uint32(882).string(v!);
    }
    for (const v of message.paths) {
      DataAttributeBinding_Path.encode(v!, writer.uint32(962).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttributeBinding {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttributeBinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = DataAttributeBinding_LabelsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.labels[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.etag = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 110:
          if (tag !== 882) {
            break;
          }

          message.attributes.push(reader.string());
          continue;
        case 120:
          if (tag !== 962) {
            break;
          }

          message.paths.push(DataAttributeBinding_Path.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttributeBinding {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
      resource: isSet(object.resource) ? globalThis.String(object.resource) : undefined,
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => globalThis.String(e))
        : [],
      paths: globalThis.Array.isArray(object?.paths)
        ? object.paths.map((e: any) => DataAttributeBinding_Path.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DataAttributeBinding): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    if (message.resource !== undefined) {
      obj.resource = message.resource;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes;
    }
    if (message.paths?.length) {
      obj.paths = message.paths.map((e) => DataAttributeBinding_Path.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DataAttributeBinding>): DataAttributeBinding {
    return DataAttributeBinding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataAttributeBinding>): DataAttributeBinding {
    const message = createBaseDataAttributeBinding();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.displayName = object.displayName ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.etag = object.etag ?? "";
    message.resource = object.resource ?? undefined;
    message.attributes = object.attributes?.map((e) => e) || [];
    message.paths = object.paths?.map((e) => DataAttributeBinding_Path.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDataAttributeBinding_Path(): DataAttributeBinding_Path {
  return { name: "", attributes: [] };
}

export const DataAttributeBinding_Path: MessageFns<DataAttributeBinding_Path> = {
  encode(message: DataAttributeBinding_Path, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.attributes) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttributeBinding_Path {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttributeBinding_Path();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.attributes.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttributeBinding_Path {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DataAttributeBinding_Path): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes;
    }
    return obj;
  },

  create(base?: DeepPartial<DataAttributeBinding_Path>): DataAttributeBinding_Path {
    return DataAttributeBinding_Path.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataAttributeBinding_Path>): DataAttributeBinding_Path {
    const message = createBaseDataAttributeBinding_Path();
    message.name = object.name ?? "";
    message.attributes = object.attributes?.map((e) => e) || [];
    return message;
  },
};

function createBaseDataAttributeBinding_LabelsEntry(): DataAttributeBinding_LabelsEntry {
  return { key: "", value: "" };
}

export const DataAttributeBinding_LabelsEntry: MessageFns<DataAttributeBinding_LabelsEntry> = {
  encode(message: DataAttributeBinding_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAttributeBinding_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAttributeBinding_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAttributeBinding_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DataAttributeBinding_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DataAttributeBinding_LabelsEntry>): DataAttributeBinding_LabelsEntry {
    return DataAttributeBinding_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataAttributeBinding_LabelsEntry>): DataAttributeBinding_LabelsEntry {
    const message = createBaseDataAttributeBinding_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCreateDataTaxonomyRequest(): CreateDataTaxonomyRequest {
  return { parent: "", dataTaxonomyId: "", dataTaxonomy: undefined, validateOnly: false };
}

export const CreateDataTaxonomyRequest: MessageFns<CreateDataTaxonomyRequest> = {
  encode(message: CreateDataTaxonomyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataTaxonomyId !== "") {
      writer.uint32(18).string(message.dataTaxonomyId);
    }
    if (message.dataTaxonomy !== undefined) {
      DataTaxonomy.encode(message.dataTaxonomy, writer.uint32(26).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataTaxonomyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataTaxonomyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataTaxonomyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataTaxonomy = DataTaxonomy.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataTaxonomyRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataTaxonomyId: isSet(object.dataTaxonomyId) ? globalThis.String(object.dataTaxonomyId) : "",
      dataTaxonomy: isSet(object.dataTaxonomy) ? DataTaxonomy.fromJSON(object.dataTaxonomy) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateDataTaxonomyRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataTaxonomyId !== "") {
      obj.dataTaxonomyId = message.dataTaxonomyId;
    }
    if (message.dataTaxonomy !== undefined) {
      obj.dataTaxonomy = DataTaxonomy.toJSON(message.dataTaxonomy);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataTaxonomyRequest>): CreateDataTaxonomyRequest {
    return CreateDataTaxonomyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataTaxonomyRequest>): CreateDataTaxonomyRequest {
    const message = createBaseCreateDataTaxonomyRequest();
    message.parent = object.parent ?? "";
    message.dataTaxonomyId = object.dataTaxonomyId ?? "";
    message.dataTaxonomy = (object.dataTaxonomy !== undefined && object.dataTaxonomy !== null)
      ? DataTaxonomy.fromPartial(object.dataTaxonomy)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateDataTaxonomyRequest(): UpdateDataTaxonomyRequest {
  return { updateMask: undefined, dataTaxonomy: undefined, validateOnly: false };
}

export const UpdateDataTaxonomyRequest: MessageFns<UpdateDataTaxonomyRequest> = {
  encode(message: UpdateDataTaxonomyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.dataTaxonomy !== undefined) {
      DataTaxonomy.encode(message.dataTaxonomy, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataTaxonomyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataTaxonomyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataTaxonomy = DataTaxonomy.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataTaxonomyRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      dataTaxonomy: isSet(object.dataTaxonomy) ? DataTaxonomy.fromJSON(object.dataTaxonomy) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateDataTaxonomyRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.dataTaxonomy !== undefined) {
      obj.dataTaxonomy = DataTaxonomy.toJSON(message.dataTaxonomy);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataTaxonomyRequest>): UpdateDataTaxonomyRequest {
    return UpdateDataTaxonomyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataTaxonomyRequest>): UpdateDataTaxonomyRequest {
    const message = createBaseUpdateDataTaxonomyRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.dataTaxonomy = (object.dataTaxonomy !== undefined && object.dataTaxonomy !== null)
      ? DataTaxonomy.fromPartial(object.dataTaxonomy)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseGetDataTaxonomyRequest(): GetDataTaxonomyRequest {
  return { name: "" };
}

export const GetDataTaxonomyRequest: MessageFns<GetDataTaxonomyRequest> = {
  encode(message: GetDataTaxonomyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataTaxonomyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataTaxonomyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataTaxonomyRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataTaxonomyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataTaxonomyRequest>): GetDataTaxonomyRequest {
    return GetDataTaxonomyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataTaxonomyRequest>): GetDataTaxonomyRequest {
    const message = createBaseGetDataTaxonomyRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDataTaxonomiesRequest(): ListDataTaxonomiesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListDataTaxonomiesRequest: MessageFns<ListDataTaxonomiesRequest> = {
  encode(message: ListDataTaxonomiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataTaxonomiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataTaxonomiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataTaxonomiesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDataTaxonomiesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataTaxonomiesRequest>): ListDataTaxonomiesRequest {
    return ListDataTaxonomiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataTaxonomiesRequest>): ListDataTaxonomiesRequest {
    const message = createBaseListDataTaxonomiesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDataTaxonomiesResponse(): ListDataTaxonomiesResponse {
  return { dataTaxonomies: [], nextPageToken: "", unreachableLocations: [] };
}

export const ListDataTaxonomiesResponse: MessageFns<ListDataTaxonomiesResponse> = {
  encode(message: ListDataTaxonomiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataTaxonomies) {
      DataTaxonomy.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachableLocations) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataTaxonomiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataTaxonomiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataTaxonomies.push(DataTaxonomy.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachableLocations.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataTaxonomiesResponse {
    return {
      dataTaxonomies: globalThis.Array.isArray(object?.dataTaxonomies)
        ? object.dataTaxonomies.map((e: any) => DataTaxonomy.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachableLocations: globalThis.Array.isArray(object?.unreachableLocations)
        ? object.unreachableLocations.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListDataTaxonomiesResponse): unknown {
    const obj: any = {};
    if (message.dataTaxonomies?.length) {
      obj.dataTaxonomies = message.dataTaxonomies.map((e) => DataTaxonomy.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachableLocations?.length) {
      obj.unreachableLocations = message.unreachableLocations;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataTaxonomiesResponse>): ListDataTaxonomiesResponse {
    return ListDataTaxonomiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataTaxonomiesResponse>): ListDataTaxonomiesResponse {
    const message = createBaseListDataTaxonomiesResponse();
    message.dataTaxonomies = object.dataTaxonomies?.map((e) => DataTaxonomy.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachableLocations = object.unreachableLocations?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteDataTaxonomyRequest(): DeleteDataTaxonomyRequest {
  return { name: "", etag: "" };
}

export const DeleteDataTaxonomyRequest: MessageFns<DeleteDataTaxonomyRequest> = {
  encode(message: DeleteDataTaxonomyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataTaxonomyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataTaxonomyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataTaxonomyRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteDataTaxonomyRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataTaxonomyRequest>): DeleteDataTaxonomyRequest {
    return DeleteDataTaxonomyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataTaxonomyRequest>): DeleteDataTaxonomyRequest {
    const message = createBaseDeleteDataTaxonomyRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseCreateDataAttributeRequest(): CreateDataAttributeRequest {
  return { parent: "", dataAttributeId: "", dataAttribute: undefined, validateOnly: false };
}

export const CreateDataAttributeRequest: MessageFns<CreateDataAttributeRequest> = {
  encode(message: CreateDataAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataAttributeId !== "") {
      writer.uint32(18).string(message.dataAttributeId);
    }
    if (message.dataAttribute !== undefined) {
      DataAttribute.encode(message.dataAttribute, writer.uint32(26).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataAttributeId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataAttribute = DataAttribute.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataAttributeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataAttributeId: isSet(object.dataAttributeId) ? globalThis.String(object.dataAttributeId) : "",
      dataAttribute: isSet(object.dataAttribute) ? DataAttribute.fromJSON(object.dataAttribute) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateDataAttributeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataAttributeId !== "") {
      obj.dataAttributeId = message.dataAttributeId;
    }
    if (message.dataAttribute !== undefined) {
      obj.dataAttribute = DataAttribute.toJSON(message.dataAttribute);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataAttributeRequest>): CreateDataAttributeRequest {
    return CreateDataAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataAttributeRequest>): CreateDataAttributeRequest {
    const message = createBaseCreateDataAttributeRequest();
    message.parent = object.parent ?? "";
    message.dataAttributeId = object.dataAttributeId ?? "";
    message.dataAttribute = (object.dataAttribute !== undefined && object.dataAttribute !== null)
      ? DataAttribute.fromPartial(object.dataAttribute)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateDataAttributeRequest(): UpdateDataAttributeRequest {
  return { updateMask: undefined, dataAttribute: undefined, validateOnly: false };
}

export const UpdateDataAttributeRequest: MessageFns<UpdateDataAttributeRequest> = {
  encode(message: UpdateDataAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.dataAttribute !== undefined) {
      DataAttribute.encode(message.dataAttribute, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataAttribute = DataAttribute.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataAttributeRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      dataAttribute: isSet(object.dataAttribute) ? DataAttribute.fromJSON(object.dataAttribute) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateDataAttributeRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.dataAttribute !== undefined) {
      obj.dataAttribute = DataAttribute.toJSON(message.dataAttribute);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataAttributeRequest>): UpdateDataAttributeRequest {
    return UpdateDataAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataAttributeRequest>): UpdateDataAttributeRequest {
    const message = createBaseUpdateDataAttributeRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.dataAttribute = (object.dataAttribute !== undefined && object.dataAttribute !== null)
      ? DataAttribute.fromPartial(object.dataAttribute)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseGetDataAttributeRequest(): GetDataAttributeRequest {
  return { name: "" };
}

export const GetDataAttributeRequest: MessageFns<GetDataAttributeRequest> = {
  encode(message: GetDataAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataAttributeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataAttributeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataAttributeRequest>): GetDataAttributeRequest {
    return GetDataAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataAttributeRequest>): GetDataAttributeRequest {
    const message = createBaseGetDataAttributeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDataAttributesRequest(): ListDataAttributesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListDataAttributesRequest: MessageFns<ListDataAttributesRequest> = {
  encode(message: ListDataAttributesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataAttributesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataAttributesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataAttributesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDataAttributesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataAttributesRequest>): ListDataAttributesRequest {
    return ListDataAttributesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataAttributesRequest>): ListDataAttributesRequest {
    const message = createBaseListDataAttributesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDataAttributesResponse(): ListDataAttributesResponse {
  return { dataAttributes: [], nextPageToken: "", unreachableLocations: [] };
}

export const ListDataAttributesResponse: MessageFns<ListDataAttributesResponse> = {
  encode(message: ListDataAttributesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataAttributes) {
      DataAttribute.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachableLocations) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataAttributesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataAttributesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataAttributes.push(DataAttribute.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachableLocations.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataAttributesResponse {
    return {
      dataAttributes: globalThis.Array.isArray(object?.dataAttributes)
        ? object.dataAttributes.map((e: any) => DataAttribute.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachableLocations: globalThis.Array.isArray(object?.unreachableLocations)
        ? object.unreachableLocations.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListDataAttributesResponse): unknown {
    const obj: any = {};
    if (message.dataAttributes?.length) {
      obj.dataAttributes = message.dataAttributes.map((e) => DataAttribute.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachableLocations?.length) {
      obj.unreachableLocations = message.unreachableLocations;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataAttributesResponse>): ListDataAttributesResponse {
    return ListDataAttributesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataAttributesResponse>): ListDataAttributesResponse {
    const message = createBaseListDataAttributesResponse();
    message.dataAttributes = object.dataAttributes?.map((e) => DataAttribute.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachableLocations = object.unreachableLocations?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteDataAttributeRequest(): DeleteDataAttributeRequest {
  return { name: "", etag: "" };
}

export const DeleteDataAttributeRequest: MessageFns<DeleteDataAttributeRequest> = {
  encode(message: DeleteDataAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataAttributeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteDataAttributeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataAttributeRequest>): DeleteDataAttributeRequest {
    return DeleteDataAttributeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataAttributeRequest>): DeleteDataAttributeRequest {
    const message = createBaseDeleteDataAttributeRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseCreateDataAttributeBindingRequest(): CreateDataAttributeBindingRequest {
  return { parent: "", dataAttributeBindingId: "", dataAttributeBinding: undefined, validateOnly: false };
}

export const CreateDataAttributeBindingRequest: MessageFns<CreateDataAttributeBindingRequest> = {
  encode(message: CreateDataAttributeBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.dataAttributeBindingId !== "") {
      writer.uint32(18).string(message.dataAttributeBindingId);
    }
    if (message.dataAttributeBinding !== undefined) {
      DataAttributeBinding.encode(message.dataAttributeBinding, writer.uint32(26).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(32).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateDataAttributeBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDataAttributeBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataAttributeBindingId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.dataAttributeBinding = DataAttributeBinding.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDataAttributeBindingRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      dataAttributeBindingId: isSet(object.dataAttributeBindingId)
        ? globalThis.String(object.dataAttributeBindingId)
        : "",
      dataAttributeBinding: isSet(object.dataAttributeBinding)
        ? DataAttributeBinding.fromJSON(object.dataAttributeBinding)
        : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateDataAttributeBindingRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.dataAttributeBindingId !== "") {
      obj.dataAttributeBindingId = message.dataAttributeBindingId;
    }
    if (message.dataAttributeBinding !== undefined) {
      obj.dataAttributeBinding = DataAttributeBinding.toJSON(message.dataAttributeBinding);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateDataAttributeBindingRequest>): CreateDataAttributeBindingRequest {
    return CreateDataAttributeBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDataAttributeBindingRequest>): CreateDataAttributeBindingRequest {
    const message = createBaseCreateDataAttributeBindingRequest();
    message.parent = object.parent ?? "";
    message.dataAttributeBindingId = object.dataAttributeBindingId ?? "";
    message.dataAttributeBinding = (object.dataAttributeBinding !== undefined && object.dataAttributeBinding !== null)
      ? DataAttributeBinding.fromPartial(object.dataAttributeBinding)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateDataAttributeBindingRequest(): UpdateDataAttributeBindingRequest {
  return { updateMask: undefined, dataAttributeBinding: undefined, validateOnly: false };
}

export const UpdateDataAttributeBindingRequest: MessageFns<UpdateDataAttributeBindingRequest> = {
  encode(message: UpdateDataAttributeBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.dataAttributeBinding !== undefined) {
      DataAttributeBinding.encode(message.dataAttributeBinding, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDataAttributeBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDataAttributeBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataAttributeBinding = DataAttributeBinding.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDataAttributeBindingRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      dataAttributeBinding: isSet(object.dataAttributeBinding)
        ? DataAttributeBinding.fromJSON(object.dataAttributeBinding)
        : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateDataAttributeBindingRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.dataAttributeBinding !== undefined) {
      obj.dataAttributeBinding = DataAttributeBinding.toJSON(message.dataAttributeBinding);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDataAttributeBindingRequest>): UpdateDataAttributeBindingRequest {
    return UpdateDataAttributeBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDataAttributeBindingRequest>): UpdateDataAttributeBindingRequest {
    const message = createBaseUpdateDataAttributeBindingRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.dataAttributeBinding = (object.dataAttributeBinding !== undefined && object.dataAttributeBinding !== null)
      ? DataAttributeBinding.fromPartial(object.dataAttributeBinding)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseGetDataAttributeBindingRequest(): GetDataAttributeBindingRequest {
  return { name: "" };
}

export const GetDataAttributeBindingRequest: MessageFns<GetDataAttributeBindingRequest> = {
  encode(message: GetDataAttributeBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDataAttributeBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataAttributeBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataAttributeBindingRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDataAttributeBindingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataAttributeBindingRequest>): GetDataAttributeBindingRequest {
    return GetDataAttributeBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataAttributeBindingRequest>): GetDataAttributeBindingRequest {
    const message = createBaseGetDataAttributeBindingRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListDataAttributeBindingsRequest(): ListDataAttributeBindingsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListDataAttributeBindingsRequest: MessageFns<ListDataAttributeBindingsRequest> = {
  encode(message: ListDataAttributeBindingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataAttributeBindingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataAttributeBindingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataAttributeBindingsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListDataAttributeBindingsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataAttributeBindingsRequest>): ListDataAttributeBindingsRequest {
    return ListDataAttributeBindingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataAttributeBindingsRequest>): ListDataAttributeBindingsRequest {
    const message = createBaseListDataAttributeBindingsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListDataAttributeBindingsResponse(): ListDataAttributeBindingsResponse {
  return { dataAttributeBindings: [], nextPageToken: "", unreachableLocations: [] };
}

export const ListDataAttributeBindingsResponse: MessageFns<ListDataAttributeBindingsResponse> = {
  encode(message: ListDataAttributeBindingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dataAttributeBindings) {
      DataAttributeBinding.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachableLocations) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDataAttributeBindingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDataAttributeBindingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataAttributeBindings.push(DataAttributeBinding.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachableLocations.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDataAttributeBindingsResponse {
    return {
      dataAttributeBindings: globalThis.Array.isArray(object?.dataAttributeBindings)
        ? object.dataAttributeBindings.map((e: any) => DataAttributeBinding.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachableLocations: globalThis.Array.isArray(object?.unreachableLocations)
        ? object.unreachableLocations.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListDataAttributeBindingsResponse): unknown {
    const obj: any = {};
    if (message.dataAttributeBindings?.length) {
      obj.dataAttributeBindings = message.dataAttributeBindings.map((e) => DataAttributeBinding.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachableLocations?.length) {
      obj.unreachableLocations = message.unreachableLocations;
    }
    return obj;
  },

  create(base?: DeepPartial<ListDataAttributeBindingsResponse>): ListDataAttributeBindingsResponse {
    return ListDataAttributeBindingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDataAttributeBindingsResponse>): ListDataAttributeBindingsResponse {
    const message = createBaseListDataAttributeBindingsResponse();
    message.dataAttributeBindings = object.dataAttributeBindings?.map((e) => DataAttributeBinding.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachableLocations = object.unreachableLocations?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeleteDataAttributeBindingRequest(): DeleteDataAttributeBindingRequest {
  return { name: "", etag: "" };
}

export const DeleteDataAttributeBindingRequest: MessageFns<DeleteDataAttributeBindingRequest> = {
  encode(message: DeleteDataAttributeBindingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.etag !== "") {
      writer.uint32(18).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteDataAttributeBindingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDataAttributeBindingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.etag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDataAttributeBindingRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: DeleteDataAttributeBindingRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteDataAttributeBindingRequest>): DeleteDataAttributeBindingRequest {
    return DeleteDataAttributeBindingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteDataAttributeBindingRequest>): DeleteDataAttributeBindingRequest {
    const message = createBaseDeleteDataAttributeBindingRequest();
    message.name = object.name ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

/**
 * DataTaxonomyService enables attribute-based governance. The resources
 * currently offered include DataTaxonomy and DataAttribute.
 */
export type DataTaxonomyServiceDefinition = typeof DataTaxonomyServiceDefinition;
export const DataTaxonomyServiceDefinition = {
  name: "DataTaxonomyService",
  fullName: "google.cloud.dataplex.v1.DataTaxonomyService",
  methods: {
    /** Create a DataTaxonomy resource. */
    createDataTaxonomy: {
      name: "CreateDataTaxonomy",
      requestType: CreateDataTaxonomyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              68,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              37,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              97,
              116,
              97,
              95,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              44,
              100,
              97,
              116,
              97,
              95,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              67,
              58,
              13,
              100,
              97,
              116,
              97,
              95,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              34,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a DataTaxonomy resource. */
    updateDataTaxonomy: {
      name: "UpdateDataTaxonomy",
      requestType: UpdateDataTaxonomyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              33,
              10,
              12,
              68,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              100,
              97,
              116,
              97,
              95,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              81,
              58,
              13,
              100,
              97,
              116,
              97,
              95,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              50,
              64,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              116,
              97,
              120,
              111,
              110,
              111,
              109,
              121,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a DataTaxonomy resource. All attributes within the DataTaxonomy
     * must be deleted before the DataTaxonomy can be deleted.
     */
    deleteDataTaxonomy: {
      name: "DeleteDataTaxonomy",
      requestType: DeleteDataTaxonomyRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              42,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists DataTaxonomy resources in a project and location. */
    listDataTaxonomies: {
      name: "ListDataTaxonomies",
      requestType: ListDataTaxonomiesRequest,
      requestStream: false,
      responseType: ListDataTaxonomiesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a DataTaxonomy resource. */
    getDataTaxonomy: {
      name: "GetDataTaxonomy",
      requestType: GetDataTaxonomyRequest,
      requestStream: false,
      responseType: DataTaxonomy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              52,
              18,
              50,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Create a DataAttributeBinding resource. */
    createDataAttributeBinding: {
      name: "CreateDataAttributeBinding",
      requestType: CreateDataAttributeBindingRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              20,
              68,
              97,
              116,
              97,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              55,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              44,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              83,
              58,
              22,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              34,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a DataAttributeBinding resource. */
    updateDataAttributeBinding: {
      name: "UpdateDataAttributeBinding",
      requestType: UpdateDataAttributeBindingRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              41,
              10,
              20,
              68,
              97,
              116,
              97,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              34,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              106,
              58,
              22,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              50,
              80,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              95,
              98,
              105,
              110,
              100,
              105,
              110,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes a DataAttributeBinding resource. All attributes within the
     * DataAttributeBinding must be deleted before the DataAttributeBinding can be
     * deleted.
     */
    deleteDataAttributeBinding: {
      name: "DeleteDataAttributeBinding",
      requestType: DeleteDataAttributeBindingRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              42,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists DataAttributeBinding resources in a project and location. */
    listDataAttributeBindings: {
      name: "ListDataAttributeBindings",
      requestType: ListDataAttributeBindingsRequest,
      requestStream: false,
      responseType: ListDataAttributeBindingsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              100,
              97,
              116,
              97,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a DataAttributeBinding resource. */
    getDataAttributeBinding: {
      name: "GetDataAttributeBinding",
      requestType: GetDataAttributeBindingRequest,
      requestStream: false,
      responseType: DataAttributeBinding,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              59,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              66,
              105,
              110,
              100,
              105,
              110,
              103,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Create a DataAttribute resource. */
    createDataAttribute: {
      name: "CreateDataAttribute",
      requestType: CreateDataAttributeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              68,
              97,
              116,
              97,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              39,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              44,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              81,
              58,
              14,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              34,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates a DataAttribute resource. */
    updateDataAttribute: {
      name: "UpdateDataAttribute",
      requestType: UpdateDataAttributeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              34,
              10,
              13,
              68,
              97,
              116,
              97,
              65,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              26,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              96,
              58,
              14,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              50,
              78,
              47,
              118,
              49,
              47,
              123,
              100,
              97,
              116,
              97,
              95,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes a Data Attribute resource. */
    deleteDataAttribute: {
      name: "DeleteDataAttribute",
      requestType: DeleteDataAttributeRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              42,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Lists Data Attribute resources in a DataTaxonomy. */
    listDataAttributes: {
      name: "ListDataAttributes",
      requestType: ListDataAttributesRequest,
      requestStream: false,
      responseType: ListDataAttributesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              125,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves a Data Attribute resource. */
    getDataAttribute: {
      name: "GetDataAttribute",
      requestType: GetDataAttributeRequest,
      requestStream: false,
      responseType: DataAttribute,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              65,
              18,
              63,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              84,
              97,
              120,
              111,
              110,
              111,
              109,
              105,
              101,
              115,
              47,
              42,
              47,
              97,
              116,
              116,
              114,
              105,
              98,
              117,
              116,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface DataTaxonomyServiceImplementation<CallContextExt = {}> {
  /** Create a DataTaxonomy resource. */
  createDataTaxonomy(
    request: CreateDataTaxonomyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a DataTaxonomy resource. */
  updateDataTaxonomy(
    request: UpdateDataTaxonomyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a DataTaxonomy resource. All attributes within the DataTaxonomy
   * must be deleted before the DataTaxonomy can be deleted.
   */
  deleteDataTaxonomy(
    request: DeleteDataTaxonomyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists DataTaxonomy resources in a project and location. */
  listDataTaxonomies(
    request: ListDataTaxonomiesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataTaxonomiesResponse>>;
  /** Retrieves a DataTaxonomy resource. */
  getDataTaxonomy(
    request: GetDataTaxonomyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataTaxonomy>>;
  /** Create a DataAttributeBinding resource. */
  createDataAttributeBinding(
    request: CreateDataAttributeBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a DataAttributeBinding resource. */
  updateDataAttributeBinding(
    request: UpdateDataAttributeBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /**
   * Deletes a DataAttributeBinding resource. All attributes within the
   * DataAttributeBinding must be deleted before the DataAttributeBinding can be
   * deleted.
   */
  deleteDataAttributeBinding(
    request: DeleteDataAttributeBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists DataAttributeBinding resources in a project and location. */
  listDataAttributeBindings(
    request: ListDataAttributeBindingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataAttributeBindingsResponse>>;
  /** Retrieves a DataAttributeBinding resource. */
  getDataAttributeBinding(
    request: GetDataAttributeBindingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataAttributeBinding>>;
  /** Create a DataAttribute resource. */
  createDataAttribute(
    request: CreateDataAttributeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates a DataAttribute resource. */
  updateDataAttribute(
    request: UpdateDataAttributeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Deletes a Data Attribute resource. */
  deleteDataAttribute(
    request: DeleteDataAttributeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Lists Data Attribute resources in a DataTaxonomy. */
  listDataAttributes(
    request: ListDataAttributesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListDataAttributesResponse>>;
  /** Retrieves a Data Attribute resource. */
  getDataAttribute(
    request: GetDataAttributeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DataAttribute>>;
}

export interface DataTaxonomyServiceClient<CallOptionsExt = {}> {
  /** Create a DataTaxonomy resource. */
  createDataTaxonomy(
    request: DeepPartial<CreateDataTaxonomyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a DataTaxonomy resource. */
  updateDataTaxonomy(
    request: DeepPartial<UpdateDataTaxonomyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a DataTaxonomy resource. All attributes within the DataTaxonomy
   * must be deleted before the DataTaxonomy can be deleted.
   */
  deleteDataTaxonomy(
    request: DeepPartial<DeleteDataTaxonomyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists DataTaxonomy resources in a project and location. */
  listDataTaxonomies(
    request: DeepPartial<ListDataTaxonomiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataTaxonomiesResponse>;
  /** Retrieves a DataTaxonomy resource. */
  getDataTaxonomy(
    request: DeepPartial<GetDataTaxonomyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataTaxonomy>;
  /** Create a DataAttributeBinding resource. */
  createDataAttributeBinding(
    request: DeepPartial<CreateDataAttributeBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a DataAttributeBinding resource. */
  updateDataAttributeBinding(
    request: DeepPartial<UpdateDataAttributeBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /**
   * Deletes a DataAttributeBinding resource. All attributes within the
   * DataAttributeBinding must be deleted before the DataAttributeBinding can be
   * deleted.
   */
  deleteDataAttributeBinding(
    request: DeepPartial<DeleteDataAttributeBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists DataAttributeBinding resources in a project and location. */
  listDataAttributeBindings(
    request: DeepPartial<ListDataAttributeBindingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataAttributeBindingsResponse>;
  /** Retrieves a DataAttributeBinding resource. */
  getDataAttributeBinding(
    request: DeepPartial<GetDataAttributeBindingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataAttributeBinding>;
  /** Create a DataAttribute resource. */
  createDataAttribute(
    request: DeepPartial<CreateDataAttributeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates a DataAttribute resource. */
  updateDataAttribute(
    request: DeepPartial<UpdateDataAttributeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Deletes a Data Attribute resource. */
  deleteDataAttribute(
    request: DeepPartial<DeleteDataAttributeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Lists Data Attribute resources in a DataTaxonomy. */
  listDataAttributes(
    request: DeepPartial<ListDataAttributesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListDataAttributesResponse>;
  /** Retrieves a Data Attribute resource. */
  getDataAttribute(
    request: DeepPartial<GetDataAttributeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DataAttribute>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
