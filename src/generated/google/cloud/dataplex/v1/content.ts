// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataplex/v1/content.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  GetIamPolicyRequest,
  SetIamPolicyRequest,
  TestIamPermissionsRequest,
  TestIamPermissionsResponse,
} from "../../../iam/v1/iam_policy.js";
import { Policy } from "../../../iam/v1/policy.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Content } from "./analyze.js";

export const protobufPackage = "google.cloud.dataplex.v1";

/** Create content request. */
export interface CreateContentRequest {
  /**
   * Required. The resource name of the parent lake:
   * projects/{project_id}/locations/{location_id}/lakes/{lake_id}
   */
  parent: string;
  /** Required. Content resource. */
  content:
    | Content
    | undefined;
  /**
   * Optional. Only validate the request, but do not perform mutations.
   * The default is false.
   */
  validateOnly: boolean;
}

/** Update content request. */
export interface UpdateContentRequest {
  /** Required. Mask of fields to update. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. Update description.
   * Only fields specified in `update_mask` are updated.
   */
  content:
    | Content
    | undefined;
  /**
   * Optional. Only validate the request, but do not perform mutations.
   * The default is false.
   */
  validateOnly: boolean;
}

/** Delete content request. */
export interface DeleteContentRequest {
  /**
   * Required. The resource name of the content:
   * projects/{project_id}/locations/{location_id}/lakes/{lake_id}/content/{content_id}
   */
  name: string;
}

/** List content request. Returns the BASIC Content view. */
export interface ListContentRequest {
  /**
   * Required. The resource name of the parent lake:
   * projects/{project_id}/locations/{location_id}/lakes/{lake_id}
   */
  parent: string;
  /**
   * Optional. Maximum number of content to return. The service may return fewer
   * than this value. If unspecified, at most 10 content will be returned. The
   * maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Optional. Page token received from a previous `ListContent` call. Provide
   * this to retrieve the subsequent page. When paginating, all other parameters
   * provided to `ListContent` must match the call that provided the page
   * token.
   */
  pageToken: string;
  /**
   * Optional. Filter request. Filters are case-sensitive.
   * The following formats are supported:
   *
   * labels.key1 = "value1"
   * labels:key1
   * type = "NOTEBOOK"
   * type = "SQL_SCRIPT"
   *
   * These restrictions can be coinjoined with AND, OR and NOT conjunctions.
   */
  filter: string;
}

/** List content response. */
export interface ListContentResponse {
  /** Content under the given parent lake. */
  content: Content[];
  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   */
  nextPageToken: string;
}

/** Get content request. */
export interface GetContentRequest {
  /**
   * Required. The resource name of the content:
   * projects/{project_id}/locations/{location_id}/lakes/{lake_id}/content/{content_id}
   */
  name: string;
  /** Optional. Specify content view to make a partial request. */
  view: GetContentRequest_ContentView;
}

/**
 * Specifies whether the request should return the full or the partial
 * representation.
 */
export enum GetContentRequest_ContentView {
  /**
   * CONTENT_VIEW_UNSPECIFIED - Content view not specified. Defaults to BASIC.
   * The API will default to the BASIC view.
   */
  CONTENT_VIEW_UNSPECIFIED = 0,
  /** BASIC - Will not return the `data_text` field. */
  BASIC = 1,
  /** FULL - Returns the complete proto. */
  FULL = 2,
  UNRECOGNIZED = -1,
}

export function getContentRequest_ContentViewFromJSON(object: any): GetContentRequest_ContentView {
  switch (object) {
    case 0:
    case "CONTENT_VIEW_UNSPECIFIED":
      return GetContentRequest_ContentView.CONTENT_VIEW_UNSPECIFIED;
    case 1:
    case "BASIC":
      return GetContentRequest_ContentView.BASIC;
    case 2:
    case "FULL":
      return GetContentRequest_ContentView.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GetContentRequest_ContentView.UNRECOGNIZED;
  }
}

export function getContentRequest_ContentViewToJSON(object: GetContentRequest_ContentView): string {
  switch (object) {
    case GetContentRequest_ContentView.CONTENT_VIEW_UNSPECIFIED:
      return "CONTENT_VIEW_UNSPECIFIED";
    case GetContentRequest_ContentView.BASIC:
      return "BASIC";
    case GetContentRequest_ContentView.FULL:
      return "FULL";
    case GetContentRequest_ContentView.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCreateContentRequest(): CreateContentRequest {
  return { parent: "", content: undefined, validateOnly: false };
}

export const CreateContentRequest: MessageFns<CreateContentRequest> = {
  encode(message: CreateContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.content !== undefined) {
      Content.encode(message.content, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = Content.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateContentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      content: isSet(object.content) ? Content.fromJSON(object.content) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: CreateContentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.content !== undefined) {
      obj.content = Content.toJSON(message.content);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateContentRequest>): CreateContentRequest {
    return CreateContentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateContentRequest>): CreateContentRequest {
    const message = createBaseCreateContentRequest();
    message.parent = object.parent ?? "";
    message.content = (object.content !== undefined && object.content !== null)
      ? Content.fromPartial(object.content)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseUpdateContentRequest(): UpdateContentRequest {
  return { updateMask: undefined, content: undefined, validateOnly: false };
}

export const UpdateContentRequest: MessageFns<UpdateContentRequest> = {
  encode(message: UpdateContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(10).fork()).join();
    }
    if (message.content !== undefined) {
      Content.encode(message.content, writer.uint32(18).fork()).join();
    }
    if (message.validateOnly !== false) {
      writer.uint32(24).bool(message.validateOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = Content.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.validateOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateContentRequest {
    return {
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      content: isSet(object.content) ? Content.fromJSON(object.content) : undefined,
      validateOnly: isSet(object.validateOnly) ? globalThis.Boolean(object.validateOnly) : false,
    };
  },

  toJSON(message: UpdateContentRequest): unknown {
    const obj: any = {};
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.content !== undefined) {
      obj.content = Content.toJSON(message.content);
    }
    if (message.validateOnly !== false) {
      obj.validateOnly = message.validateOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateContentRequest>): UpdateContentRequest {
    return UpdateContentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateContentRequest>): UpdateContentRequest {
    const message = createBaseUpdateContentRequest();
    message.updateMask = object.updateMask ?? undefined;
    message.content = (object.content !== undefined && object.content !== null)
      ? Content.fromPartial(object.content)
      : undefined;
    message.validateOnly = object.validateOnly ?? false;
    return message;
  },
};

function createBaseDeleteContentRequest(): DeleteContentRequest {
  return { name: "" };
}

export const DeleteContentRequest: MessageFns<DeleteContentRequest> = {
  encode(message: DeleteContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteContentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteContentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteContentRequest>): DeleteContentRequest {
    return DeleteContentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteContentRequest>): DeleteContentRequest {
    const message = createBaseDeleteContentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListContentRequest(): ListContentRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "" };
}

export const ListContentRequest: MessageFns<ListContentRequest> = {
  encode(message: ListContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
    };
  },

  toJSON(message: ListContentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListContentRequest>): ListContentRequest {
    return ListContentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListContentRequest>): ListContentRequest {
    const message = createBaseListContentRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

function createBaseListContentResponse(): ListContentResponse {
  return { content: [], nextPageToken: "" };
}

export const ListContentResponse: MessageFns<ListContentResponse> = {
  encode(message: ListContentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.content) {
      Content.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListContentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.content.push(Content.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContentResponse {
    return {
      content: globalThis.Array.isArray(object?.content) ? object.content.map((e: any) => Content.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListContentResponse): unknown {
    const obj: any = {};
    if (message.content?.length) {
      obj.content = message.content.map((e) => Content.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListContentResponse>): ListContentResponse {
    return ListContentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListContentResponse>): ListContentResponse {
    const message = createBaseListContentResponse();
    message.content = object.content?.map((e) => Content.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetContentRequest(): GetContentRequest {
  return { name: "", view: 0 };
}

export const GetContentRequest: MessageFns<GetContentRequest> = {
  encode(message: GetContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.view !== 0) {
      writer.uint32(16).int32(message.view);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.view = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetContentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      view: isSet(object.view) ? getContentRequest_ContentViewFromJSON(object.view) : 0,
    };
  },

  toJSON(message: GetContentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.view !== 0) {
      obj.view = getContentRequest_ContentViewToJSON(message.view);
    }
    return obj;
  },

  create(base?: DeepPartial<GetContentRequest>): GetContentRequest {
    return GetContentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetContentRequest>): GetContentRequest {
    const message = createBaseGetContentRequest();
    message.name = object.name ?? "";
    message.view = object.view ?? 0;
    return message;
  },
};

/** ContentService manages Notebook and SQL Scripts for Dataplex. */
export type ContentServiceDefinition = typeof ContentServiceDefinition;
export const ContentServiceDefinition = {
  name: "ContentService",
  fullName: "google.cloud.dataplex.v1.ContentService",
  methods: {
    /** Create a content. */
    createContent: {
      name: "CreateContent",
      requestType: CreateContentRequest,
      requestStream: false,
      responseType: Content,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 99, 111, 110, 116, 101, 110, 116])],
          578365826: [
            Buffer.from([
              131,
              1,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              90,
              62,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              105,
              116,
              101,
              109,
              115,
            ]),
          ],
        },
      },
    },
    /** Update a content. Only supports full resource update. */
    updateContent: {
      name: "UpdateContent",
      requestType: UpdateContentRequest,
      requestStream: false,
      responseType: Content,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 99, 111, 110, 116, 101, 110, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
          ],
          578365826: [
            Buffer.from([
              149,
              1,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              90,
              71,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              50,
              60,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              42,
              42,
              125,
              50,
              65,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              105,
              116,
              101,
              109,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete a content. */
    deleteContent: {
      name: "DeleteContent",
      requestType: DeleteContentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              115,
              90,
              54,
              42,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              42,
              42,
              125,
              42,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              105,
              116,
              101,
              109,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Get a content resource. */
    getContent: {
      name: "GetContent",
      requestType: GetContentRequest,
      requestStream: false,
      responseType: Content,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              115,
              90,
              54,
              18,
              52,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              42,
              42,
              125,
              18,
              57,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              105,
              116,
              101,
              109,
              115,
              47,
              42,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Gets the access control policy for a contentitem resource. A `NOT_FOUND`
     * error is returned if the resource does not exist. An empty policy is
     * returned if the resource exists but does not have a policy set on it.
     *
     * Caller must have Google IAM `dataplex.content.getIamPolicy` permission
     * on the resource.
     */
    getIamPolicy: {
      name: "GetIamPolicy",
      requestType: GetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([8, 114, 101, 115, 111, 117, 114, 99, 101])],
          578365826: [
            Buffer.from([
              149,
              1,
              90,
              71,
              18,
              69,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              42,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              18,
              74,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              105,
              116,
              101,
              109,
              115,
              47,
              42,
              42,
              125,
              58,
              103,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Sets the access control policy on the specified contentitem resource.
     * Replaces any existing policy.
     *
     * Caller must have Google IAM `dataplex.content.setIamPolicy` permission
     * on the resource.
     */
    setIamPolicy: {
      name: "SetIamPolicy",
      requestType: SetIamPolicyRequest,
      requestStream: false,
      responseType: Policy,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              155,
              1,
              58,
              1,
              42,
              90,
              74,
              58,
              1,
              42,
              34,
              69,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              42,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
              34,
              74,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              105,
              116,
              101,
              109,
              115,
              47,
              42,
              42,
              125,
              58,
              115,
              101,
              116,
              73,
              97,
              109,
              80,
              111,
              108,
              105,
              99,
              121,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the caller's permissions on a resource.
     * If the resource does not exist, an empty set of
     * permissions is returned (a `NOT_FOUND` error is not returned).
     *
     * A caller is not required to have Google IAM permission to make this
     * request.
     *
     * Note: This operation is designed to be used for building permission-aware
     * UIs and command-line tools, not for authorization checking. This operation
     * may "fail open" without warning.
     */
    testIamPermissions: {
      name: "TestIamPermissions",
      requestType: TestIamPermissionsRequest,
      requestStream: false,
      responseType: TestIamPermissionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              167,
              1,
              58,
              1,
              42,
              90,
              80,
              58,
              1,
              42,
              34,
              75,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              47,
              42,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              34,
              80,
              47,
              118,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              105,
              116,
              101,
              109,
              115,
              47,
              42,
              42,
              125,
              58,
              116,
              101,
              115,
              116,
              73,
              97,
              109,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** List content. */
    listContent: {
      name: "ListContent",
      requestType: ListContentRequest,
      requestStream: false,
      responseType: ListContentResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              113,
              90,
              53,
              18,
              51,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              18,
              56,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              108,
              97,
              107,
              101,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              105,
              116,
              101,
              109,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ContentServiceImplementation<CallContextExt = {}> {
  /** Create a content. */
  createContent(request: CreateContentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Content>>;
  /** Update a content. Only supports full resource update. */
  updateContent(request: UpdateContentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Content>>;
  /** Delete a content. */
  deleteContent(request: DeleteContentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Get a content resource. */
  getContent(request: GetContentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Content>>;
  /**
   * Gets the access control policy for a contentitem resource. A `NOT_FOUND`
   * error is returned if the resource does not exist. An empty policy is
   * returned if the resource exists but does not have a policy set on it.
   *
   * Caller must have Google IAM `dataplex.content.getIamPolicy` permission
   * on the resource.
   */
  getIamPolicy(request: GetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Sets the access control policy on the specified contentitem resource.
   * Replaces any existing policy.
   *
   * Caller must have Google IAM `dataplex.content.setIamPolicy` permission
   * on the resource.
   */
  setIamPolicy(request: SetIamPolicyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Policy>>;
  /**
   * Returns the caller's permissions on a resource.
   * If the resource does not exist, an empty set of
   * permissions is returned (a `NOT_FOUND` error is not returned).
   *
   * A caller is not required to have Google IAM permission to make this
   * request.
   *
   * Note: This operation is designed to be used for building permission-aware
   * UIs and command-line tools, not for authorization checking. This operation
   * may "fail open" without warning.
   */
  testIamPermissions(
    request: TestIamPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TestIamPermissionsResponse>>;
  /** List content. */
  listContent(
    request: ListContentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListContentResponse>>;
}

export interface ContentServiceClient<CallOptionsExt = {}> {
  /** Create a content. */
  createContent(request: DeepPartial<CreateContentRequest>, options?: CallOptions & CallOptionsExt): Promise<Content>;
  /** Update a content. Only supports full resource update. */
  updateContent(request: DeepPartial<UpdateContentRequest>, options?: CallOptions & CallOptionsExt): Promise<Content>;
  /** Delete a content. */
  deleteContent(request: DeepPartial<DeleteContentRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Get a content resource. */
  getContent(request: DeepPartial<GetContentRequest>, options?: CallOptions & CallOptionsExt): Promise<Content>;
  /**
   * Gets the access control policy for a contentitem resource. A `NOT_FOUND`
   * error is returned if the resource does not exist. An empty policy is
   * returned if the resource exists but does not have a policy set on it.
   *
   * Caller must have Google IAM `dataplex.content.getIamPolicy` permission
   * on the resource.
   */
  getIamPolicy(request: DeepPartial<GetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Sets the access control policy on the specified contentitem resource.
   * Replaces any existing policy.
   *
   * Caller must have Google IAM `dataplex.content.setIamPolicy` permission
   * on the resource.
   */
  setIamPolicy(request: DeepPartial<SetIamPolicyRequest>, options?: CallOptions & CallOptionsExt): Promise<Policy>;
  /**
   * Returns the caller's permissions on a resource.
   * If the resource does not exist, an empty set of
   * permissions is returned (a `NOT_FOUND` error is not returned).
   *
   * A caller is not required to have Google IAM permission to make this
   * request.
   *
   * Note: This operation is designed to be used for building permission-aware
   * UIs and command-line tools, not for authorization checking. This operation
   * may "fail open" without warning.
   */
  testIamPermissions(
    request: DeepPartial<TestIamPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TestIamPermissionsResponse>;
  /** List content. */
  listContent(
    request: DeepPartial<ListContentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListContentResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
