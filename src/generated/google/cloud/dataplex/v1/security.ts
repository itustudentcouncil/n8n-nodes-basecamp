// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dataplex/v1/security.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.dataplex.v1";

/**
 * ResourceAccessSpec holds the access control configuration to be enforced
 * on the resources, for example, Cloud Storage bucket, BigQuery dataset,
 * BigQuery table.
 */
export interface ResourceAccessSpec {
  /**
   * Optional. The format of strings follows the pattern followed by IAM in the
   * bindings. user:{email}, serviceAccount:{email} group:{email}.
   * The set of principals to be granted reader role on the resource.
   */
  readers: string[];
  /** Optional. The set of principals to be granted writer role on the resource. */
  writers: string[];
  /** Optional. The set of principals to be granted owner role on the resource. */
  owners: string[];
}

/**
 * DataAccessSpec holds the access control configuration to be enforced on data
 * stored within resources (eg: rows, columns in BigQuery Tables). When
 * associated with data, the data is only accessible to
 * principals explicitly granted access through the DataAccessSpec. Principals
 * with access to the containing resource are not implicitly granted access.
 */
export interface DataAccessSpec {
  /**
   * Optional. The format of strings follows the pattern followed by IAM in the
   * bindings. user:{email}, serviceAccount:{email} group:{email}.
   * The set of principals to be granted reader role on data
   * stored within resources.
   */
  readers: string[];
}

function createBaseResourceAccessSpec(): ResourceAccessSpec {
  return { readers: [], writers: [], owners: [] };
}

export const ResourceAccessSpec: MessageFns<ResourceAccessSpec> = {
  encode(message: ResourceAccessSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.readers) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.writers) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.owners) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceAccessSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceAccessSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.readers.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.writers.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.owners.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceAccessSpec {
    return {
      readers: globalThis.Array.isArray(object?.readers) ? object.readers.map((e: any) => globalThis.String(e)) : [],
      writers: globalThis.Array.isArray(object?.writers) ? object.writers.map((e: any) => globalThis.String(e)) : [],
      owners: globalThis.Array.isArray(object?.owners) ? object.owners.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ResourceAccessSpec): unknown {
    const obj: any = {};
    if (message.readers?.length) {
      obj.readers = message.readers;
    }
    if (message.writers?.length) {
      obj.writers = message.writers;
    }
    if (message.owners?.length) {
      obj.owners = message.owners;
    }
    return obj;
  },

  create(base?: DeepPartial<ResourceAccessSpec>): ResourceAccessSpec {
    return ResourceAccessSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourceAccessSpec>): ResourceAccessSpec {
    const message = createBaseResourceAccessSpec();
    message.readers = object.readers?.map((e) => e) || [];
    message.writers = object.writers?.map((e) => e) || [];
    message.owners = object.owners?.map((e) => e) || [];
    return message;
  },
};

function createBaseDataAccessSpec(): DataAccessSpec {
  return { readers: [] };
}

export const DataAccessSpec: MessageFns<DataAccessSpec> = {
  encode(message: DataAccessSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.readers) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataAccessSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataAccessSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.readers.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataAccessSpec {
    return {
      readers: globalThis.Array.isArray(object?.readers) ? object.readers.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: DataAccessSpec): unknown {
    const obj: any = {};
    if (message.readers?.length) {
      obj.readers = message.readers;
    }
    return obj;
  },

  create(base?: DeepPartial<DataAccessSpec>): DataAccessSpec {
    return DataAccessSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataAccessSpec>): DataAccessSpec {
    const message = createBaseDataAccessSpec();
    message.readers = object.readers?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
