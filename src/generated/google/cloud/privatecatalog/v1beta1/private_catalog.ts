// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/privatecatalog/v1beta1/private_catalog.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Struct } from "../../../protobuf/struct.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.privatecatalog.v1beta1";

/** Request message for [PrivateCatalog.SearchCatalogs][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchCatalogs]. */
export interface SearchCatalogsRequest {
  /**
   * Required. The name of the resource context. It can be in following formats:
   *
   * * `projects/{project}`
   * * `folders/{folder}`
   * * `organizations/{organization}`
   */
  resource: string;
  /**
   * The query to filter the catalogs. The supported queries are:
   *
   * * Get a single catalog: `name=catalogs/{catalog}`
   */
  query: string;
  /** The maximum number of entries that are requested. */
  pageSize: number;
  /**
   * A pagination token returned from a previous call to SearchCatalogs that
   * indicates where this listing should continue from.
   */
  pageToken: string;
}

/** Response message for [PrivateCatalog.SearchCatalogs][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchCatalogs]. */
export interface SearchCatalogsResponse {
  /** The `Catalog`s computed from the resource context. */
  catalogs: Catalog[];
  /**
   * A pagination token returned from a previous call to SearchCatalogs that
   * indicates from where listing should continue.
   */
  nextPageToken: string;
}

/** Request message for [PrivateCatalog.SearchProducts][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchProducts]. */
export interface SearchProductsRequest {
  /**
   * Required. The name of the resource context. See [SearchCatalogsRequest.resource][google.cloud.privatecatalog.v1beta1.SearchCatalogsRequest.resource]
   * for details.
   */
  resource: string;
  /**
   * The query to filter the products.
   *
   * The supported queries are:
   * * List products of all catalogs: empty
   * * List products under a catalog: `parent=catalogs/{catalog}`
   * * Get a product by name:
   * `name=catalogs/{catalog}/products/{product}`
   */
  query: string;
  /** The maximum number of entries that are requested. */
  pageSize: number;
  /**
   * A pagination token returned from a previous call to SearchProducts that
   * indicates where this listing should continue from.
   */
  pageToken: string;
}

/** Response message for [PrivateCatalog.SearchProducts][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchProducts]. */
export interface SearchProductsResponse {
  /** The `Product` resources computed from the resource context. */
  products: Product[];
  /**
   * A pagination token returned from a previous call to SearchProducts that
   * indicates from where listing should continue.
   */
  nextPageToken: string;
}

/** Request message for [PrivateCatalog.SearchVersions][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchVersions]. */
export interface SearchVersionsRequest {
  /**
   * Required. The name of the resource context. See [SearchCatalogsRequest.resource][google.cloud.privatecatalog.v1beta1.SearchCatalogsRequest.resource]
   * for details.
   */
  resource: string;
  /**
   * Required. The query to filter the versions.
   *
   * The supported queries are:
   * * List versions under a product:
   * `parent=catalogs/{catalog}/products/{product}`
   * * Get a version by name:
   * `name=catalogs/{catalog}/products/{product}/versions/{version}`
   */
  query: string;
  /** The maximum number of entries that are requested. */
  pageSize: number;
  /**
   * A pagination token returned from a previous call to SearchVersions
   * that indicates where this listing should continue from.
   */
  pageToken: string;
}

/** Response message for [PrivateCatalog.SearchVersions][google.cloud.privatecatalog.v1beta1.PrivateCatalog.SearchVersions]. */
export interface SearchVersionsResponse {
  /** The `Version` resources computed from the resource context. */
  versions: Version[];
  /**
   * A pagination token returned from a previous call to SearchVersions that
   * indicates from where the listing should continue.
   */
  nextPageToken: string;
}

/**
 * The readonly representation of a catalog computed with a given resource
 * context.
 */
export interface Catalog {
  /**
   * Output only. The resource name of the target catalog, in the format of
   * `catalogs/{catalog}'.
   */
  name: string;
  /** Output only. The descriptive name of the catalog as it appears in UIs. */
  displayName: string;
  /** Output only. The description of the catalog. */
  description: string;
  /** Output only. The time when the catalog was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the catalog was last updated. */
  updateTime: Date | undefined;
}

/**
 * The readonly representation of a product computed with a given resource
 * context.
 */
export interface Product {
  /**
   * Output only. The resource name of the target product, in the format of
   * `products/[a-z][-a-z0-9]*[a-z0-9]'.
   *
   * A unique identifier for the product under a catalog.
   */
  name: string;
  /**
   * Output only. The type of the product asset. It can be one of the following values:
   *
   * * `google.deploymentmanager.Template`
   * * `google.cloudprivatecatalog.ListingOnly`
   * * `google.cloudprivatecatalog.Terraform`
   */
  assetType: string;
  /**
   * Required. Output only. The display metadata to describe the product. The JSON schema of the
   * metadata differs by [Product.asset_type][google.cloud.privatecatalog.v1beta1.Product.asset_type].
   * When the type is `google.deploymentmanager.Template`, the schema is as
   * follows:
   *
   * ```
   * "$schema": http://json-schema.org/draft-04/schema#
   * type: object
   * properties:
   *   name:
   *     type: string
   *     minLength: 1
   *     maxLength: 64
   *   description:
   *     type: string
   *     minLength: 1
   *     maxLength: 2048
   *   tagline:
   *     type: string
   *     minLength: 1
   *     maxLength: 100
   *   support_info:
   *     type: string
   *     minLength: 1
   *     maxLength: 2048
   *   creator:
   *     type: string
   *     minLength: 1
   *     maxLength: 100
   *   documentations:
   *     type: array
   *     items:
   *       type: object
   *       properties:
   *         url:
   *           type: string
   *           pattern:
   *           "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
   *         title:
   *           type: string
   *           minLength: 1
   *           maxLength: 64
   *         description:
   *           type: string
   *           minLength: 1
   *           maxLength: 2048
   * required:
   * - name
   * - description
   * additionalProperties: false
   *
   * ```
   *
   * When the asset type is `google.cloudprivatecatalog.ListingOnly`, the schema
   * is as follows:
   *
   * ```
   * "$schema": http://json-schema.org/draft-04/schema#
   * type: object
   * properties:
   *   name:
   *     type: string
   *     minLength: 1
   *     maxLength: 64
   *   description:
   *     type: string
   *     minLength: 1
   *     maxLength: 2048
   *   tagline:
   *     type: string
   *     minLength: 1
   *     maxLength: 100
   *   support_info:
   *     type: string
   *     minLength: 1
   *     maxLength: 2048
   *   creator:
   *     type: string
   *     minLength: 1
   *     maxLength: 100
   *   documentations:
   *     type: array
   *     items:
   *       type: object
   *       properties:
   *         url:
   *           type: string
   *           pattern:
   *           "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
   *         title:
   *           type: string
   *           minLength: 1
   *           maxLength: 64
   *         description:
   *           type: string
   *           minLength: 1
   *           maxLength: 2048
   *   signup_url:
   *     type: string
   *     pattern:
   *     "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
   * required:
   * - name
   * - description
   * - signup_url
   * additionalProperties: false
   *
   * ```
   *
   * When the asset type is `google.cloudprivatecatalog.Terraform`, the schema
   * is as follows:
   *
   * ```
   * "$schema": http://json-schema.org/draft-04/schema#
   * type: object
   * properties:
   *   name:
   *     type: string
   *     minLength: 1
   *     maxLength: 64
   *   description:
   *     type: string
   *     minLength: 1
   *     maxLength: 2048
   *   tagline:
   *     type: string
   *     minLength: 1
   *     maxLength: 100
   *   support_info:
   *     type: string
   *     minLength: 1
   *     maxLength: 2048
   *   creator:
   *     type: string
   *     minLength: 1
   *     maxLength: 100
   *   documentations:
   *     type: array
   *     items:
   *       type: object
   *       properties:
   *         url:
   *           type: string
   *           pattern:
   *           "^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]"
   *         title:
   *           type: string
   *           minLength: 1
   *           maxLength: 64
   *         description:
   *           type: string
   *           minLength: 1
   *           maxLength: 2048
   * required:
   * - name
   * - description
   * additionalProperties: true
   */
  displayMetadata:
    | { [key: string]: any }
    | undefined;
  /** Output only. The icon URI of the product. */
  iconUri: string;
  /**
   * Output only. A collection of assets referred by a product.
   * This field is set for Terraform Products only.
   */
  assetReferences: AssetReference[];
  /** Output only. The time when the product was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the product was last updated. */
  updateTime: Date | undefined;
}

/** Defines the reference of an asset belonging to a product. */
export interface AssetReference {
  /** Output only. A unique identifier among asset references in a product. */
  id: string;
  /**
   * Output only. The human-readable description of the referenced asset. Maximum 256
   * characters in length.
   */
  description: string;
  /** Output only. The definition of input parameters to hydrate the asset template. */
  inputs:
    | Inputs
    | undefined;
  /** Output only. The current state of the asset reference. */
  validationStatus: AssetReference_AssetValidationState;
  /** Output only. The validation process metadata. */
  validationOperation:
    | Operation
    | undefined;
  /** Output only. The asset resource name if an asset is hosted by Private Catalog. */
  asset?:
    | string
    | undefined;
  /**
   * Output only. The cloud storage object path.
   *
   * @deprecated
   */
  gcsPath?:
    | string
    | undefined;
  /** Output only. The git source. */
  gitSource?:
    | GitSource
    | undefined;
  /** Output only. The cloud storage source. */
  gcsSource:
    | GcsSource
    | undefined;
  /** Output only. The creation timestamp of the asset reference. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last update timestamp of the asset reference. */
  updateTime:
    | Date
    | undefined;
  /**
   * The version of the source used for this asset reference.
   *
   * @deprecated
   */
  version: string;
}

/** Possible validation steates of an asset reference. */
export enum AssetReference_AssetValidationState {
  /** ASSET_VALIDATION_STATE_UNSPECIFIED - Unknown state. */
  ASSET_VALIDATION_STATE_UNSPECIFIED = 0,
  /** PENDING - The validation is still in process. */
  PENDING = 1,
  /** VALID - The validation is done and the asset reference is valid. */
  VALID = 2,
  /** INVALID - The validation is done and the asset reference is invalid. */
  INVALID = 3,
  UNRECOGNIZED = -1,
}

export function assetReference_AssetValidationStateFromJSON(object: any): AssetReference_AssetValidationState {
  switch (object) {
    case 0:
    case "ASSET_VALIDATION_STATE_UNSPECIFIED":
      return AssetReference_AssetValidationState.ASSET_VALIDATION_STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return AssetReference_AssetValidationState.PENDING;
    case 2:
    case "VALID":
      return AssetReference_AssetValidationState.VALID;
    case 3:
    case "INVALID":
      return AssetReference_AssetValidationState.INVALID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AssetReference_AssetValidationState.UNRECOGNIZED;
  }
}

export function assetReference_AssetValidationStateToJSON(object: AssetReference_AssetValidationState): string {
  switch (object) {
    case AssetReference_AssetValidationState.ASSET_VALIDATION_STATE_UNSPECIFIED:
      return "ASSET_VALIDATION_STATE_UNSPECIFIED";
    case AssetReference_AssetValidationState.PENDING:
      return "PENDING";
    case AssetReference_AssetValidationState.VALID:
      return "VALID";
    case AssetReference_AssetValidationState.INVALID:
      return "INVALID";
    case AssetReference_AssetValidationState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Defines definition of input parameters of asset templates. */
export interface Inputs {
  /** Output only. The JSON schema defining the inputs and their formats. */
  parameters: { [key: string]: any } | undefined;
}

/** Defines how to access Cloud Storage source. */
export interface GcsSource {
  /** Output only. the cloud storage object path. */
  gcsPath: string;
  /**
   * Output only. Generation of the object, which is set when the content of an object starts
   * being written.
   */
  generation: Long;
  /** Output only. The time when the object metadata was last changed. */
  updateTime: Date | undefined;
}

/** Defines how to access a Git Source. */
export interface GitSource {
  /** Location of the Git repo to build. */
  repo: string;
  /**
   * Directory, relative to the source root, in which to run the build.
   *
   * This must be a relative path. If a step's `dir` is specified and is an
   * absolute path, this value is ignored for that step's execution.
   */
  dir: string;
  /** The revision commit to use. */
  commit?:
    | string
    | undefined;
  /** The revision branch to use. */
  branch?:
    | string
    | undefined;
  /** The revision tag to use. */
  tag?: string | undefined;
}

/**
 * The consumer representation of a version which is a child resource under a
 * `Product` with asset data.
 */
export interface Version {
  /**
   * Output only. The resource name of the version, in the format
   * `catalogs/{catalog}/products/{product}/versions/[a-z][-a-z0-9]*[a-z0-9]'.
   *
   * A unique identifier for the version under a product.
   */
  name: string;
  /**
   * Output only. The user-supplied description of the version. Maximum of 256
   * characters.
   */
  description: string;
  /**
   * Output only. The asset which has been validated and is ready to be
   * provisioned. See
   * [google.cloud.privatecatalogproducer.v1beta.Version.asset][] for details.
   */
  asset:
    | { [key: string]: any }
    | undefined;
  /** Output only. The time when the version was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time when the version was last updated. */
  updateTime: Date | undefined;
}

function createBaseSearchCatalogsRequest(): SearchCatalogsRequest {
  return { resource: "", query: "", pageSize: 0, pageToken: "" };
}

export const SearchCatalogsRequest: MessageFns<SearchCatalogsRequest> = {
  encode(message: SearchCatalogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resource !== "") {
      writer.uint32(10).string(message.resource);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCatalogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCatalogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCatalogsRequest {
    return {
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchCatalogsRequest): unknown {
    const obj: any = {};
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchCatalogsRequest>): SearchCatalogsRequest {
    return SearchCatalogsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchCatalogsRequest>): SearchCatalogsRequest {
    const message = createBaseSearchCatalogsRequest();
    message.resource = object.resource ?? "";
    message.query = object.query ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchCatalogsResponse(): SearchCatalogsResponse {
  return { catalogs: [], nextPageToken: "" };
}

export const SearchCatalogsResponse: MessageFns<SearchCatalogsResponse> = {
  encode(message: SearchCatalogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.catalogs) {
      Catalog.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCatalogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCatalogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.catalogs.push(Catalog.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCatalogsResponse {
    return {
      catalogs: globalThis.Array.isArray(object?.catalogs) ? object.catalogs.map((e: any) => Catalog.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchCatalogsResponse): unknown {
    const obj: any = {};
    if (message.catalogs?.length) {
      obj.catalogs = message.catalogs.map((e) => Catalog.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchCatalogsResponse>): SearchCatalogsResponse {
    return SearchCatalogsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchCatalogsResponse>): SearchCatalogsResponse {
    const message = createBaseSearchCatalogsResponse();
    message.catalogs = object.catalogs?.map((e) => Catalog.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchProductsRequest(): SearchProductsRequest {
  return { resource: "", query: "", pageSize: 0, pageToken: "" };
}

export const SearchProductsRequest: MessageFns<SearchProductsRequest> = {
  encode(message: SearchProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resource !== "") {
      writer.uint32(10).string(message.resource);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchProductsRequest {
    return {
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchProductsRequest): unknown {
    const obj: any = {};
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchProductsRequest>): SearchProductsRequest {
    return SearchProductsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchProductsRequest>): SearchProductsRequest {
    const message = createBaseSearchProductsRequest();
    message.resource = object.resource ?? "";
    message.query = object.query ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchProductsResponse(): SearchProductsResponse {
  return { products: [], nextPageToken: "" };
}

export const SearchProductsResponse: MessageFns<SearchProductsResponse> = {
  encode(message: SearchProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchProductsResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchProductsResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchProductsResponse>): SearchProductsResponse {
    return SearchProductsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchProductsResponse>): SearchProductsResponse {
    const message = createBaseSearchProductsResponse();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSearchVersionsRequest(): SearchVersionsRequest {
  return { resource: "", query: "", pageSize: 0, pageToken: "" };
}

export const SearchVersionsRequest: MessageFns<SearchVersionsRequest> = {
  encode(message: SearchVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resource !== "") {
      writer.uint32(10).string(message.resource);
    }
    if (message.query !== "") {
      writer.uint32(18).string(message.query);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchVersionsRequest {
    return {
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchVersionsRequest): unknown {
    const obj: any = {};
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchVersionsRequest>): SearchVersionsRequest {
    return SearchVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchVersionsRequest>): SearchVersionsRequest {
    const message = createBaseSearchVersionsRequest();
    message.resource = object.resource ?? "";
    message.query = object.query ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchVersionsResponse(): SearchVersionsResponse {
  return { versions: [], nextPageToken: "" };
}

export const SearchVersionsResponse: MessageFns<SearchVersionsResponse> = {
  encode(message: SearchVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.versions) {
      Version.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.versions.push(Version.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchVersionsResponse {
    return {
      versions: globalThis.Array.isArray(object?.versions) ? object.versions.map((e: any) => Version.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchVersionsResponse): unknown {
    const obj: any = {};
    if (message.versions?.length) {
      obj.versions = message.versions.map((e) => Version.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchVersionsResponse>): SearchVersionsResponse {
    return SearchVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchVersionsResponse>): SearchVersionsResponse {
    const message = createBaseSearchVersionsResponse();
    message.versions = object.versions?.map((e) => Version.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCatalog(): Catalog {
  return { name: "", displayName: "", description: "", createTime: undefined, updateTime: undefined };
}

export const Catalog: MessageFns<Catalog> = {
  encode(message: Catalog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Catalog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCatalog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Catalog {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: Catalog): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Catalog>): Catalog {
    return Catalog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Catalog>): Catalog {
    const message = createBaseCatalog();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseProduct(): Product {
  return {
    name: "",
    assetType: "",
    displayMetadata: undefined,
    iconUri: "",
    assetReferences: [],
    createTime: undefined,
    updateTime: undefined,
  };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.assetType !== "") {
      writer.uint32(18).string(message.assetType);
    }
    if (message.displayMetadata !== undefined) {
      Struct.encode(Struct.wrap(message.displayMetadata), writer.uint32(26).fork()).join();
    }
    if (message.iconUri !== "") {
      writer.uint32(34).string(message.iconUri);
    }
    for (const v of message.assetReferences) {
      AssetReference.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.assetType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayMetadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.iconUri = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.assetReferences.push(AssetReference.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      assetType: isSet(object.assetType) ? globalThis.String(object.assetType) : "",
      displayMetadata: isObject(object.displayMetadata) ? object.displayMetadata : undefined,
      iconUri: isSet(object.iconUri) ? globalThis.String(object.iconUri) : "",
      assetReferences: globalThis.Array.isArray(object?.assetReferences)
        ? object.assetReferences.map((e: any) => AssetReference.fromJSON(e))
        : [],
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.assetType !== "") {
      obj.assetType = message.assetType;
    }
    if (message.displayMetadata !== undefined) {
      obj.displayMetadata = message.displayMetadata;
    }
    if (message.iconUri !== "") {
      obj.iconUri = message.iconUri;
    }
    if (message.assetReferences?.length) {
      obj.assetReferences = message.assetReferences.map((e) => AssetReference.toJSON(e));
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Product>): Product {
    return Product.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Product>): Product {
    const message = createBaseProduct();
    message.name = object.name ?? "";
    message.assetType = object.assetType ?? "";
    message.displayMetadata = object.displayMetadata ?? undefined;
    message.iconUri = object.iconUri ?? "";
    message.assetReferences = object.assetReferences?.map((e) => AssetReference.fromPartial(e)) || [];
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseAssetReference(): AssetReference {
  return {
    id: "",
    description: "",
    inputs: undefined,
    validationStatus: 0,
    validationOperation: undefined,
    asset: undefined,
    gcsPath: undefined,
    gitSource: undefined,
    gcsSource: undefined,
    createTime: undefined,
    updateTime: undefined,
    version: "",
  };
}

export const AssetReference: MessageFns<AssetReference> = {
  encode(message: AssetReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.inputs !== undefined) {
      Inputs.encode(message.inputs, writer.uint32(50).fork()).join();
    }
    if (message.validationStatus !== 0) {
      writer.uint32(56).int32(message.validationStatus);
    }
    if (message.validationOperation !== undefined) {
      Operation.encode(message.validationOperation, writer.uint32(66).fork()).join();
    }
    if (message.asset !== undefined) {
      writer.uint32(82).string(message.asset);
    }
    if (message.gcsPath !== undefined) {
      writer.uint32(90).string(message.gcsPath);
    }
    if (message.gitSource !== undefined) {
      GitSource.encode(message.gitSource, writer.uint32(122).fork()).join();
    }
    if (message.gcsSource !== undefined) {
      GcsSource.encode(message.gcsSource, writer.uint32(130).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(98).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(106).fork()).join();
    }
    if (message.version !== "") {
      writer.uint32(114).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssetReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssetReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.inputs = Inputs.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.validationStatus = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.validationOperation = Operation.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.gcsPath = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.gitSource = GitSource.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.gcsSource = GcsSource.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssetReference {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      inputs: isSet(object.inputs) ? Inputs.fromJSON(object.inputs) : undefined,
      validationStatus: isSet(object.validationStatus)
        ? assetReference_AssetValidationStateFromJSON(object.validationStatus)
        : 0,
      validationOperation: isSet(object.validationOperation)
        ? Operation.fromJSON(object.validationOperation)
        : undefined,
      asset: isSet(object.asset) ? globalThis.String(object.asset) : undefined,
      gcsPath: isSet(object.gcsPath) ? globalThis.String(object.gcsPath) : undefined,
      gitSource: isSet(object.gitSource) ? GitSource.fromJSON(object.gitSource) : undefined,
      gcsSource: isSet(object.gcsSource) ? GcsSource.fromJSON(object.gcsSource) : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: AssetReference): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.inputs !== undefined) {
      obj.inputs = Inputs.toJSON(message.inputs);
    }
    if (message.validationStatus !== 0) {
      obj.validationStatus = assetReference_AssetValidationStateToJSON(message.validationStatus);
    }
    if (message.validationOperation !== undefined) {
      obj.validationOperation = Operation.toJSON(message.validationOperation);
    }
    if (message.asset !== undefined) {
      obj.asset = message.asset;
    }
    if (message.gcsPath !== undefined) {
      obj.gcsPath = message.gcsPath;
    }
    if (message.gitSource !== undefined) {
      obj.gitSource = GitSource.toJSON(message.gitSource);
    }
    if (message.gcsSource !== undefined) {
      obj.gcsSource = GcsSource.toJSON(message.gcsSource);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<AssetReference>): AssetReference {
    return AssetReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AssetReference>): AssetReference {
    const message = createBaseAssetReference();
    message.id = object.id ?? "";
    message.description = object.description ?? "";
    message.inputs = (object.inputs !== undefined && object.inputs !== null)
      ? Inputs.fromPartial(object.inputs)
      : undefined;
    message.validationStatus = object.validationStatus ?? 0;
    message.validationOperation = (object.validationOperation !== undefined && object.validationOperation !== null)
      ? Operation.fromPartial(object.validationOperation)
      : undefined;
    message.asset = object.asset ?? undefined;
    message.gcsPath = object.gcsPath ?? undefined;
    message.gitSource = (object.gitSource !== undefined && object.gitSource !== null)
      ? GitSource.fromPartial(object.gitSource)
      : undefined;
    message.gcsSource = (object.gcsSource !== undefined && object.gcsSource !== null)
      ? GcsSource.fromPartial(object.gcsSource)
      : undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseInputs(): Inputs {
  return { parameters: undefined };
}

export const Inputs: MessageFns<Inputs> = {
  encode(message: Inputs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parameters !== undefined) {
      Struct.encode(Struct.wrap(message.parameters), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inputs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInputs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inputs {
    return { parameters: isObject(object.parameters) ? object.parameters : undefined };
  },

  toJSON(message: Inputs): unknown {
    const obj: any = {};
    if (message.parameters !== undefined) {
      obj.parameters = message.parameters;
    }
    return obj;
  },

  create(base?: DeepPartial<Inputs>): Inputs {
    return Inputs.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Inputs>): Inputs {
    const message = createBaseInputs();
    message.parameters = object.parameters ?? undefined;
    return message;
  },
};

function createBaseGcsSource(): GcsSource {
  return { gcsPath: "", generation: Long.ZERO, updateTime: undefined };
}

export const GcsSource: MessageFns<GcsSource> = {
  encode(message: GcsSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gcsPath !== "") {
      writer.uint32(10).string(message.gcsPath);
    }
    if (!message.generation.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.generation.toString());
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GcsSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGcsSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gcsPath = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.generation = Long.fromString(reader.int64().toString());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GcsSource {
    return {
      gcsPath: isSet(object.gcsPath) ? globalThis.String(object.gcsPath) : "",
      generation: isSet(object.generation) ? Long.fromValue(object.generation) : Long.ZERO,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: GcsSource): unknown {
    const obj: any = {};
    if (message.gcsPath !== "") {
      obj.gcsPath = message.gcsPath;
    }
    if (!message.generation.equals(Long.ZERO)) {
      obj.generation = (message.generation || Long.ZERO).toString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<GcsSource>): GcsSource {
    return GcsSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GcsSource>): GcsSource {
    const message = createBaseGcsSource();
    message.gcsPath = object.gcsPath ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? Long.fromValue(object.generation)
      : Long.ZERO;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseGitSource(): GitSource {
  return { repo: "", dir: "", commit: undefined, branch: undefined, tag: undefined };
}

export const GitSource: MessageFns<GitSource> = {
  encode(message: GitSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.repo !== "") {
      writer.uint32(10).string(message.repo);
    }
    if (message.dir !== "") {
      writer.uint32(18).string(message.dir);
    }
    if (message.commit !== undefined) {
      writer.uint32(26).string(message.commit);
    }
    if (message.branch !== undefined) {
      writer.uint32(34).string(message.branch);
    }
    if (message.tag !== undefined) {
      writer.uint32(42).string(message.tag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GitSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGitSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.repo = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dir = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commit = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.branch = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GitSource {
    return {
      repo: isSet(object.repo) ? globalThis.String(object.repo) : "",
      dir: isSet(object.dir) ? globalThis.String(object.dir) : "",
      commit: isSet(object.commit) ? globalThis.String(object.commit) : undefined,
      branch: isSet(object.branch) ? globalThis.String(object.branch) : undefined,
      tag: isSet(object.tag) ? globalThis.String(object.tag) : undefined,
    };
  },

  toJSON(message: GitSource): unknown {
    const obj: any = {};
    if (message.repo !== "") {
      obj.repo = message.repo;
    }
    if (message.dir !== "") {
      obj.dir = message.dir;
    }
    if (message.commit !== undefined) {
      obj.commit = message.commit;
    }
    if (message.branch !== undefined) {
      obj.branch = message.branch;
    }
    if (message.tag !== undefined) {
      obj.tag = message.tag;
    }
    return obj;
  },

  create(base?: DeepPartial<GitSource>): GitSource {
    return GitSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GitSource>): GitSource {
    const message = createBaseGitSource();
    message.repo = object.repo ?? "";
    message.dir = object.dir ?? "";
    message.commit = object.commit ?? undefined;
    message.branch = object.branch ?? undefined;
    message.tag = object.tag ?? undefined;
    return message;
  },
};

function createBaseVersion(): Version {
  return { name: "", description: "", asset: undefined, createTime: undefined, updateTime: undefined };
}

export const Version: MessageFns<Version> = {
  encode(message: Version, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.asset !== undefined) {
      Struct.encode(Struct.wrap(message.asset), writer.uint32(26).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Version {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.asset = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Version {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      asset: isObject(object.asset) ? object.asset : undefined,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: Version): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.asset !== undefined) {
      obj.asset = message.asset;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Version>): Version {
    return Version.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Version>): Version {
    const message = createBaseVersion();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.asset = object.asset ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

/**
 * `PrivateCatalog` allows catalog consumers to retrieve `Catalog`, `Product`
 * and `Version` resources under a target resource context.
 *
 * `Catalog` is computed based on the [Association][]s linked to the target
 * resource and its ancestors. Each association's
 * [google.cloud.privatecatalogproducer.v1beta.Catalog][] is transformed into a
 * `Catalog`. If multiple associations have the same parent
 * [google.cloud.privatecatalogproducer.v1beta.Catalog][], they are
 * de-duplicated into one `Catalog`. Users must have
 * `cloudprivatecatalog.catalogTargets.get` IAM permission on the resource
 * context in order to access catalogs. `Catalog` contains the resource name and
 * a subset of data of the original
 * [google.cloud.privatecatalogproducer.v1beta.Catalog][].
 *
 * `Product` is child resource of the catalog. A `Product` contains the resource
 * name and a subset of the data of the original
 * [google.cloud.privatecatalogproducer.v1beta.Product][].
 *
 * `Version` is child resource of the product. A `Version` contains the resource
 * name and a subset of the data of the original
 * [google.cloud.privatecatalogproducer.v1beta.Version][].
 */
export type PrivateCatalogDefinition = typeof PrivateCatalogDefinition;
export const PrivateCatalogDefinition = {
  name: "PrivateCatalog",
  fullName: "google.cloud.privatecatalog.v1beta1.PrivateCatalog",
  methods: {
    /**
     * Search [Catalog][google.cloud.privatecatalog.v1beta1.Catalog] resources that consumers have access to, within the
     * scope of the consumer cloud resource hierarchy context.
     */
    searchCatalogs: {
      name: "SearchCatalogs",
      requestType: SearchCatalogsRequest,
      requestStream: false,
      responseType: SearchCatalogsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              152,
              1,
              90,
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              90,
              47,
              18,
              45,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              18,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Search [Product][google.cloud.privatecatalog.v1beta1.Product] resources that consumers have access to, within the
     * scope of the consumer cloud resource hierarchy context.
     */
    searchProducts: {
      name: "SearchProducts",
      requestType: SearchProductsRequest,
      requestStream: false,
      responseType: SearchProductsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              152,
              1,
              90,
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              90,
              47,
              18,
              45,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              18,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Search [Version][google.cloud.privatecatalog.v1beta1.Version] resources that consumers have access to, within the
     * scope of the consumer cloud resource hierarchy context.
     */
    searchVersions: {
      name: "SearchVersions",
      requestType: SearchVersionsRequest,
      requestStream: false,
      responseType: SearchVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              152,
              1,
              90,
              53,
              18,
              51,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              90,
              47,
              18,
              45,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              102,
              111,
              108,
              100,
              101,
              114,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              18,
              46,
              47,
              118,
              49,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface PrivateCatalogServiceImplementation<CallContextExt = {}> {
  /**
   * Search [Catalog][google.cloud.privatecatalog.v1beta1.Catalog] resources that consumers have access to, within the
   * scope of the consumer cloud resource hierarchy context.
   */
  searchCatalogs(
    request: SearchCatalogsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchCatalogsResponse>>;
  /**
   * Search [Product][google.cloud.privatecatalog.v1beta1.Product] resources that consumers have access to, within the
   * scope of the consumer cloud resource hierarchy context.
   */
  searchProducts(
    request: SearchProductsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchProductsResponse>>;
  /**
   * Search [Version][google.cloud.privatecatalog.v1beta1.Version] resources that consumers have access to, within the
   * scope of the consumer cloud resource hierarchy context.
   */
  searchVersions(
    request: SearchVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchVersionsResponse>>;
}

export interface PrivateCatalogClient<CallOptionsExt = {}> {
  /**
   * Search [Catalog][google.cloud.privatecatalog.v1beta1.Catalog] resources that consumers have access to, within the
   * scope of the consumer cloud resource hierarchy context.
   */
  searchCatalogs(
    request: DeepPartial<SearchCatalogsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchCatalogsResponse>;
  /**
   * Search [Product][google.cloud.privatecatalog.v1beta1.Product] resources that consumers have access to, within the
   * scope of the consumer cloud resource hierarchy context.
   */
  searchProducts(
    request: DeepPartial<SearchProductsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchProductsResponse>;
  /**
   * Search [Version][google.cloud.privatecatalog.v1beta1.Version] resources that consumers have access to, within the
   * scope of the consumer cloud resource hierarchy context.
   */
  searchVersions(
    request: DeepPartial<SearchVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchVersionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
