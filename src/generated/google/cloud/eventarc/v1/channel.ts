// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/eventarc/v1/channel.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.eventarc.v1";

/**
 * A representation of the Channel resource.
 * A Channel is a resource on which event providers publish their events.
 * The published events are delivered through the transport associated with the
 * channel. Note that a channel is associated with exactly one event provider.
 */
export interface Channel {
  /**
   * Required. The resource name of the channel. Must be unique within the
   * location on the project and must be in
   * `projects/{project}/locations/{location}/channels/{channel_id}` format.
   */
  name: string;
  /**
   * Output only. Server assigned unique identifier for the channel. The value
   * is a UUID4 string and guaranteed to remain unchanged until the resource is
   * deleted.
   */
  uid: string;
  /** Output only. The creation time. */
  createTime:
    | Date
    | undefined;
  /** Output only. The last-modified time. */
  updateTime:
    | Date
    | undefined;
  /**
   * The name of the event provider (e.g. Eventarc SaaS partner) associated
   * with the channel. This provider will be granted permissions to publish
   * events to the channel. Format:
   * `projects/{project}/locations/{location}/providers/{provider_id}`.
   */
  provider: string;
  /**
   * Output only. The name of the Pub/Sub topic created and managed by
   * Eventarc system as a transport for the event delivery. Format:
   * `projects/{project}/topics/{topic_id}`.
   */
  pubsubTopic?:
    | string
    | undefined;
  /** Output only. The state of a Channel. */
  state: Channel_State;
  /**
   * Output only. The activation token for the channel. The token must be used
   * by the provider to register the channel for publishing.
   */
  activationToken: string;
  /**
   * Optional. Resource name of a KMS crypto key (managed by the user) used to
   * encrypt/decrypt their event data.
   *
   * It must match the pattern
   * `projects/* /locations/* /keyRings/* /cryptoKeys/*`.
   */
  cryptoKeyName: string;
}

/** State lists all the possible states of a Channel */
export enum Channel_State {
  /** STATE_UNSPECIFIED - Default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /**
   * PENDING - The PENDING state indicates that a Channel has been created successfully
   * and there is a new activation token available for the subscriber to use
   * to convey the Channel to the provider in order to create a Connection.
   */
  PENDING = 1,
  /**
   * ACTIVE - The ACTIVE state indicates that a Channel has been successfully
   * connected with the event provider.
   * An ACTIVE Channel is ready to receive and route events from the
   * event provider.
   */
  ACTIVE = 2,
  /**
   * INACTIVE - The INACTIVE state indicates that the Channel cannot receive events
   * permanently. There are two possible cases this state can happen:
   *
   * 1. The SaaS provider disconnected from this Channel.
   * 2. The Channel activation token has expired but the SaaS provider
   *    wasn't connected.
   *
   * To re-establish a Connection with a provider, the subscriber
   * should create a new Channel and give it to the provider.
   */
  INACTIVE = 3,
  UNRECOGNIZED = -1,
}

export function channel_StateFromJSON(object: any): Channel_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Channel_State.STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return Channel_State.PENDING;
    case 2:
    case "ACTIVE":
      return Channel_State.ACTIVE;
    case 3:
    case "INACTIVE":
      return Channel_State.INACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Channel_State.UNRECOGNIZED;
  }
}

export function channel_StateToJSON(object: Channel_State): string {
  switch (object) {
    case Channel_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Channel_State.PENDING:
      return "PENDING";
    case Channel_State.ACTIVE:
      return "ACTIVE";
    case Channel_State.INACTIVE:
      return "INACTIVE";
    case Channel_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseChannel(): Channel {
  return {
    name: "",
    uid: "",
    createTime: undefined,
    updateTime: undefined,
    provider: "",
    pubsubTopic: undefined,
    state: 0,
    activationToken: "",
    cryptoKeyName: "",
  };
}

export const Channel: MessageFns<Channel> = {
  encode(message: Channel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.uid !== "") {
      writer.uint32(18).string(message.uid);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.provider !== "") {
      writer.uint32(58).string(message.provider);
    }
    if (message.pubsubTopic !== undefined) {
      writer.uint32(66).string(message.pubsubTopic);
    }
    if (message.state !== 0) {
      writer.uint32(72).int32(message.state);
    }
    if (message.activationToken !== "") {
      writer.uint32(82).string(message.activationToken);
    }
    if (message.cryptoKeyName !== "") {
      writer.uint32(90).string(message.cryptoKeyName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Channel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.provider = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.pubsubTopic = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.activationToken = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.cryptoKeyName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Channel {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
      pubsubTopic: isSet(object.pubsubTopic) ? globalThis.String(object.pubsubTopic) : undefined,
      state: isSet(object.state) ? channel_StateFromJSON(object.state) : 0,
      activationToken: isSet(object.activationToken) ? globalThis.String(object.activationToken) : "",
      cryptoKeyName: isSet(object.cryptoKeyName) ? globalThis.String(object.cryptoKeyName) : "",
    };
  },

  toJSON(message: Channel): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.provider !== "") {
      obj.provider = message.provider;
    }
    if (message.pubsubTopic !== undefined) {
      obj.pubsubTopic = message.pubsubTopic;
    }
    if (message.state !== 0) {
      obj.state = channel_StateToJSON(message.state);
    }
    if (message.activationToken !== "") {
      obj.activationToken = message.activationToken;
    }
    if (message.cryptoKeyName !== "") {
      obj.cryptoKeyName = message.cryptoKeyName;
    }
    return obj;
  },

  create(base?: DeepPartial<Channel>): Channel {
    return Channel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Channel>): Channel {
    const message = createBaseChannel();
    message.name = object.name ?? "";
    message.uid = object.uid ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.provider = object.provider ?? "";
    message.pubsubTopic = object.pubsubTopic ?? undefined;
    message.state = object.state ?? 0;
    message.activationToken = object.activationToken ?? "";
    message.cryptoKeyName = object.cryptoKeyName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
