// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/eventarc/v1/discovery.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.eventarc.v1";

/** A representation of the Provider resource. */
export interface Provider {
  /**
   * Output only. In `projects/{project}/locations/{location}/providers/{provider_id}`
   * format.
   */
  name: string;
  /** Output only. Human friendly name for the Provider. For example "Cloud Storage". */
  displayName: string;
  /** Output only. Event types for this provider. */
  eventTypes: EventType[];
}

/** A representation of the event type resource. */
export interface EventType {
  /**
   * Output only. The full name of the event type (for example,
   * "google.cloud.storage.object.v1.finalized"). In the form of
   * {provider-specific-prefix}.{resource}.{version}.{verb}. Types MUST be
   * versioned and event schemas are guaranteed to remain backward compatible
   * within one version. Note that event type versions and API versions do not
   * need to match.
   */
  type: string;
  /**
   * Output only. Human friendly description of what the event type is about.
   * For example "Bucket created in Cloud Storage".
   */
  description: string;
  /** Output only. Filtering attributes for the event type. */
  filteringAttributes: FilteringAttribute[];
  /**
   * Output only. URI for the event schema.
   * For example
   * "https://github.com/googleapis/google-cloudevents/blob/master/proto/google/events/cloud/storage/v1/events.proto"
   */
  eventSchemaUri: string;
}

/**
 * A representation of the FilteringAttribute resource.
 * Filtering attributes are per event type.
 */
export interface FilteringAttribute {
  /** Output only. Attribute used for filtering the event type. */
  attribute: string;
  /** Output only. Description of the purpose of the attribute. */
  description: string;
  /**
   * Output only. If true, the triggers for this provider should always specify a filter
   * on these attributes. Trigger creation will fail otherwise.
   */
  required: boolean;
  /**
   * Output only. If true, the attribute accepts matching expressions in the Eventarc
   * PathPattern format.
   */
  pathPatternSupported: boolean;
}

function createBaseProvider(): Provider {
  return { name: "", displayName: "", eventTypes: [] };
}

export const Provider: MessageFns<Provider> = {
  encode(message: Provider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    for (const v of message.eventTypes) {
      EventType.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Provider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.eventTypes.push(EventType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Provider {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      eventTypes: globalThis.Array.isArray(object?.eventTypes)
        ? object.eventTypes.map((e: any) => EventType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Provider): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.eventTypes?.length) {
      obj.eventTypes = message.eventTypes.map((e) => EventType.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Provider>): Provider {
    return Provider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Provider>): Provider {
    const message = createBaseProvider();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.eventTypes = object.eventTypes?.map((e) => EventType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEventType(): EventType {
  return { type: "", description: "", filteringAttributes: [], eventSchemaUri: "" };
}

export const EventType: MessageFns<EventType> = {
  encode(message: EventType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.filteringAttributes) {
      FilteringAttribute.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.eventSchemaUri !== "") {
      writer.uint32(34).string(message.eventSchemaUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.filteringAttributes.push(FilteringAttribute.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.eventSchemaUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventType {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      filteringAttributes: globalThis.Array.isArray(object?.filteringAttributes)
        ? object.filteringAttributes.map((e: any) => FilteringAttribute.fromJSON(e))
        : [],
      eventSchemaUri: isSet(object.eventSchemaUri) ? globalThis.String(object.eventSchemaUri) : "",
    };
  },

  toJSON(message: EventType): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.filteringAttributes?.length) {
      obj.filteringAttributes = message.filteringAttributes.map((e) => FilteringAttribute.toJSON(e));
    }
    if (message.eventSchemaUri !== "") {
      obj.eventSchemaUri = message.eventSchemaUri;
    }
    return obj;
  },

  create(base?: DeepPartial<EventType>): EventType {
    return EventType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventType>): EventType {
    const message = createBaseEventType();
    message.type = object.type ?? "";
    message.description = object.description ?? "";
    message.filteringAttributes = object.filteringAttributes?.map((e) => FilteringAttribute.fromPartial(e)) || [];
    message.eventSchemaUri = object.eventSchemaUri ?? "";
    return message;
  },
};

function createBaseFilteringAttribute(): FilteringAttribute {
  return { attribute: "", description: "", required: false, pathPatternSupported: false };
}

export const FilteringAttribute: MessageFns<FilteringAttribute> = {
  encode(message: FilteringAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attribute !== "") {
      writer.uint32(10).string(message.attribute);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.required !== false) {
      writer.uint32(24).bool(message.required);
    }
    if (message.pathPatternSupported !== false) {
      writer.uint32(32).bool(message.pathPatternSupported);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilteringAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilteringAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attribute = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.required = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pathPatternSupported = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilteringAttribute {
    return {
      attribute: isSet(object.attribute) ? globalThis.String(object.attribute) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      pathPatternSupported: isSet(object.pathPatternSupported)
        ? globalThis.Boolean(object.pathPatternSupported)
        : false,
    };
  },

  toJSON(message: FilteringAttribute): unknown {
    const obj: any = {};
    if (message.attribute !== "") {
      obj.attribute = message.attribute;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.required !== false) {
      obj.required = message.required;
    }
    if (message.pathPatternSupported !== false) {
      obj.pathPatternSupported = message.pathPatternSupported;
    }
    return obj;
  },

  create(base?: DeepPartial<FilteringAttribute>): FilteringAttribute {
    return FilteringAttribute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FilteringAttribute>): FilteringAttribute {
    const message = createBaseFilteringAttribute();
    message.attribute = object.attribute ?? "";
    message.description = object.description ?? "";
    message.required = object.required ?? false;
    message.pathPatternSupported = object.pathPatternSupported ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
