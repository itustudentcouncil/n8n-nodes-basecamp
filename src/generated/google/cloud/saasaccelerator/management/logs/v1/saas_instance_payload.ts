// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/saasaccelerator/management/logs/v1/saas_instance_payload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.saasaccelerator.management.logs.v1";

export interface InstanceEvent {
  /** The type of the event, e.g. Create, Update, etc. */
  verb: string;
  /** The state of the instance, e.g. "RETRYING_CREATE_INSTANCE". */
  stage: string;
  /**
   * A human-readable log message, e.g. "error in stage: CREATING, err: location
   * not available".
   */
  msg: string;
  /** The ID to uniquely locate all logs associated with a given request. */
  traceId: string;
  /**
   * The instance node which is the subject of the operation, if known.
   * Currently unused as tf actuation does not manage nodes.
   */
  nodeId: string;
}

function createBaseInstanceEvent(): InstanceEvent {
  return { verb: "", stage: "", msg: "", traceId: "", nodeId: "" };
}

export const InstanceEvent: MessageFns<InstanceEvent> = {
  encode(message: InstanceEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.verb !== "") {
      writer.uint32(10).string(message.verb);
    }
    if (message.stage !== "") {
      writer.uint32(18).string(message.stage);
    }
    if (message.msg !== "") {
      writer.uint32(26).string(message.msg);
    }
    if (message.traceId !== "") {
      writer.uint32(34).string(message.traceId);
    }
    if (message.nodeId !== "") {
      writer.uint32(42).string(message.nodeId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstanceEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstanceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.msg = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.traceId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nodeId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstanceEvent {
    return {
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      stage: isSet(object.stage) ? globalThis.String(object.stage) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      traceId: isSet(object.traceId) ? globalThis.String(object.traceId) : "",
      nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
    };
  },

  toJSON(message: InstanceEvent): unknown {
    const obj: any = {};
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.stage !== "") {
      obj.stage = message.stage;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.traceId !== "") {
      obj.traceId = message.traceId;
    }
    if (message.nodeId !== "") {
      obj.nodeId = message.nodeId;
    }
    return obj;
  },

  create(base?: DeepPartial<InstanceEvent>): InstanceEvent {
    return InstanceEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InstanceEvent>): InstanceEvent {
    const message = createBaseInstanceEvent();
    message.verb = object.verb ?? "";
    message.stage = object.stage ?? "";
    message.msg = object.msg ?? "";
    message.traceId = object.traceId ?? "";
    message.nodeId = object.nodeId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
