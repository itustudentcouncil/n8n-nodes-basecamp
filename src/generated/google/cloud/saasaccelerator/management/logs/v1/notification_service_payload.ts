// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/saasaccelerator/management/logs/v1/notification_service_payload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.saasaccelerator.management.logs.v1";

/** Payload proto for Notification logs. */
export interface NotificationStage {
  /** The type of the Notification Service event. */
  stage: NotificationStage_Stage;
  /** Time of the NotificationServiceEvent. */
  eventTime:
    | Date
    | undefined;
  /** The id of the notification. */
  notificationId: string;
  /** The event that triggered the notification. */
  event: NotificationStage_Event;
  /** Message to denote the error related to the event if applicable. */
  message: string;
}

/** Types of Notification Status. */
export enum NotificationStage_Stage {
  /** STAGE_UNSPECIFIED - Default. */
  STAGE_UNSPECIFIED = 0,
  /** SENT - Notification was sent. */
  SENT = 1,
  /** SEND_FAILURE - Notification failed to send. */
  SEND_FAILURE = 2,
  /** DROPPED - Notification was dropped. */
  DROPPED = 3,
  UNRECOGNIZED = -1,
}

export function notificationStage_StageFromJSON(object: any): NotificationStage_Stage {
  switch (object) {
    case 0:
    case "STAGE_UNSPECIFIED":
      return NotificationStage_Stage.STAGE_UNSPECIFIED;
    case 1:
    case "SENT":
      return NotificationStage_Stage.SENT;
    case 2:
    case "SEND_FAILURE":
      return NotificationStage_Stage.SEND_FAILURE;
    case 3:
    case "DROPPED":
      return NotificationStage_Stage.DROPPED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NotificationStage_Stage.UNRECOGNIZED;
  }
}

export function notificationStage_StageToJSON(object: NotificationStage_Stage): string {
  switch (object) {
    case NotificationStage_Stage.STAGE_UNSPECIFIED:
      return "STAGE_UNSPECIFIED";
    case NotificationStage_Stage.SENT:
      return "SENT";
    case NotificationStage_Stage.SEND_FAILURE:
      return "SEND_FAILURE";
    case NotificationStage_Stage.DROPPED:
      return "DROPPED";
    case NotificationStage_Stage.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Event that triggered the notification. */
export enum NotificationStage_Event {
  /** EVENT_UNSPECIFIED - Default value. */
  EVENT_UNSPECIFIED = 0,
  /** HEALTH_STATUS_CHANGE - When a health status has been changed. */
  HEALTH_STATUS_CHANGE = 1,
  UNRECOGNIZED = -1,
}

export function notificationStage_EventFromJSON(object: any): NotificationStage_Event {
  switch (object) {
    case 0:
    case "EVENT_UNSPECIFIED":
      return NotificationStage_Event.EVENT_UNSPECIFIED;
    case 1:
    case "HEALTH_STATUS_CHANGE":
      return NotificationStage_Event.HEALTH_STATUS_CHANGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NotificationStage_Event.UNRECOGNIZED;
  }
}

export function notificationStage_EventToJSON(object: NotificationStage_Event): string {
  switch (object) {
    case NotificationStage_Event.EVENT_UNSPECIFIED:
      return "EVENT_UNSPECIFIED";
    case NotificationStage_Event.HEALTH_STATUS_CHANGE:
      return "HEALTH_STATUS_CHANGE";
    case NotificationStage_Event.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseNotificationStage(): NotificationStage {
  return { stage: 0, eventTime: undefined, notificationId: "", event: 0, message: "" };
}

export const NotificationStage: MessageFns<NotificationStage> = {
  encode(message: NotificationStage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stage !== 0) {
      writer.uint32(8).int32(message.stage);
    }
    if (message.eventTime !== undefined) {
      Timestamp.encode(toTimestamp(message.eventTime), writer.uint32(18).fork()).join();
    }
    if (message.notificationId !== "") {
      writer.uint32(26).string(message.notificationId);
    }
    if (message.event !== 0) {
      writer.uint32(32).int32(message.event);
    }
    if (message.message !== "") {
      writer.uint32(42).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationStage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationStage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.stage = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notificationId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.event = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationStage {
    return {
      stage: isSet(object.stage) ? notificationStage_StageFromJSON(object.stage) : 0,
      eventTime: isSet(object.eventTime) ? fromJsonTimestamp(object.eventTime) : undefined,
      notificationId: isSet(object.notificationId) ? globalThis.String(object.notificationId) : "",
      event: isSet(object.event) ? notificationStage_EventFromJSON(object.event) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: NotificationStage): unknown {
    const obj: any = {};
    if (message.stage !== 0) {
      obj.stage = notificationStage_StageToJSON(message.stage);
    }
    if (message.eventTime !== undefined) {
      obj.eventTime = message.eventTime.toISOString();
    }
    if (message.notificationId !== "") {
      obj.notificationId = message.notificationId;
    }
    if (message.event !== 0) {
      obj.event = notificationStage_EventToJSON(message.event);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<NotificationStage>): NotificationStage {
    return NotificationStage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotificationStage>): NotificationStage {
    const message = createBaseNotificationStage();
    message.stage = object.stage ?? 0;
    message.eventTime = object.eventTime ?? undefined;
    message.notificationId = object.notificationId ?? "";
    message.event = object.event ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
