// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkehub/v1beta/metering/metering.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.gkehub.metering.v1beta";

/** *Metering**: Per-Membership Feature State. */
export interface MembershipState {
  /**
   * The time stamp of the most recent measurement of the number of vCPUs
   * in the cluster.
   */
  lastMeasurementTime:
    | Date
    | undefined;
  /**
   * The vCPUs capacity in the cluster according to the most recent
   * measurement (1/1000 precision).
   */
  preciseLastMeasuredClusterVcpuCapacity: number;
}

function createBaseMembershipState(): MembershipState {
  return { lastMeasurementTime: undefined, preciseLastMeasuredClusterVcpuCapacity: 0 };
}

export const MembershipState: MessageFns<MembershipState> = {
  encode(message: MembershipState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastMeasurementTime !== undefined) {
      Timestamp.encode(toTimestamp(message.lastMeasurementTime), writer.uint32(10).fork()).join();
    }
    if (message.preciseLastMeasuredClusterVcpuCapacity !== 0) {
      writer.uint32(29).float(message.preciseLastMeasuredClusterVcpuCapacity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lastMeasurementTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.preciseLastMeasuredClusterVcpuCapacity = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipState {
    return {
      lastMeasurementTime: isSet(object.lastMeasurementTime)
        ? fromJsonTimestamp(object.lastMeasurementTime)
        : undefined,
      preciseLastMeasuredClusterVcpuCapacity: isSet(object.preciseLastMeasuredClusterVcpuCapacity)
        ? globalThis.Number(object.preciseLastMeasuredClusterVcpuCapacity)
        : 0,
    };
  },

  toJSON(message: MembershipState): unknown {
    const obj: any = {};
    if (message.lastMeasurementTime !== undefined) {
      obj.lastMeasurementTime = message.lastMeasurementTime.toISOString();
    }
    if (message.preciseLastMeasuredClusterVcpuCapacity !== 0) {
      obj.preciseLastMeasuredClusterVcpuCapacity = message.preciseLastMeasuredClusterVcpuCapacity;
    }
    return obj;
  },

  create(base?: DeepPartial<MembershipState>): MembershipState {
    return MembershipState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MembershipState>): MembershipState {
    const message = createBaseMembershipState();
    message.lastMeasurementTime = object.lastMeasurementTime ?? undefined;
    message.preciseLastMeasuredClusterVcpuCapacity = object.preciseLastMeasuredClusterVcpuCapacity ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
