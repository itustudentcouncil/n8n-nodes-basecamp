// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkehub/servicemesh/v1beta/servicemesh.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.gkehub.servicemesh.v1beta";

/** *Service Mesh**: Spec for a single Membership for the servicemesh feature */
export interface MembershipSpec {
  /**
   * Deprecated: use `management` instead
   * Enables automatic control plane management.
   *
   * @deprecated
   */
  controlPlane: MembershipSpec_ControlPlaneManagement;
  /** Enables automatic Service Mesh management. */
  management: MembershipSpec_Management;
}

/** Whether to automatically manage Service Mesh control planes. */
export enum MembershipSpec_ControlPlaneManagement {
  /** CONTROL_PLANE_MANAGEMENT_UNSPECIFIED - Unspecified */
  CONTROL_PLANE_MANAGEMENT_UNSPECIFIED = 0,
  /**
   * AUTOMATIC - Google should provision a control plane revision and make it available in
   * the cluster. Google will enroll this revision in a release channel and
   * keep it up to date. The control plane revision may be a managed service,
   * or a managed install.
   */
  AUTOMATIC = 1,
  /**
   * MANUAL - User will manually configure the control plane (e.g. via CLI, or via the
   * ControlPlaneRevision KRM API)
   */
  MANUAL = 2,
  UNRECOGNIZED = -1,
}

export function membershipSpec_ControlPlaneManagementFromJSON(object: any): MembershipSpec_ControlPlaneManagement {
  switch (object) {
    case 0:
    case "CONTROL_PLANE_MANAGEMENT_UNSPECIFIED":
      return MembershipSpec_ControlPlaneManagement.CONTROL_PLANE_MANAGEMENT_UNSPECIFIED;
    case 1:
    case "AUTOMATIC":
      return MembershipSpec_ControlPlaneManagement.AUTOMATIC;
    case 2:
    case "MANUAL":
      return MembershipSpec_ControlPlaneManagement.MANUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MembershipSpec_ControlPlaneManagement.UNRECOGNIZED;
  }
}

export function membershipSpec_ControlPlaneManagementToJSON(object: MembershipSpec_ControlPlaneManagement): string {
  switch (object) {
    case MembershipSpec_ControlPlaneManagement.CONTROL_PLANE_MANAGEMENT_UNSPECIFIED:
      return "CONTROL_PLANE_MANAGEMENT_UNSPECIFIED";
    case MembershipSpec_ControlPlaneManagement.AUTOMATIC:
      return "AUTOMATIC";
    case MembershipSpec_ControlPlaneManagement.MANUAL:
      return "MANUAL";
    case MembershipSpec_ControlPlaneManagement.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Whether to automatically manage Service Mesh. */
export enum MembershipSpec_Management {
  /** MANAGEMENT_UNSPECIFIED - Unspecified */
  MANAGEMENT_UNSPECIFIED = 0,
  /** MANAGEMENT_AUTOMATIC - Google should manage my Service Mesh for the cluster. */
  MANAGEMENT_AUTOMATIC = 1,
  /** MANAGEMENT_MANUAL - User will manually configure their service mesh components. */
  MANAGEMENT_MANUAL = 2,
  UNRECOGNIZED = -1,
}

export function membershipSpec_ManagementFromJSON(object: any): MembershipSpec_Management {
  switch (object) {
    case 0:
    case "MANAGEMENT_UNSPECIFIED":
      return MembershipSpec_Management.MANAGEMENT_UNSPECIFIED;
    case 1:
    case "MANAGEMENT_AUTOMATIC":
      return MembershipSpec_Management.MANAGEMENT_AUTOMATIC;
    case 2:
    case "MANAGEMENT_MANUAL":
      return MembershipSpec_Management.MANAGEMENT_MANUAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MembershipSpec_Management.UNRECOGNIZED;
  }
}

export function membershipSpec_ManagementToJSON(object: MembershipSpec_Management): string {
  switch (object) {
    case MembershipSpec_Management.MANAGEMENT_UNSPECIFIED:
      return "MANAGEMENT_UNSPECIFIED";
    case MembershipSpec_Management.MANAGEMENT_AUTOMATIC:
      return "MANAGEMENT_AUTOMATIC";
    case MembershipSpec_Management.MANAGEMENT_MANUAL:
      return "MANAGEMENT_MANUAL";
    case MembershipSpec_Management.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * *Service Mesh**: State for a single Membership, as analyzed by the Service
 * Mesh Hub Controller.
 */
export interface MembershipState {
  /** Output only. Status of control plane management */
  controlPlaneManagement:
    | MembershipState_ControlPlaneManagement
    | undefined;
  /** Output only. Status of data plane management. */
  dataPlaneManagement:
    | MembershipState_DataPlaneManagement
    | undefined;
  /** Output only. List of conditions reported for this membership. */
  conditions: MembershipState_Condition[];
}

/** Lifecycle state of Service Mesh components. */
export enum MembershipState_LifecycleState {
  /** LIFECYCLE_STATE_UNSPECIFIED - Unspecified */
  LIFECYCLE_STATE_UNSPECIFIED = 0,
  /** DISABLED - DISABLED means that the component is not enabled. */
  DISABLED = 1,
  /**
   * FAILED_PRECONDITION - FAILED_PRECONDITION means that provisioning cannot proceed because of
   * some characteristic of the member cluster.
   */
  FAILED_PRECONDITION = 2,
  /** PROVISIONING - PROVISIONING means that provisioning is in progress. */
  PROVISIONING = 3,
  /** ACTIVE - ACTIVE means that the component is ready for use. */
  ACTIVE = 4,
  /** STALLED - STALLED means that provisioning could not be done. */
  STALLED = 5,
  /**
   * NEEDS_ATTENTION - NEEDS_ATTENTION means that the component is ready, but some user
   * intervention is required. (For example that the user should migrate
   * workloads to a new control plane revision.)
   */
  NEEDS_ATTENTION = 6,
  /**
   * DEGRADED - DEGRADED means that the component is ready, but operating in a
   * degraded state.
   */
  DEGRADED = 7,
  UNRECOGNIZED = -1,
}

export function membershipState_LifecycleStateFromJSON(object: any): MembershipState_LifecycleState {
  switch (object) {
    case 0:
    case "LIFECYCLE_STATE_UNSPECIFIED":
      return MembershipState_LifecycleState.LIFECYCLE_STATE_UNSPECIFIED;
    case 1:
    case "DISABLED":
      return MembershipState_LifecycleState.DISABLED;
    case 2:
    case "FAILED_PRECONDITION":
      return MembershipState_LifecycleState.FAILED_PRECONDITION;
    case 3:
    case "PROVISIONING":
      return MembershipState_LifecycleState.PROVISIONING;
    case 4:
    case "ACTIVE":
      return MembershipState_LifecycleState.ACTIVE;
    case 5:
    case "STALLED":
      return MembershipState_LifecycleState.STALLED;
    case 6:
    case "NEEDS_ATTENTION":
      return MembershipState_LifecycleState.NEEDS_ATTENTION;
    case 7:
    case "DEGRADED":
      return MembershipState_LifecycleState.DEGRADED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MembershipState_LifecycleState.UNRECOGNIZED;
  }
}

export function membershipState_LifecycleStateToJSON(object: MembershipState_LifecycleState): string {
  switch (object) {
    case MembershipState_LifecycleState.LIFECYCLE_STATE_UNSPECIFIED:
      return "LIFECYCLE_STATE_UNSPECIFIED";
    case MembershipState_LifecycleState.DISABLED:
      return "DISABLED";
    case MembershipState_LifecycleState.FAILED_PRECONDITION:
      return "FAILED_PRECONDITION";
    case MembershipState_LifecycleState.PROVISIONING:
      return "PROVISIONING";
    case MembershipState_LifecycleState.ACTIVE:
      return "ACTIVE";
    case MembershipState_LifecycleState.STALLED:
      return "STALLED";
    case MembershipState_LifecycleState.NEEDS_ATTENTION:
      return "NEEDS_ATTENTION";
    case MembershipState_LifecycleState.DEGRADED:
      return "DEGRADED";
    case MembershipState_LifecycleState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Status of control plane management. */
export interface MembershipState_ControlPlaneManagement {
  /** Explanation of state. */
  details: StatusDetails[];
  /** LifecycleState of control plane management. */
  state: MembershipState_LifecycleState;
  /** Output only. Implementation of managed control plane. */
  implementation: MembershipState_ControlPlaneManagement_Implementation;
}

/** Implementation of managed control plane. */
export enum MembershipState_ControlPlaneManagement_Implementation {
  /** IMPLEMENTATION_UNSPECIFIED - Unspecified */
  IMPLEMENTATION_UNSPECIFIED = 0,
  /** ISTIOD - A Google build of istiod is used for the managed control plane. */
  ISTIOD = 1,
  /** TRAFFIC_DIRECTOR - Traffic director is used for the managed control plane. */
  TRAFFIC_DIRECTOR = 2,
  /** UPDATING - The control plane implementation is being updated. */
  UPDATING = 3,
  UNRECOGNIZED = -1,
}

export function membershipState_ControlPlaneManagement_ImplementationFromJSON(
  object: any,
): MembershipState_ControlPlaneManagement_Implementation {
  switch (object) {
    case 0:
    case "IMPLEMENTATION_UNSPECIFIED":
      return MembershipState_ControlPlaneManagement_Implementation.IMPLEMENTATION_UNSPECIFIED;
    case 1:
    case "ISTIOD":
      return MembershipState_ControlPlaneManagement_Implementation.ISTIOD;
    case 2:
    case "TRAFFIC_DIRECTOR":
      return MembershipState_ControlPlaneManagement_Implementation.TRAFFIC_DIRECTOR;
    case 3:
    case "UPDATING":
      return MembershipState_ControlPlaneManagement_Implementation.UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MembershipState_ControlPlaneManagement_Implementation.UNRECOGNIZED;
  }
}

export function membershipState_ControlPlaneManagement_ImplementationToJSON(
  object: MembershipState_ControlPlaneManagement_Implementation,
): string {
  switch (object) {
    case MembershipState_ControlPlaneManagement_Implementation.IMPLEMENTATION_UNSPECIFIED:
      return "IMPLEMENTATION_UNSPECIFIED";
    case MembershipState_ControlPlaneManagement_Implementation.ISTIOD:
      return "ISTIOD";
    case MembershipState_ControlPlaneManagement_Implementation.TRAFFIC_DIRECTOR:
      return "TRAFFIC_DIRECTOR";
    case MembershipState_ControlPlaneManagement_Implementation.UPDATING:
      return "UPDATING";
    case MembershipState_ControlPlaneManagement_Implementation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Status of data plane management. Only reported per-member. */
export interface MembershipState_DataPlaneManagement {
  /** Lifecycle status of data plane management. */
  state: MembershipState_LifecycleState;
  /** Explanation of the status. */
  details: StatusDetails[];
}

/** Condition being reported. */
export interface MembershipState_Condition {
  /**
   * Unique identifier of the condition which describes the condition
   * recognizable to the user.
   */
  code: MembershipState_Condition_Code;
  /** Links contains actionable information. */
  documentationLink: string;
  /** A short summary about the issue. */
  details: string;
  /** Severity level of the condition. */
  severity: MembershipState_Condition_Severity;
}

/**
 * Unique identifier of the condition which describes the condition
 * recognizable to the user.
 */
export enum MembershipState_Condition_Code {
  /** CODE_UNSPECIFIED - Default Unspecified code */
  CODE_UNSPECIFIED = 0,
  /** MESH_IAM_PERMISSION_DENIED - Mesh IAM permission denied error code */
  MESH_IAM_PERMISSION_DENIED = 100,
  /** CNI_CONFIG_UNSUPPORTED - CNI config unsupported error code */
  CNI_CONFIG_UNSUPPORTED = 201,
  /** GKE_SANDBOX_UNSUPPORTED - GKE sandbox unsupported error code */
  GKE_SANDBOX_UNSUPPORTED = 202,
  /** NODEPOOL_WORKLOAD_IDENTITY_FEDERATION_REQUIRED - Nodepool workload identity federation required error code */
  NODEPOOL_WORKLOAD_IDENTITY_FEDERATION_REQUIRED = 203,
  /** CNI_INSTALLATION_FAILED - CNI installation failed error code */
  CNI_INSTALLATION_FAILED = 204,
  /** CNI_POD_UNSCHEDULABLE - CNI pod unschedulable error code */
  CNI_POD_UNSCHEDULABLE = 205,
  /** UNSUPPORTED_MULTIPLE_CONTROL_PLANES - Multiple control planes unsupported error code */
  UNSUPPORTED_MULTIPLE_CONTROL_PLANES = 301,
  /** VPCSC_GA_SUPPORTED - VPC-SC GA is supported for this control plane. */
  VPCSC_GA_SUPPORTED = 302,
  /**
   * CONFIG_APPLY_INTERNAL_ERROR - Configuration (Istio/k8s resources) failed to apply due to internal
   * error.
   */
  CONFIG_APPLY_INTERNAL_ERROR = 401,
  /** CONFIG_VALIDATION_ERROR - Configuration failed to be applied due to being invalid. */
  CONFIG_VALIDATION_ERROR = 402,
  /**
   * CONFIG_VALIDATION_WARNING - Encountered configuration(s) with possible unintended behavior or
   * invalid configuration. These configs may not have been applied.
   */
  CONFIG_VALIDATION_WARNING = 403,
  /** QUOTA_EXCEEDED_BACKEND_SERVICES - BackendService quota exceeded error code. */
  QUOTA_EXCEEDED_BACKEND_SERVICES = 404,
  /** QUOTA_EXCEEDED_HEALTH_CHECKS - HealthCheck quota exceeded error code. */
  QUOTA_EXCEEDED_HEALTH_CHECKS = 405,
  /** QUOTA_EXCEEDED_HTTP_ROUTES - HTTPRoute quota exceeded error code. */
  QUOTA_EXCEEDED_HTTP_ROUTES = 406,
  /** QUOTA_EXCEEDED_TCP_ROUTES - TCPRoute quota exceeded error code. */
  QUOTA_EXCEEDED_TCP_ROUTES = 407,
  /** QUOTA_EXCEEDED_TLS_ROUTES - TLS routes quota exceeded error code. */
  QUOTA_EXCEEDED_TLS_ROUTES = 408,
  /** QUOTA_EXCEEDED_TRAFFIC_POLICIES - TrafficPolicy quota exceeded error code. */
  QUOTA_EXCEEDED_TRAFFIC_POLICIES = 409,
  /** QUOTA_EXCEEDED_ENDPOINT_POLICIES - EndpointPolicy quota exceeded error code. */
  QUOTA_EXCEEDED_ENDPOINT_POLICIES = 410,
  /** QUOTA_EXCEEDED_GATEWAYS - Gateway quota exceeded error code. */
  QUOTA_EXCEEDED_GATEWAYS = 411,
  /** QUOTA_EXCEEDED_MESHES - Mesh quota exceeded error code. */
  QUOTA_EXCEEDED_MESHES = 412,
  /** QUOTA_EXCEEDED_SERVER_TLS_POLICIES - ServerTLSPolicy quota exceeded error code. */
  QUOTA_EXCEEDED_SERVER_TLS_POLICIES = 413,
  /** QUOTA_EXCEEDED_CLIENT_TLS_POLICIES - ClientTLSPolicy quota exceeded error code. */
  QUOTA_EXCEEDED_CLIENT_TLS_POLICIES = 414,
  /** QUOTA_EXCEEDED_SERVICE_LB_POLICIES - ServiceLBPolicy quota exceeded error code. */
  QUOTA_EXCEEDED_SERVICE_LB_POLICIES = 415,
  /** QUOTA_EXCEEDED_HTTP_FILTERS - HTTPFilter quota exceeded error code. */
  QUOTA_EXCEEDED_HTTP_FILTERS = 416,
  /** QUOTA_EXCEEDED_TCP_FILTERS - TCPFilter quota exceeded error code. */
  QUOTA_EXCEEDED_TCP_FILTERS = 417,
  /** QUOTA_EXCEEDED_NETWORK_ENDPOINT_GROUPS - NetworkEndpointGroup quota exceeded error code. */
  QUOTA_EXCEEDED_NETWORK_ENDPOINT_GROUPS = 418,
  UNRECOGNIZED = -1,
}

export function membershipState_Condition_CodeFromJSON(object: any): MembershipState_Condition_Code {
  switch (object) {
    case 0:
    case "CODE_UNSPECIFIED":
      return MembershipState_Condition_Code.CODE_UNSPECIFIED;
    case 100:
    case "MESH_IAM_PERMISSION_DENIED":
      return MembershipState_Condition_Code.MESH_IAM_PERMISSION_DENIED;
    case 201:
    case "CNI_CONFIG_UNSUPPORTED":
      return MembershipState_Condition_Code.CNI_CONFIG_UNSUPPORTED;
    case 202:
    case "GKE_SANDBOX_UNSUPPORTED":
      return MembershipState_Condition_Code.GKE_SANDBOX_UNSUPPORTED;
    case 203:
    case "NODEPOOL_WORKLOAD_IDENTITY_FEDERATION_REQUIRED":
      return MembershipState_Condition_Code.NODEPOOL_WORKLOAD_IDENTITY_FEDERATION_REQUIRED;
    case 204:
    case "CNI_INSTALLATION_FAILED":
      return MembershipState_Condition_Code.CNI_INSTALLATION_FAILED;
    case 205:
    case "CNI_POD_UNSCHEDULABLE":
      return MembershipState_Condition_Code.CNI_POD_UNSCHEDULABLE;
    case 301:
    case "UNSUPPORTED_MULTIPLE_CONTROL_PLANES":
      return MembershipState_Condition_Code.UNSUPPORTED_MULTIPLE_CONTROL_PLANES;
    case 302:
    case "VPCSC_GA_SUPPORTED":
      return MembershipState_Condition_Code.VPCSC_GA_SUPPORTED;
    case 401:
    case "CONFIG_APPLY_INTERNAL_ERROR":
      return MembershipState_Condition_Code.CONFIG_APPLY_INTERNAL_ERROR;
    case 402:
    case "CONFIG_VALIDATION_ERROR":
      return MembershipState_Condition_Code.CONFIG_VALIDATION_ERROR;
    case 403:
    case "CONFIG_VALIDATION_WARNING":
      return MembershipState_Condition_Code.CONFIG_VALIDATION_WARNING;
    case 404:
    case "QUOTA_EXCEEDED_BACKEND_SERVICES":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_BACKEND_SERVICES;
    case 405:
    case "QUOTA_EXCEEDED_HEALTH_CHECKS":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_HEALTH_CHECKS;
    case 406:
    case "QUOTA_EXCEEDED_HTTP_ROUTES":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_HTTP_ROUTES;
    case 407:
    case "QUOTA_EXCEEDED_TCP_ROUTES":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_TCP_ROUTES;
    case 408:
    case "QUOTA_EXCEEDED_TLS_ROUTES":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_TLS_ROUTES;
    case 409:
    case "QUOTA_EXCEEDED_TRAFFIC_POLICIES":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_TRAFFIC_POLICIES;
    case 410:
    case "QUOTA_EXCEEDED_ENDPOINT_POLICIES":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_ENDPOINT_POLICIES;
    case 411:
    case "QUOTA_EXCEEDED_GATEWAYS":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_GATEWAYS;
    case 412:
    case "QUOTA_EXCEEDED_MESHES":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_MESHES;
    case 413:
    case "QUOTA_EXCEEDED_SERVER_TLS_POLICIES":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_SERVER_TLS_POLICIES;
    case 414:
    case "QUOTA_EXCEEDED_CLIENT_TLS_POLICIES":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_CLIENT_TLS_POLICIES;
    case 415:
    case "QUOTA_EXCEEDED_SERVICE_LB_POLICIES":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_SERVICE_LB_POLICIES;
    case 416:
    case "QUOTA_EXCEEDED_HTTP_FILTERS":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_HTTP_FILTERS;
    case 417:
    case "QUOTA_EXCEEDED_TCP_FILTERS":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_TCP_FILTERS;
    case 418:
    case "QUOTA_EXCEEDED_NETWORK_ENDPOINT_GROUPS":
      return MembershipState_Condition_Code.QUOTA_EXCEEDED_NETWORK_ENDPOINT_GROUPS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MembershipState_Condition_Code.UNRECOGNIZED;
  }
}

export function membershipState_Condition_CodeToJSON(object: MembershipState_Condition_Code): string {
  switch (object) {
    case MembershipState_Condition_Code.CODE_UNSPECIFIED:
      return "CODE_UNSPECIFIED";
    case MembershipState_Condition_Code.MESH_IAM_PERMISSION_DENIED:
      return "MESH_IAM_PERMISSION_DENIED";
    case MembershipState_Condition_Code.CNI_CONFIG_UNSUPPORTED:
      return "CNI_CONFIG_UNSUPPORTED";
    case MembershipState_Condition_Code.GKE_SANDBOX_UNSUPPORTED:
      return "GKE_SANDBOX_UNSUPPORTED";
    case MembershipState_Condition_Code.NODEPOOL_WORKLOAD_IDENTITY_FEDERATION_REQUIRED:
      return "NODEPOOL_WORKLOAD_IDENTITY_FEDERATION_REQUIRED";
    case MembershipState_Condition_Code.CNI_INSTALLATION_FAILED:
      return "CNI_INSTALLATION_FAILED";
    case MembershipState_Condition_Code.CNI_POD_UNSCHEDULABLE:
      return "CNI_POD_UNSCHEDULABLE";
    case MembershipState_Condition_Code.UNSUPPORTED_MULTIPLE_CONTROL_PLANES:
      return "UNSUPPORTED_MULTIPLE_CONTROL_PLANES";
    case MembershipState_Condition_Code.VPCSC_GA_SUPPORTED:
      return "VPCSC_GA_SUPPORTED";
    case MembershipState_Condition_Code.CONFIG_APPLY_INTERNAL_ERROR:
      return "CONFIG_APPLY_INTERNAL_ERROR";
    case MembershipState_Condition_Code.CONFIG_VALIDATION_ERROR:
      return "CONFIG_VALIDATION_ERROR";
    case MembershipState_Condition_Code.CONFIG_VALIDATION_WARNING:
      return "CONFIG_VALIDATION_WARNING";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_BACKEND_SERVICES:
      return "QUOTA_EXCEEDED_BACKEND_SERVICES";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_HEALTH_CHECKS:
      return "QUOTA_EXCEEDED_HEALTH_CHECKS";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_HTTP_ROUTES:
      return "QUOTA_EXCEEDED_HTTP_ROUTES";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_TCP_ROUTES:
      return "QUOTA_EXCEEDED_TCP_ROUTES";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_TLS_ROUTES:
      return "QUOTA_EXCEEDED_TLS_ROUTES";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_TRAFFIC_POLICIES:
      return "QUOTA_EXCEEDED_TRAFFIC_POLICIES";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_ENDPOINT_POLICIES:
      return "QUOTA_EXCEEDED_ENDPOINT_POLICIES";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_GATEWAYS:
      return "QUOTA_EXCEEDED_GATEWAYS";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_MESHES:
      return "QUOTA_EXCEEDED_MESHES";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_SERVER_TLS_POLICIES:
      return "QUOTA_EXCEEDED_SERVER_TLS_POLICIES";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_CLIENT_TLS_POLICIES:
      return "QUOTA_EXCEEDED_CLIENT_TLS_POLICIES";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_SERVICE_LB_POLICIES:
      return "QUOTA_EXCEEDED_SERVICE_LB_POLICIES";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_HTTP_FILTERS:
      return "QUOTA_EXCEEDED_HTTP_FILTERS";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_TCP_FILTERS:
      return "QUOTA_EXCEEDED_TCP_FILTERS";
    case MembershipState_Condition_Code.QUOTA_EXCEEDED_NETWORK_ENDPOINT_GROUPS:
      return "QUOTA_EXCEEDED_NETWORK_ENDPOINT_GROUPS";
    case MembershipState_Condition_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Severity level of the reported condition */
export enum MembershipState_Condition_Severity {
  /** SEVERITY_UNSPECIFIED - Unspecified severity */
  SEVERITY_UNSPECIFIED = 0,
  /** ERROR - Indicates an issue that prevents the mesh from operating correctly */
  ERROR = 1,
  /**
   * WARNING - Indicates a setting is likely wrong, but the mesh is still able to
   * operate
   */
  WARNING = 2,
  /** INFO - An informational message, not requiring any action */
  INFO = 3,
  UNRECOGNIZED = -1,
}

export function membershipState_Condition_SeverityFromJSON(object: any): MembershipState_Condition_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return MembershipState_Condition_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "ERROR":
      return MembershipState_Condition_Severity.ERROR;
    case 2:
    case "WARNING":
      return MembershipState_Condition_Severity.WARNING;
    case 3:
    case "INFO":
      return MembershipState_Condition_Severity.INFO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MembershipState_Condition_Severity.UNRECOGNIZED;
  }
}

export function membershipState_Condition_SeverityToJSON(object: MembershipState_Condition_Severity): string {
  switch (object) {
    case MembershipState_Condition_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case MembershipState_Condition_Severity.ERROR:
      return "ERROR";
    case MembershipState_Condition_Severity.WARNING:
      return "WARNING";
    case MembershipState_Condition_Severity.INFO:
      return "INFO";
    case MembershipState_Condition_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Structured and human-readable details for a status. */
export interface StatusDetails {
  /** A machine-readable code that further describes a broad status. */
  code: string;
  /** Human-readable explanation of code. */
  details: string;
}

function createBaseMembershipSpec(): MembershipSpec {
  return { controlPlane: 0, management: 0 };
}

export const MembershipSpec: MessageFns<MembershipSpec> = {
  encode(message: MembershipSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.controlPlane !== 0) {
      writer.uint32(8).int32(message.controlPlane);
    }
    if (message.management !== 0) {
      writer.uint32(32).int32(message.management);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.controlPlane = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.management = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipSpec {
    return {
      controlPlane: isSet(object.controlPlane) ? membershipSpec_ControlPlaneManagementFromJSON(object.controlPlane) : 0,
      management: isSet(object.management) ? membershipSpec_ManagementFromJSON(object.management) : 0,
    };
  },

  toJSON(message: MembershipSpec): unknown {
    const obj: any = {};
    if (message.controlPlane !== 0) {
      obj.controlPlane = membershipSpec_ControlPlaneManagementToJSON(message.controlPlane);
    }
    if (message.management !== 0) {
      obj.management = membershipSpec_ManagementToJSON(message.management);
    }
    return obj;
  },

  create(base?: DeepPartial<MembershipSpec>): MembershipSpec {
    return MembershipSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MembershipSpec>): MembershipSpec {
    const message = createBaseMembershipSpec();
    message.controlPlane = object.controlPlane ?? 0;
    message.management = object.management ?? 0;
    return message;
  },
};

function createBaseMembershipState(): MembershipState {
  return { controlPlaneManagement: undefined, dataPlaneManagement: undefined, conditions: [] };
}

export const MembershipState: MessageFns<MembershipState> = {
  encode(message: MembershipState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.controlPlaneManagement !== undefined) {
      MembershipState_ControlPlaneManagement.encode(message.controlPlaneManagement, writer.uint32(18).fork()).join();
    }
    if (message.dataPlaneManagement !== undefined) {
      MembershipState_DataPlaneManagement.encode(message.dataPlaneManagement, writer.uint32(34).fork()).join();
    }
    for (const v of message.conditions) {
      MembershipState_Condition.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.controlPlaneManagement = MembershipState_ControlPlaneManagement.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataPlaneManagement = MembershipState_DataPlaneManagement.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.conditions.push(MembershipState_Condition.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipState {
    return {
      controlPlaneManagement: isSet(object.controlPlaneManagement)
        ? MembershipState_ControlPlaneManagement.fromJSON(object.controlPlaneManagement)
        : undefined,
      dataPlaneManagement: isSet(object.dataPlaneManagement)
        ? MembershipState_DataPlaneManagement.fromJSON(object.dataPlaneManagement)
        : undefined,
      conditions: globalThis.Array.isArray(object?.conditions)
        ? object.conditions.map((e: any) => MembershipState_Condition.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MembershipState): unknown {
    const obj: any = {};
    if (message.controlPlaneManagement !== undefined) {
      obj.controlPlaneManagement = MembershipState_ControlPlaneManagement.toJSON(message.controlPlaneManagement);
    }
    if (message.dataPlaneManagement !== undefined) {
      obj.dataPlaneManagement = MembershipState_DataPlaneManagement.toJSON(message.dataPlaneManagement);
    }
    if (message.conditions?.length) {
      obj.conditions = message.conditions.map((e) => MembershipState_Condition.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MembershipState>): MembershipState {
    return MembershipState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MembershipState>): MembershipState {
    const message = createBaseMembershipState();
    message.controlPlaneManagement =
      (object.controlPlaneManagement !== undefined && object.controlPlaneManagement !== null)
        ? MembershipState_ControlPlaneManagement.fromPartial(object.controlPlaneManagement)
        : undefined;
    message.dataPlaneManagement = (object.dataPlaneManagement !== undefined && object.dataPlaneManagement !== null)
      ? MembershipState_DataPlaneManagement.fromPartial(object.dataPlaneManagement)
      : undefined;
    message.conditions = object.conditions?.map((e) => MembershipState_Condition.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMembershipState_ControlPlaneManagement(): MembershipState_ControlPlaneManagement {
  return { details: [], state: 0, implementation: 0 };
}

export const MembershipState_ControlPlaneManagement: MessageFns<MembershipState_ControlPlaneManagement> = {
  encode(message: MembershipState_ControlPlaneManagement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.details) {
      StatusDetails.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.implementation !== 0) {
      writer.uint32(32).int32(message.implementation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipState_ControlPlaneManagement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipState_ControlPlaneManagement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details.push(StatusDetails.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.implementation = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipState_ControlPlaneManagement {
    return {
      details: globalThis.Array.isArray(object?.details)
        ? object.details.map((e: any) => StatusDetails.fromJSON(e))
        : [],
      state: isSet(object.state) ? membershipState_LifecycleStateFromJSON(object.state) : 0,
      implementation: isSet(object.implementation)
        ? membershipState_ControlPlaneManagement_ImplementationFromJSON(object.implementation)
        : 0,
    };
  },

  toJSON(message: MembershipState_ControlPlaneManagement): unknown {
    const obj: any = {};
    if (message.details?.length) {
      obj.details = message.details.map((e) => StatusDetails.toJSON(e));
    }
    if (message.state !== 0) {
      obj.state = membershipState_LifecycleStateToJSON(message.state);
    }
    if (message.implementation !== 0) {
      obj.implementation = membershipState_ControlPlaneManagement_ImplementationToJSON(message.implementation);
    }
    return obj;
  },

  create(base?: DeepPartial<MembershipState_ControlPlaneManagement>): MembershipState_ControlPlaneManagement {
    return MembershipState_ControlPlaneManagement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MembershipState_ControlPlaneManagement>): MembershipState_ControlPlaneManagement {
    const message = createBaseMembershipState_ControlPlaneManagement();
    message.details = object.details?.map((e) => StatusDetails.fromPartial(e)) || [];
    message.state = object.state ?? 0;
    message.implementation = object.implementation ?? 0;
    return message;
  },
};

function createBaseMembershipState_DataPlaneManagement(): MembershipState_DataPlaneManagement {
  return { state: 0, details: [] };
}

export const MembershipState_DataPlaneManagement: MessageFns<MembershipState_DataPlaneManagement> = {
  encode(message: MembershipState_DataPlaneManagement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    for (const v of message.details) {
      StatusDetails.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipState_DataPlaneManagement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipState_DataPlaneManagement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details.push(StatusDetails.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipState_DataPlaneManagement {
    return {
      state: isSet(object.state) ? membershipState_LifecycleStateFromJSON(object.state) : 0,
      details: globalThis.Array.isArray(object?.details)
        ? object.details.map((e: any) => StatusDetails.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MembershipState_DataPlaneManagement): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = membershipState_LifecycleStateToJSON(message.state);
    }
    if (message.details?.length) {
      obj.details = message.details.map((e) => StatusDetails.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MembershipState_DataPlaneManagement>): MembershipState_DataPlaneManagement {
    return MembershipState_DataPlaneManagement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MembershipState_DataPlaneManagement>): MembershipState_DataPlaneManagement {
    const message = createBaseMembershipState_DataPlaneManagement();
    message.state = object.state ?? 0;
    message.details = object.details?.map((e) => StatusDetails.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMembershipState_Condition(): MembershipState_Condition {
  return { code: 0, documentationLink: "", details: "", severity: 0 };
}

export const MembershipState_Condition: MessageFns<MembershipState_Condition> = {
  encode(message: MembershipState_Condition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.documentationLink !== "") {
      writer.uint32(18).string(message.documentationLink);
    }
    if (message.details !== "") {
      writer.uint32(26).string(message.details);
    }
    if (message.severity !== 0) {
      writer.uint32(32).int32(message.severity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipState_Condition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipState_Condition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.documentationLink = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipState_Condition {
    return {
      code: isSet(object.code) ? membershipState_Condition_CodeFromJSON(object.code) : 0,
      documentationLink: isSet(object.documentationLink) ? globalThis.String(object.documentationLink) : "",
      details: isSet(object.details) ? globalThis.String(object.details) : "",
      severity: isSet(object.severity) ? membershipState_Condition_SeverityFromJSON(object.severity) : 0,
    };
  },

  toJSON(message: MembershipState_Condition): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = membershipState_Condition_CodeToJSON(message.code);
    }
    if (message.documentationLink !== "") {
      obj.documentationLink = message.documentationLink;
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    if (message.severity !== 0) {
      obj.severity = membershipState_Condition_SeverityToJSON(message.severity);
    }
    return obj;
  },

  create(base?: DeepPartial<MembershipState_Condition>): MembershipState_Condition {
    return MembershipState_Condition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MembershipState_Condition>): MembershipState_Condition {
    const message = createBaseMembershipState_Condition();
    message.code = object.code ?? 0;
    message.documentationLink = object.documentationLink ?? "";
    message.details = object.details ?? "";
    message.severity = object.severity ?? 0;
    return message;
  },
};

function createBaseStatusDetails(): StatusDetails {
  return { code: "", details: "" };
}

export const StatusDetails: MessageFns<StatusDetails> = {
  encode(message: StatusDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.details !== "") {
      writer.uint32(18).string(message.details);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatusDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusDetails {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      details: isSet(object.details) ? globalThis.String(object.details) : "",
    };
  },

  toJSON(message: StatusDetails): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    return obj;
  },

  create(base?: DeepPartial<StatusDetails>): StatusDetails {
    return StatusDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StatusDetails>): StatusDetails {
    const message = createBaseStatusDetails();
    message.code = object.code ?? "";
    message.details = object.details ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
