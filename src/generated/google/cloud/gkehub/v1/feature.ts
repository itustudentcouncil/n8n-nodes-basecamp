// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkehub/v1/feature.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { MembershipSpec, MembershipState } from "./configmanagement/configmanagement.js";
import { FeatureSpec } from "./multiclusteringress/multiclusteringress.js";

export const protobufPackage = "google.cloud.gkehub.v1";

/** Feature represents the settings and status of any Hub Feature. */
export interface Feature {
  /**
   * Output only. The full, unique name of this Feature resource in the format
   * `projects/* /locations/* /features/*`.
   */
  name: string;
  /** GCP labels for this Feature. */
  labels: { [key: string]: string };
  /** Output only. State of the Feature resource itself. */
  resourceState:
    | FeatureResourceState
    | undefined;
  /**
   * Optional. Hub-wide Feature configuration. If this Feature does not support any
   * Hub-wide configuration, this field may be unused.
   */
  spec:
    | CommonFeatureSpec
    | undefined;
  /**
   * Optional. Membership-specific configuration for this Feature. If this Feature does
   * not support any per-Membership configuration, this field may be unused.
   *
   * The keys indicate which Membership the configuration is for, in the form:
   *
   *     projects/{p}/locations/{l}/memberships/{m}
   *
   * Where {p} is the project, {l} is a valid location and {m} is a valid
   * Membership in this project at that location. {p} WILL match the Feature's
   * project.
   *
   * {p} will always be returned as the project number, but the project ID is
   * also accepted during input. If the same Membership is specified in the map
   * twice (using the project ID form, and the project number form), exactly
   * ONE of the entries will be saved, with no guarantees as to which. For this
   * reason, it is recommended the same format be used for all entries when
   * mutating a Feature.
   */
  membershipSpecs: { [key: string]: MembershipFeatureSpec };
  /** Output only. The Hub-wide Feature state. */
  state:
    | CommonFeatureState
    | undefined;
  /**
   * Output only. Membership-specific Feature status. If this Feature does
   * report any per-Membership status, this field may be unused.
   *
   * The keys indicate which Membership the state is for, in the form:
   *
   *     projects/{p}/locations/{l}/memberships/{m}
   *
   * Where {p} is the project number, {l} is a valid location and {m} is a valid
   * Membership in this project at that location. {p} MUST match the Feature's
   * project number.
   */
  membershipStates: { [key: string]: MembershipFeatureState };
  /** Output only. When the Feature resource was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. When the Feature resource was last updated. */
  updateTime:
    | Date
    | undefined;
  /** Output only. When the Feature resource was deleted. */
  deleteTime: Date | undefined;
}

export interface Feature_LabelsEntry {
  key: string;
  value: string;
}

export interface Feature_MembershipSpecsEntry {
  key: string;
  value: MembershipFeatureSpec | undefined;
}

export interface Feature_MembershipStatesEntry {
  key: string;
  value: MembershipFeatureState | undefined;
}

/**
 * FeatureResourceState describes the state of a Feature *resource* in the
 * GkeHub API. See `FeatureState` for the "running state" of the Feature in the
 * Hub and across Memberships.
 */
export interface FeatureResourceState {
  /** The current state of the Feature resource in the Hub API. */
  state: FeatureResourceState_State;
}

/** State describes the lifecycle status of a Feature. */
export enum FeatureResourceState_State {
  /** STATE_UNSPECIFIED - State is unknown or not set. */
  STATE_UNSPECIFIED = 0,
  /**
   * ENABLING - The Feature is being enabled, and the Feature resource is being created.
   * Once complete, the corresponding Feature will be enabled in this Hub.
   */
  ENABLING = 1,
  /**
   * ACTIVE - The Feature is enabled in this Hub, and the Feature resource is fully
   * available.
   */
  ACTIVE = 2,
  /**
   * DISABLING - The Feature is being disabled in this Hub, and the Feature resource
   * is being deleted.
   */
  DISABLING = 3,
  /** UPDATING - The Feature resource is being updated. */
  UPDATING = 4,
  /** SERVICE_UPDATING - The Feature resource is being updated by the Hub Service. */
  SERVICE_UPDATING = 5,
  UNRECOGNIZED = -1,
}

export function featureResourceState_StateFromJSON(object: any): FeatureResourceState_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return FeatureResourceState_State.STATE_UNSPECIFIED;
    case 1:
    case "ENABLING":
      return FeatureResourceState_State.ENABLING;
    case 2:
    case "ACTIVE":
      return FeatureResourceState_State.ACTIVE;
    case 3:
    case "DISABLING":
      return FeatureResourceState_State.DISABLING;
    case 4:
    case "UPDATING":
      return FeatureResourceState_State.UPDATING;
    case 5:
    case "SERVICE_UPDATING":
      return FeatureResourceState_State.SERVICE_UPDATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureResourceState_State.UNRECOGNIZED;
  }
}

export function featureResourceState_StateToJSON(object: FeatureResourceState_State): string {
  switch (object) {
    case FeatureResourceState_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case FeatureResourceState_State.ENABLING:
      return "ENABLING";
    case FeatureResourceState_State.ACTIVE:
      return "ACTIVE";
    case FeatureResourceState_State.DISABLING:
      return "DISABLING";
    case FeatureResourceState_State.UPDATING:
      return "UPDATING";
    case FeatureResourceState_State.SERVICE_UPDATING:
      return "SERVICE_UPDATING";
    case FeatureResourceState_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * FeatureState describes the high-level state of a Feature. It may be used to
 * describe a Feature's state at the environ-level, or per-membershop, depending
 * on the context.
 */
export interface FeatureState {
  /** The high-level, machine-readable status of this Feature. */
  code: FeatureState_Code;
  /** A human-readable description of the current status. */
  description: string;
  /** The time this status and any related Feature-specific details were updated. */
  updateTime: Date | undefined;
}

/** Code represents a machine-readable, high-level status of the Feature. */
export enum FeatureState_Code {
  /** CODE_UNSPECIFIED - Unknown or not set. */
  CODE_UNSPECIFIED = 0,
  /** OK - The Feature is operating normally. */
  OK = 1,
  /**
   * WARNING - The Feature has encountered an issue, and is operating in a degraded
   * state. The Feature may need intervention to return to normal operation.
   * See the description and any associated Feature-specific details for more
   * information.
   */
  WARNING = 2,
  /**
   * ERROR - The Feature is not operating or is in a severely degraded state.
   * The Feature may need intervention to return to normal operation.
   * See the description and any associated Feature-specific details for more
   * information.
   */
  ERROR = 3,
  UNRECOGNIZED = -1,
}

export function featureState_CodeFromJSON(object: any): FeatureState_Code {
  switch (object) {
    case 0:
    case "CODE_UNSPECIFIED":
      return FeatureState_Code.CODE_UNSPECIFIED;
    case 1:
    case "OK":
      return FeatureState_Code.OK;
    case 2:
    case "WARNING":
      return FeatureState_Code.WARNING;
    case 3:
    case "ERROR":
      return FeatureState_Code.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FeatureState_Code.UNRECOGNIZED;
  }
}

export function featureState_CodeToJSON(object: FeatureState_Code): string {
  switch (object) {
    case FeatureState_Code.CODE_UNSPECIFIED:
      return "CODE_UNSPECIFIED";
    case FeatureState_Code.OK:
      return "OK";
    case FeatureState_Code.WARNING:
      return "WARNING";
    case FeatureState_Code.ERROR:
      return "ERROR";
    case FeatureState_Code.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** CommonFeatureSpec contains Hub-wide configuration information */
export interface CommonFeatureSpec {
  /** Multicluster Ingress-specific spec. */
  multiclusteringress?: FeatureSpec | undefined;
}

/** CommonFeatureState contains Hub-wide Feature status information. */
export interface CommonFeatureState {
  /** Output only. The "running state" of the Feature in this Hub. */
  state: FeatureState | undefined;
}

/**
 * MembershipFeatureSpec contains configuration information for a single
 * Membership.
 */
export interface MembershipFeatureSpec {
  /** Config Management-specific spec. */
  configmanagement?: MembershipSpec | undefined;
}

/**
 * MembershipFeatureState contains Feature status information for a single
 * Membership.
 */
export interface MembershipFeatureState {
  /** Config Management-specific state. */
  configmanagement?:
    | MembershipState
    | undefined;
  /** The high-level state of this Feature for a single membership. */
  state: FeatureState | undefined;
}

function createBaseFeature(): Feature {
  return {
    name: "",
    labels: {},
    resourceState: undefined,
    spec: undefined,
    membershipSpecs: {},
    state: undefined,
    membershipStates: {},
    createTime: undefined,
    updateTime: undefined,
    deleteTime: undefined,
  };
}

export const Feature: MessageFns<Feature> = {
  encode(message: Feature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      Feature_LabelsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    if (message.resourceState !== undefined) {
      FeatureResourceState.encode(message.resourceState, writer.uint32(26).fork()).join();
    }
    if (message.spec !== undefined) {
      CommonFeatureSpec.encode(message.spec, writer.uint32(34).fork()).join();
    }
    Object.entries(message.membershipSpecs).forEach(([key, value]) => {
      Feature_MembershipSpecsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.state !== undefined) {
      CommonFeatureState.encode(message.state, writer.uint32(50).fork()).join();
    }
    Object.entries(message.membershipStates).forEach(([key, value]) => {
      Feature_MembershipStatesEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(66).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(74).fork()).join();
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(toTimestamp(message.deleteTime), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Feature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = Feature_LabelsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.labels[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resourceState = FeatureResourceState.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.spec = CommonFeatureSpec.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = Feature_MembershipSpecsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.membershipSpecs[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.state = CommonFeatureState.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = Feature_MembershipStatesEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.membershipStates[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.deleteTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Feature {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      resourceState: isSet(object.resourceState) ? FeatureResourceState.fromJSON(object.resourceState) : undefined,
      spec: isSet(object.spec) ? CommonFeatureSpec.fromJSON(object.spec) : undefined,
      membershipSpecs: isObject(object.membershipSpecs)
        ? Object.entries(object.membershipSpecs).reduce<{ [key: string]: MembershipFeatureSpec }>(
          (acc, [key, value]) => {
            acc[key] = MembershipFeatureSpec.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      state: isSet(object.state) ? CommonFeatureState.fromJSON(object.state) : undefined,
      membershipStates: isObject(object.membershipStates)
        ? Object.entries(object.membershipStates).reduce<{ [key: string]: MembershipFeatureState }>(
          (acc, [key, value]) => {
            acc[key] = MembershipFeatureState.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
    };
  },

  toJSON(message: Feature): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.resourceState !== undefined) {
      obj.resourceState = FeatureResourceState.toJSON(message.resourceState);
    }
    if (message.spec !== undefined) {
      obj.spec = CommonFeatureSpec.toJSON(message.spec);
    }
    if (message.membershipSpecs) {
      const entries = Object.entries(message.membershipSpecs);
      if (entries.length > 0) {
        obj.membershipSpecs = {};
        entries.forEach(([k, v]) => {
          obj.membershipSpecs[k] = MembershipFeatureSpec.toJSON(v);
        });
      }
    }
    if (message.state !== undefined) {
      obj.state = CommonFeatureState.toJSON(message.state);
    }
    if (message.membershipStates) {
      const entries = Object.entries(message.membershipStates);
      if (entries.length > 0) {
        obj.membershipStates = {};
        entries.forEach(([k, v]) => {
          obj.membershipStates[k] = MembershipFeatureState.toJSON(v);
        });
      }
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = message.deleteTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Feature>): Feature {
    return Feature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Feature>): Feature {
    const message = createBaseFeature();
    message.name = object.name ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.resourceState = (object.resourceState !== undefined && object.resourceState !== null)
      ? FeatureResourceState.fromPartial(object.resourceState)
      : undefined;
    message.spec = (object.spec !== undefined && object.spec !== null)
      ? CommonFeatureSpec.fromPartial(object.spec)
      : undefined;
    message.membershipSpecs = Object.entries(object.membershipSpecs ?? {}).reduce<
      { [key: string]: MembershipFeatureSpec }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = MembershipFeatureSpec.fromPartial(value);
      }
      return acc;
    }, {});
    message.state = (object.state !== undefined && object.state !== null)
      ? CommonFeatureState.fromPartial(object.state)
      : undefined;
    message.membershipStates = Object.entries(object.membershipStates ?? {}).reduce<
      { [key: string]: MembershipFeatureState }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = MembershipFeatureState.fromPartial(value);
      }
      return acc;
    }, {});
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.deleteTime = object.deleteTime ?? undefined;
    return message;
  },
};

function createBaseFeature_LabelsEntry(): Feature_LabelsEntry {
  return { key: "", value: "" };
}

export const Feature_LabelsEntry: MessageFns<Feature_LabelsEntry> = {
  encode(message: Feature_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Feature_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeature_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Feature_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Feature_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Feature_LabelsEntry>): Feature_LabelsEntry {
    return Feature_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Feature_LabelsEntry>): Feature_LabelsEntry {
    const message = createBaseFeature_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseFeature_MembershipSpecsEntry(): Feature_MembershipSpecsEntry {
  return { key: "", value: undefined };
}

export const Feature_MembershipSpecsEntry: MessageFns<Feature_MembershipSpecsEntry> = {
  encode(message: Feature_MembershipSpecsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      MembershipFeatureSpec.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Feature_MembershipSpecsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeature_MembershipSpecsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = MembershipFeatureSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Feature_MembershipSpecsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? MembershipFeatureSpec.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Feature_MembershipSpecsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = MembershipFeatureSpec.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Feature_MembershipSpecsEntry>): Feature_MembershipSpecsEntry {
    return Feature_MembershipSpecsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Feature_MembershipSpecsEntry>): Feature_MembershipSpecsEntry {
    const message = createBaseFeature_MembershipSpecsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? MembershipFeatureSpec.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseFeature_MembershipStatesEntry(): Feature_MembershipStatesEntry {
  return { key: "", value: undefined };
}

export const Feature_MembershipStatesEntry: MessageFns<Feature_MembershipStatesEntry> = {
  encode(message: Feature_MembershipStatesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      MembershipFeatureState.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Feature_MembershipStatesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeature_MembershipStatesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = MembershipFeatureState.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Feature_MembershipStatesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? MembershipFeatureState.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Feature_MembershipStatesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = MembershipFeatureState.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Feature_MembershipStatesEntry>): Feature_MembershipStatesEntry {
    return Feature_MembershipStatesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Feature_MembershipStatesEntry>): Feature_MembershipStatesEntry {
    const message = createBaseFeature_MembershipStatesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? MembershipFeatureState.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseFeatureResourceState(): FeatureResourceState {
  return { state: 0 };
}

export const FeatureResourceState: MessageFns<FeatureResourceState> = {
  encode(message: FeatureResourceState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureResourceState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureResourceState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureResourceState {
    return { state: isSet(object.state) ? featureResourceState_StateFromJSON(object.state) : 0 };
  },

  toJSON(message: FeatureResourceState): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = featureResourceState_StateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureResourceState>): FeatureResourceState {
    return FeatureResourceState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureResourceState>): FeatureResourceState {
    const message = createBaseFeatureResourceState();
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseFeatureState(): FeatureState {
  return { code: 0, description: "", updateTime: undefined };
}

export const FeatureState: MessageFns<FeatureState> = {
  encode(message: FeatureState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeatureState {
    return {
      code: isSet(object.code) ? featureState_CodeFromJSON(object.code) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: FeatureState): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = featureState_CodeToJSON(message.code);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureState>): FeatureState {
    return FeatureState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureState>): FeatureState {
    const message = createBaseFeatureState();
    message.code = object.code ?? 0;
    message.description = object.description ?? "";
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseCommonFeatureSpec(): CommonFeatureSpec {
  return { multiclusteringress: undefined };
}

export const CommonFeatureSpec: MessageFns<CommonFeatureSpec> = {
  encode(message: CommonFeatureSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.multiclusteringress !== undefined) {
      FeatureSpec.encode(message.multiclusteringress, writer.uint32(818).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonFeatureSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonFeatureSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 102:
          if (tag !== 818) {
            break;
          }

          message.multiclusteringress = FeatureSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonFeatureSpec {
    return {
      multiclusteringress: isSet(object.multiclusteringress)
        ? FeatureSpec.fromJSON(object.multiclusteringress)
        : undefined,
    };
  },

  toJSON(message: CommonFeatureSpec): unknown {
    const obj: any = {};
    if (message.multiclusteringress !== undefined) {
      obj.multiclusteringress = FeatureSpec.toJSON(message.multiclusteringress);
    }
    return obj;
  },

  create(base?: DeepPartial<CommonFeatureSpec>): CommonFeatureSpec {
    return CommonFeatureSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommonFeatureSpec>): CommonFeatureSpec {
    const message = createBaseCommonFeatureSpec();
    message.multiclusteringress = (object.multiclusteringress !== undefined && object.multiclusteringress !== null)
      ? FeatureSpec.fromPartial(object.multiclusteringress)
      : undefined;
    return message;
  },
};

function createBaseCommonFeatureState(): CommonFeatureState {
  return { state: undefined };
}

export const CommonFeatureState: MessageFns<CommonFeatureState> = {
  encode(message: CommonFeatureState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== undefined) {
      FeatureState.encode(message.state, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonFeatureState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonFeatureState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.state = FeatureState.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonFeatureState {
    return { state: isSet(object.state) ? FeatureState.fromJSON(object.state) : undefined };
  },

  toJSON(message: CommonFeatureState): unknown {
    const obj: any = {};
    if (message.state !== undefined) {
      obj.state = FeatureState.toJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<CommonFeatureState>): CommonFeatureState {
    return CommonFeatureState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommonFeatureState>): CommonFeatureState {
    const message = createBaseCommonFeatureState();
    message.state = (object.state !== undefined && object.state !== null)
      ? FeatureState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

function createBaseMembershipFeatureSpec(): MembershipFeatureSpec {
  return { configmanagement: undefined };
}

export const MembershipFeatureSpec: MessageFns<MembershipFeatureSpec> = {
  encode(message: MembershipFeatureSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.configmanagement !== undefined) {
      MembershipSpec.encode(message.configmanagement, writer.uint32(850).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipFeatureSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipFeatureSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 106:
          if (tag !== 850) {
            break;
          }

          message.configmanagement = MembershipSpec.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipFeatureSpec {
    return {
      configmanagement: isSet(object.configmanagement) ? MembershipSpec.fromJSON(object.configmanagement) : undefined,
    };
  },

  toJSON(message: MembershipFeatureSpec): unknown {
    const obj: any = {};
    if (message.configmanagement !== undefined) {
      obj.configmanagement = MembershipSpec.toJSON(message.configmanagement);
    }
    return obj;
  },

  create(base?: DeepPartial<MembershipFeatureSpec>): MembershipFeatureSpec {
    return MembershipFeatureSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MembershipFeatureSpec>): MembershipFeatureSpec {
    const message = createBaseMembershipFeatureSpec();
    message.configmanagement = (object.configmanagement !== undefined && object.configmanagement !== null)
      ? MembershipSpec.fromPartial(object.configmanagement)
      : undefined;
    return message;
  },
};

function createBaseMembershipFeatureState(): MembershipFeatureState {
  return { configmanagement: undefined, state: undefined };
}

export const MembershipFeatureState: MessageFns<MembershipFeatureState> = {
  encode(message: MembershipFeatureState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.configmanagement !== undefined) {
      MembershipState.encode(message.configmanagement, writer.uint32(850).fork()).join();
    }
    if (message.state !== undefined) {
      FeatureState.encode(message.state, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MembershipFeatureState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMembershipFeatureState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 106:
          if (tag !== 850) {
            break;
          }

          message.configmanagement = MembershipState.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag !== 10) {
            break;
          }

          message.state = FeatureState.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MembershipFeatureState {
    return {
      configmanagement: isSet(object.configmanagement) ? MembershipState.fromJSON(object.configmanagement) : undefined,
      state: isSet(object.state) ? FeatureState.fromJSON(object.state) : undefined,
    };
  },

  toJSON(message: MembershipFeatureState): unknown {
    const obj: any = {};
    if (message.configmanagement !== undefined) {
      obj.configmanagement = MembershipState.toJSON(message.configmanagement);
    }
    if (message.state !== undefined) {
      obj.state = FeatureState.toJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<MembershipFeatureState>): MembershipFeatureState {
    return MembershipFeatureState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MembershipFeatureState>): MembershipFeatureState {
    const message = createBaseMembershipFeatureState();
    message.configmanagement = (object.configmanagement !== undefined && object.configmanagement !== null)
      ? MembershipState.fromPartial(object.configmanagement)
      : undefined;
    message.state = (object.state !== undefined && object.state !== null)
      ? FeatureState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
