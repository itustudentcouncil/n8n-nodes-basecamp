// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/gkehub/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import { Feature } from "./feature.js";
import { Membership } from "./membership.js";

export const protobufPackage = "google.cloud.gkehub.v1";

/** Request message for `GkeHub.ListMemberships` method. */
export interface ListMembershipsRequest {
  /**
   * Required. The parent (project and location) where the Memberships will be
   * listed. Specified in the format `projects/* /locations/*`.
   * `projects/* /locations/-` list memberships in all the regions.
   */
  parent: string;
  /**
   * Optional. When requesting a 'page' of resources, `page_size` specifies
   * number of resources to return. If unspecified or set to 0, all resources
   * will be returned.
   */
  pageSize: number;
  /**
   * Optional. Token returned by previous call to `ListMemberships` which
   * specifies the position in the list from where to continue listing the
   * resources.
   */
  pageToken: string;
  /**
   * Optional. Lists Memberships that match the filter expression, following the
   * syntax outlined in https://google.aip.dev/160.
   *
   * Examples:
   *
   *   - Name is `bar` in project `foo-proj` and location `global`:
   *
   *       name = "projects/foo-proj/locations/global/membership/bar"
   *
   *   - Memberships that have a label called `foo`:
   *
   *       labels.foo:*
   *
   *   - Memberships that have a label called `foo` whose value is `bar`:
   *
   *       labels.foo = bar
   *
   *   - Memberships in the CREATING state:
   *
   *       state = CREATING
   */
  filter: string;
  /**
   * Optional. One or more fields to compare and use to sort the output.
   * See https://google.aip.dev/132#ordering.
   */
  orderBy: string;
}

/** Response message for the `GkeHub.ListMemberships` method. */
export interface ListMembershipsResponse {
  /** The list of matching Memberships. */
  resources: Membership[];
  /**
   * A token to request the next page of resources from the
   * `ListMemberships` method. The value of an empty string means that
   * there are no more resources to return.
   */
  nextPageToken: string;
  /** List of locations that could not be reached while fetching this list. */
  unreachable: string[];
}

/** Request message for `GkeHub.GetMembership` method. */
export interface GetMembershipRequest {
  /**
   * Required. The Membership resource name in the format
   * `projects/* /locations/* /memberships/*`.
   */
  name: string;
}

/** Request message for the `GkeHub.CreateMembership` method. */
export interface CreateMembershipRequest {
  /**
   * Required. The parent (project and location) where the Memberships will be
   * created. Specified in the format `projects/* /locations/*`.
   */
  parent: string;
  /**
   * Required. Client chosen ID for the membership. `membership_id` must be a
   * valid RFC 1123 compliant DNS label:
   *
   *   1. At most 63 characters in length
   *   2. It must consist of lower case alphanumeric characters or `-`
   *   3. It must start and end with an alphanumeric character
   *
   * Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`,
   * with a maximum length of 63 characters.
   */
  membershipId: string;
  /** Required. The membership to create. */
  resource:
    | Membership
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request message for `GkeHub.DeleteMembership` method. */
export interface DeleteMembershipRequest {
  /**
   * Required. The Membership resource name in the format
   * `projects/* /locations/* /memberships/*`.
   */
  name: string;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
  /**
   * Optional. If set to true, any subresource from this Membership will also be
   * deleted. Otherwise, the request will only work if the Membership has no
   * subresource.
   */
  force: boolean;
}

/** Request message for `GkeHub.UpdateMembership` method. */
export interface UpdateMembershipRequest {
  /**
   * Required. The Membership resource name in the format
   * `projects/* /locations/* /memberships/*`.
   */
  name: string;
  /** Required. Mask of fields to update. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Required. Only fields specified in update_mask are updated.
   * If you specify a field in the update_mask but don't specify its value here
   * that field will be deleted.
   * If you are updating a map field, set the value of a key to null or empty
   * string to delete the key from the map. It's not possible to update a key's
   * value to the empty string.
   * If you specify the update_mask to be a special path "*", fully replaces all
   * user-modifiable fields to match `resource`.
   */
  resource:
    | Membership
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/**
 * Request message for `GkeHub.GenerateConnectManifest`
 * method.
 * .
 */
export interface GenerateConnectManifestRequest {
  /**
   * Required. The Membership resource name the Agent will associate with, in
   * the format `projects/* /locations/* /memberships/*`.
   */
  name: string;
  /**
   * Optional. Namespace for GKE Connect agent resources. Defaults to
   * `gke-connect`.
   *
   * The Connect Agent is authorized automatically when run in the default
   * namespace. Otherwise, explicit authorization must be granted with an
   * additional IAM binding.
   */
  namespace: string;
  /**
   * Optional. URI of a proxy if connectivity from the agent to
   * gkeconnect.googleapis.com requires the use of a proxy. Format must be in
   * the form `http(s)://{proxy_address}`, depending on the HTTP/HTTPS protocol
   * supported by the proxy. This will direct the connect agent's outbound
   * traffic through a HTTP(S) proxy.
   */
  proxy: Buffer;
  /**
   * Optional. The Connect agent version to use. Defaults to the most current
   * version.
   */
  version: string;
  /**
   * Optional. If true, generate the resources for upgrade only. Some resources
   * generated only for installation (e.g. secrets) will be excluded.
   */
  isUpgrade: boolean;
  /**
   * Optional. The registry to fetch the connect agent image from. Defaults to
   * gcr.io/gkeconnect.
   */
  registry: string;
  /** Optional. The image pull secret content for the registry, if not public. */
  imagePullSecretContent: Buffer;
}

/**
 * GenerateConnectManifestResponse contains manifest information for
 * installing/upgrading a Connect agent.
 */
export interface GenerateConnectManifestResponse {
  /**
   * The ordered list of Kubernetes resources that need to be applied to the
   * cluster for GKE Connect agent installation/upgrade.
   */
  manifest: ConnectAgentResource[];
}

/**
 * ConnectAgentResource represents a Kubernetes resource manifest for Connect
 * Agent deployment.
 */
export interface ConnectAgentResource {
  /** Kubernetes type of the resource. */
  type:
    | TypeMeta
    | undefined;
  /** YAML manifest of the resource. */
  manifest: string;
}

/**
 * TypeMeta is the type information needed for content unmarshalling of
 * Kubernetes resources in the manifest.
 */
export interface TypeMeta {
  /** Kind of the resource (e.g. Deployment). */
  kind: string;
  /** APIVersion of the resource (e.g. v1). */
  apiVersion: string;
}

/** Request message for `GkeHub.ListFeatures` method. */
export interface ListFeaturesRequest {
  /**
   * Required. The parent (project and location) where the Features will be listed.
   * Specified in the format `projects/* /locations/*`.
   */
  parent: string;
  /**
   * When requesting a 'page' of resources, `page_size` specifies number of
   * resources to return. If unspecified or set to 0, all resources will
   * be returned.
   */
  pageSize: number;
  /**
   * Token returned by previous call to `ListFeatures` which
   * specifies the position in the list from where to continue listing the
   * resources.
   */
  pageToken: string;
  /**
   * Lists Features that match the filter expression, following the syntax
   * outlined in https://google.aip.dev/160.
   *
   * Examples:
   *
   *   - Feature with the name "servicemesh" in project "foo-proj":
   *
   *       name = "projects/foo-proj/locations/global/features/servicemesh"
   *
   *   - Features that have a label called `foo`:
   *
   *       labels.foo:*
   *
   *   - Features that have a label called `foo` whose value is `bar`:
   *
   *       labels.foo = bar
   */
  filter: string;
  /**
   * One or more fields to compare and use to sort the output.
   * See https://google.aip.dev/132#ordering.
   */
  orderBy: string;
}

/** Response message for the `GkeHub.ListFeatures` method. */
export interface ListFeaturesResponse {
  /** The list of matching Features */
  resources: Feature[];
  /**
   * A token to request the next page of resources from the
   * `ListFeatures` method. The value of an empty string means
   * that there are no more resources to return.
   */
  nextPageToken: string;
}

/** Request message for `GkeHub.GetFeature` method. */
export interface GetFeatureRequest {
  /**
   * Required. The Feature resource name in the format
   * `projects/* /locations/* /features/*`
   */
  name: string;
}

/** Request message for the `GkeHub.CreateFeature` method. */
export interface CreateFeatureRequest {
  /**
   * Required. The parent (project and location) where the Feature will be created.
   * Specified in the format `projects/* /locations/*`.
   */
  parent: string;
  /** The ID of the feature to create. */
  featureId: string;
  /** The Feature resource to create. */
  resource:
    | Feature
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request message for `GkeHub.DeleteFeature` method. */
export interface DeleteFeatureRequest {
  /**
   * Required. The Feature resource name in the format
   * `projects/* /locations/* /features/*`.
   */
  name: string;
  /**
   * If set to true, the delete will ignore any outstanding resources for
   * this Feature (that is, `FeatureState.has_resources` is set to true). These
   * resources will NOT be cleaned up or modified in any way.
   */
  force: boolean;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Request message for `GkeHub.UpdateFeature` method. */
export interface UpdateFeatureRequest {
  /**
   * Required. The Feature resource name in the format
   * `projects/* /locations/* /features/*`.
   */
  name: string;
  /** Mask of fields to update. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Only fields specified in update_mask are updated.
   * If you specify a field in the update_mask but don't specify its value here
   * that field will be deleted.
   * If you are updating a map field, set the value of a key to null or empty
   * string to delete the key from the map. It's not possible to update a key's
   * value to the empty string.
   * If you specify the update_mask to be a special path "*", fully replaces all
   * user-modifiable fields to match `resource`.
   */
  resource:
    | Feature
    | undefined;
  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   */
  requestId: string;
}

/** Represents the metadata of the long-running operation. */
export interface OperationMetadata {
  /** Output only. The time the operation was created. */
  createTime:
    | Date
    | undefined;
  /** Output only. The time the operation finished running. */
  endTime:
    | Date
    | undefined;
  /** Output only. Server-defined resource path for the target of the operation. */
  target: string;
  /** Output only. Name of the verb executed by the operation. */
  verb: string;
  /** Output only. Human-readable status of the operation, if any. */
  statusDetail: string;
  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   */
  cancelRequested: boolean;
  /** Output only. API version used to start the operation. */
  apiVersion: string;
}

function createBaseListMembershipsRequest(): ListMembershipsRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListMembershipsRequest: MessageFns<ListMembershipsRequest> = {
  encode(message: ListMembershipsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMembershipsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMembershipsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMembershipsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListMembershipsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMembershipsRequest>): ListMembershipsRequest {
    return ListMembershipsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMembershipsRequest>): ListMembershipsRequest {
    const message = createBaseListMembershipsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListMembershipsResponse(): ListMembershipsResponse {
  return { resources: [], nextPageToken: "", unreachable: [] };
}

export const ListMembershipsResponse: MessageFns<ListMembershipsResponse> = {
  encode(message: ListMembershipsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resources) {
      Membership.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    for (const v of message.unreachable) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMembershipsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMembershipsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resources.push(Membership.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unreachable.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMembershipsResponse {
    return {
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => Membership.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      unreachable: globalThis.Array.isArray(object?.unreachable)
        ? object.unreachable.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListMembershipsResponse): unknown {
    const obj: any = {};
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => Membership.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.unreachable?.length) {
      obj.unreachable = message.unreachable;
    }
    return obj;
  },

  create(base?: DeepPartial<ListMembershipsResponse>): ListMembershipsResponse {
    return ListMembershipsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMembershipsResponse>): ListMembershipsResponse {
    const message = createBaseListMembershipsResponse();
    message.resources = object.resources?.map((e) => Membership.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.unreachable = object.unreachable?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetMembershipRequest(): GetMembershipRequest {
  return { name: "" };
}

export const GetMembershipRequest: MessageFns<GetMembershipRequest> = {
  encode(message: GetMembershipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMembershipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMembershipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMembershipRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetMembershipRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetMembershipRequest>): GetMembershipRequest {
    return GetMembershipRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMembershipRequest>): GetMembershipRequest {
    const message = createBaseGetMembershipRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateMembershipRequest(): CreateMembershipRequest {
  return { parent: "", membershipId: "", resource: undefined, requestId: "" };
}

export const CreateMembershipRequest: MessageFns<CreateMembershipRequest> = {
  encode(message: CreateMembershipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.membershipId !== "") {
      writer.uint32(18).string(message.membershipId);
    }
    if (message.resource !== undefined) {
      Membership.encode(message.resource, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMembershipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMembershipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.membershipId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = Membership.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMembershipRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      membershipId: isSet(object.membershipId) ? globalThis.String(object.membershipId) : "",
      resource: isSet(object.resource) ? Membership.fromJSON(object.resource) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateMembershipRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.membershipId !== "") {
      obj.membershipId = message.membershipId;
    }
    if (message.resource !== undefined) {
      obj.resource = Membership.toJSON(message.resource);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateMembershipRequest>): CreateMembershipRequest {
    return CreateMembershipRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateMembershipRequest>): CreateMembershipRequest {
    const message = createBaseCreateMembershipRequest();
    message.parent = object.parent ?? "";
    message.membershipId = object.membershipId ?? "";
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? Membership.fromPartial(object.resource)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteMembershipRequest(): DeleteMembershipRequest {
  return { name: "", requestId: "", force: false };
}

export const DeleteMembershipRequest: MessageFns<DeleteMembershipRequest> = {
  encode(message: DeleteMembershipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.force !== false) {
      writer.uint32(24).bool(message.force);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMembershipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMembershipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.force = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMembershipRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
    };
  },

  toJSON(message: DeleteMembershipRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMembershipRequest>): DeleteMembershipRequest {
    return DeleteMembershipRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMembershipRequest>): DeleteMembershipRequest {
    const message = createBaseDeleteMembershipRequest();
    message.name = object.name ?? "";
    message.requestId = object.requestId ?? "";
    message.force = object.force ?? false;
    return message;
  },
};

function createBaseUpdateMembershipRequest(): UpdateMembershipRequest {
  return { name: "", updateMask: undefined, resource: undefined, requestId: "" };
}

export const UpdateMembershipRequest: MessageFns<UpdateMembershipRequest> = {
  encode(message: UpdateMembershipRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.resource !== undefined) {
      Membership.encode(message.resource, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMembershipRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMembershipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = Membership.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMembershipRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      resource: isSet(object.resource) ? Membership.fromJSON(object.resource) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateMembershipRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.resource !== undefined) {
      obj.resource = Membership.toJSON(message.resource);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateMembershipRequest>): UpdateMembershipRequest {
    return UpdateMembershipRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMembershipRequest>): UpdateMembershipRequest {
    const message = createBaseUpdateMembershipRequest();
    message.name = object.name ?? "";
    message.updateMask = object.updateMask ?? undefined;
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? Membership.fromPartial(object.resource)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGenerateConnectManifestRequest(): GenerateConnectManifestRequest {
  return {
    name: "",
    namespace: "",
    proxy: Buffer.alloc(0),
    version: "",
    isUpgrade: false,
    registry: "",
    imagePullSecretContent: Buffer.alloc(0),
  };
}

export const GenerateConnectManifestRequest: MessageFns<GenerateConnectManifestRequest> = {
  encode(message: GenerateConnectManifestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.namespace !== "") {
      writer.uint32(18).string(message.namespace);
    }
    if (message.proxy.length !== 0) {
      writer.uint32(26).bytes(message.proxy);
    }
    if (message.version !== "") {
      writer.uint32(34).string(message.version);
    }
    if (message.isUpgrade !== false) {
      writer.uint32(40).bool(message.isUpgrade);
    }
    if (message.registry !== "") {
      writer.uint32(50).string(message.registry);
    }
    if (message.imagePullSecretContent.length !== 0) {
      writer.uint32(58).bytes(message.imagePullSecretContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateConnectManifestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateConnectManifestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.namespace = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.proxy = Buffer.from(reader.bytes());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.version = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isUpgrade = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.registry = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.imagePullSecretContent = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateConnectManifestRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      proxy: isSet(object.proxy) ? Buffer.from(bytesFromBase64(object.proxy)) : Buffer.alloc(0),
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      isUpgrade: isSet(object.isUpgrade) ? globalThis.Boolean(object.isUpgrade) : false,
      registry: isSet(object.registry) ? globalThis.String(object.registry) : "",
      imagePullSecretContent: isSet(object.imagePullSecretContent)
        ? Buffer.from(bytesFromBase64(object.imagePullSecretContent))
        : Buffer.alloc(0),
    };
  },

  toJSON(message: GenerateConnectManifestRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.proxy.length !== 0) {
      obj.proxy = base64FromBytes(message.proxy);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.isUpgrade !== false) {
      obj.isUpgrade = message.isUpgrade;
    }
    if (message.registry !== "") {
      obj.registry = message.registry;
    }
    if (message.imagePullSecretContent.length !== 0) {
      obj.imagePullSecretContent = base64FromBytes(message.imagePullSecretContent);
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateConnectManifestRequest>): GenerateConnectManifestRequest {
    return GenerateConnectManifestRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateConnectManifestRequest>): GenerateConnectManifestRequest {
    const message = createBaseGenerateConnectManifestRequest();
    message.name = object.name ?? "";
    message.namespace = object.namespace ?? "";
    message.proxy = object.proxy ?? Buffer.alloc(0);
    message.version = object.version ?? "";
    message.isUpgrade = object.isUpgrade ?? false;
    message.registry = object.registry ?? "";
    message.imagePullSecretContent = object.imagePullSecretContent ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseGenerateConnectManifestResponse(): GenerateConnectManifestResponse {
  return { manifest: [] };
}

export const GenerateConnectManifestResponse: MessageFns<GenerateConnectManifestResponse> = {
  encode(message: GenerateConnectManifestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.manifest) {
      ConnectAgentResource.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateConnectManifestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateConnectManifestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.manifest.push(ConnectAgentResource.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateConnectManifestResponse {
    return {
      manifest: globalThis.Array.isArray(object?.manifest)
        ? object.manifest.map((e: any) => ConnectAgentResource.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenerateConnectManifestResponse): unknown {
    const obj: any = {};
    if (message.manifest?.length) {
      obj.manifest = message.manifest.map((e) => ConnectAgentResource.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenerateConnectManifestResponse>): GenerateConnectManifestResponse {
    return GenerateConnectManifestResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateConnectManifestResponse>): GenerateConnectManifestResponse {
    const message = createBaseGenerateConnectManifestResponse();
    message.manifest = object.manifest?.map((e) => ConnectAgentResource.fromPartial(e)) || [];
    return message;
  },
};

function createBaseConnectAgentResource(): ConnectAgentResource {
  return { type: undefined, manifest: "" };
}

export const ConnectAgentResource: MessageFns<ConnectAgentResource> = {
  encode(message: ConnectAgentResource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      TypeMeta.encode(message.type, writer.uint32(10).fork()).join();
    }
    if (message.manifest !== "") {
      writer.uint32(18).string(message.manifest);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectAgentResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectAgentResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = TypeMeta.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.manifest = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectAgentResource {
    return {
      type: isSet(object.type) ? TypeMeta.fromJSON(object.type) : undefined,
      manifest: isSet(object.manifest) ? globalThis.String(object.manifest) : "",
    };
  },

  toJSON(message: ConnectAgentResource): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = TypeMeta.toJSON(message.type);
    }
    if (message.manifest !== "") {
      obj.manifest = message.manifest;
    }
    return obj;
  },

  create(base?: DeepPartial<ConnectAgentResource>): ConnectAgentResource {
    return ConnectAgentResource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConnectAgentResource>): ConnectAgentResource {
    const message = createBaseConnectAgentResource();
    message.type = (object.type !== undefined && object.type !== null) ? TypeMeta.fromPartial(object.type) : undefined;
    message.manifest = object.manifest ?? "";
    return message;
  },
};

function createBaseTypeMeta(): TypeMeta {
  return { kind: "", apiVersion: "" };
}

export const TypeMeta: MessageFns<TypeMeta> = {
  encode(message: TypeMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== "") {
      writer.uint32(10).string(message.kind);
    }
    if (message.apiVersion !== "") {
      writer.uint32(18).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TypeMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTypeMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kind = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TypeMeta {
    return {
      kind: isSet(object.kind) ? globalThis.String(object.kind) : "",
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: TypeMeta): unknown {
    const obj: any = {};
    if (message.kind !== "") {
      obj.kind = message.kind;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<TypeMeta>): TypeMeta {
    return TypeMeta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TypeMeta>): TypeMeta {
    const message = createBaseTypeMeta();
    message.kind = object.kind ?? "";
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

function createBaseListFeaturesRequest(): ListFeaturesRequest {
  return { parent: "", pageSize: 0, pageToken: "", filter: "", orderBy: "" };
}

export const ListFeaturesRequest: MessageFns<ListFeaturesRequest> = {
  encode(message: ListFeaturesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeaturesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeaturesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeaturesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListFeaturesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeaturesRequest>): ListFeaturesRequest {
    return ListFeaturesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeaturesRequest>): ListFeaturesRequest {
    const message = createBaseListFeaturesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

function createBaseListFeaturesResponse(): ListFeaturesResponse {
  return { resources: [], nextPageToken: "" };
}

export const ListFeaturesResponse: MessageFns<ListFeaturesResponse> = {
  encode(message: ListFeaturesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resources) {
      Feature.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFeaturesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFeaturesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resources.push(Feature.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFeaturesResponse {
    return {
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => Feature.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListFeaturesResponse): unknown {
    const obj: any = {};
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => Feature.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFeaturesResponse>): ListFeaturesResponse {
    return ListFeaturesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFeaturesResponse>): ListFeaturesResponse {
    const message = createBaseListFeaturesResponse();
    message.resources = object.resources?.map((e) => Feature.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetFeatureRequest(): GetFeatureRequest {
  return { name: "" };
}

export const GetFeatureRequest: MessageFns<GetFeatureRequest> = {
  encode(message: GetFeatureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFeatureRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetFeatureRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetFeatureRequest>): GetFeatureRequest {
    return GetFeatureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFeatureRequest>): GetFeatureRequest {
    const message = createBaseGetFeatureRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateFeatureRequest(): CreateFeatureRequest {
  return { parent: "", featureId: "", resource: undefined, requestId: "" };
}

export const CreateFeatureRequest: MessageFns<CreateFeatureRequest> = {
  encode(message: CreateFeatureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.featureId !== "") {
      writer.uint32(18).string(message.featureId);
    }
    if (message.resource !== undefined) {
      Feature.encode(message.resource, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFeatureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFeatureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.featureId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = Feature.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFeatureRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      featureId: isSet(object.featureId) ? globalThis.String(object.featureId) : "",
      resource: isSet(object.resource) ? Feature.fromJSON(object.resource) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: CreateFeatureRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.featureId !== "") {
      obj.featureId = message.featureId;
    }
    if (message.resource !== undefined) {
      obj.resource = Feature.toJSON(message.resource);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateFeatureRequest>): CreateFeatureRequest {
    return CreateFeatureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateFeatureRequest>): CreateFeatureRequest {
    const message = createBaseCreateFeatureRequest();
    message.parent = object.parent ?? "";
    message.featureId = object.featureId ?? "";
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? Feature.fromPartial(object.resource)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseDeleteFeatureRequest(): DeleteFeatureRequest {
  return { name: "", force: false, requestId: "" };
}

export const DeleteFeatureRequest: MessageFns<DeleteFeatureRequest> = {
  encode(message: DeleteFeatureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.force !== false) {
      writer.uint32(16).bool(message.force);
    }
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFeatureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFeatureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.force = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFeatureRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      force: isSet(object.force) ? globalThis.Boolean(object.force) : false,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: DeleteFeatureRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.force !== false) {
      obj.force = message.force;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFeatureRequest>): DeleteFeatureRequest {
    return DeleteFeatureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFeatureRequest>): DeleteFeatureRequest {
    const message = createBaseDeleteFeatureRequest();
    message.name = object.name ?? "";
    message.force = object.force ?? false;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseUpdateFeatureRequest(): UpdateFeatureRequest {
  return { name: "", updateMask: undefined, resource: undefined, requestId: "" };
}

export const UpdateFeatureRequest: MessageFns<UpdateFeatureRequest> = {
  encode(message: UpdateFeatureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.resource !== undefined) {
      Feature.encode(message.resource, writer.uint32(26).fork()).join();
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFeatureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFeatureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resource = Feature.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFeatureRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      resource: isSet(object.resource) ? Feature.fromJSON(object.resource) : undefined,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
    };
  },

  toJSON(message: UpdateFeatureRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.resource !== undefined) {
      obj.resource = Feature.toJSON(message.resource);
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateFeatureRequest>): UpdateFeatureRequest {
    return UpdateFeatureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateFeatureRequest>): UpdateFeatureRequest {
    const message = createBaseUpdateFeatureRequest();
    message.name = object.name ?? "";
    message.updateMask = object.updateMask ?? undefined;
    message.resource = (object.resource !== undefined && object.resource !== null)
      ? Feature.fromPartial(object.resource)
      : undefined;
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseOperationMetadata(): OperationMetadata {
  return {
    createTime: undefined,
    endTime: undefined,
    target: "",
    verb: "",
    statusDetail: "",
    cancelRequested: false,
    apiVersion: "",
  };
}

export const OperationMetadata: MessageFns<OperationMetadata> = {
  encode(message: OperationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(26).string(message.target);
    }
    if (message.verb !== "") {
      writer.uint32(34).string(message.verb);
    }
    if (message.statusDetail !== "") {
      writer.uint32(42).string(message.statusDetail);
    }
    if (message.cancelRequested !== false) {
      writer.uint32(48).bool(message.cancelRequested);
    }
    if (message.apiVersion !== "") {
      writer.uint32(58).string(message.apiVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.target = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.verb = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.statusDetail = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.cancelRequested = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.apiVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationMetadata {
    return {
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      verb: isSet(object.verb) ? globalThis.String(object.verb) : "",
      statusDetail: isSet(object.statusDetail) ? globalThis.String(object.statusDetail) : "",
      cancelRequested: isSet(object.cancelRequested) ? globalThis.Boolean(object.cancelRequested) : false,
      apiVersion: isSet(object.apiVersion) ? globalThis.String(object.apiVersion) : "",
    };
  },

  toJSON(message: OperationMetadata): unknown {
    const obj: any = {};
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.verb !== "") {
      obj.verb = message.verb;
    }
    if (message.statusDetail !== "") {
      obj.statusDetail = message.statusDetail;
    }
    if (message.cancelRequested !== false) {
      obj.cancelRequested = message.cancelRequested;
    }
    if (message.apiVersion !== "") {
      obj.apiVersion = message.apiVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationMetadata>): OperationMetadata {
    return OperationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationMetadata>): OperationMetadata {
    const message = createBaseOperationMetadata();
    message.createTime = object.createTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.target = object.target ?? "";
    message.verb = object.verb ?? "";
    message.statusDetail = object.statusDetail ?? "";
    message.cancelRequested = object.cancelRequested ?? false;
    message.apiVersion = object.apiVersion ?? "";
    return message;
  },
};

/**
 * The GKE Hub service handles the registration of many Kubernetes clusters to
 * Google Cloud, and the management of multi-cluster features over those
 * clusters.
 *
 * The GKE Hub service operates on the following resources:
 *
 * * [Membership][google.cloud.gkehub.v1.Membership]
 * * [Feature][google.cloud.gkehub.v1.Feature]
 *
 * GKE Hub is currently available in the global region and all regions in
 * https://cloud.google.com/compute/docs/regions-zones. Feature is only
 * available in global region while membership is global region and all the
 * regions.
 *
 * **Membership management may be non-trivial:** it is recommended to use one
 * of the Google-provided client libraries or tools where possible when working
 * with Membership resources.
 */
export type GkeHubDefinition = typeof GkeHubDefinition;
export const GkeHubDefinition = {
  name: "GkeHub",
  fullName: "google.cloud.gkehub.v1.GkeHub",
  methods: {
    /** Lists Memberships in a given project and location. */
    listMemberships: {
      name: "ListMemberships",
      requestType: ListMembershipsRequest,
      requestStream: false,
      responseType: ListMembershipsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Lists Features in a given project and location. */
    listFeatures: {
      name: "ListFeatures",
      requestType: ListFeaturesRequest,
      requestStream: false,
      responseType: ListFeaturesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Gets the details of a Membership. */
    getMembership: {
      name: "GetMembership",
      requestType: GetMembershipRequest,
      requestStream: false,
      responseType: Membership,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              18,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets details of a single Feature. */
    getFeature: {
      name: "GetFeature",
      requestType: GetFeatureRequest,
      requestStream: false,
      responseType: Feature,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              18,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a new Membership.
     *
     * **This is currently only supported for GKE clusters on Google Cloud**.
     * To register other clusters, follow the instructions at
     * https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
     */
    createMembership: {
      name: "CreateMembership",
      requestType: CreateMembershipRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              29,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              8,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              47,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
            ]),
          ],
        },
      },
    },
    /** Adds a new Feature. */
    createFeature: {
      name: "CreateFeature",
      requestType: CreateFeatureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              26,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              95,
              105,
              100,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              8,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              44,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Removes a Membership.
     *
     * **This is currently only supported for GKE clusters on Google Cloud**.
     * To unregister other clusters, follow the instructions at
     * https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
     */
    deleteMembership: {
      name: "DeleteMembership",
      requestType: DeleteMembershipRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              49,
              42,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Removes a Feature. */
    deleteFeature: {
      name: "DeleteFeature",
      requestType: DeleteFeatureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              42,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              46,
              42,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an existing Membership. */
    updateMembership: {
      name: "UpdateMembership",
      requestType: UpdateMembershipRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              31,
              10,
              10,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              110,
              97,
              109,
              101,
              44,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              59,
              58,
              8,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              50,
              47,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Updates an existing Feature. */
    updateFeature: {
      name: "UpdateFeature",
      requestType: UpdateFeatureRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              28,
              10,
              7,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              18,
              17,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
          8410: [
            Buffer.from([
              25,
              110,
              97,
              109,
              101,
              44,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              56,
              58,
              8,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              50,
              44,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Generates the manifest for deployment of the GKE connect agent.
     *
     * **This method is used internally by Google-provided libraries.**
     * Most clients should not need to call this method directly.
     */
    generateConnectManifest: {
      name: "GenerateConnectManifest",
      requestType: GenerateConnectManifestRequest,
      requestStream: false,
      responseType: GenerateConnectManifestResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              73,
              18,
              71,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
              47,
              42,
              125,
              58,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              67,
              111,
              110,
              110,
              101,
              99,
              116,
              77,
              97,
              110,
              105,
              102,
              101,
              115,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface GkeHubServiceImplementation<CallContextExt = {}> {
  /** Lists Memberships in a given project and location. */
  listMemberships(
    request: ListMembershipsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMembershipsResponse>>;
  /** Lists Features in a given project and location. */
  listFeatures(
    request: ListFeaturesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFeaturesResponse>>;
  /** Gets the details of a Membership. */
  getMembership(request: GetMembershipRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Membership>>;
  /** Gets details of a single Feature. */
  getFeature(request: GetFeatureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Feature>>;
  /**
   * Creates a new Membership.
   *
   * **This is currently only supported for GKE clusters on Google Cloud**.
   * To register other clusters, follow the instructions at
   * https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
   */
  createMembership(
    request: CreateMembershipRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Adds a new Feature. */
  createFeature(request: CreateFeatureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Removes a Membership.
   *
   * **This is currently only supported for GKE clusters on Google Cloud**.
   * To unregister other clusters, follow the instructions at
   * https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
   */
  deleteMembership(
    request: DeleteMembershipRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Removes a Feature. */
  deleteFeature(request: DeleteFeatureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /** Updates an existing Membership. */
  updateMembership(
    request: UpdateMembershipRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Operation>>;
  /** Updates an existing Feature. */
  updateFeature(request: UpdateFeatureRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Generates the manifest for deployment of the GKE connect agent.
   *
   * **This method is used internally by Google-provided libraries.**
   * Most clients should not need to call this method directly.
   */
  generateConnectManifest(
    request: GenerateConnectManifestRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateConnectManifestResponse>>;
}

export interface GkeHubClient<CallOptionsExt = {}> {
  /** Lists Memberships in a given project and location. */
  listMemberships(
    request: DeepPartial<ListMembershipsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMembershipsResponse>;
  /** Lists Features in a given project and location. */
  listFeatures(
    request: DeepPartial<ListFeaturesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFeaturesResponse>;
  /** Gets the details of a Membership. */
  getMembership(
    request: DeepPartial<GetMembershipRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Membership>;
  /** Gets details of a single Feature. */
  getFeature(request: DeepPartial<GetFeatureRequest>, options?: CallOptions & CallOptionsExt): Promise<Feature>;
  /**
   * Creates a new Membership.
   *
   * **This is currently only supported for GKE clusters on Google Cloud**.
   * To register other clusters, follow the instructions at
   * https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
   */
  createMembership(
    request: DeepPartial<CreateMembershipRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Adds a new Feature. */
  createFeature(request: DeepPartial<CreateFeatureRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Removes a Membership.
   *
   * **This is currently only supported for GKE clusters on Google Cloud**.
   * To unregister other clusters, follow the instructions at
   * https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
   */
  deleteMembership(
    request: DeepPartial<DeleteMembershipRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Removes a Feature. */
  deleteFeature(request: DeepPartial<DeleteFeatureRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /** Updates an existing Membership. */
  updateMembership(
    request: DeepPartial<UpdateMembershipRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Operation>;
  /** Updates an existing Feature. */
  updateFeature(request: DeepPartial<UpdateFeatureRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Generates the manifest for deployment of the GKE connect agent.
   *
   * **This method is used internally by Google-provided libraries.**
   * Most clients should not need to call this method directly.
   */
  generateConnectManifest(
    request: DeepPartial<GenerateConnectManifestRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateConnectManifestResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
