// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2beta1/validation_result.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.cloud.dialogflow.v2beta1";

/** Represents a single validation error. */
export interface ValidationError {
  /** The severity of the error. */
  severity: ValidationError_Severity;
  /**
   * The names of the entries that the error is associated with.
   * Format:
   *
   * - `projects/<Project ID>/agent`, if the error is associated with the entire
   * agent.
   * - `projects/<Project ID>/agent/intents/<Intent ID>`, if the error is
   * associated with certain intents.
   * - `projects/<Project ID>/agent/intents/<Intent
   * Id>/trainingPhrases/<Training Phrase ID>`, if the error is associated with
   * certain intent training phrases.
   * - `projects/<Project ID>/agent/intents/<Intent Id>/parameters/<Parameter
   * ID>`, if the error is associated with certain intent parameters.
   * - `projects/<Project ID>/agent/entities/<Entity ID>`, if the error is
   * associated with certain entities.
   */
  entries: string[];
  /** The detailed error message. */
  errorMessage: string;
}

/** Represents a level of severity. */
export enum ValidationError_Severity {
  /** SEVERITY_UNSPECIFIED - Not specified. This value should never be used. */
  SEVERITY_UNSPECIFIED = 0,
  /** INFO - The agent doesn't follow Dialogflow best practices. */
  INFO = 1,
  /** WARNING - The agent may not behave as expected. */
  WARNING = 2,
  /** ERROR - The agent may experience partial failures. */
  ERROR = 3,
  /** CRITICAL - The agent may completely fail. */
  CRITICAL = 4,
  UNRECOGNIZED = -1,
}

export function validationError_SeverityFromJSON(object: any): ValidationError_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return ValidationError_Severity.SEVERITY_UNSPECIFIED;
    case 1:
    case "INFO":
      return ValidationError_Severity.INFO;
    case 2:
    case "WARNING":
      return ValidationError_Severity.WARNING;
    case 3:
    case "ERROR":
      return ValidationError_Severity.ERROR;
    case 4:
    case "CRITICAL":
      return ValidationError_Severity.CRITICAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ValidationError_Severity.UNRECOGNIZED;
  }
}

export function validationError_SeverityToJSON(object: ValidationError_Severity): string {
  switch (object) {
    case ValidationError_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case ValidationError_Severity.INFO:
      return "INFO";
    case ValidationError_Severity.WARNING:
      return "WARNING";
    case ValidationError_Severity.ERROR:
      return "ERROR";
    case ValidationError_Severity.CRITICAL:
      return "CRITICAL";
    case ValidationError_Severity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the output of agent validation. */
export interface ValidationResult {
  /** Contains all validation errors. */
  validationErrors: ValidationError[];
}

function createBaseValidationError(): ValidationError {
  return { severity: 0, entries: [], errorMessage: "" };
}

export const ValidationError: MessageFns<ValidationError> = {
  encode(message: ValidationError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.severity !== 0) {
      writer.uint32(8).int32(message.severity);
    }
    for (const v of message.entries) {
      writer.uint32(26).string(v!);
    }
    if (message.errorMessage !== "") {
      writer.uint32(34).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.entries.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationError {
    return {
      severity: isSet(object.severity) ? validationError_SeverityFromJSON(object.severity) : 0,
      entries: globalThis.Array.isArray(object?.entries) ? object.entries.map((e: any) => globalThis.String(e)) : [],
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
    };
  },

  toJSON(message: ValidationError): unknown {
    const obj: any = {};
    if (message.severity !== 0) {
      obj.severity = validationError_SeverityToJSON(message.severity);
    }
    if (message.entries?.length) {
      obj.entries = message.entries;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidationError>): ValidationError {
    return ValidationError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidationError>): ValidationError {
    const message = createBaseValidationError();
    message.severity = object.severity ?? 0;
    message.entries = object.entries?.map((e) => e) || [];
    message.errorMessage = object.errorMessage ?? "";
    return message;
  },
};

function createBaseValidationResult(): ValidationResult {
  return { validationErrors: [] };
}

export const ValidationResult: MessageFns<ValidationResult> = {
  encode(message: ValidationResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.validationErrors) {
      ValidationError.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidationResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validationErrors.push(ValidationError.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidationResult {
    return {
      validationErrors: globalThis.Array.isArray(object?.validationErrors)
        ? object.validationErrors.map((e: any) => ValidationError.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ValidationResult): unknown {
    const obj: any = {};
    if (message.validationErrors?.length) {
      obj.validationErrors = message.validationErrors.map((e) => ValidationError.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ValidationResult>): ValidationResult {
    return ValidationResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidationResult>): ValidationResult {
    const message = createBaseValidationResult();
    message.validationErrors = object.validationErrors?.map((e) => ValidationError.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
