// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2beta1/agent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Operation } from "../../../longrunning/operations.js";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { ValidationResult } from "./validation_result.js";

export const protobufPackage = "google.cloud.dialogflow.v2beta1";

/**
 * A Dialogflow agent is a virtual agent that handles conversations with your
 * end-users. It is a natural language understanding module that understands the
 * nuances of human language. Dialogflow translates end-user text or audio
 * during a conversation to structured data that your apps and services can
 * understand. You design and build a Dialogflow agent to handle the types of
 * conversations required for your system.
 *
 * For more information about agents, see the
 * [Agent guide](https://cloud.google.com/dialogflow/docs/agents-overview).
 */
export interface Agent {
  /**
   * Required. The project of this agent.
   * Format: `projects/<Project ID>` or
   *         `projects/<Project ID>/locations/<Location ID>`
   */
  parent: string;
  /** Required. The name of this agent. */
  displayName: string;
  /**
   * Required. The default language of the agent as a language tag. See
   * [Language
   * Support](https://cloud.google.com/dialogflow/docs/reference/language)
   * for a list of the currently supported language codes. This field cannot be
   * set by the `Update` method.
   */
  defaultLanguageCode: string;
  /**
   * Optional. The list of all languages supported by this agent (except for the
   * `default_language_code`).
   */
  supportedLanguageCodes: string[];
  /**
   * Required. The time zone of this agent from the
   * [time zone database](https://www.iana.org/time-zones), e.g.,
   * America/New_York, Europe/Paris.
   */
  timeZone: string;
  /**
   * Optional. The description of this agent.
   * The maximum length is 500 characters. If exceeded, the request is rejected.
   */
  description: string;
  /**
   * Optional. The URI of the agent's avatar.
   * Avatars are used throughout the Dialogflow console and in the self-hosted
   * [Web
   * Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo)
   * integration.
   */
  avatarUri: string;
  /** Optional. Determines whether this agent should log conversation queries. */
  enableLogging: boolean;
  /**
   * Optional. Determines how intents are detected from user queries.
   *
   * @deprecated
   */
  matchMode: Agent_MatchMode;
  /**
   * Optional. To filter out false positive results and still get variety in
   * matched natural language inputs for your agent, you can tune the machine
   * learning classification threshold. If the returned score value is less than
   * the threshold value, then a fallback intent will be triggered or, if there
   * are no fallback intents defined, no intent will be triggered. The score
   * values range from 0.0 (completely uncertain) to 1.0 (completely certain).
   * If set to 0.0, the default of 0.3 is used.
   */
  classificationThreshold: number;
  /**
   * Optional. API version displayed in Dialogflow console. If not specified,
   * V2 API is assumed. Clients are free to query different service endpoints
   * for different API versions. However, bots connectors and webhook calls will
   * follow the specified API version.
   */
  apiVersion: Agent_ApiVersion;
  /** Optional. The agent tier. If not specified, TIER_STANDARD is assumed. */
  tier: Agent_Tier;
}

/** Match mode determines how intents are detected from user queries. */
export enum Agent_MatchMode {
  /** MATCH_MODE_UNSPECIFIED - Not specified. */
  MATCH_MODE_UNSPECIFIED = 0,
  /**
   * MATCH_MODE_HYBRID - Best for agents with a small number of examples in intents and/or wide
   * use of templates syntax and composite entities.
   */
  MATCH_MODE_HYBRID = 1,
  /**
   * MATCH_MODE_ML_ONLY - Can be used for agents with a large number of examples in intents,
   * especially the ones using @sys.any or very large custom entities.
   */
  MATCH_MODE_ML_ONLY = 2,
  UNRECOGNIZED = -1,
}

export function agent_MatchModeFromJSON(object: any): Agent_MatchMode {
  switch (object) {
    case 0:
    case "MATCH_MODE_UNSPECIFIED":
      return Agent_MatchMode.MATCH_MODE_UNSPECIFIED;
    case 1:
    case "MATCH_MODE_HYBRID":
      return Agent_MatchMode.MATCH_MODE_HYBRID;
    case 2:
    case "MATCH_MODE_ML_ONLY":
      return Agent_MatchMode.MATCH_MODE_ML_ONLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Agent_MatchMode.UNRECOGNIZED;
  }
}

export function agent_MatchModeToJSON(object: Agent_MatchMode): string {
  switch (object) {
    case Agent_MatchMode.MATCH_MODE_UNSPECIFIED:
      return "MATCH_MODE_UNSPECIFIED";
    case Agent_MatchMode.MATCH_MODE_HYBRID:
      return "MATCH_MODE_HYBRID";
    case Agent_MatchMode.MATCH_MODE_ML_ONLY:
      return "MATCH_MODE_ML_ONLY";
    case Agent_MatchMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** API version for the agent. */
export enum Agent_ApiVersion {
  /** API_VERSION_UNSPECIFIED - Not specified. */
  API_VERSION_UNSPECIFIED = 0,
  /** API_VERSION_V1 - Legacy V1 API. */
  API_VERSION_V1 = 1,
  /** API_VERSION_V2 - V2 API. */
  API_VERSION_V2 = 2,
  /** API_VERSION_V2_BETA_1 - V2beta1 API. */
  API_VERSION_V2_BETA_1 = 3,
  UNRECOGNIZED = -1,
}

export function agent_ApiVersionFromJSON(object: any): Agent_ApiVersion {
  switch (object) {
    case 0:
    case "API_VERSION_UNSPECIFIED":
      return Agent_ApiVersion.API_VERSION_UNSPECIFIED;
    case 1:
    case "API_VERSION_V1":
      return Agent_ApiVersion.API_VERSION_V1;
    case 2:
    case "API_VERSION_V2":
      return Agent_ApiVersion.API_VERSION_V2;
    case 3:
    case "API_VERSION_V2_BETA_1":
      return Agent_ApiVersion.API_VERSION_V2_BETA_1;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Agent_ApiVersion.UNRECOGNIZED;
  }
}

export function agent_ApiVersionToJSON(object: Agent_ApiVersion): string {
  switch (object) {
    case Agent_ApiVersion.API_VERSION_UNSPECIFIED:
      return "API_VERSION_UNSPECIFIED";
    case Agent_ApiVersion.API_VERSION_V1:
      return "API_VERSION_V1";
    case Agent_ApiVersion.API_VERSION_V2:
      return "API_VERSION_V2";
    case Agent_ApiVersion.API_VERSION_V2_BETA_1:
      return "API_VERSION_V2_BETA_1";
    case Agent_ApiVersion.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Represents the agent tier. */
export enum Agent_Tier {
  /** TIER_UNSPECIFIED - Not specified. This value should never be used. */
  TIER_UNSPECIFIED = 0,
  /** TIER_STANDARD - Trial Edition, previously known as Standard Edition. */
  TIER_STANDARD = 1,
  /** TIER_ENTERPRISE - Essentials Edition, previously known as Enterprise Essential Edition. */
  TIER_ENTERPRISE = 2,
  /**
   * TIER_ENTERPRISE_PLUS - Essentials Edition (same as TIER_ENTERPRISE), previously known as
   * Enterprise Plus Edition.
   *
   * @deprecated
   */
  TIER_ENTERPRISE_PLUS = 3,
  UNRECOGNIZED = -1,
}

export function agent_TierFromJSON(object: any): Agent_Tier {
  switch (object) {
    case 0:
    case "TIER_UNSPECIFIED":
      return Agent_Tier.TIER_UNSPECIFIED;
    case 1:
    case "TIER_STANDARD":
      return Agent_Tier.TIER_STANDARD;
    case 2:
    case "TIER_ENTERPRISE":
      return Agent_Tier.TIER_ENTERPRISE;
    case 3:
    case "TIER_ENTERPRISE_PLUS":
      return Agent_Tier.TIER_ENTERPRISE_PLUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Agent_Tier.UNRECOGNIZED;
  }
}

export function agent_TierToJSON(object: Agent_Tier): string {
  switch (object) {
    case Agent_Tier.TIER_UNSPECIFIED:
      return "TIER_UNSPECIFIED";
    case Agent_Tier.TIER_STANDARD:
      return "TIER_STANDARD";
    case Agent_Tier.TIER_ENTERPRISE:
      return "TIER_ENTERPRISE";
    case Agent_Tier.TIER_ENTERPRISE_PLUS:
      return "TIER_ENTERPRISE_PLUS";
    case Agent_Tier.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The request message for
 * [Agents.GetAgent][google.cloud.dialogflow.v2beta1.Agents.GetAgent].
 */
export interface GetAgentRequest {
  /**
   * Required. The project that the agent to fetch is associated with.
   * Format: `projects/<Project ID>` or
   *         `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
}

/**
 * The request message for
 * [Agents.SetAgent][google.cloud.dialogflow.v2beta1.Agents.SetAgent].
 */
export interface SetAgentRequest {
  /** Required. The agent to update. */
  agent:
    | Agent
    | undefined;
  /** Optional. The mask to control which fields get updated. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [Agents.DeleteAgent][google.cloud.dialogflow.v2beta1.Agents.DeleteAgent].
 */
export interface DeleteAgentRequest {
  /**
   * Required. The project that the agent to delete is associated with.
   * Format: `projects/<Project ID>` or
   *         `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
}

/** Contains basic configuration for a sub-agent. */
export interface SubAgent {
  /**
   * Required. The project of this agent.
   * Format: `projects/<Project ID>` or
   *         `projects/<Project ID>/locations/<Location ID>`.
   */
  project: string;
  /**
   * Optional. The unique identifier (`environment name` in dialogflow console)
   * of this sub-agent environment. Assumes draft environment if `environment`
   * is not set.
   */
  environment: string;
}

/**
 * The request message for
 * [Agents.SearchAgents][google.cloud.dialogflow.v2beta1.Agents.SearchAgents].
 */
export interface SearchAgentsRequest {
  /**
   * Required. The project to list agents from.
   * Format: `projects/<Project ID or '-'>` or
   *         `projects/<Project ID or '-'>/locations/<Location ID>`.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /** Optional. The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Agents.SearchAgents][google.cloud.dialogflow.v2beta1.Agents.SearchAgents].
 */
export interface SearchAgentsResponse {
  /**
   * The list of agents. There will be a maximum number of items returned based
   * on the page_size field in the request.
   */
  agents: Agent[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Agents.TrainAgent][google.cloud.dialogflow.v2beta1.Agents.TrainAgent].
 */
export interface TrainAgentRequest {
  /**
   * Required. The project that the agent to train is associated with.
   * Format: `projects/<Project ID>` or
   *         `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
}

/**
 * The request message for
 * [Agents.ExportAgent][google.cloud.dialogflow.v2beta1.Agents.ExportAgent].
 */
export interface ExportAgentRequest {
  /**
   * Required. The project that the agent to export is associated with.
   * Format: `projects/<Project ID>` or
   *         `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /**
   * Optional. The
   * [Google Cloud Storage](https://cloud.google.com/storage/docs/)
   * URI to export the agent to.
   * The format of this URI must be `gs://<bucket-name>/<object-name>`.
   * If left unspecified, the serialized agent is returned inline.
   *
   * Dialogflow performs a write operation for the Cloud Storage object
   * on the caller's behalf, so your request authentication must
   * have write permissions for the object. For more information, see
   * [Dialogflow access
   * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   */
  agentUri: string;
}

/**
 * The response message for
 * [Agents.ExportAgent][google.cloud.dialogflow.v2beta1.Agents.ExportAgent].
 */
export interface ExportAgentResponse {
  /**
   * The URI to a file containing the exported agent. This field is populated
   * only if `agent_uri` is specified in `ExportAgentRequest`.
   */
  agentUri?:
    | string
    | undefined;
  /** Zip compressed raw byte content for agent. */
  agentContent?: Buffer | undefined;
}

/**
 * The request message for
 * [Agents.ImportAgent][google.cloud.dialogflow.v2beta1.Agents.ImportAgent].
 */
export interface ImportAgentRequest {
  /**
   * Required. The project that the agent to import is associated with.
   * Format: `projects/<Project ID>` or
   *         `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /**
   * The URI to a Google Cloud Storage file containing the agent to import.
   * Note: The URI must start with "gs://".
   *
   * Dialogflow performs a read operation for the Cloud Storage object
   * on the caller's behalf, so your request authentication must
   * have read permissions for the object. For more information, see
   * [Dialogflow access
   * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   */
  agentUri?:
    | string
    | undefined;
  /** Zip compressed raw byte content for agent. */
  agentContent?: Buffer | undefined;
}

/**
 * The request message for
 * [Agents.RestoreAgent][google.cloud.dialogflow.v2beta1.Agents.RestoreAgent].
 */
export interface RestoreAgentRequest {
  /**
   * Required. The project that the agent to restore is associated with.
   * Format: `projects/<Project ID>` or
   *         `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /**
   * The URI to a Google Cloud Storage file containing the agent to restore.
   * Note: The URI must start with "gs://".
   *
   * Dialogflow performs a read operation for the Cloud Storage object
   * on the caller's behalf, so your request authentication must
   * have read permissions for the object. For more information, see
   * [Dialogflow access
   * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   */
  agentUri?:
    | string
    | undefined;
  /** Zip compressed raw byte content for agent. */
  agentContent?: Buffer | undefined;
}

/**
 * The request message for
 * [Agents.GetValidationResult][google.cloud.dialogflow.v2beta1.Agents.GetValidationResult].
 */
export interface GetValidationResultRequest {
  /**
   * Required. The project that the agent is associated with.
   * Format: `projects/<Project ID>` or
   *         `projects/<Project ID>/locations/<Location ID>`.
   */
  parent: string;
  /**
   * Optional. The language for which you want a validation result. If not
   * specified, the agent's default language is used. [Many
   * languages](https://cloud.google.com/dialogflow/docs/reference/language)
   * are supported. Note: languages must be enabled in the agent before they can
   * be used.
   */
  languageCode: string;
}

function createBaseAgent(): Agent {
  return {
    parent: "",
    displayName: "",
    defaultLanguageCode: "",
    supportedLanguageCodes: [],
    timeZone: "",
    description: "",
    avatarUri: "",
    enableLogging: false,
    matchMode: 0,
    classificationThreshold: 0,
    apiVersion: 0,
    tier: 0,
  };
}

export const Agent: MessageFns<Agent> = {
  encode(message: Agent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.defaultLanguageCode !== "") {
      writer.uint32(26).string(message.defaultLanguageCode);
    }
    for (const v of message.supportedLanguageCodes) {
      writer.uint32(34).string(v!);
    }
    if (message.timeZone !== "") {
      writer.uint32(42).string(message.timeZone);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    if (message.avatarUri !== "") {
      writer.uint32(58).string(message.avatarUri);
    }
    if (message.enableLogging !== false) {
      writer.uint32(64).bool(message.enableLogging);
    }
    if (message.matchMode !== 0) {
      writer.uint32(72).int32(message.matchMode);
    }
    if (message.classificationThreshold !== 0) {
      writer.uint32(85).float(message.classificationThreshold);
    }
    if (message.apiVersion !== 0) {
      writer.uint32(112).int32(message.apiVersion);
    }
    if (message.tier !== 0) {
      writer.uint32(120).int32(message.tier);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Agent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.defaultLanguageCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.supportedLanguageCodes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.avatarUri = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.enableLogging = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.matchMode = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 85) {
            break;
          }

          message.classificationThreshold = reader.float();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.apiVersion = reader.int32() as any;
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.tier = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Agent {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      defaultLanguageCode: isSet(object.defaultLanguageCode) ? globalThis.String(object.defaultLanguageCode) : "",
      supportedLanguageCodes: globalThis.Array.isArray(object?.supportedLanguageCodes)
        ? object.supportedLanguageCodes.map((e: any) => globalThis.String(e))
        : [],
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      avatarUri: isSet(object.avatarUri) ? globalThis.String(object.avatarUri) : "",
      enableLogging: isSet(object.enableLogging) ? globalThis.Boolean(object.enableLogging) : false,
      matchMode: isSet(object.matchMode) ? agent_MatchModeFromJSON(object.matchMode) : 0,
      classificationThreshold: isSet(object.classificationThreshold)
        ? globalThis.Number(object.classificationThreshold)
        : 0,
      apiVersion: isSet(object.apiVersion) ? agent_ApiVersionFromJSON(object.apiVersion) : 0,
      tier: isSet(object.tier) ? agent_TierFromJSON(object.tier) : 0,
    };
  },

  toJSON(message: Agent): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.defaultLanguageCode !== "") {
      obj.defaultLanguageCode = message.defaultLanguageCode;
    }
    if (message.supportedLanguageCodes?.length) {
      obj.supportedLanguageCodes = message.supportedLanguageCodes;
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.avatarUri !== "") {
      obj.avatarUri = message.avatarUri;
    }
    if (message.enableLogging !== false) {
      obj.enableLogging = message.enableLogging;
    }
    if (message.matchMode !== 0) {
      obj.matchMode = agent_MatchModeToJSON(message.matchMode);
    }
    if (message.classificationThreshold !== 0) {
      obj.classificationThreshold = message.classificationThreshold;
    }
    if (message.apiVersion !== 0) {
      obj.apiVersion = agent_ApiVersionToJSON(message.apiVersion);
    }
    if (message.tier !== 0) {
      obj.tier = agent_TierToJSON(message.tier);
    }
    return obj;
  },

  create(base?: DeepPartial<Agent>): Agent {
    return Agent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Agent>): Agent {
    const message = createBaseAgent();
    message.parent = object.parent ?? "";
    message.displayName = object.displayName ?? "";
    message.defaultLanguageCode = object.defaultLanguageCode ?? "";
    message.supportedLanguageCodes = object.supportedLanguageCodes?.map((e) => e) || [];
    message.timeZone = object.timeZone ?? "";
    message.description = object.description ?? "";
    message.avatarUri = object.avatarUri ?? "";
    message.enableLogging = object.enableLogging ?? false;
    message.matchMode = object.matchMode ?? 0;
    message.classificationThreshold = object.classificationThreshold ?? 0;
    message.apiVersion = object.apiVersion ?? 0;
    message.tier = object.tier ?? 0;
    return message;
  },
};

function createBaseGetAgentRequest(): GetAgentRequest {
  return { parent: "" };
}

export const GetAgentRequest: MessageFns<GetAgentRequest> = {
  encode(message: GetAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAgentRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: GetAgentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAgentRequest>): GetAgentRequest {
    return GetAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAgentRequest>): GetAgentRequest {
    const message = createBaseGetAgentRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseSetAgentRequest(): SetAgentRequest {
  return { agent: undefined, updateMask: undefined };
}

export const SetAgentRequest: MessageFns<SetAgentRequest> = {
  encode(message: SetAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent !== undefined) {
      Agent.encode(message.agent, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agent = Agent.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAgentRequest {
    return {
      agent: isSet(object.agent) ? Agent.fromJSON(object.agent) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: SetAgentRequest): unknown {
    const obj: any = {};
    if (message.agent !== undefined) {
      obj.agent = Agent.toJSON(message.agent);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<SetAgentRequest>): SetAgentRequest {
    return SetAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetAgentRequest>): SetAgentRequest {
    const message = createBaseSetAgentRequest();
    message.agent = (object.agent !== undefined && object.agent !== null) ? Agent.fromPartial(object.agent) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteAgentRequest(): DeleteAgentRequest {
  return { parent: "" };
}

export const DeleteAgentRequest: MessageFns<DeleteAgentRequest> = {
  encode(message: DeleteAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAgentRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: DeleteAgentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAgentRequest>): DeleteAgentRequest {
    return DeleteAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAgentRequest>): DeleteAgentRequest {
    const message = createBaseDeleteAgentRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseSubAgent(): SubAgent {
  return { project: "", environment: "" };
}

export const SubAgent: MessageFns<SubAgent> = {
  encode(message: SubAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project !== "") {
      writer.uint32(10).string(message.project);
    }
    if (message.environment !== "") {
      writer.uint32(18).string(message.environment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.environment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubAgent {
    return {
      project: isSet(object.project) ? globalThis.String(object.project) : "",
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
    };
  },

  toJSON(message: SubAgent): unknown {
    const obj: any = {};
    if (message.project !== "") {
      obj.project = message.project;
    }
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    return obj;
  },

  create(base?: DeepPartial<SubAgent>): SubAgent {
    return SubAgent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubAgent>): SubAgent {
    const message = createBaseSubAgent();
    message.project = object.project ?? "";
    message.environment = object.environment ?? "";
    return message;
  },
};

function createBaseSearchAgentsRequest(): SearchAgentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const SearchAgentsRequest: MessageFns<SearchAgentsRequest> = {
  encode(message: SearchAgentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchAgentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchAgentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchAgentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchAgentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchAgentsRequest>): SearchAgentsRequest {
    return SearchAgentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchAgentsRequest>): SearchAgentsRequest {
    const message = createBaseSearchAgentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchAgentsResponse(): SearchAgentsResponse {
  return { agents: [], nextPageToken: "" };
}

export const SearchAgentsResponse: MessageFns<SearchAgentsResponse> = {
  encode(message: SearchAgentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.agents) {
      Agent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchAgentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchAgentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agents.push(Agent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchAgentsResponse {
    return {
      agents: globalThis.Array.isArray(object?.agents) ? object.agents.map((e: any) => Agent.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchAgentsResponse): unknown {
    const obj: any = {};
    if (message.agents?.length) {
      obj.agents = message.agents.map((e) => Agent.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchAgentsResponse>): SearchAgentsResponse {
    return SearchAgentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchAgentsResponse>): SearchAgentsResponse {
    const message = createBaseSearchAgentsResponse();
    message.agents = object.agents?.map((e) => Agent.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseTrainAgentRequest(): TrainAgentRequest {
  return { parent: "" };
}

export const TrainAgentRequest: MessageFns<TrainAgentRequest> = {
  encode(message: TrainAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainAgentRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: TrainAgentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<TrainAgentRequest>): TrainAgentRequest {
    return TrainAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrainAgentRequest>): TrainAgentRequest {
    const message = createBaseTrainAgentRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

function createBaseExportAgentRequest(): ExportAgentRequest {
  return { parent: "", agentUri: "" };
}

export const ExportAgentRequest: MessageFns<ExportAgentRequest> = {
  encode(message: ExportAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.agentUri !== "") {
      writer.uint32(18).string(message.agentUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportAgentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      agentUri: isSet(object.agentUri) ? globalThis.String(object.agentUri) : "",
    };
  },

  toJSON(message: ExportAgentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.agentUri !== "") {
      obj.agentUri = message.agentUri;
    }
    return obj;
  },

  create(base?: DeepPartial<ExportAgentRequest>): ExportAgentRequest {
    return ExportAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportAgentRequest>): ExportAgentRequest {
    const message = createBaseExportAgentRequest();
    message.parent = object.parent ?? "";
    message.agentUri = object.agentUri ?? "";
    return message;
  },
};

function createBaseExportAgentResponse(): ExportAgentResponse {
  return { agentUri: undefined, agentContent: undefined };
}

export const ExportAgentResponse: MessageFns<ExportAgentResponse> = {
  encode(message: ExportAgentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agentUri !== undefined) {
      writer.uint32(10).string(message.agentUri);
    }
    if (message.agentContent !== undefined) {
      writer.uint32(18).bytes(message.agentContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportAgentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agentUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentContent = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportAgentResponse {
    return {
      agentUri: isSet(object.agentUri) ? globalThis.String(object.agentUri) : undefined,
      agentContent: isSet(object.agentContent) ? Buffer.from(bytesFromBase64(object.agentContent)) : undefined,
    };
  },

  toJSON(message: ExportAgentResponse): unknown {
    const obj: any = {};
    if (message.agentUri !== undefined) {
      obj.agentUri = message.agentUri;
    }
    if (message.agentContent !== undefined) {
      obj.agentContent = base64FromBytes(message.agentContent);
    }
    return obj;
  },

  create(base?: DeepPartial<ExportAgentResponse>): ExportAgentResponse {
    return ExportAgentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExportAgentResponse>): ExportAgentResponse {
    const message = createBaseExportAgentResponse();
    message.agentUri = object.agentUri ?? undefined;
    message.agentContent = object.agentContent ?? undefined;
    return message;
  },
};

function createBaseImportAgentRequest(): ImportAgentRequest {
  return { parent: "", agentUri: undefined, agentContent: undefined };
}

export const ImportAgentRequest: MessageFns<ImportAgentRequest> = {
  encode(message: ImportAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.agentUri !== undefined) {
      writer.uint32(18).string(message.agentUri);
    }
    if (message.agentContent !== undefined) {
      writer.uint32(26).bytes(message.agentContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.agentContent = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImportAgentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      agentUri: isSet(object.agentUri) ? globalThis.String(object.agentUri) : undefined,
      agentContent: isSet(object.agentContent) ? Buffer.from(bytesFromBase64(object.agentContent)) : undefined,
    };
  },

  toJSON(message: ImportAgentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.agentUri !== undefined) {
      obj.agentUri = message.agentUri;
    }
    if (message.agentContent !== undefined) {
      obj.agentContent = base64FromBytes(message.agentContent);
    }
    return obj;
  },

  create(base?: DeepPartial<ImportAgentRequest>): ImportAgentRequest {
    return ImportAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportAgentRequest>): ImportAgentRequest {
    const message = createBaseImportAgentRequest();
    message.parent = object.parent ?? "";
    message.agentUri = object.agentUri ?? undefined;
    message.agentContent = object.agentContent ?? undefined;
    return message;
  },
};

function createBaseRestoreAgentRequest(): RestoreAgentRequest {
  return { parent: "", agentUri: undefined, agentContent: undefined };
}

export const RestoreAgentRequest: MessageFns<RestoreAgentRequest> = {
  encode(message: RestoreAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.agentUri !== undefined) {
      writer.uint32(18).string(message.agentUri);
    }
    if (message.agentContent !== undefined) {
      writer.uint32(26).bytes(message.agentContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.agentUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.agentContent = Buffer.from(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestoreAgentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      agentUri: isSet(object.agentUri) ? globalThis.String(object.agentUri) : undefined,
      agentContent: isSet(object.agentContent) ? Buffer.from(bytesFromBase64(object.agentContent)) : undefined,
    };
  },

  toJSON(message: RestoreAgentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.agentUri !== undefined) {
      obj.agentUri = message.agentUri;
    }
    if (message.agentContent !== undefined) {
      obj.agentContent = base64FromBytes(message.agentContent);
    }
    return obj;
  },

  create(base?: DeepPartial<RestoreAgentRequest>): RestoreAgentRequest {
    return RestoreAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreAgentRequest>): RestoreAgentRequest {
    const message = createBaseRestoreAgentRequest();
    message.parent = object.parent ?? "";
    message.agentUri = object.agentUri ?? undefined;
    message.agentContent = object.agentContent ?? undefined;
    return message;
  },
};

function createBaseGetValidationResultRequest(): GetValidationResultRequest {
  return { parent: "", languageCode: "" };
}

export const GetValidationResultRequest: MessageFns<GetValidationResultRequest> = {
  encode(message: GetValidationResultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.languageCode !== "") {
      writer.uint32(26).string(message.languageCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetValidationResultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetValidationResultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.languageCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetValidationResultRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
    };
  },

  toJSON(message: GetValidationResultRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    return obj;
  },

  create(base?: DeepPartial<GetValidationResultRequest>): GetValidationResultRequest {
    return GetValidationResultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetValidationResultRequest>): GetValidationResultRequest {
    const message = createBaseGetValidationResultRequest();
    message.parent = object.parent ?? "";
    message.languageCode = object.languageCode ?? "";
    return message;
  },
};

/** Service for managing [Agents][google.cloud.dialogflow.v2beta1.Agent]. */
export type AgentsDefinition = typeof AgentsDefinition;
export const AgentsDefinition = {
  name: "Agents",
  fullName: "google.cloud.dialogflow.v2beta1.Agents",
  methods: {
    /** Retrieves the specified agent. */
    getAgent: {
      name: "GetAgent",
      requestType: GetAgentRequest,
      requestStream: false,
      responseType: Agent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              86,
              90,
              48,
              18,
              46,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              18,
              34,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Creates/updates the specified agent.
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    setAgent: {
      name: "SetAgent",
      requestType: SetAgentRequest,
      requestStream: false,
      responseType: Agent,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([5, 97, 103, 101, 110, 116])],
          578365826: [
            Buffer.from([
              112,
              58,
              5,
              97,
              103,
              101,
              110,
              116,
              90,
              61,
              58,
              5,
              97,
              103,
              101,
              110,
              116,
              34,
              52,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              97,
              103,
              101,
              110,
              116,
              46,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              34,
              40,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              97,
              103,
              101,
              110,
              116,
              46,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified agent. */
    deleteAgent: {
      name: "DeleteAgent",
      requestType: DeleteAgentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              86,
              90,
              48,
              42,
              46,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              42,
              34,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Returns the list of agents.
     * Since there is at most one conversational agent per project, this method is
     * useful primarily for listing all agents across projects the caller has
     * access to. One can achieve that with a wildcard project collection id "-".
     * Refer to [List
     * Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).
     */
    searchAgents: {
      name: "SearchAgents",
      requestType: SearchAgentsRequest,
      requestStream: false,
      responseType: SearchAgentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              100,
              90,
              55,
              18,
              53,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
              18,
              41,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /**
     * Trains the specified agent.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    trainAgent: {
      name: "TrainAgent",
      requestType: TrainAgentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              104,
              58,
              1,
              42,
              90,
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              58,
              116,
              114,
              97,
              105,
              110,
              34,
              40,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              58,
              116,
              114,
              97,
              105,
              110,
            ]),
          ],
        },
      },
    },
    /**
     * Exports the specified agent to a ZIP file.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`:
     * [ExportAgentResponse][google.cloud.dialogflow.v2beta1.ExportAgentResponse]
     */
    exportAgent: {
      name: "ExportAgent",
      requestType: ExportAgentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              77,
              10,
              51,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              99,
              108,
              111,
              117,
              100,
              46,
              100,
              105,
              97,
              108,
              111,
              103,
              102,
              108,
              111,
              119,
              46,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              46,
              69,
              120,
              112,
              111,
              114,
              116,
              65,
              103,
              101,
              110,
              116,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              106,
              58,
              1,
              42,
              90,
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
              34,
              41,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              58,
              101,
              120,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Imports the specified agent from a ZIP file.
     *
     * Uploads new intents and entity types without deleting the existing ones.
     * Intents and entity types with the same name are replaced with the new
     * versions from
     * [ImportAgentRequest][google.cloud.dialogflow.v2beta1.ImportAgentRequest].
     * After the import, the imported draft agent will be trained automatically
     * (unless disabled in agent settings). However, once the import is done,
     * training may not be completed yet. Please call
     * [TrainAgent][google.cloud.dialogflow.v2beta1.Agents.TrainAgent] and wait
     * for the operation it returns in order to train explicitly.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * The operation only tracks when importing is complete, not when it is done
     * training.
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    importAgent: {
      name: "ImportAgent",
      requestType: ImportAgentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              106,
              58,
              1,
              42,
              90,
              58,
              58,
              1,
              42,
              34,
              53,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
              34,
              41,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              58,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    /**
     * Restores the specified agent from a ZIP file.
     *
     * Replaces the current agent version with a new one. All the intents and
     * entity types in the older version are deleted. After the restore, the
     * restored draft agent will be trained automatically (unless disabled in
     * agent settings). However, once the restore is done, training may not be
     * completed yet. Please call
     * [TrainAgent][google.cloud.dialogflow.v2beta1.Agents.TrainAgent] and wait
     * for the operation it returns in order to train explicitly.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * The operation only tracks when restoring is complete, not when it is done
     * training.
     *
     * Note: You should always train an agent prior to sending it queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/es/docs/training).
     */
    restoreAgent: {
      name: "RestoreAgent",
      requestType: RestoreAgentRequest,
      requestStream: false,
      responseType: Operation,
      responseStream: false,
      options: {
        _unknownFields: {
          8394: [
            Buffer.from([
              47,
              10,
              21,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              69,
              109,
              112,
              116,
              121,
              18,
              22,
              103,
              111,
              111,
              103,
              108,
              101,
              46,
              112,
              114,
              111,
              116,
              111,
              98,
              117,
              102,
              46,
              83,
              116,
              114,
              117,
              99,
              116,
            ]),
          ],
          578365826: [
            Buffer.from([
              108,
              58,
              1,
              42,
              90,
              59,
              58,
              1,
              42,
              34,
              54,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              58,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
              34,
              42,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              58,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Gets agent validation result. Agent validation is performed during
     * training time and is updated automatically when training is completed.
     */
    getValidationResult: {
      name: "GetValidationResult",
      requestType: GetValidationResultRequest,
      requestStream: false,
      responseType: ValidationResult,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              120,
              90,
              65,
              18,
              63,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              117,
              108,
              116,
              18,
              51,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              82,
              101,
              115,
              117,
              108,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface AgentsServiceImplementation<CallContextExt = {}> {
  /** Retrieves the specified agent. */
  getAgent(request: GetAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Agent>>;
  /**
   * Creates/updates the specified agent.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  setAgent(request: SetAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Agent>>;
  /** Deletes the specified agent. */
  deleteAgent(request: DeleteAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /**
   * Returns the list of agents.
   * Since there is at most one conversational agent per project, this method is
   * useful primarily for listing all agents across projects the caller has
   * access to. One can achieve that with a wildcard project collection id "-".
   * Refer to [List
   * Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).
   */
  searchAgents(
    request: SearchAgentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchAgentsResponse>>;
  /**
   * Trains the specified agent.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  trainAgent(request: TrainAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Exports the specified agent to a ZIP file.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [ExportAgentResponse][google.cloud.dialogflow.v2beta1.ExportAgentResponse]
   */
  exportAgent(request: ExportAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Imports the specified agent from a ZIP file.
   *
   * Uploads new intents and entity types without deleting the existing ones.
   * Intents and entity types with the same name are replaced with the new
   * versions from
   * [ImportAgentRequest][google.cloud.dialogflow.v2beta1.ImportAgentRequest].
   * After the import, the imported draft agent will be trained automatically
   * (unless disabled in agent settings). However, once the import is done,
   * training may not be completed yet. Please call
   * [TrainAgent][google.cloud.dialogflow.v2beta1.Agents.TrainAgent] and wait
   * for the operation it returns in order to train explicitly.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * The operation only tracks when importing is complete, not when it is done
   * training.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  importAgent(request: ImportAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Restores the specified agent from a ZIP file.
   *
   * Replaces the current agent version with a new one. All the intents and
   * entity types in the older version are deleted. After the restore, the
   * restored draft agent will be trained automatically (unless disabled in
   * agent settings). However, once the restore is done, training may not be
   * completed yet. Please call
   * [TrainAgent][google.cloud.dialogflow.v2beta1.Agents.TrainAgent] and wait
   * for the operation it returns in order to train explicitly.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * The operation only tracks when restoring is complete, not when it is done
   * training.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  restoreAgent(request: RestoreAgentRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Operation>>;
  /**
   * Gets agent validation result. Agent validation is performed during
   * training time and is updated automatically when training is completed.
   */
  getValidationResult(
    request: GetValidationResultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ValidationResult>>;
}

export interface AgentsClient<CallOptionsExt = {}> {
  /** Retrieves the specified agent. */
  getAgent(request: DeepPartial<GetAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Agent>;
  /**
   * Creates/updates the specified agent.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  setAgent(request: DeepPartial<SetAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Agent>;
  /** Deletes the specified agent. */
  deleteAgent(request: DeepPartial<DeleteAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /**
   * Returns the list of agents.
   * Since there is at most one conversational agent per project, this method is
   * useful primarily for listing all agents across projects the caller has
   * access to. One can achieve that with a wildcard project collection id "-".
   * Refer to [List
   * Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).
   */
  searchAgents(
    request: DeepPartial<SearchAgentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchAgentsResponse>;
  /**
   * Trains the specified agent.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  trainAgent(request: DeepPartial<TrainAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Exports the specified agent to a ZIP file.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`:
   * [ExportAgentResponse][google.cloud.dialogflow.v2beta1.ExportAgentResponse]
   */
  exportAgent(request: DeepPartial<ExportAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Imports the specified agent from a ZIP file.
   *
   * Uploads new intents and entity types without deleting the existing ones.
   * Intents and entity types with the same name are replaced with the new
   * versions from
   * [ImportAgentRequest][google.cloud.dialogflow.v2beta1.ImportAgentRequest].
   * After the import, the imported draft agent will be trained automatically
   * (unless disabled in agent settings). However, once the import is done,
   * training may not be completed yet. Please call
   * [TrainAgent][google.cloud.dialogflow.v2beta1.Agents.TrainAgent] and wait
   * for the operation it returns in order to train explicitly.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * The operation only tracks when importing is complete, not when it is done
   * training.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  importAgent(request: DeepPartial<ImportAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Restores the specified agent from a ZIP file.
   *
   * Replaces the current agent version with a new one. All the intents and
   * entity types in the older version are deleted. After the restore, the
   * restored draft agent will be trained automatically (unless disabled in
   * agent settings). However, once the restore is done, training may not be
   * completed yet. Please call
   * [TrainAgent][google.cloud.dialogflow.v2beta1.Agents.TrainAgent] and wait
   * for the operation it returns in order to train explicitly.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`: An empty [Struct
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
   * - `response`: An [Empty
   *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
   *
   * The operation only tracks when restoring is complete, not when it is done
   * training.
   *
   * Note: You should always train an agent prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/es/docs/training).
   */
  restoreAgent(request: DeepPartial<RestoreAgentRequest>, options?: CallOptions & CallOptionsExt): Promise<Operation>;
  /**
   * Gets agent validation result. Agent validation is performed during
   * training time and is updated automatically when training is completed.
   */
  getValidationResult(
    request: DeepPartial<GetValidationResultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ValidationResult>;
}

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
