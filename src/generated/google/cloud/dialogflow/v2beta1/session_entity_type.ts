// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2beta1/session_entity_type.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { EntityType_Entity } from "./entity_type.js";

export const protobufPackage = "google.cloud.dialogflow.v2beta1";

/**
 * A session represents a conversation between a Dialogflow agent and an
 * end-user. You can create special entities, called session entities, during a
 * session. Session entities can extend or replace custom entity types and only
 * exist during the session that they were created for. All session data,
 * including session entities, is stored by Dialogflow for 20 minutes.
 *
 * For more information, see the [session entity
 * guide](https://cloud.google.com/dialogflow/docs/entities-session).
 */
export interface SessionEntityType {
  /**
   * Required. The unique identifier of this session entity type. Supported
   * formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity
   *   Type Display Name>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>/entityTypes/<Entity Type Display Name>`
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>/entityTypes/<Entity Type Display Name>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/environments/
   *   <Environment ID>/users/<User ID>/sessions/<Session
   *   ID>/entityTypes/<Entity Type Display Name>`
   *
   * If `Location ID` is not specified we assume default 'us' location. If
   * `Environment ID` is not specified, we assume default 'draft' environment.
   * If `User ID` is not specified, we assume default '-' user.
   * `<Entity Type Display Name>` must be the display name of an existing entity
   * type in the same agent that will be overridden or supplemented.
   */
  name: string;
  /**
   * Required. Indicates whether the additional data should override or
   * supplement the custom entity type definition.
   */
  entityOverrideMode: SessionEntityType_EntityOverrideMode;
  /**
   * Required. The collection of entities associated with this session entity
   * type.
   */
  entities: EntityType_Entity[];
}

/** The types of modifications for a session entity type. */
export enum SessionEntityType_EntityOverrideMode {
  /** ENTITY_OVERRIDE_MODE_UNSPECIFIED - Not specified. This value should be never used. */
  ENTITY_OVERRIDE_MODE_UNSPECIFIED = 0,
  /**
   * ENTITY_OVERRIDE_MODE_OVERRIDE - The collection of session entities overrides the collection of entities
   * in the corresponding custom entity type.
   */
  ENTITY_OVERRIDE_MODE_OVERRIDE = 1,
  /**
   * ENTITY_OVERRIDE_MODE_SUPPLEMENT - The collection of session entities extends the collection of entities in
   * the corresponding custom entity type.
   *
   * Note: Even in this override mode calls to `ListSessionEntityTypes`,
   * `GetSessionEntityType`, `CreateSessionEntityType` and
   * `UpdateSessionEntityType` only return the additional entities added in
   * this session entity type. If you want to get the supplemented list,
   * please call
   * [EntityTypes.GetEntityType][google.cloud.dialogflow.v2beta1.EntityTypes.GetEntityType]
   * on the custom entity type and merge.
   */
  ENTITY_OVERRIDE_MODE_SUPPLEMENT = 2,
  UNRECOGNIZED = -1,
}

export function sessionEntityType_EntityOverrideModeFromJSON(object: any): SessionEntityType_EntityOverrideMode {
  switch (object) {
    case 0:
    case "ENTITY_OVERRIDE_MODE_UNSPECIFIED":
      return SessionEntityType_EntityOverrideMode.ENTITY_OVERRIDE_MODE_UNSPECIFIED;
    case 1:
    case "ENTITY_OVERRIDE_MODE_OVERRIDE":
      return SessionEntityType_EntityOverrideMode.ENTITY_OVERRIDE_MODE_OVERRIDE;
    case 2:
    case "ENTITY_OVERRIDE_MODE_SUPPLEMENT":
      return SessionEntityType_EntityOverrideMode.ENTITY_OVERRIDE_MODE_SUPPLEMENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SessionEntityType_EntityOverrideMode.UNRECOGNIZED;
  }
}

export function sessionEntityType_EntityOverrideModeToJSON(object: SessionEntityType_EntityOverrideMode): string {
  switch (object) {
    case SessionEntityType_EntityOverrideMode.ENTITY_OVERRIDE_MODE_UNSPECIFIED:
      return "ENTITY_OVERRIDE_MODE_UNSPECIFIED";
    case SessionEntityType_EntityOverrideMode.ENTITY_OVERRIDE_MODE_OVERRIDE:
      return "ENTITY_OVERRIDE_MODE_OVERRIDE";
    case SessionEntityType_EntityOverrideMode.ENTITY_OVERRIDE_MODE_SUPPLEMENT:
      return "ENTITY_OVERRIDE_MODE_SUPPLEMENT";
    case SessionEntityType_EntityOverrideMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The request message for
 * [SessionEntityTypes.ListSessionEntityTypes][google.cloud.dialogflow.v2beta1.SessionEntityTypes.ListSessionEntityTypes].
 */
export interface ListSessionEntityTypesRequest {
  /**
   * Required. The session to list all session entity types from.
   * Supported formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>,
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>`,
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>`,
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>/users/<User ID>/sessions/<Session
   *   ID>`,
   *
   * If `Location ID` is not specified we assume default 'us' location. If
   * `Environment ID` is not specified, we assume default 'draft' environment.
   * If `User ID` is not specified, we assume default '-' user.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /** Optional. The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [SessionEntityTypes.ListSessionEntityTypes][google.cloud.dialogflow.v2beta1.SessionEntityTypes.ListSessionEntityTypes].
 */
export interface ListSessionEntityTypesResponse {
  /**
   * The list of session entity types. There will be a maximum number of items
   * returned based on the page_size field in the request.
   */
  sessionEntityTypes: SessionEntityType[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [SessionEntityTypes.GetSessionEntityType][google.cloud.dialogflow.v2beta1.SessionEntityTypes.GetSessionEntityType].
 */
export interface GetSessionEntityTypeRequest {
  /**
   * Required. The name of the session entity type. Supported formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity
   *   Type Display Name>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>/entityTypes/<Entity Type Display Name>`
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>/entityTypes/<Entity Type Display Name>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/environments/
   *   <Environment ID>/users/<User ID>/sessions/<Session
   *   ID>/entityTypes/<Entity Type Display Name>`
   *
   * If `Location ID` is not specified we assume default 'us' location. If
   * `Environment ID` is not specified, we assume default 'draft' environment.
   * If `User ID` is not specified, we assume default '-' user.
   */
  name: string;
}

/**
 * The request message for
 * [SessionEntityTypes.CreateSessionEntityType][google.cloud.dialogflow.v2beta1.SessionEntityTypes.CreateSessionEntityType].
 */
export interface CreateSessionEntityTypeRequest {
  /**
   * Required. The session to create a session entity type for.
   * Supported formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>,
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>`,
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>`,
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>/users/<User ID>/sessions/<Session
   *   ID>`,
   *
   * If `Location ID` is not specified we assume default 'us' location. If
   * `Environment ID` is not specified, we assume default 'draft' environment.
   * If `User ID` is not specified, we assume default '-' user.
   */
  parent: string;
  /** Required. The session entity type to create. */
  sessionEntityType: SessionEntityType | undefined;
}

/**
 * The request message for
 * [SessionEntityTypes.UpdateSessionEntityType][google.cloud.dialogflow.v2beta1.SessionEntityTypes.UpdateSessionEntityType].
 */
export interface UpdateSessionEntityTypeRequest {
  /** Required. The session entity type to update. */
  sessionEntityType:
    | SessionEntityType
    | undefined;
  /** Optional. The mask to control which fields get updated. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [SessionEntityTypes.DeleteSessionEntityType][google.cloud.dialogflow.v2beta1.SessionEntityTypes.DeleteSessionEntityType].
 */
export interface DeleteSessionEntityTypeRequest {
  /**
   * Required. The name of the entity type to delete.
   * Supported formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity
   *   Type Display Name>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>/entityTypes/<Entity Type Display Name>`
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>/entityTypes/<Entity Type Display Name>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/environments/
   *   <Environment ID>/users/<User ID>/sessions/<Session
   *   ID>/entityTypes/<Entity Type Display Name>`
   *
   * If `Location ID` is not specified we assume default 'us' location. If
   * `Environment ID` is not specified, we assume default 'draft' environment.
   * If `User ID` is not specified, we assume default '-' user.
   */
  name: string;
}

function createBaseSessionEntityType(): SessionEntityType {
  return { name: "", entityOverrideMode: 0, entities: [] };
}

export const SessionEntityType: MessageFns<SessionEntityType> = {
  encode(message: SessionEntityType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.entityOverrideMode !== 0) {
      writer.uint32(16).int32(message.entityOverrideMode);
    }
    for (const v of message.entities) {
      EntityType_Entity.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionEntityType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionEntityType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.entityOverrideMode = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.entities.push(EntityType_Entity.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionEntityType {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      entityOverrideMode: isSet(object.entityOverrideMode)
        ? sessionEntityType_EntityOverrideModeFromJSON(object.entityOverrideMode)
        : 0,
      entities: globalThis.Array.isArray(object?.entities)
        ? object.entities.map((e: any) => EntityType_Entity.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SessionEntityType): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.entityOverrideMode !== 0) {
      obj.entityOverrideMode = sessionEntityType_EntityOverrideModeToJSON(message.entityOverrideMode);
    }
    if (message.entities?.length) {
      obj.entities = message.entities.map((e) => EntityType_Entity.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SessionEntityType>): SessionEntityType {
    return SessionEntityType.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SessionEntityType>): SessionEntityType {
    const message = createBaseSessionEntityType();
    message.name = object.name ?? "";
    message.entityOverrideMode = object.entityOverrideMode ?? 0;
    message.entities = object.entities?.map((e) => EntityType_Entity.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListSessionEntityTypesRequest(): ListSessionEntityTypesRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListSessionEntityTypesRequest: MessageFns<ListSessionEntityTypesRequest> = {
  encode(message: ListSessionEntityTypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSessionEntityTypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionEntityTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionEntityTypesRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSessionEntityTypesRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSessionEntityTypesRequest>): ListSessionEntityTypesRequest {
    return ListSessionEntityTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSessionEntityTypesRequest>): ListSessionEntityTypesRequest {
    const message = createBaseListSessionEntityTypesRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSessionEntityTypesResponse(): ListSessionEntityTypesResponse {
  return { sessionEntityTypes: [], nextPageToken: "" };
}

export const ListSessionEntityTypesResponse: MessageFns<ListSessionEntityTypesResponse> = {
  encode(message: ListSessionEntityTypesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessionEntityTypes) {
      SessionEntityType.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSessionEntityTypesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSessionEntityTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessionEntityTypes.push(SessionEntityType.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSessionEntityTypesResponse {
    return {
      sessionEntityTypes: globalThis.Array.isArray(object?.sessionEntityTypes)
        ? object.sessionEntityTypes.map((e: any) => SessionEntityType.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSessionEntityTypesResponse): unknown {
    const obj: any = {};
    if (message.sessionEntityTypes?.length) {
      obj.sessionEntityTypes = message.sessionEntityTypes.map((e) => SessionEntityType.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListSessionEntityTypesResponse>): ListSessionEntityTypesResponse {
    return ListSessionEntityTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSessionEntityTypesResponse>): ListSessionEntityTypesResponse {
    const message = createBaseListSessionEntityTypesResponse();
    message.sessionEntityTypes = object.sessionEntityTypes?.map((e) => SessionEntityType.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetSessionEntityTypeRequest(): GetSessionEntityTypeRequest {
  return { name: "" };
}

export const GetSessionEntityTypeRequest: MessageFns<GetSessionEntityTypeRequest> = {
  encode(message: GetSessionEntityTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSessionEntityTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSessionEntityTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSessionEntityTypeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetSessionEntityTypeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSessionEntityTypeRequest>): GetSessionEntityTypeRequest {
    return GetSessionEntityTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSessionEntityTypeRequest>): GetSessionEntityTypeRequest {
    const message = createBaseGetSessionEntityTypeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateSessionEntityTypeRequest(): CreateSessionEntityTypeRequest {
  return { parent: "", sessionEntityType: undefined };
}

export const CreateSessionEntityTypeRequest: MessageFns<CreateSessionEntityTypeRequest> = {
  encode(message: CreateSessionEntityTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.sessionEntityType !== undefined) {
      SessionEntityType.encode(message.sessionEntityType, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionEntityTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionEntityTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sessionEntityType = SessionEntityType.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSessionEntityTypeRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      sessionEntityType: isSet(object.sessionEntityType)
        ? SessionEntityType.fromJSON(object.sessionEntityType)
        : undefined,
    };
  },

  toJSON(message: CreateSessionEntityTypeRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.sessionEntityType !== undefined) {
      obj.sessionEntityType = SessionEntityType.toJSON(message.sessionEntityType);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSessionEntityTypeRequest>): CreateSessionEntityTypeRequest {
    return CreateSessionEntityTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSessionEntityTypeRequest>): CreateSessionEntityTypeRequest {
    const message = createBaseCreateSessionEntityTypeRequest();
    message.parent = object.parent ?? "";
    message.sessionEntityType = (object.sessionEntityType !== undefined && object.sessionEntityType !== null)
      ? SessionEntityType.fromPartial(object.sessionEntityType)
      : undefined;
    return message;
  },
};

function createBaseUpdateSessionEntityTypeRequest(): UpdateSessionEntityTypeRequest {
  return { sessionEntityType: undefined, updateMask: undefined };
}

export const UpdateSessionEntityTypeRequest: MessageFns<UpdateSessionEntityTypeRequest> = {
  encode(message: UpdateSessionEntityTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionEntityType !== undefined) {
      SessionEntityType.encode(message.sessionEntityType, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSessionEntityTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSessionEntityTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessionEntityType = SessionEntityType.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSessionEntityTypeRequest {
    return {
      sessionEntityType: isSet(object.sessionEntityType)
        ? SessionEntityType.fromJSON(object.sessionEntityType)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSessionEntityTypeRequest): unknown {
    const obj: any = {};
    if (message.sessionEntityType !== undefined) {
      obj.sessionEntityType = SessionEntityType.toJSON(message.sessionEntityType);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSessionEntityTypeRequest>): UpdateSessionEntityTypeRequest {
    return UpdateSessionEntityTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSessionEntityTypeRequest>): UpdateSessionEntityTypeRequest {
    const message = createBaseUpdateSessionEntityTypeRequest();
    message.sessionEntityType = (object.sessionEntityType !== undefined && object.sessionEntityType !== null)
      ? SessionEntityType.fromPartial(object.sessionEntityType)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteSessionEntityTypeRequest(): DeleteSessionEntityTypeRequest {
  return { name: "" };
}

export const DeleteSessionEntityTypeRequest: MessageFns<DeleteSessionEntityTypeRequest> = {
  encode(message: DeleteSessionEntityTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSessionEntityTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSessionEntityTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSessionEntityTypeRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSessionEntityTypeRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSessionEntityTypeRequest>): DeleteSessionEntityTypeRequest {
    return DeleteSessionEntityTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSessionEntityTypeRequest>): DeleteSessionEntityTypeRequest {
    const message = createBaseDeleteSessionEntityTypeRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/**
 * Service for managing
 * [SessionEntityTypes][google.cloud.dialogflow.v2beta1.SessionEntityType].
 */
export type SessionEntityTypesDefinition = typeof SessionEntityTypesDefinition;
export const SessionEntityTypesDefinition = {
  name: "SessionEntityTypes",
  fullName: "google.cloud.dialogflow.v2beta1.SessionEntityTypes",
  methods: {
    /**
     * Returns the list of all session entity types in the specified session.
     *
     * This method doesn't work with Google Assistant integration.
     * Contact Dialogflow support if you need to use session entities
     * with Google Assistant integration.
     */
    listSessionEntityTypes: {
      name: "ListSessionEntityTypes",
      requestType: ListSessionEntityTypesRequest,
      requestStream: false,
      responseType: ListSessionEntityTypesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              184,
              2,
              90,
              82,
              18,
              80,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              90,
              71,
              18,
              69,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              90,
              94,
              18,
              92,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              18,
              57,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Retrieves the specified session entity type.
     *
     * This method doesn't work with Google Assistant integration.
     * Contact Dialogflow support if you need to use session entities
     * with Google Assistant integration.
     */
    getSessionEntityType: {
      name: "GetSessionEntityType",
      requestType: GetSessionEntityTypeRequest,
      requestStream: false,
      responseType: SessionEntityType,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              184,
              2,
              90,
              82,
              18,
              80,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              90,
              71,
              18,
              69,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              90,
              94,
              18,
              92,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              18,
              57,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a session entity type.
     *
     * If the specified session entity type already exists, overrides the
     * session entity type.
     *
     * This method doesn't work with Google Assistant integration.
     * Contact Dialogflow support if you need to use session entities
     * with Google Assistant integration.
     */
    createSessionEntityType: {
      name: "CreateSessionEntityType",
      requestType: CreateSessionEntityTypeRequest,
      requestStream: false,
      responseType: SessionEntityType,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              26,
              112,
              97,
              114,
              101,
              110,
              116,
              44,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
            ]),
          ],
          578365826: [
            Buffer.from([
              140,
              3,
              58,
              19,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              90,
              103,
              58,
              19,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              34,
              80,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              90,
              92,
              58,
              19,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              34,
              69,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              90,
              115,
              58,
              19,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              34,
              92,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              34,
              57,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified session entity type.
     *
     * This method doesn't work with Google Assistant integration.
     * Contact Dialogflow support if you need to use session entities
     * with Google Assistant integration.
     */
    updateSessionEntityType: {
      name: "UpdateSessionEntityType",
      requestType: UpdateSessionEntityTypeRequest,
      requestStream: false,
      responseType: SessionEntityType,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
            ]),
            Buffer.from([
              31,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              221,
              3,
              58,
              19,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              90,
              123,
              58,
              19,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              50,
              100,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              90,
              112,
              58,
              19,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              50,
              89,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              90,
              135,
              1,
              58,
              19,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              50,
              112,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              50,
              77,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              95,
              101,
              110,
              116,
              105,
              116,
              121,
              95,
              116,
              121,
              112,
              101,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Deletes the specified session entity type.
     *
     * This method doesn't work with Google Assistant integration.
     * Contact Dialogflow support if you need to use session entities
     * with Google Assistant integration.
     */
    deleteSessionEntityType: {
      name: "DeleteSessionEntityType",
      requestType: DeleteSessionEntityTypeRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              184,
              2,
              90,
              82,
              42,
              80,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              90,
              71,
              42,
              69,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              90,
              94,
              42,
              92,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
              42,
              57,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              101,
              110,
              116,
              105,
              116,
              121,
              84,
              121,
              112,
              101,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface SessionEntityTypesServiceImplementation<CallContextExt = {}> {
  /**
   * Returns the list of all session entity types in the specified session.
   *
   * This method doesn't work with Google Assistant integration.
   * Contact Dialogflow support if you need to use session entities
   * with Google Assistant integration.
   */
  listSessionEntityTypes(
    request: ListSessionEntityTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSessionEntityTypesResponse>>;
  /**
   * Retrieves the specified session entity type.
   *
   * This method doesn't work with Google Assistant integration.
   * Contact Dialogflow support if you need to use session entities
   * with Google Assistant integration.
   */
  getSessionEntityType(
    request: GetSessionEntityTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SessionEntityType>>;
  /**
   * Creates a session entity type.
   *
   * If the specified session entity type already exists, overrides the
   * session entity type.
   *
   * This method doesn't work with Google Assistant integration.
   * Contact Dialogflow support if you need to use session entities
   * with Google Assistant integration.
   */
  createSessionEntityType(
    request: CreateSessionEntityTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SessionEntityType>>;
  /**
   * Updates the specified session entity type.
   *
   * This method doesn't work with Google Assistant integration.
   * Contact Dialogflow support if you need to use session entities
   * with Google Assistant integration.
   */
  updateSessionEntityType(
    request: UpdateSessionEntityTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SessionEntityType>>;
  /**
   * Deletes the specified session entity type.
   *
   * This method doesn't work with Google Assistant integration.
   * Contact Dialogflow support if you need to use session entities
   * with Google Assistant integration.
   */
  deleteSessionEntityType(
    request: DeleteSessionEntityTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface SessionEntityTypesClient<CallOptionsExt = {}> {
  /**
   * Returns the list of all session entity types in the specified session.
   *
   * This method doesn't work with Google Assistant integration.
   * Contact Dialogflow support if you need to use session entities
   * with Google Assistant integration.
   */
  listSessionEntityTypes(
    request: DeepPartial<ListSessionEntityTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSessionEntityTypesResponse>;
  /**
   * Retrieves the specified session entity type.
   *
   * This method doesn't work with Google Assistant integration.
   * Contact Dialogflow support if you need to use session entities
   * with Google Assistant integration.
   */
  getSessionEntityType(
    request: DeepPartial<GetSessionEntityTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SessionEntityType>;
  /**
   * Creates a session entity type.
   *
   * If the specified session entity type already exists, overrides the
   * session entity type.
   *
   * This method doesn't work with Google Assistant integration.
   * Contact Dialogflow support if you need to use session entities
   * with Google Assistant integration.
   */
  createSessionEntityType(
    request: DeepPartial<CreateSessionEntityTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SessionEntityType>;
  /**
   * Updates the specified session entity type.
   *
   * This method doesn't work with Google Assistant integration.
   * Contact Dialogflow support if you need to use session entities
   * with Google Assistant integration.
   */
  updateSessionEntityType(
    request: DeepPartial<UpdateSessionEntityTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SessionEntityType>;
  /**
   * Deletes the specified session entity type.
   *
   * This method doesn't work with Google Assistant integration.
   * Contact Dialogflow support if you need to use session entities
   * with Google Assistant integration.
   */
  deleteSessionEntityType(
    request: DeepPartial<DeleteSessionEntityTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
