// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2beta1/context.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Struct } from "../../../protobuf/struct.js";

export const protobufPackage = "google.cloud.dialogflow.v2beta1";

/**
 * Dialogflow contexts are similar to natural language context. If a person says
 * to you "they are orange", you need context in order to understand what "they"
 * is referring to. Similarly, for Dialogflow to handle an end-user expression
 * like that, it needs to be provided with context in order to correctly match
 * an intent.
 *
 * Using contexts, you can control the flow of a conversation. You can configure
 * contexts for an intent by setting input and output contexts, which are
 * identified by string names. When an intent is matched, any configured output
 * contexts for that intent become active. While any contexts are active,
 * Dialogflow is more likely to match intents that are configured with input
 * contexts that correspond to the currently active contexts.
 *
 * For more information about context, see the
 * [Contexts guide](https://cloud.google.com/dialogflow/docs/contexts-overview).
 */
export interface Context {
  /**
   * Required. The unique identifier of the context. Supported formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context
   *   ID>`,
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>/contexts/<Context ID>`,
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>/contexts/<Context ID>`,
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>/users/<User ID>/sessions/<Session
   *   ID>/contexts/<Context ID>`,
   *
   * The `Context ID` is always converted to lowercase, may only contain
   * characters in `a-zA-Z0-9_-%` and may be at most 250 bytes long.
   *
   * If `Environment ID` is not specified, we assume default 'draft'
   * environment. If `User ID` is not specified, we assume default '-' user.
   *
   * The following context names are reserved for internal use by Dialogflow.
   * You should not use these contexts or create contexts with these names:
   *
   * * `__system_counters__`
   * * `*_id_dialog_context`
   * * `*_dialog_params_size`
   */
  name: string;
  /**
   * Optional. The number of conversational query requests after which the
   * context expires. The default is `0`. If set to `0`, the context expires
   * immediately. Contexts expire automatically after 20 minutes if there
   * are no matching queries.
   */
  lifespanCount: number;
  /**
   * Optional. The collection of parameters associated with this context.
   *
   * Depending on your protocol or client library language, this is a
   * map, associative array, symbol table, dictionary, or JSON object
   * composed of a collection of (MapKey, MapValue) pairs:
   *
   * * MapKey type: string
   * * MapKey value: parameter name
   * * MapValue type: If parameter's entity type is a composite entity then use
   * map, otherwise, depending on the parameter value type, it could be one of
   * string, number, boolean, null, list or map.
   * * MapValue value: If parameter's entity type is a composite entity then use
   * map from composite entity property names to property values, otherwise,
   * use parameter value.
   */
  parameters: { [key: string]: any } | undefined;
}

/**
 * The request message for
 * [Contexts.ListContexts][google.cloud.dialogflow.v2beta1.Contexts.ListContexts].
 */
export interface ListContextsRequest {
  /**
   * Required. The session to list all contexts from. Supported formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>,
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>`,
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>`,
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>/users/<User ID>/sessions/<Session
   *   ID>`,
   *
   * If `Location ID` is not specified we assume default 'us' location. If
   * `Environment ID` is not specified, we assume default 'draft' environment.
   * If `User ID` is not specified, we assume default '-' user.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /** Optional. The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Contexts.ListContexts][google.cloud.dialogflow.v2beta1.Contexts.ListContexts].
 */
export interface ListContextsResponse {
  /**
   * The list of contexts. There will be a maximum number of items
   * returned based on the page_size field in the request.
   */
  contexts: Context[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Contexts.GetContext][google.cloud.dialogflow.v2beta1.Contexts.GetContext].
 */
export interface GetContextRequest {
  /**
   * Required. The name of the context. Supported formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context
   *   ID>`,
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>/contexts/<Context ID>`,
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>/contexts/<Context ID>`,
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>/users/<User ID>/sessions/<Session
   *   ID>/contexts/<Context ID>`,
   *
   * If `Location ID` is not specified we assume default 'us' location. If
   * `Environment ID` is not specified, we assume default 'draft' environment.
   * If `User ID` is not specified, we assume default '-' user.
   */
  name: string;
}

/**
 * The request message for
 * [Contexts.CreateContext][google.cloud.dialogflow.v2beta1.Contexts.CreateContext].
 */
export interface CreateContextRequest {
  /**
   * Required. The session to create a context for. Supported formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>,
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>`,
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>`,
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>/users/<User ID>/sessions/<Session
   *   ID>`,
   *
   * If `Location ID` is not specified we assume default 'us' location. If
   * `Environment ID` is not specified, we assume default 'draft' environment.
   * If `User ID` is not specified, we assume default '-' user.
   */
  parent: string;
  /** Required. The context to create. */
  context: Context | undefined;
}

/**
 * The request message for
 * [Contexts.UpdateContext][google.cloud.dialogflow.v2beta1.Contexts.UpdateContext].
 */
export interface UpdateContextRequest {
  /** Required. The context to update. */
  context:
    | Context
    | undefined;
  /** Optional. The mask to control which fields get updated. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [Contexts.DeleteContext][google.cloud.dialogflow.v2beta1.Contexts.DeleteContext].
 */
export interface DeleteContextRequest {
  /**
   * Required. The name of the context to delete. Supported formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context
   *   ID>`,
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>/contexts/<Context ID>`,
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>/contexts/<Context ID>`,
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>/users/<User ID>/sessions/<Session
   *   ID>/contexts/<Context ID>`,
   *
   * If `Location ID` is not specified we assume default 'us' location. If
   * `Environment ID` is not specified, we assume default 'draft' environment.
   * If `User ID` is not specified, we assume default '-' user.
   */
  name: string;
}

/**
 * The request message for
 * [Contexts.DeleteAllContexts][google.cloud.dialogflow.v2beta1.Contexts.DeleteAllContexts].
 */
export interface DeleteAllContextsRequest {
  /**
   * Required. The name of the session to delete all contexts from. Supported
   * formats:
   * - `projects/<Project ID>/agent/sessions/<Session ID>,
   * - `projects/<Project ID>/locations/<Location ID>/agent/sessions/<Session
   *   ID>`,
   * - `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   *   ID>/sessions/<Session ID>`,
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>/users/<User ID>/sessions/<Session
   *   ID>`,
   *
   * If `Location ID` is not specified we assume default 'us' location. If
   * `Environment ID` is not specified we assume default 'draft' environment. If
   * `User ID` is not specified, we assume default '-' user.
   */
  parent: string;
}

function createBaseContext(): Context {
  return { name: "", lifespanCount: 0, parameters: undefined };
}

export const Context: MessageFns<Context> = {
  encode(message: Context, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.lifespanCount !== 0) {
      writer.uint32(16).int32(message.lifespanCount);
    }
    if (message.parameters !== undefined) {
      Struct.encode(Struct.wrap(message.parameters), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Context {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.lifespanCount = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Context {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      lifespanCount: isSet(object.lifespanCount) ? globalThis.Number(object.lifespanCount) : 0,
      parameters: isObject(object.parameters) ? object.parameters : undefined,
    };
  },

  toJSON(message: Context): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.lifespanCount !== 0) {
      obj.lifespanCount = Math.round(message.lifespanCount);
    }
    if (message.parameters !== undefined) {
      obj.parameters = message.parameters;
    }
    return obj;
  },

  create(base?: DeepPartial<Context>): Context {
    return Context.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Context>): Context {
    const message = createBaseContext();
    message.name = object.name ?? "";
    message.lifespanCount = object.lifespanCount ?? 0;
    message.parameters = object.parameters ?? undefined;
    return message;
  },
};

function createBaseListContextsRequest(): ListContextsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListContextsRequest: MessageFns<ListContextsRequest> = {
  encode(message: ListContextsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListContextsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContextsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListContextsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListContextsRequest>): ListContextsRequest {
    return ListContextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListContextsRequest>): ListContextsRequest {
    const message = createBaseListContextsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListContextsResponse(): ListContextsResponse {
  return { contexts: [], nextPageToken: "" };
}

export const ListContextsResponse: MessageFns<ListContextsResponse> = {
  encode(message: ListContextsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.contexts) {
      Context.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListContextsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListContextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.contexts.push(Context.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListContextsResponse {
    return {
      contexts: globalThis.Array.isArray(object?.contexts) ? object.contexts.map((e: any) => Context.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListContextsResponse): unknown {
    const obj: any = {};
    if (message.contexts?.length) {
      obj.contexts = message.contexts.map((e) => Context.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListContextsResponse>): ListContextsResponse {
    return ListContextsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListContextsResponse>): ListContextsResponse {
    const message = createBaseListContextsResponse();
    message.contexts = object.contexts?.map((e) => Context.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetContextRequest(): GetContextRequest {
  return { name: "" };
}

export const GetContextRequest: MessageFns<GetContextRequest> = {
  encode(message: GetContextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetContextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetContextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetContextRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetContextRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetContextRequest>): GetContextRequest {
    return GetContextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetContextRequest>): GetContextRequest {
    const message = createBaseGetContextRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateContextRequest(): CreateContextRequest {
  return { parent: "", context: undefined };
}

export const CreateContextRequest: MessageFns<CreateContextRequest> = {
  encode(message: CreateContextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateContextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateContextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateContextRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
    };
  },

  toJSON(message: CreateContextRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateContextRequest>): CreateContextRequest {
    return CreateContextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateContextRequest>): CreateContextRequest {
    const message = createBaseCreateContextRequest();
    message.parent = object.parent ?? "";
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    return message;
  },
};

function createBaseUpdateContextRequest(): UpdateContextRequest {
  return { context: undefined, updateMask: undefined };
}

export const UpdateContextRequest: MessageFns<UpdateContextRequest> = {
  encode(message: UpdateContextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.context !== undefined) {
      Context.encode(message.context, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateContextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateContextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.context = Context.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateContextRequest {
    return {
      context: isSet(object.context) ? Context.fromJSON(object.context) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateContextRequest): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = Context.toJSON(message.context);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateContextRequest>): UpdateContextRequest {
    return UpdateContextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateContextRequest>): UpdateContextRequest {
    const message = createBaseUpdateContextRequest();
    message.context = (object.context !== undefined && object.context !== null)
      ? Context.fromPartial(object.context)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteContextRequest(): DeleteContextRequest {
  return { name: "" };
}

export const DeleteContextRequest: MessageFns<DeleteContextRequest> = {
  encode(message: DeleteContextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteContextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteContextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteContextRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteContextRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteContextRequest>): DeleteContextRequest {
    return DeleteContextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteContextRequest>): DeleteContextRequest {
    const message = createBaseDeleteContextRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteAllContextsRequest(): DeleteAllContextsRequest {
  return { parent: "" };
}

export const DeleteAllContextsRequest: MessageFns<DeleteAllContextsRequest> = {
  encode(message: DeleteAllContextsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAllContextsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAllContextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAllContextsRequest {
    return { parent: isSet(object.parent) ? globalThis.String(object.parent) : "" };
  },

  toJSON(message: DeleteAllContextsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAllContextsRequest>): DeleteAllContextsRequest {
    return DeleteAllContextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAllContextsRequest>): DeleteAllContextsRequest {
    const message = createBaseDeleteAllContextsRequest();
    message.parent = object.parent ?? "";
    return message;
  },
};

/** Service for managing [Contexts][google.cloud.dialogflow.v2beta1.Context]. */
export type ContextsDefinition = typeof ContextsDefinition;
export const ContextsDefinition = {
  name: "Contexts",
  fullName: "google.cloud.dialogflow.v2beta1.Contexts",
  methods: {
    /** Returns the list of all contexts in the specified session. */
    listContexts: {
      name: "ListContexts",
      requestType: ListContextsRequest,
      requestStream: false,
      responseType: ListContextsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              172,
              2,
              90,
              79,
              18,
              77,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              90,
              68,
              18,
              66,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              90,
              91,
              18,
              89,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              18,
              54,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified context. */
    getContext: {
      name: "GetContext",
      requestType: GetContextRequest,
      requestStream: false,
      responseType: Context,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              172,
              2,
              90,
              79,
              18,
              77,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              90,
              68,
              18,
              66,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              90,
              91,
              18,
              89,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              18,
              54,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates a context.
     *
     * If the specified context already exists, overrides the context.
     */
    createContext: {
      name: "CreateContext",
      requestType: CreateContextRequest,
      requestStream: false,
      responseType: Context,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 99, 111, 110, 116, 101, 120, 116])],
          578365826: [
            Buffer.from([
              208,
              2,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              90,
              88,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              34,
              77,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              90,
              77,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              34,
              66,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              90,
              100,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              34,
              89,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              34,
              54,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Updates the specified context. */
    updateContext: {
      name: "UpdateContext",
      requestType: UpdateContextRequest,
      requestStream: false,
      responseType: Context,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([19, 99, 111, 110, 116, 101, 120, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107]),
            Buffer.from([7, 99, 111, 110, 116, 101, 120, 116]),
          ],
          578365826: [
            Buffer.from([
              240,
              2,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              90,
              96,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              50,
              85,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              90,
              85,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              50,
              74,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              90,
              108,
              58,
              7,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              50,
              97,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              50,
              62,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified context. */
    deleteContext: {
      name: "DeleteContext",
      requestType: DeleteContextRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              172,
              2,
              90,
              79,
              42,
              77,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              90,
              68,
              42,
              66,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              90,
              91,
              42,
              89,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
              42,
              54,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes all active contexts in the specified session. */
    deleteAllContexts: {
      name: "DeleteAllContexts",
      requestType: DeleteAllContextsRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              172,
              2,
              90,
              79,
              42,
              77,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              90,
              68,
              42,
              66,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              90,
              91,
              42,
              89,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              42,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
              42,
              54,
              47,
              118,
              50,
              98,
              101,
              116,
              97,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ContextsServiceImplementation<CallContextExt = {}> {
  /** Returns the list of all contexts in the specified session. */
  listContexts(
    request: ListContextsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListContextsResponse>>;
  /** Retrieves the specified context. */
  getContext(request: GetContextRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Context>>;
  /**
   * Creates a context.
   *
   * If the specified context already exists, overrides the context.
   */
  createContext(request: CreateContextRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Context>>;
  /** Updates the specified context. */
  updateContext(request: UpdateContextRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Context>>;
  /** Deletes the specified context. */
  deleteContext(request: DeleteContextRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Deletes all active contexts in the specified session. */
  deleteAllContexts(
    request: DeleteAllContextsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface ContextsClient<CallOptionsExt = {}> {
  /** Returns the list of all contexts in the specified session. */
  listContexts(
    request: DeepPartial<ListContextsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListContextsResponse>;
  /** Retrieves the specified context. */
  getContext(request: DeepPartial<GetContextRequest>, options?: CallOptions & CallOptionsExt): Promise<Context>;
  /**
   * Creates a context.
   *
   * If the specified context already exists, overrides the context.
   */
  createContext(request: DeepPartial<CreateContextRequest>, options?: CallOptions & CallOptionsExt): Promise<Context>;
  /** Updates the specified context. */
  updateContext(request: DeepPartial<UpdateContextRequest>, options?: CallOptions & CallOptionsExt): Promise<Context>;
  /** Deletes the specified context. */
  deleteContext(request: DeepPartial<DeleteContextRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Deletes all active contexts in the specified session. */
  deleteAllContexts(
    request: DeepPartial<DeleteAllContextsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
