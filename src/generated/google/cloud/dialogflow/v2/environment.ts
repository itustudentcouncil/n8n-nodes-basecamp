// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2/environment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";
import {
  OutputAudioEncoding,
  outputAudioEncodingFromJSON,
  outputAudioEncodingToJSON,
  SynthesizeSpeechConfig,
} from "./audio_config.js";
import { Fulfillment } from "./fulfillment.js";

export const protobufPackage = "google.cloud.dialogflow.v2";

/**
 * You can create multiple versions of your agent and publish them to separate
 * environments.
 *
 * When you edit an agent, you are editing the draft agent. At any point, you
 * can save the draft agent as an agent version, which is an immutable snapshot
 * of your agent.
 *
 * When you save the draft agent, it is published to the default environment.
 * When you create agent versions, you can publish them to custom environments.
 * You can create a variety of custom environments for:
 *
 * - testing
 * - development
 * - production
 * - etc.
 *
 * For more information, see the [versions and environments
 * guide](https://cloud.google.com/dialogflow/docs/agents-versions).
 */
export interface Environment {
  /**
   * Output only. The unique identifier of this agent environment.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent/environments/<Environment ID>`
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>`
   *
   * The environment ID for the default environment is `-`.
   */
  name: string;
  /**
   * Optional. The developer-provided description for this environment.
   * The maximum length is 500 characters. If exceeded, the request is rejected.
   */
  description: string;
  /**
   * Optional. The agent version loaded into this environment.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent/versions/<Version ID>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/versions/<Version
   *   ID>`
   */
  agentVersion: string;
  /**
   * Output only. The state of this environment. This field is read-only, i.e.,
   * it cannot be set by create and update methods.
   */
  state: Environment_State;
  /**
   * Output only. The last update time of this environment. This field is
   * read-only, i.e., it cannot be set by create and update methods.
   */
  updateTime:
    | Date
    | undefined;
  /** Optional. Text to speech settings for this environment. */
  textToSpeechSettings:
    | TextToSpeechSettings
    | undefined;
  /** Optional. The fulfillment settings to use for this environment. */
  fulfillment: Fulfillment | undefined;
}

/**
 * Represents an environment state. When an environment is pointed to a new
 * agent version, the environment is temporarily set to the `LOADING` state.
 * During that time, the environment keeps on serving the previous version of
 * the agent. After the new agent version is done loading, the environment is
 * set back to the `RUNNING` state.
 */
export enum Environment_State {
  /** STATE_UNSPECIFIED - Not specified. This value is not used. */
  STATE_UNSPECIFIED = 0,
  /** STOPPED - Stopped. */
  STOPPED = 1,
  /** LOADING - Loading. */
  LOADING = 2,
  /** RUNNING - Running. */
  RUNNING = 3,
  UNRECOGNIZED = -1,
}

export function environment_StateFromJSON(object: any): Environment_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return Environment_State.STATE_UNSPECIFIED;
    case 1:
    case "STOPPED":
      return Environment_State.STOPPED;
    case 2:
    case "LOADING":
      return Environment_State.LOADING;
    case 3:
    case "RUNNING":
      return Environment_State.RUNNING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Environment_State.UNRECOGNIZED;
  }
}

export function environment_StateToJSON(object: Environment_State): string {
  switch (object) {
    case Environment_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case Environment_State.STOPPED:
      return "STOPPED";
    case Environment_State.LOADING:
      return "LOADING";
    case Environment_State.RUNNING:
      return "RUNNING";
    case Environment_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Instructs the speech synthesizer on how to generate the output audio content. */
export interface TextToSpeechSettings {
  /**
   * Optional. Indicates whether text to speech is enabled. Even when this field
   * is false, other settings in this proto are still retained.
   */
  enableTextToSpeech: boolean;
  /** Required. Audio encoding of the synthesized audio content. */
  outputAudioEncoding: OutputAudioEncoding;
  /**
   * Optional. The synthesis sample rate (in hertz) for this audio. If not
   * provided, then the synthesizer will use the default sample rate based on
   * the audio encoding. If this is different from the voice's natural sample
   * rate, then the synthesizer will honor this request by converting to the
   * desired sample rate (which might result in worse audio quality).
   */
  sampleRateHertz: number;
  /**
   * Optional. Configuration of how speech should be synthesized, mapping from
   * language (https://cloud.google.com/dialogflow/docs/reference/language) to
   * SynthesizeSpeechConfig.
   */
  synthesizeSpeechConfigs: { [key: string]: SynthesizeSpeechConfig };
}

export interface TextToSpeechSettings_SynthesizeSpeechConfigsEntry {
  key: string;
  value: SynthesizeSpeechConfig | undefined;
}

/**
 * The request message for
 * [Environments.ListEnvironments][google.cloud.dialogflow.v2.Environments.ListEnvironments].
 */
export interface ListEnvironmentsRequest {
  /**
   * Required. The agent to list all environments from.
   * Format:
   *
   * - `projects/<Project ID>/agent`
   * - `projects/<Project ID>/locations/<Location ID>/agent`
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /** Optional. The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Environments.ListEnvironments][google.cloud.dialogflow.v2.Environments.ListEnvironments].
 */
export interface ListEnvironmentsResponse {
  /**
   * The list of agent environments. There will be a maximum number of items
   * returned based on the page_size field in the request.
   */
  environments: Environment[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Environments.GetEnvironment][google.cloud.dialogflow.v2.Environments.GetEnvironment].
 */
export interface GetEnvironmentRequest {
  /**
   * Required. The name of the environment.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent/environments/<Environment ID>`
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>`
   *
   * The environment ID for the default environment is `-`.
   */
  name: string;
}

/**
 * The request message for
 * [Environments.CreateEnvironment][google.cloud.dialogflow.v2.Environments.CreateEnvironment].
 */
export interface CreateEnvironmentRequest {
  /**
   * Required. The agent to create an environment for.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent`
   * - `projects/<Project ID>/locations/<Location ID>/agent`
   */
  parent: string;
  /** Required. The environment to create. */
  environment:
    | Environment
    | undefined;
  /** Required. The unique id of the new environment. */
  environmentId: string;
}

/**
 * The request message for
 * [Environments.UpdateEnvironment][google.cloud.dialogflow.v2.Environments.UpdateEnvironment].
 */
export interface UpdateEnvironmentRequest {
  /** Required. The environment to update. */
  environment:
    | Environment
    | undefined;
  /** Required. The mask to control which fields get updated. */
  updateMask:
    | string[]
    | undefined;
  /**
   * Optional. This field is used to prevent accidental overwrite of the default
   * environment, which is an operation that cannot be undone. To confirm that
   * the caller desires this overwrite, this field must be explicitly set to
   * true when updating the default environment (environment ID = `-`).
   */
  allowLoadToDraftAndDiscardChanges: boolean;
}

/**
 * The request message for
 * [Environments.DeleteEnvironment][google.cloud.dialogflow.v2.Environments.DeleteEnvironment].
 */
export interface DeleteEnvironmentRequest {
  /**
   * Required. The name of the environment to delete.
   * / Format:
   *
   * - `projects/<Project ID>/agent/environments/<Environment ID>`
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>`
   *
   * The environment ID for the default environment is `-`.
   */
  name: string;
}

/**
 * The request message for
 * [Environments.GetEnvironmentHistory][google.cloud.dialogflow.v2.Environments.GetEnvironmentHistory].
 */
export interface GetEnvironmentHistoryRequest {
  /**
   * Required. The name of the environment to retrieve history for.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent/environments/<Environment ID>`
   * - `projects/<Project ID>/locations/<Location
   *   ID>/agent/environments/<Environment ID>`
   *
   * The environment ID for the default environment is `-`.
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /** Optional. The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Environments.GetEnvironmentHistory][google.cloud.dialogflow.v2.Environments.GetEnvironmentHistory].
 */
export interface EnvironmentHistory {
  /**
   * Output only. The name of the environment this history is for.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent/environments/<Environment ID>`
   * - `projects/<Project ID>/locations/<Location
   *    ID>/agent/environments/<Environment ID>`
   *
   * The environment ID for the default environment is `-`.
   */
  parent: string;
  /**
   * Output only. The list of agent environments. There will be a maximum number
   * of items returned based on the page_size field in the request.
   */
  entries: EnvironmentHistory_Entry[];
  /**
   * Output only. Token to retrieve the next page of results, or empty if there
   * are no more results in the list.
   */
  nextPageToken: string;
}

/** Represents an environment history entry. */
export interface EnvironmentHistory_Entry {
  /** The agent version loaded into this environment history entry. */
  agentVersion: string;
  /** The developer-provided description for this environment history entry. */
  description: string;
  /** The creation time of this environment history entry. */
  createTime: Date | undefined;
}

function createBaseEnvironment(): Environment {
  return {
    name: "",
    description: "",
    agentVersion: "",
    state: 0,
    updateTime: undefined,
    textToSpeechSettings: undefined,
    fulfillment: undefined,
  };
}

export const Environment: MessageFns<Environment> = {
  encode(message: Environment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.agentVersion !== "") {
      writer.uint32(26).string(message.agentVersion);
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.textToSpeechSettings !== undefined) {
      TextToSpeechSettings.encode(message.textToSpeechSettings, writer.uint32(58).fork()).join();
    }
    if (message.fulfillment !== undefined) {
      Fulfillment.encode(message.fulfillment, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Environment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.agentVersion = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.textToSpeechSettings = TextToSpeechSettings.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.fulfillment = Fulfillment.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Environment {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      agentVersion: isSet(object.agentVersion) ? globalThis.String(object.agentVersion) : "",
      state: isSet(object.state) ? environment_StateFromJSON(object.state) : 0,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      textToSpeechSettings: isSet(object.textToSpeechSettings)
        ? TextToSpeechSettings.fromJSON(object.textToSpeechSettings)
        : undefined,
      fulfillment: isSet(object.fulfillment) ? Fulfillment.fromJSON(object.fulfillment) : undefined,
    };
  },

  toJSON(message: Environment): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.agentVersion !== "") {
      obj.agentVersion = message.agentVersion;
    }
    if (message.state !== 0) {
      obj.state = environment_StateToJSON(message.state);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.textToSpeechSettings !== undefined) {
      obj.textToSpeechSettings = TextToSpeechSettings.toJSON(message.textToSpeechSettings);
    }
    if (message.fulfillment !== undefined) {
      obj.fulfillment = Fulfillment.toJSON(message.fulfillment);
    }
    return obj;
  },

  create(base?: DeepPartial<Environment>): Environment {
    return Environment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Environment>): Environment {
    const message = createBaseEnvironment();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.agentVersion = object.agentVersion ?? "";
    message.state = object.state ?? 0;
    message.updateTime = object.updateTime ?? undefined;
    message.textToSpeechSettings = (object.textToSpeechSettings !== undefined && object.textToSpeechSettings !== null)
      ? TextToSpeechSettings.fromPartial(object.textToSpeechSettings)
      : undefined;
    message.fulfillment = (object.fulfillment !== undefined && object.fulfillment !== null)
      ? Fulfillment.fromPartial(object.fulfillment)
      : undefined;
    return message;
  },
};

function createBaseTextToSpeechSettings(): TextToSpeechSettings {
  return { enableTextToSpeech: false, outputAudioEncoding: 0, sampleRateHertz: 0, synthesizeSpeechConfigs: {} };
}

export const TextToSpeechSettings: MessageFns<TextToSpeechSettings> = {
  encode(message: TextToSpeechSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableTextToSpeech !== false) {
      writer.uint32(8).bool(message.enableTextToSpeech);
    }
    if (message.outputAudioEncoding !== 0) {
      writer.uint32(16).int32(message.outputAudioEncoding);
    }
    if (message.sampleRateHertz !== 0) {
      writer.uint32(24).int32(message.sampleRateHertz);
    }
    Object.entries(message.synthesizeSpeechConfigs).forEach(([key, value]) => {
      TextToSpeechSettings_SynthesizeSpeechConfigsEntry.encode({ key: key as any, value }, writer.uint32(34).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextToSpeechSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextToSpeechSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enableTextToSpeech = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.outputAudioEncoding = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sampleRateHertz = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = TextToSpeechSettings_SynthesizeSpeechConfigsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.synthesizeSpeechConfigs[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextToSpeechSettings {
    return {
      enableTextToSpeech: isSet(object.enableTextToSpeech) ? globalThis.Boolean(object.enableTextToSpeech) : false,
      outputAudioEncoding: isSet(object.outputAudioEncoding)
        ? outputAudioEncodingFromJSON(object.outputAudioEncoding)
        : 0,
      sampleRateHertz: isSet(object.sampleRateHertz) ? globalThis.Number(object.sampleRateHertz) : 0,
      synthesizeSpeechConfigs: isObject(object.synthesizeSpeechConfigs)
        ? Object.entries(object.synthesizeSpeechConfigs).reduce<{ [key: string]: SynthesizeSpeechConfig }>(
          (acc, [key, value]) => {
            acc[key] = SynthesizeSpeechConfig.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: TextToSpeechSettings): unknown {
    const obj: any = {};
    if (message.enableTextToSpeech !== false) {
      obj.enableTextToSpeech = message.enableTextToSpeech;
    }
    if (message.outputAudioEncoding !== 0) {
      obj.outputAudioEncoding = outputAudioEncodingToJSON(message.outputAudioEncoding);
    }
    if (message.sampleRateHertz !== 0) {
      obj.sampleRateHertz = Math.round(message.sampleRateHertz);
    }
    if (message.synthesizeSpeechConfigs) {
      const entries = Object.entries(message.synthesizeSpeechConfigs);
      if (entries.length > 0) {
        obj.synthesizeSpeechConfigs = {};
        entries.forEach(([k, v]) => {
          obj.synthesizeSpeechConfigs[k] = SynthesizeSpeechConfig.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<TextToSpeechSettings>): TextToSpeechSettings {
    return TextToSpeechSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TextToSpeechSettings>): TextToSpeechSettings {
    const message = createBaseTextToSpeechSettings();
    message.enableTextToSpeech = object.enableTextToSpeech ?? false;
    message.outputAudioEncoding = object.outputAudioEncoding ?? 0;
    message.sampleRateHertz = object.sampleRateHertz ?? 0;
    message.synthesizeSpeechConfigs = Object.entries(object.synthesizeSpeechConfigs ?? {}).reduce<
      { [key: string]: SynthesizeSpeechConfig }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = SynthesizeSpeechConfig.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseTextToSpeechSettings_SynthesizeSpeechConfigsEntry(): TextToSpeechSettings_SynthesizeSpeechConfigsEntry {
  return { key: "", value: undefined };
}

export const TextToSpeechSettings_SynthesizeSpeechConfigsEntry: MessageFns<
  TextToSpeechSettings_SynthesizeSpeechConfigsEntry
> = {
  encode(
    message: TextToSpeechSettings_SynthesizeSpeechConfigsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SynthesizeSpeechConfig.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextToSpeechSettings_SynthesizeSpeechConfigsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextToSpeechSettings_SynthesizeSpeechConfigsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = SynthesizeSpeechConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextToSpeechSettings_SynthesizeSpeechConfigsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? SynthesizeSpeechConfig.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: TextToSpeechSettings_SynthesizeSpeechConfigsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = SynthesizeSpeechConfig.toJSON(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<TextToSpeechSettings_SynthesizeSpeechConfigsEntry>,
  ): TextToSpeechSettings_SynthesizeSpeechConfigsEntry {
    return TextToSpeechSettings_SynthesizeSpeechConfigsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<TextToSpeechSettings_SynthesizeSpeechConfigsEntry>,
  ): TextToSpeechSettings_SynthesizeSpeechConfigsEntry {
    const message = createBaseTextToSpeechSettings_SynthesizeSpeechConfigsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SynthesizeSpeechConfig.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseListEnvironmentsRequest(): ListEnvironmentsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListEnvironmentsRequest: MessageFns<ListEnvironmentsRequest> = {
  encode(message: ListEnvironmentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnvironmentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnvironmentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnvironmentsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListEnvironmentsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnvironmentsRequest>): ListEnvironmentsRequest {
    return ListEnvironmentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnvironmentsRequest>): ListEnvironmentsRequest {
    const message = createBaseListEnvironmentsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListEnvironmentsResponse(): ListEnvironmentsResponse {
  return { environments: [], nextPageToken: "" };
}

export const ListEnvironmentsResponse: MessageFns<ListEnvironmentsResponse> = {
  encode(message: ListEnvironmentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.environments) {
      Environment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEnvironmentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEnvironmentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.environments.push(Environment.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEnvironmentsResponse {
    return {
      environments: globalThis.Array.isArray(object?.environments)
        ? object.environments.map((e: any) => Environment.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListEnvironmentsResponse): unknown {
    const obj: any = {};
    if (message.environments?.length) {
      obj.environments = message.environments.map((e) => Environment.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEnvironmentsResponse>): ListEnvironmentsResponse {
    return ListEnvironmentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEnvironmentsResponse>): ListEnvironmentsResponse {
    const message = createBaseListEnvironmentsResponse();
    message.environments = object.environments?.map((e) => Environment.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetEnvironmentRequest(): GetEnvironmentRequest {
  return { name: "" };
}

export const GetEnvironmentRequest: MessageFns<GetEnvironmentRequest> = {
  encode(message: GetEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEnvironmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEnvironmentRequest>): GetEnvironmentRequest {
    return GetEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEnvironmentRequest>): GetEnvironmentRequest {
    const message = createBaseGetEnvironmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateEnvironmentRequest(): CreateEnvironmentRequest {
  return { parent: "", environment: undefined, environmentId: "" };
}

export const CreateEnvironmentRequest: MessageFns<CreateEnvironmentRequest> = {
  encode(message: CreateEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.environment !== undefined) {
      Environment.encode(message.environment, writer.uint32(18).fork()).join();
    }
    if (message.environmentId !== "") {
      writer.uint32(26).string(message.environmentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.environment = Environment.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.environmentId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEnvironmentRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      environment: isSet(object.environment) ? Environment.fromJSON(object.environment) : undefined,
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
    };
  },

  toJSON(message: CreateEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.environment !== undefined) {
      obj.environment = Environment.toJSON(message.environment);
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEnvironmentRequest>): CreateEnvironmentRequest {
    return CreateEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEnvironmentRequest>): CreateEnvironmentRequest {
    const message = createBaseCreateEnvironmentRequest();
    message.parent = object.parent ?? "";
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? Environment.fromPartial(object.environment)
      : undefined;
    message.environmentId = object.environmentId ?? "";
    return message;
  },
};

function createBaseUpdateEnvironmentRequest(): UpdateEnvironmentRequest {
  return { environment: undefined, updateMask: undefined, allowLoadToDraftAndDiscardChanges: false };
}

export const UpdateEnvironmentRequest: MessageFns<UpdateEnvironmentRequest> = {
  encode(message: UpdateEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.environment !== undefined) {
      Environment.encode(message.environment, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    if (message.allowLoadToDraftAndDiscardChanges !== false) {
      writer.uint32(24).bool(message.allowLoadToDraftAndDiscardChanges);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.environment = Environment.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowLoadToDraftAndDiscardChanges = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEnvironmentRequest {
    return {
      environment: isSet(object.environment) ? Environment.fromJSON(object.environment) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      allowLoadToDraftAndDiscardChanges: isSet(object.allowLoadToDraftAndDiscardChanges)
        ? globalThis.Boolean(object.allowLoadToDraftAndDiscardChanges)
        : false,
    };
  },

  toJSON(message: UpdateEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.environment !== undefined) {
      obj.environment = Environment.toJSON(message.environment);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.allowLoadToDraftAndDiscardChanges !== false) {
      obj.allowLoadToDraftAndDiscardChanges = message.allowLoadToDraftAndDiscardChanges;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEnvironmentRequest>): UpdateEnvironmentRequest {
    return UpdateEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEnvironmentRequest>): UpdateEnvironmentRequest {
    const message = createBaseUpdateEnvironmentRequest();
    message.environment = (object.environment !== undefined && object.environment !== null)
      ? Environment.fromPartial(object.environment)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    message.allowLoadToDraftAndDiscardChanges = object.allowLoadToDraftAndDiscardChanges ?? false;
    return message;
  },
};

function createBaseDeleteEnvironmentRequest(): DeleteEnvironmentRequest {
  return { name: "" };
}

export const DeleteEnvironmentRequest: MessageFns<DeleteEnvironmentRequest> = {
  encode(message: DeleteEnvironmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEnvironmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEnvironmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEnvironmentRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteEnvironmentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEnvironmentRequest>): DeleteEnvironmentRequest {
    return DeleteEnvironmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEnvironmentRequest>): DeleteEnvironmentRequest {
    const message = createBaseDeleteEnvironmentRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetEnvironmentHistoryRequest(): GetEnvironmentHistoryRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const GetEnvironmentHistoryRequest: MessageFns<GetEnvironmentHistoryRequest> = {
  encode(message: GetEnvironmentHistoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEnvironmentHistoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEnvironmentHistoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEnvironmentHistoryRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: GetEnvironmentHistoryRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEnvironmentHistoryRequest>): GetEnvironmentHistoryRequest {
    return GetEnvironmentHistoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEnvironmentHistoryRequest>): GetEnvironmentHistoryRequest {
    const message = createBaseGetEnvironmentHistoryRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseEnvironmentHistory(): EnvironmentHistory {
  return { parent: "", entries: [], nextPageToken: "" };
}

export const EnvironmentHistory: MessageFns<EnvironmentHistory> = {
  encode(message: EnvironmentHistory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.entries) {
      EnvironmentHistory_Entry.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(26).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentHistory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentHistory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entries.push(EnvironmentHistory_Entry.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvironmentHistory {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => EnvironmentHistory_Entry.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: EnvironmentHistory): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => EnvironmentHistory_Entry.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<EnvironmentHistory>): EnvironmentHistory {
    return EnvironmentHistory.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnvironmentHistory>): EnvironmentHistory {
    const message = createBaseEnvironmentHistory();
    message.parent = object.parent ?? "";
    message.entries = object.entries?.map((e) => EnvironmentHistory_Entry.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseEnvironmentHistory_Entry(): EnvironmentHistory_Entry {
  return { agentVersion: "", description: "", createTime: undefined };
}

export const EnvironmentHistory_Entry: MessageFns<EnvironmentHistory_Entry> = {
  encode(message: EnvironmentHistory_Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agentVersion !== "") {
      writer.uint32(10).string(message.agentVersion);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentHistory_Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentHistory_Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agentVersion = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvironmentHistory_Entry {
    return {
      agentVersion: isSet(object.agentVersion) ? globalThis.String(object.agentVersion) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: EnvironmentHistory_Entry): unknown {
    const obj: any = {};
    if (message.agentVersion !== "") {
      obj.agentVersion = message.agentVersion;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<EnvironmentHistory_Entry>): EnvironmentHistory_Entry {
    return EnvironmentHistory_Entry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnvironmentHistory_Entry>): EnvironmentHistory_Entry {
    const message = createBaseEnvironmentHistory_Entry();
    message.agentVersion = object.agentVersion ?? "";
    message.description = object.description ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

/** Service for managing [Environments][google.cloud.dialogflow.v2.Environment]. */
export type EnvironmentsDefinition = typeof EnvironmentsDefinition;
export const EnvironmentsDefinition = {
  name: "Environments",
  fullName: "google.cloud.dialogflow.v2.Environments",
  methods: {
    /** Returns the list of all non-default environments of the specified agent. */
    listEnvironments: {
      name: "ListEnvironments",
      requestType: ListEnvironmentsRequest,
      requestStream: false,
      responseType: ListEnvironmentsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              102,
              90,
              56,
              18,
              54,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              18,
              42,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified agent environment. */
    getEnvironment: {
      name: "GetEnvironment",
      requestType: GetEnvironmentRequest,
      requestStream: false,
      responseType: Environment,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              102,
              90,
              56,
              18,
              54,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              18,
              42,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Creates an agent environment. */
    createEnvironment: {
      name: "CreateEnvironment",
      requestType: CreateEnvironmentRequest,
      requestStream: false,
      responseType: Environment,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              128,
              1,
              58,
              11,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              90,
              69,
              58,
              11,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              54,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              34,
              42,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified agent environment.
     *
     * This method allows you to deploy new agent versions into the environment.
     * When an environment is pointed to a new agent version by setting
     * `environment.agent_version`, the environment is temporarily set to the
     * `LOADING` state. During that time, the environment continues serving the
     * previous version of the agent. After the new agent version is done loading,
     * the environment is set back to the `RUNNING` state.
     * You can use "-" as Environment ID in environment name to update an agent
     * version in the default environment. WARNING: this will negate all recent
     * changes to the draft agent and can't be undone. You may want to save the
     * draft agent to a version before calling this method.
     */
    updateEnvironment: {
      name: "UpdateEnvironment",
      requestType: UpdateEnvironmentRequest,
      requestStream: false,
      responseType: Environment,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              152,
              1,
              58,
              11,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              90,
              81,
              58,
              11,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              50,
              66,
              47,
              118,
              50,
              47,
              123,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              50,
              54,
              47,
              118,
              50,
              47,
              123,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Deletes the specified agent environment. */
    deleteEnvironment: {
      name: "DeleteEnvironment",
      requestType: DeleteEnvironmentRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              102,
              90,
              56,
              42,
              54,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              42,
              42,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Gets the history of the specified environment. */
    getEnvironmentHistory: {
      name: "GetEnvironmentHistory",
      requestType: GetEnvironmentHistoryRequest,
      requestStream: false,
      responseType: EnvironmentHistory,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            Buffer.from([
              122,
              90,
              66,
              18,
              64,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              104,
              105,
              115,
              116,
              111,
              114,
              121,
              18,
              52,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              115,
              47,
              42,
              125,
              47,
              104,
              105,
              115,
              116,
              111,
              114,
              121,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface EnvironmentsServiceImplementation<CallContextExt = {}> {
  /** Returns the list of all non-default environments of the specified agent. */
  listEnvironments(
    request: ListEnvironmentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListEnvironmentsResponse>>;
  /** Retrieves the specified agent environment. */
  getEnvironment(
    request: GetEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Environment>>;
  /** Creates an agent environment. */
  createEnvironment(
    request: CreateEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Environment>>;
  /**
   * Updates the specified agent environment.
   *
   * This method allows you to deploy new agent versions into the environment.
   * When an environment is pointed to a new agent version by setting
   * `environment.agent_version`, the environment is temporarily set to the
   * `LOADING` state. During that time, the environment continues serving the
   * previous version of the agent. After the new agent version is done loading,
   * the environment is set back to the `RUNNING` state.
   * You can use "-" as Environment ID in environment name to update an agent
   * version in the default environment. WARNING: this will negate all recent
   * changes to the draft agent and can't be undone. You may want to save the
   * draft agent to a version before calling this method.
   */
  updateEnvironment(
    request: UpdateEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Environment>>;
  /** Deletes the specified agent environment. */
  deleteEnvironment(
    request: DeleteEnvironmentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Gets the history of the specified environment. */
  getEnvironmentHistory(
    request: GetEnvironmentHistoryRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EnvironmentHistory>>;
}

export interface EnvironmentsClient<CallOptionsExt = {}> {
  /** Returns the list of all non-default environments of the specified agent. */
  listEnvironments(
    request: DeepPartial<ListEnvironmentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListEnvironmentsResponse>;
  /** Retrieves the specified agent environment. */
  getEnvironment(
    request: DeepPartial<GetEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Environment>;
  /** Creates an agent environment. */
  createEnvironment(
    request: DeepPartial<CreateEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Environment>;
  /**
   * Updates the specified agent environment.
   *
   * This method allows you to deploy new agent versions into the environment.
   * When an environment is pointed to a new agent version by setting
   * `environment.agent_version`, the environment is temporarily set to the
   * `LOADING` state. During that time, the environment continues serving the
   * previous version of the agent. After the new agent version is done loading,
   * the environment is set back to the `RUNNING` state.
   * You can use "-" as Environment ID in environment name to update an agent
   * version in the default environment. WARNING: this will negate all recent
   * changes to the draft agent and can't be undone. You may want to save the
   * draft agent to a version before calling this method.
   */
  updateEnvironment(
    request: DeepPartial<UpdateEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Environment>;
  /** Deletes the specified agent environment. */
  deleteEnvironment(
    request: DeepPartial<DeleteEnvironmentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Gets the history of the specified environment. */
  getEnvironmentHistory(
    request: DeepPartial<GetEnvironmentHistoryRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EnvironmentHistory>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
