// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/cloud/dialogflow/v2/version.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../../protobuf/empty.js";
import { FieldMask } from "../../../protobuf/field_mask.js";
import { Timestamp } from "../../../protobuf/timestamp.js";

export const protobufPackage = "google.cloud.dialogflow.v2";

/**
 * You can create multiple versions of your agent and publish them to separate
 * environments.
 *
 * When you edit an agent, you are editing the draft agent. At any point, you
 * can save the draft agent as an agent version, which is an immutable snapshot
 * of your agent.
 *
 * When you save the draft agent, it is published to the default environment.
 * When you create agent versions, you can publish them to custom environments.
 * You can create a variety of custom environments for:
 *
 * - testing
 * - development
 * - production
 * - etc.
 *
 * For more information, see the [versions and environments
 * guide](https://cloud.google.com/dialogflow/docs/agents-versions).
 */
export interface Version {
  /**
   * Output only. The unique identifier of this agent version.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent/versions/<Version ID>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/versions/<Version
   *   ID>`
   */
  name: string;
  /** Optional. The developer-provided description of this version. */
  description: string;
  /**
   * Output only. The sequential number of this version. This field is read-only
   * which means it cannot be set by create and update methods.
   */
  versionNumber: number;
  /**
   * Output only. The creation time of this version. This field is read-only,
   * i.e., it cannot be set by create and update methods.
   */
  createTime:
    | Date
    | undefined;
  /**
   * Output only. The status of this version. This field is read-only and cannot
   * be set by create and update methods.
   */
  status: Version_VersionStatus;
}

/** The status of a version. */
export enum Version_VersionStatus {
  /** VERSION_STATUS_UNSPECIFIED - Not specified. This value is not used. */
  VERSION_STATUS_UNSPECIFIED = 0,
  /** IN_PROGRESS - Version is not ready to serve (e.g. training is in progress). */
  IN_PROGRESS = 1,
  /** READY - Version is ready to serve. */
  READY = 2,
  /** FAILED - Version training failed. */
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export function version_VersionStatusFromJSON(object: any): Version_VersionStatus {
  switch (object) {
    case 0:
    case "VERSION_STATUS_UNSPECIFIED":
      return Version_VersionStatus.VERSION_STATUS_UNSPECIFIED;
    case 1:
    case "IN_PROGRESS":
      return Version_VersionStatus.IN_PROGRESS;
    case 2:
    case "READY":
      return Version_VersionStatus.READY;
    case 3:
    case "FAILED":
      return Version_VersionStatus.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Version_VersionStatus.UNRECOGNIZED;
  }
}

export function version_VersionStatusToJSON(object: Version_VersionStatus): string {
  switch (object) {
    case Version_VersionStatus.VERSION_STATUS_UNSPECIFIED:
      return "VERSION_STATUS_UNSPECIFIED";
    case Version_VersionStatus.IN_PROGRESS:
      return "IN_PROGRESS";
    case Version_VersionStatus.READY:
      return "READY";
    case Version_VersionStatus.FAILED:
      return "FAILED";
    case Version_VersionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * The request message for
 * [Versions.ListVersions][google.cloud.dialogflow.v2.Versions.ListVersions].
 */
export interface ListVersionsRequest {
  /**
   * Required. The agent to list all versions from.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent`
   * - `projects/<Project ID>/locations/<Location ID>/agent`
   */
  parent: string;
  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   */
  pageSize: number;
  /** Optional. The next_page_token value returned from a previous list request. */
  pageToken: string;
}

/**
 * The response message for
 * [Versions.ListVersions][google.cloud.dialogflow.v2.Versions.ListVersions].
 */
export interface ListVersionsResponse {
  /**
   * The list of agent versions. There will be a maximum number of items
   * returned based on the page_size field in the request.
   */
  versions: Version[];
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

/**
 * The request message for
 * [Versions.GetVersion][google.cloud.dialogflow.v2.Versions.GetVersion].
 */
export interface GetVersionRequest {
  /**
   * Required. The name of the version.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent/versions/<Version ID>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/versions/<Version
   *   ID>`
   */
  name: string;
}

/**
 * The request message for
 * [Versions.CreateVersion][google.cloud.dialogflow.v2.Versions.CreateVersion].
 */
export interface CreateVersionRequest {
  /**
   * Required. The agent to create a version for.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent`
   * - `projects/<Project ID>/locations/<Location ID>/agent`
   */
  parent: string;
  /** Required. The version to create. */
  version: Version | undefined;
}

/**
 * The request message for
 * [Versions.UpdateVersion][google.cloud.dialogflow.v2.Versions.UpdateVersion].
 */
export interface UpdateVersionRequest {
  /**
   * Required. The version to update.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent/versions/<Version ID>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/versions/<Version
   *   ID>`
   */
  version:
    | Version
    | undefined;
  /** Required. The mask to control which fields get updated. */
  updateMask: string[] | undefined;
}

/**
 * The request message for
 * [Versions.DeleteVersion][google.cloud.dialogflow.v2.Versions.DeleteVersion].
 */
export interface DeleteVersionRequest {
  /**
   * Required. The name of the version to delete.
   * Supported formats:
   *
   * - `projects/<Project ID>/agent/versions/<Version ID>`
   * - `projects/<Project ID>/locations/<Location ID>/agent/versions/<Version
   *   ID>`
   */
  name: string;
}

function createBaseVersion(): Version {
  return { name: "", description: "", versionNumber: 0, createTime: undefined, status: 0 };
}

export const Version: MessageFns<Version> = {
  encode(message: Version, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.versionNumber !== 0) {
      writer.uint32(24).int32(message.versionNumber);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(34).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Version {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.versionNumber = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Version {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      versionNumber: isSet(object.versionNumber) ? globalThis.Number(object.versionNumber) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      status: isSet(object.status) ? version_VersionStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: Version): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.versionNumber !== 0) {
      obj.versionNumber = Math.round(message.versionNumber);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.status !== 0) {
      obj.status = version_VersionStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<Version>): Version {
    return Version.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Version>): Version {
    const message = createBaseVersion();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.versionNumber = object.versionNumber ?? 0;
    message.createTime = object.createTime ?? undefined;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseListVersionsRequest(): ListVersionsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListVersionsRequest: MessageFns<ListVersionsRequest> = {
  encode(message: ListVersionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVersionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVersionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVersionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListVersionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVersionsRequest>): ListVersionsRequest {
    return ListVersionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVersionsRequest>): ListVersionsRequest {
    const message = createBaseListVersionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListVersionsResponse(): ListVersionsResponse {
  return { versions: [], nextPageToken: "" };
}

export const ListVersionsResponse: MessageFns<ListVersionsResponse> = {
  encode(message: ListVersionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.versions) {
      Version.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListVersionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListVersionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.versions.push(Version.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListVersionsResponse {
    return {
      versions: globalThis.Array.isArray(object?.versions) ? object.versions.map((e: any) => Version.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListVersionsResponse): unknown {
    const obj: any = {};
    if (message.versions?.length) {
      obj.versions = message.versions.map((e) => Version.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListVersionsResponse>): ListVersionsResponse {
    return ListVersionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListVersionsResponse>): ListVersionsResponse {
    const message = createBaseListVersionsResponse();
    message.versions = object.versions?.map((e) => Version.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetVersionRequest(): GetVersionRequest {
  return { name: "" };
}

export const GetVersionRequest: MessageFns<GetVersionRequest> = {
  encode(message: GetVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetVersionRequest>): GetVersionRequest {
    return GetVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetVersionRequest>): GetVersionRequest {
    const message = createBaseGetVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateVersionRequest(): CreateVersionRequest {
  return { parent: "", version: undefined };
}

export const CreateVersionRequest: MessageFns<CreateVersionRequest> = {
  encode(message: CreateVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVersionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
    };
  },

  toJSON(message: CreateVersionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateVersionRequest>): CreateVersionRequest {
    return CreateVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateVersionRequest>): CreateVersionRequest {
    const message = createBaseCreateVersionRequest();
    message.parent = object.parent ?? "";
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    return message;
  },
};

function createBaseUpdateVersionRequest(): UpdateVersionRequest {
  return { version: undefined, updateMask: undefined };
}

export const UpdateVersionRequest: MessageFns<UpdateVersionRequest> = {
  encode(message: UpdateVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateVersionRequest {
    return {
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateVersionRequest): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateVersionRequest>): UpdateVersionRequest {
    return UpdateVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateVersionRequest>): UpdateVersionRequest {
    const message = createBaseUpdateVersionRequest();
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteVersionRequest(): DeleteVersionRequest {
  return { name: "" };
}

export const DeleteVersionRequest: MessageFns<DeleteVersionRequest> = {
  encode(message: DeleteVersionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteVersionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteVersionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteVersionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteVersionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteVersionRequest>): DeleteVersionRequest {
    return DeleteVersionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteVersionRequest>): DeleteVersionRequest {
    const message = createBaseDeleteVersionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

/** Service for managing [Versions][google.cloud.dialogflow.v2.Version]. */
export type VersionsDefinition = typeof VersionsDefinition;
export const VersionsDefinition = {
  name: "Versions",
  fullName: "google.cloud.dialogflow.v2.Versions",
  methods: {
    /** Returns the list of all versions of the specified agent. */
    listVersions: {
      name: "ListVersions",
      requestType: ListVersionsRequest,
      requestStream: false,
      responseType: ListVersionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([6, 112, 97, 114, 101, 110, 116])],
          578365826: [
            Buffer.from([
              94,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              18,
              38,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** Retrieves the specified agent version. */
    getVersion: {
      name: "GetVersion",
      requestType: GetVersionRequest,
      requestStream: false,
      responseType: Version,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              94,
              90,
              52,
              18,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              18,
              38,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /**
     * Creates an agent version.
     *
     * The new version points to the agent instance in the "default" environment.
     */
    createVersion: {
      name: "CreateVersion",
      requestType: CreateVersionRequest,
      requestStream: false,
      responseType: Version,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([14, 112, 97, 114, 101, 110, 116, 44, 118, 101, 114, 115, 105, 111, 110])],
          578365826: [
            Buffer.from([
              112,
              58,
              7,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              90,
              61,
              58,
              7,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              50,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              34,
              38,
              47,
              118,
              50,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              125,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /**
     * Updates the specified agent version.
     *
     * Note that this method does not allow you to update the state of the agent
     * the given version points to. It allows you to update only mutable
     * properties of the version resource.
     */
    updateVersion: {
      name: "UpdateVersion",
      requestType: UpdateVersionRequest,
      requestStream: false,
      responseType: Version,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            Buffer.from([
              19,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            Buffer.from([
              128,
              1,
              58,
              7,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              90,
              69,
              58,
              7,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              50,
              58,
              47,
              118,
              50,
              47,
              123,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              50,
              46,
              47,
              118,
              50,
              47,
              123,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    /** Delete the specified agent version. */
    deleteVersion: {
      name: "DeleteVersion",
      requestType: DeleteVersionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [Buffer.from([4, 110, 97, 109, 101])],
          578365826: [
            Buffer.from([
              94,
              90,
              52,
              42,
              50,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              42,
              38,
              47,
              118,
              50,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              97,
              103,
              101,
              110,
              116,
              47,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface VersionsServiceImplementation<CallContextExt = {}> {
  /** Returns the list of all versions of the specified agent. */
  listVersions(
    request: ListVersionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListVersionsResponse>>;
  /** Retrieves the specified agent version. */
  getVersion(request: GetVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Version>>;
  /**
   * Creates an agent version.
   *
   * The new version points to the agent instance in the "default" environment.
   */
  createVersion(request: CreateVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Version>>;
  /**
   * Updates the specified agent version.
   *
   * Note that this method does not allow you to update the state of the agent
   * the given version points to. It allows you to update only mutable
   * properties of the version resource.
   */
  updateVersion(request: UpdateVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Version>>;
  /** Delete the specified agent version. */
  deleteVersion(request: DeleteVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface VersionsClient<CallOptionsExt = {}> {
  /** Returns the list of all versions of the specified agent. */
  listVersions(
    request: DeepPartial<ListVersionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListVersionsResponse>;
  /** Retrieves the specified agent version. */
  getVersion(request: DeepPartial<GetVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Version>;
  /**
   * Creates an agent version.
   *
   * The new version points to the agent instance in the "default" environment.
   */
  createVersion(request: DeepPartial<CreateVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Version>;
  /**
   * Updates the specified agent version.
   *
   * Note that this method does not allow you to update the state of the agent
   * the given version points to. It allows you to update only mutable
   * properties of the version resource.
   */
  updateVersion(request: DeepPartial<UpdateVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Version>;
  /** Delete the specified agent version. */
  deleteVersion(request: DeepPartial<DeleteVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
